
Matte Box Rev 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016518  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000042b4  080166b8  080166b8  000266b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a96c  0801a96c  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  0801a96c  0801a96c  0002a96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a974  0801a974  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a974  0801a974  0002a974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a978  0801a978  0002a978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0801a97c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002608  20000238  0801abb4  00030238  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002840  0801abb4  00032840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a79d  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007cf8  00000000  00000000  0006aa05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002288  00000000  00000000  00072700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f18  00000000  00000000  00074988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012143  00000000  00000000  000768a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00029f3e  00000000  00000000  000889e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b152a  00000000  00000000  000b2921  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00163e4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008edc  00000000  00000000  00163ec8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080166a0 	.word	0x080166a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	080166a0 	.word	0x080166a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
    //if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <DWT_Init+0x2c>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <DWT_Init+0x2c>)
 8000d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d7a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <DWT_Init+0x30>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <DWT_Init+0x30>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <DWT_Init+0x30>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]
    //}
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000edf0 	.word	0xe000edf0
 8000d9c:	e0001000 	.word	0xe0001000

08000da0 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <DWT_Delay+0x40>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <DWT_Delay+0x44>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <DWT_Delay+0x48>)
 8000db4:	fba2 2303 	umull	r2, r3, r2, r3
 8000db8:	0c9a      	lsrs	r2, r3, #18
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000dc2:	bf00      	nop
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <DWT_Delay+0x40>)
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d8f8      	bhi.n	8000dc4 <DWT_Delay+0x24>
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e0001000 	.word	0xe0001000
 8000de4:	2000004c 	.word	0x2000004c
 8000de8:	431bde83 	.word	0x431bde83

08000dec <updateFilterSection>:
 *******************************************************************************/

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/
filterSectionStatus_t updateFilterSection(detectedTags_t *dTag, filterSection_t *currentFilters){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	filterSectionStatus_t status = NO_CHANGE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	77fb      	strb	r3, [r7, #31]
	bool UIDMatched = false;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	77bb      	strb	r3, [r7, #30]
	uint8_t tempZero[10] = {0};
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	811a      	strh	r2, [r3, #8]
	// For Loop Variables
	uint8_t detectedTag;
	uint8_t currentTag;

	// Look for filters that have been removed
	for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	773b      	strb	r3, [r7, #28]
 8000e0e:	e07d      	b.n	8000f0c <updateFilterSection+0x120>
		UIDMatched = false;
 8000e10:	2300      	movs	r3, #0
 8000e12:	77bb      	strb	r3, [r7, #30]
		// Take each current filter tag UID and try to locate it within the detected tags.
		for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000e14:	2300      	movs	r3, #0
 8000e16:	777b      	strb	r3, [r7, #29]
 8000e18:	e02f      	b.n	8000e7a <updateFilterSection+0x8e>
			if (memcmp(dTag->filterTags[detectedTag].tagUID, currentFilters->filter[currentTag].filterTagUID, 8) == 0){
 8000e1a:	7f7a      	ldrb	r2, [r7, #29]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	4413      	add	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	1c58      	adds	r0, r3, #1
 8000e2a:	7f3a      	ldrb	r2, [r7, #28]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	3308      	adds	r3, #8
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3303      	adds	r3, #3
 8000e3e:	2208      	movs	r2, #8
 8000e40:	4619      	mov	r1, r3
 8000e42:	f015 f807 	bl	8015e54 <memcmp>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d113      	bne.n	8000e74 <updateFilterSection+0x88>
				// To Prevent matching 2 empty stages
				if (memcmp(dTag->filterTags[detectedTag].tagUID, tempZero, 8) != 0){
 8000e4c:	7f7a      	ldrb	r2, [r7, #29]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	f107 010c 	add.w	r1, r7, #12
 8000e60:	2208      	movs	r2, #8
 8000e62:	4618      	mov	r0, r3
 8000e64:	f014 fff6 	bl	8015e54 <memcmp>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <updateFilterSection+0x88>
					// Found a match. The tag is still here.
					UIDMatched = true;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	77bb      	strb	r3, [r7, #30]
					break;
 8000e72:	e005      	b.n	8000e80 <updateFilterSection+0x94>
		for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000e74:	7f7b      	ldrb	r3, [r7, #29]
 8000e76:	3301      	adds	r3, #1
 8000e78:	777b      	strb	r3, [r7, #29]
 8000e7a:	7f7b      	ldrb	r3, [r7, #29]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d9cc      	bls.n	8000e1a <updateFilterSection+0x2e>
				}
			}
		}

		if (!UIDMatched){
 8000e80:	7fbb      	ldrb	r3, [r7, #30]
 8000e82:	f083 0301 	eor.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d03c      	beq.n	8000f06 <updateFilterSection+0x11a>
			// Make sure the UID is not all 0's
			if (memcmp(currentFilters->filter[currentTag].filterTagUID, tempZero, 8) != 0){
 8000e8c:	7f3a      	ldrb	r2, [r7, #28]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4413      	add	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	3308      	adds	r3, #8
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	3303      	adds	r3, #3
 8000ea0:	f107 010c 	add.w	r1, r7, #12
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f014 ffd4 	bl	8015e54 <memcmp>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d029      	beq.n	8000f06 <updateFilterSection+0x11a>
				// A filter has been taken out
				// Clear UID, Name, and Position
				memset(currentFilters->filter[currentTag].filterTagUID, 0x00, 8);
 8000eb2:	7f3a      	ldrb	r2, [r7, #28]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4413      	add	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3303      	adds	r3, #3
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f014 ffdc 	bl	8015e88 <memset>
				memset(currentFilters->filter[currentTag].filterName, 0x00, 10);
 8000ed0:	7f3a      	ldrb	r2, [r7, #28]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4413      	add	r3, r2
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	220a      	movs	r2, #10
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f014 ffce 	bl	8015e88 <memset>
				currentFilters->filter[currentTag].position = 0;
 8000eec:	7f3a      	ldrb	r2, [r7, #28]
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	3313      	adds	r3, #19
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
				status = FILTER_REMOVED;
 8000f02:	2301      	movs	r3, #1
 8000f04:	77fb      	strb	r3, [r7, #31]
	for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++) {
 8000f06:	7f3b      	ldrb	r3, [r7, #28]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	773b      	strb	r3, [r7, #28]
 8000f0c:	7f3b      	ldrb	r3, [r7, #28]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	f67f af7e 	bls.w	8000e10 <updateFilterSection+0x24>
			}
		}
	}

	// Look for filters that have been installed
	for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000f14:	2300      	movs	r3, #0
 8000f16:	777b      	strb	r3, [r7, #29]
 8000f18:	e0bc      	b.n	8001094 <updateFilterSection+0x2a8>
		UIDMatched = false;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	77bb      	strb	r3, [r7, #30]
		// Loop through each detected UID and try to find it within the current filters
		for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++){
 8000f1e:	2300      	movs	r3, #0
 8000f20:	773b      	strb	r3, [r7, #28]
 8000f22:	e01e      	b.n	8000f62 <updateFilterSection+0x176>
			if (memcmp(dTag->filterTags[detectedTag].tagUID, currentFilters->filter[currentTag].filterTagUID, 8) == 0){
 8000f24:	7f7a      	ldrb	r2, [r7, #29]
 8000f26:	4613      	mov	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	1c58      	adds	r0, r3, #1
 8000f34:	7f3a      	ldrb	r2, [r7, #28]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	3308      	adds	r3, #8
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	3303      	adds	r3, #3
 8000f48:	2208      	movs	r2, #8
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f014 ff82 	bl	8015e54 <memcmp>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d102      	bne.n	8000f5c <updateFilterSection+0x170>
				// Found a match. The tag is still installed.
				UIDMatched = true;
 8000f56:	2301      	movs	r3, #1
 8000f58:	77bb      	strb	r3, [r7, #30]
				break;
 8000f5a:	e005      	b.n	8000f68 <updateFilterSection+0x17c>
		for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++){
 8000f5c:	7f3b      	ldrb	r3, [r7, #28]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	773b      	strb	r3, [r7, #28]
 8000f62:	7f3b      	ldrb	r3, [r7, #28]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d9dd      	bls.n	8000f24 <updateFilterSection+0x138>
			}
		}

		if (!UIDMatched){
 8000f68:	7fbb      	ldrb	r3, [r7, #30]
 8000f6a:	f083 0301 	eor.w	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 808c 	beq.w	800108e <updateFilterSection+0x2a2>
			// Make sure the detected UID is not all 0's
			if (memcmp(dTag->filterTags[detectedTag].tagUID, tempZero, 8) != 0){
 8000f76:	7f7a      	ldrb	r2, [r7, #29]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	3301      	adds	r3, #1
 8000f86:	f107 010c 	add.w	r1, r7, #12
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f014 ff61 	bl	8015e54 <memcmp>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d07a      	beq.n	800108e <updateFilterSection+0x2a2>
				// A new filter has been installed.
				bool stageEmpty; // Holder for the empty stage
				uint8_t stagePos;

				// Check the name to see if it isn't all zero's
				if (memcmp(dTag->filterTags[detectedTag].tagName, tempZero, 10) != 0){
 8000f98:	7f7a      	ldrb	r2, [r7, #29]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f107 010c 	add.w	r1, r7, #12
 8000fae:	220a      	movs	r2, #10
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f014 ff4f 	bl	8015e54 <memcmp>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d066      	beq.n	800108a <updateFilterSection+0x29e>
					// Find first empty stage
					for (stagePos = 0; stagePos < FILTER_SECTION_SIZE; stagePos++){
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	76bb      	strb	r3, [r7, #26]
 8000fc0:	e021      	b.n	8001006 <updateFilterSection+0x21a>
						stageEmpty = true; // Assume the stage is empty
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	76fb      	strb	r3, [r7, #27]
						for (uint8_t curFilter = 0; curFilter < FILTER_SECTION_SIZE; curFilter++){
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	767b      	strb	r3, [r7, #25]
 8000fca:	e013      	b.n	8000ff4 <updateFilterSection+0x208>
							if (currentFilters->filter[curFilter].position == stagePos + 1){
 8000fcc:	7e7a      	ldrb	r2, [r7, #25]
 8000fce:	6839      	ldr	r1, [r7, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3313      	adds	r3, #19
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	7ebb      	ldrb	r3, [r7, #26]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d101      	bne.n	8000fee <updateFilterSection+0x202>
								//There is a filter loaded in this position
								stageEmpty = false;
 8000fea:	2300      	movs	r3, #0
 8000fec:	76fb      	strb	r3, [r7, #27]
						for (uint8_t curFilter = 0; curFilter < FILTER_SECTION_SIZE; curFilter++){
 8000fee:	7e7b      	ldrb	r3, [r7, #25]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	767b      	strb	r3, [r7, #25]
 8000ff4:	7e7b      	ldrb	r3, [r7, #25]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d9e8      	bls.n	8000fcc <updateFilterSection+0x1e0>
							}
						}

						if (stageEmpty) {
 8000ffa:	7efb      	ldrb	r3, [r7, #27]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d106      	bne.n	800100e <updateFilterSection+0x222>
					for (stagePos = 0; stagePos < FILTER_SECTION_SIZE; stagePos++){
 8001000:	7ebb      	ldrb	r3, [r7, #26]
 8001002:	3301      	adds	r3, #1
 8001004:	76bb      	strb	r3, [r7, #26]
 8001006:	7ebb      	ldrb	r3, [r7, #26]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d9da      	bls.n	8000fc2 <updateFilterSection+0x1d6>
 800100c:	e000      	b.n	8001010 <updateFilterSection+0x224>
							// Searched through all Filter positions, and this stage is empty
							break; // Break for loop and access stagePos for first empty stage
 800100e:	bf00      	nop
						}
					}

					// The first open stage is stored in stagePos
					// Write the new UID, Name, and Position
					memcpy(currentFilters->filter[stagePos].filterTagUID, dTag->filterTags[detectedTag].tagUID, 8);
 8001010:	7eba      	ldrb	r2, [r7, #26]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	3308      	adds	r3, #8
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	4413      	add	r3, r2
 8001022:	1cd8      	adds	r0, r3, #3
 8001024:	7f7a      	ldrb	r2, [r7, #29]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	3301      	adds	r3, #1
 8001034:	2208      	movs	r2, #8
 8001036:	4619      	mov	r1, r3
 8001038:	f014 ff1b 	bl	8015e72 <memcpy>
					memcpy(currentFilters->filter[stagePos].filterName, dTag->filterTags[detectedTag].tagName, 10);
 800103c:	7eba      	ldrb	r2, [r7, #26]
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	4413      	add	r3, r2
 800104c:	1c58      	adds	r0, r3, #1
 800104e:	7f7a      	ldrb	r2, [r7, #29]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	3308      	adds	r3, #8
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	3301      	adds	r3, #1
 8001060:	220a      	movs	r2, #10
 8001062:	4619      	mov	r1, r3
 8001064:	f014 ff05 	bl	8015e72 <memcpy>
					currentFilters->filter[stagePos].position = stagePos + 1;
 8001068:	7eba      	ldrb	r2, [r7, #26]
 800106a:	7ebb      	ldrb	r3, [r7, #26]
 800106c:	3301      	adds	r3, #1
 800106e:	b2d8      	uxtb	r0, r3
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	440b      	add	r3, r1
 800107e:	3313      	adds	r3, #19
 8001080:	4602      	mov	r2, r0
 8001082:	701a      	strb	r2, [r3, #0]
					status = FILTER_INSTALLED;
 8001084:	2302      	movs	r3, #2
 8001086:	77fb      	strb	r3, [r7, #31]
 8001088:	e001      	b.n	800108e <updateFilterSection+0x2a2>
				} else {
					// The name is unknown
					status = UNKNOWN_FILTER_NAME;
 800108a:	2303      	movs	r3, #3
 800108c:	77fb      	strb	r3, [r7, #31]
	for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 800108e:	7f7b      	ldrb	r3, [r7, #29]
 8001090:	3301      	adds	r3, #1
 8001092:	777b      	strb	r3, [r7, #29]
 8001094:	7f7b      	ldrb	r3, [r7, #29]
 8001096:	2b02      	cmp	r3, #2
 8001098:	f67f af3f 	bls.w	8000f1a <updateFilterSection+0x12e>
			}
		}
	}

	// Update the filter counts
	currentFilters->filterCount = dTag->tagCount;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	701a      	strb	r2, [r3, #0]

	return status;
 80010a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <setupIOs>:

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/

void setupIOs(void){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af02      	add	r7, sp, #8

	// Initialize the temperature sensor
	LM75B_Init(&hi2c1, AUX_POWER_GPIO_Port, AUX_POWER_Pin);
 80010b6:	2220      	movs	r2, #32
 80010b8:	4921      	ldr	r1, [pc, #132]	; (8001140 <setupIOs+0x90>)
 80010ba:	4822      	ldr	r0, [pc, #136]	; (8001144 <setupIOs+0x94>)
 80010bc:	f002 f908 	bl	80032d0 <LM75B_Init>

	// Initialize and Setup the E-Paper Display
	EPD_Init(EPD_2_0, &hspi2, &epd1);
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <setupIOs+0x98>)
 80010c2:	4922      	ldr	r1, [pc, #136]	; (800114c <setupIOs+0x9c>)
 80010c4:	2002      	movs	r0, #2
 80010c6:	f000 fb57 	bl	8001778 <EPD_Init>

	// Initialize the GFX Library for the EPD
	Canvas_Init(&canvas1, epd1.dots_per_line, epd1.lines_per_display);
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <setupIOs+0x98>)
 80010cc:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <setupIOs+0x98>)
 80010d0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80010d2:	461a      	mov	r2, r3
 80010d4:	481e      	ldr	r0, [pc, #120]	; (8001150 <setupIOs+0xa0>)
 80010d6:	f001 fd0d 	bl	8002af4 <Canvas_Init>
	// Text rotation for a vertical display orientation
	canvas_SetRotate(&canvas1, ROTATE_90);
 80010da:	2101      	movs	r1, #1
 80010dc:	481c      	ldr	r0, [pc, #112]	; (8001150 <setupIOs+0xa0>)
 80010de:	f001 fedf 	bl	8002ea0 <canvas_SetRotate>

	// Clear the EPD
	EPD_begin(&epd1);
 80010e2:	4819      	ldr	r0, [pc, #100]	; (8001148 <setupIOs+0x98>)
 80010e4:	f000 fc7c 	bl	80019e0 <EPD_begin>
	EPD_clear(&epd1);
 80010e8:	4817      	ldr	r0, [pc, #92]	; (8001148 <setupIOs+0x98>)
 80010ea:	f001 f805 	bl	80020f8 <EPD_clear>
	EPD_end(&epd1);
 80010ee:	4816      	ldr	r0, [pc, #88]	; (8001148 <setupIOs+0x98>)
 80010f0:	f000 fee6 	bl	8001ec0 <EPD_end>

	// Render a string of text to the buffer image
	canvas_setBGImage(&canvas1, image_background);
 80010f4:	4917      	ldr	r1, [pc, #92]	; (8001154 <setupIOs+0xa4>)
 80010f6:	4816      	ldr	r0, [pc, #88]	; (8001150 <setupIOs+0xa0>)
 80010f8:	f002 f8bb 	bl	8003272 <canvas_setBGImage>
	canvas_DrawStringAt(&canvas1, 10, 3, "FILTERS", &Font16, 1);
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <setupIOs+0xa8>)
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <setupIOs+0xac>)
 8001106:	2203      	movs	r2, #3
 8001108:	210a      	movs	r1, #10
 800110a:	4811      	ldr	r0, [pc, #68]	; (8001150 <setupIOs+0xa0>)
 800110c:	f002 f86b 	bl	80031e6 <canvas_DrawStringAt>
	// Update the EPD with the new image
	canvas_PrintEPD(&canvas1, &epd1);
 8001110:	490d      	ldr	r1, [pc, #52]	; (8001148 <setupIOs+0x98>)
 8001112:	480f      	ldr	r0, [pc, #60]	; (8001150 <setupIOs+0xa0>)
 8001114:	f002 f898 	bl	8003248 <canvas_PrintEPD>
	//  BQ27441_Init(&hi2c1, &lipo1);
	//  // Setup the Fuel Gauge
	//  BQ27441_Setup(&lipo1);

	// Initialize the SD Card
	dataLoggerInit(SDIO_POWER_GPIO_Port, SDIO_POWER_Pin);
 8001118:	2140      	movs	r1, #64	; 0x40
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <setupIOs+0xb0>)
 800111c:	f000 f928 	bl	8001370 <dataLoggerInit>

	HAL_GPIO_WritePin(RFID_POWER_GPIO_Port, RFID_POWER_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2108      	movs	r1, #8
 8001124:	480f      	ldr	r0, [pc, #60]	; (8001164 <setupIOs+0xb4>)
 8001126:	f004 f99b 	bl	8005460 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800112a:	2005      	movs	r0, #5
 800112c:	f003 fea8 	bl	8004e80 <HAL_Delay>
	spiInit(&hspi1);
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <setupIOs+0xb8>)
 8001132:	f002 fed7 	bl	8003ee4 <spiInit>

	rfidControllerInit();
 8001136:	f002 fdf1 	bl	8003d1c <rfidControllerInit>
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40020400 	.word	0x40020400
 8001144:	20000fd4 	.word	0x20000fd4
 8001148:	20000ed4 	.word	0x20000ed4
 800114c:	20000f7c 	.word	0x20000f7c
 8001150:	20000f60 	.word	0x20000f60
 8001154:	08016898 	.word	0x08016898
 8001158:	2000003c 	.word	0x2000003c
 800115c:	080166b8 	.word	0x080166b8
 8001160:	40020800 	.word	0x40020800
 8001164:	40020000 	.word	0x40020000
 8001168:	200010cc 	.word	0x200010cc

0800116c <processIOs>:


void processIOs(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	filterSectionStatus_t filterStatus;

	while (1) {

		switch (processState) {
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <processIOs+0x88>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d02e      	beq.n	80011d8 <processIOs+0x6c>
 800117a:	2b02      	cmp	r3, #2
 800117c:	d034      	beq.n	80011e8 <processIOs+0x7c>
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f7      	bne.n	8001172 <processIOs+0x6>
			case NORMAL_OPERATION:
				// Check ISR events
				checkISREvents();
 8001182:	f000 f841 	bl	8001208 <checkISREvents>

				// Check on the CLI to see if any new commands are present
				//checkCliStatus();

				// Find filters present in the matte box
				checkFilterTags(&dTags);
 8001186:	481c      	ldr	r0, [pc, #112]	; (80011f8 <processIOs+0x8c>)
 8001188:	f002 fde0 	bl	8003d4c <checkFilterTags>

				// Compare found filter tags with previous filter section
				filterStatus = updateFilterSection(&dTags, &fSection);
 800118c:	491b      	ldr	r1, [pc, #108]	; (80011fc <processIOs+0x90>)
 800118e:	481a      	ldr	r0, [pc, #104]	; (80011f8 <processIOs+0x8c>)
 8001190:	f7ff fe2c 	bl	8000dec <updateFilterSection>
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]

				switch (filterStatus) {
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d817      	bhi.n	80011ce <processIOs+0x62>
 800119e:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <processIOs+0x38>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	080011cf 	.word	0x080011cf
 80011a8:	080011b5 	.word	0x080011b5
 80011ac:	080011b5 	.word	0x080011b5
 80011b0:	080011c7 	.word	0x080011c7
						break;

					case FILTER_REMOVED:
					case FILTER_INSTALLED:
						// Update the EPD with the new filter line up.
						canvas_DrawFilters(&canvas1, &epd1, &fSection);
 80011b4:	4a11      	ldr	r2, [pc, #68]	; (80011fc <processIOs+0x90>)
 80011b6:	4912      	ldr	r1, [pc, #72]	; (8001200 <processIOs+0x94>)
 80011b8:	4812      	ldr	r0, [pc, #72]	; (8001204 <processIOs+0x98>)
 80011ba:	f001 fcdf 	bl	8002b7c <canvas_DrawFilters>
						// Log to the SD Card
						SDDataLog(&fSection);
 80011be:	480f      	ldr	r0, [pc, #60]	; (80011fc <processIOs+0x90>)
 80011c0:	f000 fa6e 	bl	80016a0 <SDDataLog>
						break;
 80011c4:	e003      	b.n	80011ce <processIOs+0x62>

					case UNKNOWN_FILTER_NAME:
						// Change state
						processState = UPDATE_FILTER_NAME;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <processIOs+0x88>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	701a      	strb	r2, [r3, #0]
						break;
 80011cc:	bf00      	nop
				}

				// TODO -  Go to sleep here
				//gotoSleep();

				HAL_Delay(1000);
 80011ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d2:	f003 fe55 	bl	8004e80 <HAL_Delay>
				break;
 80011d6:	e00b      	b.n	80011f0 <processIOs+0x84>

			case CHANGE_FILTER_POS:
				// Wait for another button press. Timeout after X amount of time.
				HAL_Delay(FILTER_POSITION_TIMEOUT);
 80011d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80011dc:	f003 fe50 	bl	8004e80 <HAL_Delay>
				processState = NORMAL_OPERATION;
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <processIOs+0x88>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
				break;
 80011e6:	e003      	b.n	80011f0 <processIOs+0x84>

			case UPDATE_FILTER_NAME:

				// Place Holder
				processState = NORMAL_OPERATION;
 80011e8:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <processIOs+0x88>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
				break;
 80011ee:	bf00      	nop
		switch (processState) {
 80011f0:	e7bf      	b.n	8001172 <processIOs+0x6>
 80011f2:	bf00      	nop
 80011f4:	20000254 	.word	0x20000254
 80011f8:	20000e9c 	.word	0x20000e9c
 80011fc:	20000f24 	.word	0x20000f24
 8001200:	20000ed4 	.word	0x20000ed4
 8001204:	20000f60 	.word	0x20000f60

08001208 <checkISREvents>:
}

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
void checkISREvents(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	if (isr_flags > 0){
 800120c:	4b43      	ldr	r3, [pc, #268]	; (800131c <checkISREvents+0x114>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 8081 	beq.w	8001318 <checkISREvents+0x110>
		if (isr_flags & INIT_FAT_FS) {
 8001216:	4b41      	ldr	r3, [pc, #260]	; (800131c <checkISREvents+0x114>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <checkISREvents+0x22>
			// An SD Card was inserted, Re-initialize FatFs and DataLogger
			dataLoggerInit(SDIO_POWER_GPIO_Port, SDIO_POWER_Pin);
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	483e      	ldr	r0, [pc, #248]	; (8001320 <checkISREvents+0x118>)
 8001226:	f000 f8a3 	bl	8001370 <dataLoggerInit>
		}

		if (isr_flags & DEINIT_FAT_FS) {
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <checkISREvents+0x114>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <checkISREvents+0x32>
			// An SD Card was removed, De-initialize FatFs and DataLogger
			dataLoggerDeInit();
 8001236:	f000 f8ed 	bl	8001414 <dataLoggerDeInit>
		}

		if (isr_flags & BTN_1_SH_PRESS) {
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <checkISREvents+0x114>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	d011      	beq.n	800126a <checkISREvents+0x62>
			// Button 1 was short pressed.
			switch (processState) {
 8001246:	4b37      	ldr	r3, [pc, #220]	; (8001324 <checkISREvents+0x11c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d00a      	beq.n	8001264 <checkISREvents+0x5c>
 800124e:	2b02      	cmp	r3, #2
 8001250:	d00a      	beq.n	8001268 <checkISREvents+0x60>
 8001252:	2b00      	cmp	r3, #0
 8001254:	d109      	bne.n	800126a <checkISREvents+0x62>
				case NORMAL_OPERATION:
					// Change filter position. Store button 1 as the first button.
					changeFilterPos1 = 1;			// Log Button 1 as the first Selected Filter
 8001256:	4b34      	ldr	r3, [pc, #208]	; (8001328 <checkISREvents+0x120>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
					// Highlight the Filter Name

					processState = CHANGE_FILTER_POS;
 800125c:	4b31      	ldr	r3, [pc, #196]	; (8001324 <checkISREvents+0x11c>)
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
					break;
 8001262:	e002      	b.n	800126a <checkISREvents+0x62>

				case CHANGE_FILTER_POS:
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.
					break;
 8001264:	bf00      	nop
 8001266:	e000      	b.n	800126a <checkISREvents+0x62>

				case UPDATE_FILTER_NAME:
					// This button is reserved as "up". Change the list focus.
					// If the top slot is selected, load new page
					break;
 8001268:	bf00      	nop
			}
		}

		if (isr_flags & BTN_1_LG_PRESS) {
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <checkISREvents+0x114>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00a      	beq.n	800128c <checkISREvents+0x84>
			// Button 1 was long pressed. Update state to Update Filter Name
			switch (processState) {
 8001276:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <checkISREvents+0x11c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d003      	beq.n	8001286 <checkISREvents+0x7e>
 800127e:	2b02      	cmp	r3, #2
 8001280:	d003      	beq.n	800128a <checkISREvents+0x82>
 8001282:	2b00      	cmp	r3, #0
				case NORMAL_OPERATION:
					break;
 8001284:	e002      	b.n	800128c <checkISREvents+0x84>

				case CHANGE_FILTER_POS:
					break;
 8001286:	bf00      	nop
 8001288:	e000      	b.n	800128c <checkISREvents+0x84>

				case UPDATE_FILTER_NAME:
					break;
 800128a:	bf00      	nop
			}
		}

		if (isr_flags & BTN_2_SH_PRESS) {
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <checkISREvents+0x114>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00a      	beq.n	80012ae <checkISREvents+0xa6>
			// Button 2 was short pressed. Update state to Change Filter Position
			switch (processState) {
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <checkISREvents+0x11c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d003      	beq.n	80012a8 <checkISREvents+0xa0>
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d003      	beq.n	80012ac <checkISREvents+0xa4>
 80012a4:	2b00      	cmp	r3, #0
				case NORMAL_OPERATION:
					break;
 80012a6:	e002      	b.n	80012ae <checkISREvents+0xa6>

				case CHANGE_FILTER_POS:
					break;
 80012a8:	bf00      	nop
 80012aa:	e000      	b.n	80012ae <checkISREvents+0xa6>

				case UPDATE_FILTER_NAME:
					break;
 80012ac:	bf00      	nop
			}
		}

		if (isr_flags & BTN_2_LG_PRESS) {
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <checkISREvents+0x114>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	f003 0320 	and.w	r3, r3, #32
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00a      	beq.n	80012d0 <checkISREvents+0xc8>
			// Button 2 was long pressed. Update state to Update Filter Name
			switch (processState) {
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <checkISREvents+0x11c>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d003      	beq.n	80012ca <checkISREvents+0xc2>
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d003      	beq.n	80012ce <checkISREvents+0xc6>
 80012c6:	2b00      	cmp	r3, #0
				case NORMAL_OPERATION:
					break;
 80012c8:	e002      	b.n	80012d0 <checkISREvents+0xc8>

				case CHANGE_FILTER_POS:
					break;
 80012ca:	bf00      	nop
 80012cc:	e000      	b.n	80012d0 <checkISREvents+0xc8>

				case UPDATE_FILTER_NAME:
					break;
 80012ce:	bf00      	nop
			}
		}

		if (isr_flags & BTN_3_SH_PRESS) {
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <checkISREvents+0x114>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00a      	beq.n	80012f2 <checkISREvents+0xea>
			// Button 3 was short pressed. Update state to Change Filter Position
			switch (processState) {
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <checkISREvents+0x11c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d003      	beq.n	80012ec <checkISREvents+0xe4>
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d003      	beq.n	80012f0 <checkISREvents+0xe8>
 80012e8:	2b00      	cmp	r3, #0
				case NORMAL_OPERATION:
					break;
 80012ea:	e002      	b.n	80012f2 <checkISREvents+0xea>

				case CHANGE_FILTER_POS:
					break;
 80012ec:	bf00      	nop
 80012ee:	e000      	b.n	80012f2 <checkISREvents+0xea>

				case UPDATE_FILTER_NAME:
					break;
 80012f0:	bf00      	nop
			}
		}

		if (isr_flags & BTN_3_LG_PRESS) {
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <checkISREvents+0x114>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	da0a      	bge.n	8001312 <checkISREvents+0x10a>
			// Button 3 was long pressed. Update state to Update Filter Name
			switch (processState) {
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <checkISREvents+0x11c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d003      	beq.n	800130c <checkISREvents+0x104>
 8001304:	2b02      	cmp	r3, #2
 8001306:	d003      	beq.n	8001310 <checkISREvents+0x108>
 8001308:	2b00      	cmp	r3, #0
				case NORMAL_OPERATION:
					break;
 800130a:	e002      	b.n	8001312 <checkISREvents+0x10a>

				case CHANGE_FILTER_POS:
					break;
 800130c:	bf00      	nop
 800130e:	e000      	b.n	8001312 <checkISREvents+0x10a>

				case UPDATE_FILTER_NAME:
					break;
 8001310:	bf00      	nop
			}
		}

		isr_flags = 0;	// Reset the flag after handling
 8001312:	4b02      	ldr	r3, [pc, #8]	; (800131c <checkISREvents+0x114>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
	}
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000e98 	.word	0x20000e98
 8001320:	40020800 	.word	0x40020800
 8001324:	20000254 	.word	0x20000254
 8001328:	20000f6c 	.word	0x20000f6c

0800132c <isLogDirValid>:
static uint16_t sdPowerPin;

/******************************************************************************
 * PRIVATE FUNCTIONS
 *******************************************************************************/
bool isLogDirValid(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0
	bool retVal = false;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DIR logDir;

	// Try to open the directory
	FRESULT res = f_opendir(&logDir, DL_LOG_DIR_PATH);
 8001338:	463b      	mov	r3, r7
 800133a:	490c      	ldr	r1, [pc, #48]	; (800136c <isLogDirValid+0x40>)
 800133c:	4618      	mov	r0, r3
 800133e:	f013 f860 	bl	8014402 <f_opendir>
 8001342:	4603      	mov	r3, r0
 8001344:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (FR_OK == res)
 8001348:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800134c:	2b00      	cmp	r3, #0
 800134e:	d106      	bne.n	800135e <isLogDirValid+0x32>
	{
		// The directory exists, close it back up
		f_closedir(&logDir);
 8001350:	463b      	mov	r3, r7
 8001352:	4618      	mov	r0, r3
 8001354:	f013 f8c8 	bl	80144e8 <f_closedir>
		retVal = true;
 8001358:	2301      	movs	r3, #1
 800135a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	return retVal;
 800135e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001362:	4618      	mov	r0, r3
 8001364:	3738      	adds	r7, #56	; 0x38
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	080166c0 	.word	0x080166c0

08001370 <dataLoggerInit>:

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/

DL_error dataLoggerInit(GPIO_TypeDef* sd_Port, uint16_t sd_Pin) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
	DL_error retVal = DATALOG_ERR;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]

	// Check RTC. Initialize if needed.
	if (!rtcModuleIsInit()) {
 8001380:	f002 fe5e 	bl	8004040 <rtcModuleIsInit>
 8001384:	4603      	mov	r3, r0
 8001386:	f083 0301 	eor.w	r3, r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <dataLoggerInit+0x26>
		rtcModuleInit(&hrtc);
 8001390:	481b      	ldr	r0, [pc, #108]	; (8001400 <dataLoggerInit+0x90>)
 8001392:	f002 fe41 	bl	8004018 <rtcModuleInit>
	}

	//Bind GPIO Port and Pin
	if (sdPowerPort == NULL) {
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <dataLoggerInit+0x94>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <dataLoggerInit+0x3a>
		sdPowerPort = sd_Port;
 800139e:	4a19      	ldr	r2, [pc, #100]	; (8001404 <dataLoggerInit+0x94>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6013      	str	r3, [r2, #0]
		sdPowerPin = sd_Pin;
 80013a4:	4a18      	ldr	r2, [pc, #96]	; (8001408 <dataLoggerInit+0x98>)
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	8013      	strh	r3, [r2, #0]
	}

	if (startSDCard() != DATALOG_OK) {
 80013aa:	f000 f83f 	bl	800142c <startSDCard>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <dataLoggerInit+0x48>
		return DATALOG_ERR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e01f      	b.n	80013f8 <dataLoggerInit+0x88>
	}

	// Verify that FatFs is initialized
	if (FatFsIsModuleInit()) {
 80013b8:	f00a fffe 	bl	800c3b8 <FatFsIsModuleInit>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d014      	beq.n	80013ec <dataLoggerInit+0x7c>
		if (!isLogDirValid()) {
 80013c2:	f7ff ffb3 	bl	800132c <isLogDirValid>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f083 0301 	eor.w	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00e      	beq.n	80013f0 <dataLoggerInit+0x80>
			// Create the new directory and file
			FRESULT fr;
			fr = f_mkdir(DL_LOG_DIR_PATH);
 80013d2:	480e      	ldr	r0, [pc, #56]	; (800140c <dataLoggerInit+0x9c>)
 80013d4:	f013 f8ae 	bl	8014534 <f_mkdir>
 80013d8:	4603      	mov	r3, r0
 80013da:	73bb      	strb	r3, [r7, #14]
			if (fr == FR_OK) {
 80013dc:	7bbb      	ldrb	r3, [r7, #14]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <dataLoggerInit+0x78>
				// The directory was created successfully
				retVal = DATALOG_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e003      	b.n	80013f0 <dataLoggerInit+0x80>
			} else {
				// FatFs Error
				return retVal;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	e005      	b.n	80013f8 <dataLoggerInit+0x88>
			}
		}
	} else {
		// FatFs Not Initialized
		return retVal;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	e003      	b.n	80013f8 <dataLoggerInit+0x88>
	}

	dlModInit = true;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <dataLoggerInit+0xa0>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
	return retVal;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20001028 	.word	0x20001028
 8001404:	20000258 	.word	0x20000258
 8001408:	2000025c 	.word	0x2000025c
 800140c:	080166c0 	.word	0x080166c0
 8001410:	20000255 	.word	0x20000255

08001414 <dataLoggerDeInit>:

DL_error dataLoggerDeInit(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	dlModInit = false;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <dataLoggerDeInit+0x14>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
	return stopSDCard();
 800141e:	f000 f837 	bl	8001490 <stopSDCard>
 8001422:	4603      	mov	r3, r0
}
 8001424:	4618      	mov	r0, r3
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000255 	.word	0x20000255

0800142c <startSDCard>:

DL_error startSDCard(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
	// See if a card is installed
	if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_SET){
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <startSDCard+0x58>)
 8001436:	f003 fffb 	bl	8005430 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <startSDCard+0x18>
		// No card is installed.
		return DATALOG_ERR;
 8001440:	2301      	movs	r3, #1
 8001442:	e01a      	b.n	800147a <startSDCard+0x4e>
	}

	HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_SET);
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <startSDCard+0x5c>)
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <startSDCard+0x60>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	4619      	mov	r1, r3
 8001450:	f004 f806 	bl	8005460 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001454:	2005      	movs	r0, #5
 8001456:	f003 fd13 	bl	8004e80 <HAL_Delay>
	DL_error ret = FatFsInit();
 800145a:	f00a ff67 	bl	800c32c <FatFsInit>
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]

	// If there is a problem with the FatFs, turn off the power.
	if (ret != DATALOG_OK) {
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <startSDCard+0x4c>
		HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_RESET);
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <startSDCard+0x5c>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <startSDCard+0x60>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	f003 fff4 	bl	8005460 <HAL_GPIO_WritePin>
	}
	return ret;
 8001478:	79fb      	ldrb	r3, [r7, #7]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40020800 	.word	0x40020800
 8001488:	20000258 	.word	0x20000258
 800148c:	2000025c 	.word	0x2000025c

08001490 <stopSDCard>:

DL_error stopSDCard(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
	// Unlink the FatFs and turn off the SD Card
	DL_error ret = FatFsDeInit();
 8001496:	f00a ff7f 	bl	800c398 <FatFsDeInit>
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_RESET);
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <stopSDCard+0x28>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <stopSDCard+0x2c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	4619      	mov	r1, r3
 80014aa:	f003 ffd9 	bl	8005460 <HAL_GPIO_WritePin>
	return ret;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000258 	.word	0x20000258
 80014bc:	2000025c 	.word	0x2000025c

080014c0 <logDataToSD>:
/*	This function get's called from the FilterMachine whenever there's
 * a filter change. It first fills out a Log Record, then sends it to
 * this function to be copied to the SD Card.
 * */

DL_error logDataToSD(sdLog_record_t *sdLog) {
 80014c0:	b5b0      	push	{r4, r5, r7, lr}
 80014c2:	b0ba      	sub	sp, #232	; 0xe8
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	6078      	str	r0, [r7, #4]

	// Ensure the modules are initialized
	if (dlModInit) {
 80014c8:	4b6c      	ldr	r3, [pc, #432]	; (800167c <logDataToSD+0x1bc>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80d0 	beq.w	8001672 <logDataToSD+0x1b2>

		// Verify that the directory has been initialized
		if (!isLogDirValid()) {
 80014d2:	f7ff ff2b 	bl	800132c <isLogDirValid>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f083 0301 	eor.w	r3, r3, #1
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <logDataToSD+0x26>
			return DATALOG_ERR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0c6      	b.n	8001674 <logDataToSD+0x1b4>
		}

		// The log directory is valid. Start organizing the data.
		// Convert all non-string fields
		char dateStamp_s[11] = {0};
 80014e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	f8c3 2007 	str.w	r2, [r3, #7]
		char logFileName_s[35] = {0};
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	2223      	movs	r2, #35	; 0x23
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f014 fcc3 	bl	8015e88 <memset>
		char timeStamp_s[11] = {0};
 8001502:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	f8c3 2007 	str.w	r2, [r3, #7]

		// Compile the Date
		sprintf(dateStamp_s, "%02d-%02d-%d",
				sdLog->dateTimeStamp.month,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7bdb      	ldrb	r3, [r3, #15]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 8001514:	461a      	mov	r2, r3
				sdLog->dateTimeStamp.day,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7b9b      	ldrb	r3, [r3, #14]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 800151a:	4619      	mov	r1, r3
				sdLog->dateTimeStamp.year);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	8a1b      	ldrh	r3, [r3, #16]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 8001520:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	460b      	mov	r3, r1
 8001528:	4955      	ldr	r1, [pc, #340]	; (8001680 <logDataToSD+0x1c0>)
 800152a:	f014 fd6d 	bl	8016008 <siprintf>

		// File Name Format: FilterLog_Date_Matte Box ID
		// Example: FilterLog_01-01-2020_LBSA0100P
		sprintf(logFileName_s, "FilterLog_%s_%s.csv",
				dateStamp_s,
				sdLog->matteBoxID);
 800152e:	687b      	ldr	r3, [r7, #4]
		sprintf(logFileName_s, "FilterLog_%s_%s.csv",
 8001530:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001534:	f107 0008 	add.w	r0, r7, #8
 8001538:	4952      	ldr	r1, [pc, #328]	; (8001684 <logDataToSD+0x1c4>)
 800153a:	f014 fd65 	bl	8016008 <siprintf>

		// Compile the time
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
				sdLog->dateTimeStamp.hours,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7a9b      	ldrb	r3, [r3, #10]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 8001542:	461a      	mov	r2, r3
				sdLog->dateTimeStamp.minutes,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7adb      	ldrb	r3, [r3, #11]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 8001548:	4619      	mov	r1, r3
				sdLog->dateTimeStamp.seconds);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 800154e:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	460b      	mov	r3, r1
 8001556:	494c      	ldr	r1, [pc, #304]	; (8001688 <logDataToSD+0x1c8>)
 8001558:	f014 fd56 	bl	8016008 <siprintf>

		// Prepare to write the file
		FRESULT fr;
		FIL* logFil = malloc(sizeof(FIL));
 800155c:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001560:	f014 fc68 	bl	8015e34 <malloc>
 8001564:	4603      	mov	r3, r0
 8001566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

		// Change to the directory
		fr = f_chdir(DL_LOG_DIR_PATH);
 800156a:	4848      	ldr	r0, [pc, #288]	; (800168c <logDataToSD+0x1cc>)
 800156c:	f012 feff 	bl	801436e <f_chdir>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		// If the file exists, open it. Otherwise, create the log file.
		fr = f_open(logFil, (const TCHAR*) logFileName_s, FA_OPEN_APPEND | FA_WRITE);
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2232      	movs	r2, #50	; 0x32
 800157c:	4619      	mov	r1, r3
 800157e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001582:	f012 fb19 	bl	8013bb8 <f_open>
 8001586:	4603      	mov	r3, r0
 8001588:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

		if (fr != FR_OK) {
 800158c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <logDataToSD+0xd8>
			// Can't open the file
			return DATALOG_ERR;
 8001594:	2301      	movs	r3, #1
 8001596:	e06d      	b.n	8001674 <logDataToSD+0x1b4>
		}

		// The file is open and ready. Write the fields to the file.
		// Check to see if the file is empty
		if (logFil->fptr == 0){
 8001598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d12b      	bne.n	80015fa <logDataToSD+0x13a>
			// Brand New File. Make the Headers
			char headers[100] = {0};
 80015a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015a6:	2264      	movs	r2, #100	; 0x64
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f014 fc6c 	bl	8015e88 <memset>

			sprintf(headers, "Light Widow Matte Box\nMatte Box ID:,%s\nDate:,%s\nNotes:\n\n",
					sdLog->matteBoxID,
 80015b0:	687a      	ldr	r2, [r7, #4]
			sprintf(headers, "Light Widow Matte Box\nMatte Box ID:,%s\nDate:,%s\nNotes:\n\n",
 80015b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80015b6:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80015ba:	4935      	ldr	r1, [pc, #212]	; (8001690 <logDataToSD+0x1d0>)
 80015bc:	f014 fd24 	bl	8016008 <siprintf>
					dateStamp_s);
			const char tmpStr[50] = "Time,Filter Slot 1,Filter Slot 2,Filter Slot 3\n";
 80015c0:	4b34      	ldr	r3, [pc, #208]	; (8001694 <logDataToSD+0x1d4>)
 80015c2:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80015c6:	461d      	mov	r5, r3
 80015c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015d8:	2300      	movs	r3, #0
 80015da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			f_puts(headers, (FIL*) logFil);
 80015de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015e2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80015e6:	4618      	mov	r0, r3
 80015e8:	f013 fd5c 	bl	80150a4 <f_puts>
			f_puts(tmpStr, (FIL*) logFil);
 80015ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80015f4:	4618      	mov	r0, r3
 80015f6:	f013 fd55 	bl	80150a4 <f_puts>
		}

		// Write the Time Stamp
		f_puts(timeStamp_s, (FIL*) logFil);
 80015fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015fe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001602:	4618      	mov	r0, r3
 8001604:	f013 fd4e 	bl	80150a4 <f_puts>

		// Write the Filter Name in Slot 1
		f_puts(sdLog->filterNames[0].filterName, (FIL*) logFil);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3312      	adds	r3, #18
 800160c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001610:	4618      	mov	r0, r3
 8001612:	f013 fd47 	bl	80150a4 <f_puts>
		f_puts(DL_DELIM, (FIL*) logFil);
 8001616:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800161a:	481f      	ldr	r0, [pc, #124]	; (8001698 <logDataToSD+0x1d8>)
 800161c:	f013 fd42 	bl	80150a4 <f_puts>

		// Write the Filter Name in Slot 2
		f_puts(sdLog->filterNames[1].filterName, (FIL*) logFil);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	331d      	adds	r3, #29
 8001624:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001628:	4618      	mov	r0, r3
 800162a:	f013 fd3b 	bl	80150a4 <f_puts>
		f_puts(DL_DELIM, (FIL*) logFil);
 800162e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001632:	4819      	ldr	r0, [pc, #100]	; (8001698 <logDataToSD+0x1d8>)
 8001634:	f013 fd36 	bl	80150a4 <f_puts>

		// Write the Filter Name in Slot 3
		f_puts(sdLog->filterNames[2].filterName, (FIL*) logFil);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3328      	adds	r3, #40	; 0x28
 800163c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001640:	4618      	mov	r0, r3
 8001642:	f013 fd2f 	bl	80150a4 <f_puts>

		// Make a new line
		f_puts(DL_ENDL, (FIL*) logFil);
 8001646:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800164a:	4814      	ldr	r0, [pc, #80]	; (800169c <logDataToSD+0x1dc>)
 800164c:	f013 fd2a 	bl	80150a4 <f_puts>

		// Finish and Close the file
		fr = f_close((FIL*) logFil);
 8001650:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001654:	f012 fe61 	bl	801431a <f_close>
 8001658:	4603      	mov	r3, r0
 800165a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

		// De-allocate the FatFs
		free(logFil);
 800165e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001662:	f014 fbef 	bl	8015e44 <free>

		if (fr == FR_OK) {
 8001666:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <logDataToSD+0x1b2>
			// The file closed successfully
			return DATALOG_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <logDataToSD+0x1b4>
		}
	}
	return DATALOG_ERR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	37e0      	adds	r7, #224	; 0xe0
 8001678:	46bd      	mov	sp, r7
 800167a:	bdb0      	pop	{r4, r5, r7, pc}
 800167c:	20000255 	.word	0x20000255
 8001680:	080166d0 	.word	0x080166d0
 8001684:	080166e0 	.word	0x080166e0
 8001688:	080166f4 	.word	0x080166f4
 800168c:	080166c0 	.word	0x080166c0
 8001690:	08016704 	.word	0x08016704
 8001694:	08016748 	.word	0x08016748
 8001698:	08016740 	.word	0x08016740
 800169c:	08016744 	.word	0x08016744

080016a0 <SDDataLog>:

DL_error SDDataLog(filterSection_t *fSection) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b096      	sub	sp, #88	; 0x58
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef dateStamp;
	RTC_TimeTypeDef timeStamp;
	sdLog_record_t sdLog = {0};
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	2234      	movs	r2, #52	; 0x34
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f014 fbe9 	bl	8015e88 <memset>

	if (!dlModInit) {
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <SDDataLog+0xd0>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	f083 0301 	eor.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SDDataLog+0x28>
		return DATALOG_ERR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e04f      	b.n	8001768 <SDDataLog+0xc8>
	}

	// See if FATFS and SD Card are ready


	strcpy(sdLog.matteBoxID, MATTE_BOX_HW_ID);
 80016c8:	4a2a      	ldr	r2, [pc, #168]	; (8001774 <SDDataLog+0xd4>)
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80016d0:	c303      	stmia	r3!, {r0, r1}
 80016d2:	801a      	strh	r2, [r3, #0]

	// Get the Time and Store it
	rtcGetDateTime(&dateStamp, &timeStamp);
 80016d4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80016d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fcba 	bl	8004058 <rtcGetDateTime>

	// Load the DateTime results into the DataLog structure
	sdLog.dateTimeStamp.month = dateStamp.Month;
 80016e4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80016e8:	75fb      	strb	r3, [r7, #23]
	sdLog.dateTimeStamp.day = dateStamp.Date;
 80016ea:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80016ee:	75bb      	strb	r3, [r7, #22]
	sdLog.dateTimeStamp.year = dateStamp.Year + 2000;
 80016f0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	833b      	strh	r3, [r7, #24]

	sdLog.dateTimeStamp.hours = timeStamp.Hours;
 80016fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001702:	74bb      	strb	r3, [r7, #18]
	sdLog.dateTimeStamp.minutes = timeStamp.Minutes;
 8001704:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001708:	74fb      	strb	r3, [r7, #19]
	sdLog.dateTimeStamp.seconds = timeStamp.Seconds;
 800170a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800170e:	753b      	strb	r3, [r7, #20]

	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001716:	e01d      	b.n	8001754 <SDDataLog+0xb4>
		strcpy(&sdLog.filterNames[i].filterName, fSection->filter[i].filterName);
 8001718:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800171c:	f107 0108 	add.w	r1, r7, #8
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	3310      	adds	r3, #16
 800172c:	440b      	add	r3, r1
 800172e:	1c98      	adds	r0, r3, #2
 8001730:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001734:	4613      	mov	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	3301      	adds	r3, #1
 8001744:	4619      	mov	r1, r3
 8001746:	f014 fc7f 	bl	8016048 <strcpy>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800174a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800174e:	3301      	adds	r3, #1
 8001750:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001754:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001758:	2b02      	cmp	r3, #2
 800175a:	d9dd      	bls.n	8001718 <SDDataLog+0x78>
	}

	// Log to the SD Card
	return logDataToSD(&sdLog);
 800175c:	f107 0308 	add.w	r3, r7, #8
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fead 	bl	80014c0 <logDataToSD>
 8001766:	4603      	mov	r3, r0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3758      	adds	r7, #88	; 0x58
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000255 	.word	0x20000255
 8001774:	0801677c 	.word	0x0801677c

08001778 <EPD_Init>:
static void SPI_read(EPD_HandleTypeDef *epd, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);

// Global Variables
static bool setTemp = false;

void EPD_Init(EPD_size size, SPI_HandleTypeDef *spi, EPD_HandleTypeDef *epd) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	73fb      	strb	r3, [r7, #15]

	DWT_Init();											// Microsecond Delay required by the e-paper
 8001786:	f7ff faf1 	bl	8000d6c <DWT_Init>

	epd->status = EPD_OK;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
	epd->spi = spi;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
	epd->size = size;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	705a      	strb	r2, [r3, #1]

	epd->panel_on_pin = EPD_POWER_Pin;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	805a      	strh	r2, [r3, #2]
	epd->discharge_pin = EPD_DISCHARGE_Pin;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	811a      	strh	r2, [r3, #8]
	epd->reset_pin = EPD_NRST_Pin;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2202      	movs	r2, #2
 80017ac:	821a      	strh	r2, [r3, #16]
	epd->busy_pin = EPD_BUSY_Pin;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2204      	movs	r2, #4
 80017b2:	831a      	strh	r2, [r3, #24]
	epd->spi_cs_pin = EPD_SPI_CS_Pin;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	841a      	strh	r2, [r3, #32]

	epd->panel_on_port = EPD_POWER_GPIO_Port;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a81      	ldr	r2, [pc, #516]	; (80019c4 <EPD_Init+0x24c>)
 80017be:	605a      	str	r2, [r3, #4]
	epd->discharge_port = EPD_DISCHARGE_GPIO_Port;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a81      	ldr	r2, [pc, #516]	; (80019c8 <EPD_Init+0x250>)
 80017c4:	60da      	str	r2, [r3, #12]
	epd->reset_port = EPD_NRST_GPIO_Port;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a7f      	ldr	r2, [pc, #508]	; (80019c8 <EPD_Init+0x250>)
 80017ca:	615a      	str	r2, [r3, #20]
	epd->busy_port = EPD_BUSY_GPIO_Port;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a7e      	ldr	r2, [pc, #504]	; (80019c8 <EPD_Init+0x250>)
 80017d0:	61da      	str	r2, [r3, #28]
	epd->spi_cs_port = EPD_SPI_CS_GPIO_Port;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a7b      	ldr	r2, [pc, #492]	; (80019c4 <EPD_Init+0x24c>)
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24

	epd->base_stage_time = 480; // milliseconds
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017de:	859a      	strh	r2, [r3, #44]	; 0x2c

	switch (size) {
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d80b      	bhi.n	8001800 <EPD_Init+0x88>
 80017e8:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <EPD_Init+0x78>)
 80017ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ee:	bf00      	nop
 80017f0:	0800183f 	.word	0x0800183f
 80017f4:	0800187d 	.word	0x0800187d
 80017f8:	080018bb 	.word	0x080018bb
 80017fc:	08001901 	.word	0x08001901
		default:
		case EPD_1_44:  // default so no change
			epd->lines_per_display = 96;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2260      	movs	r2, #96	; 0x60
 8001804:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 128;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 128 / 8;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2210      	movs	r2, #16
 8001810:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 96 / 4;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2218      	movs	r2, #24
 8001816:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00};
			epd->channel_select = cs;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a6c      	ldr	r2, [pc, #432]	; (80019cc <EPD_Init+0x254>)
 800181c:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2209      	movs	r2, #9
 8001822:	641a      	str	r2, [r3, #64]	; 0x40
			epd->middle_scan = true; // => data-scan-data ELSE: scan-data-scan
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->pre_border_byte = false;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_ZERO;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 800183c:	e080      	b.n	8001940 <EPD_Init+0x1c8>

		case EPD_1_9: {
			epd->lines_per_display = 128;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 144;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2290      	movs	r2, #144	; 0x90
 8001848:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 144 / 8;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2212      	movs	r2, #18
 800184e:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->middle_scan = false;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->bytes_per_scan = 128 / 4 / 2; // scan/2 - data - scan/2
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2210      	movs	r2, #16
 800185c:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0xff};
			epd->channel_select = cs;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a5b      	ldr	r2, [pc, #364]	; (80019d0 <EPD_Init+0x258>)
 8001862:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2209      	movs	r2, #9
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = false;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_SET;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2202      	movs	r2, #2
 8001876:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 800187a:	e061      	b.n	8001940 <EPD_Init+0x1c8>
		}

		case EPD_2_0: {
			epd->lines_per_display = 96;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2260      	movs	r2, #96	; 0x60
 8001880:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 200;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	22c8      	movs	r2, #200	; 0xc8
 8001886:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 200 / 8;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2219      	movs	r2, #25
 800188c:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 96 / 4;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2218      	movs	r2, #24
 8001892:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00};
			epd->channel_select = cs;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a4f      	ldr	r2, [pc, #316]	; (80019d4 <EPD_Init+0x25c>)
 8001898:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2209      	movs	r2, #9
 800189e:	641a      	str	r2, [r3, #64]	; 0x40
			epd->middle_scan = true; // => data-scan-data ELSE: scan-data-scan
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->pre_border_byte = true;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 80018b8:	e042      	b.n	8001940 <EPD_Init+0x1c8>
		}

		case EPD_2_6: {
			epd->base_stage_time = 630; // milliseconds
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f240 2276 	movw	r2, #630	; 0x276
 80018c0:	859a      	strh	r2, [r3, #44]	; 0x2c
			epd->lines_per_display = 128;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 232;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	22e8      	movs	r2, #232	; 0xe8
 80018cc:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 232 / 8;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	221d      	movs	r2, #29
 80018d2:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->middle_scan = false;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->bytes_per_scan = 128 / 4 / 2; // scan/2 - data - scan/2
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2210      	movs	r2, #16
 80018e0:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0xff};
			epd->channel_select = cs;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a3c      	ldr	r2, [pc, #240]	; (80019d8 <EPD_Init+0x260>)
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2209      	movs	r2, #9
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = false;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_SET;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2202      	movs	r2, #2
 80018fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 80018fe:	e01f      	b.n	8001940 <EPD_Init+0x1c8>
		}

		case EPD_2_7: {
			epd->base_stage_time = 630; // milliseconds
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f240 2276 	movw	r2, #630	; 0x276
 8001906:	859a      	strh	r2, [r3, #44]	; 0x2c
			epd->lines_per_display = 176;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	22b0      	movs	r2, #176	; 0xb0
 800190c:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 264;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001914:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 264 / 8;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2221      	movs	r2, #33	; 0x21
 800191a:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 176 / 4;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	222c      	movs	r2, #44	; 0x2c
 8001920:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00};
			epd->channel_select = cs;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a2d      	ldr	r2, [pc, #180]	; (80019dc <EPD_Init+0x264>)
 8001926:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2209      	movs	r2, #9
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = true;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 800193e:	bf00      	nop
		}
	}

	// an initial default temperature
	epd->factored_stage_time = epd->base_stage_time;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	85da      	strh	r2, [r3, #46]	; 0x2e

	// Set a base temperature
	EPD_set_temperature(epd, 25);
 8001948:	2119      	movs	r1, #25
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fbaa 	bl	80020a4 <EPD_set_temperature>

	// buffer for frame line
	if (epd->middle_scan) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00a      	beq.n	8001970 <EPD_Init+0x1f8>
		epd->line_buffer_size = 2 * epd->bytes_per_line
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800195e:	005b      	lsls	r3, r3, #1
			+ epd->bytes_per_scan
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001964:	4413      	add	r3, r2
			+ 3; // command byte, pre_border_byte, border byte
 8001966:	3303      	adds	r3, #3
 8001968:	461a      	mov	r2, r3
		epd->line_buffer_size = 2 * epd->bytes_per_line
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	649a      	str	r2, [r3, #72]	; 0x48
 800196e:	e00a      	b.n	8001986 <EPD_Init+0x20e>
	} else {
		epd->line_buffer_size = epd->bytes_per_line
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001974:	461a      	mov	r2, r3
			+ 2 * epd->bytes_per_scan
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
			+ 3; // command byte, pre_border_byte, border byte
 800197e:	3303      	adds	r3, #3
 8001980:	461a      	mov	r2, r3
		epd->line_buffer_size = epd->bytes_per_line
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	649a      	str	r2, [r3, #72]	; 0x48
	}

	epd->line_buffer = malloc(epd->line_buffer_size + 4096);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198e:	4618      	mov	r0, r3
 8001990:	f014 fa50 	bl	8015e34 <malloc>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	645a      	str	r2, [r3, #68]	; 0x44

	// ensure zero
	memset(epd->line_buffer, 0x00, epd->line_buffer_size);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a4:	461a      	mov	r2, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	f014 fa6e 	bl	8015e88 <memset>

	// ensure I/O is all set to ZERO
	power_off(epd);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fb4d 	bl	800204c <power_off>

	// COG state for partial update
	epd->COG_on = false;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	20000000 	.word	0x20000000
 80019d0:	2000000c 	.word	0x2000000c
 80019d4:	20000018 	.word	0x20000018
 80019d8:	20000024 	.word	0x20000024
 80019dc:	20000030 	.word	0x20000030

080019e0 <EPD_begin>:
	return epd->status;
}


// starts an EPD sequence
void EPD_begin(EPD_HandleTypeDef *epd) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b0a8      	sub	sp, #160	; 0xa0
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	int8_t currentTemperature;

	// Nothing to do when COG still on
	if (epd->COG_on) {
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 823f 	bne.w	8001e72 <EPD_begin+0x492>
		return;
	}

	if (setTemp) {
 80019f4:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <EPD_begin+0x1d4>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d015      	beq.n	8001a28 <EPD_begin+0x48>
		// setTemp flag is set from outside to prevent over-sampling
		if (LM75B_ReadTemp(&currentTemperature) == LM75B_OK) {
 80019fc:	f107 030f 	add.w	r3, r7, #15
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 fca9 	bl	8003358 <LM75B_ReadTemp>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d106      	bne.n	8001a1a <EPD_begin+0x3a>
			EPD_set_temperature(epd, currentTemperature);
 8001a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a10:	4619      	mov	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fb46 	bl	80020a4 <EPD_set_temperature>
 8001a18:	e003      	b.n	8001a22 <EPD_begin+0x42>
		} else {
			EPD_set_temperature(epd, 25);
 8001a1a:	2119      	movs	r1, #25
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 fb41 	bl	80020a4 <EPD_set_temperature>
		}
		setTemp = false;
 8001a22:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <EPD_begin+0x1d4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
	}

	// assume OK
	epd->status = EPD_OK;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]

	// power up sequence
	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6958      	ldr	r0, [r3, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	8a1b      	ldrh	r3, [r3, #16]
 8001a36:	2200      	movs	r2, #0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f003 fd11 	bl	8005460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, LOW);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6858      	ldr	r0, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	885b      	ldrh	r3, [r3, #2]
 8001a46:	2200      	movs	r2, #0
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f003 fd09 	bl	8005460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, LOW);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68d8      	ldr	r0, [r3, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	891b      	ldrh	r3, [r3, #8]
 8001a56:	2200      	movs	r2, #0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f003 fd01 	bl	8005460 <HAL_GPIO_WritePin>

	Delay_ms(5);
 8001a5e:	2005      	movs	r0, #5
 8001a60:	f003 fa0e 	bl	8004e80 <HAL_Delay>
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	8c1b      	ldrh	r3, [r3, #32]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f003 fcf6 	bl	8005460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, HIGH);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6858      	ldr	r0, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	885b      	ldrh	r3, [r3, #2]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f003 fcee 	bl	8005460 <HAL_GPIO_WritePin>
	Delay_ms(10);
 8001a84:	200a      	movs	r0, #10
 8001a86:	f003 f9fb 	bl	8004e80 <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, HIGH);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6958      	ldr	r0, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	8a1b      	ldrh	r3, [r3, #16]
 8001a92:	2201      	movs	r2, #1
 8001a94:	4619      	mov	r1, r3
 8001a96:	f003 fce3 	bl	8005460 <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001a9a:	2005      	movs	r0, #5
 8001a9c:	f003 f9f0 	bl	8004e80 <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6958      	ldr	r0, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	8a1b      	ldrh	r3, [r3, #16]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f003 fcd8 	bl	8005460 <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001ab0:	2005      	movs	r0, #5
 8001ab2:	f003 f9e5 	bl	8004e80 <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, HIGH);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6958      	ldr	r0, [r3, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	8a1b      	ldrh	r3, [r3, #16]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f003 fccd 	bl	8005460 <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001ac6:	2005      	movs	r0, #5
 8001ac8:	f003 f9da 	bl	8004e80 <HAL_Delay>

	// wait for COG to become ready
	while (HIGH == HAL_GPIO_ReadPin(epd->busy_port, epd->busy_pin)) {
 8001acc:	e002      	b.n	8001ad4 <EPD_begin+0xf4>
		Delay_us(10);
 8001ace:	200a      	movs	r0, #10
 8001ad0:	f7ff f966 	bl	8000da0 <DWT_Delay>
	while (HIGH == HAL_GPIO_ReadPin(epd->busy_port, epd->busy_pin)) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	8b1b      	ldrh	r3, [r3, #24]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f003 fca6 	bl	8005430 <HAL_GPIO_ReadPin>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d0f1      	beq.n	8001ace <EPD_begin+0xee>
	}

	// read the COG ID
	uint8_t receive_buffer[2];
	SPI_read(epd, CU8(0x71, 0x00), receive_buffer, sizeof(receive_buffer));
 8001aea:	2371      	movs	r3, #113	; 0x71
 8001aec:	743b      	strb	r3, [r7, #16]
 8001aee:	2300      	movs	r3, #0
 8001af0:	747b      	strb	r3, [r7, #17]
 8001af2:	f107 020c 	add.w	r2, r7, #12
 8001af6:	f107 0110 	add.w	r1, r7, #16
 8001afa:	2302      	movs	r3, #2
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 ffcf 	bl	8002aa0 <SPI_read>
	SPI_read(epd, CU8(0x71, 0x00), receive_buffer, sizeof(receive_buffer));
 8001b02:	2371      	movs	r3, #113	; 0x71
 8001b04:	753b      	strb	r3, [r7, #20]
 8001b06:	2300      	movs	r3, #0
 8001b08:	757b      	strb	r3, [r7, #21]
 8001b0a:	f107 020c 	add.w	r2, r7, #12
 8001b0e:	f107 0114 	add.w	r1, r7, #20
 8001b12:	2302      	movs	r3, #2
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 ffc3 	bl	8002aa0 <SPI_read>
	int cog_id = receive_buffer[1];
 8001b1a:	7b7b      	ldrb	r3, [r7, #13]
 8001b1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (0x02 != (0x0f & cog_id)) {
 8001b20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d006      	beq.n	8001b3a <EPD_begin+0x15a>
		epd->status = EPD_UNSUPPORTED_COG;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fa8a 	bl	800204c <power_off>
		return;
 8001b38:	e19c      	b.n	8001e74 <EPD_begin+0x494>
	}

	// Disable OE
	SPI_send(epd, CU8(0x70, 0x02), 2);
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <EPD_begin+0x1d8>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	833b      	strh	r3, [r7, #24]
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	2202      	movs	r2, #2
 8001b46:	4619      	mov	r1, r3
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 ff83 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x40), 2);
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <EPD_begin+0x1dc>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	83bb      	strh	r3, [r7, #28]
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	2202      	movs	r2, #2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 ff79 	bl	8002a54 <SPI_send>

	// check breakage
	SPI_send(epd, CU8(0x70, 0x0f), 2);
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <EPD_begin+0x1e0>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	843b      	strh	r3, [r7, #32]
 8001b68:	f107 0320 	add.w	r3, r7, #32
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 ff6f 	bl	8002a54 <SPI_send>
	SPI_read(epd, CU8(0x73, 0x00), receive_buffer, sizeof(receive_buffer));
 8001b76:	2373      	movs	r3, #115	; 0x73
 8001b78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001b82:	f107 020c 	add.w	r2, r7, #12
 8001b86:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 ff87 	bl	8002aa0 <SPI_read>
	int broken_panel = receive_buffer[1];
 8001b92:	7b7b      	ldrb	r3, [r7, #13]
 8001b94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (0x00 == (0x80 & broken_panel)) {
 8001b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10f      	bne.n	8001bc4 <EPD_begin+0x1e4>
		epd->status = EPD_PANEL_BROKEN;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fa4e 	bl	800204c <power_off>
		return;
 8001bb0:	e160      	b.n	8001e74 <EPD_begin+0x494>
 8001bb2:	bf00      	nop
 8001bb4:	2000025e 	.word	0x2000025e
 8001bb8:	080167ac 	.word	0x080167ac
 8001bbc:	080167b0 	.word	0x080167b0
 8001bc0:	080167b4 	.word	0x080167b4
	}

	// power saving mode
	SPI_send(epd, CU8(0x70, 0x0b), 2);
 8001bc4:	4bad      	ldr	r3, [pc, #692]	; (8001e7c <EPD_begin+0x49c>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	853b      	strh	r3, [r7, #40]	; 0x28
 8001bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 ff3e 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x02), 2);
 8001bd8:	4ba9      	ldr	r3, [pc, #676]	; (8001e80 <EPD_begin+0x4a0>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be2:	2202      	movs	r2, #2
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 ff34 	bl	8002a54 <SPI_send>

	// channel select
	SPI_send(epd, CU8(0x70, 0x01), 2);
 8001bec:	4ba5      	ldr	r3, [pc, #660]	; (8001e84 <EPD_begin+0x4a4>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	863b      	strh	r3, [r7, #48]	; 0x30
 8001bf2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 ff2a 	bl	8002a54 <SPI_send>
	SPI_send(epd, epd->channel_select, epd->channel_select_length);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 ff21 	bl	8002a54 <SPI_send>

	// high power mode osc
	SPI_send(epd, CU8(0x70, 0x07), 2);
 8001c12:	4b9d      	ldr	r3, [pc, #628]	; (8001e88 <EPD_begin+0x4a8>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001c18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 ff17 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0xd1), 2);
 8001c26:	4b99      	ldr	r3, [pc, #612]	; (8001e8c <EPD_begin+0x4ac>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	873b      	strh	r3, [r7, #56]	; 0x38
 8001c2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c30:	2202      	movs	r2, #2
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 ff0d 	bl	8002a54 <SPI_send>

	// power setting
	SPI_send(epd, CU8(0x70, 0x08), 2);
 8001c3a:	4b95      	ldr	r3, [pc, #596]	; (8001e90 <EPD_begin+0x4b0>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001c40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c44:	2202      	movs	r2, #2
 8001c46:	4619      	mov	r1, r3
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 ff03 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x02), 2);
 8001c4e:	4b8c      	ldr	r3, [pc, #560]	; (8001e80 <EPD_begin+0x4a0>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fef8 	bl	8002a54 <SPI_send>

	// Vcom level
	SPI_send(epd, CU8(0x70, 0x09), 2);
 8001c64:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <EPD_begin+0x4b4>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001c6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c70:	2202      	movs	r2, #2
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 feed 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0xc2), 2);
 8001c7a:	4b87      	ldr	r3, [pc, #540]	; (8001e98 <EPD_begin+0x4b8>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001c82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c86:	2202      	movs	r2, #2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fee2 	bl	8002a54 <SPI_send>

	// power setting
	SPI_send(epd, CU8(0x70, 0x04), 2);
 8001c90:	4b82      	ldr	r3, [pc, #520]	; (8001e9c <EPD_begin+0x4bc>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001c98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 fed7 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x03), 2);
 8001ca6:	4b7e      	ldr	r3, [pc, #504]	; (8001ea0 <EPD_begin+0x4c0>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001cae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fecc 	bl	8002a54 <SPI_send>

	// driver latch on
	SPI_send(epd, CU8(0x70, 0x03), 2);
 8001cbc:	4b79      	ldr	r3, [pc, #484]	; (8001ea4 <EPD_begin+0x4c4>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001cc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cc8:	2202      	movs	r2, #2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fec1 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 8001cd2:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <EPD_begin+0x4c8>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001cda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 feb6 	bl	8002a54 <SPI_send>

	// driver latch off
	SPI_send(epd, CU8(0x70, 0x03), 2);
 8001ce8:	4b6e      	ldr	r3, [pc, #440]	; (8001ea4 <EPD_begin+0x4c4>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8001cf0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 feab 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 8001cfe:	2372      	movs	r3, #114	; 0x72
 8001d00:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8001d0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d0e:	2202      	movs	r2, #2
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fe9e 	bl	8002a54 <SPI_send>

	Delay_ms(5);
 8001d18:	2005      	movs	r0, #5
 8001d1a:	f003 f8b1 	bl	8004e80 <HAL_Delay>

	bool dc_ok = false;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	for (int i = 0; i < 4; ++i) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d2a:	e075      	b.n	8001e18 <EPD_begin+0x438>
		// charge pump positive voltage on - VGH/VDL on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 8001d2c:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <EPD_begin+0x4cc>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001d34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d38:	2202      	movs	r2, #2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fe89 	bl	8002a54 <SPI_send>
		SPI_send(epd, CU8(0x72, 0x01), 2);
 8001d42:	4b59      	ldr	r3, [pc, #356]	; (8001ea8 <EPD_begin+0x4c8>)
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d4e:	2202      	movs	r2, #2
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fe7e 	bl	8002a54 <SPI_send>

		Delay_ms(240);
 8001d58:	20f0      	movs	r0, #240	; 0xf0
 8001d5a:	f003 f891 	bl	8004e80 <HAL_Delay>

		// charge pump negative voltage on - VGL/VDL on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 8001d5e:	4b53      	ldr	r3, [pc, #332]	; (8001eac <EPD_begin+0x4cc>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001d66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fe70 	bl	8002a54 <SPI_send>
		SPI_send(epd, CU8(0x72, 0x03), 2);
 8001d74:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <EPD_begin+0x4c0>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8001d7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d80:	2202      	movs	r2, #2
 8001d82:	4619      	mov	r1, r3
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fe65 	bl	8002a54 <SPI_send>

		Delay_ms(40);
 8001d8a:	2028      	movs	r0, #40	; 0x28
 8001d8c:	f003 f878 	bl	8004e80 <HAL_Delay>

		// charge pump Vcom on - Vcom driver on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 8001d90:	4b46      	ldr	r3, [pc, #280]	; (8001eac <EPD_begin+0x4cc>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8001d98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fe57 	bl	8002a54 <SPI_send>
		SPI_send(epd, CU8(0x72, 0x0f), 2);
 8001da6:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <EPD_begin+0x4d0>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8001dae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001db2:	2202      	movs	r2, #2
 8001db4:	4619      	mov	r1, r3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fe4c 	bl	8002a54 <SPI_send>

		Delay_ms(40);
 8001dbc:	2028      	movs	r0, #40	; 0x28
 8001dbe:	f003 f85f 	bl	8004e80 <HAL_Delay>

		// check DC/DC
		SPI_send(epd, CU8(0x70, 0x0f), 2);
 8001dc2:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <EPD_begin+0x4d4>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8001dca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001dce:	2202      	movs	r2, #2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fe3e 	bl	8002a54 <SPI_send>
		SPI_read(epd, CU8(0x73, 0x00), receive_buffer, sizeof(receive_buffer));
 8001dd8:	2373      	movs	r3, #115	; 0x73
 8001dda:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8001de4:	f107 020c 	add.w	r2, r7, #12
 8001de8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001dec:	2302      	movs	r3, #2
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fe56 	bl	8002aa0 <SPI_read>
		int dc_state = receive_buffer[1];
 8001df4:	7b7b      	ldrb	r3, [r7, #13]
 8001df6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if (0x40 == (0x40 & dc_state)) {
 8001dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <EPD_begin+0x42e>
			dc_ok = true;
 8001e06:	2301      	movs	r3, #1
 8001e08:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
 8001e0c:	e008      	b.n	8001e20 <EPD_begin+0x440>
	for (int i = 0; i < 4; ++i) {
 8001e0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e12:	3301      	adds	r3, #1
 8001e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	dd85      	ble.n	8001d2c <EPD_begin+0x34c>
		}
	}
	if (!dc_ok) {
 8001e20:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e24:	f083 0301 	eor.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <EPD_begin+0x45c>
		epd->status = EPD_DC_FAILED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2203      	movs	r2, #3
 8001e32:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f909 	bl	800204c <power_off>
		return;
 8001e3a:	e01b      	b.n	8001e74 <EPD_begin+0x494>
	}

	// output enable to disable
	SPI_send(epd, CU8(0x70, 0x02), 2);
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <EPD_begin+0x4d8>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8001e44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e48:	2202      	movs	r2, #2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fe01 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x04), 2);
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <EPD_begin+0x4dc>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001e5a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fdf6 	bl	8002a54 <SPI_send>

	epd->COG_on = true;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001e70:	e000      	b.n	8001e74 <EPD_begin+0x494>
		return;
 8001e72:	bf00      	nop
}
 8001e74:	37a0      	adds	r7, #160	; 0xa0
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	080167b8 	.word	0x080167b8
 8001e80:	080167bc 	.word	0x080167bc
 8001e84:	080167c0 	.word	0x080167c0
 8001e88:	080167c4 	.word	0x080167c4
 8001e8c:	080167c8 	.word	0x080167c8
 8001e90:	080167cc 	.word	0x080167cc
 8001e94:	080167d0 	.word	0x080167d0
 8001e98:	080167d4 	.word	0x080167d4
 8001e9c:	080167d8 	.word	0x080167d8
 8001ea0:	080167dc 	.word	0x080167dc
 8001ea4:	080167e0 	.word	0x080167e0
 8001ea8:	080167e4 	.word	0x080167e4
 8001eac:	080167e8 	.word	0x080167e8
 8001eb0:	080167ec 	.word	0x080167ec
 8001eb4:	080167b4 	.word	0x080167b4
 8001eb8:	080167ac 	.word	0x080167ac
 8001ebc:	080167f0 	.word	0x080167f0

08001ec0 <EPD_end>:


void EPD_end(EPD_HandleTypeDef *epd) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b090      	sub	sp, #64	; 0x40
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

	nothing_frame(epd);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fa48 	bl	800235e <nothing_frame>

	if (EPD_2_7 == epd->size) {
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d103      	bne.n	8001ede <EPD_end+0x1e>
		dummy_line(epd);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fa60 	bl	800239c <dummy_line>
 8001edc:	e005      	b.n	8001eea <EPD_end+0x2a>
//		Delay_ms(25);
//		digitalWrite(epd->EPD_Pin_BORDER, LOW);
//		Delay_ms(200);
//		digitalWrite(epd->EPD_Pin_BORDER, HIGH);
	} else {
		border_dummy_line(epd);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fa6f 	bl	80023c2 <border_dummy_line>
		Delay_ms(200);
 8001ee4:	20c8      	movs	r0, #200	; 0xc8
 8001ee6:	f002 ffcb 	bl	8004e80 <HAL_Delay>
	}

	// ??? - not described in datasheet
	SPI_send(epd, CU8(0x70, 0x0b), 2);
 8001eea:	4b50      	ldr	r3, [pc, #320]	; (800202c <EPD_end+0x16c>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	813b      	strh	r3, [r7, #8]
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fdab 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 8001efe:	2372      	movs	r3, #114	; 0x72
 8001f00:	733b      	strb	r3, [r7, #12]
 8001f02:	2300      	movs	r3, #0
 8001f04:	737b      	strb	r3, [r7, #13]
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fda0 	bl	8002a54 <SPI_send>

	// latch reset turn on
	SPI_send(epd, CU8(0x70, 0x03), 2);
 8001f14:	4b46      	ldr	r3, [pc, #280]	; (8002030 <EPD_end+0x170>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	823b      	strh	r3, [r7, #16]
 8001f1a:	f107 0310 	add.w	r3, r7, #16
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fd96 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <EPD_end+0x174>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	82bb      	strh	r3, [r7, #20]
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	2202      	movs	r2, #2
 8001f34:	4619      	mov	r1, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fd8c 	bl	8002a54 <SPI_send>

	// power off charge pump Vcom
	SPI_send(epd, CU8(0x70, 0x05), 2);
 8001f3c:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <EPD_end+0x178>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	833b      	strh	r3, [r7, #24]
 8001f42:	f107 0318 	add.w	r3, r7, #24
 8001f46:	2202      	movs	r2, #2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fd82 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x03), 2);
 8001f50:	4b3a      	ldr	r3, [pc, #232]	; (800203c <EPD_end+0x17c>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	83bb      	strh	r3, [r7, #28]
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fd78 	bl	8002a54 <SPI_send>

	// power off charge pump neg voltage
	SPI_send(epd, CU8(0x70, 0x05), 2);
 8001f64:	4b34      	ldr	r3, [pc, #208]	; (8002038 <EPD_end+0x178>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	843b      	strh	r3, [r7, #32]
 8001f6a:	f107 0320 	add.w	r3, r7, #32
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fd6e 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 8001f78:	4b2e      	ldr	r3, [pc, #184]	; (8002034 <EPD_end+0x174>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f82:	2202      	movs	r2, #2
 8001f84:	4619      	mov	r1, r3
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fd64 	bl	8002a54 <SPI_send>

	Delay_ms(120);
 8001f8c:	2078      	movs	r0, #120	; 0x78
 8001f8e:	f002 ff77 	bl	8004e80 <HAL_Delay>

	// discharge internal
	SPI_send(epd, CU8(0x70, 0x04), 2);
 8001f92:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <EPD_end+0x180>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fd57 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x80), 2);
 8001fa6:	4b27      	ldr	r3, [pc, #156]	; (8002044 <EPD_end+0x184>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fd4d 	bl	8002a54 <SPI_send>

	// turn off all charge pumps
	SPI_send(epd, CU8(0x70, 0x05), 2);
 8001fba:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <EPD_end+0x178>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	863b      	strh	r3, [r7, #48]	; 0x30
 8001fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fd43 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 8001fce:	2372      	movs	r3, #114	; 0x72
 8001fd0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001fda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fde:	2202      	movs	r2, #2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fd36 	bl	8002a54 <SPI_send>

	// turn of osc
	SPI_send(epd, CU8(0x70, 0x07), 2);
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <EPD_end+0x188>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	873b      	strh	r3, [r7, #56]	; 0x38
 8001fee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fd2c 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <EPD_end+0x174>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002002:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002006:	2202      	movs	r2, #2
 8002008:	4619      	mov	r1, r3
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fd22 	bl	8002a54 <SPI_send>

	Delay_ms(50);
 8002010:	2032      	movs	r0, #50	; 0x32
 8002012:	f002 ff35 	bl	8004e80 <HAL_Delay>

	power_off(epd);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f818 	bl	800204c <power_off>

	epd->COG_on = false;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002024:	bf00      	nop
 8002026:	3740      	adds	r7, #64	; 0x40
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	080167b8 	.word	0x080167b8
 8002030:	080167e0 	.word	0x080167e0
 8002034:	080167e4 	.word	0x080167e4
 8002038:	080167e8 	.word	0x080167e8
 800203c:	080167dc 	.word	0x080167dc
 8002040:	080167d8 	.word	0x080167d8
 8002044:	080167f4 	.word	0x080167f4
 8002048:	080167c4 	.word	0x080167c4

0800204c <power_off>:


static void power_off(EPD_HandleTypeDef *epd) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

	// turn of power and all signals
	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6958      	ldr	r0, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	8a1b      	ldrh	r3, [r3, #16]
 800205c:	2200      	movs	r2, #0
 800205e:	4619      	mov	r1, r3
 8002060:	f003 f9fe 	bl	8005460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, LOW);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6858      	ldr	r0, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	885b      	ldrh	r3, [r3, #2]
 800206c:	2200      	movs	r2, #0
 800206e:	4619      	mov	r1, r3
 8002070:	f003 f9f6 	bl	8005460 <HAL_GPIO_WritePin>

	// ensure SPI MOSI and CLOCK are Low before CS Low
//	SPI_off(epd->spi);

	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, HIGH);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68d8      	ldr	r0, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	891b      	ldrh	r3, [r3, #8]
 800207c:	2201      	movs	r2, #1
 800207e:	4619      	mov	r1, r3
 8002080:	f003 f9ee 	bl	8005460 <HAL_GPIO_WritePin>
	Delay_ms(150);
 8002084:	2096      	movs	r0, #150	; 0x96
 8002086:	f002 fefb 	bl	8004e80 <HAL_Delay>
	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, LOW);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68d8      	ldr	r0, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	891b      	ldrh	r3, [r3, #8]
 8002092:	2200      	movs	r2, #0
 8002094:	4619      	mov	r1, r3
 8002096:	f003 f9e3 	bl	8005460 <HAL_GPIO_WritePin>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <EPD_set_temperature>:


void EPD_set_temperature(EPD_HandleTypeDef *epd, int temperature) {
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	epd->factored_stage_time = epd->base_stage_time * temperature_to_factor_10x(temperature) / 10;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020b2:	461c      	mov	r4, r3
 80020b4:	6838      	ldr	r0, [r7, #0]
 80020b6:	f000 f86a 	bl	800218e <temperature_to_factor_10x>
 80020ba:	4603      	mov	r3, r0
 80020bc:	fb03 f304 	mul.w	r3, r3, r4
 80020c0:	4a06      	ldr	r2, [pc, #24]	; (80020dc <EPD_set_temperature+0x38>)
 80020c2:	fb82 1203 	smull	r1, r2, r2, r3
 80020c6:	1092      	asrs	r2, r2, #2
 80020c8:	17db      	asrs	r3, r3, #31
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd90      	pop	{r4, r7, pc}
 80020da:	bf00      	nop
 80020dc:	66666667 	.word	0x66666667

080020e0 <EPD_set_enable_temperature>:

void EPD_set_enable_temperature(void){
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
	setTemp = true;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <EPD_set_enable_temperature+0x14>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	2000025e 	.word	0x2000025e

080020f8 <EPD_clear>:
//	epd->factored_stage_time = pu_stagetime;
//}


// clear display (anything -> white)
void EPD_clear(EPD_HandleTypeDef *epd) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	frame_fixed_repeat(epd, 0xff, EPD_compensate);
 8002100:	2200      	movs	r2, #0
 8002102:	21ff      	movs	r1, #255	; 0xff
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f8e5 	bl	80022d4 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xff, EPD_white);
 800210a:	2201      	movs	r2, #1
 800210c:	21ff      	movs	r1, #255	; 0xff
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8e0 	bl	80022d4 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_inverse);
 8002114:	2202      	movs	r2, #2
 8002116:	21aa      	movs	r1, #170	; 0xaa
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f8db 	bl	80022d4 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_normal);
 800211e:	2203      	movs	r2, #3
 8002120:	21aa      	movs	r1, #170	; 0xaa
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8d6 	bl	80022d4 <frame_fixed_repeat>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <EPD_image_0>:

// assuming a clear (white) screen output an image
void EPD_image_0(EPD_HandleTypeDef *epd, const uint8_t *image) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
	frame_fixed_repeat(epd, 0xaa, EPD_compensate);
 800213a:	2200      	movs	r2, #0
 800213c:	21aa      	movs	r1, #170	; 0xaa
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f8c8 	bl	80022d4 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_white);
 8002144:	2201      	movs	r2, #1
 8002146:	21aa      	movs	r1, #170	; 0xaa
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f8c3 	bl	80022d4 <frame_fixed_repeat>
	frame_data_repeat(epd, image, NULL, EPD_inverse);
 800214e:	2302      	movs	r3, #2
 8002150:	2200      	movs	r2, #0
 8002152:	6839      	ldr	r1, [r7, #0]
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f8e0 	bl	800231a <frame_data_repeat>
	frame_data_repeat(epd, image, NULL, EPD_normal);
 800215a:	2303      	movs	r3, #3
 800215c:	2200      	movs	r2, #0
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f8da 	bl	800231a <frame_data_repeat>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <EPD_partial_image>:
	frame_data_repeat(epd, new_image, NULL, EPD_inverse);
	frame_data_repeat(epd, new_image, NULL, EPD_normal);
}

// change from old image to new image
void EPD_partial_image(EPD_HandleTypeDef *epd, const uint8_t *old_image, const uint8_t *new_image) {
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
	// Only need last stage for partial update
	// See discussion on issue #19 in the repaper/gratis repository on github
	frame_data_repeat(epd, new_image, old_image, EPD_normal);
 800217a:	2303      	movs	r3, #3
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f8ca 	bl	800231a <frame_data_repeat>
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <temperature_to_factor_10x>:
// internal functions
// ==================

// convert a temperature in Celsius to
// the scale factor for frame_*_repeat methods
static int temperature_to_factor_10x(int temperature) {
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
	if (temperature <= -10) {
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f113 0f09 	cmn.w	r3, #9
 800219c:	da01      	bge.n	80021a2 <temperature_to_factor_10x+0x14>
		return 170;
 800219e:	23aa      	movs	r3, #170	; 0xaa
 80021a0:	e01f      	b.n	80021e2 <temperature_to_factor_10x+0x54>
	} else if (temperature <= -5) {
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f113 0f04 	cmn.w	r3, #4
 80021a8:	da01      	bge.n	80021ae <temperature_to_factor_10x+0x20>
		return 120;
 80021aa:	2378      	movs	r3, #120	; 0x78
 80021ac:	e019      	b.n	80021e2 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 5) {
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	dc01      	bgt.n	80021b8 <temperature_to_factor_10x+0x2a>
		return 80;
 80021b4:	2350      	movs	r3, #80	; 0x50
 80021b6:	e014      	b.n	80021e2 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 10) {
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b0a      	cmp	r3, #10
 80021bc:	dc01      	bgt.n	80021c2 <temperature_to_factor_10x+0x34>
		return 40;
 80021be:	2328      	movs	r3, #40	; 0x28
 80021c0:	e00f      	b.n	80021e2 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 15) {
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	dc01      	bgt.n	80021cc <temperature_to_factor_10x+0x3e>
		return 30;
 80021c8:	231e      	movs	r3, #30
 80021ca:	e00a      	b.n	80021e2 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 20) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b14      	cmp	r3, #20
 80021d0:	dc01      	bgt.n	80021d6 <temperature_to_factor_10x+0x48>
		return 20;
 80021d2:	2314      	movs	r3, #20
 80021d4:	e005      	b.n	80021e2 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 40) {
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b28      	cmp	r3, #40	; 0x28
 80021da:	dc01      	bgt.n	80021e0 <temperature_to_factor_10x+0x52>
		return 10;
 80021dc:	230a      	movs	r3, #10
 80021de:	e000      	b.n	80021e2 <temperature_to_factor_10x+0x54>
	}
	return 7;
 80021e0:	2307      	movs	r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <frame_fixed>:
// The 2.7” frame of data is 176 lines * 264 dots.

// the image is arranged by line which matches the display size
// so smallest would have 96 * 32 bytes

static void frame_fixed(EPD_HandleTypeDef *epd, uint8_t fixed_value, EPD_stage stage) {
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af02      	add	r7, sp, #8
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	70fb      	strb	r3, [r7, #3]
 80021fa:	4613      	mov	r3, r2
 80021fc:	70bb      	strb	r3, [r7, #2]
	for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e00e      	b.n	8002222 <frame_fixed+0x34>
		one_line(epd, l, NULL, fixed_value, NULL, stage);
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	b299      	uxth	r1, r3
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	78bb      	ldrb	r3, [r7, #2]
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	2300      	movs	r3, #0
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	2200      	movs	r2, #0
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fb06 	bl	8002828 <one_line>
	for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	3301      	adds	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	b29a      	uxth	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800222a:	429a      	cmp	r2, r3
 800222c:	d3ea      	bcc.n	8002204 <frame_fixed+0x16>
	}
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <frame_data>:


static void frame_data(EPD_HandleTypeDef *epd, const uint8_t *image, const uint8_t *mask, EPD_stage stage) {
 8002236:	b580      	push	{r7, lr}
 8002238:	b088      	sub	sp, #32
 800223a:	af02      	add	r7, sp, #8
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	70fb      	strb	r3, [r7, #3]
	if (NULL == mask) {
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11e      	bne.n	8002288 <frame_data+0x52>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]
 800224e:	e014      	b.n	800227a <frame_data+0x44>
			one_line(epd, l, &image[l * epd->bytes_per_line], 0, NULL, stage);
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	b299      	uxth	r1, r3
 8002254:	7dfb      	ldrb	r3, [r7, #23]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	441a      	add	r2, r3
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	2300      	movs	r3, #0
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2300      	movs	r3, #0
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fada 	bl	8002828 <one_line>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	3301      	adds	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
 800227a:	7dfb      	ldrb	r3, [r7, #23]
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002282:	429a      	cmp	r2, r3
 8002284:	d3e4      	bcc.n	8002250 <frame_data+0x1a>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
			size_t n = l * epd->bytes_per_line;
			one_line(epd, l, &image[n], 0, &mask[n], stage);
		}
	}
}
 8002286:	e021      	b.n	80022cc <frame_data+0x96>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8002288:	2300      	movs	r3, #0
 800228a:	75bb      	strb	r3, [r7, #22]
 800228c:	e018      	b.n	80022c0 <frame_data+0x8a>
			size_t n = l * epd->bytes_per_line;
 800228e:	7dbb      	ldrb	r3, [r7, #22]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	613b      	str	r3, [r7, #16]
			one_line(epd, l, &image[n], 0, &mask[n], stage);
 800229a:	7dbb      	ldrb	r3, [r7, #22]
 800229c:	b299      	uxth	r1, r3
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	18d0      	adds	r0, r2, r3
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	9201      	str	r2, [sp, #4]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2300      	movs	r3, #0
 80022b2:	4602      	mov	r2, r0
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 fab7 	bl	8002828 <one_line>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 80022ba:	7dbb      	ldrb	r3, [r7, #22]
 80022bc:	3301      	adds	r3, #1
 80022be:	75bb      	strb	r3, [r7, #22]
 80022c0:	7dbb      	ldrb	r3, [r7, #22]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d3e0      	bcc.n	800228e <frame_data+0x58>
}
 80022cc:	bf00      	nop
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <frame_fixed_repeat>:


static void frame_fixed_repeat(EPD_HandleTypeDef *epd, uint8_t fixed_value, EPD_stage stage) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
 80022e0:	4613      	mov	r3, r2
 80022e2:	70bb      	strb	r3, [r7, #2]
	int iters = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
	uint32_t startTime = HAL_GetTick();
 80022e8:	f002 fdbe 	bl	8004e68 <HAL_GetTick>
 80022ec:	60b8      	str	r0, [r7, #8]

	do {
		frame_fixed(epd, fixed_value, stage);
 80022ee:	78ba      	ldrb	r2, [r7, #2]
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	4619      	mov	r1, r3
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff7a 	bl	80021ee <frame_fixed>
		iters++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3301      	adds	r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
	} while (HAL_GetTick() - startTime < epd->factored_stage_time);
 8002300:	f002 fdb2 	bl	8004e68 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800230e:	4293      	cmp	r3, r2
 8002310:	d3ed      	bcc.n	80022ee <frame_fixed_repeat+0x1a>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <frame_data_repeat>:


static void frame_data_repeat(EPD_HandleTypeDef *epd, const uint8_t *image, const uint8_t *mask, EPD_stage stage) {
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	70fb      	strb	r3, [r7, #3]
	int iters = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
	uint32_t startTime = HAL_GetTick();
 800232c:	f002 fd9c 	bl	8004e68 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

	do {
		frame_data(epd, image, mask, stage);
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68b9      	ldr	r1, [r7, #8]
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f7ff ff7c 	bl	8002236 <frame_data>
		iters++;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
	} while (HAL_GetTick() - startTime < epd->factored_stage_time);
 8002344:	f002 fd90 	bl	8004e68 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002352:	4293      	cmp	r3, r2
 8002354:	d3ed      	bcc.n	8002332 <frame_data_repeat+0x18>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <nothing_frame>:



static void nothing_frame(EPD_HandleTypeDef *epd) {
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af02      	add	r7, sp, #8
 8002364:	6078      	str	r0, [r7, #4]
	for (int line = 0; line < epd->lines_per_display; ++line) {
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	e00d      	b.n	8002388 <nothing_frame+0x2a>
		one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_compensate);
 800236c:	2300      	movs	r3, #0
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2300      	movs	r3, #0
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2300      	movs	r3, #0
 8002376:	2200      	movs	r2, #0
 8002378:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fa53 	bl	8002828 <one_line>
	for (int line = 0; line < epd->lines_per_display; ++line) {
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3301      	adds	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800238c:	461a      	mov	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4293      	cmp	r3, r2
 8002392:	dbeb      	blt.n	800236c <nothing_frame+0xe>
	}
}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <dummy_line>:


static void dummy_line(EPD_HandleTypeDef *epd) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	6078      	str	r0, [r7, #4]
	one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_compensate);
 80023a4:	2300      	movs	r3, #0
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	2300      	movs	r3, #0
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2300      	movs	r3, #0
 80023ae:	2200      	movs	r2, #0
 80023b0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fa37 	bl	8002828 <one_line>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <border_dummy_line>:


static void border_dummy_line(EPD_HandleTypeDef *epd) {
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af02      	add	r7, sp, #8
 80023c8:	6078      	str	r0, [r7, #4]
	one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_normal);
 80023ca:	2303      	movs	r3, #3
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	2300      	movs	r3, #0
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2300      	movs	r3, #0
 80023d4:	2200      	movs	r2, #0
 80023d6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fa24 	bl	8002828 <one_line>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <even_pixels>:


// pixels on display are numbered from 1 so even is actually bits 1,3,5,...
static void even_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	70fb      	strb	r3, [r7, #3]

	for (uint16_t b = 0; b < epd->bytes_per_line; ++b) {
 80023f6:	2300      	movs	r3, #0
 80023f8:	82fb      	strh	r3, [r7, #22]
 80023fa:	e098      	b.n	800252e <even_pixels+0x146>
		if (NULL != data) {
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 808b 	beq.w	800251a <even_pixels+0x132>
			uint8_t pixels = data[b] & 0xaa;
 8002404:	8afb      	ldrh	r3, [r7, #22]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8002410:	757b      	strb	r3, [r7, #21]
			uint8_t pixel_mask = 0xff;
 8002412:	23ff      	movs	r3, #255	; 0xff
 8002414:	753b      	strb	r3, [r7, #20]
			if (NULL != mask) {
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00f      	beq.n	800243c <even_pixels+0x54>
				pixel_mask = (mask[b] ^ pixels) & 0xaa;
 800241c:	8afb      	ldrh	r3, [r7, #22]
 800241e:	6a3a      	ldr	r2, [r7, #32]
 8002420:	4413      	add	r3, r2
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	7d7b      	ldrb	r3, [r7, #21]
 8002426:	4053      	eors	r3, r2
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 800242e:	753b      	strb	r3, [r7, #20]
				pixel_mask |= pixel_mask >> 1;
 8002430:	7d3b      	ldrb	r3, [r7, #20]
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	b2da      	uxtb	r2, r3
 8002436:	7d3b      	ldrb	r3, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	753b      	strb	r3, [r7, #20]
			}
			switch(stage) {
 800243c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002440:	2b03      	cmp	r3, #3
 8002442:	d82e      	bhi.n	80024a2 <even_pixels+0xba>
 8002444:	a201      	add	r2, pc, #4	; (adr r2, 800244c <even_pixels+0x64>)
 8002446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244a:	bf00      	nop
 800244c:	0800245d 	.word	0x0800245d
 8002450:	08002471 	.word	0x08002471
 8002454:	08002483 	.word	0x08002483
 8002458:	08002495 	.word	0x08002495
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaa | ((pixels ^ 0xaa) >> 1);
 800245c:	7d7b      	ldrb	r3, [r7, #21]
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f063 0355 	orn	r3, r3, #85	; 0x55
 800246c:	757b      	strb	r3, [r7, #21]
				break;
 800246e:	e018      	b.n	80024a2 <even_pixels+0xba>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x55 + ((pixels ^ 0xaa) >> 1);
 8002470:	7d7b      	ldrb	r3, [r7, #21]
 8002472:	085b      	lsrs	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3355      	adds	r3, #85	; 0x55
 800247e:	757b      	strb	r3, [r7, #21]
				break;
 8002480:	e00f      	b.n	80024a2 <even_pixels+0xba>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x55 | (pixels ^ 0xaa);
 8002482:	7d7b      	ldrb	r3, [r7, #21]
 8002484:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002488:	43db      	mvns	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002490:	757b      	strb	r3, [r7, #21]
				break;
 8002492:	e006      	b.n	80024a2 <even_pixels+0xba>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaa | (pixels >> 1);
 8002494:	7d7b      	ldrb	r3, [r7, #21]
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f063 0355 	orn	r3, r3, #85	; 0x55
 800249e:	757b      	strb	r3, [r7, #21]
				break;
 80024a0:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x55);
 80024a2:	7d7a      	ldrb	r2, [r7, #21]
 80024a4:	7d3b      	ldrb	r3, [r7, #20]
 80024a6:	4013      	ands	r3, r2
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	b25a      	sxtb	r2, r3
 80024ac:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	b25b      	sxtb	r3, r3
 80024b4:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80024b8:	b25b      	sxtb	r3, r3
 80024ba:	4313      	orrs	r3, r2
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	757b      	strb	r3, [r7, #21]
			uint8_t p1 = (pixels >> 6) & 0x03;
 80024c0:	7d7b      	ldrb	r3, [r7, #21]
 80024c2:	099b      	lsrs	r3, r3, #6
 80024c4:	74fb      	strb	r3, [r7, #19]
			uint8_t p2 = (pixels >> 4) & 0x03;
 80024c6:	7d7b      	ldrb	r3, [r7, #21]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	74bb      	strb	r3, [r7, #18]
			uint8_t p3 = (pixels >> 2) & 0x03;
 80024d2:	7d7b      	ldrb	r3, [r7, #21]
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	747b      	strb	r3, [r7, #17]
			uint8_t p4 = (pixels >> 0) & 0x03;
 80024de:	7d7b      	ldrb	r3, [r7, #21]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	743b      	strb	r3, [r7, #16]
			pixels = (p1 << 0) | (p2 << 2) | (p3 << 4) | (p4 << 6);
 80024e6:	7cbb      	ldrb	r3, [r7, #18]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	b25a      	sxtb	r2, r3
 80024ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	b25a      	sxtb	r2, r3
 80024f4:	7c7b      	ldrb	r3, [r7, #17]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	4313      	orrs	r3, r2
 80024fc:	b25a      	sxtb	r2, r3
 80024fe:	7c3b      	ldrb	r3, [r7, #16]
 8002500:	019b      	lsls	r3, r3, #6
 8002502:	b25b      	sxtb	r3, r3
 8002504:	4313      	orrs	r3, r2
 8002506:	b25b      	sxtb	r3, r3
 8002508:	757b      	strb	r3, [r7, #21]
			*(*pp)++ = pixels;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	1c59      	adds	r1, r3, #1
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	6011      	str	r1, [r2, #0]
 8002514:	7d7a      	ldrb	r2, [r7, #21]
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e006      	b.n	8002528 <even_pixels+0x140>
		} else {
			*(*pp)++ = fixed_value;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1c59      	adds	r1, r3, #1
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	6011      	str	r1, [r2, #0]
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = 0; b < epd->bytes_per_line; ++b) {
 8002528:	8afb      	ldrh	r3, [r7, #22]
 800252a:	3301      	adds	r3, #1
 800252c:	82fb      	strh	r3, [r7, #22]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002532:	8afa      	ldrh	r2, [r7, #22]
 8002534:	429a      	cmp	r2, r3
 8002536:	f4ff af61 	bcc.w	80023fc <even_pixels+0x14>
		}
	}
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop

08002548 <odd_pixels>:

// pixels on display are numbered from 1 so odd is actually bits 0,2,4,...
static void odd_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	70fb      	strb	r3, [r7, #3]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800255a:	82fb      	strh	r3, [r7, #22]
 800255c:	e072      	b.n	8002644 <odd_pixels+0xfc>
		if (NULL != data) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d065      	beq.n	8002630 <odd_pixels+0xe8>
			uint8_t pixels = data[b - 1] & 0x55;
 8002564:	8afb      	ldrh	r3, [r7, #22]
 8002566:	3b01      	subs	r3, #1
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002572:	757b      	strb	r3, [r7, #21]
			uint8_t pixel_mask = 0xff;
 8002574:	23ff      	movs	r3, #255	; 0xff
 8002576:	753b      	strb	r3, [r7, #20]
			if (NULL != mask) {
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d012      	beq.n	80025a4 <odd_pixels+0x5c>
				pixel_mask = (mask[b - 1] ^ pixels) & 0x55;
 800257e:	8afb      	ldrh	r3, [r7, #22]
 8002580:	3b01      	subs	r3, #1
 8002582:	6a3a      	ldr	r2, [r7, #32]
 8002584:	4413      	add	r3, r2
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	7d7b      	ldrb	r3, [r7, #21]
 800258a:	4053      	eors	r3, r2
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002592:	753b      	strb	r3, [r7, #20]
				pixel_mask |= pixel_mask << 1;
 8002594:	7d3b      	ldrb	r3, [r7, #20]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	b25a      	sxtb	r2, r3
 800259a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	753b      	strb	r3, [r7, #20]
			}
			switch(stage) {
 80025a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d82a      	bhi.n	8002602 <odd_pixels+0xba>
 80025ac:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <odd_pixels+0x6c>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	080025d5 	.word	0x080025d5
 80025bc:	080025e3 	.word	0x080025e3
 80025c0:	080025f9 	.word	0x080025f9
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaa | (pixels ^ 0x55);
 80025c4:	7d7b      	ldrb	r3, [r7, #21]
 80025c6:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f063 0355 	orn	r3, r3, #85	; 0x55
 80025d0:	757b      	strb	r3, [r7, #21]
				break;
 80025d2:	e016      	b.n	8002602 <odd_pixels+0xba>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x55 + (pixels ^ 0x55);
 80025d4:	7d7b      	ldrb	r3, [r7, #21]
 80025d6:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3355      	adds	r3, #85	; 0x55
 80025de:	757b      	strb	r3, [r7, #21]
				break;
 80025e0:	e00f      	b.n	8002602 <odd_pixels+0xba>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x55 | ((pixels ^ 0x55) << 1);
 80025e2:	7d7b      	ldrb	r3, [r7, #21]
 80025e4:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80025f2:	b25b      	sxtb	r3, r3
 80025f4:	757b      	strb	r3, [r7, #21]
				break;
 80025f6:	e004      	b.n	8002602 <odd_pixels+0xba>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaa | pixels;
 80025f8:	7d7b      	ldrb	r3, [r7, #21]
 80025fa:	f063 0355 	orn	r3, r3, #85	; 0x55
 80025fe:	757b      	strb	r3, [r7, #21]
				break;
 8002600:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x55);
 8002602:	7d7a      	ldrb	r2, [r7, #21]
 8002604:	7d3b      	ldrb	r3, [r7, #20]
 8002606:	4013      	ands	r3, r2
 8002608:	b2db      	uxtb	r3, r3
 800260a:	b25a      	sxtb	r2, r3
 800260c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002610:	43db      	mvns	r3, r3
 8002612:	b25b      	sxtb	r3, r3
 8002614:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002618:	b25b      	sxtb	r3, r3
 800261a:	4313      	orrs	r3, r2
 800261c:	b25b      	sxtb	r3, r3
 800261e:	757b      	strb	r3, [r7, #21]
			*(*pp)++ = pixels;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	1c59      	adds	r1, r3, #1
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	6011      	str	r1, [r2, #0]
 800262a:	7d7a      	ldrb	r2, [r7, #21]
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e006      	b.n	800263e <odd_pixels+0xf6>
		} else {
			*(*pp)++ = fixed_value;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	1c59      	adds	r1, r3, #1
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	6011      	str	r1, [r2, #0]
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 800263e:	8afb      	ldrh	r3, [r7, #22]
 8002640:	3b01      	subs	r3, #1
 8002642:	82fb      	strh	r3, [r7, #22]
 8002644:	8afb      	ldrh	r3, [r7, #22]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d189      	bne.n	800255e <odd_pixels+0x16>
		}
	}
}
 800264a:	bf00      	nop
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop

08002658 <interleave_bits>:

// interleave bits: (byte)76543210 -> (16 bit).7.6.5.4.3.2.1
static inline uint16_t interleave_bits(uint16_t value) {
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 4)) & 0x0f0f;
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	b21a      	sxth	r2, r3
 8002668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800266c:	4313      	orrs	r3, r2
 800266e:	b21b      	sxth	r3, r3
 8002670:	b29a      	uxth	r2, r3
 8002672:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002676:	4013      	ands	r3, r2
 8002678:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 2)) & 0x3333;
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	b21a      	sxth	r2, r3
 8002680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002684:	4313      	orrs	r3, r2
 8002686:	b21b      	sxth	r3, r3
 8002688:	b29a      	uxth	r2, r3
 800268a:	f243 3333 	movw	r3, #13107	; 0x3333
 800268e:	4013      	ands	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 1)) & 0x5555;
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	b21a      	sxth	r2, r3
 8002698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800269c:	4313      	orrs	r3, r2
 800269e:	b21b      	sxth	r3, r3
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	f245 5355 	movw	r3, #21845	; 0x5555
 80026a6:	4013      	ands	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
	return value;
 80026aa:	88fb      	ldrh	r3, [r7, #6]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <all_pixels>:

// pixels on display are numbered from 1
static void all_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	70fb      	strb	r3, [r7, #3]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80026ca:	82fb      	strh	r3, [r7, #22]
 80026cc:	e0a1      	b.n	8002812 <all_pixels+0x15a>
		if (NULL != data) {
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 808d 	beq.w	80027f0 <all_pixels+0x138>
			uint16_t pixels = interleave_bits(data[b - 1]);
 80026d6:	8afb      	ldrh	r3, [r7, #22]
 80026d8:	3b01      	subs	r3, #1
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ffb8 	bl	8002658 <interleave_bits>
 80026e8:	4603      	mov	r3, r0
 80026ea:	82bb      	strh	r3, [r7, #20]

			uint16_t pixel_mask = 0xffff;
 80026ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f0:	827b      	strh	r3, [r7, #18]
			if (NULL != mask) {
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01a      	beq.n	800272e <all_pixels+0x76>
				uint16_t pixel_mask = interleave_bits(mask[b - 1]);
 80026f8:	8afb      	ldrh	r3, [r7, #22]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	6a3a      	ldr	r2, [r7, #32]
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ffa7 	bl	8002658 <interleave_bits>
 800270a:	4603      	mov	r3, r0
 800270c:	823b      	strh	r3, [r7, #16]
				pixel_mask = (pixel_mask ^ pixels) & 0x5555;
 800270e:	8a3a      	ldrh	r2, [r7, #16]
 8002710:	8abb      	ldrh	r3, [r7, #20]
 8002712:	4053      	eors	r3, r2
 8002714:	b29a      	uxth	r2, r3
 8002716:	f245 5355 	movw	r3, #21845	; 0x5555
 800271a:	4013      	ands	r3, r2
 800271c:	823b      	strh	r3, [r7, #16]
				pixel_mask |= pixel_mask << 1;
 800271e:	8a3b      	ldrh	r3, [r7, #16]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	b21a      	sxth	r2, r3
 8002724:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	b21b      	sxth	r3, r3
 800272c:	823b      	strh	r3, [r7, #16]
			}
			switch(stage) {
 800272e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002732:	2b03      	cmp	r3, #3
 8002734:	d839      	bhi.n	80027aa <all_pixels+0xf2>
 8002736:	a201      	add	r2, pc, #4	; (adr r2, 800273c <all_pixels+0x84>)
 8002738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273c:	0800274d 	.word	0x0800274d
 8002740:	08002761 	.word	0x08002761
 8002744:	08002777 	.word	0x08002777
 8002748:	08002795 	.word	0x08002795
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaaaa | (pixels ^ 0x5555);
 800274c:	8abb      	ldrh	r3, [r7, #20]
 800274e:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002752:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002756:	b29a      	uxth	r2, r3
 8002758:	4b32      	ldr	r3, [pc, #200]	; (8002824 <all_pixels+0x16c>)
 800275a:	4313      	orrs	r3, r2
 800275c:	82bb      	strh	r3, [r7, #20]
				break;
 800275e:	e024      	b.n	80027aa <all_pixels+0xf2>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x5555 + (pixels ^ 0x5555);
 8002760:	8abb      	ldrh	r3, [r7, #20]
 8002762:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002766:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 800276a:	b29b      	uxth	r3, r3
 800276c:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8002770:	3355      	adds	r3, #85	; 0x55
 8002772:	82bb      	strh	r3, [r7, #20]
				break;
 8002774:	e019      	b.n	80027aa <all_pixels+0xf2>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x5555 | ((pixels ^ 0x5555) << 1);
 8002776:	8abb      	ldrh	r3, [r7, #20]
 8002778:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 800277c:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002780:	b29b      	uxth	r3, r3
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	b21b      	sxth	r3, r3
 8002786:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800278a:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800278e:	b21b      	sxth	r3, r3
 8002790:	82bb      	strh	r3, [r7, #20]
				break;
 8002792:	e00a      	b.n	80027aa <all_pixels+0xf2>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaaaa | pixels;
 8002794:	8abb      	ldrh	r3, [r7, #20]
 8002796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800279a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800279e:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 80027a2:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 80027a6:	82bb      	strh	r3, [r7, #20]
				break;
 80027a8:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x5555);
 80027aa:	8aba      	ldrh	r2, [r7, #20]
 80027ac:	8a7b      	ldrh	r3, [r7, #18]
 80027ae:	4013      	ands	r3, r2
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	b21a      	sxth	r2, r3
 80027b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	b219      	sxth	r1, r3
 80027bc:	f245 5355 	movw	r3, #21845	; 0x5555
 80027c0:	400b      	ands	r3, r1
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	82bb      	strh	r3, [r7, #20]
			*(*pp)++ = pixels >> 8;
 80027ca:	8abb      	ldrh	r3, [r7, #20]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	b298      	uxth	r0, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	1c59      	adds	r1, r3, #1
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	6011      	str	r1, [r2, #0]
 80027da:	b2c2      	uxtb	r2, r0
 80027dc:	701a      	strb	r2, [r3, #0]
			*(*pp)++ = pixels;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	1c59      	adds	r1, r3, #1
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	6011      	str	r1, [r2, #0]
 80027e8:	8aba      	ldrh	r2, [r7, #20]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e00d      	b.n	800280c <all_pixels+0x154>
		} else {
			*(*pp)++ = fixed_value;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	1c59      	adds	r1, r3, #1
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	6011      	str	r1, [r2, #0]
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	701a      	strb	r2, [r3, #0]
			*(*pp)++ = fixed_value;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	1c59      	adds	r1, r3, #1
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	6011      	str	r1, [r2, #0]
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 800280c:	8afb      	ldrh	r3, [r7, #22]
 800280e:	3b01      	subs	r3, #1
 8002810:	82fb      	strh	r3, [r7, #22]
 8002812:	8afb      	ldrh	r3, [r7, #22]
 8002814:	2b00      	cmp	r3, #0
 8002816:	f47f af5a 	bne.w	80026ce <all_pixels+0x16>
		}
	}
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	ffffaaaa 	.word	0xffffaaaa

08002828 <one_line>:

// output one line of scan and data bytes to the display
static void one_line(EPD_HandleTypeDef *epd, uint16_t line, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	; 0x30
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	461a      	mov	r2, r3
 8002834:	460b      	mov	r3, r1
 8002836:	817b      	strh	r3, [r7, #10]
 8002838:	4613      	mov	r3, r2
 800283a:	727b      	strb	r3, [r7, #9]

	// send data
	SPI_send(epd, CU8(0x70, 0x0a), 2);
 800283c:	4b82      	ldr	r3, [pc, #520]	; (8002a48 <one_line+0x220>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	833b      	strh	r3, [r7, #24]
 8002842:	f107 0318 	add.w	r3, r7, #24
 8002846:	2202      	movs	r2, #2
 8002848:	4619      	mov	r1, r3
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f902 	bl	8002a54 <SPI_send>

	// Start Loading the line buffer
	uint8_t *p = epd->line_buffer;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	617b      	str	r3, [r7, #20]

	*p++ = 0x72;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	617a      	str	r2, [r7, #20]
 800285c:	2272      	movs	r2, #114	; 0x72
 800285e:	701a      	strb	r2, [r3, #0]

	if (epd->pre_border_byte) {
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <one_line+0x4c>
		*p++ = 0x00;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	617a      	str	r2, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
	}

	if (epd->middle_scan) {
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800287a:	2b00      	cmp	r3, #0
 800287c:	d03e      	beq.n	80028fc <one_line+0xd4>
		// data bytes
		odd_pixels(epd, &p, data, fixed_value, mask, stage);
 800287e:	7a7a      	ldrb	r2, [r7, #9]
 8002880:	f107 0114 	add.w	r1, r7, #20
 8002884:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	4613      	mov	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff fe58 	bl	8002548 <odd_pixels>

		// scan line
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800289c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800289e:	e01c      	b.n	80028da <one_line+0xb2>
			if (line / 4 == b - 1) {
 80028a0:	897b      	ldrh	r3, [r7, #10]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028aa:	3b01      	subs	r3, #1
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d10c      	bne.n	80028ca <one_line+0xa2>
				*p++ = 0x03 << (2 * (line & 0x03));
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f103 	lsl.w	r1, r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	617a      	str	r2, [r7, #20]
 80028c4:	b2ca      	uxtb	r2, r1
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e004      	b.n	80028d4 <one_line+0xac>
			} else {
				*p++ = 0x00;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	617a      	str	r2, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 80028d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028d6:	3b01      	subs	r3, #1
 80028d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80028da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1df      	bne.n	80028a0 <one_line+0x78>
			}
		}

		// data bytes
		even_pixels(epd, &p, data, fixed_value, mask, stage);
 80028e0:	7a7a      	ldrb	r2, [r7, #9]
 80028e2:	f107 0114 	add.w	r1, r7, #20
 80028e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff fd77 	bl	80023e8 <even_pixels>
 80028fa:	e05b      	b.n	80029b4 <one_line+0x18c>

	} else {
		// even scan line, but as lines on display are numbered from 1, line: 1,3,5,...
		for (uint16_t b = 0; b < epd->bytes_per_scan; ++b) {
 80028fc:	2300      	movs	r3, #0
 80028fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002900:	e01e      	b.n	8002940 <one_line+0x118>
			if (0 != (line & 0x01) && line / 8 == b) {
 8002902:	897b      	ldrh	r3, [r7, #10]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d011      	beq.n	8002930 <one_line+0x108>
 800290c:	897b      	ldrh	r3, [r7, #10]
 800290e:	08db      	lsrs	r3, r3, #3
 8002910:	b29b      	uxth	r3, r3
 8002912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002914:	429a      	cmp	r2, r3
 8002916:	d10b      	bne.n	8002930 <one_line+0x108>
				*p++ = 0xc0 >> (line & 0x06);
 8002918:	897b      	ldrh	r3, [r7, #10]
 800291a:	f003 0306 	and.w	r3, r3, #6
 800291e:	22c0      	movs	r2, #192	; 0xc0
 8002920:	fa42 f103 	asr.w	r1, r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	617a      	str	r2, [r7, #20]
 800292a:	b2ca      	uxtb	r2, r1
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e004      	b.n	800293a <one_line+0x112>
			} else {
				*p++ = 0x00;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	617a      	str	r2, [r7, #20]
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = 0; b < epd->bytes_per_scan; ++b) {
 800293a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800293c:	3301      	adds	r3, #1
 800293e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002944:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002946:	429a      	cmp	r2, r3
 8002948:	d3db      	bcc.n	8002902 <one_line+0xda>
			}
		}

		// data bytes
		all_pixels(epd, &p, data, fixed_value, mask, stage);
 800294a:	7a7a      	ldrb	r2, [r7, #9]
 800294c:	f107 0114 	add.w	r1, r7, #20
 8002950:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff feaa 	bl	80026b8 <all_pixels>

		// odd scan line, but as lines on display are numbered from 1, line: 0,2,4,6,...
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002968:	847b      	strh	r3, [r7, #34]	; 0x22
 800296a:	e020      	b.n	80029ae <one_line+0x186>
			if (0 == (line & 0x01) && line / 8 == b - 1) {
 800296c:	897b      	ldrh	r3, [r7, #10]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d113      	bne.n	800299e <one_line+0x176>
 8002976:	897b      	ldrh	r3, [r7, #10]
 8002978:	08db      	lsrs	r3, r3, #3
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002980:	3b01      	subs	r3, #1
 8002982:	429a      	cmp	r2, r3
 8002984:	d10b      	bne.n	800299e <one_line+0x176>
				*p++ = 0x03 << (line & 0x06);
 8002986:	897b      	ldrh	r3, [r7, #10]
 8002988:	f003 0306 	and.w	r3, r3, #6
 800298c:	2203      	movs	r2, #3
 800298e:	fa02 f103 	lsl.w	r1, r2, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	617a      	str	r2, [r7, #20]
 8002998:	b2ca      	uxtb	r2, r1
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e004      	b.n	80029a8 <one_line+0x180>
			} else {
				*p++ = 0x00;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	617a      	str	r2, [r7, #20]
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 80029a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029aa:	3b01      	subs	r3, #1
 80029ac:	847b      	strh	r3, [r7, #34]	; 0x22
 80029ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1db      	bne.n	800296c <one_line+0x144>
			}
		}
	}

	// post data border byte
	switch (epd->border_byte) {
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d003      	beq.n	80029c6 <one_line+0x19e>
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d007      	beq.n	80029d2 <one_line+0x1aa>
 80029c2:	2b00      	cmp	r3, #0
	case EPD_BORDER_BYTE_NONE:  // no border byte requred
		break;
 80029c4:	e01b      	b.n	80029fe <one_line+0x1d6>

	case EPD_BORDER_BYTE_ZERO:  // border byte == 0x00 requred
		*p++ = 0x00;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	617a      	str	r2, [r7, #20]
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
		break;
 80029d0:	e015      	b.n	80029fe <one_line+0x1d6>

	case EPD_BORDER_BYTE_SET:   // border byte needs to be set
		switch(stage) {
 80029d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	db10      	blt.n	80029fc <one_line+0x1d4>
 80029da:	2b02      	cmp	r3, #2
 80029dc:	dd02      	ble.n	80029e4 <one_line+0x1bc>
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d006      	beq.n	80029f0 <one_line+0x1c8>
			break;
		case EPD_normal:
			*p++ = 0xaa;
			break;
		}
		break;
 80029e2:	e00b      	b.n	80029fc <one_line+0x1d4>
			*p++ = 0x00;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	617a      	str	r2, [r7, #20]
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
			break;
 80029ee:	e005      	b.n	80029fc <one_line+0x1d4>
			*p++ = 0xaa;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	617a      	str	r2, [r7, #20]
 80029f6:	22aa      	movs	r2, #170	; 0xaa
 80029f8:	701a      	strb	r2, [r3, #0]
			break;
 80029fa:	bf00      	nop
		break;
 80029fc:	bf00      	nop
	}
	// send the accumulated line buffer
	SPI_send(epd, epd->line_buffer, p - epd->line_buffer);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	461a      	mov	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f81f 	bl	8002a54 <SPI_send>

	// output data to panel
	SPI_send(epd, CU8(0x70, 0x02), 2);
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <one_line+0x224>)
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	83bb      	strh	r3, [r7, #28]
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	2202      	movs	r2, #2
 8002a22:	4619      	mov	r1, r3
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f815 	bl	8002a54 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x07), 2);
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <one_line+0x228>)
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	843b      	strh	r3, [r7, #32]
 8002a30:	f107 0320 	add.w	r3, r7, #32
 8002a34:	2202      	movs	r2, #2
 8002a36:	4619      	mov	r1, r3
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f80b 	bl	8002a54 <SPI_send>

	//Delay_ms(1);
}
 8002a3e:	bf00      	nop
 8002a40:	3728      	adds	r7, #40	; 0x28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	080167f8 	.word	0x080167f8
 8002a4c:	080167ac 	.word	0x080167ac
 8002a50:	080167fc 	.word	0x080167fc

08002a54 <SPI_send>:


// Low Level SPI Commands
// SPI Send Function.
static void SPI_send(EPD_HandleTypeDef *epd, uint8_t *pData, uint16_t Size) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	80fb      	strh	r3, [r7, #6]
	// Write CS Low
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, LOW);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8c1b      	ldrh	r3, [r3, #32]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f002 fcf7 	bl	8005460 <HAL_GPIO_WritePin>
	// Send Data
	HAL_SPI_Transmit(epd->spi, pData, Size, 1000);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002a76:	88fa      	ldrh	r2, [r7, #6]
 8002a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	f006 ffaf 	bl	80099e0 <HAL_SPI_Transmit>
	// Write CS High
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8c1b      	ldrh	r3, [r3, #32]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f002 fce7 	bl	8005460 <HAL_GPIO_WritePin>
	// Delay for 10us
	Delay_us(10);
 8002a92:	200a      	movs	r0, #10
 8002a94:	f7fe f984 	bl	8000da0 <DWT_Delay>
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <SPI_read>:

// SPI Read Function
static void SPI_read(EPD_HandleTypeDef *epd, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	807b      	strh	r3, [r7, #2]
	// Write CS Low
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, LOW);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8c1b      	ldrh	r3, [r3, #32]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f002 fcd1 	bl	8005460 <HAL_GPIO_WritePin>
	// Send Data
	HAL_SPI_TransmitReceive(epd->spi, pTxData, pRxData, Size, 1000);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	f007 f8ba 	bl	8009c48 <HAL_SPI_TransmitReceive>
	// Write CS High
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8c1b      	ldrh	r3, [r3, #32]
 8002adc:	2201      	movs	r2, #1
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f002 fcbe 	bl	8005460 <HAL_GPIO_WritePin>
	// Delay for 10us
	Delay_us(10);
 8002ae4:	200a      	movs	r0, #10
 8002ae6:	f7fe f95b 	bl	8000da0 <DWT_Delay>
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <Canvas_Init>:
#include "epd_gfx.h"
#include "epd_g2.h"

uint8_t* b_canvas;

Canvas_error Canvas_Init(Canvas* canvas, uint16_t width, uint16_t height) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	803b      	strh	r3, [r7, #0]
	// Allocate memory for the buffer canvas depending on display size
	b_canvas = (uint8_t *)malloc(width * height);
 8002b04:	887b      	ldrh	r3, [r7, #2]
 8002b06:	883a      	ldrh	r2, [r7, #0]
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f013 f991 	bl	8015e34 <malloc>
 8002b12:	4603      	mov	r3, r0
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <Canvas_Init+0x84>)
 8002b18:	601a      	str	r2, [r3, #0]
	memset(b_canvas, 0x00, width * height);
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <Canvas_Init+0x84>)
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	883a      	ldrh	r2, [r7, #0]
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	2100      	movs	r1, #0
 8002b2a:	f013 f9ad 	bl	8015e88 <memset>

	if (b_canvas == NULL){
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <Canvas_Init+0x84>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <Canvas_Init+0x46>
		return CANVAS_MEM_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e01a      	b.n	8002b70 <Canvas_Init+0x7c>
	}
	canvas->rotate = ROTATE_0;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	721a      	strb	r2, [r3, #8]
	canvas->image = b_canvas;
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <Canvas_Init+0x84>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	601a      	str	r2, [r3, #0]
	/* 1 byte = 8 pixels, so the width should be the multiple of 8 */
	canvas->width = width % 8 ? width + 8 - (width % 8) : width;
 8002b48:	887b      	ldrh	r3, [r7, #2]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <Canvas_Init+0x6e>
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	f023 0307 	bic.w	r3, r3, #7
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	e000      	b.n	8002b64 <Canvas_Init+0x70>
 8002b62:	887b      	ldrh	r3, [r7, #2]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	8093      	strh	r3, [r2, #4]
	canvas->height = height;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	883a      	ldrh	r2, [r7, #0]
 8002b6c:	80da      	strh	r2, [r3, #6]

	return CANVAS_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20000f70 	.word	0x20000f70

08002b7c <canvas_DrawFilters>:

// Responsible for taking the software filter set model and updating the EPD
void canvas_DrawFilters(Canvas* canvas, EPD_HandleTypeDef* epd, filterSection_t *currentFilters){
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	f6ad 1da4 	subw	sp, sp, #2468	; 0x9a4
 8002b82:	af02      	add	r7, sp, #8
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	6018      	str	r0, [r3, #0]
 8002b8a:	f107 0308 	add.w	r3, r7, #8
 8002b8e:	6019      	str	r1, [r3, #0]
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	601a      	str	r2, [r3, #0]
// It also keeps track of how many times the screen has been refreshed
	// If it has been refreshed 5+ times, perform a full refresh

// At some point, this will need to know how many filter slots are installed and draw the canvas correctly

	uint8_t tmpName[10] = {0};
 8002b94:	f607 1384 	addw	r3, r7, #2436	; 0x984
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	811a      	strh	r2, [r3, #8]

	uint8_t prevImage[2400];
	static uint8_t refreshCount = 0;	// Keep track of how many times the screen has been updated

	// Store the current image so that a partial update can be compared
	memcpy(prevImage, canvas->image, 2400);
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f013 f95c 	bl	8015e72 <memcpy>

	//Start with a clear BG
	canvas_setBGImage(canvas, image_background);
 8002bba:	f107 030c 	add.w	r3, r7, #12
 8002bbe:	49b2      	ldr	r1, [pc, #712]	; (8002e88 <canvas_DrawFilters+0x30c>)
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	f000 fb56 	bl	8003272 <canvas_setBGImage>
	canvas_DrawStringAt(canvas, 10, 3, "FILTERS", &Font16, 1);
 8002bc6:	f107 000c 	add.w	r0, r7, #12
 8002bca:	2301      	movs	r3, #1
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	4baf      	ldr	r3, [pc, #700]	; (8002e8c <canvas_DrawFilters+0x310>)
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	4baf      	ldr	r3, [pc, #700]	; (8002e90 <canvas_DrawFilters+0x314>)
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	210a      	movs	r1, #10
 8002bd8:	6800      	ldr	r0, [r0, #0]
 8002bda:	f000 fb04 	bl	80031e6 <canvas_DrawStringAt>

	// Loop through all filter stages
	for (uint8_t filterStage = 1; filterStage <= FILTER_SECTION_SIZE; filterStage++){
 8002bde:	2301      	movs	r3, #1
 8002be0:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
 8002be4:	e123      	b.n	8002e2e <canvas_DrawFilters+0x2b2>
		// Try to find a filter in the current position
		for (uint8_t filter = 0; filter < FILTER_SECTION_SIZE; filter++){
 8002be6:	2300      	movs	r3, #0
 8002be8:	f887 3995 	strb.w	r3, [r7, #2453]	; 0x995
 8002bec:	e115      	b.n	8002e1a <canvas_DrawFilters+0x29e>
			if (currentFilters->filter[filter].position == filterStage){
 8002bee:	f897 2995 	ldrb.w	r2, [r7, #2453]	; 0x995
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	440b      	add	r3, r1
 8002c02:	3313      	adds	r3, #19
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	f040 8100 	bne.w	8002e10 <canvas_DrawFilters+0x294>
				// Found a filter loaded in the current position
				// Store the name into tmpName
				memcpy(tmpName, currentFilters->filter[filter].filterName, 10);
 8002c10:	f897 2995 	ldrb.w	r2, [r7, #2453]	; 0x995
 8002c14:	1d39      	adds	r1, r7, #4
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	680a      	ldr	r2, [r1, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	f607 1384 	addw	r3, r7, #2436	; 0x984
 8002c2a:	6810      	ldr	r0, [r2, #0]
 8002c2c:	6851      	ldr	r1, [r2, #4]
 8002c2e:	c303      	stmia	r3!, {r0, r1}
 8002c30:	8912      	ldrh	r2, [r2, #8]
 8002c32:	801a      	strh	r2, [r3, #0]

				// "0x00" is a signal that there isn't any more data
				for (nameLen = 0; nameLen < 10; nameLen++){
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
 8002c3a:	e00d      	b.n	8002c58 <canvas_DrawFilters+0xdc>
					if (tmpName[nameLen] == 0x00){
 8002c3c:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8002c40:	f607 1298 	addw	r2, r7, #2456	; 0x998
 8002c44:	4413      	add	r3, r2
 8002c46:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <canvas_DrawFilters+0xe6>
				for (nameLen = 0; nameLen < 10; nameLen++){
 8002c4e:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8002c52:	3301      	adds	r3, #1
 8002c54:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
 8002c58:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8002c5c:	2b09      	cmp	r3, #9
 8002c5e:	d9ed      	bls.n	8002c3c <canvas_DrawFilters+0xc0>
 8002c60:	e000      	b.n	8002c64 <canvas_DrawFilters+0xe8>
						break;
 8002c62:	bf00      	nop
					}
				}

				// At this point, nameIndex has the length of the Name
				if (nameLen <= 5){
 8002c64:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	d856      	bhi.n	8002d1a <canvas_DrawFilters+0x19e>
					// Only 1 row needed
					// Find the starting Y pixel
					uint8_t sectionHeight;
					sectionHeight = epd->dots_per_line - 15;			// Account for the header
 8002c6c:	f107 0308 	add.w	r3, r7, #8
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	3b0f      	subs	r3, #15
 8002c78:	f887 3991 	strb.w	r3, [r7, #2449]	; 0x991
					sectionHeight /= FILTER_SECTION_SIZE;					// Account for the number of filters
 8002c7c:	f897 3991 	ldrb.w	r3, [r7, #2449]	; 0x991
 8002c80:	4a84      	ldr	r2, [pc, #528]	; (8002e94 <canvas_DrawFilters+0x318>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	f887 3991 	strb.w	r3, [r7, #2449]	; 0x991
					startPixelY = sectionHeight * (filterStage - 1);  	// Get the correct section
 8002c8c:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f897 2991 	ldrb.w	r2, [r7, #2449]	; 0x991
 8002c98:	fb12 f303 	smulbb	r3, r2, r3
 8002c9c:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += sectionHeight / 2;					// Get to the center of the section
 8002ca0:	f897 3991 	ldrb.w	r3, [r7, #2449]	; 0x991
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002cac:	4413      	add	r3, r2
 8002cae:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY -= 12;									// Account for the text height (assuming font24)
 8002cb2:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002cb6:	3b0c      	subs	r3, #12
 8002cb8:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += 15;									// Re-incorporate the header length
 8002cbc:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002cc0:	330f      	adds	r3, #15
 8002cc2:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992

					// Find the staring X pixel
					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
 8002cc6:	f107 0308 	add.w	r3, r7, #8
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f887 3990 	strb.w	r3, [r7, #2448]	; 0x990
					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line
 8002cd6:	f897 2997 	ldrb.w	r2, [r7, #2455]	; 0x997
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	4413      	add	r3, r2
 8002ce0:	0fda      	lsrs	r2, r3, #31
 8002ce2:	4413      	add	r3, r2
 8002ce4:	105b      	asrs	r3, r3, #1
 8002ce6:	425b      	negs	r3, r3
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	f897 3990 	ldrb.w	r3, [r7, #2448]	; 0x990
 8002cee:	4413      	add	r3, r2
 8002cf0:	f887 3990 	strb.w	r3, [r7, #2448]	; 0x990

					// Draw text
					canvas_DrawStringAt(canvas, startPixelX, startPixelY, tmpName, &Font24, 0);
 8002cf4:	f897 3990 	ldrb.w	r3, [r7, #2448]	; 0x990
 8002cf8:	b299      	uxth	r1, r3
 8002cfa:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	f607 1484 	addw	r4, r7, #2436	; 0x984
 8002d04:	f107 000c 	add.w	r0, r7, #12
 8002d08:	2300      	movs	r3, #0
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	4b62      	ldr	r3, [pc, #392]	; (8002e98 <canvas_DrawFilters+0x31c>)
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	4623      	mov	r3, r4
 8002d12:	6800      	ldr	r0, [r0, #0]
 8002d14:	f000 fa67 	bl	80031e6 <canvas_DrawStringAt>
 8002d18:	e07a      	b.n	8002e10 <canvas_DrawFilters+0x294>

				} else {
					// Need to split into 2 rows
					uint8_t topLine[6] = {0};							// Top Line Holder
 8002d1a:	f107 031c 	add.w	r3, r7, #28
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	809a      	strh	r2, [r3, #4]
					uint8_t botLine[6] = {0};							// Bottom Line Holder
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	809a      	strh	r2, [r3, #4]
					memcpy(topLine, tmpName, 5);
 8002d2e:	f607 1184 	addw	r1, r7, #2436	; 0x984
 8002d32:	f107 031c 	add.w	r3, r7, #28
 8002d36:	2205      	movs	r2, #5
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f013 f89a 	bl	8015e72 <memcpy>

					for (uint8_t i = 5; i < 10; i++){
 8002d3e:	2305      	movs	r3, #5
 8002d40:	f887 3994 	strb.w	r3, [r7, #2452]	; 0x994
 8002d44:	e011      	b.n	8002d6a <canvas_DrawFilters+0x1ee>
						botLine[i - 5] = tmpName[i];
 8002d46:	f897 2994 	ldrb.w	r2, [r7, #2452]	; 0x994
 8002d4a:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 8002d4e:	3b05      	subs	r3, #5
 8002d50:	f607 1198 	addw	r1, r7, #2456	; 0x998
 8002d54:	440a      	add	r2, r1
 8002d56:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002d5a:	f107 0214 	add.w	r2, r7, #20
 8002d5e:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 5; i < 10; i++){
 8002d60:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 8002d64:	3301      	adds	r3, #1
 8002d66:	f887 3994 	strb.w	r3, [r7, #2452]	; 0x994
 8002d6a:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 8002d6e:	2b09      	cmp	r3, #9
 8002d70:	d9e9      	bls.n	8002d46 <canvas_DrawFilters+0x1ca>
					}

					// Find the starting Y pixel
					uint8_t sectionHeight;
					sectionHeight = epd->dots_per_line - 15;			// Account for the header
 8002d72:	f107 0308 	add.w	r3, r7, #8
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	3b0f      	subs	r3, #15
 8002d7e:	f887 3993 	strb.w	r3, [r7, #2451]	; 0x993
					sectionHeight /= FILTER_SECTION_SIZE;					// Account for the number of filters
 8002d82:	f897 3993 	ldrb.w	r3, [r7, #2451]	; 0x993
 8002d86:	4a43      	ldr	r2, [pc, #268]	; (8002e94 <canvas_DrawFilters+0x318>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	f887 3993 	strb.w	r3, [r7, #2451]	; 0x993
					startPixelY = sectionHeight * (filterStage - 1);  	// Get the correct section
 8002d92:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f897 2993 	ldrb.w	r2, [r7, #2451]	; 0x993
 8002d9e:	fb12 f303 	smulbb	r3, r2, r3
 8002da2:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += sectionHeight / 2;					// Get to the center of the section
 8002da6:	f897 3993 	ldrb.w	r3, [r7, #2451]	; 0x993
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002db2:	4413      	add	r3, r2
 8002db4:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY -= 24;									// Account for the text height (assuming font24)
 8002db8:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002dbc:	3b18      	subs	r3, #24
 8002dbe:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += 15;									// Re-incorporate the header length
 8002dc2:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002dc6:	330f      	adds	r3, #15
 8002dc8:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
//					// Find the staring X pixel
//					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
//					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line

					// Draw text
					canvas_DrawStringAt(canvas, 6, startPixelY, topLine, &Font24, 0);
 8002dcc:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	f107 011c 	add.w	r1, r7, #28
 8002dd6:	f107 000c 	add.w	r0, r7, #12
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9301      	str	r3, [sp, #4]
 8002dde:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <canvas_DrawFilters+0x31c>)
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	460b      	mov	r3, r1
 8002de4:	2106      	movs	r1, #6
 8002de6:	6800      	ldr	r0, [r0, #0]
 8002de8:	f000 f9fd 	bl	80031e6 <canvas_DrawStringAt>

//					// Find the staring X pixel
//					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
//					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line

					canvas_DrawStringAt(canvas, 6, startPixelY + 24, botLine, &Font24, 0);
 8002dec:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3318      	adds	r3, #24
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	f107 0114 	add.w	r1, r7, #20
 8002dfa:	f107 000c 	add.w	r0, r7, #12
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <canvas_DrawFilters+0x31c>)
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	460b      	mov	r3, r1
 8002e08:	2106      	movs	r1, #6
 8002e0a:	6800      	ldr	r0, [r0, #0]
 8002e0c:	f000 f9eb 	bl	80031e6 <canvas_DrawStringAt>
		for (uint8_t filter = 0; filter < FILTER_SECTION_SIZE; filter++){
 8002e10:	f897 3995 	ldrb.w	r3, [r7, #2453]	; 0x995
 8002e14:	3301      	adds	r3, #1
 8002e16:	f887 3995 	strb.w	r3, [r7, #2453]	; 0x995
 8002e1a:	f897 3995 	ldrb.w	r3, [r7, #2453]	; 0x995
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	f67f aee5 	bls.w	8002bee <canvas_DrawFilters+0x72>
	for (uint8_t filterStage = 1; filterStage <= FILTER_SECTION_SIZE; filterStage++){
 8002e24:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
 8002e2e:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	f67f aed7 	bls.w	8002be6 <canvas_DrawFilters+0x6a>
	}


	// Right now, it just does a complete refresh - Need to change in the future
	// Print the rendered image
	if (refreshCount < CYCLES_UNTIL_REFRESH){
 8002e38:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <canvas_DrawFilters+0x320>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	d812      	bhi.n	8002e66 <canvas_DrawFilters+0x2ea>
		EPD_set_enable_temperature();
 8002e40:	f7ff f94e 	bl	80020e0 <EPD_set_enable_temperature>
		canvas_UpdateEPD(canvas, epd, prevImage);
 8002e44:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002e48:	f107 0108 	add.w	r1, r7, #8
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	6809      	ldr	r1, [r1, #0]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	f000 fa24 	bl	80032a0 <canvas_UpdateEPD>
		refreshCount++;
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <canvas_DrawFilters+0x320>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <canvas_DrawFilters+0x320>)
 8002e62:	701a      	strb	r2, [r3, #0]
		canvas_PrintEPD(canvas, epd);
		refreshCount = 0;
	}


}
 8002e64:	e00a      	b.n	8002e7c <canvas_DrawFilters+0x300>
		canvas_PrintEPD(canvas, epd);
 8002e66:	f107 0208 	add.w	r2, r7, #8
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	6811      	ldr	r1, [r2, #0]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	f000 f9e9 	bl	8003248 <canvas_PrintEPD>
		refreshCount = 0;
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <canvas_DrawFilters+0x320>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	f607 179c 	addw	r7, r7, #2460	; 0x99c
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd90      	pop	{r4, r7, pc}
 8002e86:	bf00      	nop
 8002e88:	080171f8 	.word	0x080171f8
 8002e8c:	2000003c 	.word	0x2000003c
 8002e90:	08016800 	.word	0x08016800
 8002e94:	aaaaaaab 	.word	0xaaaaaaab
 8002e98:	20000044 	.word	0x20000044
 8002e9c:	2000025f 	.word	0x2000025f

08002ea0 <canvas_SetRotate>:

void canvas_SetRotate(Canvas* canvas, uint8_t rotate) {
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	70fb      	strb	r3, [r7, #3]
	canvas->rotate = rotate;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	721a      	strb	r2, [r3, #8]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <canvas_DrawAbsolutePixel>:

/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void canvas_DrawAbsolutePixel(Canvas* canvas, uint16_t x, uint16_t y, int colored) {
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	817b      	strh	r3, [r7, #10]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	813b      	strh	r3, [r7, #8]

	// swap x order. 7 to 0, 6 to 1, 5 to 2, etc.
	// 1. Get bit position
	uint8_t bit_pos = x % 8;
 8002ed2:	897b      	ldrh	r3, [r7, #10]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	75fb      	strb	r3, [r7, #23]

	switch (bit_pos){
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
 8002ede:	2b07      	cmp	r3, #7
 8002ee0:	d82a      	bhi.n	8002f38 <canvas_DrawAbsolutePixel+0x78>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <canvas_DrawAbsolutePixel+0x28>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002f09 	.word	0x08002f09
 8002eec:	08002f0f 	.word	0x08002f0f
 8002ef0:	08002f15 	.word	0x08002f15
 8002ef4:	08002f1b 	.word	0x08002f1b
 8002ef8:	08002f21 	.word	0x08002f21
 8002efc:	08002f27 	.word	0x08002f27
 8002f00:	08002f2d 	.word	0x08002f2d
 8002f04:	08002f33 	.word	0x08002f33
		case 0:
			bit_pos = 7;
 8002f08:	2307      	movs	r3, #7
 8002f0a:	75fb      	strb	r3, [r7, #23]
			break;
 8002f0c:	e014      	b.n	8002f38 <canvas_DrawAbsolutePixel+0x78>
		case 1:
			bit_pos = 6;
 8002f0e:	2306      	movs	r3, #6
 8002f10:	75fb      	strb	r3, [r7, #23]
			break;
 8002f12:	e011      	b.n	8002f38 <canvas_DrawAbsolutePixel+0x78>
		case 2:
			bit_pos = 5;
 8002f14:	2305      	movs	r3, #5
 8002f16:	75fb      	strb	r3, [r7, #23]
			break;
 8002f18:	e00e      	b.n	8002f38 <canvas_DrawAbsolutePixel+0x78>
		case 3:
			bit_pos = 4;
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	75fb      	strb	r3, [r7, #23]
			break;
 8002f1e:	e00b      	b.n	8002f38 <canvas_DrawAbsolutePixel+0x78>
		case 4:
			bit_pos = 3;
 8002f20:	2303      	movs	r3, #3
 8002f22:	75fb      	strb	r3, [r7, #23]
			break;
 8002f24:	e008      	b.n	8002f38 <canvas_DrawAbsolutePixel+0x78>
		case 5:
			bit_pos = 2;
 8002f26:	2302      	movs	r3, #2
 8002f28:	75fb      	strb	r3, [r7, #23]
			break;
 8002f2a:	e005      	b.n	8002f38 <canvas_DrawAbsolutePixel+0x78>
		case 6:
			bit_pos = 1;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	75fb      	strb	r3, [r7, #23]
			break;
 8002f30:	e002      	b.n	8002f38 <canvas_DrawAbsolutePixel+0x78>
		case 7:
			bit_pos = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	75fb      	strb	r3, [r7, #23]
			break;
 8002f36:	bf00      	nop
	}

    if (x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	889b      	ldrh	r3, [r3, #4]
 8002f3c:	897a      	ldrh	r2, [r7, #10]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d249      	bcs.n	8002fd6 <canvas_DrawAbsolutePixel+0x116>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	88db      	ldrh	r3, [r3, #6]
 8002f46:	893a      	ldrh	r2, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d244      	bcs.n	8002fd6 <canvas_DrawAbsolutePixel+0x116>
        	canvas->image[(x + y * canvas->width) / 8] |= 0x80 >> (bit_pos);
        } else {
        	canvas->image[(x + y * canvas->width) / 8] &= ~(0x80 >> (bit_pos));
        }
    } else {
        if (colored) {
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d021      	beq.n	8002f96 <canvas_DrawAbsolutePixel+0xd6>
        	canvas->image[(x + y * canvas->width) / 8] &= ~(0x80 >> (bit_pos));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	8979      	ldrh	r1, [r7, #10]
 8002f58:	893b      	ldrh	r3, [r7, #8]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	8880      	ldrh	r0, [r0, #4]
 8002f5e:	fb00 f303 	mul.w	r3, r0, r3
 8002f62:	440b      	add	r3, r1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da00      	bge.n	8002f6a <canvas_DrawAbsolutePixel+0xaa>
 8002f68:	3307      	adds	r3, #7
 8002f6a:	10db      	asrs	r3, r3, #3
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4413      	add	r3, r2
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b25a      	sxtb	r2, r3
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
 8002f78:	2180      	movs	r1, #128	; 0x80
 8002f7a:	fa41 f303 	asr.w	r3, r1, r3
 8002f7e:	b25b      	sxtb	r3, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	4013      	ands	r3, r2
 8002f86:	b25a      	sxtb	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4601      	mov	r1, r0
 8002f8e:	440b      	add	r3, r1
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e020      	b.n	8002fd8 <canvas_DrawAbsolutePixel+0x118>
        } else {
        	canvas->image[(x + y * canvas->width) / 8] |= 0x80 >> (bit_pos);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	8979      	ldrh	r1, [r7, #10]
 8002f9c:	893b      	ldrh	r3, [r7, #8]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	8880      	ldrh	r0, [r0, #4]
 8002fa2:	fb00 f303 	mul.w	r3, r0, r3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da00      	bge.n	8002fae <canvas_DrawAbsolutePixel+0xee>
 8002fac:	3307      	adds	r3, #7
 8002fae:	10db      	asrs	r3, r3, #3
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4413      	add	r3, r2
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	b25a      	sxtb	r2, r3
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	2180      	movs	r1, #128	; 0x80
 8002fbe:	fa41 f303 	asr.w	r3, r1, r3
 8002fc2:	b25b      	sxtb	r3, r3
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	b25a      	sxtb	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4601      	mov	r1, r0
 8002fce:	440b      	add	r3, r1
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e000      	b.n	8002fd8 <canvas_DrawAbsolutePixel+0x118>
        return;
 8002fd6:	bf00      	nop
        }
    }
}
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop

08002fe4 <canvas_DrawPixel>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void canvas_DrawPixel(Canvas* canvas, uint16_t x, uint16_t y, int colored) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	817b      	strh	r3, [r7, #10]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	813b      	strh	r3, [r7, #8]
    int point_temp;
    if (canvas->rotate == ROTATE_0) {
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	7a1b      	ldrb	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d110      	bne.n	8003020 <canvas_DrawPixel+0x3c>
        if(x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	889b      	ldrh	r3, [r3, #4]
 8003002:	897a      	ldrh	r2, [r7, #10]
 8003004:	429a      	cmp	r2, r3
 8003006:	d267      	bcs.n	80030d8 <canvas_DrawPixel+0xf4>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88db      	ldrh	r3, [r3, #6]
 800300c:	893a      	ldrh	r2, [r7, #8]
 800300e:	429a      	cmp	r2, r3
 8003010:	d262      	bcs.n	80030d8 <canvas_DrawPixel+0xf4>
            return;
        }
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 8003012:	893a      	ldrh	r2, [r7, #8]
 8003014:	8979      	ldrh	r1, [r7, #10]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7ff ff51 	bl	8002ec0 <canvas_DrawAbsolutePixel>
 800301e:	e062      	b.n	80030e6 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_90) {
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	7a1b      	ldrb	r3, [r3, #8]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d119      	bne.n	800305c <canvas_DrawPixel+0x78>
        if(x < 0 || x >= canvas->height || y < 0 || y >= canvas->width) {
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88db      	ldrh	r3, [r3, #6]
 800302c:	897a      	ldrh	r2, [r7, #10]
 800302e:	429a      	cmp	r2, r3
 8003030:	d254      	bcs.n	80030dc <canvas_DrawPixel+0xf8>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	889b      	ldrh	r3, [r3, #4]
 8003036:	893a      	ldrh	r2, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	d24f      	bcs.n	80030dc <canvas_DrawPixel+0xf8>
          return;
        }
        point_temp = x;
 800303c:	897b      	ldrh	r3, [r7, #10]
 800303e:	617b      	str	r3, [r7, #20]
        x = canvas->width - y;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	889a      	ldrh	r2, [r3, #4]
 8003044:	893b      	ldrh	r3, [r7, #8]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	817b      	strh	r3, [r7, #10]
        y = point_temp;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 800304e:	893a      	ldrh	r2, [r7, #8]
 8003050:	8979      	ldrh	r1, [r7, #10]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f7ff ff33 	bl	8002ec0 <canvas_DrawAbsolutePixel>
 800305a:	e044      	b.n	80030e6 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_180) {
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	7a1b      	ldrb	r3, [r3, #8]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d11a      	bne.n	800309a <canvas_DrawPixel+0xb6>
        if(x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	889b      	ldrh	r3, [r3, #4]
 8003068:	897a      	ldrh	r2, [r7, #10]
 800306a:	429a      	cmp	r2, r3
 800306c:	d238      	bcs.n	80030e0 <canvas_DrawPixel+0xfc>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	88db      	ldrh	r3, [r3, #6]
 8003072:	893a      	ldrh	r2, [r7, #8]
 8003074:	429a      	cmp	r2, r3
 8003076:	d233      	bcs.n	80030e0 <canvas_DrawPixel+0xfc>
          return;
        }
        x = canvas->width - x;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	889a      	ldrh	r2, [r3, #4]
 800307c:	897b      	ldrh	r3, [r7, #10]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	817b      	strh	r3, [r7, #10]
        y = canvas->height - y;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	88da      	ldrh	r2, [r3, #6]
 8003086:	893b      	ldrh	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 800308c:	893a      	ldrh	r2, [r7, #8]
 800308e:	8979      	ldrh	r1, [r7, #10]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f7ff ff14 	bl	8002ec0 <canvas_DrawAbsolutePixel>
 8003098:	e025      	b.n	80030e6 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_270) {
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	7a1b      	ldrb	r3, [r3, #8]
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d121      	bne.n	80030e6 <canvas_DrawPixel+0x102>
        if(x < 0 || x >= canvas->height || y < 0 || y >= canvas->width) {
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88db      	ldrh	r3, [r3, #6]
 80030a6:	897a      	ldrh	r2, [r7, #10]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d21b      	bcs.n	80030e4 <canvas_DrawPixel+0x100>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	889b      	ldrh	r3, [r3, #4]
 80030b0:	893a      	ldrh	r2, [r7, #8]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d216      	bcs.n	80030e4 <canvas_DrawPixel+0x100>
          return;
        }
        point_temp = x;
 80030b6:	897b      	ldrh	r3, [r7, #10]
 80030b8:	617b      	str	r3, [r7, #20]
        x = y;
 80030ba:	893b      	ldrh	r3, [r7, #8]
 80030bc:	817b      	strh	r3, [r7, #10]
        y = canvas->height - point_temp;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	88da      	ldrh	r2, [r3, #6]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 80030ca:	893a      	ldrh	r2, [r7, #8]
 80030cc:	8979      	ldrh	r1, [r7, #10]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff fef5 	bl	8002ec0 <canvas_DrawAbsolutePixel>
 80030d6:	e006      	b.n	80030e6 <canvas_DrawPixel+0x102>
            return;
 80030d8:	bf00      	nop
 80030da:	e004      	b.n	80030e6 <canvas_DrawPixel+0x102>
          return;
 80030dc:	bf00      	nop
 80030de:	e002      	b.n	80030e6 <canvas_DrawPixel+0x102>
          return;
 80030e0:	bf00      	nop
 80030e2:	e000      	b.n	80030e6 <canvas_DrawPixel+0x102>
          return;
 80030e4:	bf00      	nop
    }
}
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <canvas_DrawCharAt>:

/**
 *  @brief: this draws a character on the frame buffer but not refresh
 */
void canvas_DrawCharAt(Canvas* canvas, uint16_t x, uint16_t y, char ascii_char, sFONT* font, int colored) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	4608      	mov	r0, r1
 80030f6:	4611      	mov	r1, r2
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	817b      	strh	r3, [r7, #10]
 80030fe:	460b      	mov	r3, r1
 8003100:	813b      	strh	r3, [r7, #8]
 8003102:	4613      	mov	r3, r2
 8003104:	71fb      	strb	r3, [r7, #7]
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	3b20      	subs	r3, #32
 800310a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800310c:	88d2      	ldrh	r2, [r2, #6]
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003114:	8892      	ldrh	r2, [r2, #4]
 8003116:	08d2      	lsrs	r2, r2, #3
 8003118:	b292      	uxth	r2, r2
 800311a:	4611      	mov	r1, r2
 800311c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800311e:	8892      	ldrh	r2, [r2, #4]
 8003120:	f002 0207 	and.w	r2, r2, #7
 8003124:	b292      	uxth	r2, r2
 8003126:	2a00      	cmp	r2, #0
 8003128:	bf14      	ite	ne
 800312a:	2201      	movne	r2, #1
 800312c:	2200      	moveq	r2, #0
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	440a      	add	r2, r1
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	613b      	str	r3, [r7, #16]
    const unsigned char* ptr = &font->table[char_offset];
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

    for (j = 0; j < font->Height; j++) {
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	e044      	b.n	80031d2 <canvas_DrawCharAt+0xe6>
        for (i = 0; i < font->Width; i++) {
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	e02e      	b.n	80031ac <canvas_DrawCharAt+0xc0>
            if (*ptr & (0x80 >> (i % 8))) {
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	4619      	mov	r1, r3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	425a      	negs	r2, r3
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	f002 0207 	and.w	r2, r2, #7
 8003160:	bf58      	it	pl
 8003162:	4253      	negpl	r3, r2
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	fa42 f303 	asr.w	r3, r2, r3
 800316a:	400b      	ands	r3, r1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00d      	beq.n	800318c <canvas_DrawCharAt+0xa0>
                canvas_DrawPixel(canvas, x + i, y + j, colored);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	b29a      	uxth	r2, r3
 8003174:	897b      	ldrh	r3, [r7, #10]
 8003176:	4413      	add	r3, r2
 8003178:	b299      	uxth	r1, r3
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	b29a      	uxth	r2, r3
 800317e:	893b      	ldrh	r3, [r7, #8]
 8003180:	4413      	add	r3, r2
 8003182:	b29a      	uxth	r2, r3
 8003184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff ff2c 	bl	8002fe4 <canvas_DrawPixel>
            }
            if (i % 8 == 7) {
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	425a      	negs	r2, r3
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	f002 0207 	and.w	r2, r2, #7
 8003198:	bf58      	it	pl
 800319a:	4253      	negpl	r3, r2
 800319c:	2b07      	cmp	r3, #7
 800319e:	d102      	bne.n	80031a6 <canvas_DrawCharAt+0xba>
                ptr++;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
        for (i = 0; i < font->Width; i++) {
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3301      	adds	r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	889b      	ldrh	r3, [r3, #4]
 80031b0:	461a      	mov	r2, r3
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	4293      	cmp	r3, r2
 80031b6:	dbca      	blt.n	800314e <canvas_DrawCharAt+0x62>
            }
        }
        if (font->Width % 8 != 0) {
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	889b      	ldrh	r3, [r3, #4]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <canvas_DrawCharAt+0xe0>
            ptr++;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	3301      	adds	r3, #1
 80031ca:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	3301      	adds	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	88db      	ldrh	r3, [r3, #6]
 80031d6:	461a      	mov	r2, r3
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	4293      	cmp	r3, r2
 80031dc:	dbb4      	blt.n	8003148 <canvas_DrawCharAt+0x5c>
        }
    }
}
 80031de:	bf00      	nop
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <canvas_DrawStringAt>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void canvas_DrawStringAt(Canvas* canvas, uint16_t x, uint16_t y, const char* text, sFONT* font, int colored) {
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b08a      	sub	sp, #40	; 0x28
 80031ea:	af02      	add	r7, sp, #8
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	817b      	strh	r3, [r7, #10]
 80031f4:	4613      	mov	r3, r2
 80031f6:	813b      	strh	r3, [r7, #8]
    const char* p_text = text;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	61fb      	str	r3, [r7, #28]
    unsigned int counter = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
    int refcolumn = x;
 8003200:	897b      	ldrh	r3, [r7, #10]
 8003202:	617b      	str	r3, [r7, #20]

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8003204:	e018      	b.n	8003238 <canvas_DrawStringAt+0x52>
        /* Display one character on EPD */
        canvas_DrawCharAt(canvas, refcolumn, y, *p_text, font, colored);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	b299      	uxth	r1, r3
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	7818      	ldrb	r0, [r3, #0]
 800320e:	893a      	ldrh	r2, [r7, #8]
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	4603      	mov	r3, r0
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7ff ff66 	bl	80030ec <canvas_DrawCharAt>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	889b      	ldrh	r3, [r3, #4]
 8003224:	461a      	mov	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	4413      	add	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
        /* Point on the next character */
        p_text++;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	3301      	adds	r3, #1
 8003230:	61fb      	str	r3, [r7, #28]
        counter++;
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	3301      	adds	r3, #1
 8003236:	61bb      	str	r3, [r7, #24]
    while (*p_text != 0) {
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e2      	bne.n	8003206 <canvas_DrawStringAt+0x20>
    }
}
 8003240:	bf00      	nop
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <canvas_PrintEPD>:

/**
*  @brief:
*/
void canvas_PrintEPD(Canvas* canvas, EPD_HandleTypeDef* epd){
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]

	EPD_begin(epd);
 8003252:	6838      	ldr	r0, [r7, #0]
 8003254:	f7fe fbc4 	bl	80019e0 <EPD_begin>
	EPD_image_0(epd, canvas->image);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	6838      	ldr	r0, [r7, #0]
 8003260:	f7fe ff66 	bl	8002130 <EPD_image_0>
	EPD_end(epd);
 8003264:	6838      	ldr	r0, [r7, #0]
 8003266:	f7fe fe2b 	bl	8001ec0 <EPD_end>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <canvas_setBGImage>:

/**
*  @brief: This updates the canvas background image
*/
void canvas_setBGImage(Canvas* canvas, const uint8_t* bg_image){
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
	uint16_t size = canvas->width * canvas->height;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	889a      	ldrh	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	88db      	ldrh	r3, [r3, #6]
 8003284:	fb12 f303 	smulbb	r3, r2, r3
 8003288:	81fb      	strh	r3, [r7, #14]
	memcpy(canvas->image, bg_image, size);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	89fa      	ldrh	r2, [r7, #14]
 8003290:	6839      	ldr	r1, [r7, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f012 fded 	bl	8015e72 <memcpy>
}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <canvas_UpdateEPD>:

void canvas_UpdateEPD(Canvas* canvas, EPD_HandleTypeDef* epd, uint8_t* old_img){
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]

	EPD_begin(epd);
 80032ac:	68b8      	ldr	r0, [r7, #8]
 80032ae:	f7fe fb97 	bl	80019e0 <EPD_begin>
	EPD_partial_image(epd, old_img, canvas->image);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	68b8      	ldr	r0, [r7, #8]
 80032bc:	f7fe ff57 	bl	800216e <EPD_partial_image>
	EPD_end(epd);
 80032c0:	68b8      	ldr	r0, [r7, #8]
 80032c2:	f7fe fdfd 	bl	8001ec0 <EPD_end>
}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <LM75B_Init>:
LM75B_error LM75B_i2cWriteBytes(uint8_t subAddr, uint8_t *src, uint8_t Size);

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/
LM75B_error LM75B_Init(I2C_HandleTypeDef *hi2c, GPIO_TypeDef *Power_Port, uint16_t Power_Pin) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
	// Setup the Power and Comms
	pi2c = hi2c;
 80032de:	4a1a      	ldr	r2, [pc, #104]	; (8003348 <LM75B_Init+0x78>)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6013      	str	r3, [r2, #0]
	LM75BPowerPort = Power_Port;
 80032e4:	4a19      	ldr	r2, [pc, #100]	; (800334c <LM75B_Init+0x7c>)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	6013      	str	r3, [r2, #0]
	LM75BPowerPin = Power_Pin;
 80032ea:	4a19      	ldr	r2, [pc, #100]	; (8003350 <LM75B_Init+0x80>)
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_SET);
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <LM75B_Init+0x7c>)
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	4b16      	ldr	r3, [pc, #88]	; (8003350 <LM75B_Init+0x80>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	2201      	movs	r2, #1
 80032fa:	4619      	mov	r1, r3
 80032fc:	f002 f8b0 	bl	8005460 <HAL_GPIO_WritePin>
	HAL_Delay(1); // Small delay to ensure stable power
 8003300:	2001      	movs	r0, #1
 8003302:	f001 fdbd 	bl	8004e80 <HAL_Delay>

	// Read the configuration register and see if I2C Returns an issue
	uint8_t tempConfig;
	LM75B_error status = readConfigReg(&tempConfig);
 8003306:	f107 0316 	add.w	r3, r7, #22
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f88a 	bl	8003424 <readConfigReg>
 8003310:	4603      	mov	r3, r0
 8003312:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_RESET);
 8003314:	4b0d      	ldr	r3, [pc, #52]	; (800334c <LM75B_Init+0x7c>)
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <LM75B_Init+0x80>)
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	2200      	movs	r2, #0
 800331e:	4619      	mov	r1, r3
 8003320:	f002 f89e 	bl	8005460 <HAL_GPIO_WritePin>

	if (status != LM75B_OK) {
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d001      	beq.n	800332e <LM75B_Init+0x5e>
		return LM75B_ERR;
 800332a:	2300      	movs	r3, #0
 800332c:	e008      	b.n	8003340 <LM75B_Init+0x70>
	}

	if (tempConfig == 0x00){
 800332e:	7dbb      	ldrb	r3, [r7, #22]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <LM75B_Init+0x6e>
		LM75BInitialized = true;
 8003334:	4b07      	ldr	r3, [pc, #28]	; (8003354 <LM75B_Init+0x84>)
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
		return LM75B_OK;
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <LM75B_Init+0x70>
	}

	return LM75B_ERR;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000260 	.word	0x20000260
 800334c:	20000f78 	.word	0x20000f78
 8003350:	20000f74 	.word	0x20000f74
 8003354:	20000264 	.word	0x20000264

08003358 <LM75B_ReadTemp>:

LM75B_error LM75B_ReadTemp(int8_t *temp) {
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	if (!LM75BInitialized) {
 8003360:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <LM75B_ReadTemp+0xc0>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	f083 0301 	eor.w	r3, r3, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <LM75B_ReadTemp+0x1a>
		return LM75B_ERR;
 800336e:	2300      	movs	r3, #0
 8003370:	e04d      	b.n	800340e <LM75B_ReadTemp+0xb6>
	}

	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_SET);
 8003372:	4b2a      	ldr	r3, [pc, #168]	; (800341c <LM75B_ReadTemp+0xc4>)
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <LM75B_ReadTemp+0xc8>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	2201      	movs	r2, #1
 800337c:	4619      	mov	r1, r3
 800337e:	f002 f86f 	bl	8005460 <HAL_GPIO_WritePin>
	HAL_Delay(10); // Small delay to ensure stable power
 8003382:	200a      	movs	r0, #10
 8003384:	f001 fd7c 	bl	8004e80 <HAL_Delay>

	// Read the temperature register
	uint8_t tempReg[2] = {0};
 8003388:	2300      	movs	r3, #0
 800338a:	813b      	strh	r3, [r7, #8]
	LM75B_i2cReadBytes(TEMP_REG, tempReg, 2);
 800338c:	f107 0308 	add.w	r3, r7, #8
 8003390:	2202      	movs	r2, #2
 8003392:	4619      	mov	r1, r3
 8003394:	2000      	movs	r0, #0
 8003396:	f000 f853 	bl	8003440 <LM75B_i2cReadBytes>

	// Shutdown to conserve power
	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_RESET);
 800339a:	4b20      	ldr	r3, [pc, #128]	; (800341c <LM75B_ReadTemp+0xc4>)
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <LM75B_ReadTemp+0xc8>)
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	2200      	movs	r2, #0
 80033a4:	4619      	mov	r1, r3
 80033a6:	f002 f85b 	bl	8005460 <HAL_GPIO_WritePin>

	// Convert Array into signed integer
	int16_t temperature = (tempReg[0] << 8) | tempReg[1];
 80033aa:	7a3b      	ldrb	r3, [r7, #8]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	b21a      	sxth	r2, r3
 80033b0:	7a7b      	ldrb	r3, [r7, #9]
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	4313      	orrs	r3, r2
 80033b6:	81fb      	strh	r3, [r7, #14]

	temperature = temperature >> 5;		// The temperature only uses the 11 most significant bits.
 80033b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033bc:	115b      	asrs	r3, r3, #5
 80033be:	81fb      	strh	r3, [r7, #14]
	temperature *= 0.125;				// 0.125 deg C Resolution
 80033c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd f8ad 	bl	8000524 <__aeabi_i2d>
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80033d2:	f7fd f911 	bl	80005f8 <__aeabi_dmul>
 80033d6:	4603      	mov	r3, r0
 80033d8:	460c      	mov	r4, r1
 80033da:	4618      	mov	r0, r3
 80033dc:	4621      	mov	r1, r4
 80033de:	f7fd fb1d 	bl	8000a1c <__aeabi_d2iz>
 80033e2:	4603      	mov	r3, r0
 80033e4:	81fb      	strh	r3, [r7, #14]

	// Check to see if temp is Negative
	int8_t checktemp = (uint8_t) temperature;
 80033e6:	89fb      	ldrh	r3, [r7, #14]
 80033e8:	737b      	strb	r3, [r7, #13]

	if (checktemp & (1 << 7)) {
 80033ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	da09      	bge.n	8003406 <LM75B_ReadTemp+0xae>
		// We are negative, Strip the negative qualifier and send result
		*temp = (checktemp & (0x7F)) * -1;
 80033f2:	7b7b      	ldrb	r3, [r7, #13]
 80033f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	425b      	negs	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	b25a      	sxtb	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e002      	b.n	800340c <LM75B_ReadTemp+0xb4>
	} else {
		*temp = checktemp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	7b7a      	ldrb	r2, [r7, #13]
 800340a:	701a      	strb	r2, [r3, #0]
	}

	return LM75B_OK;
 800340c:	2301      	movs	r3, #1
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bd90      	pop	{r4, r7, pc}
 8003416:	bf00      	nop
 8003418:	20000264 	.word	0x20000264
 800341c:	20000f78 	.word	0x20000f78
 8003420:	20000f74 	.word	0x20000f74

08003424 <readConfigReg>:

/********************************************************************************
 * PRIVATE FUNCTIONS
 *******************************************************************************/
LM75B_error readConfigReg(uint8_t *confReg) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	// Reads and returns the configuration register
	return LM75B_i2cReadBytes(CONFIG_REG, confReg, 1);
 800342c:	2201      	movs	r2, #1
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	2001      	movs	r0, #1
 8003432:	f000 f805 	bl	8003440 <LM75B_i2cReadBytes>
 8003436:	4603      	mov	r3, r0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <LM75B_i2cReadBytes>:

/********************************************************************************
 * I2C READ AND WRITE ROUTINES
 *******************************************************************************/

LM75B_error LM75B_i2cReadBytes(uint8_t subAddr, uint8_t *dest, uint8_t Size) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af04      	add	r7, sp, #16
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	71fb      	strb	r3, [r7, #7]
 800344c:	4613      	mov	r3, r2
 800344e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(pi2c, LM75B_I2C_ADDR, subAddr, I2C_MEMADD_SIZE_8BIT, dest, Size, LM75B_I2C_TIMEOUT);
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <LM75B_i2cReadBytes+0x4c>)
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	b299      	uxth	r1, r3
 8003458:	79bb      	ldrb	r3, [r7, #6]
 800345a:	b29b      	uxth	r3, r3
 800345c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003460:	9202      	str	r2, [sp, #8]
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2301      	movs	r3, #1
 800346a:	460a      	mov	r2, r1
 800346c:	2190      	movs	r1, #144	; 0x90
 800346e:	f002 f96d 	bl	800574c <HAL_I2C_Mem_Read>
 8003472:	4603      	mov	r3, r0
 8003474:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <LM75B_i2cReadBytes+0x40>
		return LM75B_ERR;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <LM75B_i2cReadBytes+0x42>
	}
	return LM75B_OK;
 8003480:	2301      	movs	r3, #1
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000260 	.word	0x20000260

08003490 <iso15693Initialize>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693Initialize( bool useSlowTX, bool useFastRX )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	460a      	mov	r2, r1
 800349a:	71fb      	strb	r3, [r7, #7]
 800349c:	4613      	mov	r3, r2
 800349e:	71bb      	strb	r3, [r7, #6]
    ReturnCode err;

    err = rfalSetMode( RFAL_MODE_POLL_NFCV, useSlowTX?(RFAL_BR_1p66):(RFAL_BR_26p48), useFastRX?(RFAL_BR_52p97):(RFAL_BR_26p48) );
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <iso15693Initialize+0x1a>
 80034a6:	21ed      	movs	r1, #237	; 0xed
 80034a8:	e000      	b.n	80034ac <iso15693Initialize+0x1c>
 80034aa:	21ec      	movs	r1, #236	; 0xec
 80034ac:	79bb      	ldrb	r3, [r7, #6]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <iso15693Initialize+0x26>
 80034b2:	23eb      	movs	r3, #235	; 0xeb
 80034b4:	e000      	b.n	80034b8 <iso15693Initialize+0x28>
 80034b6:	23ec      	movs	r3, #236	; 0xec
 80034b8:	461a      	mov	r2, r3
 80034ba:	2007      	movs	r0, #7
 80034bc:	f009 fe72 	bl	800d1a4 <rfalSetMode>
 80034c0:	4603      	mov	r3, r0
 80034c2:	81fb      	strh	r3, [r7, #14]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 80034c4:	2001      	movs	r0, #1
 80034c6:	f00a fa99 	bl	800d9fc <rfalSetErrorHandling>

    rfalSetGT( RFAL_GT_NFCV );
 80034ca:	4809      	ldr	r0, [pc, #36]	; (80034f0 <iso15693Initialize+0x60>)
 80034cc:	f00a fae2 	bl	800da94 <rfalSetGT>
    rfalSetFDTListen( rfalConv64fcTo1fc(ISO15693_MASK_FDT_LISTEN) );
 80034d0:	f44f 5082 	mov.w	r0, #4160	; 0x1040
 80034d4:	f00a faca 	bl	800da6c <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 80034d8:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 80034dc:	f00a fab0 	bl	800da40 <rfalSetFDTPoll>

    rfalFieldOnAndStartGT();
 80034e0:	f00a fb06 	bl	800daf0 <rfalFieldOnAndStartGT>

    return err;
 80034e4:	89fb      	ldrh	r3, [r7, #14]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	000108d8 	.word	0x000108d8

080034f4 <iso15693Deinitialize>:

ReturnCode iso15693Deinitialize(uint8_t keep_on)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
    if (!keep_on)
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <iso15693Deinitialize+0x18>
    {
        return rfalFieldOff();
 8003504:	f00a fb5c 	bl	800dbc0 <rfalFieldOff>
 8003508:	4603      	mov	r3, r0
 800350a:	e000      	b.n	800350e <iso15693Deinitialize+0x1a>
    }
    return ERR_NONE;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <iso15693Inventory>:
                    uint8_t maskLength,
                    uint8_t* mask,
                    iso15693ProximityCard_t* cards,
                    uint8_t maxCards,
                    uint8_t* cardsFound)
{
 8003518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800351c:	b091      	sub	sp, #68	; 0x44
 800351e:	af02      	add	r7, sp, #8
 8003520:	60ba      	str	r2, [r7, #8]
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	4603      	mov	r3, r0
 8003526:	73fb      	strb	r3, [r7, #15]
 8003528:	460b      	mov	r3, r1
 800352a:	73bb      	strb	r3, [r7, #14]
    int8_t slot; /* number of the slot currently being processed */
    uint8_t slotNumPos; /* gives the position of the slot number within the mask */
    int8_t currColSlot; /* index of the slot whose collision is currently processed */
    uint16_t colSlots; /* 16 bit long marker holding all slots with collisions (indicated by set bit */
    uint64_t collisions; /* 64 bit long marker holding all unresolved collisions within 64bit UID */
    iso15693ProximityCard_t* crdptr = cards; /* pointer to the card currently used */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	61fb      	str	r3, [r7, #28]
    uint8_t crdidx = 0; /* index of the card currently used */
 8003530:	2300      	movs	r3, #0
 8003532:	76fb      	strb	r3, [r7, #27]

    if (maxCards == 0)
 8003534:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <iso15693Inventory+0x2a>
    {
        err = ERR_NOMEM;
 800353c:	2301      	movs	r3, #1
 800353e:	86fb      	strh	r3, [r7, #54]	; 0x36
        goto out;
 8003540:	e2f8      	b.n	8003b34 <iso15693Inventory+0x61c>
    }

    ST_MEMSET(iso15693DirMarker, 0, ISO15693_NUM_UID_BITS);
 8003542:	2240      	movs	r2, #64	; 0x40
 8003544:	2100      	movs	r1, #0
 8003546:	48aa      	ldr	r0, [pc, #680]	; (80037f0 <iso15693Inventory+0x2d8>)
 8003548:	f012 fc9e 	bl	8015e88 <memset>

    /* set inventory flag */
    iso15693Buffer[0] = ISO15693_REQ_FLAG_INVENTORY;
 800354c:	4ba9      	ldr	r3, [pc, #676]	; (80037f4 <iso15693Inventory+0x2dc>)
 800354e:	2204      	movs	r2, #4
 8003550:	701a      	strb	r2, [r3, #0]

    /* if number of slot is 1 then set the appropriate flag */
    if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d106      	bne.n	8003566 <iso15693Inventory+0x4e>
    {
        iso15693Buffer[0] |= ISO15693_REQ_FLAG_1_SLOT;
 8003558:	4ba6      	ldr	r3, [pc, #664]	; (80037f4 <iso15693Inventory+0x2dc>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	f043 0320 	orr.w	r3, r3, #32
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4ba4      	ldr	r3, [pc, #656]	; (80037f4 <iso15693Inventory+0x2dc>)
 8003564:	701a      	strb	r2, [r3, #0]
    }
    iso15693Buffer[1] = ISO15693_CMD_INVENTORY;
 8003566:	4ba3      	ldr	r3, [pc, #652]	; (80037f4 <iso15693Inventory+0x2dc>)
 8003568:	2201      	movs	r2, #1
 800356a:	705a      	strb	r2, [r3, #1]
    iso15693Buffer[2] = maskLength;
 800356c:	4aa1      	ldr	r2, [pc, #644]	; (80037f4 <iso15693Inventory+0x2dc>)
 800356e:	7bbb      	ldrb	r3, [r7, #14]
 8003570:	7093      	strb	r3, [r2, #2]

    /* convert maskLength from number of bits to bytes */
    maskLengthBytes = (maskLength >> 3) + (((maskLength & 7) > 0) ? 1 : 0);
 8003572:	7bbb      	ldrb	r3, [r7, #14]
 8003574:	08db      	lsrs	r3, r3, #3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	7bba      	ldrb	r2, [r7, #14]
 800357a:	f002 0207 	and.w	r2, r2, #7
 800357e:	2a00      	cmp	r2, #0
 8003580:	bfcc      	ite	gt
 8003582:	2201      	movgt	r2, #1
 8003584:	2200      	movle	r2, #0
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	4413      	add	r3, r2
 800358a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if ((maskLengthBytes + 3) > ISO15693_BUFFER_SIZE)
 800358e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003592:	3303      	adds	r3, #3
 8003594:	2b48      	cmp	r3, #72	; 0x48
 8003596:	dd02      	ble.n	800359e <iso15693Inventory+0x86>
    {
        err = ERR_NOMEM;
 8003598:	2301      	movs	r3, #1
 800359a:	86fb      	strh	r3, [r7, #54]	; 0x36
        goto out;
 800359c:	e2ca      	b.n	8003b34 <iso15693Inventory+0x61c>
    }

    /* mask out unneeded bits */
    if (maskLength & 7)
 800359e:	7bbb      	ldrb	r3, [r7, #14]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d017      	beq.n	80035d8 <iso15693Inventory+0xc0>
    {
        bitmask = (1 << (maskLength & 7)) - 1;
 80035a8:	7bbb      	ldrb	r3, [r7, #14]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	2201      	movs	r2, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	76bb      	strb	r3, [r7, #26]
        mask[maskLengthBytes-1] &= bitmask;
 80035ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035be:	3b01      	subs	r3, #1
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	4413      	add	r3, r2
 80035c4:	7819      	ldrb	r1, [r3, #0]
 80035c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035ca:	3b01      	subs	r3, #1
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	4413      	add	r3, r2
 80035d0:	7eba      	ldrb	r2, [r7, #26]
 80035d2:	400a      	ands	r2, r1
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]
    }
    ST_MEMCPY(&iso15693Buffer[3], mask, maskLengthBytes);
 80035d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035dc:	461a      	mov	r2, r3
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	4885      	ldr	r0, [pc, #532]	; (80037f8 <iso15693Inventory+0x2e0>)
 80035e2:	f012 fc46 	bl	8015e72 <memcpy>

    slotNumPos = maskLength & 7;
 80035e6:	7bbb      	ldrb	r3, [r7, #14]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	767b      	strb	r3, [r7, #25]
    currColPos = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    collisions = 0;
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    colSlots = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	85fb      	strh	r3, [r7, #46]	; 0x2e
    currColSlot = -1;
 8003604:	23ff      	movs	r3, #255	; 0xff
 8003606:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    slot = (slotcnt == ISO15693_NUM_SLOTS_1) ? -1 : 15;
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <iso15693Inventory+0xfe>
 8003610:	f04f 33ff 	mov.w	r3, #4294967295
 8003614:	e000      	b.n	8003618 <iso15693Inventory+0x100>
 8003616:	230f      	movs	r3, #15
 8003618:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            /* inner loop iterates once over all slots (in case of slot count 16)
               or only one iteration in case of slot count 1.
               After first 16 slot iterations (slot count 16) slot count is
               changed to 1 */

            if ((slotcnt == ISO15693_NUM_SLOTS_1) || (slot == 15))
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <iso15693Inventory+0x112>
 8003622:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003626:	2b0f      	cmp	r3, #15
 8003628:	d10e      	bne.n	8003648 <iso15693Inventory+0x130>
            {
                /* send the request. Note: CRC is appended by physical layer.
                   Add 3 to mask for flag field, command field and mask length */
                err = rfalISO15693TransceiveAnticollisionFrame(iso15693Buffer, (3 + maskLengthBytes),
 800362a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800362e:	3303      	adds	r3, #3
 8003630:	b2d9      	uxtb	r1, r3
 8003632:	f107 0316 	add.w	r3, r7, #22
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	230c      	movs	r3, #12
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	486d      	ldr	r0, [pc, #436]	; (80037f4 <iso15693Inventory+0x2dc>)
 800363e:	f00b fc61 	bl	800ef04 <rfalISO15693TransceiveAnticollisionFrame>
 8003642:	4603      	mov	r3, r0
 8003644:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003646:	e00b      	b.n	8003660 <iso15693Inventory+0x148>
                            (uint8_t*)crdptr, sizeof(iso15693ProximityCard_t), &actlength);
            }
            else
            {
                HAL_Delay(5); /* this is a worst case delay for sending EOF. t3min depends on modulation depth and data rate */
 8003648:	2005      	movs	r0, #5
 800364a:	f001 fc19 	bl	8004e80 <HAL_Delay>
                /* in case if slot count 16 slot is incremented by just sending EOF */
                err = rfalISO15693TransceiveEOFAnticollision(
 800364e:	f107 0316 	add.w	r3, r7, #22
 8003652:	461a      	mov	r2, r3
 8003654:	210c      	movs	r1, #12
 8003656:	69f8      	ldr	r0, [r7, #28]
 8003658:	f00b fd0c 	bl	800f074 <rfalISO15693TransceiveEOFAnticollision>
 800365c:	4603      	mov	r3, r0
 800365e:	86fb      	strh	r3, [r7, #54]	; 0x36
                            (uint8_t*)crdptr, sizeof(iso15693ProximityCard_t), &actlength);
            }

            bitsBeforeCol = actlength%8;
 8003660:	8afb      	ldrh	r3, [r7, #22]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	763b      	strb	r3, [r7, #24]
            actlength /= 8;
 800366a:	8afb      	ldrh	r3, [r7, #22]
 800366c:	08db      	lsrs	r3, r3, #3
 800366e:	b29b      	uxth	r3, r3
 8003670:	82fb      	strh	r3, [r7, #22]

            if (ERR_RF_COLLISION == err) do
 8003672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003674:	2b1d      	cmp	r3, #29
 8003676:	f040 80a1 	bne.w	80037bc <iso15693Inventory+0x2a4>
            {
                if (actlength < 2)
 800367a:	8afb      	ldrh	r3, [r7, #22]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d802      	bhi.n	8003686 <iso15693Inventory+0x16e>
                {
                    /* collision before actually receiving UID!!! This should
                    not happen since we ignored collisions in these bytes. */
                    err = ERR_RF_COLLISION;
 8003680:	231d      	movs	r3, #29
 8003682:	86fb      	strh	r3, [r7, #54]	; 0x36
                    goto out;
 8003684:	e256      	b.n	8003b34 <iso15693Inventory+0x61c>
                }
                if ((actlength - 2 + (bitsBeforeCol ? 1 : 0)) < maskLengthBytes)
 8003686:	8afb      	ldrh	r3, [r7, #22]
 8003688:	3b02      	subs	r3, #2
 800368a:	7e3a      	ldrb	r2, [r7, #24]
 800368c:	2a00      	cmp	r2, #0
 800368e:	bf14      	ite	ne
 8003690:	2201      	movne	r2, #1
 8003692:	2200      	moveq	r2, #0
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	441a      	add	r2, r3
 8003698:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800369c:	429a      	cmp	r2, r3
 800369e:	da02      	bge.n	80036a6 <iso15693Inventory+0x18e>
                {
                    /* we provided a mask but received fewer bytes which
                     * should not happen. Treat this as timeout and continue. */
                    err = ERR_TIMEOUT;
 80036a0:	2304      	movs	r3, #4
 80036a2:	86fb      	strh	r3, [r7, #54]	; 0x36
                    break;
 80036a4:	e08a      	b.n	80037bc <iso15693Inventory+0x2a4>
                }

                if (ISO15693_NUM_SLOTS_1 == slotcnt)
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d17a      	bne.n	80037a2 <iso15693Inventory+0x28a>
                {
                    /* in case slot count is 1 collision needs to be resolved */
                    /* find position of collision within received UID and
                       update mask and mask length appropriately */
                    iso15693Buffer[2] = ((actlength - 2) << 3) + bitsBeforeCol + 1;
 80036ac:	8afb      	ldrh	r3, [r7, #22]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	3b02      	subs	r3, #2
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	7e3b      	ldrb	r3, [r7, #24]
 80036ba:	4413      	add	r3, r2
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4b4c      	ldr	r3, [pc, #304]	; (80037f4 <iso15693Inventory+0x2dc>)
 80036c4:	709a      	strb	r2, [r3, #2]
                    if (iso15693Buffer[2] > ISO15693_NUM_UID_BITS)
 80036c6:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <iso15693Inventory+0x2dc>)
 80036c8:	789b      	ldrb	r3, [r3, #2]
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d902      	bls.n	80036d4 <iso15693Inventory+0x1bc>
                    { /* The collision is inside the CRC: This should not happen,
                         treat this as a timeout and continue */
                        err = ERR_TIMEOUT;
 80036ce:	2304      	movs	r3, #4
 80036d0:	86fb      	strh	r3, [r7, #54]	; 0x36
                        break;
 80036d2:	e073      	b.n	80037bc <iso15693Inventory+0x2a4>
                    }
                    currColPos = iso15693Buffer[2] - 1;
 80036d4:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <iso15693Inventory+0x2dc>)
 80036d6:	789b      	ldrb	r3, [r3, #2]
 80036d8:	3b01      	subs	r3, #1
 80036da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                    collisions |= ((uint64_t)1 << (uint64_t)currColPos);
 80036de:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 80036e2:	f04f 0201 	mov.w	r2, #1
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	f1a1 0620 	sub.w	r6, r1, #32
 80036ee:	f1c1 0020 	rsb	r0, r1, #32
 80036f2:	fa03 f501 	lsl.w	r5, r3, r1
 80036f6:	fa02 f606 	lsl.w	r6, r2, r6
 80036fa:	4335      	orrs	r5, r6
 80036fc:	fa22 f000 	lsr.w	r0, r2, r0
 8003700:	4305      	orrs	r5, r0
 8003702:	fa02 f401 	lsl.w	r4, r2, r1
 8003706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800370a:	ea42 0004 	orr.w	r0, r2, r4
 800370e:	ea43 0105 	orr.w	r1, r3, r5
 8003712:	e9c7 0108 	strd	r0, r1, [r7, #32]
                    maskLengthBytes = actlength - 1;
 8003716:	8afb      	ldrh	r3, [r7, #22]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                    /* copy received UID to mask */
                    ST_MEMCPY(&iso15693Buffer[3], crdptr->uid, maskLengthBytes);
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	3302      	adds	r3, #2
 8003724:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003728:	4619      	mov	r1, r3
 800372a:	4833      	ldr	r0, [pc, #204]	; (80037f8 <iso15693Inventory+0x2e0>)
 800372c:	f012 fba1 	bl	8015e72 <memcpy>
                    bitmask = (1 << bitsBeforeCol) - 1;
 8003730:	7e3b      	ldrb	r3, [r7, #24]
 8003732:	2201      	movs	r2, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	b2db      	uxtb	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	76bb      	strb	r3, [r7, #26]

                    /* clear bit where collision happened which means try
                       left branch of the tree first */
                    iso15693Buffer[2+maskLengthBytes] &= bitmask;
 800373e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003742:	3302      	adds	r3, #2
 8003744:	4a2b      	ldr	r2, [pc, #172]	; (80037f4 <iso15693Inventory+0x2dc>)
 8003746:	5cd1      	ldrb	r1, [r2, r3]
 8003748:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800374c:	3302      	adds	r3, #2
 800374e:	7eba      	ldrb	r2, [r7, #26]
 8003750:	400a      	ands	r2, r1
 8003752:	b2d1      	uxtb	r1, r2
 8003754:	4a27      	ldr	r2, [pc, #156]	; (80037f4 <iso15693Inventory+0x2dc>)
 8003756:	54d1      	strb	r1, [r2, r3]

                    if (1 == iso15693DirMarker[currColPos])
 8003758:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800375c:	4a24      	ldr	r2, [pc, #144]	; (80037f0 <iso15693Inventory+0x2d8>)
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d115      	bne.n	8003790 <iso15693Inventory+0x278>
                    {
                        /* if left branch has been tried out before (dirMarker set to 1)
                           the set the bit where collision happened to 1, i.e.
                           try right branch */
                        iso15693Buffer[2+maskLengthBytes] |= (1 << (currColPos & 7));
 8003764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003768:	3302      	adds	r3, #2
 800376a:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <iso15693Inventory+0x2dc>)
 800376c:	5cd3      	ldrb	r3, [r2, r3]
 800376e:	b25a      	sxtb	r2, r3
 8003770:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	b25b      	sxtb	r3, r3
 8003780:	4313      	orrs	r3, r2
 8003782:	b25a      	sxtb	r2, r3
 8003784:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003788:	3302      	adds	r3, #2
 800378a:	b2d1      	uxtb	r1, r2
 800378c:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <iso15693Inventory+0x2dc>)
 800378e:	54d1      	strb	r1, [r2, r3]
                    }
                    /* in any case increment dirMarker to indicate the way we chose */
                    iso15693DirMarker[currColPos]++;
 8003790:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003794:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <iso15693Inventory+0x2d8>)
 8003796:	5cd2      	ldrb	r2, [r2, r3]
 8003798:	3201      	adds	r2, #1
 800379a:	b2d1      	uxtb	r1, r2
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <iso15693Inventory+0x2d8>)
 800379e:	54d1      	strb	r1, [r2, r3]
 80037a0:	e00c      	b.n	80037bc <iso15693Inventory+0x2a4>
                }
                else
                {
                    /* in case of slot count 16 just mark that there is a collision
                    within this slot. Resolve it later when switching back to slot count 1 */
                    colSlots |= 1 << (15 - slot);
 80037a2:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80037a6:	f1c3 030f 	rsb	r3, r3, #15
 80037aa:	2201      	movs	r2, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	b21a      	sxth	r2, r3
 80037b2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80037b6:	4313      	orrs	r3, r2
 80037b8:	b21b      	sxth	r3, r3
 80037ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
            } while(0);
            if (ERR_RF_COLLISION != err)
 80037bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037be:	2b1d      	cmp	r3, #29
 80037c0:	f000 80c8 	beq.w	8003954 <iso15693Inventory+0x43c>
            {
                if (ERR_NONE == err)
 80037c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10b      	bne.n	80037e2 <iso15693Inventory+0x2ca>
                {
                    /* received all bytes without collision - store UID */
                    crdidx++;
 80037ca:	7efb      	ldrb	r3, [r7, #27]
 80037cc:	3301      	adds	r3, #1
 80037ce:	76fb      	strb	r3, [r7, #27]
                    if (crdidx >= maxCards)
 80037d0:	7efa      	ldrb	r2, [r7, #27]
 80037d2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80037d6:	429a      	cmp	r2, r3
 80037d8:	f080 81a9 	bcs.w	8003b2e <iso15693Inventory+0x616>
                    {
                        goto out_max_cards;
                    }
                    crdptr++;
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	330c      	adds	r3, #12
 80037e0:	61fb      	str	r3, [r7, #28]
                }

                if (ISO15693_NUM_SLOTS_1 == slotcnt)
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f040 80b5 	bne.w	8003954 <iso15693Inventory+0x43c>
                {

                    i = ISO15693_NUM_UID_BITS;
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	86bb      	strh	r3, [r7, #52]	; 0x34
                    /* a collisions has been resolved. Go back in the tree to find
                     next collision */
                    while (i--)
 80037ee:	e091      	b.n	8003914 <iso15693Inventory+0x3fc>
 80037f0:	200002b4 	.word	0x200002b4
 80037f4:	20000268 	.word	0x20000268
 80037f8:	2000026b 	.word	0x2000026b
                    {
                        if (collisions & ((uint64_t)1 << (uint64_t)i))
 80037fc:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80037fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003802:	f1c1 0620 	rsb	r6, r1, #32
 8003806:	f1a1 0020 	sub.w	r0, r1, #32
 800380a:	fa22 f801 	lsr.w	r8, r2, r1
 800380e:	fa03 f606 	lsl.w	r6, r3, r6
 8003812:	ea48 0806 	orr.w	r8, r8, r6
 8003816:	fa23 f000 	lsr.w	r0, r3, r0
 800381a:	ea48 0800 	orr.w	r8, r8, r0
 800381e:	fa23 f901 	lsr.w	r9, r3, r1
 8003822:	f04f 0201 	mov.w	r2, #1
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	ea02 0008 	and.w	r0, r2, r8
 800382e:	ea03 0109 	and.w	r1, r3, r9
 8003832:	ea50 0301 	orrs.w	r3, r0, r1
 8003836:	d06d      	beq.n	8003914 <iso15693Inventory+0x3fc>
                        {
                            if (iso15693DirMarker[i] > 1)
 8003838:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800383a:	4ab2      	ldr	r2, [pc, #712]	; (8003b04 <iso15693Inventory+0x5ec>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d939      	bls.n	80038b6 <iso15693Inventory+0x39e>
                            {
                                /* dirMarker 2 means that both paths (left 'n right)
                                   have been tried (=resolved). Remove this collision */
                                collisions &= ~((uint64_t)((uint64_t)1 << (uint64_t)i));
 8003842:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003844:	f04f 0201 	mov.w	r2, #1
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	f1a1 0620 	sub.w	r6, r1, #32
 8003850:	f1c1 0020 	rsb	r0, r1, #32
 8003854:	fa03 fb01 	lsl.w	fp, r3, r1
 8003858:	fa02 f606 	lsl.w	r6, r2, r6
 800385c:	ea4b 0b06 	orr.w	fp, fp, r6
 8003860:	fa22 f000 	lsr.w	r0, r2, r0
 8003864:	ea4b 0b00 	orr.w	fp, fp, r0
 8003868:	fa02 fa01 	lsl.w	sl, r2, r1
 800386c:	ea6f 020a 	mvn.w	r2, sl
 8003870:	ea6f 030b 	mvn.w	r3, fp
 8003874:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003878:	ea02 0200 	and.w	r2, r2, r0
 800387c:	ea03 0301 	and.w	r3, r3, r1
 8003880:	e9c7 2308 	strd	r2, r3, [r7, #32]
                                iso15693DirMarker[i] = 0;
 8003884:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003886:	4a9f      	ldr	r2, [pc, #636]	; (8003b04 <iso15693Inventory+0x5ec>)
 8003888:	2100      	movs	r1, #0
 800388a:	54d1      	strb	r1, [r2, r3]
                                if (currColSlot >= 0)
 800388c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003890:	2b00      	cmp	r3, #0
 8003892:	db3f      	blt.n	8003914 <iso15693Inventory+0x3fc>
                                {
                                    /* if this collision was within a slot unmark
                                       also this slot */
                                    colSlots &= ~(1 << currColSlot);
 8003894:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003898:	2201      	movs	r2, #1
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	b21b      	sxth	r3, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	b21a      	sxth	r2, r3
 80038a4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80038a8:	4013      	ands	r3, r2
 80038aa:	b21b      	sxth	r3, r3
 80038ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
                                    currColSlot = -1;
 80038ae:	23ff      	movs	r3, #255	; 0xff
 80038b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80038b4:	e02e      	b.n	8003914 <iso15693Inventory+0x3fc>
                            else
                            {
                                /* update collision position. dirMarker 1
                                also means that left branch was tried before.
                                Switch to right branch now */
                                currColPos = i;
 80038b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80038b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                                iso15693Buffer[2] = currColPos + 1;
 80038bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80038c0:	3301      	adds	r3, #1
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	4b90      	ldr	r3, [pc, #576]	; (8003b08 <iso15693Inventory+0x5f0>)
 80038c6:	709a      	strb	r2, [r3, #2]
                                maskLengthBytes = (currColPos >> 3) + 1;
 80038c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80038cc:	08db      	lsrs	r3, r3, #3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                                iso15693Buffer[2+maskLengthBytes] |= (1 << (currColPos & 7));
 80038d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038da:	3302      	adds	r3, #2
 80038dc:	4a8a      	ldr	r2, [pc, #552]	; (8003b08 <iso15693Inventory+0x5f0>)
 80038de:	5cd3      	ldrb	r3, [r2, r3]
 80038e0:	b25a      	sxtb	r2, r3
 80038e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	4313      	orrs	r3, r2
 80038f4:	b25a      	sxtb	r2, r3
 80038f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038fa:	3302      	adds	r3, #2
 80038fc:	b2d1      	uxtb	r1, r2
 80038fe:	4a82      	ldr	r2, [pc, #520]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003900:	54d1      	strb	r1, [r2, r3]
                                iso15693DirMarker[currColPos]++;
 8003902:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003906:	4a7f      	ldr	r2, [pc, #508]	; (8003b04 <iso15693Inventory+0x5ec>)
 8003908:	5cd2      	ldrb	r2, [r2, r3]
 800390a:	3201      	adds	r2, #1
 800390c:	b2d1      	uxtb	r1, r2
 800390e:	4a7d      	ldr	r2, [pc, #500]	; (8003b04 <iso15693Inventory+0x5ec>)
 8003910:	54d1      	strb	r1, [r2, r3]
                                break;
 8003912:	e005      	b.n	8003920 <iso15693Inventory+0x408>
                    while (i--)
 8003914:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003916:	1e5a      	subs	r2, r3, #1
 8003918:	86ba      	strh	r2, [r7, #52]	; 0x34
 800391a:	2b00      	cmp	r3, #0
 800391c:	f47f af6e 	bne.w	80037fc <iso15693Inventory+0x2e4>
                            }
                        }
                    }

                    if ((currColSlot >= 0) && (iso15693DirMarker[currColPos] == 0))
 8003920:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003924:	2b00      	cmp	r3, #0
 8003926:	db15      	blt.n	8003954 <iso15693Inventory+0x43c>
 8003928:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800392c:	4a75      	ldr	r2, [pc, #468]	; (8003b04 <iso15693Inventory+0x5ec>)
 800392e:	5cd3      	ldrb	r3, [r2, r3]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10f      	bne.n	8003954 <iso15693Inventory+0x43c>
                    {
                        /* a slot where a collision was found before has been processed
                           with no collision. So unmark this slot */
                        colSlots &= ~(1 << currColSlot);
 8003934:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003938:	2201      	movs	r2, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	b21b      	sxth	r3, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	b21a      	sxth	r2, r3
 8003944:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003948:	4013      	ands	r3, r2
 800394a:	b21b      	sxth	r3, r3
 800394c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        currColSlot = -1;
 800394e:	23ff      	movs	r3, #255	; 0xff
 8003950:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    }
                }
            }

            if (slot >= 0)
 8003954:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003958:	2b00      	cmp	r3, #0
 800395a:	db06      	blt.n	800396a <iso15693Inventory+0x452>
            {
                slot--;
 800395c:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003960:	b2db      	uxtb	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            }
        } while (slot >= 0);
 800396a:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 800396e:	2b00      	cmp	r3, #0
 8003970:	f6bf ae54 	bge.w	800361c <iso15693Inventory+0x104>

        /* after 16 iterations switch back to slot count 0 which means
         a normal binary tree search */
        if (ISO15693_NUM_SLOTS_16 == slotcnt)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d108      	bne.n	800398c <iso15693Inventory+0x474>
        {
            slotcnt = ISO15693_NUM_SLOTS_1;
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]
            iso15693Buffer[0] |= ISO15693_REQ_FLAG_1_SLOT;
 800397e:	4b62      	ldr	r3, [pc, #392]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	f043 0320 	orr.w	r3, r3, #32
 8003986:	b2da      	uxtb	r2, r3
 8003988:	4b5f      	ldr	r3, [pc, #380]	; (8003b08 <iso15693Inventory+0x5f0>)
 800398a:	701a      	strb	r2, [r3, #0]
        }
        if (!collisions && (ISO15693_NUM_SLOTS_1 == slotcnt))
 800398c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003990:	4313      	orrs	r3, r2
 8003992:	f040 80c2 	bne.w	8003b1a <iso15693Inventory+0x602>
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f040 80be 	bne.w	8003b1a <iso15693Inventory+0x602>
        {
            /* if all collisions are resolved check the slots for open collisions */
            for (i = 0; i < 16; i++)
 800399e:	2300      	movs	r3, #0
 80039a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80039a2:	e0b6      	b.n	8003b12 <iso15693Inventory+0x5fa>
            {
                if ((1 << i) & colSlots)
 80039a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80039a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80039a8:	fa42 f303 	asr.w	r3, r2, r3
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80ab 	beq.w	8003b0c <iso15693Inventory+0x5f4>
                {
                    /* found a slot with unresolved collision.
                       Reset mask length to original value and append slot number to mask */
                    maskLengthBytes = (maskLength >> 3) + (((maskLength & 7) > 0) ? 1 : 0);
 80039b6:	7bbb      	ldrb	r3, [r7, #14]
 80039b8:	08db      	lsrs	r3, r3, #3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	7bba      	ldrb	r2, [r7, #14]
 80039be:	f002 0207 	and.w	r2, r2, #7
 80039c2:	2a00      	cmp	r2, #0
 80039c4:	bfcc      	ite	gt
 80039c6:	2201      	movgt	r2, #1
 80039c8:	2200      	movle	r2, #0
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	4413      	add	r3, r2
 80039ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    if (slotNumPos == 0)
 80039d2:	7e7b      	ldrb	r3, [r7, #25]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <iso15693Inventory+0x4ca>
                    {
                        /* add an additional byte in case slot number starts at LSB */
                        maskLengthBytes++;
 80039d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039dc:	3301      	adds	r3, #1
 80039de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    }
                    if (slotNumPos > 4)
 80039e2:	7e7b      	ldrb	r3, [r7, #25]
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d95b      	bls.n	8003aa0 <iso15693Inventory+0x588>
                    {
                        /* also if slot number would overlap add an additional byte */
                        maskLengthBytes++;
 80039e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039ec:	3301      	adds	r3, #1
 80039ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                        /* add slot number to mask */
                        iso15693Buffer[2+maskLengthBytes] &= ~((1 << (8 - slotNumPos)) - 1);
 80039f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039f6:	3302      	adds	r3, #2
 80039f8:	4a43      	ldr	r2, [pc, #268]	; (8003b08 <iso15693Inventory+0x5f0>)
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	b25a      	sxtb	r2, r3
 80039fe:	7e7b      	ldrb	r3, [r7, #25]
 8003a00:	f1c3 0308 	rsb	r3, r3, #8
 8003a04:	2101      	movs	r1, #1
 8003a06:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	425b      	negs	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	4013      	ands	r3, r2
 8003a14:	b25a      	sxtb	r2, r3
 8003a16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	b2d1      	uxtb	r1, r2
 8003a1e:	4a3a      	ldr	r2, [pc, #232]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003a20:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[2+maskLengthBytes] |= i >> (8 - slotNumPos);
 8003a22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a26:	3302      	adds	r3, #2
 8003a28:	4a37      	ldr	r2, [pc, #220]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003a2a:	5cd3      	ldrb	r3, [r2, r3]
 8003a2c:	b25a      	sxtb	r2, r3
 8003a2e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003a30:	7e7b      	ldrb	r3, [r7, #25]
 8003a32:	f1c3 0308 	rsb	r3, r3, #8
 8003a36:	fa41 f303 	asr.w	r3, r1, r3
 8003a3a:	b25b      	sxtb	r3, r3
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	b25a      	sxtb	r2, r3
 8003a40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a44:	3302      	adds	r3, #2
 8003a46:	b2d1      	uxtb	r1, r2
 8003a48:	4a2f      	ldr	r2, [pc, #188]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003a4a:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[1+maskLengthBytes] &= (1 << slotNumPos) - 1;
 8003a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a50:	3301      	adds	r3, #1
 8003a52:	4a2d      	ldr	r2, [pc, #180]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003a54:	5cd3      	ldrb	r3, [r2, r3]
 8003a56:	b25a      	sxtb	r2, r3
 8003a58:	7e7b      	ldrb	r3, [r7, #25]
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	b25b      	sxtb	r3, r3
 8003a68:	4013      	ands	r3, r2
 8003a6a:	b25a      	sxtb	r2, r3
 8003a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a70:	3301      	adds	r3, #1
 8003a72:	b2d1      	uxtb	r1, r2
 8003a74:	4a24      	ldr	r2, [pc, #144]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003a76:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[1+maskLengthBytes] |= (i << slotNumPos);
 8003a78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	4a22      	ldr	r2, [pc, #136]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003a80:	5cd3      	ldrb	r3, [r2, r3]
 8003a82:	b25a      	sxtb	r2, r3
 8003a84:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003a86:	7e7b      	ldrb	r3, [r7, #25]
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	b25a      	sxtb	r2, r3
 8003a92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a96:	3301      	adds	r3, #1
 8003a98:	b2d1      	uxtb	r1, r2
 8003a9a:	4a1b      	ldr	r2, [pc, #108]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003a9c:	54d1      	strb	r1, [r2, r3]
 8003a9e:	e028      	b.n	8003af2 <iso15693Inventory+0x5da>
                    }
                    else
                    {
                        /* add slot number to mask */
                        iso15693Buffer[2+maskLengthBytes] &= (1 << slotNumPos) - 1;
 8003aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	4a18      	ldr	r2, [pc, #96]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003aa8:	5cd3      	ldrb	r3, [r2, r3]
 8003aaa:	b25a      	sxtb	r2, r3
 8003aac:	7e7b      	ldrb	r3, [r7, #25]
 8003aae:	2101      	movs	r1, #1
 8003ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	b25b      	sxtb	r3, r3
 8003abc:	4013      	ands	r3, r2
 8003abe:	b25a      	sxtb	r2, r3
 8003ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	b2d1      	uxtb	r1, r2
 8003ac8:	4a0f      	ldr	r2, [pc, #60]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003aca:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[2+maskLengthBytes] |= (i << slotNumPos);
 8003acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	4a0d      	ldr	r2, [pc, #52]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003ad4:	5cd3      	ldrb	r3, [r2, r3]
 8003ad6:	b25a      	sxtb	r2, r3
 8003ad8:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003ada:	7e7b      	ldrb	r3, [r7, #25]
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	b25b      	sxtb	r3, r3
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	b25a      	sxtb	r2, r3
 8003ae6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003aea:	3302      	adds	r3, #2
 8003aec:	b2d1      	uxtb	r1, r2
 8003aee:	4a06      	ldr	r2, [pc, #24]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003af0:	54d1      	strb	r1, [r2, r3]
                    }
                    /* in any case number of mask bits needs to be incremented by 4 */
                    iso15693Buffer[2] = maskLength + 4;
 8003af2:	7bbb      	ldrb	r3, [r7, #14]
 8003af4:	3304      	adds	r3, #4
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <iso15693Inventory+0x5f0>)
 8003afa:	709a      	strb	r2, [r3, #2]
                    currColSlot = i;
 8003afc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003afe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    break;
 8003b02:	e00a      	b.n	8003b1a <iso15693Inventory+0x602>
 8003b04:	200002b4 	.word	0x200002b4
 8003b08:	20000268 	.word	0x20000268
            for (i = 0; i < 16; i++)
 8003b0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b0e:	3301      	adds	r3, #1
 8003b10:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003b12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b14:	2b0f      	cmp	r3, #15
 8003b16:	f67f af45 	bls.w	80039a4 <iso15693Inventory+0x48c>
            }

        }

        /* do not stop before all collisions in all slots are resolved */
    } while (collisions || colSlots);
 8003b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f47f ad7c 	bne.w	800361c <iso15693Inventory+0x104>
 8003b24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f47f ad78 	bne.w	800361c <iso15693Inventory+0x104>

out_max_cards:
 8003b2c:	e000      	b.n	8003b30 <iso15693Inventory+0x618>
                        goto out_max_cards;
 8003b2e:	bf00      	nop
    err = ERR_NONE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	86fb      	strh	r3, [r7, #54]	; 0x36
out:
    *cardsFound = crdidx;
 8003b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b36:	7efa      	ldrb	r2, [r7, #27]
 8003b38:	701a      	strb	r2, [r3, #0]

    if (*cardsFound == 0)
 8003b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <iso15693Inventory+0x62e>
    {
        err = ERR_NOTFOUND;
 8003b42:	2316      	movs	r3, #22
 8003b44:	86fb      	strh	r3, [r7, #54]	; 0x36
    }

    return err;
 8003b46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	373c      	adds	r7, #60	; 0x3c
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b52:	bf00      	nop

08003b54 <iso15693SelectPicc>:
            0,
            ISO15693_FWT);
}

ReturnCode iso15693SelectPicc(const iso15693ProximityCard_t* card)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af06      	add	r7, sp, #24
 8003b5a:	6078      	str	r0, [r7, #4]
    uint16_t actlength;
    ReturnCode err;

    err = iso15693SendRequest(ISO15693_CMD_SELECT,
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <iso15693SelectPicc+0x54>)
 8003b5e:	7819      	ldrb	r1, [r3, #0]
 8003b60:	2351      	movs	r3, #81	; 0x51
 8003b62:	9304      	str	r3, [sp, #16]
 8003b64:	2300      	movs	r3, #0
 8003b66:	9303      	str	r3, [sp, #12]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9302      	str	r3, [sp, #8]
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	2304      	movs	r3, #4
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <iso15693SelectPicc+0x58>)
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	2025      	movs	r0, #37	; 0x25
 8003b7c:	f000 f876 	bl	8003c6c <iso15693SendRequest>
 8003b80:	4603      	mov	r3, r0
 8003b82:	81fb      	strh	r3, [r7, #14]
            4,
            &actlength,
            NULL,
            0,
            ISO15693_FWT);
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8003b84:	89fb      	ldrh	r3, [r7, #14]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <iso15693SelectPicc+0x44>

    if (iso15693Buffer[0] != 0)
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <iso15693SelectPicc+0x58>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <iso15693SelectPicc+0x48>
    {
        err = ERR_NOMSG;
 8003b92:	2306      	movs	r3, #6
 8003b94:	81fb      	strh	r3, [r7, #14]
 8003b96:	e002      	b.n	8003b9e <iso15693SelectPicc+0x4a>
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8003b98:	bf00      	nop
 8003b9a:	e000      	b.n	8003b9e <iso15693SelectPicc+0x4a>
    }

out:
 8003b9c:	bf00      	nop
    return err;
 8003b9e:	89fb      	ldrh	r3, [r7, #14]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	200002f4 	.word	0x200002f4
 8003bac:	20000268 	.word	0x20000268

08003bb0 <iso15693ReadMultipleBlocks>:



ReturnCode iso15693ReadMultipleBlocks(const iso15693ProximityCard_t* card, uint8_t startblock, uint8_t numBlocks,
                                        uint8_t* res_flags, uint8_t* data, uint16_t dataLen, uint16_t *actLen )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08c      	sub	sp, #48	; 0x30
 8003bb4:	af06      	add	r7, sp, #24
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	72fb      	strb	r3, [r7, #11]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	72bb      	strb	r3, [r7, #10]
    ReturnCode err;
    uint16_t actlength;
    uint8_t addData[2];

    addData[0] = startblock;
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
 8003bc4:	743b      	strb	r3, [r7, #16]
    addData[1] = numBlocks - 1;
 8003bc6:	7abb      	ldrb	r3, [r7, #10]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	747b      	strb	r3, [r7, #17]

    err = iso15693SendRequest(ISO15693_CMD_READ_MULTIPLE_BLOCKS,
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <iso15693ReadMultipleBlocks+0xb0>)
 8003bd0:	7819      	ldrb	r1, [r3, #0]
 8003bd2:	2351      	movs	r3, #81	; 0x51
 8003bd4:	9304      	str	r3, [sp, #16]
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	9303      	str	r3, [sp, #12]
 8003bda:	f107 0310 	add.w	r3, r7, #16
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	f107 0314 	add.w	r3, r7, #20
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	2348      	movs	r3, #72	; 0x48
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	4b1e      	ldr	r3, [pc, #120]	; (8003c64 <iso15693ReadMultipleBlocks+0xb4>)
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	2023      	movs	r0, #35	; 0x23
 8003bf0:	f000 f83c 	bl	8003c6c <iso15693SendRequest>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	82fb      	strh	r3, [r7, #22]
            ISO15693_BUFFER_SIZE,
            &actlength,
            addData,
            2,
            ISO15693_FWT);
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8003bf8:	8afb      	ldrh	r3, [r7, #22]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d128      	bne.n	8003c50 <iso15693ReadMultipleBlocks+0xa0>

    if (actlength >= 2)
 8003bfe:	8abb      	ldrh	r3, [r7, #20]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d927      	bls.n	8003c54 <iso15693ReadMultipleBlocks+0xa4>
    {
        *res_flags = iso15693Buffer[0];
 8003c04:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <iso15693ReadMultipleBlocks+0xb4>)
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	701a      	strb	r2, [r3, #0]
        if (*res_flags & ISO15693_RESP_FLAG_ERROR)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d006      	beq.n	8003c26 <iso15693ReadMultipleBlocks+0x76>
        {
            *actLen = 0;
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	801a      	strh	r2, [r3, #0]
            err = iso15693Buffer[1];
 8003c1e:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <iso15693ReadMultipleBlocks+0xb4>)
 8003c20:	785b      	ldrb	r3, [r3, #1]
 8003c22:	82fb      	strh	r3, [r7, #22]
 8003c24:	e017      	b.n	8003c56 <iso15693ReadMultipleBlocks+0xa6>
        }
        else
        {
            *actLen = ((( actlength > dataLen ) ? dataLen : actlength) - 1);
 8003c26:	8abb      	ldrh	r3, [r7, #20]
 8003c28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d203      	bcs.n	8003c36 <iso15693ReadMultipleBlocks+0x86>
 8003c2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	e002      	b.n	8003c3c <iso15693ReadMultipleBlocks+0x8c>
 8003c36:	8abb      	ldrh	r3, [r7, #20]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c3e:	8013      	strh	r3, [r2, #0]
            ST_MEMCPY( data, &iso15693Buffer[1], *actLen );
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	4908      	ldr	r1, [pc, #32]	; (8003c68 <iso15693ReadMultipleBlocks+0xb8>)
 8003c48:	6a38      	ldr	r0, [r7, #32]
 8003c4a:	f012 f912 	bl	8015e72 <memcpy>
 8003c4e:	e002      	b.n	8003c56 <iso15693ReadMultipleBlocks+0xa6>
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8003c50:	bf00      	nop
 8003c52:	e000      	b.n	8003c56 <iso15693ReadMultipleBlocks+0xa6>
        }
    }

out:
 8003c54:	bf00      	nop
    return err;
 8003c56:	8afb      	ldrh	r3, [r7, #22]

}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	200002f4 	.word	0x200002f4
 8003c64:	20000268 	.word	0x20000268
 8003c68:	20000269 	.word	0x20000269

08003c6c <iso15693SendRequest>:
                uint16_t rcvbuffer_len,
                uint16_t* actlength,
                uint8_t* addSendData,
                uint8_t addSendDataLength,
                uint32_t no_response_time_64fcs)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af04      	add	r7, sp, #16
 8003c72:	60ba      	str	r2, [r7, #8]
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	4603      	mov	r3, r0
 8003c78:	73fb      	strb	r3, [r7, #15]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	73bb      	strb	r3, [r7, #14]
    uint8_t length;


    /* sanity checks first */
    if ((ISO15693_UID_LENGTH + addSendDataLength + 2) > ISO15693_BUFFER_SIZE)
 8003c7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c82:	330a      	adds	r3, #10
 8003c84:	2b48      	cmp	r3, #72	; 0x48
 8003c86:	dd01      	ble.n	8003c8c <iso15693SendRequest+0x20>
    {
        return ERR_NOMEM;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e03f      	b.n	8003d0c <iso15693SendRequest+0xa0>
    }

    /* FLAG_SELECT and FLAG_ADDRESS will be added as required below */
    flags &= (~(ISO15693_REQ_FLAG_SELECT|ISO15693_REQ_FLAG_ADDRESS));
 8003c8c:	7bbb      	ldrb	r3, [r7, #14]
 8003c8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c92:	73bb      	strb	r3, [r7, #14]
    if (card == NULL)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d108      	bne.n	8003cac <iso15693SendRequest+0x40>
    {
        /* uid is NULL which means that selected PICC (using #iso15693SelectPicc)
           is used */
        /* set select flag */
        iso15693Buffer[0] = flags | ISO15693_REQ_FLAG_SELECT;
 8003c9a:	7bbb      	ldrb	r3, [r7, #14]
 8003c9c:	f043 0310 	orr.w	r3, r3, #16
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <iso15693SendRequest+0xa8>)
 8003ca4:	701a      	strb	r2, [r3, #0]
        length = 2;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	75fb      	strb	r3, [r7, #23]
 8003caa:	e00e      	b.n	8003cca <iso15693SendRequest+0x5e>
    }
    else
    {
        /* set address flag */
        iso15693Buffer[0] = flags | ISO15693_REQ_FLAG_ADDRESS;
 8003cac:	7bbb      	ldrb	r3, [r7, #14]
 8003cae:	f043 0320 	orr.w	r3, r3, #32
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <iso15693SendRequest+0xa8>)
 8003cb6:	701a      	strb	r2, [r3, #0]
        /* copy UID */
        ST_MEMCPY((void*)&iso15693Buffer[2], (void*)card->uid, ISO15693_UID_LENGTH);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3302      	adds	r3, #2
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4815      	ldr	r0, [pc, #84]	; (8003d18 <iso15693SendRequest+0xac>)
 8003cc2:	f012 f8d6 	bl	8015e72 <memcpy>
        length = 2 + ISO15693_UID_LENGTH;
 8003cc6:	230a      	movs	r3, #10
 8003cc8:	75fb      	strb	r3, [r7, #23]
    }

    iso15693Buffer[1] = cmd;
 8003cca:	4a12      	ldr	r2, [pc, #72]	; (8003d14 <iso15693SendRequest+0xa8>)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	7053      	strb	r3, [r2, #1]

    /* append additional data to be sent */
    ST_MEMCPY(&iso15693Buffer[length], addSendData, addSendDataLength);
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
 8003cd2:	4a10      	ldr	r2, [pc, #64]	; (8003d14 <iso15693SendRequest+0xa8>)
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f012 f8c8 	bl	8015e72 <memcpy>
    length += addSendDataLength;
 8003ce2:	7dfa      	ldrb	r2, [r7, #23]
 8003ce4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ce8:	4413      	add	r3, r2
 8003cea:	75fb      	strb	r3, [r7, #23]

    return rfalTransceiveBlockingTxRx( iso15693Buffer, length, rcvbuffer, rcvbuffer_len, actlength,
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	b299      	uxth	r1, r3
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	8c3a      	ldrh	r2, [r7, #32]
 8003cf6:	9302      	str	r3, [sp, #8]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4803      	ldr	r0, [pc, #12]	; (8003d14 <iso15693SendRequest+0xa8>)
 8003d06:	f00a f939 	bl	800df7c <rfalTransceiveBlockingTxRx>
 8003d0a:	4603      	mov	r3, r0
                                     (RFAL_TXRX_FLAGS_CRC_TX_AUTO | RFAL_TXRX_FLAGS_CRC_RX_REMV | RFAL_TXRX_FLAGS_NFCIP1_OFF | RFAL_TXRX_FLAGS_AGC_ON | RFAL_TXRX_FLAGS_PAR_RX_REMV),
                                      rfalConv64fcTo1fc( no_response_time_64fcs * 4 ) );

}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000268 	.word	0x20000268
 8003d18:	2000026a 	.word	0x2000026a

08003d1c <rfidControllerInit>:
 *******************************************************************************/

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/
ReturnCode rfidControllerInit(void) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
	ReturnCode err = ERR_NONE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	80fb      	strh	r3, [r7, #6]

	rfalAnalogConfigInitialize();                                                     /* Initialize RFAL's Analog Configs */
 8003d26:	f008 fce9 	bl	800c6fc <rfalAnalogConfigInitialize>

	if ((err = rfalInitialize()) == ERR_NONE) {
 8003d2a:	f009 f9c9 	bl	800d0c0 <rfalInitialize>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	80fb      	strh	r3, [r7, #6]
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <rfidControllerInit+0x22>
		rfidInitialized = true;
 8003d38:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <rfidControllerInit+0x2c>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	701a      	strb	r2, [r3, #0]
	}
	return err;
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	200002f5 	.word	0x200002f5

08003d4c <checkFilterTags>:

ReturnCode checkFilterTags(detectedTags_t *dTags) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08e      	sub	sp, #56	; 0x38
 8003d50:	af04      	add	r7, sp, #16
 8003d52:	6078      	str	r0, [r7, #4]
	ReturnCode err = ERR_NONE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t  resFlags;
	uint16_t actLen;

	uint8_t rxNameBuffer[16];

	if (!rfidInitialized) return ERR_PARAM;
 8003d58:	4b5f      	ldr	r3, [pc, #380]	; (8003ed8 <checkFilterTags+0x18c>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	f083 0301 	eor.w	r3, r3, #1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <checkFilterTags+0x1e>
 8003d66:	2307      	movs	r3, #7
 8003d68:	e0b1      	b.n	8003ece <checkFilterTags+0x182>

	// Reset dTags
	dTags->tagCount = 0;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003d76:	e021      	b.n	8003dbc <checkFilterTags+0x70>
		memset(dTags->filterTags[i].tagUID, 0, ISO15693_UID_LENGTH);
 8003d78:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	4413      	add	r3, r2
 8003d88:	3301      	adds	r3, #1
 8003d8a:	2208      	movs	r2, #8
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f012 f87a 	bl	8015e88 <memset>
		memset(dTags->filterTags[i].tagName, 0, FILTER_NAME_LEN);
 8003d94:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	3308      	adds	r3, #8
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	3301      	adds	r3, #1
 8003da8:	220a      	movs	r2, #10
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f012 f86b 	bl	8015e88 <memset>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8003db2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003db6:	3301      	adds	r3, #1
 8003db8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003dbc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d9d9      	bls.n	8003d78 <checkFilterTags+0x2c>
	}

	crdptr = NULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	623b      	str	r3, [r7, #32]

	// Initialize the Reader. Turn the field on and get ready to detect cards.
	if ((err = iso15693Initialize(false, false)) != ERR_NONE) goto deinitReader;
 8003dc8:	2100      	movs	r1, #0
 8003dca:	2000      	movs	r0, #0
 8003dcc:	f7ff fb60 	bl	8003490 <iso15693Initialize>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003dd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d16e      	bne.n	8003eb8 <checkFilterTags+0x16c>

	// Get the card inventory. This will load the [cards] variable with UIDs and update the [crdcnt] variable
	if ((err = iso15693Inventory(ISO15693_NUM_SLOTS_1, 0, NULL, cards, FILTER_SECTION_SIZE, &crdcnt)) != ERR_NONE) goto deinitReader;
 8003dda:	4b40      	ldr	r3, [pc, #256]	; (8003edc <checkFilterTags+0x190>)
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	2303      	movs	r3, #3
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	4b3f      	ldr	r3, [pc, #252]	; (8003ee0 <checkFilterTags+0x194>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	2100      	movs	r1, #0
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7ff fb95 	bl	8003518 <iso15693Inventory>
 8003dee:	4603      	mov	r3, r0
 8003df0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003df2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d161      	bne.n	8003ebc <checkFilterTags+0x170>

	// Get the Filter names stored on each tag
	for (uint8_t i = 0; i < crdcnt; i++) {
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003dfe:	e050      	b.n	8003ea2 <checkFilterTags+0x156>
		// Loop through each card by updating the UID pointer, selecting the card, read the mem block, and update the filter section name.
		// Select the next card
		crdptr = &cards[i];
 8003e00:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003e04:	4613      	mov	r3, r2
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4a34      	ldr	r2, [pc, #208]	; (8003ee0 <checkFilterTags+0x194>)
 8003e0e:	4413      	add	r3, r2
 8003e10:	623b      	str	r3, [r7, #32]
		if ((err = iso15693SelectPicc(crdptr)) != ERR_NONE) goto deinitReader;
 8003e12:	6a38      	ldr	r0, [r7, #32]
 8003e14:	f7ff fe9e 	bl	8003b54 <iso15693SelectPicc>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d14e      	bne.n	8003ec0 <checkFilterTags+0x174>

		// Read the Memory Block
		if ((err = iso15693ReadMultipleBlocks(crdptr, 0, 4, &resFlags, rxNameBuffer, sizeof(rxNameBuffer) + 1, &actLen)) != ERR_NONE) goto deinitReader;
 8003e22:	f107 021f 	add.w	r2, r7, #31
 8003e26:	f107 031c 	add.w	r3, r7, #28
 8003e2a:	9302      	str	r3, [sp, #8]
 8003e2c:	2311      	movs	r3, #17
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	f107 030c 	add.w	r3, r7, #12
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	4613      	mov	r3, r2
 8003e38:	2204      	movs	r2, #4
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	6a38      	ldr	r0, [r7, #32]
 8003e3e:	f7ff feb7 	bl	8003bb0 <iso15693ReadMultipleBlocks>
 8003e42:	4603      	mov	r3, r0
 8003e44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d13b      	bne.n	8003ec4 <checkFilterTags+0x178>

		// Copy the UID and Filter Name into the filterSection
		memcpy(dTags->filterTags[i].tagUID, cards[i].uid, ISO15693_UID_LENGTH);
 8003e4c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	1c58      	adds	r0, r3, #1
 8003e5e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003e62:	4613      	mov	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <checkFilterTags+0x194>)
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3302      	adds	r3, #2
 8003e70:	2208      	movs	r2, #8
 8003e72:	4619      	mov	r1, r3
 8003e74:	f011 fffd 	bl	8015e72 <memcpy>
		memcpy(dTags->filterTags[i].tagName, rxNameBuffer, FILTER_NAME_LEN);
 8003e78:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	3308      	adds	r3, #8
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4413      	add	r3, r2
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f107 010c 	add.w	r1, r7, #12
 8003e90:	220a      	movs	r2, #10
 8003e92:	4618      	mov	r0, r3
 8003e94:	f011 ffed 	bl	8015e72 <memcpy>
	for (uint8_t i = 0; i < crdcnt; i++) {
 8003e98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <checkFilterTags+0x190>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d3a8      	bcc.n	8003e00 <checkFilterTags+0xb4>
	}

	dTags->tagCount = crdcnt;
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <checkFilterTags+0x190>)
 8003eb0:	781a      	ldrb	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e006      	b.n	8003ec6 <checkFilterTags+0x17a>
	if ((err = iso15693Initialize(false, false)) != ERR_NONE) goto deinitReader;
 8003eb8:	bf00      	nop
 8003eba:	e004      	b.n	8003ec6 <checkFilterTags+0x17a>
	if ((err = iso15693Inventory(ISO15693_NUM_SLOTS_1, 0, NULL, cards, FILTER_SECTION_SIZE, &crdcnt)) != ERR_NONE) goto deinitReader;
 8003ebc:	bf00      	nop
 8003ebe:	e002      	b.n	8003ec6 <checkFilterTags+0x17a>
		if ((err = iso15693SelectPicc(crdptr)) != ERR_NONE) goto deinitReader;
 8003ec0:	bf00      	nop
 8003ec2:	e000      	b.n	8003ec6 <checkFilterTags+0x17a>
		if ((err = iso15693ReadMultipleBlocks(crdptr, 0, 4, &resFlags, rxNameBuffer, sizeof(rxNameBuffer) + 1, &actLen)) != ERR_NONE) goto deinitReader;
 8003ec4:	bf00      	nop

	// Deinitialize the Reader
	deinitReader:
		iso15693Deinitialize(false);
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f7ff fb14 	bl	80034f4 <iso15693Deinitialize>

	return err;
 8003ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3728      	adds	r7, #40	; 0x28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200002f5 	.word	0x200002f5
 8003edc:	200002f6 	.word	0x200002f6
 8003ee0:	200002f8 	.word	0x200002f8

08003ee4 <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 8003eec:	4a08      	ldr	r2, [pc, #32]	; (8003f10 <spiInit+0x2c>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f00:	601a      	str	r2, [r3, #0]
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	2000071c 	.word	0x2000071c

08003f14 <spiSelect>:

void spiSelect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_RESET);
 8003f20:	887b      	ldrh	r3, [r7, #2]
 8003f22:	2200      	movs	r2, #0
 8003f24:	4619      	mov	r1, r3
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f001 fa9a 	bl	8005460 <HAL_GPIO_WritePin>
}     
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <spiDeselect>:

void spiDeselect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	807b      	strh	r3, [r7, #2]
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
 8003f40:	887b      	ldrh	r3, [r7, #2]
 8003f42:	2201      	movs	r2, #1
 8003f44:	4619      	mov	r1, r3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f001 fa8a 	bl	8005460 <HAL_GPIO_WritePin>
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <spiTxRx>:

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 8003f62:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <spiTxRx+0x70>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <spiTxRx+0x1a>
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e026      	b.n	8003fbc <spiTxRx+0x68>
  
  if(length > SPI_BUF_LEN)
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f74:	d901      	bls.n	8003f7a <spiTxRx+0x26>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e020      	b.n	8003fbc <spiTxRx+0x68>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d006      	beq.n	8003f8e <spiTxRx+0x3a>
  {
    memcpy(txBuf, txData, length );
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	461a      	mov	r2, r3
 8003f84:	68f9      	ldr	r1, [r7, #12]
 8003f86:	4810      	ldr	r0, [pc, #64]	; (8003fc8 <spiTxRx+0x74>)
 8003f88:	f011 ff73 	bl	8015e72 <memcpy>
 8003f8c:	e005      	b.n	8003f9a <spiTxRx+0x46>
  }
  else
  {
    memset(txBuf, 0x00, length );
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	461a      	mov	r2, r3
 8003f92:	2100      	movs	r1, #0
 8003f94:	480c      	ldr	r0, [pc, #48]	; (8003fc8 <spiTxRx+0x74>)
 8003f96:	f011 ff77 	bl	8015e88 <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <spiTxRx+0x70>)
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <spiTxRx+0x54>
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	e000      	b.n	8003faa <spiTxRx+0x56>
 8003fa8:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <spiTxRx+0x78>)
 8003faa:	88f9      	ldrh	r1, [r7, #6]
 8003fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <spiTxRx+0x74>)
 8003fb6:	f005 fe47 	bl	8009c48 <HAL_SPI_TransmitReceive>
 8003fba:	4603      	mov	r3, r0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	2000071c 	.word	0x2000071c
 8003fc8:	2000031c 	.word	0x2000031c
 8003fcc:	2000051c 	.word	0x2000051c

08003fd0 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 8003fda:	f000 ff45 	bl	8004e68 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	4413      	add	r3, r2
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 8003ff4:	f000 ff38 	bl	8004e68 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	da01      	bge.n	800400e <timerIsExpired+0x22>
  {
    return true;
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <timerIsExpired+0x24>
  }
  
  return false;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <rtcModuleInit>:
 *******************************************************************************/

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/
void rtcModuleInit(RTC_HandleTypeDef *hrtc) {
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	// Register the Handle
	pRtcHandle = hrtc;
 8004020:	4a05      	ldr	r2, [pc, #20]	; (8004038 <rtcModuleInit+0x20>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6013      	str	r3, [r2, #0]
	rtcModInit = true;
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <rtcModuleInit+0x24>)
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	20000720 	.word	0x20000720
 800403c:	20000724 	.word	0x20000724

08004040 <rtcModuleIsInit>:

bool rtcModuleIsInit( void ) {
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
	return rtcModInit;
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <rtcModuleIsInit+0x14>)
 8004046:	781b      	ldrb	r3, [r3, #0]
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20000724 	.word	0x20000724

08004058 <rtcGetDateTime>:
	}

	return RTC_OK;
}

RTC_error rtcGetDateTime(RTC_DateTypeDef* dateRet, RTC_TimeTypeDef* timeRet) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
	// Check If Module is Initialized
	if (!rtcModInit) {
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <rtcGetDateTime+0x58>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	f083 0301 	eor.w	r3, r3, #1
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <rtcGetDateTime+0x1c>
		return RTC_ERR;
 8004070:	2301      	movs	r3, #1
 8004072:	e018      	b.n	80040a6 <rtcGetDateTime+0x4e>
	}

	// Get the Time
	if (HAL_RTC_GetTime(pRtcHandle, timeRet, RTC_FORMAT_BIN) != HAL_OK) {
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <rtcGetDateTime+0x5c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2200      	movs	r2, #0
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f004 f823 	bl	80080c8 <HAL_RTC_GetTime>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <rtcGetDateTime+0x34>
		// There was an issue communicating with the RTC
		return RTC_ERR;
 8004088:	2301      	movs	r3, #1
 800408a:	e00c      	b.n	80040a6 <rtcGetDateTime+0x4e>
	}

	// Get the Date
	if (HAL_RTC_GetDate(pRtcHandle, dateRet, RTC_FORMAT_BIN) != HAL_OK) {
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <rtcGetDateTime+0x5c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2200      	movs	r2, #0
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4618      	mov	r0, r3
 8004096:	f004 f91c 	bl	80082d2 <HAL_RTC_GetDate>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <rtcGetDateTime+0x4c>
		// There was an issue communicating with the RTC
		return RTC_ERR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <rtcGetDateTime+0x4e>
	}

	return RTC_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000724 	.word	0x20000724
 80040b4:	20000720 	.word	0x20000720

080040b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040bc:	f000 fe6e 	bl	8004d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040c0:	f000 f814 	bl	80040ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040c4:	f000 f9a8 	bl	8004418 <MX_GPIO_Init>
  MX_I2C1_Init();
 80040c8:	f000 f892 	bl	80041f0 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80040cc:	f000 f918 	bl	8004300 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80040d0:	f000 f936 	bl	8004340 <MX_SPI1_Init>
  MX_SPI2_Init();
 80040d4:	f000 f96a 	bl	80043ac <MX_SPI2_Init>
//  MX_FATFS_Init();
  MX_USB_DEVICE_Init();
 80040d8:	f011 f990 	bl	80153fc <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 80040dc:	f000 f8b6 	bl	800424c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  setupIOs();						/* Main Setup 			*/
 80040e0:	f7fc ffe6 	bl	80010b0 <setupIOs>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  processIOs();					/* Main Process 		*/
 80040e4:	f7fd f842 	bl	800116c <processIOs>
 80040e8:	e7fc      	b.n	80040e4 <main+0x2c>
	...

080040ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b09a      	sub	sp, #104	; 0x68
 80040f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040f6:	2230      	movs	r2, #48	; 0x30
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f011 fec4 	bl	8015e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004110:	f107 030c 	add.w	r3, r7, #12
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	611a      	str	r2, [r3, #16]
 8004120:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	4b30      	ldr	r3, [pc, #192]	; (80041e8 <SystemClock_Config+0xfc>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	4a2f      	ldr	r2, [pc, #188]	; (80041e8 <SystemClock_Config+0xfc>)
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004130:	6413      	str	r3, [r2, #64]	; 0x40
 8004132:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <SystemClock_Config+0xfc>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	4b2a      	ldr	r3, [pc, #168]	; (80041ec <SystemClock_Config+0x100>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a29      	ldr	r2, [pc, #164]	; (80041ec <SystemClock_Config+0x100>)
 8004148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	4b27      	ldr	r3, [pc, #156]	; (80041ec <SystemClock_Config+0x100>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800415a:	2309      	movs	r3, #9
 800415c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800415e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004164:	2301      	movs	r3, #1
 8004166:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004168:	2302      	movs	r3, #2
 800416a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800416c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004170:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004172:	2304      	movs	r3, #4
 8004174:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004176:	2348      	movs	r3, #72	; 0x48
 8004178:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800417a:	2302      	movs	r3, #2
 800417c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800417e:	2303      	movs	r3, #3
 8004180:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004182:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004186:	4618      	mov	r0, r3
 8004188:	f003 f912 	bl	80073b0 <HAL_RCC_OscConfig>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004192:	f000 fa3f 	bl	8004614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004196:	230f      	movs	r3, #15
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800419a:	2302      	movs	r3, #2
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800419e:	2300      	movs	r3, #0
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041a8:	2300      	movs	r3, #0
 80041aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80041ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b0:	2102      	movs	r1, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f003 fb6c 	bl	8007890 <HAL_RCC_ClockConfig>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80041be:	f000 fa29 	bl	8004614 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80041c2:	2302      	movs	r3, #2
 80041c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80041c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ca:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041cc:	f107 030c 	add.w	r3, r7, #12
 80041d0:	4618      	mov	r0, r3
 80041d2:	f003 fd3b 	bl	8007c4c <HAL_RCCEx_PeriphCLKConfig>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80041dc:	f000 fa1a 	bl	8004614 <Error_Handler>
  }
}
 80041e0:	bf00      	nop
 80041e2:	3768      	adds	r7, #104	; 0x68
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40007000 	.word	0x40007000

080041f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041f4:	4b12      	ldr	r3, [pc, #72]	; (8004240 <MX_I2C1_Init+0x50>)
 80041f6:	4a13      	ldr	r2, [pc, #76]	; (8004244 <MX_I2C1_Init+0x54>)
 80041f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <MX_I2C1_Init+0x50>)
 80041fc:	4a12      	ldr	r2, [pc, #72]	; (8004248 <MX_I2C1_Init+0x58>)
 80041fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <MX_I2C1_Init+0x50>)
 8004202:	2200      	movs	r2, #0
 8004204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004206:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <MX_I2C1_Init+0x50>)
 8004208:	2200      	movs	r2, #0
 800420a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800420c:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <MX_I2C1_Init+0x50>)
 800420e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004212:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004214:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <MX_I2C1_Init+0x50>)
 8004216:	2200      	movs	r2, #0
 8004218:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <MX_I2C1_Init+0x50>)
 800421c:	2200      	movs	r2, #0
 800421e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004220:	4b07      	ldr	r3, [pc, #28]	; (8004240 <MX_I2C1_Init+0x50>)
 8004222:	2200      	movs	r2, #0
 8004224:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <MX_I2C1_Init+0x50>)
 8004228:	2200      	movs	r2, #0
 800422a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800422c:	4804      	ldr	r0, [pc, #16]	; (8004240 <MX_I2C1_Init+0x50>)
 800422e:	f001 f955 	bl	80054dc <HAL_I2C_Init>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004238:	f000 f9ec 	bl	8004614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800423c:	bf00      	nop
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000fd4 	.word	0x20000fd4
 8004244:	40005400 	.word	0x40005400
 8004248:	00061a80 	.word	0x00061a80

0800424c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004260:	2300      	movs	r3, #0
 8004262:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004264:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <MX_RTC_Init+0xac>)
 8004266:	4a25      	ldr	r2, [pc, #148]	; (80042fc <MX_RTC_Init+0xb0>)
 8004268:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800426a:	4b23      	ldr	r3, [pc, #140]	; (80042f8 <MX_RTC_Init+0xac>)
 800426c:	2200      	movs	r2, #0
 800426e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004270:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <MX_RTC_Init+0xac>)
 8004272:	227f      	movs	r2, #127	; 0x7f
 8004274:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <MX_RTC_Init+0xac>)
 8004278:	22ff      	movs	r2, #255	; 0xff
 800427a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800427c:	4b1e      	ldr	r3, [pc, #120]	; (80042f8 <MX_RTC_Init+0xac>)
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004282:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <MX_RTC_Init+0xac>)
 8004284:	2200      	movs	r2, #0
 8004286:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004288:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <MX_RTC_Init+0xac>)
 800428a:	2200      	movs	r2, #0
 800428c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800428e:	481a      	ldr	r0, [pc, #104]	; (80042f8 <MX_RTC_Init+0xac>)
 8004290:	f003 fdcc 	bl	8007e2c <HAL_RTC_Init>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800429a:	f000 f9bb 	bl	8004614 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800429e:	2300      	movs	r3, #0
 80042a0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	2201      	movs	r2, #1
 80042b6:	4619      	mov	r1, r3
 80042b8:	480f      	ldr	r0, [pc, #60]	; (80042f8 <MX_RTC_Init+0xac>)
 80042ba:	f003 fe48 	bl	8007f4e <HAL_RTC_SetTime>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80042c4:	f000 f9a6 	bl	8004614 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80042c8:	2301      	movs	r3, #1
 80042ca:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80042cc:	2301      	movs	r3, #1
 80042ce:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80042d0:	2301      	movs	r3, #1
 80042d2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80042d8:	463b      	mov	r3, r7
 80042da:	2201      	movs	r2, #1
 80042dc:	4619      	mov	r1, r3
 80042de:	4806      	ldr	r0, [pc, #24]	; (80042f8 <MX_RTC_Init+0xac>)
 80042e0:	f003 ff50 	bl	8008184 <HAL_RTC_SetDate>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80042ea:	f000 f993 	bl	8004614 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80042ee:	bf00      	nop
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20001028 	.word	0x20001028
 80042fc:	40002800 	.word	0x40002800

08004300 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <MX_SDIO_SD_Init+0x38>)
 8004306:	4a0d      	ldr	r2, [pc, #52]	; (800433c <MX_SDIO_SD_Init+0x3c>)
 8004308:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <MX_SDIO_SD_Init+0x38>)
 800430c:	2200      	movs	r2, #0
 800430e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <MX_SDIO_SD_Init+0x38>)
 8004312:	2200      	movs	r2, #0
 8004314:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <MX_SDIO_SD_Init+0x38>)
 8004318:	2200      	movs	r2, #0
 800431a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <MX_SDIO_SD_Init+0x38>)
 800431e:	2200      	movs	r2, #0
 8004320:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <MX_SDIO_SD_Init+0x38>)
 8004324:	2200      	movs	r2, #0
 8004326:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <MX_SDIO_SD_Init+0x38>)
 800432a:	2202      	movs	r2, #2
 800432c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800432e:	bf00      	nop
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	20001048 	.word	0x20001048
 800433c:	40012c00 	.word	0x40012c00

08004340 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004344:	4b17      	ldr	r3, [pc, #92]	; (80043a4 <MX_SPI1_Init+0x64>)
 8004346:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <MX_SPI1_Init+0x68>)
 8004348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800434a:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <MX_SPI1_Init+0x64>)
 800434c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004352:	4b14      	ldr	r3, [pc, #80]	; (80043a4 <MX_SPI1_Init+0x64>)
 8004354:	2200      	movs	r2, #0
 8004356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004358:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <MX_SPI1_Init+0x64>)
 800435a:	2200      	movs	r2, #0
 800435c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800435e:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <MX_SPI1_Init+0x64>)
 8004360:	2200      	movs	r2, #0
 8004362:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <MX_SPI1_Init+0x64>)
 8004366:	2201      	movs	r2, #1
 8004368:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <MX_SPI1_Init+0x64>)
 800436c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004370:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004372:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <MX_SPI1_Init+0x64>)
 8004374:	2210      	movs	r2, #16
 8004376:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <MX_SPI1_Init+0x64>)
 800437a:	2200      	movs	r2, #0
 800437c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800437e:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <MX_SPI1_Init+0x64>)
 8004380:	2200      	movs	r2, #0
 8004382:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <MX_SPI1_Init+0x64>)
 8004386:	2200      	movs	r2, #0
 8004388:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <MX_SPI1_Init+0x64>)
 800438c:	220a      	movs	r2, #10
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004390:	4804      	ldr	r0, [pc, #16]	; (80043a4 <MX_SPI1_Init+0x64>)
 8004392:	f005 fac1 	bl	8009918 <HAL_SPI_Init>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800439c:	f000 f93a 	bl	8004614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043a0:	bf00      	nop
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	200010cc 	.word	0x200010cc
 80043a8:	40013000 	.word	0x40013000

080043ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80043b0:	4b17      	ldr	r3, [pc, #92]	; (8004410 <MX_SPI2_Init+0x64>)
 80043b2:	4a18      	ldr	r2, [pc, #96]	; (8004414 <MX_SPI2_Init+0x68>)
 80043b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <MX_SPI2_Init+0x64>)
 80043b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <MX_SPI2_Init+0x64>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80043c4:	4b12      	ldr	r3, [pc, #72]	; (8004410 <MX_SPI2_Init+0x64>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ca:	4b11      	ldr	r3, [pc, #68]	; (8004410 <MX_SPI2_Init+0x64>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <MX_SPI2_Init+0x64>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80043d6:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <MX_SPI2_Init+0x64>)
 80043d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80043de:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <MX_SPI2_Init+0x64>)
 80043e0:	2208      	movs	r2, #8
 80043e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <MX_SPI2_Init+0x64>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <MX_SPI2_Init+0x64>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f0:	4b07      	ldr	r3, [pc, #28]	; (8004410 <MX_SPI2_Init+0x64>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <MX_SPI2_Init+0x64>)
 80043f8:	220a      	movs	r2, #10
 80043fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80043fc:	4804      	ldr	r0, [pc, #16]	; (8004410 <MX_SPI2_Init+0x64>)
 80043fe:	f005 fa8b 	bl	8009918 <HAL_SPI_Init>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004408:	f000 f904 	bl	8004614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800440c:	bf00      	nop
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000f7c 	.word	0x20000f7c
 8004414:	40003800 	.word	0x40003800

08004418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441e:	f107 0314 	add.w	r3, r7, #20
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	605a      	str	r2, [r3, #4]
 8004428:	609a      	str	r2, [r3, #8]
 800442a:	60da      	str	r2, [r3, #12]
 800442c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	4b72      	ldr	r3, [pc, #456]	; (80045fc <MX_GPIO_Init+0x1e4>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	4a71      	ldr	r2, [pc, #452]	; (80045fc <MX_GPIO_Init+0x1e4>)
 8004438:	f043 0304 	orr.w	r3, r3, #4
 800443c:	6313      	str	r3, [r2, #48]	; 0x30
 800443e:	4b6f      	ldr	r3, [pc, #444]	; (80045fc <MX_GPIO_Init+0x1e4>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	4b6b      	ldr	r3, [pc, #428]	; (80045fc <MX_GPIO_Init+0x1e4>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	4a6a      	ldr	r2, [pc, #424]	; (80045fc <MX_GPIO_Init+0x1e4>)
 8004454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004458:	6313      	str	r3, [r2, #48]	; 0x30
 800445a:	4b68      	ldr	r3, [pc, #416]	; (80045fc <MX_GPIO_Init+0x1e4>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	4b64      	ldr	r3, [pc, #400]	; (80045fc <MX_GPIO_Init+0x1e4>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	4a63      	ldr	r2, [pc, #396]	; (80045fc <MX_GPIO_Init+0x1e4>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6313      	str	r3, [r2, #48]	; 0x30
 8004476:	4b61      	ldr	r3, [pc, #388]	; (80045fc <MX_GPIO_Init+0x1e4>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	4b5d      	ldr	r3, [pc, #372]	; (80045fc <MX_GPIO_Init+0x1e4>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	4a5c      	ldr	r2, [pc, #368]	; (80045fc <MX_GPIO_Init+0x1e4>)
 800448c:	f043 0302 	orr.w	r3, r3, #2
 8004490:	6313      	str	r3, [r2, #48]	; 0x30
 8004492:	4b5a      	ldr	r3, [pc, #360]	; (80045fc <MX_GPIO_Init+0x1e4>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	4b56      	ldr	r3, [pc, #344]	; (80045fc <MX_GPIO_Init+0x1e4>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	4a55      	ldr	r2, [pc, #340]	; (80045fc <MX_GPIO_Init+0x1e4>)
 80044a8:	f043 0308 	orr.w	r3, r3, #8
 80044ac:	6313      	str	r3, [r2, #48]	; 0x30
 80044ae:	4b53      	ldr	r3, [pc, #332]	; (80045fc <MX_GPIO_Init+0x1e4>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin, GPIO_PIN_RESET);
 80044ba:	2200      	movs	r2, #0
 80044bc:	2143      	movs	r1, #67	; 0x43
 80044be:	4850      	ldr	r0, [pc, #320]	; (8004600 <MX_GPIO_Init+0x1e8>)
 80044c0:	f000 ffce 	bl	8005460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 80044c4:	2200      	movs	r2, #0
 80044c6:	f240 111b 	movw	r1, #283	; 0x11b
 80044ca:	484e      	ldr	r0, [pc, #312]	; (8004604 <MX_GPIO_Init+0x1ec>)
 80044cc:	f000 ffc8 	bl	8005460 <HAL_GPIO_WritePin>
                          |USB_RENUM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|AUX_POWER_Pin, GPIO_PIN_RESET);
 80044d0:	2200      	movs	r2, #0
 80044d2:	2123      	movs	r1, #35	; 0x23
 80044d4:	484c      	ldr	r0, [pc, #304]	; (8004608 <MX_GPIO_Init+0x1f0>)
 80044d6:	f000 ffc3 	bl	8005460 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_POWER_Pin EPD_SPI_CS_Pin SDIO_POWER_Pin */
  GPIO_InitStruct.Pin = EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin;
 80044da:	2343      	movs	r3, #67	; 0x43
 80044dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044de:	2301      	movs	r3, #1
 80044e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e6:	2300      	movs	r3, #0
 80044e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ea:	f107 0314 	add.w	r3, r7, #20
 80044ee:	4619      	mov	r1, r3
 80044f0:	4843      	ldr	r0, [pc, #268]	; (8004600 <MX_GPIO_Init+0x1e8>)
 80044f2:	f000 fe1b 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DISCHARGE_Pin EPD_NRST_Pin RFID_POWER_Pin RF_SPI_BSS_Pin 
                           USB_RENUM_Pin */
  GPIO_InitStruct.Pin = EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 80044f6:	f240 131b 	movw	r3, #283	; 0x11b
 80044fa:	617b      	str	r3, [r7, #20]
                          |USB_RENUM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044fc:	2301      	movs	r3, #1
 80044fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004504:	2300      	movs	r3, #0
 8004506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004508:	f107 0314 	add.w	r3, r7, #20
 800450c:	4619      	mov	r1, r3
 800450e:	483d      	ldr	r0, [pc, #244]	; (8004604 <MX_GPIO_Init+0x1ec>)
 8004510:	f000 fe0c 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8004514:	2304      	movs	r3, #4
 8004516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004518:	2300      	movs	r3, #0
 800451a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	4619      	mov	r1, r3
 8004526:	4837      	ldr	r0, [pc, #220]	; (8004604 <MX_GPIO_Init+0x1ec>)
 8004528:	f000 fe00 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 800452c:	2310      	movs	r3, #16
 800452e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004530:	4b36      	ldr	r3, [pc, #216]	; (800460c <MX_GPIO_Init+0x1f4>)
 8004532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004538:	f107 0314 	add.w	r3, r7, #20
 800453c:	4619      	mov	r1, r3
 800453e:	4830      	ldr	r0, [pc, #192]	; (8004600 <MX_GPIO_Init+0x1e8>)
 8004540:	f000 fdf4 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin AUX_POWER_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|AUX_POWER_Pin;
 8004544:	2323      	movs	r3, #35	; 0x23
 8004546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004548:	2301      	movs	r3, #1
 800454a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454c:	2300      	movs	r3, #0
 800454e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004550:	2300      	movs	r3, #0
 8004552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004554:	f107 0314 	add.w	r3, r7, #20
 8004558:	4619      	mov	r1, r3
 800455a:	482b      	ldr	r0, [pc, #172]	; (8004608 <MX_GPIO_Init+0x1f0>)
 800455c:	f000 fde6 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pins : B_INPUT1_Pin B_INPUT2_Pin B_INPUT3_Pin */
  GPIO_InitStruct.Pin = B_INPUT1_Pin|B_INPUT2_Pin|B_INPUT3_Pin;
 8004560:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004566:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <MX_GPIO_Init+0x1f8>)
 8004568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800456a:	2302      	movs	r3, #2
 800456c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800456e:	f107 0314 	add.w	r3, r7, #20
 8004572:	4619      	mov	r1, r3
 8004574:	4824      	ldr	r0, [pc, #144]	; (8004608 <MX_GPIO_Init+0x1f0>)
 8004576:	f000 fdd9 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <MX_GPIO_Init+0x1f8>)
 8004580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004582:	2301      	movs	r3, #1
 8004584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8004586:	f107 0314 	add.w	r3, r7, #20
 800458a:	4619      	mov	r1, r3
 800458c:	481c      	ldr	r0, [pc, #112]	; (8004600 <MX_GPIO_Init+0x1e8>)
 800458e:	f000 fdcd 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pin : TC_SIGNAL_Pin */
  GPIO_InitStruct.Pin = TC_SIGNAL_Pin;
 8004592:	2310      	movs	r3, #16
 8004594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TC_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800459e:	f107 0314 	add.w	r3, r7, #20
 80045a2:	4619      	mov	r1, r3
 80045a4:	4818      	ldr	r0, [pc, #96]	; (8004608 <MX_GPIO_Init+0x1f0>)
 80045a6:	f000 fdc1 	bl	800512c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP_IRQ_Pin LOW_BAT_IRQ_Pin */
  GPIO_InitStruct.Pin = TEMP_IRQ_Pin|LOW_BAT_IRQ_Pin;
 80045aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045b0:	4b16      	ldr	r3, [pc, #88]	; (800460c <MX_GPIO_Init+0x1f4>)
 80045b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	4619      	mov	r1, r3
 80045be:	4812      	ldr	r0, [pc, #72]	; (8004608 <MX_GPIO_Init+0x1f0>)
 80045c0:	f000 fdb4 	bl	800512c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80045c4:	2200      	movs	r2, #0
 80045c6:	2100      	movs	r1, #0
 80045c8:	200a      	movs	r0, #10
 80045ca:	f000 fd56 	bl	800507a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80045ce:	200a      	movs	r0, #10
 80045d0:	f000 fd6f 	bl	80050b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80045d4:	2200      	movs	r2, #0
 80045d6:	2100      	movs	r1, #0
 80045d8:	2017      	movs	r0, #23
 80045da:	f000 fd4e 	bl	800507a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80045de:	2017      	movs	r0, #23
 80045e0:	f000 fd67 	bl	80050b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80045e4:	2200      	movs	r2, #0
 80045e6:	2100      	movs	r1, #0
 80045e8:	2028      	movs	r0, #40	; 0x28
 80045ea:	f000 fd46 	bl	800507a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045ee:	2028      	movs	r0, #40	; 0x28
 80045f0:	f000 fd5f 	bl	80050b2 <HAL_NVIC_EnableIRQ>

}
 80045f4:	bf00      	nop
 80045f6:	3728      	adds	r7, #40	; 0x28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	40020800 	.word	0x40020800
 8004604:	40020000 	.word	0x40020000
 8004608:	40020400 	.word	0x40020400
 800460c:	10110000 	.word	0x10110000
 8004610:	10310000 	.word	0x10310000

08004614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004618:	bf00      	nop
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <HAL_MspInit+0x4c>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <HAL_MspInit+0x4c>)
 8004634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004638:	6453      	str	r3, [r2, #68]	; 0x44
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <HAL_MspInit+0x4c>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004642:	607b      	str	r3, [r7, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_MspInit+0x4c>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	4a08      	ldr	r2, [pc, #32]	; (8004670 <HAL_MspInit+0x4c>)
 8004650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004654:	6413      	str	r3, [r2, #64]	; 0x40
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <HAL_MspInit+0x4c>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800

08004674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800467c:	f107 0314 	add.w	r3, r7, #20
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	609a      	str	r2, [r3, #8]
 8004688:	60da      	str	r2, [r3, #12]
 800468a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <HAL_I2C_MspInit+0x84>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d12b      	bne.n	80046ee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	4b18      	ldr	r3, [pc, #96]	; (80046fc <HAL_I2C_MspInit+0x88>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	4a17      	ldr	r2, [pc, #92]	; (80046fc <HAL_I2C_MspInit+0x88>)
 80046a0:	f043 0302 	orr.w	r3, r3, #2
 80046a4:	6313      	str	r3, [r2, #48]	; 0x30
 80046a6:	4b15      	ldr	r3, [pc, #84]	; (80046fc <HAL_I2C_MspInit+0x88>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = AUX_I2C_SCL_Pin|AUX_I2C_SDA_Pin;
 80046b2:	23c0      	movs	r3, #192	; 0xc0
 80046b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046b6:	2312      	movs	r3, #18
 80046b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046ba:	2301      	movs	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046be:	2303      	movs	r3, #3
 80046c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046c2:	2304      	movs	r3, #4
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c6:	f107 0314 	add.w	r3, r7, #20
 80046ca:	4619      	mov	r1, r3
 80046cc:	480c      	ldr	r0, [pc, #48]	; (8004700 <HAL_I2C_MspInit+0x8c>)
 80046ce:	f000 fd2d 	bl	800512c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_I2C_MspInit+0x88>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	4a08      	ldr	r2, [pc, #32]	; (80046fc <HAL_I2C_MspInit+0x88>)
 80046dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046e0:	6413      	str	r3, [r2, #64]	; 0x40
 80046e2:	4b06      	ldr	r3, [pc, #24]	; (80046fc <HAL_I2C_MspInit+0x88>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80046ee:	bf00      	nop
 80046f0:	3728      	adds	r7, #40	; 0x28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40005400 	.word	0x40005400
 80046fc:	40023800 	.word	0x40023800
 8004700:	40020400 	.word	0x40020400

08004704 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a05      	ldr	r2, [pc, #20]	; (8004728 <HAL_RTC_MspInit+0x24>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d102      	bne.n	800471c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004716:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_RTC_MspInit+0x28>)
 8004718:	2201      	movs	r2, #1
 800471a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40002800 	.word	0x40002800
 800472c:	42470e3c 	.word	0x42470e3c

08004730 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08c      	sub	sp, #48	; 0x30
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004738:	f107 031c 	add.w	r3, r7, #28
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	609a      	str	r2, [r3, #8]
 8004744:	60da      	str	r2, [r3, #12]
 8004746:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a3c      	ldr	r2, [pc, #240]	; (8004840 <HAL_SD_MspInit+0x110>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d171      	bne.n	8004836 <HAL_SD_MspInit+0x106>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <HAL_SD_MspInit+0x114>)
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	4a3a      	ldr	r2, [pc, #232]	; (8004844 <HAL_SD_MspInit+0x114>)
 800475c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004760:	6453      	str	r3, [r2, #68]	; 0x44
 8004762:	4b38      	ldr	r3, [pc, #224]	; (8004844 <HAL_SD_MspInit+0x114>)
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	4b34      	ldr	r3, [pc, #208]	; (8004844 <HAL_SD_MspInit+0x114>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	4a33      	ldr	r2, [pc, #204]	; (8004844 <HAL_SD_MspInit+0x114>)
 8004778:	f043 0302 	orr.w	r3, r3, #2
 800477c:	6313      	str	r3, [r2, #48]	; 0x30
 800477e:	4b31      	ldr	r3, [pc, #196]	; (8004844 <HAL_SD_MspInit+0x114>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	4b2d      	ldr	r3, [pc, #180]	; (8004844 <HAL_SD_MspInit+0x114>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	4a2c      	ldr	r2, [pc, #176]	; (8004844 <HAL_SD_MspInit+0x114>)
 8004794:	f043 0304 	orr.w	r3, r3, #4
 8004798:	6313      	str	r3, [r2, #48]	; 0x30
 800479a:	4b2a      	ldr	r3, [pc, #168]	; (8004844 <HAL_SD_MspInit+0x114>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	4b26      	ldr	r3, [pc, #152]	; (8004844 <HAL_SD_MspInit+0x114>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	4a25      	ldr	r2, [pc, #148]	; (8004844 <HAL_SD_MspInit+0x114>)
 80047b0:	f043 0308 	orr.w	r3, r3, #8
 80047b4:	6313      	str	r3, [r2, #48]	; 0x30
 80047b6:	4b23      	ldr	r3, [pc, #140]	; (8004844 <HAL_SD_MspInit+0x114>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80047c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c8:	2302      	movs	r3, #2
 80047ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d0:	2303      	movs	r3, #3
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80047d4:	230c      	movs	r3, #12
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047d8:	f107 031c 	add.w	r3, r7, #28
 80047dc:	4619      	mov	r1, r3
 80047de:	481a      	ldr	r0, [pc, #104]	; (8004848 <HAL_SD_MspInit+0x118>)
 80047e0:	f000 fca4 	bl	800512c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80047e4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80047e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ea:	2302      	movs	r3, #2
 80047ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f2:	2303      	movs	r3, #3
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80047f6:	230c      	movs	r3, #12
 80047f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047fa:	f107 031c 	add.w	r3, r7, #28
 80047fe:	4619      	mov	r1, r3
 8004800:	4812      	ldr	r0, [pc, #72]	; (800484c <HAL_SD_MspInit+0x11c>)
 8004802:	f000 fc93 	bl	800512c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004806:	2304      	movs	r3, #4
 8004808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480a:	2302      	movs	r3, #2
 800480c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480e:	2300      	movs	r3, #0
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004812:	2303      	movs	r3, #3
 8004814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004816:	230c      	movs	r3, #12
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800481a:	f107 031c 	add.w	r3, r7, #28
 800481e:	4619      	mov	r1, r3
 8004820:	480b      	ldr	r0, [pc, #44]	; (8004850 <HAL_SD_MspInit+0x120>)
 8004822:	f000 fc83 	bl	800512c <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004826:	2200      	movs	r2, #0
 8004828:	2100      	movs	r1, #0
 800482a:	2031      	movs	r0, #49	; 0x31
 800482c:	f000 fc25 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004830:	2031      	movs	r0, #49	; 0x31
 8004832:	f000 fc3e 	bl	80050b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004836:	bf00      	nop
 8004838:	3730      	adds	r7, #48	; 0x30
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40012c00 	.word	0x40012c00
 8004844:	40023800 	.word	0x40023800
 8004848:	40020400 	.word	0x40020400
 800484c:	40020800 	.word	0x40020800
 8004850:	40020c00 	.word	0x40020c00

08004854 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	; 0x30
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800485c:	f107 031c 	add.w	r3, r7, #28
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	605a      	str	r2, [r3, #4]
 8004866:	609a      	str	r2, [r3, #8]
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a45      	ldr	r2, [pc, #276]	; (8004988 <HAL_SPI_MspInit+0x134>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d134      	bne.n	80048e0 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	4b44      	ldr	r3, [pc, #272]	; (800498c <HAL_SPI_MspInit+0x138>)
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	4a43      	ldr	r2, [pc, #268]	; (800498c <HAL_SPI_MspInit+0x138>)
 8004880:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004884:	6453      	str	r3, [r2, #68]	; 0x44
 8004886:	4b41      	ldr	r3, [pc, #260]	; (800498c <HAL_SPI_MspInit+0x138>)
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	4b3d      	ldr	r3, [pc, #244]	; (800498c <HAL_SPI_MspInit+0x138>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	4a3c      	ldr	r2, [pc, #240]	; (800498c <HAL_SPI_MspInit+0x138>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	6313      	str	r3, [r2, #48]	; 0x30
 80048a2:	4b3a      	ldr	r3, [pc, #232]	; (800498c <HAL_SPI_MspInit+0x138>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SPI_SCLK_Pin|RF_SPI_MISO_Pin|RF_SPI_MOSI_Pin;
 80048ae:	23e0      	movs	r3, #224	; 0xe0
 80048b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b2:	2302      	movs	r3, #2
 80048b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ba:	2303      	movs	r3, #3
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80048be:	2305      	movs	r3, #5
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048c2:	f107 031c 	add.w	r3, r7, #28
 80048c6:	4619      	mov	r1, r3
 80048c8:	4831      	ldr	r0, [pc, #196]	; (8004990 <HAL_SPI_MspInit+0x13c>)
 80048ca:	f000 fc2f 	bl	800512c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80048ce:	2200      	movs	r2, #0
 80048d0:	2100      	movs	r1, #0
 80048d2:	2023      	movs	r0, #35	; 0x23
 80048d4:	f000 fbd1 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80048d8:	2023      	movs	r0, #35	; 0x23
 80048da:	f000 fbea 	bl	80050b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80048de:	e04f      	b.n	8004980 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a2b      	ldr	r2, [pc, #172]	; (8004994 <HAL_SPI_MspInit+0x140>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d14a      	bne.n	8004980 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	4b27      	ldr	r3, [pc, #156]	; (800498c <HAL_SPI_MspInit+0x138>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	4a26      	ldr	r2, [pc, #152]	; (800498c <HAL_SPI_MspInit+0x138>)
 80048f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f8:	6413      	str	r3, [r2, #64]	; 0x40
 80048fa:	4b24      	ldr	r3, [pc, #144]	; (800498c <HAL_SPI_MspInit+0x138>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	4b20      	ldr	r3, [pc, #128]	; (800498c <HAL_SPI_MspInit+0x138>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	4a1f      	ldr	r2, [pc, #124]	; (800498c <HAL_SPI_MspInit+0x138>)
 8004910:	f043 0304 	orr.w	r3, r3, #4
 8004914:	6313      	str	r3, [r2, #48]	; 0x30
 8004916:	4b1d      	ldr	r3, [pc, #116]	; (800498c <HAL_SPI_MspInit+0x138>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	4b19      	ldr	r3, [pc, #100]	; (800498c <HAL_SPI_MspInit+0x138>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	4a18      	ldr	r2, [pc, #96]	; (800498c <HAL_SPI_MspInit+0x138>)
 800492c:	f043 0302 	orr.w	r3, r3, #2
 8004930:	6313      	str	r3, [r2, #48]	; 0x30
 8004932:	4b16      	ldr	r3, [pc, #88]	; (800498c <HAL_SPI_MspInit+0x138>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EPD_SPI_MISO_Pin|EPD_SPI_MOSI_Pin;
 800493e:	230c      	movs	r3, #12
 8004940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004942:	2302      	movs	r3, #2
 8004944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800494a:	2303      	movs	r3, #3
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800494e:	2305      	movs	r3, #5
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004952:	f107 031c 	add.w	r3, r7, #28
 8004956:	4619      	mov	r1, r3
 8004958:	480f      	ldr	r0, [pc, #60]	; (8004998 <HAL_SPI_MspInit+0x144>)
 800495a:	f000 fbe7 	bl	800512c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800495e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004964:	2302      	movs	r3, #2
 8004966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004968:	2300      	movs	r3, #0
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496c:	2303      	movs	r3, #3
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004970:	2305      	movs	r3, #5
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004974:	f107 031c 	add.w	r3, r7, #28
 8004978:	4619      	mov	r1, r3
 800497a:	4808      	ldr	r0, [pc, #32]	; (800499c <HAL_SPI_MspInit+0x148>)
 800497c:	f000 fbd6 	bl	800512c <HAL_GPIO_Init>
}
 8004980:	bf00      	nop
 8004982:	3730      	adds	r7, #48	; 0x30
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40013000 	.word	0x40013000
 800498c:	40023800 	.word	0x40023800
 8004990:	40020000 	.word	0x40020000
 8004994:	40003800 	.word	0x40003800
 8004998:	40020800 	.word	0x40020800
 800499c:	40020400 	.word	0x40020400

080049a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049ae:	b480      	push	{r7}
 80049b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049b2:	e7fe      	b.n	80049b2 <HardFault_Handler+0x4>

080049b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049b8:	e7fe      	b.n	80049b8 <MemManage_Handler+0x4>

080049ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049ba:	b480      	push	{r7}
 80049bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049be:	e7fe      	b.n	80049be <BusFault_Handler+0x4>

080049c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049c4:	e7fe      	b.n	80049c4 <UsageFault_Handler+0x4>

080049c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049c6:	b480      	push	{r7}
 80049c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049ca:	bf00      	nop
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049d8:	bf00      	nop
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049e2:	b480      	push	{r7}
 80049e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049e6:	bf00      	nop
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049f4:	f000 fa24 	bl	8004e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049f8:	bf00      	nop
 80049fa:	bd80      	pop	{r7, pc}

080049fc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004a00:	2010      	movs	r0, #16
 8004a02:	f000 fd47 	bl	8005494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  st25r3916Isr();
 8004a06:	f00b fa39 	bl	800fe7c <st25r3916Isr>
  /* USER CODE END EXTI4_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint32_t irq5tickCnt;
	static uint32_t irq5tickOffset = 0;
	// Software Debounce
	irq5tickCnt = HAL_GetTick();
 8004a16:	f000 fa27 	bl	8004e68 <HAL_GetTick>
 8004a1a:	6078      	str	r0, [r7, #4]

	if ((irq5tickCnt - irq5tickOffset) > 10) {
 8004a1c:	4b16      	ldr	r3, [pc, #88]	; (8004a78 <EXTI9_5_IRQHandler+0x68>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b0a      	cmp	r3, #10
 8004a26:	d918      	bls.n	8004a5a <EXTI9_5_IRQHandler+0x4a>
		irq5tickOffset = irq5tickCnt;
 8004a28:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <EXTI9_5_IRQHandler+0x68>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6013      	str	r3, [r2, #0]
		// Service the SD Card Insert/Remove
		if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_RESET) {
 8004a2e:	2180      	movs	r1, #128	; 0x80
 8004a30:	4812      	ldr	r0, [pc, #72]	; (8004a7c <EXTI9_5_IRQHandler+0x6c>)
 8004a32:	f000 fcfd 	bl	8005430 <HAL_GPIO_ReadPin>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <EXTI9_5_IRQHandler+0x3c>
			// The card has been inserted. Init FatFs/Logger.
			isr_flags |= (isr_flags_t) INIT_FAT_FS;
 8004a3c:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <EXTI9_5_IRQHandler+0x70>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <EXTI9_5_IRQHandler+0x70>)
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e006      	b.n	8004a5a <EXTI9_5_IRQHandler+0x4a>
		} else {
			// The card has been removed.  Deinit FatFs/Logger.
			isr_flags |= (isr_flags_t) DEINIT_FAT_FS;
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <EXTI9_5_IRQHandler+0x70>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	f043 0302 	orr.w	r3, r3, #2
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <EXTI9_5_IRQHandler+0x70>)
 8004a58:	701a      	strb	r2, [r3, #0]
		}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004a5a:	2080      	movs	r0, #128	; 0x80
 8004a5c:	f000 fd1a 	bl	8005494 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004a60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004a64:	f000 fd16 	bl	8005494 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004a68:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a6c:	f000 fd12 	bl	8005494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a70:	bf00      	nop
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20000728 	.word	0x20000728
 8004a7c:	40020800 	.word	0x40020800
 8004a80:	20000e98 	.word	0x20000e98

08004a84 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004a88:	4802      	ldr	r0, [pc, #8]	; (8004a94 <SPI1_IRQHandler+0x10>)
 8004a8a:	f005 fa7f 	bl	8009f8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200010cc 	.word	0x200010cc

08004a98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	static uint32_t tickStart, tickEnd = 0; // Interval Tracking
	static uint8_t btn1flag, btn2flag, btn3flag = 0;

	// Check Pin States
	if (HAL_GPIO_ReadPin(B_INPUT1_GPIO_Port, B_INPUT1_Pin) == GPIO_PIN_SET) {
 8004a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004aa0:	4877      	ldr	r0, [pc, #476]	; (8004c80 <EXTI15_10_IRQHandler+0x1e8>)
 8004aa2:	f000 fcc5 	bl	8005430 <HAL_GPIO_ReadPin>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d110      	bne.n	8004ace <EXTI15_10_IRQHandler+0x36>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8004aac:	2201      	movs	r2, #1
 8004aae:	2101      	movs	r1, #1
 8004ab0:	4873      	ldr	r0, [pc, #460]	; (8004c80 <EXTI15_10_IRQHandler+0x1e8>)
 8004ab2:	f000 fcd5 	bl	8005460 <HAL_GPIO_WritePin>
		// Button 1 Initial Press
		btn1flag = 1;
 8004ab6:	4b73      	ldr	r3, [pc, #460]	; (8004c84 <EXTI15_10_IRQHandler+0x1ec>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 8004abc:	f000 f9d4 	bl	8004e68 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b71      	ldr	r3, [pc, #452]	; (8004c88 <EXTI15_10_IRQHandler+0x1f0>)
 8004ac4:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 8004ac6:	4b70      	ldr	r3, [pc, #448]	; (8004c88 <EXTI15_10_IRQHandler+0x1f0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a70      	ldr	r2, [pc, #448]	; (8004c8c <EXTI15_10_IRQHandler+0x1f4>)
 8004acc:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(B_INPUT2_GPIO_Port, B_INPUT2_Pin) == GPIO_PIN_SET) {
 8004ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ad2:	486b      	ldr	r0, [pc, #428]	; (8004c80 <EXTI15_10_IRQHandler+0x1e8>)
 8004ad4:	f000 fcac 	bl	8005430 <HAL_GPIO_ReadPin>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d10b      	bne.n	8004af6 <EXTI15_10_IRQHandler+0x5e>
		// Button 2 Initial Press
		btn2flag = 1;
 8004ade:	4b6c      	ldr	r3, [pc, #432]	; (8004c90 <EXTI15_10_IRQHandler+0x1f8>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 8004ae4:	f000 f9c0 	bl	8004e68 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	4b67      	ldr	r3, [pc, #412]	; (8004c88 <EXTI15_10_IRQHandler+0x1f0>)
 8004aec:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 8004aee:	4b66      	ldr	r3, [pc, #408]	; (8004c88 <EXTI15_10_IRQHandler+0x1f0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a66      	ldr	r2, [pc, #408]	; (8004c8c <EXTI15_10_IRQHandler+0x1f4>)
 8004af4:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(B_INPUT3_GPIO_Port, B_INPUT3_Pin) == GPIO_PIN_SET) {
 8004af6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004afa:	4861      	ldr	r0, [pc, #388]	; (8004c80 <EXTI15_10_IRQHandler+0x1e8>)
 8004afc:	f000 fc98 	bl	8005430 <HAL_GPIO_ReadPin>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d10b      	bne.n	8004b1e <EXTI15_10_IRQHandler+0x86>
		// Button 3 Initial Press
		btn3flag = 1;
 8004b06:	4b63      	ldr	r3, [pc, #396]	; (8004c94 <EXTI15_10_IRQHandler+0x1fc>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 8004b0c:	f000 f9ac 	bl	8004e68 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b5d      	ldr	r3, [pc, #372]	; (8004c88 <EXTI15_10_IRQHandler+0x1f0>)
 8004b14:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 8004b16:	4b5c      	ldr	r3, [pc, #368]	; (8004c88 <EXTI15_10_IRQHandler+0x1f0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a5c      	ldr	r2, [pc, #368]	; (8004c8c <EXTI15_10_IRQHandler+0x1f4>)
 8004b1c:	6013      	str	r3, [r2, #0]
	}

	if (btn1flag) {
 8004b1e:	4b59      	ldr	r3, [pc, #356]	; (8004c84 <EXTI15_10_IRQHandler+0x1ec>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d011      	beq.n	8004b4a <EXTI15_10_IRQHandler+0xb2>
		if (HAL_GPIO_ReadPin(B_INPUT1_GPIO_Port, B_INPUT1_Pin) == GPIO_PIN_RESET) {
 8004b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b2a:	4855      	ldr	r0, [pc, #340]	; (8004c80 <EXTI15_10_IRQHandler+0x1e8>)
 8004b2c:	f000 fc80 	bl	8005430 <HAL_GPIO_ReadPin>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <EXTI15_10_IRQHandler+0xb2>
			// Button 1 was released
			tickEnd = HAL_GetTick();
 8004b36:	f000 f997 	bl	8004e68 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <EXTI15_10_IRQHandler+0x1f4>)
 8004b3e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8004b40:	2200      	movs	r2, #0
 8004b42:	2101      	movs	r1, #1
 8004b44:	484e      	ldr	r0, [pc, #312]	; (8004c80 <EXTI15_10_IRQHandler+0x1e8>)
 8004b46:	f000 fc8b 	bl	8005460 <HAL_GPIO_WritePin>
		}
	}
	if (btn2flag) {
 8004b4a:	4b51      	ldr	r3, [pc, #324]	; (8004c90 <EXTI15_10_IRQHandler+0x1f8>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00c      	beq.n	8004b6c <EXTI15_10_IRQHandler+0xd4>
		if (HAL_GPIO_ReadPin(B_INPUT2_GPIO_Port, B_INPUT2_Pin) == GPIO_PIN_RESET) {
 8004b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b56:	484a      	ldr	r0, [pc, #296]	; (8004c80 <EXTI15_10_IRQHandler+0x1e8>)
 8004b58:	f000 fc6a 	bl	8005430 <HAL_GPIO_ReadPin>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <EXTI15_10_IRQHandler+0xd4>
			// Button 2 was released
			tickEnd = HAL_GetTick();
 8004b62:	f000 f981 	bl	8004e68 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	4b48      	ldr	r3, [pc, #288]	; (8004c8c <EXTI15_10_IRQHandler+0x1f4>)
 8004b6a:	601a      	str	r2, [r3, #0]
		}
	}
	if (btn3flag) {
 8004b6c:	4b49      	ldr	r3, [pc, #292]	; (8004c94 <EXTI15_10_IRQHandler+0x1fc>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00c      	beq.n	8004b8e <EXTI15_10_IRQHandler+0xf6>
		if (HAL_GPIO_ReadPin(B_INPUT3_GPIO_Port, B_INPUT3_Pin) == GPIO_PIN_RESET) {
 8004b74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b78:	4841      	ldr	r0, [pc, #260]	; (8004c80 <EXTI15_10_IRQHandler+0x1e8>)
 8004b7a:	f000 fc59 	bl	8005430 <HAL_GPIO_ReadPin>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <EXTI15_10_IRQHandler+0xf6>
			// Button 3 was released
			tickEnd = HAL_GetTick();
 8004b84:	f000 f970 	bl	8004e68 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4b40      	ldr	r3, [pc, #256]	; (8004c8c <EXTI15_10_IRQHandler+0x1f4>)
 8004b8c:	601a      	str	r2, [r3, #0]
		}
	}

	// Evaluate Results
	if (tickEnd - tickStart > 0) {
 8004b8e:	4b3f      	ldr	r3, [pc, #252]	; (8004c8c <EXTI15_10_IRQHandler+0x1f4>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b3d      	ldr	r3, [pc, #244]	; (8004c88 <EXTI15_10_IRQHandler+0x1f0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d064      	beq.n	8004c64 <EXTI15_10_IRQHandler+0x1cc>
		// Avoid 1st event
		if (tickEnd - tickStart <= 1000) {
 8004b9a:	4b3c      	ldr	r3, [pc, #240]	; (8004c8c <EXTI15_10_IRQHandler+0x1f4>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b3a      	ldr	r3, [pc, #232]	; (8004c88 <EXTI15_10_IRQHandler+0x1f0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ba8:	d829      	bhi.n	8004bfe <EXTI15_10_IRQHandler+0x166>
			// Short press
			if (btn1flag) {
 8004baa:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <EXTI15_10_IRQHandler+0x1ec>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <EXTI15_10_IRQHandler+0x12e>
				isr_flags |= (isr_flags_t) BTN_1_SH_PRESS;
 8004bb2:	4b39      	ldr	r3, [pc, #228]	; (8004c98 <EXTI15_10_IRQHandler+0x200>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	f043 0304 	orr.w	r3, r3, #4
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <EXTI15_10_IRQHandler+0x200>)
 8004bbe:	701a      	strb	r2, [r3, #0]
				btn1flag = 0;
 8004bc0:	4b30      	ldr	r3, [pc, #192]	; (8004c84 <EXTI15_10_IRQHandler+0x1ec>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
			}
			if (btn2flag) {
 8004bc6:	4b32      	ldr	r3, [pc, #200]	; (8004c90 <EXTI15_10_IRQHandler+0x1f8>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <EXTI15_10_IRQHandler+0x14a>
				isr_flags |= (isr_flags_t) BTN_2_SH_PRESS;
 8004bce:	4b32      	ldr	r3, [pc, #200]	; (8004c98 <EXTI15_10_IRQHandler+0x200>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	f043 0310 	orr.w	r3, r3, #16
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	4b2f      	ldr	r3, [pc, #188]	; (8004c98 <EXTI15_10_IRQHandler+0x200>)
 8004bda:	701a      	strb	r2, [r3, #0]
				btn2flag = 0;
 8004bdc:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <EXTI15_10_IRQHandler+0x1f8>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
			}
			if (btn3flag) {
 8004be2:	4b2c      	ldr	r3, [pc, #176]	; (8004c94 <EXTI15_10_IRQHandler+0x1fc>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <EXTI15_10_IRQHandler+0x166>
				isr_flags |= (isr_flags_t) BTN_3_SH_PRESS;
 8004bea:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <EXTI15_10_IRQHandler+0x200>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	4b28      	ldr	r3, [pc, #160]	; (8004c98 <EXTI15_10_IRQHandler+0x200>)
 8004bf6:	701a      	strb	r2, [r3, #0]
				btn3flag = 0;
 8004bf8:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <EXTI15_10_IRQHandler+0x1fc>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
			}
		}

		if (HAL_GetTick() - tickStart > 1000) {
 8004bfe:	f000 f933 	bl	8004e68 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <EXTI15_10_IRQHandler+0x1f0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c0e:	d929      	bls.n	8004c64 <EXTI15_10_IRQHandler+0x1cc>
			// Long press
			if (btn1flag) {
 8004c10:	4b1c      	ldr	r3, [pc, #112]	; (8004c84 <EXTI15_10_IRQHandler+0x1ec>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d009      	beq.n	8004c2c <EXTI15_10_IRQHandler+0x194>
				isr_flags |= (isr_flags_t) BTN_1_LG_PRESS;
 8004c18:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <EXTI15_10_IRQHandler+0x200>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	f043 0308 	orr.w	r3, r3, #8
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <EXTI15_10_IRQHandler+0x200>)
 8004c24:	701a      	strb	r2, [r3, #0]
				btn1flag = 0;
 8004c26:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <EXTI15_10_IRQHandler+0x1ec>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
			}
			if (btn2flag) {
 8004c2c:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <EXTI15_10_IRQHandler+0x1f8>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d009      	beq.n	8004c48 <EXTI15_10_IRQHandler+0x1b0>
				isr_flags |= (isr_flags_t) BTN_2_LG_PRESS;
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <EXTI15_10_IRQHandler+0x200>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	f043 0320 	orr.w	r3, r3, #32
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	4b16      	ldr	r3, [pc, #88]	; (8004c98 <EXTI15_10_IRQHandler+0x200>)
 8004c40:	701a      	strb	r2, [r3, #0]
				btn2flag = 0;
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <EXTI15_10_IRQHandler+0x1f8>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
			}
			if (btn3flag) {
 8004c48:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <EXTI15_10_IRQHandler+0x1fc>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d009      	beq.n	8004c64 <EXTI15_10_IRQHandler+0x1cc>
				isr_flags |= (isr_flags_t) BTN_3_LG_PRESS;
 8004c50:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <EXTI15_10_IRQHandler+0x200>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <EXTI15_10_IRQHandler+0x200>)
 8004c5c:	701a      	strb	r2, [r3, #0]
				btn3flag = 0;
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <EXTI15_10_IRQHandler+0x1fc>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004c64:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c68:	f000 fc14 	bl	8005494 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004c6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c70:	f000 fc10 	bl	8005494 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004c74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004c78:	f000 fc0c 	bl	8005494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c7c:	bf00      	nop
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40020400 	.word	0x40020400
 8004c84:	2000072c 	.word	0x2000072c
 8004c88:	20000730 	.word	0x20000730
 8004c8c:	20000734 	.word	0x20000734
 8004c90:	20000738 	.word	0x20000738
 8004c94:	20000739 	.word	0x20000739
 8004c98:	20000e98 	.word	0x20000e98

08004c9c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004ca0:	4802      	ldr	r0, [pc, #8]	; (8004cac <SDIO_IRQHandler+0x10>)
 8004ca2:	f004 f821 	bl	8008ce8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8004ca6:	bf00      	nop
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20001048 	.word	0x20001048

08004cb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004cb4:	4802      	ldr	r0, [pc, #8]	; (8004cc0 <OTG_FS_IRQHandler+0x10>)
 8004cb6:	f001 fb41 	bl	800633c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004cba:	bf00      	nop
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20002434 	.word	0x20002434

08004cc4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004ccc:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <_sbrk+0x50>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <_sbrk+0x16>
		heap_end = &end;
 8004cd4:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <_sbrk+0x50>)
 8004cd6:	4a10      	ldr	r2, [pc, #64]	; (8004d18 <_sbrk+0x54>)
 8004cd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004cda:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <_sbrk+0x50>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <_sbrk+0x50>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	466a      	mov	r2, sp
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d907      	bls.n	8004cfe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004cee:	f011 f877 	bl	8015de0 <__errno>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	230c      	movs	r3, #12
 8004cf6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfc:	e006      	b.n	8004d0c <_sbrk+0x48>
	}

	heap_end += incr;
 8004cfe:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <_sbrk+0x50>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4413      	add	r3, r2
 8004d06:	4a03      	ldr	r2, [pc, #12]	; (8004d14 <_sbrk+0x50>)
 8004d08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	2000073c 	.word	0x2000073c
 8004d18:	20002840 	.word	0x20002840

08004d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d20:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <SystemInit+0x28>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	4a07      	ldr	r2, [pc, #28]	; (8004d44 <SystemInit+0x28>)
 8004d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <SystemInit+0x28>)
 8004d32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d36:	609a      	str	r2, [r3, #8]
#endif
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	e000ed00 	.word	0xe000ed00

08004d48 <Reset_Handler>:
 8004d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d80 <LoopFillZerobss+0x14>
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	e003      	b.n	8004d58 <LoopCopyDataInit>

08004d50 <CopyDataInit>:
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <LoopFillZerobss+0x18>)
 8004d52:	585b      	ldr	r3, [r3, r1]
 8004d54:	5043      	str	r3, [r0, r1]
 8004d56:	3104      	adds	r1, #4

08004d58 <LoopCopyDataInit>:
 8004d58:	480b      	ldr	r0, [pc, #44]	; (8004d88 <LoopFillZerobss+0x1c>)
 8004d5a:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <LoopFillZerobss+0x20>)
 8004d5c:	1842      	adds	r2, r0, r1
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d3f6      	bcc.n	8004d50 <CopyDataInit>
 8004d62:	4a0b      	ldr	r2, [pc, #44]	; (8004d90 <LoopFillZerobss+0x24>)
 8004d64:	e002      	b.n	8004d6c <LoopFillZerobss>

08004d66 <FillZerobss>:
 8004d66:	2300      	movs	r3, #0
 8004d68:	f842 3b04 	str.w	r3, [r2], #4

08004d6c <LoopFillZerobss>:
 8004d6c:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <LoopFillZerobss+0x28>)
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d3f9      	bcc.n	8004d66 <FillZerobss>
 8004d72:	f7ff ffd3 	bl	8004d1c <SystemInit>
 8004d76:	f011 f839 	bl	8015dec <__libc_init_array>
 8004d7a:	f7ff f99d 	bl	80040b8 <main>
 8004d7e:	4770      	bx	lr
 8004d80:	20020000 	.word	0x20020000
 8004d84:	0801a97c 	.word	0x0801a97c
 8004d88:	20000000 	.word	0x20000000
 8004d8c:	20000238 	.word	0x20000238
 8004d90:	20000238 	.word	0x20000238
 8004d94:	20002840 	.word	0x20002840

08004d98 <ADC_IRQHandler>:
 8004d98:	e7fe      	b.n	8004d98 <ADC_IRQHandler>
	...

08004d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <HAL_Init+0x40>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0d      	ldr	r2, [pc, #52]	; (8004ddc <HAL_Init+0x40>)
 8004da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <HAL_Init+0x40>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <HAL_Init+0x40>)
 8004db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004db8:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <HAL_Init+0x40>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a07      	ldr	r2, [pc, #28]	; (8004ddc <HAL_Init+0x40>)
 8004dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dc4:	2003      	movs	r0, #3
 8004dc6:	f000 f94d 	bl	8005064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f000 f808 	bl	8004de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004dd0:	f7ff fc28 	bl	8004624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40023c00 	.word	0x40023c00

08004de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004de8:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <HAL_InitTick+0x54>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <HAL_InitTick+0x58>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	4619      	mov	r1, r3
 8004df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f965 	bl	80050ce <HAL_SYSTICK_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e00e      	b.n	8004e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b0f      	cmp	r3, #15
 8004e12:	d80a      	bhi.n	8004e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e14:	2200      	movs	r2, #0
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	f000 f92d 	bl	800507a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e20:	4a06      	ldr	r2, [pc, #24]	; (8004e3c <HAL_InitTick+0x5c>)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	2000004c 	.word	0x2000004c
 8004e38:	20000054 	.word	0x20000054
 8004e3c:	20000050 	.word	0x20000050

08004e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_IncTick+0x20>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <HAL_IncTick+0x24>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4413      	add	r3, r2
 8004e50:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <HAL_IncTick+0x24>)
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	20000054 	.word	0x20000054
 8004e64:	20001124 	.word	0x20001124

08004e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <HAL_GetTick+0x14>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20001124 	.word	0x20001124

08004e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e88:	f7ff ffee 	bl	8004e68 <HAL_GetTick>
 8004e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d005      	beq.n	8004ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_Delay+0x40>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ea6:	bf00      	nop
 8004ea8:	f7ff ffde 	bl	8004e68 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d8f7      	bhi.n	8004ea8 <HAL_Delay+0x28>
  {
  }
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000054 	.word	0x20000054

08004ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <__NVIC_SetPriorityGrouping+0x44>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ef6:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <__NVIC_SetPriorityGrouping+0x44>)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	60d3      	str	r3, [r2, #12]
}
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	e000ed00 	.word	0xe000ed00

08004f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <__NVIC_GetPriorityGrouping+0x18>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	f003 0307 	and.w	r3, r3, #7
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	db0b      	blt.n	8004f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	f003 021f 	and.w	r2, r3, #31
 8004f40:	4907      	ldr	r1, [pc, #28]	; (8004f60 <__NVIC_EnableIRQ+0x38>)
 8004f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2001      	movs	r0, #1
 8004f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	e000e100 	.word	0xe000e100

08004f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	db0a      	blt.n	8004f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	490c      	ldr	r1, [pc, #48]	; (8004fb0 <__NVIC_SetPriority+0x4c>)
 8004f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f82:	0112      	lsls	r2, r2, #4
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	440b      	add	r3, r1
 8004f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f8c:	e00a      	b.n	8004fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	4908      	ldr	r1, [pc, #32]	; (8004fb4 <__NVIC_SetPriority+0x50>)
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	3b04      	subs	r3, #4
 8004f9c:	0112      	lsls	r2, r2, #4
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	761a      	strb	r2, [r3, #24]
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	e000e100 	.word	0xe000e100
 8004fb4:	e000ed00 	.word	0xe000ed00

08004fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b089      	sub	sp, #36	; 0x24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f1c3 0307 	rsb	r3, r3, #7
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	bf28      	it	cs
 8004fd6:	2304      	movcs	r3, #4
 8004fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d902      	bls.n	8004fe8 <NVIC_EncodePriority+0x30>
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3b03      	subs	r3, #3
 8004fe6:	e000      	b.n	8004fea <NVIC_EncodePriority+0x32>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43da      	mvns	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005000:	f04f 31ff 	mov.w	r1, #4294967295
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	fa01 f303 	lsl.w	r3, r1, r3
 800500a:	43d9      	mvns	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005010:	4313      	orrs	r3, r2
         );
}
 8005012:	4618      	mov	r0, r3
 8005014:	3724      	adds	r7, #36	; 0x24
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3b01      	subs	r3, #1
 800502c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005030:	d301      	bcc.n	8005036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005032:	2301      	movs	r3, #1
 8005034:	e00f      	b.n	8005056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005036:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <SysTick_Config+0x40>)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3b01      	subs	r3, #1
 800503c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800503e:	210f      	movs	r1, #15
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	f7ff ff8e 	bl	8004f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <SysTick_Config+0x40>)
 800504a:	2200      	movs	r2, #0
 800504c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800504e:	4b04      	ldr	r3, [pc, #16]	; (8005060 <SysTick_Config+0x40>)
 8005050:	2207      	movs	r2, #7
 8005052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	e000e010 	.word	0xe000e010

08005064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff ff29 	bl	8004ec4 <__NVIC_SetPriorityGrouping>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800507a:	b580      	push	{r7, lr}
 800507c:	b086      	sub	sp, #24
 800507e:	af00      	add	r7, sp, #0
 8005080:	4603      	mov	r3, r0
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800508c:	f7ff ff3e 	bl	8004f0c <__NVIC_GetPriorityGrouping>
 8005090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	6978      	ldr	r0, [r7, #20]
 8005098:	f7ff ff8e 	bl	8004fb8 <NVIC_EncodePriority>
 800509c:	4602      	mov	r2, r0
 800509e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a2:	4611      	mov	r1, r2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff ff5d 	bl	8004f64 <__NVIC_SetPriority>
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	4603      	mov	r3, r0
 80050ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff ff31 	bl	8004f28 <__NVIC_EnableIRQ>
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff ffa2 	bl	8005020 <SysTick_Config>
 80050dc:	4603      	mov	r3, r0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d004      	beq.n	8005104 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2280      	movs	r2, #128	; 0x80
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e00c      	b.n	800511e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2205      	movs	r2, #5
 8005108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0201 	bic.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800512c:	b480      	push	{r7}
 800512e:	b089      	sub	sp, #36	; 0x24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800513a:	2300      	movs	r3, #0
 800513c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800513e:	2300      	movs	r3, #0
 8005140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005142:	2300      	movs	r3, #0
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	e159      	b.n	80053fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005148:	2201      	movs	r2, #1
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4013      	ands	r3, r2
 800515a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	429a      	cmp	r2, r3
 8005162:	f040 8148 	bne.w	80053f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d00b      	beq.n	8005186 <HAL_GPIO_Init+0x5a>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d007      	beq.n	8005186 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800517a:	2b11      	cmp	r3, #17
 800517c:	d003      	beq.n	8005186 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b12      	cmp	r3, #18
 8005184:	d130      	bne.n	80051e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	2203      	movs	r2, #3
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43db      	mvns	r3, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4013      	ands	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051bc:	2201      	movs	r2, #1
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	43db      	mvns	r3, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4013      	ands	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 0201 	and.w	r2, r3, #1
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4313      	orrs	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	2203      	movs	r2, #3
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4313      	orrs	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d003      	beq.n	8005228 <HAL_GPIO_Init+0xfc>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b12      	cmp	r3, #18
 8005226:	d123      	bne.n	8005270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	08da      	lsrs	r2, r3, #3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3208      	adds	r2, #8
 8005230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	220f      	movs	r2, #15
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4013      	ands	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	08da      	lsrs	r2, r3, #3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3208      	adds	r2, #8
 800526a:	69b9      	ldr	r1, [r7, #24]
 800526c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	2203      	movs	r2, #3
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 0203 	and.w	r2, r3, #3
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 80a2 	beq.w	80053f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	4b56      	ldr	r3, [pc, #344]	; (8005410 <HAL_GPIO_Init+0x2e4>)
 80052b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ba:	4a55      	ldr	r2, [pc, #340]	; (8005410 <HAL_GPIO_Init+0x2e4>)
 80052bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052c0:	6453      	str	r3, [r2, #68]	; 0x44
 80052c2:	4b53      	ldr	r3, [pc, #332]	; (8005410 <HAL_GPIO_Init+0x2e4>)
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052ce:	4a51      	ldr	r2, [pc, #324]	; (8005414 <HAL_GPIO_Init+0x2e8>)
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	089b      	lsrs	r3, r3, #2
 80052d4:	3302      	adds	r3, #2
 80052d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	220f      	movs	r2, #15
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43db      	mvns	r3, r3
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	4013      	ands	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a48      	ldr	r2, [pc, #288]	; (8005418 <HAL_GPIO_Init+0x2ec>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d019      	beq.n	800532e <HAL_GPIO_Init+0x202>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a47      	ldr	r2, [pc, #284]	; (800541c <HAL_GPIO_Init+0x2f0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d013      	beq.n	800532a <HAL_GPIO_Init+0x1fe>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a46      	ldr	r2, [pc, #280]	; (8005420 <HAL_GPIO_Init+0x2f4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00d      	beq.n	8005326 <HAL_GPIO_Init+0x1fa>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a45      	ldr	r2, [pc, #276]	; (8005424 <HAL_GPIO_Init+0x2f8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d007      	beq.n	8005322 <HAL_GPIO_Init+0x1f6>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a44      	ldr	r2, [pc, #272]	; (8005428 <HAL_GPIO_Init+0x2fc>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d101      	bne.n	800531e <HAL_GPIO_Init+0x1f2>
 800531a:	2304      	movs	r3, #4
 800531c:	e008      	b.n	8005330 <HAL_GPIO_Init+0x204>
 800531e:	2307      	movs	r3, #7
 8005320:	e006      	b.n	8005330 <HAL_GPIO_Init+0x204>
 8005322:	2303      	movs	r3, #3
 8005324:	e004      	b.n	8005330 <HAL_GPIO_Init+0x204>
 8005326:	2302      	movs	r3, #2
 8005328:	e002      	b.n	8005330 <HAL_GPIO_Init+0x204>
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <HAL_GPIO_Init+0x204>
 800532e:	2300      	movs	r3, #0
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	f002 0203 	and.w	r2, r2, #3
 8005336:	0092      	lsls	r2, r2, #2
 8005338:	4093      	lsls	r3, r2
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4313      	orrs	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005340:	4934      	ldr	r1, [pc, #208]	; (8005414 <HAL_GPIO_Init+0x2e8>)
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	089b      	lsrs	r3, r3, #2
 8005346:	3302      	adds	r3, #2
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800534e:	4b37      	ldr	r3, [pc, #220]	; (800542c <HAL_GPIO_Init+0x300>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	43db      	mvns	r3, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4013      	ands	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005372:	4a2e      	ldr	r2, [pc, #184]	; (800542c <HAL_GPIO_Init+0x300>)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005378:	4b2c      	ldr	r3, [pc, #176]	; (800542c <HAL_GPIO_Init+0x300>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	43db      	mvns	r3, r3
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	4013      	ands	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800539c:	4a23      	ldr	r2, [pc, #140]	; (800542c <HAL_GPIO_Init+0x300>)
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053a2:	4b22      	ldr	r3, [pc, #136]	; (800542c <HAL_GPIO_Init+0x300>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	43db      	mvns	r3, r3
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	4013      	ands	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053c6:	4a19      	ldr	r2, [pc, #100]	; (800542c <HAL_GPIO_Init+0x300>)
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053cc:	4b17      	ldr	r3, [pc, #92]	; (800542c <HAL_GPIO_Init+0x300>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	43db      	mvns	r3, r3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4013      	ands	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053f0:	4a0e      	ldr	r2, [pc, #56]	; (800542c <HAL_GPIO_Init+0x300>)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	3301      	adds	r3, #1
 80053fa:	61fb      	str	r3, [r7, #28]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	f67f aea2 	bls.w	8005148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005404:	bf00      	nop
 8005406:	3724      	adds	r7, #36	; 0x24
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40023800 	.word	0x40023800
 8005414:	40013800 	.word	0x40013800
 8005418:	40020000 	.word	0x40020000
 800541c:	40020400 	.word	0x40020400
 8005420:	40020800 	.word	0x40020800
 8005424:	40020c00 	.word	0x40020c00
 8005428:	40021000 	.word	0x40021000
 800542c:	40013c00 	.word	0x40013c00

08005430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	887b      	ldrh	r3, [r7, #2]
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005448:	2301      	movs	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
 800544c:	e001      	b.n	8005452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005452:	7bfb      	ldrb	r3, [r7, #15]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	807b      	strh	r3, [r7, #2]
 800546c:	4613      	mov	r3, r2
 800546e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005470:	787b      	ldrb	r3, [r7, #1]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005476:	887a      	ldrh	r2, [r7, #2]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800547c:	e003      	b.n	8005486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800547e:	887b      	ldrh	r3, [r7, #2]
 8005480:	041a      	lsls	r2, r3, #16
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	619a      	str	r2, [r3, #24]
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
	...

08005494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800549e:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054a0:	695a      	ldr	r2, [r3, #20]
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d006      	beq.n	80054b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054aa:	4a05      	ldr	r2, [pc, #20]	; (80054c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 f806 	bl	80054c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40013c00 	.word	0x40013c00

080054c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e11f      	b.n	800572e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff f8b6 	bl	8004674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2224      	movs	r2, #36	; 0x24
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0201 	bic.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800552e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800553e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005540:	f002 fb70 	bl	8007c24 <HAL_RCC_GetPCLK1Freq>
 8005544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4a7b      	ldr	r2, [pc, #492]	; (8005738 <HAL_I2C_Init+0x25c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d807      	bhi.n	8005560 <HAL_I2C_Init+0x84>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4a7a      	ldr	r2, [pc, #488]	; (800573c <HAL_I2C_Init+0x260>)
 8005554:	4293      	cmp	r3, r2
 8005556:	bf94      	ite	ls
 8005558:	2301      	movls	r3, #1
 800555a:	2300      	movhi	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	e006      	b.n	800556e <HAL_I2C_Init+0x92>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a77      	ldr	r2, [pc, #476]	; (8005740 <HAL_I2C_Init+0x264>)
 8005564:	4293      	cmp	r3, r2
 8005566:	bf94      	ite	ls
 8005568:	2301      	movls	r3, #1
 800556a:	2300      	movhi	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e0db      	b.n	800572e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4a72      	ldr	r2, [pc, #456]	; (8005744 <HAL_I2C_Init+0x268>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	0c9b      	lsrs	r3, r3, #18
 8005580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	4a64      	ldr	r2, [pc, #400]	; (8005738 <HAL_I2C_Init+0x25c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d802      	bhi.n	80055b0 <HAL_I2C_Init+0xd4>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	3301      	adds	r3, #1
 80055ae:	e009      	b.n	80055c4 <HAL_I2C_Init+0xe8>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055b6:	fb02 f303 	mul.w	r3, r2, r3
 80055ba:	4a63      	ldr	r2, [pc, #396]	; (8005748 <HAL_I2C_Init+0x26c>)
 80055bc:	fba2 2303 	umull	r2, r3, r2, r3
 80055c0:	099b      	lsrs	r3, r3, #6
 80055c2:	3301      	adds	r3, #1
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4956      	ldr	r1, [pc, #344]	; (8005738 <HAL_I2C_Init+0x25c>)
 80055e0:	428b      	cmp	r3, r1
 80055e2:	d80d      	bhi.n	8005600 <HAL_I2C_Init+0x124>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1e59      	subs	r1, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80055f2:	3301      	adds	r3, #1
 80055f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	bf38      	it	cc
 80055fc:	2304      	movcc	r3, #4
 80055fe:	e04f      	b.n	80056a0 <HAL_I2C_Init+0x1c4>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d111      	bne.n	800562c <HAL_I2C_Init+0x150>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1e58      	subs	r0, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6859      	ldr	r1, [r3, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	440b      	add	r3, r1
 8005616:	fbb0 f3f3 	udiv	r3, r0, r3
 800561a:	3301      	adds	r3, #1
 800561c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005620:	2b00      	cmp	r3, #0
 8005622:	bf0c      	ite	eq
 8005624:	2301      	moveq	r3, #1
 8005626:	2300      	movne	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	e012      	b.n	8005652 <HAL_I2C_Init+0x176>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1e58      	subs	r0, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6859      	ldr	r1, [r3, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	0099      	lsls	r1, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005642:	3301      	adds	r3, #1
 8005644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005648:	2b00      	cmp	r3, #0
 800564a:	bf0c      	ite	eq
 800564c:	2301      	moveq	r3, #1
 800564e:	2300      	movne	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_I2C_Init+0x17e>
 8005656:	2301      	movs	r3, #1
 8005658:	e022      	b.n	80056a0 <HAL_I2C_Init+0x1c4>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10e      	bne.n	8005680 <HAL_I2C_Init+0x1a4>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1e58      	subs	r0, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6859      	ldr	r1, [r3, #4]
 800566a:	460b      	mov	r3, r1
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	440b      	add	r3, r1
 8005670:	fbb0 f3f3 	udiv	r3, r0, r3
 8005674:	3301      	adds	r3, #1
 8005676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567e:	e00f      	b.n	80056a0 <HAL_I2C_Init+0x1c4>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	1e58      	subs	r0, r3, #1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6859      	ldr	r1, [r3, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	440b      	add	r3, r1
 800568e:	0099      	lsls	r1, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	fbb0 f3f3 	udiv	r3, r0, r3
 8005696:	3301      	adds	r3, #1
 8005698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	6809      	ldr	r1, [r1, #0]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69da      	ldr	r2, [r3, #28]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6911      	ldr	r1, [r2, #16]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68d2      	ldr	r2, [r2, #12]
 80056da:	4311      	orrs	r1, r2
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	430b      	orrs	r3, r1
 80056e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695a      	ldr	r2, [r3, #20]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	000186a0 	.word	0x000186a0
 800573c:	001e847f 	.word	0x001e847f
 8005740:	003d08ff 	.word	0x003d08ff
 8005744:	431bde83 	.word	0x431bde83
 8005748:	10624dd3 	.word	0x10624dd3

0800574c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	; 0x30
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	4608      	mov	r0, r1
 8005756:	4611      	mov	r1, r2
 8005758:	461a      	mov	r2, r3
 800575a:	4603      	mov	r3, r0
 800575c:	817b      	strh	r3, [r7, #10]
 800575e:	460b      	mov	r3, r1
 8005760:	813b      	strh	r3, [r7, #8]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005766:	f7ff fb7f 	bl	8004e68 <HAL_GetTick>
 800576a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b20      	cmp	r3, #32
 8005776:	f040 8208 	bne.w	8005b8a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	2319      	movs	r3, #25
 8005780:	2201      	movs	r2, #1
 8005782:	497b      	ldr	r1, [pc, #492]	; (8005970 <HAL_I2C_Mem_Read+0x224>)
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 faed 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005790:	2302      	movs	r3, #2
 8005792:	e1fb      	b.n	8005b8c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_I2C_Mem_Read+0x56>
 800579e:	2302      	movs	r3, #2
 80057a0:	e1f4      	b.n	8005b8c <HAL_I2C_Mem_Read+0x440>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d007      	beq.n	80057c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2222      	movs	r2, #34	; 0x22
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2240      	movs	r2, #64	; 0x40
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80057f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fe:	b29a      	uxth	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4a5b      	ldr	r2, [pc, #364]	; (8005974 <HAL_I2C_Mem_Read+0x228>)
 8005808:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800580a:	88f8      	ldrh	r0, [r7, #6]
 800580c:	893a      	ldrh	r2, [r7, #8]
 800580e:	8979      	ldrh	r1, [r7, #10]
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	4603      	mov	r3, r0
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f9bc 	bl	8005b98 <I2C_RequestMemoryRead>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e1b0      	b.n	8005b8c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582e:	2b00      	cmp	r3, #0
 8005830:	d113      	bne.n	800585a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005832:	2300      	movs	r3, #0
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	623b      	str	r3, [r7, #32]
 8005846:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	e184      	b.n	8005b64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585e:	2b01      	cmp	r3, #1
 8005860:	d11b      	bne.n	800589a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	61fb      	str	r3, [r7, #28]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	61fb      	str	r3, [r7, #28]
 8005886:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	e164      	b.n	8005b64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d11b      	bne.n	80058da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c2:	2300      	movs	r3, #0
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	e144      	b.n	8005b64 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80058f0:	e138      	b.n	8005b64 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	f200 80f1 	bhi.w	8005ade <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005900:	2b01      	cmp	r3, #1
 8005902:	d123      	bne.n	800594c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005906:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 fb42 	bl	8005f92 <I2C_WaitOnRXNEFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e139      	b.n	8005b8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691a      	ldr	r2, [r3, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	855a      	strh	r2, [r3, #42]	; 0x2a
 800594a:	e10b      	b.n	8005b64 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005950:	2b02      	cmp	r3, #2
 8005952:	d14e      	bne.n	80059f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	2200      	movs	r2, #0
 800595c:	4906      	ldr	r1, [pc, #24]	; (8005978 <HAL_I2C_Mem_Read+0x22c>)
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 fa00 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e10e      	b.n	8005b8c <HAL_I2C_Mem_Read+0x440>
 800596e:	bf00      	nop
 8005970:	00100002 	.word	0x00100002
 8005974:	ffff0000 	.word	0xffff0000
 8005978:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800598a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059f0:	e0b8      	b.n	8005b64 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	2200      	movs	r2, #0
 80059fa:	4966      	ldr	r1, [pc, #408]	; (8005b94 <HAL_I2C_Mem_Read+0x448>)
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f9b1 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e0bf      	b.n	8005b8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a54:	2200      	movs	r2, #0
 8005a56:	494f      	ldr	r1, [pc, #316]	; (8005b94 <HAL_I2C_Mem_Read+0x448>)
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f983 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e091      	b.n	8005b8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005adc:	e042      	b.n	8005b64 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 fa55 	bl	8005f92 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e04c      	b.n	8005b8c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d118      	bne.n	8005b64 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f47f aec2 	bne.w	80058f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e000      	b.n	8005b8c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005b8a:	2302      	movs	r3, #2
  }
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3728      	adds	r7, #40	; 0x28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	00010004 	.word	0x00010004

08005b98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	817b      	strh	r3, [r7, #10]
 8005baa:	460b      	mov	r3, r1
 8005bac:	813b      	strh	r3, [r7, #8]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f8c0 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00c      	beq.n	8005c04 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e0a9      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c04:	897b      	ldrh	r3, [r7, #10]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	6a3a      	ldr	r2, [r7, #32]
 8005c18:	4951      	ldr	r1, [pc, #324]	; (8005d60 <I2C_RequestMemoryRead+0x1c8>)
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f8f9 	bl	8005e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e096      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c42:	6a39      	ldr	r1, [r7, #32]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f963 	bl	8005f10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00d      	beq.n	8005c6c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d107      	bne.n	8005c68 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e075      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c6c:	88fb      	ldrh	r3, [r7, #6]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d105      	bne.n	8005c7e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c72:	893b      	ldrh	r3, [r7, #8]
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	611a      	str	r2, [r3, #16]
 8005c7c:	e021      	b.n	8005cc2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c7e:	893b      	ldrh	r3, [r7, #8]
 8005c80:	0a1b      	lsrs	r3, r3, #8
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8e:	6a39      	ldr	r1, [r7, #32]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f93d 	bl	8005f10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00d      	beq.n	8005cb8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d107      	bne.n	8005cb4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e04f      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cb8:	893b      	ldrh	r3, [r7, #8]
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc4:	6a39      	ldr	r1, [r7, #32]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f922 	bl	8005f10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00d      	beq.n	8005cee <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d107      	bne.n	8005cea <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e034      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f82a 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00c      	beq.n	8005d30 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e013      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d30:	897b      	ldrh	r3, [r7, #10]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	6a3a      	ldr	r2, [r7, #32]
 8005d44:	4906      	ldr	r1, [pc, #24]	; (8005d60 <I2C_RequestMemoryRead+0x1c8>)
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f863 	bl	8005e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	00010002 	.word	0x00010002

08005d64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	4613      	mov	r3, r2
 8005d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d74:	e025      	b.n	8005dc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d021      	beq.n	8005dc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7e:	f7ff f873 	bl	8004e68 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d302      	bcc.n	8005d94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d116      	bne.n	8005dc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	f043 0220 	orr.w	r2, r3, #32
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e023      	b.n	8005e0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	0c1b      	lsrs	r3, r3, #16
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d10d      	bne.n	8005de8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	43da      	mvns	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bf0c      	ite	eq
 8005dde:	2301      	moveq	r3, #1
 8005de0:	2300      	movne	r3, #0
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	e00c      	b.n	8005e02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	43da      	mvns	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4013      	ands	r3, r2
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bf0c      	ite	eq
 8005dfa:	2301      	moveq	r3, #1
 8005dfc:	2300      	movne	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d0b6      	beq.n	8005d76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	607a      	str	r2, [r7, #4]
 8005e1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e20:	e051      	b.n	8005ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e30:	d123      	bne.n	8005e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	f043 0204 	orr.w	r2, r3, #4
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e046      	b.n	8005f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d021      	beq.n	8005ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e82:	f7fe fff1 	bl	8004e68 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d302      	bcc.n	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d116      	bne.n	8005ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	f043 0220 	orr.w	r2, r3, #32
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e020      	b.n	8005f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	0c1b      	lsrs	r3, r3, #16
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d10c      	bne.n	8005eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	43da      	mvns	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4013      	ands	r3, r2
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bf14      	ite	ne
 8005ee2:	2301      	movne	r3, #1
 8005ee4:	2300      	moveq	r3, #0
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	e00b      	b.n	8005f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	43da      	mvns	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bf14      	ite	ne
 8005efc:	2301      	movne	r3, #1
 8005efe:	2300      	moveq	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d18d      	bne.n	8005e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f1c:	e02d      	b.n	8005f7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f88d 	bl	800603e <I2C_IsAcknowledgeFailed>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e02d      	b.n	8005f8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d021      	beq.n	8005f7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f36:	f7fe ff97 	bl	8004e68 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d302      	bcc.n	8005f4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d116      	bne.n	8005f7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	f043 0220 	orr.w	r2, r3, #32
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e007      	b.n	8005f8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f84:	2b80      	cmp	r3, #128	; 0x80
 8005f86:	d1ca      	bne.n	8005f1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f9e:	e042      	b.n	8006026 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f003 0310 	and.w	r3, r3, #16
 8005faa:	2b10      	cmp	r3, #16
 8005fac:	d119      	bne.n	8005fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f06f 0210 	mvn.w	r2, #16
 8005fb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e029      	b.n	8006036 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe2:	f7fe ff41 	bl	8004e68 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d302      	bcc.n	8005ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d116      	bne.n	8006026 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f043 0220 	orr.w	r2, r3, #32
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e007      	b.n	8006036 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d1b5      	bne.n	8005fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006054:	d11b      	bne.n	800608e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800605e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f043 0204 	orr.w	r2, r3, #4
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800609c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609e:	b08f      	sub	sp, #60	; 0x3c
 80060a0:	af0a      	add	r7, sp, #40	; 0x28
 80060a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e10f      	b.n	80062ce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f00f fb7b 	bl	80157c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2203      	movs	r2, #3
 80060d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f004 ff4e 	bl	800af8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	687e      	ldr	r6, [r7, #4]
 80060fa:	466d      	mov	r5, sp
 80060fc:	f106 0410 	add.w	r4, r6, #16
 8006100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006108:	e894 0003 	ldmia.w	r4, {r0, r1}
 800610c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006110:	1d33      	adds	r3, r6, #4
 8006112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006114:	6838      	ldr	r0, [r7, #0]
 8006116:	f004 fe25 	bl	800ad64 <USB_CoreInit>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e0d0      	b.n	80062ce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f004 ff3c 	bl	800afb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006138:	2300      	movs	r3, #0
 800613a:	73fb      	strb	r3, [r7, #15]
 800613c:	e04a      	b.n	80061d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800613e:	7bfa      	ldrb	r2, [r7, #15]
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	333d      	adds	r3, #61	; 0x3d
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006152:	7bfa      	ldrb	r2, [r7, #15]
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	1a9b      	subs	r3, r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	333c      	adds	r3, #60	; 0x3c
 8006162:	7bfa      	ldrb	r2, [r7, #15]
 8006164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006166:	7bfa      	ldrb	r2, [r7, #15]
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	b298      	uxth	r0, r3
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	1a9b      	subs	r3, r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	3342      	adds	r3, #66	; 0x42
 800617a:	4602      	mov	r2, r0
 800617c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800617e:	7bfa      	ldrb	r2, [r7, #15]
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	333f      	adds	r3, #63	; 0x3f
 800618e:	2200      	movs	r2, #0
 8006190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006192:	7bfa      	ldrb	r2, [r7, #15]
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	1a9b      	subs	r3, r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	3344      	adds	r3, #68	; 0x44
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061a6:	7bfa      	ldrb	r2, [r7, #15]
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	1a9b      	subs	r3, r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	3348      	adds	r3, #72	; 0x48
 80061b6:	2200      	movs	r2, #0
 80061b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80061ba:	7bfa      	ldrb	r2, [r7, #15]
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	1a9b      	subs	r3, r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	440b      	add	r3, r1
 80061c8:	3350      	adds	r3, #80	; 0x50
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	3301      	adds	r3, #1
 80061d2:	73fb      	strb	r3, [r7, #15]
 80061d4:	7bfa      	ldrb	r2, [r7, #15]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d3af      	bcc.n	800613e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
 80061e2:	e044      	b.n	800626e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061e4:	7bfa      	ldrb	r2, [r7, #15]
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	4613      	mov	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	1a9b      	subs	r3, r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061fa:	7bfa      	ldrb	r2, [r7, #15]
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	440b      	add	r3, r1
 8006208:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800620c:	7bfa      	ldrb	r2, [r7, #15]
 800620e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006210:	7bfa      	ldrb	r2, [r7, #15]
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	1a9b      	subs	r3, r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006226:	7bfa      	ldrb	r2, [r7, #15]
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	1a9b      	subs	r3, r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800623c:	7bfa      	ldrb	r2, [r7, #15]
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006252:	7bfa      	ldrb	r2, [r7, #15]
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	3301      	adds	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
 800626e:	7bfa      	ldrb	r2, [r7, #15]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	429a      	cmp	r2, r3
 8006276:	d3b5      	bcc.n	80061e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	603b      	str	r3, [r7, #0]
 800627e:	687e      	ldr	r6, [r7, #4]
 8006280:	466d      	mov	r5, sp
 8006282:	f106 0410 	add.w	r4, r6, #16
 8006286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800628a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800628c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800628e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006292:	e885 0003 	stmia.w	r5, {r0, r1}
 8006296:	1d33      	adds	r3, r6, #4
 8006298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800629a:	6838      	ldr	r0, [r7, #0]
 800629c:	f004 feb2 	bl	800b004 <USB_DevInit>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d005      	beq.n	80062b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e00d      	b.n	80062ce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f005 fea7 	bl	800c01a <USB_DevDisconnect>

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_PCD_Start+0x1c>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e020      	b.n	8006334 <HAL_PCD_Start+0x5e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d109      	bne.n	8006316 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006306:	2b01      	cmp	r3, #1
 8006308:	d005      	beq.n	8006316 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f005 fe65 	bl	800bfea <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4618      	mov	r0, r3
 8006326:	f004 fe21 	bl	800af6c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b08d      	sub	sp, #52	; 0x34
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f005 ff0c 	bl	800c170 <USB_GetMode>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	f040 838e 	bne.w	8006a7c <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f005 fe70 	bl	800c04a <USB_ReadInterrupts>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8384 	beq.w	8006a7a <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4618      	mov	r0, r3
 8006378:	f005 fe67 	bl	800c04a <USB_ReadInterrupts>
 800637c:	4603      	mov	r3, r0
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b02      	cmp	r3, #2
 8006384:	d107      	bne.n	8006396 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695a      	ldr	r2, [r3, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f002 0202 	and.w	r2, r2, #2
 8006394:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f005 fe55 	bl	800c04a <USB_ReadInterrupts>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063aa:	d17b      	bne.n	80064a4 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f005 fe5b 	bl	800c070 <USB_ReadDevAllOutEpInterrupt>
 80063ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80063bc:	e06f      	b.n	800649e <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d064      	beq.n	8006492 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	4611      	mov	r1, r2
 80063d2:	4618      	mov	r0, r3
 80063d4:	f005 fe80 	bl	800c0d8 <USB_ReadDevOutEPInterrupt>
 80063d8:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00c      	beq.n	80063fe <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f0:	461a      	mov	r2, r3
 80063f2:	2301      	movs	r3, #1
 80063f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80063f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fe0d 	bl	8007018 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00c      	beq.n	8006422 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 ff0c 	bl	8007228 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	461a      	mov	r2, r3
 800641e:	2308      	movs	r3, #8
 8006420:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	d008      	beq.n	800643e <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006438:	461a      	mov	r2, r3
 800643a:	2310      	movs	r3, #16
 800643c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	f003 0320 	and.w	r3, r3, #32
 8006444:	2b00      	cmp	r3, #0
 8006446:	d015      	beq.n	8006474 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d108      	bne.n	8006462 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800645a:	461a      	mov	r2, r3
 800645c:	2101      	movs	r1, #1
 800645e:	f005 fecb 	bl	800c1f8 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	461a      	mov	r2, r3
 8006470:	2320      	movs	r3, #32
 8006472:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648a:	461a      	mov	r2, r3
 800648c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006490:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	3301      	adds	r3, #1
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	085b      	lsrs	r3, r3, #1
 800649c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d18c      	bne.n	80063be <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f005 fdce 	bl	800c04a <USB_ReadInterrupts>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064b8:	f040 80c4 	bne.w	8006644 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f005 fdef 	bl	800c0a4 <USB_ReadDevAllInEpInterrupt>
 80064c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80064cc:	e0b6      	b.n	800663c <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 80ab 	beq.w	8006630 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	4611      	mov	r1, r2
 80064e4:	4618      	mov	r0, r3
 80064e6:	f005 fe15 	bl	800c114 <USB_ReadDevInEPInterrupt>
 80064ea:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d05b      	beq.n	80065ae <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	2201      	movs	r2, #1
 80064fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006502:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	43db      	mvns	r3, r3
 8006510:	69f9      	ldr	r1, [r7, #28]
 8006512:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006516:	4013      	ands	r3, r2
 8006518:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006526:	461a      	mov	r2, r3
 8006528:	2301      	movs	r3, #1
 800652a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d11b      	bne.n	800656c <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006538:	4613      	mov	r3, r2
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	1a9b      	subs	r3, r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	3348      	adds	r3, #72	; 0x48
 8006544:	6819      	ldr	r1, [r3, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654a:	4613      	mov	r3, r2
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4403      	add	r3, r0
 8006554:	3344      	adds	r3, #68	; 0x44
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4419      	add	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655e:	4613      	mov	r3, r2
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4403      	add	r3, r0
 8006568:	3348      	adds	r3, #72	; 0x48
 800656a:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	b2db      	uxtb	r3, r3
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f00f f9bf 	bl	80158f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d116      	bne.n	80065ae <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	d113      	bne.n	80065ae <HAL_PCD_IRQHandler+0x272>
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658a:	4613      	mov	r3, r2
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	1a9b      	subs	r3, r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	3350      	adds	r3, #80	; 0x50
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d108      	bne.n	80065ae <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065a6:	461a      	mov	r2, r3
 80065a8:	2101      	movs	r1, #1
 80065aa:	f005 fe25 	bl	800c1f8 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	461a      	mov	r2, r3
 80065c6:	2308      	movs	r3, #8
 80065c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d008      	beq.n	80065e6 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e0:	461a      	mov	r2, r3
 80065e2:	2310      	movs	r3, #16
 80065e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fc:	461a      	mov	r2, r3
 80065fe:	2340      	movs	r3, #64	; 0x40
 8006600:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d008      	beq.n	800661e <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006618:	461a      	mov	r2, r3
 800661a:	2302      	movs	r3, #2
 800661c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fc67 	bl	8006efe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	3301      	adds	r3, #1
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	085b      	lsrs	r3, r3, #1
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	2b00      	cmp	r3, #0
 8006640:	f47f af45 	bne.w	80064ce <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4618      	mov	r0, r3
 800664a:	f005 fcfe 	bl	800c04a <USB_ReadInterrupts>
 800664e:	4603      	mov	r3, r0
 8006650:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006658:	d122      	bne.n	80066a0 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006668:	f023 0301 	bic.w	r3, r3, #1
 800666c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006674:	2b01      	cmp	r3, #1
 8006676:	d108      	bne.n	800668a <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006680:	2100      	movs	r1, #0
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fe88 	bl	8007398 <HAL_PCDEx_LPM_Callback>
 8006688:	e002      	b.n	8006690 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f00f f9a0 	bl	80159d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695a      	ldr	r2, [r3, #20]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800669e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f005 fcd0 	bl	800c04a <USB_ReadInterrupts>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b4:	d112      	bne.n	80066dc <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d102      	bne.n	80066cc <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f00f f95c 	bl	8015984 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	695a      	ldr	r2, [r3, #20]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80066da:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f005 fcb2 	bl	800c04a <USB_ReadInterrupts>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f0:	f040 80a7 	bne.w	8006842 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006702:	f023 0301 	bic.w	r3, r3, #1
 8006706:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2110      	movs	r1, #16
 800670e:	4618      	mov	r0, r3
 8006710:	f004 fdea 	bl	800b2e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006714:	2300      	movs	r3, #0
 8006716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006718:	e036      	b.n	8006788 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006726:	461a      	mov	r2, r3
 8006728:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800672c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	440a      	add	r2, r1
 8006744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006748:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800674c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	461a      	mov	r2, r3
 800675c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006760:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	440a      	add	r2, r1
 8006778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800677c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006780:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	3301      	adds	r3, #1
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800678e:	429a      	cmp	r2, r3
 8006790:	d3c3      	bcc.n	800671a <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80067a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d016      	beq.n	80067dc <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067be:	f043 030b 	orr.w	r3, r3, #11
 80067c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067d4:	f043 030b 	orr.w	r3, r3, #11
 80067d8:	6453      	str	r3, [r2, #68]	; 0x44
 80067da:	e015      	b.n	8006808 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80067ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80067f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006802:	f043 030b 	orr.w	r3, r3, #11
 8006806:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006816:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800681a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800682c:	461a      	mov	r2, r3
 800682e:	f005 fce3 	bl	800c1f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	695a      	ldr	r2, [r3, #20]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f005 fbff 	bl	800c04a <USB_ReadInterrupts>
 800684c:	4603      	mov	r3, r0
 800684e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006856:	d124      	bne.n	80068a2 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f005 fc95 	bl	800c18c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f004 fd9f 	bl	800b3aa <USB_GetDevSpeed>
 800686c:	4603      	mov	r3, r0
 800686e:	461a      	mov	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681c      	ldr	r4, [r3, #0]
 8006878:	f001 f9c8 	bl	8007c0c <HAL_RCC_GetHCLKFreq>
 800687c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006882:	b2db      	uxtb	r3, r3
 8006884:	461a      	mov	r2, r3
 8006886:	4620      	mov	r0, r4
 8006888:	f004 face 	bl	800ae28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f00f f85a 	bl	8015946 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695a      	ldr	r2, [r3, #20]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80068a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f005 fbcf 	bl	800c04a <USB_ReadInterrupts>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b10      	cmp	r3, #16
 80068b4:	d161      	bne.n	800697a <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	699a      	ldr	r2, [r3, #24]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0210 	bic.w	r2, r2, #16
 80068c4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f003 020f 	and.w	r2, r3, #15
 80068d2:	4613      	mov	r3, r2
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	1a9b      	subs	r3, r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	4413      	add	r3, r2
 80068e2:	3304      	adds	r3, #4
 80068e4:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	0c5b      	lsrs	r3, r3, #17
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d124      	bne.n	800693c <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80068f8:	4013      	ands	r3, r2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d035      	beq.n	800696a <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	091b      	lsrs	r3, r3, #4
 8006906:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800690c:	b29b      	uxth	r3, r3
 800690e:	461a      	mov	r2, r3
 8006910:	6a38      	ldr	r0, [r7, #32]
 8006912:	f005 fa47 	bl	800bda4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	091b      	lsrs	r3, r3, #4
 800691e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006922:	441a      	add	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	699a      	ldr	r2, [r3, #24]
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	091b      	lsrs	r3, r3, #4
 8006930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006934:	441a      	add	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	619a      	str	r2, [r3, #24]
 800693a:	e016      	b.n	800696a <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	0c5b      	lsrs	r3, r3, #17
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	2b06      	cmp	r3, #6
 8006946:	d110      	bne.n	800696a <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800694e:	2208      	movs	r2, #8
 8006950:	4619      	mov	r1, r3
 8006952:	6a38      	ldr	r0, [r7, #32]
 8006954:	f005 fa26 	bl	800bda4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	091b      	lsrs	r3, r3, #4
 8006960:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006964:	441a      	add	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699a      	ldr	r2, [r3, #24]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f042 0210 	orr.w	r2, r2, #16
 8006978:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f005 fb63 	bl	800c04a <USB_ReadInterrupts>
 8006984:	4603      	mov	r3, r0
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b08      	cmp	r3, #8
 800698c:	d10a      	bne.n	80069a4 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f00e ffcb 	bl	801592a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695a      	ldr	r2, [r3, #20]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f002 0208 	and.w	r2, r2, #8
 80069a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f005 fb4e 	bl	800c04a <USB_ReadInterrupts>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b8:	d10f      	bne.n	80069da <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f00f f823 	bl	8015a10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	695a      	ldr	r2, [r3, #20]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80069d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f005 fb33 	bl	800c04a <USB_ReadInterrupts>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069ee:	d10f      	bne.n	8006a10 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f00e fff6 	bl	80159ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695a      	ldr	r2, [r3, #20]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f005 fb18 	bl	800c04a <USB_ReadInterrupts>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a24:	d10a      	bne.n	8006a3c <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f00f f804 	bl	8015a34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695a      	ldr	r2, [r3, #20]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f005 fb02 	bl	800c04a <USB_ReadInterrupts>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d115      	bne.n	8006a7c <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f003 0304 	and.w	r3, r3, #4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f00e fff4 	bl	8015a50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6859      	ldr	r1, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	605a      	str	r2, [r3, #4]
 8006a78:	e000      	b.n	8006a7c <HAL_PCD_IRQHandler+0x740>
      return;
 8006a7a:	bf00      	nop
    }
  }
}
 8006a7c:	3734      	adds	r7, #52	; 0x34
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd90      	pop	{r4, r7, pc}

08006a82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_PCD_SetAddress+0x1a>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e013      	b.n	8006ac4 <HAL_PCD_SetAddress+0x42>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	78fa      	ldrb	r2, [r7, #3]
 8006aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	78fa      	ldrb	r2, [r7, #3]
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f005 fa72 	bl	800bf9e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4603      	mov	r3, r0
 8006adc:	70fb      	strb	r3, [r7, #3]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	803b      	strh	r3, [r7, #0]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	da0f      	bge.n	8006b12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006af2:	78fb      	ldrb	r3, [r7, #3]
 8006af4:	f003 020f 	and.w	r2, r3, #15
 8006af8:	4613      	mov	r3, r2
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	1a9b      	subs	r3, r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	3338      	adds	r3, #56	; 0x38
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	4413      	add	r3, r2
 8006b06:	3304      	adds	r3, #4
 8006b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	705a      	strb	r2, [r3, #1]
 8006b10:	e00f      	b.n	8006b32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b12:	78fb      	ldrb	r3, [r7, #3]
 8006b14:	f003 020f 	and.w	r2, r3, #15
 8006b18:	4613      	mov	r3, r2
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	1a9b      	subs	r3, r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	4413      	add	r3, r2
 8006b28:	3304      	adds	r3, #4
 8006b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006b3e:	883a      	ldrh	r2, [r7, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	78ba      	ldrb	r2, [r7, #2]
 8006b48:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	785b      	ldrb	r3, [r3, #1]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006b5c:	78bb      	ldrb	r3, [r7, #2]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d102      	bne.n	8006b68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_PCD_EP_Open+0xaa>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e00e      	b.n	8006b94 <HAL_PCD_EP_Open+0xc8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f004 fc35 	bl	800b3f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006b92:	7afb      	ldrb	r3, [r7, #11]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	da0f      	bge.n	8006bd0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	f003 020f 	and.w	r2, r3, #15
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	1a9b      	subs	r3, r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	3338      	adds	r3, #56	; 0x38
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	705a      	strb	r2, [r3, #1]
 8006bce:	e00f      	b.n	8006bf0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	f003 020f 	and.w	r2, r3, #15
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	4413      	add	r3, r2
 8006be6:	3304      	adds	r3, #4
 8006be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d101      	bne.n	8006c0a <HAL_PCD_EP_Close+0x6e>
 8006c06:	2302      	movs	r3, #2
 8006c08:	e00e      	b.n	8006c28 <HAL_PCD_EP_Close+0x8c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68f9      	ldr	r1, [r7, #12]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f004 fc73 	bl	800b504 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c40:	7afb      	ldrb	r3, [r7, #11]
 8006c42:	f003 020f 	and.w	r2, r3, #15
 8006c46:	4613      	mov	r3, r2
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	1a9b      	subs	r3, r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	3304      	adds	r3, #4
 8006c58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c72:	7afb      	ldrb	r3, [r7, #11]
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d102      	bne.n	8006c8c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c8c:	7afb      	ldrb	r3, [r7, #11]
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d109      	bne.n	8006caa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6818      	ldr	r0, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6979      	ldr	r1, [r7, #20]
 8006ca4:	f004 fef6 	bl	800ba94 <USB_EP0StartXfer>
 8006ca8:	e008      	b.n	8006cbc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6979      	ldr	r1, [r7, #20]
 8006cb8:	f004 fca8 	bl	800b60c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006cd2:	78fb      	ldrb	r3, [r7, #3]
 8006cd4:	f003 020f 	and.w	r2, r3, #15
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	1a9b      	subs	r3, r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	440b      	add	r3, r1
 8006ce4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006ce8:	681b      	ldr	r3, [r3, #0]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b086      	sub	sp, #24
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
 8006d02:	460b      	mov	r3, r1
 8006d04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	f003 020f 	and.w	r2, r3, #15
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	3338      	adds	r3, #56	; 0x38
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4413      	add	r3, r2
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2201      	movs	r2, #1
 8006d34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d36:	7afb      	ldrb	r3, [r7, #11]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d102      	bne.n	8006d50 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d50:	7afb      	ldrb	r3, [r7, #11]
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d109      	bne.n	8006d6e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	6979      	ldr	r1, [r7, #20]
 8006d68:	f004 fe94 	bl	800ba94 <USB_EP0StartXfer>
 8006d6c:	e008      	b.n	8006d80 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6979      	ldr	r1, [r7, #20]
 8006d7c:	f004 fc46 	bl	800b60c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	460b      	mov	r3, r1
 8006d94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	f003 020f 	and.w	r2, r3, #15
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d901      	bls.n	8006da8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e050      	b.n	8006e4a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	da0f      	bge.n	8006dd0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	f003 020f 	and.w	r2, r3, #15
 8006db6:	4613      	mov	r3, r2
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	3338      	adds	r3, #56	; 0x38
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	705a      	strb	r2, [r3, #1]
 8006dce:	e00d      	b.n	8006dec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006dd0:	78fa      	ldrb	r2, [r7, #3]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	1a9b      	subs	r3, r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	4413      	add	r3, r2
 8006de2:	3304      	adds	r3, #4
 8006de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_PCD_EP_SetStall+0x82>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e01e      	b.n	8006e4a <HAL_PCD_EP_SetStall+0xc0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68f9      	ldr	r1, [r7, #12]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f004 ffeb 	bl	800bdf6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	b2d9      	uxtb	r1, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f005 f9dc 	bl	800c1f8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e5e:	78fb      	ldrb	r3, [r7, #3]
 8006e60:	f003 020f 	and.w	r2, r3, #15
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d901      	bls.n	8006e70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e042      	b.n	8006ef6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	da0f      	bge.n	8006e98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	f003 020f 	and.w	r2, r3, #15
 8006e7e:	4613      	mov	r3, r2
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	1a9b      	subs	r3, r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	3338      	adds	r3, #56	; 0x38
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	705a      	strb	r2, [r3, #1]
 8006e96:	e00f      	b.n	8006eb8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	f003 020f 	and.w	r2, r3, #15
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	1a9b      	subs	r3, r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	3304      	adds	r3, #4
 8006eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ebe:	78fb      	ldrb	r3, [r7, #3]
 8006ec0:	f003 030f 	and.w	r3, r3, #15
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d101      	bne.n	8006ed8 <HAL_PCD_EP_ClrStall+0x86>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e00e      	b.n	8006ef6 <HAL_PCD_EP_ClrStall+0xa4>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68f9      	ldr	r1, [r7, #12]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f004 fff3 	bl	800bed2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b08a      	sub	sp, #40	; 0x28
 8006f02:	af02      	add	r7, sp, #8
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	4613      	mov	r3, r2
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	1a9b      	subs	r3, r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	3338      	adds	r3, #56	; 0x38
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	4413      	add	r3, r2
 8006f22:	3304      	adds	r3, #4
 8006f24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	699a      	ldr	r2, [r3, #24]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d901      	bls.n	8006f36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e06c      	b.n	8007010 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	695a      	ldr	r2, [r3, #20]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d902      	bls.n	8006f52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	3303      	adds	r3, #3
 8006f56:	089b      	lsrs	r3, r3, #2
 8006f58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f5a:	e02b      	b.n	8006fb4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	695a      	ldr	r2, [r3, #20]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	69fa      	ldr	r2, [r7, #28]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d902      	bls.n	8006f78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	3303      	adds	r3, #3
 8006f7c:	089b      	lsrs	r3, r3, #2
 8006f7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	68d9      	ldr	r1, [r3, #12]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	4603      	mov	r3, r0
 8006f96:	6978      	ldr	r0, [r7, #20]
 8006f98:	f004 fecf 	bl	800bd3a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	441a      	add	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	699a      	ldr	r2, [r3, #24]
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	441a      	add	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d809      	bhi.n	8006fde <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	699a      	ldr	r2, [r3, #24]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d203      	bcs.n	8006fde <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1be      	bne.n	8006f5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	695a      	ldr	r2, [r3, #20]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d811      	bhi.n	800700e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	43db      	mvns	r3, r3
 8007004:	6939      	ldr	r1, [r7, #16]
 8007006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800700a:	4013      	ands	r3, r2
 800700c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3720      	adds	r7, #32
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	333c      	adds	r3, #60	; 0x3c
 8007030:	3304      	adds	r3, #4
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	2b01      	cmp	r3, #1
 800704c:	f040 80b3 	bne.w	80071b6 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d028      	beq.n	80070ac <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4a70      	ldr	r2, [pc, #448]	; (8007220 <PCD_EP_OutXfrComplete_int+0x208>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d90e      	bls.n	8007080 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007068:	2b00      	cmp	r3, #0
 800706a:	d009      	beq.n	8007080 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007078:	461a      	mov	r2, r3
 800707a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800707e:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f00e fc0b 	bl	801589c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007090:	461a      	mov	r2, r3
 8007092:	2101      	movs	r1, #1
 8007094:	f005 f8b0 	bl	800c1f8 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a4:	461a      	mov	r2, r3
 80070a6:	2308      	movs	r3, #8
 80070a8:	6093      	str	r3, [r2, #8]
 80070aa:	e0b3      	b.n	8007214 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	461a      	mov	r2, r3
 80070c4:	2320      	movs	r3, #32
 80070c6:	6093      	str	r3, [r2, #8]
 80070c8:	e0a4      	b.n	8007214 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f040 809f 	bne.w	8007214 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4a51      	ldr	r2, [pc, #324]	; (8007220 <PCD_EP_OutXfrComplete_int+0x208>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d90f      	bls.n	80070fe <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00a      	beq.n	80070fe <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f4:	461a      	mov	r2, r3
 80070f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070fa:	6093      	str	r3, [r2, #8]
 80070fc:	e08a      	b.n	8007214 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	4613      	mov	r3, r2
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	1a9b      	subs	r3, r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007110:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	0159      	lsls	r1, r3, #5
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	440b      	add	r3, r1
 800711a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007124:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	4613      	mov	r3, r2
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	1a9b      	subs	r3, r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4403      	add	r3, r0
 8007134:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007138:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	4613      	mov	r3, r2
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	1a9b      	subs	r3, r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800714c:	6819      	ldr	r1, [r3, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	4613      	mov	r3, r2
 8007154:	00db      	lsls	r3, r3, #3
 8007156:	1a9b      	subs	r3, r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4403      	add	r3, r0
 800715c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4419      	add	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	1a9b      	subs	r3, r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4403      	add	r3, r0
 8007172:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007176:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f00e fb9e 	bl	80158c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d144      	bne.n	8007214 <PCD_EP_OutXfrComplete_int+0x1fc>
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	4613      	mov	r3, r2
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	1a9b      	subs	r3, r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	440b      	add	r3, r1
 8007198:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d138      	bne.n	8007214 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80071ac:	461a      	mov	r2, r3
 80071ae:	2101      	movs	r1, #1
 80071b0:	f005 f822 	bl	800c1f8 <USB_EP0_OutStart>
 80071b4:	e02e      	b.n	8007214 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a1a      	ldr	r2, [pc, #104]	; (8007224 <PCD_EP_OutXfrComplete_int+0x20c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d124      	bne.n	8007208 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d4:	461a      	mov	r2, r3
 80071d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071da:	6093      	str	r3, [r2, #8]
 80071dc:	e01a      	b.n	8007214 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f4:	461a      	mov	r2, r3
 80071f6:	2320      	movs	r3, #32
 80071f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f00e fb5d 	bl	80158c0 <HAL_PCD_DataOutStageCallback>
 8007206:	e005      	b.n	8007214 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f00e fb56 	bl	80158c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	4f54300a 	.word	0x4f54300a
 8007224:	4f54310a 	.word	0x4f54310a

08007228 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	333c      	adds	r3, #60	; 0x3c
 8007240:	3304      	adds	r3, #4
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d113      	bne.n	8007286 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4a1f      	ldr	r2, [pc, #124]	; (80072e0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d922      	bls.n	80072ac <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01d      	beq.n	80072ac <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727c:	461a      	mov	r2, r3
 800727e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007282:	6093      	str	r3, [r2, #8]
 8007284:	e012      	b.n	80072ac <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4a16      	ldr	r2, [pc, #88]	; (80072e4 <PCD_EP_OutSetupPacket_int+0xbc>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d10e      	bne.n	80072ac <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a4:	461a      	mov	r2, r3
 80072a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f00e faf5 	bl	801589c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4a0a      	ldr	r2, [pc, #40]	; (80072e0 <PCD_EP_OutSetupPacket_int+0xb8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d90c      	bls.n	80072d4 <PCD_EP_OutSetupPacket_int+0xac>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d108      	bne.n	80072d4 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6818      	ldr	r0, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072cc:	461a      	mov	r2, r3
 80072ce:	2101      	movs	r1, #1
 80072d0:	f004 ff92 	bl	800c1f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	4f54300a 	.word	0x4f54300a
 80072e4:	4f54310a 	.word	0x4f54310a

080072e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
 80072f4:	4613      	mov	r3, r2
 80072f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d107      	bne.n	8007316 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007306:	883b      	ldrh	r3, [r7, #0]
 8007308:	0419      	lsls	r1, r3, #16
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	430a      	orrs	r2, r1
 8007312:	629a      	str	r2, [r3, #40]	; 0x28
 8007314:	e028      	b.n	8007368 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	0c1b      	lsrs	r3, r3, #16
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	4413      	add	r3, r2
 8007322:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]
 8007328:	e00d      	b.n	8007346 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	3340      	adds	r3, #64	; 0x40
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	4413      	add	r3, r2
 800733e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	3301      	adds	r3, #1
 8007344:	73fb      	strb	r3, [r7, #15]
 8007346:	7bfa      	ldrb	r2, [r7, #15]
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	3b01      	subs	r3, #1
 800734c:	429a      	cmp	r2, r3
 800734e:	d3ec      	bcc.n	800732a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007350:	883b      	ldrh	r3, [r7, #0]
 8007352:	0418      	lsls	r0, r3, #16
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6819      	ldr	r1, [r3, #0]
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	3b01      	subs	r3, #1
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	4302      	orrs	r2, r0
 8007360:	3340      	adds	r3, #64	; 0x40
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	460b      	mov	r3, r1
 8007380:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	887a      	ldrh	r2, [r7, #2]
 8007388:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e25b      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d075      	beq.n	80074ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80073ce:	4ba3      	ldr	r3, [pc, #652]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f003 030c 	and.w	r3, r3, #12
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d00c      	beq.n	80073f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073da:	4ba0      	ldr	r3, [pc, #640]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	d112      	bne.n	800740c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073e6:	4b9d      	ldr	r3, [pc, #628]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073f2:	d10b      	bne.n	800740c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f4:	4b99      	ldr	r3, [pc, #612]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d05b      	beq.n	80074b8 <HAL_RCC_OscConfig+0x108>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d157      	bne.n	80074b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e236      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007414:	d106      	bne.n	8007424 <HAL_RCC_OscConfig+0x74>
 8007416:	4b91      	ldr	r3, [pc, #580]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a90      	ldr	r2, [pc, #576]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 800741c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	e01d      	b.n	8007460 <HAL_RCC_OscConfig+0xb0>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800742c:	d10c      	bne.n	8007448 <HAL_RCC_OscConfig+0x98>
 800742e:	4b8b      	ldr	r3, [pc, #556]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a8a      	ldr	r2, [pc, #552]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	4b88      	ldr	r3, [pc, #544]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a87      	ldr	r2, [pc, #540]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	e00b      	b.n	8007460 <HAL_RCC_OscConfig+0xb0>
 8007448:	4b84      	ldr	r3, [pc, #528]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a83      	ldr	r2, [pc, #524]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 800744e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	4b81      	ldr	r3, [pc, #516]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a80      	ldr	r2, [pc, #512]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 800745a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800745e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d013      	beq.n	8007490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007468:	f7fd fcfe 	bl	8004e68 <HAL_GetTick>
 800746c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800746e:	e008      	b.n	8007482 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007470:	f7fd fcfa 	bl	8004e68 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b64      	cmp	r3, #100	; 0x64
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e1fb      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007482:	4b76      	ldr	r3, [pc, #472]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0f0      	beq.n	8007470 <HAL_RCC_OscConfig+0xc0>
 800748e:	e014      	b.n	80074ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007490:	f7fd fcea 	bl	8004e68 <HAL_GetTick>
 8007494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007496:	e008      	b.n	80074aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007498:	f7fd fce6 	bl	8004e68 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	2b64      	cmp	r3, #100	; 0x64
 80074a4:	d901      	bls.n	80074aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e1e7      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074aa:	4b6c      	ldr	r3, [pc, #432]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1f0      	bne.n	8007498 <HAL_RCC_OscConfig+0xe8>
 80074b6:	e000      	b.n	80074ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d063      	beq.n	800758e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80074c6:	4b65      	ldr	r3, [pc, #404]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 030c 	and.w	r3, r3, #12
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00b      	beq.n	80074ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074d2:	4b62      	ldr	r3, [pc, #392]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80074da:	2b08      	cmp	r3, #8
 80074dc:	d11c      	bne.n	8007518 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074de:	4b5f      	ldr	r3, [pc, #380]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d116      	bne.n	8007518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074ea:	4b5c      	ldr	r3, [pc, #368]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <HAL_RCC_OscConfig+0x152>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d001      	beq.n	8007502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e1bb      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007502:	4b56      	ldr	r3, [pc, #344]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	4952      	ldr	r1, [pc, #328]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007512:	4313      	orrs	r3, r2
 8007514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007516:	e03a      	b.n	800758e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d020      	beq.n	8007562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007520:	4b4f      	ldr	r3, [pc, #316]	; (8007660 <HAL_RCC_OscConfig+0x2b0>)
 8007522:	2201      	movs	r2, #1
 8007524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007526:	f7fd fc9f 	bl	8004e68 <HAL_GetTick>
 800752a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800752c:	e008      	b.n	8007540 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800752e:	f7fd fc9b 	bl	8004e68 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	2b02      	cmp	r3, #2
 800753a:	d901      	bls.n	8007540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e19c      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007540:	4b46      	ldr	r3, [pc, #280]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d0f0      	beq.n	800752e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800754c:	4b43      	ldr	r3, [pc, #268]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	4940      	ldr	r1, [pc, #256]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 800755c:	4313      	orrs	r3, r2
 800755e:	600b      	str	r3, [r1, #0]
 8007560:	e015      	b.n	800758e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007562:	4b3f      	ldr	r3, [pc, #252]	; (8007660 <HAL_RCC_OscConfig+0x2b0>)
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007568:	f7fd fc7e 	bl	8004e68 <HAL_GetTick>
 800756c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800756e:	e008      	b.n	8007582 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007570:	f7fd fc7a 	bl	8004e68 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b02      	cmp	r3, #2
 800757c:	d901      	bls.n	8007582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e17b      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007582:	4b36      	ldr	r3, [pc, #216]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1f0      	bne.n	8007570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d030      	beq.n	80075fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d016      	beq.n	80075d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075a2:	4b30      	ldr	r3, [pc, #192]	; (8007664 <HAL_RCC_OscConfig+0x2b4>)
 80075a4:	2201      	movs	r2, #1
 80075a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075a8:	f7fd fc5e 	bl	8004e68 <HAL_GetTick>
 80075ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075ae:	e008      	b.n	80075c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075b0:	f7fd fc5a 	bl	8004e68 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d901      	bls.n	80075c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e15b      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075c2:	4b26      	ldr	r3, [pc, #152]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 80075c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0f0      	beq.n	80075b0 <HAL_RCC_OscConfig+0x200>
 80075ce:	e015      	b.n	80075fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075d0:	4b24      	ldr	r3, [pc, #144]	; (8007664 <HAL_RCC_OscConfig+0x2b4>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075d6:	f7fd fc47 	bl	8004e68 <HAL_GetTick>
 80075da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075dc:	e008      	b.n	80075f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075de:	f7fd fc43 	bl	8004e68 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d901      	bls.n	80075f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e144      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075f0:	4b1a      	ldr	r3, [pc, #104]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 80075f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1f0      	bne.n	80075de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 80a0 	beq.w	800774a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800760a:	2300      	movs	r3, #0
 800760c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800760e:	4b13      	ldr	r3, [pc, #76]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10f      	bne.n	800763a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]
 800761e:	4b0f      	ldr	r3, [pc, #60]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	4a0e      	ldr	r2, [pc, #56]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 8007624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007628:	6413      	str	r3, [r2, #64]	; 0x40
 800762a:	4b0c      	ldr	r3, [pc, #48]	; (800765c <HAL_RCC_OscConfig+0x2ac>)
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007632:	60bb      	str	r3, [r7, #8]
 8007634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007636:	2301      	movs	r3, #1
 8007638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800763a:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <HAL_RCC_OscConfig+0x2b8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007642:	2b00      	cmp	r3, #0
 8007644:	d121      	bne.n	800768a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007646:	4b08      	ldr	r3, [pc, #32]	; (8007668 <HAL_RCC_OscConfig+0x2b8>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a07      	ldr	r2, [pc, #28]	; (8007668 <HAL_RCC_OscConfig+0x2b8>)
 800764c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007652:	f7fd fc09 	bl	8004e68 <HAL_GetTick>
 8007656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007658:	e011      	b.n	800767e <HAL_RCC_OscConfig+0x2ce>
 800765a:	bf00      	nop
 800765c:	40023800 	.word	0x40023800
 8007660:	42470000 	.word	0x42470000
 8007664:	42470e80 	.word	0x42470e80
 8007668:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800766c:	f7fd fbfc 	bl	8004e68 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e0fd      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800767e:	4b81      	ldr	r3, [pc, #516]	; (8007884 <HAL_RCC_OscConfig+0x4d4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0f0      	beq.n	800766c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d106      	bne.n	80076a0 <HAL_RCC_OscConfig+0x2f0>
 8007692:	4b7d      	ldr	r3, [pc, #500]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 8007694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007696:	4a7c      	ldr	r2, [pc, #496]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 8007698:	f043 0301 	orr.w	r3, r3, #1
 800769c:	6713      	str	r3, [r2, #112]	; 0x70
 800769e:	e01c      	b.n	80076da <HAL_RCC_OscConfig+0x32a>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	2b05      	cmp	r3, #5
 80076a6:	d10c      	bne.n	80076c2 <HAL_RCC_OscConfig+0x312>
 80076a8:	4b77      	ldr	r3, [pc, #476]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 80076aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ac:	4a76      	ldr	r2, [pc, #472]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 80076ae:	f043 0304 	orr.w	r3, r3, #4
 80076b2:	6713      	str	r3, [r2, #112]	; 0x70
 80076b4:	4b74      	ldr	r3, [pc, #464]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 80076b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b8:	4a73      	ldr	r2, [pc, #460]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 80076ba:	f043 0301 	orr.w	r3, r3, #1
 80076be:	6713      	str	r3, [r2, #112]	; 0x70
 80076c0:	e00b      	b.n	80076da <HAL_RCC_OscConfig+0x32a>
 80076c2:	4b71      	ldr	r3, [pc, #452]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 80076c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c6:	4a70      	ldr	r2, [pc, #448]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	6713      	str	r3, [r2, #112]	; 0x70
 80076ce:	4b6e      	ldr	r3, [pc, #440]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 80076d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d2:	4a6d      	ldr	r2, [pc, #436]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 80076d4:	f023 0304 	bic.w	r3, r3, #4
 80076d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d015      	beq.n	800770e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076e2:	f7fd fbc1 	bl	8004e68 <HAL_GetTick>
 80076e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076e8:	e00a      	b.n	8007700 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076ea:	f7fd fbbd 	bl	8004e68 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d901      	bls.n	8007700 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e0bc      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007700:	4b61      	ldr	r3, [pc, #388]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 8007702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0ee      	beq.n	80076ea <HAL_RCC_OscConfig+0x33a>
 800770c:	e014      	b.n	8007738 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800770e:	f7fd fbab 	bl	8004e68 <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007714:	e00a      	b.n	800772c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007716:	f7fd fba7 	bl	8004e68 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	f241 3288 	movw	r2, #5000	; 0x1388
 8007724:	4293      	cmp	r3, r2
 8007726:	d901      	bls.n	800772c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e0a6      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800772c:	4b56      	ldr	r3, [pc, #344]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 800772e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1ee      	bne.n	8007716 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d105      	bne.n	800774a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800773e:	4b52      	ldr	r3, [pc, #328]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	4a51      	ldr	r2, [pc, #324]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 8007744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007748:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 8092 	beq.w	8007878 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007754:	4b4c      	ldr	r3, [pc, #304]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f003 030c 	and.w	r3, r3, #12
 800775c:	2b08      	cmp	r3, #8
 800775e:	d05c      	beq.n	800781a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d141      	bne.n	80077ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007768:	4b48      	ldr	r3, [pc, #288]	; (800788c <HAL_RCC_OscConfig+0x4dc>)
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800776e:	f7fd fb7b 	bl	8004e68 <HAL_GetTick>
 8007772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007774:	e008      	b.n	8007788 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007776:	f7fd fb77 	bl	8004e68 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	2b02      	cmp	r3, #2
 8007782:	d901      	bls.n	8007788 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e078      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007788:	4b3f      	ldr	r3, [pc, #252]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1f0      	bne.n	8007776 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	69da      	ldr	r2, [r3, #28]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a2:	019b      	lsls	r3, r3, #6
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077aa:	085b      	lsrs	r3, r3, #1
 80077ac:	3b01      	subs	r3, #1
 80077ae:	041b      	lsls	r3, r3, #16
 80077b0:	431a      	orrs	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	061b      	lsls	r3, r3, #24
 80077b8:	4933      	ldr	r1, [pc, #204]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077be:	4b33      	ldr	r3, [pc, #204]	; (800788c <HAL_RCC_OscConfig+0x4dc>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077c4:	f7fd fb50 	bl	8004e68 <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ca:	e008      	b.n	80077de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077cc:	f7fd fb4c 	bl	8004e68 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e04d      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077de:	4b2a      	ldr	r3, [pc, #168]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0f0      	beq.n	80077cc <HAL_RCC_OscConfig+0x41c>
 80077ea:	e045      	b.n	8007878 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077ec:	4b27      	ldr	r3, [pc, #156]	; (800788c <HAL_RCC_OscConfig+0x4dc>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f2:	f7fd fb39 	bl	8004e68 <HAL_GetTick>
 80077f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077f8:	e008      	b.n	800780c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077fa:	f7fd fb35 	bl	8004e68 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e036      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800780c:	4b1e      	ldr	r3, [pc, #120]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f0      	bne.n	80077fa <HAL_RCC_OscConfig+0x44a>
 8007818:	e02e      	b.n	8007878 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e029      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007826:	4b18      	ldr	r3, [pc, #96]	; (8007888 <HAL_RCC_OscConfig+0x4d8>)
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	429a      	cmp	r2, r3
 8007838:	d11c      	bne.n	8007874 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007844:	429a      	cmp	r2, r3
 8007846:	d115      	bne.n	8007874 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800784e:	4013      	ands	r3, r2
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007854:	4293      	cmp	r3, r2
 8007856:	d10d      	bne.n	8007874 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007862:	429a      	cmp	r2, r3
 8007864:	d106      	bne.n	8007874 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007870:	429a      	cmp	r2, r3
 8007872:	d001      	beq.n	8007878 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e000      	b.n	800787a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	40007000 	.word	0x40007000
 8007888:	40023800 	.word	0x40023800
 800788c:	42470060 	.word	0x42470060

08007890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e0cc      	b.n	8007a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078a4:	4b68      	ldr	r3, [pc, #416]	; (8007a48 <HAL_RCC_ClockConfig+0x1b8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d90c      	bls.n	80078cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078b2:	4b65      	ldr	r3, [pc, #404]	; (8007a48 <HAL_RCC_ClockConfig+0x1b8>)
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ba:	4b63      	ldr	r3, [pc, #396]	; (8007a48 <HAL_RCC_ClockConfig+0x1b8>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d001      	beq.n	80078cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0b8      	b.n	8007a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d020      	beq.n	800791a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0304 	and.w	r3, r3, #4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078e4:	4b59      	ldr	r3, [pc, #356]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	4a58      	ldr	r2, [pc, #352]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 80078ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80078ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078fc:	4b53      	ldr	r3, [pc, #332]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	4a52      	ldr	r2, [pc, #328]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 8007902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007908:	4b50      	ldr	r3, [pc, #320]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	494d      	ldr	r1, [pc, #308]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 8007916:	4313      	orrs	r3, r2
 8007918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d044      	beq.n	80079b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d107      	bne.n	800793e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800792e:	4b47      	ldr	r3, [pc, #284]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d119      	bne.n	800796e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e07f      	b.n	8007a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d003      	beq.n	800794e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800794a:	2b03      	cmp	r3, #3
 800794c:	d107      	bne.n	800795e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800794e:	4b3f      	ldr	r3, [pc, #252]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e06f      	b.n	8007a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800795e:	4b3b      	ldr	r3, [pc, #236]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e067      	b.n	8007a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800796e:	4b37      	ldr	r3, [pc, #220]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f023 0203 	bic.w	r2, r3, #3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	4934      	ldr	r1, [pc, #208]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 800797c:	4313      	orrs	r3, r2
 800797e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007980:	f7fd fa72 	bl	8004e68 <HAL_GetTick>
 8007984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007986:	e00a      	b.n	800799e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007988:	f7fd fa6e 	bl	8004e68 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	f241 3288 	movw	r2, #5000	; 0x1388
 8007996:	4293      	cmp	r3, r2
 8007998:	d901      	bls.n	800799e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e04f      	b.n	8007a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800799e:	4b2b      	ldr	r3, [pc, #172]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f003 020c 	and.w	r2, r3, #12
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d1eb      	bne.n	8007988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079b0:	4b25      	ldr	r3, [pc, #148]	; (8007a48 <HAL_RCC_ClockConfig+0x1b8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 030f 	and.w	r3, r3, #15
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d20c      	bcs.n	80079d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079be:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <HAL_RCC_ClockConfig+0x1b8>)
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079c6:	4b20      	ldr	r3, [pc, #128]	; (8007a48 <HAL_RCC_ClockConfig+0x1b8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d001      	beq.n	80079d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e032      	b.n	8007a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079e4:	4b19      	ldr	r3, [pc, #100]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	4916      	ldr	r1, [pc, #88]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0308 	and.w	r3, r3, #8
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a02:	4b12      	ldr	r3, [pc, #72]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	490e      	ldr	r1, [pc, #56]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007a16:	f000 f821 	bl	8007a5c <HAL_RCC_GetSysClockFreq>
 8007a1a:	4601      	mov	r1, r0
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	091b      	lsrs	r3, r3, #4
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	4a0a      	ldr	r2, [pc, #40]	; (8007a50 <HAL_RCC_ClockConfig+0x1c0>)
 8007a28:	5cd3      	ldrb	r3, [r2, r3]
 8007a2a:	fa21 f303 	lsr.w	r3, r1, r3
 8007a2e:	4a09      	ldr	r2, [pc, #36]	; (8007a54 <HAL_RCC_ClockConfig+0x1c4>)
 8007a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007a32:	4b09      	ldr	r3, [pc, #36]	; (8007a58 <HAL_RCC_ClockConfig+0x1c8>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fd f9d2 	bl	8004de0 <HAL_InitTick>

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	40023c00 	.word	0x40023c00
 8007a4c:	40023800 	.word	0x40023800
 8007a50:	0801a1f0 	.word	0x0801a1f0
 8007a54:	2000004c 	.word	0x2000004c
 8007a58:	20000050 	.word	0x20000050

08007a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	2300      	movs	r3, #0
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a72:	4b63      	ldr	r3, [pc, #396]	; (8007c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f003 030c 	and.w	r3, r3, #12
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d007      	beq.n	8007a8e <HAL_RCC_GetSysClockFreq+0x32>
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	d008      	beq.n	8007a94 <HAL_RCC_GetSysClockFreq+0x38>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f040 80b4 	bne.w	8007bf0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a88:	4b5e      	ldr	r3, [pc, #376]	; (8007c04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007a8a:	60bb      	str	r3, [r7, #8]
       break;
 8007a8c:	e0b3      	b.n	8007bf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a8e:	4b5e      	ldr	r3, [pc, #376]	; (8007c08 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007a90:	60bb      	str	r3, [r7, #8]
      break;
 8007a92:	e0b0      	b.n	8007bf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a94:	4b5a      	ldr	r3, [pc, #360]	; (8007c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a9e:	4b58      	ldr	r3, [pc, #352]	; (8007c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d04a      	beq.n	8007b40 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aaa:	4b55      	ldr	r3, [pc, #340]	; (8007c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	099b      	lsrs	r3, r3, #6
 8007ab0:	f04f 0400 	mov.w	r4, #0
 8007ab4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	ea03 0501 	and.w	r5, r3, r1
 8007ac0:	ea04 0602 	and.w	r6, r4, r2
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	4632      	mov	r2, r6
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	f04f 0400 	mov.w	r4, #0
 8007ad0:	0154      	lsls	r4, r2, #5
 8007ad2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007ad6:	014b      	lsls	r3, r1, #5
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4622      	mov	r2, r4
 8007adc:	1b49      	subs	r1, r1, r5
 8007ade:	eb62 0206 	sbc.w	r2, r2, r6
 8007ae2:	f04f 0300 	mov.w	r3, #0
 8007ae6:	f04f 0400 	mov.w	r4, #0
 8007aea:	0194      	lsls	r4, r2, #6
 8007aec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007af0:	018b      	lsls	r3, r1, #6
 8007af2:	1a5b      	subs	r3, r3, r1
 8007af4:	eb64 0402 	sbc.w	r4, r4, r2
 8007af8:	f04f 0100 	mov.w	r1, #0
 8007afc:	f04f 0200 	mov.w	r2, #0
 8007b00:	00e2      	lsls	r2, r4, #3
 8007b02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007b06:	00d9      	lsls	r1, r3, #3
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4614      	mov	r4, r2
 8007b0c:	195b      	adds	r3, r3, r5
 8007b0e:	eb44 0406 	adc.w	r4, r4, r6
 8007b12:	f04f 0100 	mov.w	r1, #0
 8007b16:	f04f 0200 	mov.w	r2, #0
 8007b1a:	0262      	lsls	r2, r4, #9
 8007b1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007b20:	0259      	lsls	r1, r3, #9
 8007b22:	460b      	mov	r3, r1
 8007b24:	4614      	mov	r4, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	4621      	mov	r1, r4
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f04f 0400 	mov.w	r4, #0
 8007b30:	461a      	mov	r2, r3
 8007b32:	4623      	mov	r3, r4
 8007b34:	f7f8 ff9a 	bl	8000a6c <__aeabi_uldivmod>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	e049      	b.n	8007bd4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b40:	4b2f      	ldr	r3, [pc, #188]	; (8007c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	099b      	lsrs	r3, r3, #6
 8007b46:	f04f 0400 	mov.w	r4, #0
 8007b4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	ea03 0501 	and.w	r5, r3, r1
 8007b56:	ea04 0602 	and.w	r6, r4, r2
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	f04f 0300 	mov.w	r3, #0
 8007b62:	f04f 0400 	mov.w	r4, #0
 8007b66:	0154      	lsls	r4, r2, #5
 8007b68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007b6c:	014b      	lsls	r3, r1, #5
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4622      	mov	r2, r4
 8007b72:	1b49      	subs	r1, r1, r5
 8007b74:	eb62 0206 	sbc.w	r2, r2, r6
 8007b78:	f04f 0300 	mov.w	r3, #0
 8007b7c:	f04f 0400 	mov.w	r4, #0
 8007b80:	0194      	lsls	r4, r2, #6
 8007b82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007b86:	018b      	lsls	r3, r1, #6
 8007b88:	1a5b      	subs	r3, r3, r1
 8007b8a:	eb64 0402 	sbc.w	r4, r4, r2
 8007b8e:	f04f 0100 	mov.w	r1, #0
 8007b92:	f04f 0200 	mov.w	r2, #0
 8007b96:	00e2      	lsls	r2, r4, #3
 8007b98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007b9c:	00d9      	lsls	r1, r3, #3
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4614      	mov	r4, r2
 8007ba2:	195b      	adds	r3, r3, r5
 8007ba4:	eb44 0406 	adc.w	r4, r4, r6
 8007ba8:	f04f 0100 	mov.w	r1, #0
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	02a2      	lsls	r2, r4, #10
 8007bb2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007bb6:	0299      	lsls	r1, r3, #10
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4614      	mov	r4, r2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f04f 0400 	mov.w	r4, #0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	4623      	mov	r3, r4
 8007bca:	f7f8 ff4f 	bl	8000a6c <__aeabi_uldivmod>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007bd4:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	0c1b      	lsrs	r3, r3, #16
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	3301      	adds	r3, #1
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bec:	60bb      	str	r3, [r7, #8]
      break;
 8007bee:	e002      	b.n	8007bf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007bf0:	4b04      	ldr	r3, [pc, #16]	; (8007c04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007bf2:	60bb      	str	r3, [r7, #8]
      break;
 8007bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c00:	40023800 	.word	0x40023800
 8007c04:	00f42400 	.word	0x00f42400
 8007c08:	007a1200 	.word	0x007a1200

08007c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c10:	4b03      	ldr	r3, [pc, #12]	; (8007c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c12:	681b      	ldr	r3, [r3, #0]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	2000004c 	.word	0x2000004c

08007c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007c28:	f7ff fff0 	bl	8007c0c <HAL_RCC_GetHCLKFreq>
 8007c2c:	4601      	mov	r1, r0
 8007c2e:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	0a9b      	lsrs	r3, r3, #10
 8007c34:	f003 0307 	and.w	r3, r3, #7
 8007c38:	4a03      	ldr	r2, [pc, #12]	; (8007c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c3a:	5cd3      	ldrb	r3, [r2, r3]
 8007c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	40023800 	.word	0x40023800
 8007c48:	0801a200 	.word	0x0801a200

08007c4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d105      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d038      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c74:	4b68      	ldr	r3, [pc, #416]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c7a:	f7fd f8f5 	bl	8004e68 <HAL_GetTick>
 8007c7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c80:	e008      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007c82:	f7fd f8f1 	bl	8004e68 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d901      	bls.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e0bd      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c94:	4b61      	ldr	r3, [pc, #388]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1f0      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	019b      	lsls	r3, r3, #6
 8007caa:	431a      	orrs	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	071b      	lsls	r3, r3, #28
 8007cb2:	495a      	ldr	r1, [pc, #360]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007cba:	4b57      	ldr	r3, [pc, #348]	; (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cc0:	f7fd f8d2 	bl	8004e68 <HAL_GetTick>
 8007cc4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cc6:	e008      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007cc8:	f7fd f8ce 	bl	8004e68 <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d901      	bls.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e09a      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cda:	4b50      	ldr	r3, [pc, #320]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0f0      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 8083 	beq.w	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	4b48      	ldr	r3, [pc, #288]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfc:	4a47      	ldr	r2, [pc, #284]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d02:	6413      	str	r3, [r2, #64]	; 0x40
 8007d04:	4b45      	ldr	r3, [pc, #276]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007d10:	4b43      	ldr	r3, [pc, #268]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a42      	ldr	r2, [pc, #264]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d1a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d1c:	f7fd f8a4 	bl	8004e68 <HAL_GetTick>
 8007d20:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d22:	e008      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007d24:	f7fd f8a0 	bl	8004e68 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d901      	bls.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e06c      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d36:	4b3a      	ldr	r3, [pc, #232]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0f0      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d42:	4b36      	ldr	r3, [pc, #216]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d4a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d02f      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d028      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d60:	4b2e      	ldr	r3, [pc, #184]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d68:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d6a:	4b2e      	ldr	r3, [pc, #184]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d70:	4b2c      	ldr	r3, [pc, #176]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007d76:	4a29      	ldr	r2, [pc, #164]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d7c:	4b27      	ldr	r3, [pc, #156]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d114      	bne.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007d88:	f7fd f86e 	bl	8004e68 <HAL_GetTick>
 8007d8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d8e:	e00a      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d90:	f7fd f86a 	bl	8004e68 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d901      	bls.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e034      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007da6:	4b1d      	ldr	r3, [pc, #116]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0ee      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dbe:	d10d      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007dc0:	4b16      	ldr	r3, [pc, #88]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd4:	4911      	ldr	r1, [pc, #68]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	608b      	str	r3, [r1, #8]
 8007dda:	e005      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007ddc:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	4a0e      	ldr	r2, [pc, #56]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007de2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007de6:	6093      	str	r3, [r2, #8]
 8007de8:	4b0c      	ldr	r3, [pc, #48]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007df4:	4909      	ldr	r1, [pc, #36]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0308 	and.w	r3, r3, #8
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	7d1a      	ldrb	r2, [r3, #20]
 8007e0a:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007e0c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	42470068 	.word	0x42470068
 8007e1c:	40023800 	.word	0x40023800
 8007e20:	40007000 	.word	0x40007000
 8007e24:	42470e40 	.word	0x42470e40
 8007e28:	424711e0 	.word	0x424711e0

08007e2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e083      	b.n	8007f46 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	7f5b      	ldrb	r3, [r3, #29]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d105      	bne.n	8007e54 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fc fc58 	bl	8004704 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	22ca      	movs	r2, #202	; 0xca
 8007e60:	625a      	str	r2, [r3, #36]	; 0x24
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2253      	movs	r2, #83	; 0x53
 8007e68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 faa8 	bl	80083c0 <RTC_EnterInitMode>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d008      	beq.n	8007e88 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	22ff      	movs	r2, #255	; 0xff
 8007e7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2204      	movs	r2, #4
 8007e82:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e05e      	b.n	8007f46 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6812      	ldr	r2, [r2, #0]
 8007e92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e9a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6899      	ldr	r1, [r3, #8]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	68d2      	ldr	r2, [r2, #12]
 8007ec2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6919      	ldr	r1, [r3, #16]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	041a      	lsls	r2, r3, #16
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ee6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f003 0320 	and.w	r3, r3, #32
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10e      	bne.n	8007f14 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa3a 	bl	8008370 <HAL_RTC_WaitForSynchro>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d008      	beq.n	8007f14 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	22ff      	movs	r2, #255	; 0xff
 8007f08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e018      	b.n	8007f46 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f22:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	699a      	ldr	r2, [r3, #24]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	22ff      	movs	r2, #255	; 0xff
 8007f3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007f44:	2300      	movs	r3, #0
  }
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f4e:	b590      	push	{r4, r7, lr}
 8007f50:	b087      	sub	sp, #28
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	60f8      	str	r0, [r7, #12]
 8007f56:	60b9      	str	r1, [r7, #8]
 8007f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	7f1b      	ldrb	r3, [r3, #28]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d101      	bne.n	8007f6a <HAL_RTC_SetTime+0x1c>
 8007f66:	2302      	movs	r3, #2
 8007f68:	e0aa      	b.n	80080c0 <HAL_RTC_SetTime+0x172>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2202      	movs	r2, #2
 8007f74:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d126      	bne.n	8007fca <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d102      	bne.n	8007f90 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 fa3f 	bl	8008418 <RTC_ByteToBcd2>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	785b      	ldrb	r3, [r3, #1]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fa38 	bl	8008418 <RTC_ByteToBcd2>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007fac:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	789b      	ldrb	r3, [r3, #2]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fa30 	bl	8008418 <RTC_ByteToBcd2>
 8007fb8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007fba:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	78db      	ldrb	r3, [r3, #3]
 8007fc2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	e018      	b.n	8007ffc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d102      	bne.n	8007fde <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	785b      	ldrb	r3, [r3, #1]
 8007fe8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007fea:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007ff0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	78db      	ldrb	r3, [r3, #3]
 8007ff6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	22ca      	movs	r2, #202	; 0xca
 8008002:	625a      	str	r2, [r3, #36]	; 0x24
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2253      	movs	r2, #83	; 0x53
 800800a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 f9d7 	bl	80083c0 <RTC_EnterInitMode>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00b      	beq.n	8008030 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	22ff      	movs	r2, #255	; 0xff
 800801e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2204      	movs	r2, #4
 8008024:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e047      	b.n	80080c0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800803a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800803e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800804e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6899      	ldr	r1, [r3, #8]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	431a      	orrs	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	430a      	orrs	r2, r1
 8008066:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008076:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f003 0320 	and.w	r3, r3, #32
 8008082:	2b00      	cmp	r3, #0
 8008084:	d111      	bne.n	80080aa <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 f972 	bl	8008370 <HAL_RTC_WaitForSynchro>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	22ff      	movs	r2, #255	; 0xff
 8008098:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2204      	movs	r2, #4
 800809e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e00a      	b.n	80080c0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	22ff      	movs	r2, #255	; 0xff
 80080b0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2201      	movs	r2, #1
 80080b6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80080be:	2300      	movs	r3, #0
  }
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	371c      	adds	r7, #28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd90      	pop	{r4, r7, pc}

080080c8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80080fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80080fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	0c1b      	lsrs	r3, r3, #16
 8008104:	b2db      	uxtb	r3, r3
 8008106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800810a:	b2da      	uxtb	r2, r3
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	0a1b      	lsrs	r3, r3, #8
 8008114:	b2db      	uxtb	r3, r3
 8008116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800811a:	b2da      	uxtb	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008128:	b2da      	uxtb	r2, r3
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	0c1b      	lsrs	r3, r3, #16
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008138:	b2da      	uxtb	r2, r3
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d11a      	bne.n	800817a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	4618      	mov	r0, r3
 800814a:	f000 f983 	bl	8008454 <RTC_Bcd2ToByte>
 800814e:	4603      	mov	r3, r0
 8008150:	461a      	mov	r2, r3
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	4618      	mov	r0, r3
 800815c:	f000 f97a 	bl	8008454 <RTC_Bcd2ToByte>
 8008160:	4603      	mov	r3, r0
 8008162:	461a      	mov	r2, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	789b      	ldrb	r3, [r3, #2]
 800816c:	4618      	mov	r0, r3
 800816e:	f000 f971 	bl	8008454 <RTC_Bcd2ToByte>
 8008172:	4603      	mov	r3, r0
 8008174:	461a      	mov	r2, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008184:	b590      	push	{r4, r7, lr}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	7f1b      	ldrb	r3, [r3, #28]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_RTC_SetDate+0x1c>
 800819c:	2302      	movs	r3, #2
 800819e:	e094      	b.n	80082ca <HAL_RTC_SetDate+0x146>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2201      	movs	r2, #1
 80081a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2202      	movs	r2, #2
 80081aa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10e      	bne.n	80081d0 <HAL_RTC_SetDate+0x4c>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	785b      	ldrb	r3, [r3, #1]
 80081b6:	f003 0310 	and.w	r3, r3, #16
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d008      	beq.n	80081d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	f023 0310 	bic.w	r3, r3, #16
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	330a      	adds	r3, #10
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d11c      	bne.n	8008210 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	78db      	ldrb	r3, [r3, #3]
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 f91c 	bl	8008418 <RTC_ByteToBcd2>
 80081e0:	4603      	mov	r3, r0
 80081e2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 f915 	bl	8008418 <RTC_ByteToBcd2>
 80081ee:	4603      	mov	r3, r0
 80081f0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80081f2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	789b      	ldrb	r3, [r3, #2]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 f90d 	bl	8008418 <RTC_ByteToBcd2>
 80081fe:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008200:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800820a:	4313      	orrs	r3, r2
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	e00e      	b.n	800822e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	78db      	ldrb	r3, [r3, #3]
 8008214:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	785b      	ldrb	r3, [r3, #1]
 800821a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800821c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008222:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	22ca      	movs	r2, #202	; 0xca
 8008234:	625a      	str	r2, [r3, #36]	; 0x24
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2253      	movs	r2, #83	; 0x53
 800823c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 f8be 	bl	80083c0 <RTC_EnterInitMode>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	22ff      	movs	r2, #255	; 0xff
 8008250:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2204      	movs	r2, #4
 8008256:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e033      	b.n	80082ca <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800826c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008270:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008280:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f003 0320 	and.w	r3, r3, #32
 800828c:	2b00      	cmp	r3, #0
 800828e:	d111      	bne.n	80082b4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 f86d 	bl	8008370 <HAL_RTC_WaitForSynchro>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00b      	beq.n	80082b4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	22ff      	movs	r2, #255	; 0xff
 80082a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2204      	movs	r2, #4
 80082a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e00a      	b.n	80082ca <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	22ff      	movs	r2, #255	; 0xff
 80082ba:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2201      	movs	r2, #1
 80082c0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80082c8:	2300      	movs	r3, #0
  }
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	371c      	adds	r7, #28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd90      	pop	{r4, r7, pc}

080082d2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b086      	sub	sp, #24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80082ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80082f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	0c1b      	lsrs	r3, r3, #16
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	b2db      	uxtb	r3, r3
 8008302:	f003 031f 	and.w	r3, r3, #31
 8008306:	b2da      	uxtb	r2, r3
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	b2db      	uxtb	r3, r3
 8008310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008314:	b2da      	uxtb	r2, r3
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	0b5b      	lsrs	r3, r3, #13
 800831e:	b2db      	uxtb	r3, r3
 8008320:	f003 0307 	and.w	r3, r3, #7
 8008324:	b2da      	uxtb	r2, r3
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d11a      	bne.n	8008366 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	78db      	ldrb	r3, [r3, #3]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 f88d 	bl	8008454 <RTC_Bcd2ToByte>
 800833a:	4603      	mov	r3, r0
 800833c:	461a      	mov	r2, r3
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	785b      	ldrb	r3, [r3, #1]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 f884 	bl	8008454 <RTC_Bcd2ToByte>
 800834c:	4603      	mov	r3, r0
 800834e:	461a      	mov	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	789b      	ldrb	r3, [r3, #2]
 8008358:	4618      	mov	r0, r3
 800835a:	f000 f87b 	bl	8008454 <RTC_Bcd2ToByte>
 800835e:	4603      	mov	r3, r0
 8008360:	461a      	mov	r2, r3
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800838a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800838c:	f7fc fd6c 	bl	8004e68 <HAL_GetTick>
 8008390:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008392:	e009      	b.n	80083a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008394:	f7fc fd68 	bl	8004e68 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083a2:	d901      	bls.n	80083a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e007      	b.n	80083b8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d0ee      	beq.n	8008394 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d119      	bne.n	800840e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f04f 32ff 	mov.w	r2, #4294967295
 80083e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083e4:	f7fc fd40 	bl	8004e68 <HAL_GetTick>
 80083e8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80083ea:	e009      	b.n	8008400 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80083ec:	f7fc fd3c 	bl	8004e68 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083fa:	d901      	bls.n	8008400 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e007      	b.n	8008410 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0ee      	beq.n	80083ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008426:	e005      	b.n	8008434 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3301      	adds	r3, #1
 800842c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800842e:	79fb      	ldrb	r3, [r7, #7]
 8008430:	3b0a      	subs	r3, #10
 8008432:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008434:	79fb      	ldrb	r3, [r7, #7]
 8008436:	2b09      	cmp	r3, #9
 8008438:	d8f6      	bhi.n	8008428 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	b2db      	uxtb	r3, r3
 800843e:	011b      	lsls	r3, r3, #4
 8008440:	b2da      	uxtb	r2, r3
 8008442:	79fb      	ldrb	r3, [r7, #7]
 8008444:	4313      	orrs	r3, r2
 8008446:	b2db      	uxtb	r3, r3
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	091b      	lsrs	r3, r3, #4
 8008466:	b2db      	uxtb	r3, r3
 8008468:	461a      	mov	r2, r3
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	f003 030f 	and.w	r3, r3, #15
 800847a:	b2da      	uxtb	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	4413      	add	r3, r2
 8008482:	b2db      	uxtb	r3, r3
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e022      	b.n	80084e8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d105      	bne.n	80084ba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7fc f93b 	bl	8004730 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2203      	movs	r2, #3
 80084be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f814 	bl	80084f0 <HAL_SD_InitCard>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e00a      	b.n	80084e8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80084f0:	b5b0      	push	{r4, r5, r7, lr}
 80084f2:	b08e      	sub	sp, #56	; 0x38
 80084f4:	af04      	add	r7, sp, #16
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80084f8:	2300      	movs	r3, #0
 80084fa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008500:	2300      	movs	r3, #0
 8008502:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008508:	2300      	movs	r3, #0
 800850a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800850c:	2376      	movs	r3, #118	; 0x76
 800850e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681d      	ldr	r5, [r3, #0]
 8008514:	466c      	mov	r4, sp
 8008516:	f107 0314 	add.w	r3, r7, #20
 800851a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800851e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008522:	f107 0308 	add.w	r3, r7, #8
 8008526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008528:	4628      	mov	r0, r5
 800852a:	f001 fef9 	bl	800a320 <SDIO_Init>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e031      	b.n	80085a4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008540:	4b1a      	ldr	r3, [pc, #104]	; (80085ac <HAL_SD_InitCard+0xbc>)
 8008542:	2200      	movs	r2, #0
 8008544:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f001 ff31 	bl	800a3b2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008550:	4b16      	ldr	r3, [pc, #88]	; (80085ac <HAL_SD_InitCard+0xbc>)
 8008552:	2201      	movs	r2, #1
 8008554:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f001 f882 	bl	8009660 <SD_PowerON>
 800855c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	431a      	orrs	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e013      	b.n	80085a4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 ffa1 	bl	80094c4 <SD_InitCard>
 8008582:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	431a      	orrs	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e000      	b.n	80085a4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3728      	adds	r7, #40	; 0x28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bdb0      	pop	{r4, r5, r7, pc}
 80085ac:	422580a0 	.word	0x422580a0

080085b0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b092      	sub	sp, #72	; 0x48
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80085be:	f7fc fc53 	bl	8004e68 <HAL_GetTick>
 80085c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d107      	bne.n	80085e2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e1d9      	b.n	8008996 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	f040 81cc 	bne.w	8008988 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	441a      	add	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008600:	429a      	cmp	r2, r3
 8008602:	d907      	bls.n	8008614 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008608:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e1c0      	b.n	8008996 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2203      	movs	r2, #3
 8008618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2200      	movs	r2, #0
 8008622:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008628:	2b01      	cmp	r3, #1
 800862a:	d002      	beq.n	8008632 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	025b      	lsls	r3, r3, #9
 8008630:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800863a:	4618      	mov	r0, r3
 800863c:	f001 ff4c 	bl	800a4d8 <SDMMC_CmdBlockLength>
 8008640:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8008642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00f      	beq.n	8008668 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a9b      	ldr	r2, [pc, #620]	; (80088bc <HAL_SD_ReadBlocks+0x30c>)
 800864e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008656:	431a      	orrs	r2, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e196      	b.n	8008996 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008668:	f04f 33ff 	mov.w	r3, #4294967295
 800866c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	025b      	lsls	r3, r3, #9
 8008672:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008674:	2390      	movs	r3, #144	; 0x90
 8008676:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008678:	2302      	movs	r3, #2
 800867a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800867c:	2300      	movs	r3, #0
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008680:	2301      	movs	r3, #1
 8008682:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f107 0214 	add.w	r2, r7, #20
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f001 fef6 	bl	800a480 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d90a      	bls.n	80086b0 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2202      	movs	r2, #2
 800869e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 ff5a 	bl	800a560 <SDMMC_CmdReadMultiBlock>
 80086ac:	6478      	str	r0, [r7, #68]	; 0x44
 80086ae:	e009      	b.n	80086c4 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 ff2d 	bl	800a51c <SDMMC_CmdReadSingleBlock>
 80086c2:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80086c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d012      	beq.n	80086f0 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a7b      	ldr	r2, [pc, #492]	; (80088bc <HAL_SD_ReadBlocks+0x30c>)
 80086d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d8:	431a      	orrs	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e152      	b.n	8008996 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80086f4:	e061      	b.n	80087ba <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d03c      	beq.n	800877e <HAL_SD_ReadBlocks+0x1ce>
 8008704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d039      	beq.n	800877e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800870a:	2300      	movs	r3, #0
 800870c:	643b      	str	r3, [r7, #64]	; 0x40
 800870e:	e033      	b.n	8008778 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f001 fe2e 	bl	800a376 <SDIO_ReadFIFO>
 800871a:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	b2da      	uxtb	r2, r3
 8008720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008722:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	3301      	adds	r3, #1
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800872a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872c:	3b01      	subs	r3, #1
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008732:	0a1b      	lsrs	r3, r3, #8
 8008734:	b2da      	uxtb	r2, r3
 8008736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008738:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800873a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873c:	3301      	adds	r3, #1
 800873e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008742:	3b01      	subs	r3, #1
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	0c1b      	lsrs	r3, r3, #16
 800874a:	b2da      	uxtb	r2, r3
 800874c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008752:	3301      	adds	r3, #1
 8008754:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008758:	3b01      	subs	r3, #1
 800875a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875e:	0e1b      	lsrs	r3, r3, #24
 8008760:	b2da      	uxtb	r2, r3
 8008762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008764:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008768:	3301      	adds	r3, #1
 800876a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800876c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876e:	3b01      	subs	r3, #1
 8008770:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008774:	3301      	adds	r3, #1
 8008776:	643b      	str	r3, [r7, #64]	; 0x40
 8008778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800877a:	2b07      	cmp	r3, #7
 800877c:	d9c8      	bls.n	8008710 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800877e:	f7fc fb73 	bl	8004e68 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800878a:	429a      	cmp	r2, r3
 800878c:	d902      	bls.n	8008794 <HAL_SD_ReadBlocks+0x1e4>
 800878e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008790:	2b00      	cmp	r3, #0
 8008792:	d112      	bne.n	80087ba <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a48      	ldr	r2, [pc, #288]	; (80088bc <HAL_SD_ReadBlocks+0x30c>)
 800879a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e0ed      	b.n	8008996 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087c0:	f240 332a 	movw	r3, #810	; 0x32a
 80087c4:	4013      	ands	r3, r2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d095      	beq.n	80086f6 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d022      	beq.n	800881e <HAL_SD_ReadBlocks+0x26e>
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d91f      	bls.n	800881e <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d01b      	beq.n	800881e <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 ff1e 	bl	800a62c <SDMMC_CmdStopTransfer>
 80087f0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80087f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d012      	beq.n	800881e <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a2f      	ldr	r2, [pc, #188]	; (80088bc <HAL_SD_ReadBlocks+0x30c>)
 80087fe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008806:	431a      	orrs	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e0bb      	b.n	8008996 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	2b00      	cmp	r3, #0
 800882a:	d012      	beq.n	8008852 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a22      	ldr	r2, [pc, #136]	; (80088bc <HAL_SD_ReadBlocks+0x30c>)
 8008832:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008838:	f043 0208 	orr.w	r2, r3, #8
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e0a1      	b.n	8008996 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d012      	beq.n	8008886 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a15      	ldr	r2, [pc, #84]	; (80088bc <HAL_SD_ReadBlocks+0x30c>)
 8008866:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886c:	f043 0202 	orr.w	r2, r3, #2
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e087      	b.n	8008996 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888c:	f003 0320 	and.w	r3, r3, #32
 8008890:	2b00      	cmp	r3, #0
 8008892:	d064      	beq.n	800895e <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a08      	ldr	r2, [pc, #32]	; (80088bc <HAL_SD_ReadBlocks+0x30c>)
 800889a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a0:	f043 0220 	orr.w	r2, r3, #32
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e06d      	b.n	8008996 <HAL_SD_ReadBlocks+0x3e6>
 80088ba:	bf00      	nop
 80088bc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 fd56 	bl	800a376 <SDIO_ReadFIFO>
 80088ca:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80088cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80088d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d6:	3301      	adds	r3, #1
 80088d8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80088da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088dc:	3b01      	subs	r3, #1
 80088de:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	0a1b      	lsrs	r3, r3, #8
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80088ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ec:	3301      	adds	r3, #1
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80088f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f2:	3b01      	subs	r3, #1
 80088f4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	0c1b      	lsrs	r3, r3, #16
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008902:	3301      	adds	r3, #1
 8008904:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008908:	3b01      	subs	r3, #1
 800890a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890e:	0e1b      	lsrs	r3, r3, #24
 8008910:	b2da      	uxtb	r2, r3
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008918:	3301      	adds	r3, #1
 800891a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800891c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891e:	3b01      	subs	r3, #1
 8008920:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008922:	f7fc faa1 	bl	8004e68 <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800892e:	429a      	cmp	r2, r3
 8008930:	d902      	bls.n	8008938 <HAL_SD_ReadBlocks+0x388>
 8008932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008934:	2b00      	cmp	r3, #0
 8008936:	d112      	bne.n	800895e <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a18      	ldr	r2, [pc, #96]	; (80089a0 <HAL_SD_ReadBlocks+0x3f0>)
 800893e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008944:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e01b      	b.n	8008996 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <HAL_SD_ReadBlocks+0x3c2>
 800896c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1a6      	bne.n	80088c0 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f240 523a 	movw	r2, #1338	; 0x53a
 800897a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	e006      	b.n	8008996 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
  }
}
 8008996:	4618      	mov	r0, r3
 8008998:	3748      	adds	r7, #72	; 0x48
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	004005ff 	.word	0x004005ff

080089a4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b092      	sub	sp, #72	; 0x48
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
 80089b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80089b2:	f7fc fa59 	bl	8004e68 <HAL_GetTick>
 80089b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d107      	bne.n	80089d6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e184      	b.n	8008ce0 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b01      	cmp	r3, #1
 80089e0:	f040 8177 	bne.w	8008cd2 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80089ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	441a      	add	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d907      	bls.n	8008a08 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e16b      	b.n	8008ce0 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2203      	movs	r2, #3
 8008a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2200      	movs	r2, #0
 8008a16:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d002      	beq.n	8008a26 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a22:	025b      	lsls	r3, r3, #9
 8008a24:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 fd52 	bl	800a4d8 <SDMMC_CmdBlockLength>
 8008a34:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00f      	beq.n	8008a5c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a9d      	ldr	r2, [pc, #628]	; (8008cb8 <HAL_SD_WriteBlocks+0x314>)
 8008a42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e141      	b.n	8008ce0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a60:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	025b      	lsls	r3, r3, #9
 8008a66:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008a68:	2390      	movs	r3, #144	; 0x90
 8008a6a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008a74:	2301      	movs	r3, #1
 8008a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f107 0218 	add.w	r2, r7, #24
 8008a80:	4611      	mov	r1, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f001 fcfc 	bl	800a480 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d90a      	bls.n	8008aa4 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2220      	movs	r2, #32
 8008a92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f001 fda4 	bl	800a5e8 <SDMMC_CmdWriteMultiBlock>
 8008aa0:	6478      	str	r0, [r7, #68]	; 0x44
 8008aa2:	e009      	b.n	8008ab8 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2210      	movs	r2, #16
 8008aa8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 fd77 	bl	800a5a4 <SDMMC_CmdWriteSingleBlock>
 8008ab6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d012      	beq.n	8008ae4 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a7d      	ldr	r2, [pc, #500]	; (8008cb8 <HAL_SD_WriteBlocks+0x314>)
 8008ac4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008acc:	431a      	orrs	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e0fd      	b.n	8008ce0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008ae8:	e065      	b.n	8008bb6 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d040      	beq.n	8008b7a <HAL_SD_WriteBlocks+0x1d6>
 8008af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d03d      	beq.n	8008b7a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008afe:	2300      	movs	r3, #0
 8008b00:	643b      	str	r3, [r7, #64]	; 0x40
 8008b02:	e037      	b.n	8008b74 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8008b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b12:	3b01      	subs	r3, #1
 8008b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	021a      	lsls	r2, r3, #8
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b24:	3301      	adds	r3, #1
 8008b26:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	041a      	lsls	r2, r3, #16
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b42:	3b01      	subs	r3, #1
 8008b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	061a      	lsls	r2, r3, #24
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b54:	3301      	adds	r3, #1
 8008b56:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f107 0214 	add.w	r2, r7, #20
 8008b66:	4611      	mov	r1, r2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 fc11 	bl	800a390 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b70:	3301      	adds	r3, #1
 8008b72:	643b      	str	r3, [r7, #64]	; 0x40
 8008b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b76:	2b07      	cmp	r3, #7
 8008b78:	d9c4      	bls.n	8008b04 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008b7a:	f7fc f975 	bl	8004e68 <HAL_GetTick>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d902      	bls.n	8008b90 <HAL_SD_WriteBlocks+0x1ec>
 8008b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d112      	bne.n	8008bb6 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a48      	ldr	r2, [pc, #288]	; (8008cb8 <HAL_SD_WriteBlocks+0x314>)
 8008b96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e094      	b.n	8008ce0 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bbc:	f240 331a 	movw	r3, #794	; 0x31a
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d091      	beq.n	8008aea <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d022      	beq.n	8008c1a <HAL_SD_WriteBlocks+0x276>
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d91f      	bls.n	8008c1a <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d01b      	beq.n	8008c1a <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f001 fd20 	bl	800a62c <SDMMC_CmdStopTransfer>
 8008bec:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d012      	beq.n	8008c1a <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a2f      	ldr	r2, [pc, #188]	; (8008cb8 <HAL_SD_WriteBlocks+0x314>)
 8008bfa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c02:	431a      	orrs	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e062      	b.n	8008ce0 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c20:	f003 0308 	and.w	r3, r3, #8
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d012      	beq.n	8008c4e <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a22      	ldr	r2, [pc, #136]	; (8008cb8 <HAL_SD_WriteBlocks+0x314>)
 8008c2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	f043 0208 	orr.w	r2, r3, #8
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e048      	b.n	8008ce0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d012      	beq.n	8008c82 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a15      	ldr	r2, [pc, #84]	; (8008cb8 <HAL_SD_WriteBlocks+0x314>)
 8008c62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c68:	f043 0202 	orr.w	r2, r3, #2
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e02e      	b.n	8008ce0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c88:	f003 0310 	and.w	r3, r3, #16
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d015      	beq.n	8008cbc <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a08      	ldr	r2, [pc, #32]	; (8008cb8 <HAL_SD_WriteBlocks+0x314>)
 8008c96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9c:	f043 0210 	orr.w	r2, r3, #16
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e014      	b.n	8008ce0 <HAL_SD_WriteBlocks+0x33c>
 8008cb6:	bf00      	nop
 8008cb8:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f240 523a 	movw	r2, #1338	; 0x53a
 8008cc4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e006      	b.n	8008ce0 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
  }
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3748      	adds	r7, #72	; 0x48
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d008      	beq.n	8008d16 <HAL_SD_IRQHandler+0x2e>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f003 0308 	and.w	r3, r3, #8
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fd5c 	bl	80097cc <SD_Read_IT>
 8008d14:	e165      	b.n	8008fe2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 808f 	beq.w	8008e44 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d2e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8008d3e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008d42:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f022 0201 	bic.w	r2, r2, #1
 8008d52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f003 0308 	and.w	r3, r3, #8
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d039      	beq.n	8008dd2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d104      	bne.n	8008d72 <HAL_SD_IRQHandler+0x8a>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d011      	beq.n	8008d96 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f001 fc58 	bl	800a62c <SDMMC_CmdStopTransfer>
 8008d7c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d008      	beq.n	8008d96 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f92f 	bl	8008ff4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d104      	bne.n	8008dc2 <HAL_SD_IRQHandler+0xda>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f003 0302 	and.w	r3, r3, #2
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f003 fb8a 	bl	800c4dc <HAL_SD_RxCpltCallback>
 8008dc8:	e10b      	b.n	8008fe2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f003 fb7c 	bl	800c4c8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008dd0:	e107      	b.n	8008fe2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 8102 	beq.w	8008fe2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f003 0320 	and.w	r3, r3, #32
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d011      	beq.n	8008e0c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f001 fc1d 	bl	800a62c <SDMMC_CmdStopTransfer>
 8008df2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d008      	beq.n	8008e0c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	431a      	orrs	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f8f4 	bl	8008ff4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f040 80e5 	bne.w	8008fe2 <HAL_SD_IRQHandler+0x2fa>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f040 80df 	bne.w	8008fe2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 0208 	bic.w	r2, r2, #8
 8008e32:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f003 fb43 	bl	800c4c8 <HAL_SD_TxCpltCallback>
}
 8008e42:	e0ce      	b.n	8008fe2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d008      	beq.n	8008e64 <HAL_SD_IRQHandler+0x17c>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f003 0308 	and.w	r3, r3, #8
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fd06 	bl	800986e <SD_Write_IT>
 8008e62:	e0be      	b.n	8008fe2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e6a:	f240 233a 	movw	r3, #570	; 0x23a
 8008e6e:	4013      	ands	r3, r2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 80b6 	beq.w	8008fe2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7c:	f003 0302 	and.w	r3, r3, #2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d005      	beq.n	8008e90 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e88:	f043 0202 	orr.w	r2, r3, #2
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e96:	f003 0308 	and.w	r3, r3, #8
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d005      	beq.n	8008eaa <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea2:	f043 0208 	orr.w	r2, r3, #8
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb0:	f003 0320 	and.w	r3, r3, #32
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebc:	f043 0220 	orr.w	r2, r3, #32
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eca:	f003 0310 	and.w	r3, r3, #16
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d005      	beq.n	8008ede <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	f043 0210 	orr.w	r2, r3, #16
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d005      	beq.n	8008ef8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef0:	f043 0208 	orr.w	r2, r3, #8
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f240 723a 	movw	r2, #1850	; 0x73a
 8008f00:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8008f10:	f023 0302 	bic.w	r3, r3, #2
 8008f14:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f001 fb86 	bl	800a62c <SDMMC_CmdStopTransfer>
 8008f20:	4602      	mov	r2, r0
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f26:	431a      	orrs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f003 0308 	and.w	r3, r3, #8
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f855 	bl	8008ff4 <HAL_SD_ErrorCallback>
}
 8008f4a:	e04a      	b.n	8008fe2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d045      	beq.n	8008fe2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f003 0310 	and.w	r3, r3, #16
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d104      	bne.n	8008f6a <HAL_SD_IRQHandler+0x282>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d011      	beq.n	8008f8e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6e:	4a1f      	ldr	r2, [pc, #124]	; (8008fec <HAL_SD_IRQHandler+0x304>)
 8008f70:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fc f8b5 	bl	80050e6 <HAL_DMA_Abort_IT>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d02f      	beq.n	8008fe2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fa2e 	bl	80093e8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008f8c:	e029      	b.n	8008fe2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <HAL_SD_IRQHandler+0x2ba>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d011      	beq.n	8008fc6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	4a12      	ldr	r2, [pc, #72]	; (8008ff0 <HAL_SD_IRQHandler+0x308>)
 8008fa8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fc f899 	bl	80050e6 <HAL_DMA_Abort_IT>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d013      	beq.n	8008fe2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fa49 	bl	8009456 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008fc4:	e00d      	b.n	8008fe2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f003 fa6a 	bl	800c4b4 <HAL_SD_AbortCallback>
}
 8008fe0:	e7ff      	b.n	8008fe2 <HAL_SD_IRQHandler+0x2fa>
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	080093e9 	.word	0x080093e9
 8008ff0:	08009457 	.word	0x08009457

08008ff4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009016:	0f9b      	lsrs	r3, r3, #30
 8009018:	b2da      	uxtb	r2, r3
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009022:	0e9b      	lsrs	r3, r3, #26
 8009024:	b2db      	uxtb	r3, r3
 8009026:	f003 030f 	and.w	r3, r3, #15
 800902a:	b2da      	uxtb	r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009034:	0e1b      	lsrs	r3, r3, #24
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 0303 	and.w	r3, r3, #3
 800903c:	b2da      	uxtb	r2, r3
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009046:	0c1b      	lsrs	r3, r3, #16
 8009048:	b2da      	uxtb	r2, r3
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009052:	0a1b      	lsrs	r3, r3, #8
 8009054:	b2da      	uxtb	r2, r3
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800905e:	b2da      	uxtb	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009068:	0d1b      	lsrs	r3, r3, #20
 800906a:	b29a      	uxth	r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009074:	0c1b      	lsrs	r3, r3, #16
 8009076:	b2db      	uxtb	r3, r3
 8009078:	f003 030f 	and.w	r3, r3, #15
 800907c:	b2da      	uxtb	r2, r3
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009086:	0bdb      	lsrs	r3, r3, #15
 8009088:	b2db      	uxtb	r3, r3
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	b2da      	uxtb	r2, r3
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009098:	0b9b      	lsrs	r3, r3, #14
 800909a:	b2db      	uxtb	r3, r3
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090aa:	0b5b      	lsrs	r3, r3, #13
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090bc:	0b1b      	lsrs	r3, r3, #12
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2200      	movs	r2, #0
 80090ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d163      	bne.n	80091a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090dc:	009a      	lsls	r2, r3, #2
 80090de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80090e2:	4013      	ands	r3, r2
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80090e8:	0f92      	lsrs	r2, r2, #30
 80090ea:	431a      	orrs	r2, r3
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090f4:	0edb      	lsrs	r3, r3, #27
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	f003 0307 	and.w	r3, r3, #7
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009106:	0e1b      	lsrs	r3, r3, #24
 8009108:	b2db      	uxtb	r3, r3
 800910a:	f003 0307 	and.w	r3, r3, #7
 800910e:	b2da      	uxtb	r2, r3
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009118:	0d5b      	lsrs	r3, r3, #21
 800911a:	b2db      	uxtb	r3, r3
 800911c:	f003 0307 	and.w	r3, r3, #7
 8009120:	b2da      	uxtb	r2, r3
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800912a:	0c9b      	lsrs	r3, r3, #18
 800912c:	b2db      	uxtb	r3, r3
 800912e:	f003 0307 	and.w	r3, r3, #7
 8009132:	b2da      	uxtb	r2, r3
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913c:	0bdb      	lsrs	r3, r3, #15
 800913e:	b2db      	uxtb	r3, r3
 8009140:	f003 0307 	and.w	r3, r3, #7
 8009144:	b2da      	uxtb	r2, r3
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	7e1b      	ldrb	r3, [r3, #24]
 8009158:	b2db      	uxtb	r3, r3
 800915a:	f003 0307 	and.w	r3, r3, #7
 800915e:	3302      	adds	r3, #2
 8009160:	2201      	movs	r2, #1
 8009162:	fa02 f303 	lsl.w	r3, r2, r3
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800916a:	fb02 f203 	mul.w	r2, r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	7a1b      	ldrb	r3, [r3, #8]
 8009176:	b2db      	uxtb	r3, r3
 8009178:	f003 030f 	and.w	r3, r3, #15
 800917c:	2201      	movs	r2, #1
 800917e:	409a      	lsls	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800918c:	0a52      	lsrs	r2, r2, #9
 800918e:	fb02 f203 	mul.w	r2, r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800919c:	661a      	str	r2, [r3, #96]	; 0x60
 800919e:	e031      	b.n	8009204 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d11d      	bne.n	80091e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091ac:	041b      	lsls	r3, r3, #16
 80091ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091b6:	0c1b      	lsrs	r3, r3, #16
 80091b8:	431a      	orrs	r2, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	3301      	adds	r3, #1
 80091c4:	029a      	lsls	r2, r3, #10
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	661a      	str	r2, [r3, #96]	; 0x60
 80091e2:	e00f      	b.n	8009204 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a58      	ldr	r2, [pc, #352]	; (800934c <HAL_SD_GetCardCSD+0x344>)
 80091ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e09d      	b.n	8009340 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009208:	0b9b      	lsrs	r3, r3, #14
 800920a:	b2db      	uxtb	r3, r3
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	b2da      	uxtb	r2, r3
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800921a:	09db      	lsrs	r3, r3, #7
 800921c:	b2db      	uxtb	r3, r3
 800921e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009222:	b2da      	uxtb	r2, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800922c:	b2db      	uxtb	r3, r3
 800922e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009232:	b2da      	uxtb	r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923c:	0fdb      	lsrs	r3, r3, #31
 800923e:	b2da      	uxtb	r2, r3
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009248:	0f5b      	lsrs	r3, r3, #29
 800924a:	b2db      	uxtb	r3, r3
 800924c:	f003 0303 	and.w	r3, r3, #3
 8009250:	b2da      	uxtb	r2, r3
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925a:	0e9b      	lsrs	r3, r3, #26
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 0307 	and.w	r3, r3, #7
 8009262:	b2da      	uxtb	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926c:	0d9b      	lsrs	r3, r3, #22
 800926e:	b2db      	uxtb	r3, r3
 8009270:	f003 030f 	and.w	r3, r3, #15
 8009274:	b2da      	uxtb	r2, r3
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927e:	0d5b      	lsrs	r3, r3, #21
 8009280:	b2db      	uxtb	r3, r3
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	b2da      	uxtb	r2, r3
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929a:	0c1b      	lsrs	r3, r3, #16
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ae:	0bdb      	lsrs	r3, r3, #15
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c2:	0b9b      	lsrs	r3, r3, #14
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d6:	0b5b      	lsrs	r3, r3, #13
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ea:	0b1b      	lsrs	r3, r3, #12
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092fe:	0a9b      	lsrs	r3, r3, #10
 8009300:	b2db      	uxtb	r3, r3
 8009302:	f003 0303 	and.w	r3, r3, #3
 8009306:	b2da      	uxtb	r2, r3
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009312:	0a1b      	lsrs	r3, r3, #8
 8009314:	b2db      	uxtb	r3, r3
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	b2da      	uxtb	r2, r3
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009326:	085b      	lsrs	r3, r3, #1
 8009328:	b2db      	uxtb	r3, r3
 800932a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800932e:	b2da      	uxtb	r2, r3
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	004005ff 	.word	0x004005ff

08009350 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80093b4:	f107 030c 	add.w	r3, r7, #12
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f9de 	bl	800977c <SD_SendStatus>
 80093c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d005      	beq.n	80093d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	431a      	orrs	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	0a5b      	lsrs	r3, r3, #9
 80093d8:	f003 030f 	and.w	r3, r3, #15
 80093dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80093de:	693b      	ldr	r3, [r7, #16]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80093fe:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff ffd1 	bl	80093a8 <HAL_SD_GetCardState>
 8009406:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2b06      	cmp	r3, #6
 800941a:	d002      	beq.n	8009422 <SD_DMATxAbort+0x3a>
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2b05      	cmp	r3, #5
 8009420:	d10a      	bne.n	8009438 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f001 f900 	bl	800a62c <SDMMC_CmdStopTransfer>
 800942c:	4602      	mov	r2, r0
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009432:	431a      	orrs	r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	2b00      	cmp	r3, #0
 800943e:	d103      	bne.n	8009448 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f003 f837 	bl	800c4b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009446:	e002      	b.n	800944e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f7ff fdd3 	bl	8008ff4 <HAL_SD_ErrorCallback>
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009462:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f240 523a 	movw	r2, #1338	; 0x53a
 800946c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f7ff ff9a 	bl	80093a8 <HAL_SD_GetCardState>
 8009474:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b06      	cmp	r3, #6
 8009488:	d002      	beq.n	8009490 <SD_DMARxAbort+0x3a>
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2b05      	cmp	r3, #5
 800948e:	d10a      	bne.n	80094a6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4618      	mov	r0, r3
 8009496:	f001 f8c9 	bl	800a62c <SDMMC_CmdStopTransfer>
 800949a:	4602      	mov	r2, r0
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a0:	431a      	orrs	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d103      	bne.n	80094b6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f003 f800 	bl	800c4b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80094b4:	e002      	b.n	80094bc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7ff fd9c 	bl	8008ff4 <HAL_SD_ErrorCallback>
}
 80094bc:	bf00      	nop
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80094c4:	b5b0      	push	{r4, r5, r7, lr}
 80094c6:	b094      	sub	sp, #80	; 0x50
 80094c8:	af04      	add	r7, sp, #16
 80094ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80094cc:	2301      	movs	r3, #1
 80094ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 ff7b 	bl	800a3d0 <SDIO_GetPowerState>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d102      	bne.n	80094e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80094e4:	e0b7      	b.n	8009656 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d02f      	beq.n	800954e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 f961 	bl	800a7ba <SDMMC_CmdSendCID>
 80094f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80094fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <SD_InitCard+0x40>
    {
      return errorstate;
 8009500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009502:	e0a8      	b.n	8009656 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2100      	movs	r1, #0
 800950a:	4618      	mov	r0, r3
 800950c:	f000 ffa5 	bl	800a45a <SDIO_GetResponse>
 8009510:	4602      	mov	r2, r0
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2104      	movs	r1, #4
 800951c:	4618      	mov	r0, r3
 800951e:	f000 ff9c 	bl	800a45a <SDIO_GetResponse>
 8009522:	4602      	mov	r2, r0
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2108      	movs	r1, #8
 800952e:	4618      	mov	r0, r3
 8009530:	f000 ff93 	bl	800a45a <SDIO_GetResponse>
 8009534:	4602      	mov	r2, r0
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	210c      	movs	r1, #12
 8009540:	4618      	mov	r0, r3
 8009542:	f000 ff8a 	bl	800a45a <SDIO_GetResponse>
 8009546:	4602      	mov	r2, r0
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009552:	2b03      	cmp	r3, #3
 8009554:	d00d      	beq.n	8009572 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f107 020e 	add.w	r2, r7, #14
 800955e:	4611      	mov	r1, r2
 8009560:	4618      	mov	r0, r3
 8009562:	f001 f967 	bl	800a834 <SDMMC_CmdSetRelAdd>
 8009566:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <SD_InitCard+0xae>
    {
      return errorstate;
 800956e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009570:	e071      	b.n	8009656 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009576:	2b03      	cmp	r3, #3
 8009578:	d036      	beq.n	80095e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800957a:	89fb      	ldrh	r3, [r7, #14]
 800957c:	461a      	mov	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800958a:	041b      	lsls	r3, r3, #16
 800958c:	4619      	mov	r1, r3
 800958e:	4610      	mov	r0, r2
 8009590:	f001 f931 	bl	800a7f6 <SDMMC_CmdSendCSD>
 8009594:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800959c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800959e:	e05a      	b.n	8009656 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2100      	movs	r1, #0
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 ff57 	bl	800a45a <SDIO_GetResponse>
 80095ac:	4602      	mov	r2, r0
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2104      	movs	r1, #4
 80095b8:	4618      	mov	r0, r3
 80095ba:	f000 ff4e 	bl	800a45a <SDIO_GetResponse>
 80095be:	4602      	mov	r2, r0
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2108      	movs	r1, #8
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 ff45 	bl	800a45a <SDIO_GetResponse>
 80095d0:	4602      	mov	r2, r0
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	210c      	movs	r1, #12
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 ff3c 	bl	800a45a <SDIO_GetResponse>
 80095e2:	4602      	mov	r2, r0
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2104      	movs	r1, #4
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 ff33 	bl	800a45a <SDIO_GetResponse>
 80095f4:	4603      	mov	r3, r0
 80095f6:	0d1a      	lsrs	r2, r3, #20
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80095fc:	f107 0310 	add.w	r3, r7, #16
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7ff fd00 	bl	8009008 <HAL_SD_GetCardCSD>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800960e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009612:	e020      	b.n	8009656 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6819      	ldr	r1, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800961c:	041b      	lsls	r3, r3, #16
 800961e:	f04f 0400 	mov.w	r4, #0
 8009622:	461a      	mov	r2, r3
 8009624:	4623      	mov	r3, r4
 8009626:	4608      	mov	r0, r1
 8009628:	f001 f822 	bl	800a670 <SDMMC_CmdSelDesel>
 800962c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800962e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <SD_InitCard+0x174>
  {
    return errorstate;
 8009634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009636:	e00e      	b.n	8009656 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681d      	ldr	r5, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	466c      	mov	r4, sp
 8009640:	f103 0210 	add.w	r2, r3, #16
 8009644:	ca07      	ldmia	r2, {r0, r1, r2}
 8009646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800964a:	3304      	adds	r3, #4
 800964c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800964e:	4628      	mov	r0, r5
 8009650:	f000 fe66 	bl	800a320 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3740      	adds	r7, #64	; 0x40
 800965a:	46bd      	mov	sp, r7
 800965c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009660 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009668:	2300      	movs	r3, #0
 800966a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800966c:	2300      	movs	r3, #0
 800966e:	617b      	str	r3, [r7, #20]
 8009670:	2300      	movs	r3, #0
 8009672:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4618      	mov	r0, r3
 800967a:	f001 f81c 	bl	800a6b6 <SDMMC_CmdGoIdleState>
 800967e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	e072      	b.n	8009770 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4618      	mov	r0, r3
 8009690:	f001 f82f 	bl	800a6f2 <SDMMC_CmdOperCond>
 8009694:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00d      	beq.n	80096b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f001 f805 	bl	800a6b6 <SDMMC_CmdGoIdleState>
 80096ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d004      	beq.n	80096be <SD_PowerON+0x5e>
    {
      return errorstate;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	e05b      	b.n	8009770 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d137      	bne.n	8009736 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2100      	movs	r1, #0
 80096cc:	4618      	mov	r0, r3
 80096ce:	f001 f82f 	bl	800a730 <SDMMC_CmdAppCommand>
 80096d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d02d      	beq.n	8009736 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096de:	e047      	b.n	8009770 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2100      	movs	r1, #0
 80096e6:	4618      	mov	r0, r3
 80096e8:	f001 f822 	bl	800a730 <SDMMC_CmdAppCommand>
 80096ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <SD_PowerON+0x98>
    {
      return errorstate;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	e03b      	b.n	8009770 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	491e      	ldr	r1, [pc, #120]	; (8009778 <SD_PowerON+0x118>)
 80096fe:	4618      	mov	r0, r3
 8009700:	f001 f838 	bl	800a774 <SDMMC_CmdAppOperCommand>
 8009704:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800970c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009710:	e02e      	b.n	8009770 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2100      	movs	r1, #0
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fe9e 	bl	800a45a <SDIO_GetResponse>
 800971e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	0fdb      	lsrs	r3, r3, #31
 8009724:	2b01      	cmp	r3, #1
 8009726:	d101      	bne.n	800972c <SD_PowerON+0xcc>
 8009728:	2301      	movs	r3, #1
 800972a:	e000      	b.n	800972e <SD_PowerON+0xce>
 800972c:	2300      	movs	r3, #0
 800972e:	613b      	str	r3, [r7, #16]

    count++;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	3301      	adds	r3, #1
 8009734:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800973c:	4293      	cmp	r3, r2
 800973e:	d802      	bhi.n	8009746 <SD_PowerON+0xe6>
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d0cc      	beq.n	80096e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800974c:	4293      	cmp	r3, r2
 800974e:	d902      	bls.n	8009756 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009754:	e00c      	b.n	8009770 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d003      	beq.n	8009768 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	645a      	str	r2, [r3, #68]	; 0x44
 8009766:	e002      	b.n	800976e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	c1100000 	.word	0xc1100000

0800977c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d102      	bne.n	8009792 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800978c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009790:	e018      	b.n	80097c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979a:	041b      	lsls	r3, r3, #16
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	f001 f869 	bl	800a876 <SDMMC_CmdSendStatus>
 80097a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	e009      	b.n	80097c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2100      	movs	r1, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fe4f 	bl	800a45a <SDIO_GetResponse>
 80097bc:	4602      	mov	r2, r0
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097de:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d03f      	beq.n	8009866 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80097e6:	2300      	movs	r3, #0
 80097e8:	617b      	str	r3, [r7, #20]
 80097ea:	e033      	b.n	8009854 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fdc0 	bl	800a376 <SDIO_ReadFIFO>
 80097f6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3301      	adds	r3, #1
 8009804:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	3b01      	subs	r3, #1
 800980a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	b2da      	uxtb	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	3301      	adds	r3, #1
 800981a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	3b01      	subs	r3, #1
 8009820:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	0c1b      	lsrs	r3, r3, #16
 8009826:	b2da      	uxtb	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3301      	adds	r3, #1
 8009830:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	3b01      	subs	r3, #1
 8009836:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	0e1b      	lsrs	r3, r3, #24
 800983c:	b2da      	uxtb	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3301      	adds	r3, #1
 8009846:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	3b01      	subs	r3, #1
 800984c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	3301      	adds	r3, #1
 8009852:	617b      	str	r3, [r7, #20]
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	2b07      	cmp	r3, #7
 8009858:	d9c8      	bls.n	80097ec <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009866:	bf00      	nop
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b086      	sub	sp, #24
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009880:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d043      	beq.n	8009910 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	e037      	b.n	80098fe <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	3301      	adds	r3, #1
 8009898:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	3b01      	subs	r3, #1
 800989e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	021a      	lsls	r2, r3, #8
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3301      	adds	r3, #1
 80098b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	041a      	lsls	r2, r3, #16
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	3301      	adds	r3, #1
 80098c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	061a      	lsls	r2, r3, #24
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60bb      	str	r3, [r7, #8]
      tmp++;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	3301      	adds	r3, #1
 80098e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f107 0208 	add.w	r2, r7, #8
 80098f0:	4611      	mov	r1, r2
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fd4c 	bl	800a390 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	3301      	adds	r3, #1
 80098fc:	617b      	str	r3, [r7, #20]
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2b07      	cmp	r3, #7
 8009902:	d9c4      	bls.n	800988e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009910:	bf00      	nop
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d101      	bne.n	800992a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e056      	b.n	80099d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b00      	cmp	r3, #0
 800993a:	d106      	bne.n	800994a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7fa ff85 	bl	8004854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2202      	movs	r2, #2
 800994e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009960:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	431a      	orrs	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	431a      	orrs	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	431a      	orrs	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	431a      	orrs	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009986:	431a      	orrs	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	431a      	orrs	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	ea42 0103 	orr.w	r1, r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	0c1b      	lsrs	r3, r3, #16
 80099a8:	f003 0104 	and.w	r1, r3, #4
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	430a      	orrs	r2, r1
 80099b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	69da      	ldr	r2, [r3, #28]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	603b      	str	r3, [r7, #0]
 80099ec:	4613      	mov	r3, r2
 80099ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d101      	bne.n	8009a02 <HAL_SPI_Transmit+0x22>
 80099fe:	2302      	movs	r3, #2
 8009a00:	e11e      	b.n	8009c40 <HAL_SPI_Transmit+0x260>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a0a:	f7fb fa2d 	bl	8004e68 <HAL_GetTick>
 8009a0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009a10:	88fb      	ldrh	r3, [r7, #6]
 8009a12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d002      	beq.n	8009a26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009a20:	2302      	movs	r3, #2
 8009a22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a24:	e103      	b.n	8009c2e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d002      	beq.n	8009a32 <HAL_SPI_Transmit+0x52>
 8009a2c:	88fb      	ldrh	r3, [r7, #6]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d102      	bne.n	8009a38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a36:	e0fa      	b.n	8009c2e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2203      	movs	r2, #3
 8009a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	88fa      	ldrh	r2, [r7, #6]
 8009a50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	88fa      	ldrh	r2, [r7, #6]
 8009a56:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a7e:	d107      	bne.n	8009a90 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9a:	2b40      	cmp	r3, #64	; 0x40
 8009a9c:	d007      	beq.n	8009aae <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009aac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ab6:	d14b      	bne.n	8009b50 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <HAL_SPI_Transmit+0xe6>
 8009ac0:	8afb      	ldrh	r3, [r7, #22]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d13e      	bne.n	8009b44 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	881a      	ldrh	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad6:	1c9a      	adds	r2, r3, #2
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009aea:	e02b      	b.n	8009b44 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d112      	bne.n	8009b20 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afe:	881a      	ldrh	r2, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0a:	1c9a      	adds	r2, r3, #2
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	3b01      	subs	r3, #1
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8009b1e:	e011      	b.n	8009b44 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b20:	f7fb f9a2 	bl	8004e68 <HAL_GetTick>
 8009b24:	4602      	mov	r2, r0
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d803      	bhi.n	8009b38 <HAL_SPI_Transmit+0x158>
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b36:	d102      	bne.n	8009b3e <HAL_SPI_Transmit+0x15e>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d102      	bne.n	8009b44 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009b42:	e074      	b.n	8009c2e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1ce      	bne.n	8009aec <HAL_SPI_Transmit+0x10c>
 8009b4e:	e04c      	b.n	8009bea <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <HAL_SPI_Transmit+0x17e>
 8009b58:	8afb      	ldrh	r3, [r7, #22]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d140      	bne.n	8009be0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	330c      	adds	r3, #12
 8009b68:	7812      	ldrb	r2, [r2, #0]
 8009b6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009b84:	e02c      	b.n	8009be0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d113      	bne.n	8009bbc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	330c      	adds	r3, #12
 8009b9e:	7812      	ldrb	r2, [r2, #0]
 8009ba0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8009bba:	e011      	b.n	8009be0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bbc:	f7fb f954 	bl	8004e68 <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d803      	bhi.n	8009bd4 <HAL_SPI_Transmit+0x1f4>
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd2:	d102      	bne.n	8009bda <HAL_SPI_Transmit+0x1fa>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d102      	bne.n	8009be0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009bde:	e026      	b.n	8009c2e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1cd      	bne.n	8009b86 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bea:	69ba      	ldr	r2, [r7, #24]
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 fb54 	bl	800a29c <SPI_EndRxTxTransaction>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d002      	beq.n	8009c00 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2220      	movs	r2, #32
 8009bfe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10a      	bne.n	8009c1e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c08:	2300      	movs	r3, #0
 8009c0a:	613b      	str	r3, [r7, #16]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	613b      	str	r3, [r7, #16]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	613b      	str	r3, [r7, #16]
 8009c1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	77fb      	strb	r3, [r7, #31]
 8009c2a:	e000      	b.n	8009c2e <HAL_SPI_Transmit+0x24e>
  }

error:
 8009c2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3720      	adds	r7, #32
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08c      	sub	sp, #48	; 0x30
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c56:	2301      	movs	r3, #1
 8009c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d101      	bne.n	8009c6e <HAL_SPI_TransmitReceive+0x26>
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	e18a      	b.n	8009f84 <HAL_SPI_TransmitReceive+0x33c>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c76:	f7fb f8f7 	bl	8004e68 <HAL_GetTick>
 8009c7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009c8c:	887b      	ldrh	r3, [r7, #2]
 8009c8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d00f      	beq.n	8009cb8 <HAL_SPI_TransmitReceive+0x70>
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c9e:	d107      	bne.n	8009cb0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d103      	bne.n	8009cb0 <HAL_SPI_TransmitReceive+0x68>
 8009ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	d003      	beq.n	8009cb8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009cb6:	e15b      	b.n	8009f70 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <HAL_SPI_TransmitReceive+0x82>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <HAL_SPI_TransmitReceive+0x82>
 8009cc4:	887b      	ldrh	r3, [r7, #2]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d103      	bne.n	8009cd2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009cd0:	e14e      	b.n	8009f70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b04      	cmp	r3, #4
 8009cdc:	d003      	beq.n	8009ce6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2205      	movs	r2, #5
 8009ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	887a      	ldrh	r2, [r7, #2]
 8009cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	887a      	ldrh	r2, [r7, #2]
 8009cfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	887a      	ldrh	r2, [r7, #2]
 8009d08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	887a      	ldrh	r2, [r7, #2]
 8009d0e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d26:	2b40      	cmp	r3, #64	; 0x40
 8009d28:	d007      	beq.n	8009d3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d42:	d178      	bne.n	8009e36 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <HAL_SPI_TransmitReceive+0x10a>
 8009d4c:	8b7b      	ldrh	r3, [r7, #26]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d166      	bne.n	8009e20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d56:	881a      	ldrh	r2, [r3, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d62:	1c9a      	adds	r2, r3, #2
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d76:	e053      	b.n	8009e20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	d11b      	bne.n	8009dbe <HAL_SPI_TransmitReceive+0x176>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d016      	beq.n	8009dbe <HAL_SPI_TransmitReceive+0x176>
 8009d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d113      	bne.n	8009dbe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9a:	881a      	ldrh	r2, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da6:	1c9a      	adds	r2, r3, #2
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	3b01      	subs	r3, #1
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d119      	bne.n	8009e00 <HAL_SPI_TransmitReceive+0x1b8>
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d014      	beq.n	8009e00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68da      	ldr	r2, [r3, #12]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de0:	b292      	uxth	r2, r2
 8009de2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de8:	1c9a      	adds	r2, r3, #2
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	3b01      	subs	r3, #1
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e00:	f7fb f832 	bl	8004e68 <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d807      	bhi.n	8009e20 <HAL_SPI_TransmitReceive+0x1d8>
 8009e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e16:	d003      	beq.n	8009e20 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009e1e:	e0a7      	b.n	8009f70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1a6      	bne.n	8009d78 <HAL_SPI_TransmitReceive+0x130>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1a1      	bne.n	8009d78 <HAL_SPI_TransmitReceive+0x130>
 8009e34:	e07c      	b.n	8009f30 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d002      	beq.n	8009e44 <HAL_SPI_TransmitReceive+0x1fc>
 8009e3e:	8b7b      	ldrh	r3, [r7, #26]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d16b      	bne.n	8009f1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	330c      	adds	r3, #12
 8009e4e:	7812      	ldrb	r2, [r2, #0]
 8009e50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	3b01      	subs	r3, #1
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e6a:	e057      	b.n	8009f1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	f003 0302 	and.w	r3, r3, #2
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d11c      	bne.n	8009eb4 <HAL_SPI_TransmitReceive+0x26c>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d017      	beq.n	8009eb4 <HAL_SPI_TransmitReceive+0x26c>
 8009e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d114      	bne.n	8009eb4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	330c      	adds	r3, #12
 8009e94:	7812      	ldrb	r2, [r2, #0]
 8009e96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d119      	bne.n	8009ef6 <HAL_SPI_TransmitReceive+0x2ae>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d014      	beq.n	8009ef6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68da      	ldr	r2, [r3, #12]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed6:	b2d2      	uxtb	r2, r2
 8009ed8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ede:	1c5a      	adds	r2, r3, #1
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	3b01      	subs	r3, #1
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009ef6:	f7fa ffb7 	bl	8004e68 <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d803      	bhi.n	8009f0e <HAL_SPI_TransmitReceive+0x2c6>
 8009f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0c:	d102      	bne.n	8009f14 <HAL_SPI_TransmitReceive+0x2cc>
 8009f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d103      	bne.n	8009f1c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009f1a:	e029      	b.n	8009f70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1a2      	bne.n	8009e6c <HAL_SPI_TransmitReceive+0x224>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d19d      	bne.n	8009e6c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 f9b1 	bl	800a29c <SPI_EndRxTxTransaction>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d006      	beq.n	8009f4e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2220      	movs	r2, #32
 8009f4a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009f4c:	e010      	b.n	8009f70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10b      	bne.n	8009f6e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f56:	2300      	movs	r3, #0
 8009f58:	617b      	str	r3, [r7, #20]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	617b      	str	r3, [r7, #20]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	617b      	str	r3, [r7, #20]
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	e000      	b.n	8009f70 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009f6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3730      	adds	r7, #48	; 0x30
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b088      	sub	sp, #32
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	099b      	lsrs	r3, r3, #6
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10f      	bne.n	8009fd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	099b      	lsrs	r3, r3, #6
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d004      	beq.n	8009fd0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	4798      	blx	r3
    return;
 8009fce:	e0d8      	b.n	800a182 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	085b      	lsrs	r3, r3, #1
 8009fd4:	f003 0301 	and.w	r3, r3, #1
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00a      	beq.n	8009ff2 <HAL_SPI_IRQHandler+0x66>
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	09db      	lsrs	r3, r3, #7
 8009fe0:	f003 0301 	and.w	r3, r3, #1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d004      	beq.n	8009ff2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	4798      	blx	r3
    return;
 8009ff0:	e0c7      	b.n	800a182 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	095b      	lsrs	r3, r3, #5
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10c      	bne.n	800a018 <HAL_SPI_IRQHandler+0x8c>
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	099b      	lsrs	r3, r3, #6
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	d106      	bne.n	800a018 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	0a1b      	lsrs	r3, r3, #8
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 80b5 	beq.w	800a182 <HAL_SPI_IRQHandler+0x1f6>
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	095b      	lsrs	r3, r3, #5
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 80ae 	beq.w	800a182 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	099b      	lsrs	r3, r3, #6
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d023      	beq.n	800a07a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d011      	beq.n	800a062 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a042:	f043 0204 	orr.w	r2, r3, #4
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a04a:	2300      	movs	r3, #0
 800a04c:	617b      	str	r3, [r7, #20]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	617b      	str	r3, [r7, #20]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	617b      	str	r3, [r7, #20]
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	e00b      	b.n	800a07a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a062:	2300      	movs	r3, #0
 800a064:	613b      	str	r3, [r7, #16]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	613b      	str	r3, [r7, #16]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	613b      	str	r3, [r7, #16]
 800a076:	693b      	ldr	r3, [r7, #16]
        return;
 800a078:	e083      	b.n	800a182 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	095b      	lsrs	r3, r3, #5
 800a07e:	f003 0301 	and.w	r3, r3, #1
 800a082:	2b00      	cmp	r3, #0
 800a084:	d014      	beq.n	800a0b0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a08a:	f043 0201 	orr.w	r2, r3, #1
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a092:	2300      	movs	r3, #0
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	0a1b      	lsrs	r3, r3, #8
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00c      	beq.n	800a0d6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c0:	f043 0208 	orr.w	r2, r3, #8
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60bb      	str	r3, [r7, #8]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	60bb      	str	r3, [r7, #8]
 800a0d4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d050      	beq.n	800a180 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0ec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	f003 0302 	and.w	r3, r3, #2
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d104      	bne.n	800a10a <HAL_SPI_IRQHandler+0x17e>
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	2b00      	cmp	r3, #0
 800a108:	d034      	beq.n	800a174 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f022 0203 	bic.w	r2, r2, #3
 800a118:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d011      	beq.n	800a146 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a126:	4a18      	ldr	r2, [pc, #96]	; (800a188 <HAL_SPI_IRQHandler+0x1fc>)
 800a128:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fa ffd9 	bl	80050e6 <HAL_DMA_Abort_IT>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d005      	beq.n	800a146 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a13e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d016      	beq.n	800a17c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a152:	4a0d      	ldr	r2, [pc, #52]	; (800a188 <HAL_SPI_IRQHandler+0x1fc>)
 800a154:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fa ffc3 	bl	80050e6 <HAL_DMA_Abort_IT>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00a      	beq.n	800a17c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a16a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a172:	e003      	b.n	800a17c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f809 	bl	800a18c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a17a:	e000      	b.n	800a17e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a17c:	bf00      	nop
    return;
 800a17e:	bf00      	nop
 800a180:	bf00      	nop
  }
}
 800a182:	3720      	adds	r7, #32
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	0800a1a1 	.word	0x0800a1a1

0800a18c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f7ff ffe6 	bl	800a18c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a1c0:	bf00      	nop
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1d8:	e04c      	b.n	800a274 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e0:	d048      	beq.n	800a274 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a1e2:	f7fa fe41 	bl	8004e68 <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d902      	bls.n	800a1f8 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d13d      	bne.n	800a274 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a206:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a210:	d111      	bne.n	800a236 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a21a:	d004      	beq.n	800a226 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a224:	d107      	bne.n	800a236 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a234:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a23e:	d10f      	bne.n	800a260 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a24e:	601a      	str	r2, [r3, #0]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a25e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a270:	2303      	movs	r3, #3
 800a272:	e00f      	b.n	800a294 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689a      	ldr	r2, [r3, #8]
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	4013      	ands	r3, r2
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	429a      	cmp	r2, r3
 800a282:	bf0c      	ite	eq
 800a284:	2301      	moveq	r3, #1
 800a286:	2300      	movne	r3, #0
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	461a      	mov	r2, r3
 800a28c:	79fb      	ldrb	r3, [r7, #7]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d1a3      	bne.n	800a1da <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b088      	sub	sp, #32
 800a2a0:	af02      	add	r7, sp, #8
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a2a8:	4b1b      	ldr	r3, [pc, #108]	; (800a318 <SPI_EndRxTxTransaction+0x7c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a1b      	ldr	r2, [pc, #108]	; (800a31c <SPI_EndRxTxTransaction+0x80>)
 800a2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b2:	0d5b      	lsrs	r3, r3, #21
 800a2b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2b8:	fb02 f303 	mul.w	r3, r2, r3
 800a2bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2c6:	d112      	bne.n	800a2ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	2180      	movs	r1, #128	; 0x80
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f7ff ff78 	bl	800a1c8 <SPI_WaitFlagStateUntilTimeout>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d016      	beq.n	800a30c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e2:	f043 0220 	orr.w	r2, r3, #32
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	e00f      	b.n	800a30e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00a      	beq.n	800a30a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a304:	2b80      	cmp	r3, #128	; 0x80
 800a306:	d0f2      	beq.n	800a2ee <SPI_EndRxTxTransaction+0x52>
 800a308:	e000      	b.n	800a30c <SPI_EndRxTxTransaction+0x70>
        break;
 800a30a:	bf00      	nop
  }

  return HAL_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	2000004c 	.word	0x2000004c
 800a31c:	165e9f81 	.word	0x165e9f81

0800a320 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a320:	b084      	sub	sp, #16
 800a322:	b480      	push	{r7}
 800a324:	b085      	sub	sp, #20
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	f107 001c 	add.w	r0, r7, #28
 800a32e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a336:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a338:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a33a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a33e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a340:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a342:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a346:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a34a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	4313      	orrs	r3, r2
 800a350:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a35a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	431a      	orrs	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	b004      	add	sp, #16
 800a374:	4770      	bx	lr

0800a376 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a384:	4618      	mov	r0, r3
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2203      	movs	r2, #3
 800a3be:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a3c0:	2002      	movs	r0, #2
 800a3c2:	f7fa fd5d 	bl	8004e80 <HAL_Delay>
  
  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0303 	and.w	r3, r3, #3
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a40a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a410:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a416:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a426:	f023 030f 	bic.w	r3, r3, #15
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	431a      	orrs	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	b2db      	uxtb	r3, r3
}
 800a44e:	4618      	mov	r0, r3
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b085      	sub	sp, #20
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	3314      	adds	r3, #20
 800a468:	461a      	mov	r2, r3
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	4413      	add	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
}  
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	685a      	ldr	r2, [r3, #4]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a4a6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a4ac:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a4b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4be:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0

}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b088      	sub	sp, #32
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a4e6:	2310      	movs	r3, #16
 800a4e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4ea:	2340      	movs	r3, #64	; 0x40
 800a4ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4f8:	f107 0308 	add.w	r3, r7, #8
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7ff ff74 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a504:	f241 3288 	movw	r2, #5000	; 0x1388
 800a508:	2110      	movs	r1, #16
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f9fe 	bl	800a90c <SDMMC_GetCmdResp1>
 800a510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a512:	69fb      	ldr	r3, [r7, #28]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3720      	adds	r7, #32
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a52a:	2311      	movs	r3, #17
 800a52c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a52e:	2340      	movs	r3, #64	; 0x40
 800a530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a532:	2300      	movs	r3, #0
 800a534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a53a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a53c:	f107 0308 	add.w	r3, r7, #8
 800a540:	4619      	mov	r1, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7ff ff52 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a548:	f241 3288 	movw	r2, #5000	; 0x1388
 800a54c:	2111      	movs	r1, #17
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f9dc 	bl	800a90c <SDMMC_GetCmdResp1>
 800a554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a556:	69fb      	ldr	r3, [r7, #28]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3720      	adds	r7, #32
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b088      	sub	sp, #32
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a56e:	2312      	movs	r3, #18
 800a570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a572:	2340      	movs	r3, #64	; 0x40
 800a574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a576:	2300      	movs	r3, #0
 800a578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a57a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a57e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a580:	f107 0308 	add.w	r3, r7, #8
 800a584:	4619      	mov	r1, r3
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff ff30 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a590:	2112      	movs	r1, #18
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f9ba 	bl	800a90c <SDMMC_GetCmdResp1>
 800a598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a59a:	69fb      	ldr	r3, [r7, #28]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3720      	adds	r7, #32
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a5b2:	2318      	movs	r3, #24
 800a5b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5b6:	2340      	movs	r3, #64	; 0x40
 800a5b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5c4:	f107 0308 	add.w	r3, r7, #8
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7ff ff0e 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a5d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d4:	2118      	movs	r1, #24
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f998 	bl	800a90c <SDMMC_GetCmdResp1>
 800a5dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5de:	69fb      	ldr	r3, [r7, #28]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3720      	adds	r7, #32
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a5f6:	2319      	movs	r3, #25
 800a5f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5fa:	2340      	movs	r3, #64	; 0x40
 800a5fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5fe:	2300      	movs	r3, #0
 800a600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a606:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a608:	f107 0308 	add.w	r3, r7, #8
 800a60c:	4619      	mov	r1, r3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff feec 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a614:	f241 3288 	movw	r2, #5000	; 0x1388
 800a618:	2119      	movs	r1, #25
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f976 	bl	800a90c <SDMMC_GetCmdResp1>
 800a620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a622:	69fb      	ldr	r3, [r7, #28]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3720      	adds	r7, #32
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a634:	2300      	movs	r3, #0
 800a636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a638:	230c      	movs	r3, #12
 800a63a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a63c:	2340      	movs	r3, #64	; 0x40
 800a63e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a640:	2300      	movs	r3, #0
 800a642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a648:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a64a:	f107 0308 	add.w	r3, r7, #8
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7ff fecb 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a656:	4a05      	ldr	r2, [pc, #20]	; (800a66c <SDMMC_CmdStopTransfer+0x40>)
 800a658:	210c      	movs	r1, #12
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f956 	bl	800a90c <SDMMC_GetCmdResp1>
 800a660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a662:	69fb      	ldr	r3, [r7, #28]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3720      	adds	r7, #32
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	05f5e100 	.word	0x05f5e100

0800a670 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08a      	sub	sp, #40	; 0x28
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a680:	2307      	movs	r3, #7
 800a682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a684:	2340      	movs	r3, #64	; 0x40
 800a686:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a688:	2300      	movs	r3, #0
 800a68a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a68c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a690:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a692:	f107 0310 	add.w	r3, r7, #16
 800a696:	4619      	mov	r1, r3
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f7ff fea7 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a69e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a2:	2107      	movs	r1, #7
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f931 	bl	800a90c <SDMMC_GetCmdResp1>
 800a6aa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3728      	adds	r7, #40	; 0x28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b088      	sub	sp, #32
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6d4:	f107 0308 	add.w	r3, r7, #8
 800a6d8:	4619      	mov	r1, r3
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7ff fe86 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f8eb 	bl	800a8bc <SDMMC_GetCmdError>
 800a6e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6e8:	69fb      	ldr	r3, [r7, #28]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3720      	adds	r7, #32
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b088      	sub	sp, #32
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a6fa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a6fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a700:	2308      	movs	r3, #8
 800a702:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a704:	2340      	movs	r3, #64	; 0x40
 800a706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a708:	2300      	movs	r3, #0
 800a70a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a70c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a710:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a712:	f107 0308 	add.w	r3, r7, #8
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f7ff fe67 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fad4 	bl	800accc <SDMMC_GetCmdResp7>
 800a724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a726:	69fb      	ldr	r3, [r7, #28]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3720      	adds	r7, #32
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a73e:	2337      	movs	r3, #55	; 0x37
 800a740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a742:	2340      	movs	r3, #64	; 0x40
 800a744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a746:	2300      	movs	r3, #0
 800a748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a74a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a74e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a750:	f107 0308 	add.w	r3, r7, #8
 800a754:	4619      	mov	r1, r3
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f7ff fe48 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a760:	2137      	movs	r1, #55	; 0x37
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f8d2 	bl	800a90c <SDMMC_GetCmdResp1>
 800a768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a76a:	69fb      	ldr	r3, [r7, #28]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3720      	adds	r7, #32
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b088      	sub	sp, #32
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a78a:	2329      	movs	r3, #41	; 0x29
 800a78c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a78e:	2340      	movs	r3, #64	; 0x40
 800a790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a792:	2300      	movs	r3, #0
 800a794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a79a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a79c:	f107 0308 	add.w	r3, r7, #8
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7ff fe22 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f9e1 	bl	800ab70 <SDMMC_GetCmdResp3>
 800a7ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7b0:	69fb      	ldr	r3, [r7, #28]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3720      	adds	r7, #32
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b088      	sub	sp, #32
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a7ca:	23c0      	movs	r3, #192	; 0xc0
 800a7cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7d8:	f107 0308 	add.w	r3, r7, #8
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff fe04 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f97d 	bl	800aae4 <SDMMC_GetCmdResp2>
 800a7ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ec:	69fb      	ldr	r3, [r7, #28]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3720      	adds	r7, #32
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b088      	sub	sp, #32
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a804:	2309      	movs	r3, #9
 800a806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a808:	23c0      	movs	r3, #192	; 0xc0
 800a80a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a80c:	2300      	movs	r3, #0
 800a80e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a814:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a816:	f107 0308 	add.w	r3, r7, #8
 800a81a:	4619      	mov	r1, r3
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7ff fde5 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f95e 	bl	800aae4 <SDMMC_GetCmdResp2>
 800a828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a82a:	69fb      	ldr	r3, [r7, #28]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3720      	adds	r7, #32
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b088      	sub	sp, #32
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a83e:	2300      	movs	r3, #0
 800a840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a842:	2303      	movs	r3, #3
 800a844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a846:	2340      	movs	r3, #64	; 0x40
 800a848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a84a:	2300      	movs	r3, #0
 800a84c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a84e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a854:	f107 0308 	add.w	r3, r7, #8
 800a858:	4619      	mov	r1, r3
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7ff fdc6 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	2103      	movs	r1, #3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 f9bd 	bl	800abe4 <SDMMC_GetCmdResp6>
 800a86a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a86c:	69fb      	ldr	r3, [r7, #28]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3720      	adds	r7, #32
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b088      	sub	sp, #32
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
 800a87e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a884:	230d      	movs	r3, #13
 800a886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a888:	2340      	movs	r3, #64	; 0x40
 800a88a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a88c:	2300      	movs	r3, #0
 800a88e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a894:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a896:	f107 0308 	add.w	r3, r7, #8
 800a89a:	4619      	mov	r1, r3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7ff fda5 	bl	800a3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a8a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8a6:	210d      	movs	r1, #13
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f82f 	bl	800a90c <SDMMC_GetCmdResp1>
 800a8ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8b0:	69fb      	ldr	r3, [r7, #28]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3720      	adds	r7, #32
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
	...

0800a8bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a8bc:	b490      	push	{r4, r7}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a8c4:	4b0f      	ldr	r3, [pc, #60]	; (800a904 <SDMMC_GetCmdError+0x48>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a0f      	ldr	r2, [pc, #60]	; (800a908 <SDMMC_GetCmdError+0x4c>)
 800a8ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ce:	0a5b      	lsrs	r3, r3, #9
 800a8d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a8d8:	4623      	mov	r3, r4
 800a8da:	1e5c      	subs	r4, r3, #1
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d102      	bne.n	800a8e6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8e4:	e009      	b.n	800a8fa <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d0f2      	beq.n	800a8d8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	22c5      	movs	r2, #197	; 0xc5
 800a8f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bc90      	pop	{r4, r7}
 800a902:	4770      	bx	lr
 800a904:	2000004c 	.word	0x2000004c
 800a908:	10624dd3 	.word	0x10624dd3

0800a90c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a90c:	b590      	push	{r4, r7, lr}
 800a90e:	b087      	sub	sp, #28
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	460b      	mov	r3, r1
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a91a:	4b6f      	ldr	r3, [pc, #444]	; (800aad8 <SDMMC_GetCmdResp1+0x1cc>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a6f      	ldr	r2, [pc, #444]	; (800aadc <SDMMC_GetCmdResp1+0x1d0>)
 800a920:	fba2 2303 	umull	r2, r3, r2, r3
 800a924:	0a5b      	lsrs	r3, r3, #9
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a92c:	4623      	mov	r3, r4
 800a92e:	1e5c      	subs	r4, r3, #1
 800a930:	2b00      	cmp	r3, #0
 800a932:	d102      	bne.n	800a93a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a934:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a938:	e0c9      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0f0      	beq.n	800a92c <SDMMC_GetCmdResp1+0x20>
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1eb      	bne.n	800a92c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d004      	beq.n	800a96a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2204      	movs	r2, #4
 800a964:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a966:	2304      	movs	r3, #4
 800a968:	e0b1      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d004      	beq.n	800a980 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2201      	movs	r2, #1
 800a97a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e0a6      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	22c5      	movs	r2, #197	; 0xc5
 800a984:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff fd5a 	bl	800a440 <SDIO_GetCommandResponse>
 800a98c:	4603      	mov	r3, r0
 800a98e:	461a      	mov	r2, r3
 800a990:	7afb      	ldrb	r3, [r7, #11]
 800a992:	4293      	cmp	r3, r2
 800a994:	d001      	beq.n	800a99a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a996:	2301      	movs	r3, #1
 800a998:	e099      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a99a:	2100      	movs	r1, #0
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7ff fd5c 	bl	800a45a <SDIO_GetResponse>
 800a9a2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	4b4e      	ldr	r3, [pc, #312]	; (800aae0 <SDMMC_GetCmdResp1+0x1d4>)
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	e08d      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	da02      	bge.n	800a9be <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a9b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a9bc:	e087      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d001      	beq.n	800a9cc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a9c8:	2340      	movs	r3, #64	; 0x40
 800a9ca:	e080      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d001      	beq.n	800a9da <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a9d6:	2380      	movs	r3, #128	; 0x80
 800a9d8:	e079      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a9e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9e8:	e071      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d002      	beq.n	800a9fa <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a9f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9f8:	e069      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d002      	beq.n	800aa0a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aa04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa08:	e061      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d002      	beq.n	800aa1a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aa14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa18:	e059      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d002      	beq.n	800aa2a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aa24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa28:	e051      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aa34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa38:	e049      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aa44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa48:	e041      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d002      	beq.n	800aa5a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800aa54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa58:	e039      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aa64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aa68:	e031      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aa74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aa78:	e029      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d002      	beq.n	800aa8a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aa84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa88:	e021      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aa94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aa98:	e019      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aaa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aaa8:	e011      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d002      	beq.n	800aaba <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aab4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aab8:	e009      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	f003 0308 	and.w	r3, r3, #8
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aac4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aac8:	e001      	b.n	800aace <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aaca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aace:	4618      	mov	r0, r3
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd90      	pop	{r4, r7, pc}
 800aad6:	bf00      	nop
 800aad8:	2000004c 	.word	0x2000004c
 800aadc:	10624dd3 	.word	0x10624dd3
 800aae0:	fdffe008 	.word	0xfdffe008

0800aae4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800aae4:	b490      	push	{r4, r7}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aaec:	4b1e      	ldr	r3, [pc, #120]	; (800ab68 <SDMMC_GetCmdResp2+0x84>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a1e      	ldr	r2, [pc, #120]	; (800ab6c <SDMMC_GetCmdResp2+0x88>)
 800aaf2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf6:	0a5b      	lsrs	r3, r3, #9
 800aaf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aafc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ab00:	4623      	mov	r3, r4
 800ab02:	1e5c      	subs	r4, r3, #1
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d102      	bne.n	800ab0e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab0c:	e026      	b.n	800ab5c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab12:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0f0      	beq.n	800ab00 <SDMMC_GetCmdResp2+0x1c>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1eb      	bne.n	800ab00 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d004      	beq.n	800ab3e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2204      	movs	r2, #4
 800ab38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab3a:	2304      	movs	r3, #4
 800ab3c:	e00e      	b.n	800ab5c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d004      	beq.n	800ab54 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e003      	b.n	800ab5c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	22c5      	movs	r2, #197	; 0xc5
 800ab58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bc90      	pop	{r4, r7}
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	2000004c 	.word	0x2000004c
 800ab6c:	10624dd3 	.word	0x10624dd3

0800ab70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ab70:	b490      	push	{r4, r7}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab78:	4b18      	ldr	r3, [pc, #96]	; (800abdc <SDMMC_GetCmdResp3+0x6c>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a18      	ldr	r2, [pc, #96]	; (800abe0 <SDMMC_GetCmdResp3+0x70>)
 800ab7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab82:	0a5b      	lsrs	r3, r3, #9
 800ab84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ab8c:	4623      	mov	r3, r4
 800ab8e:	1e5c      	subs	r4, r3, #1
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d102      	bne.n	800ab9a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab98:	e01b      	b.n	800abd2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab9e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d0f0      	beq.n	800ab8c <SDMMC_GetCmdResp3+0x1c>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1eb      	bne.n	800ab8c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb8:	f003 0304 	and.w	r3, r3, #4
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d004      	beq.n	800abca <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2204      	movs	r2, #4
 800abc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abc6:	2304      	movs	r3, #4
 800abc8:	e003      	b.n	800abd2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	22c5      	movs	r2, #197	; 0xc5
 800abce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bc90      	pop	{r4, r7}
 800abda:	4770      	bx	lr
 800abdc:	2000004c 	.word	0x2000004c
 800abe0:	10624dd3 	.word	0x10624dd3

0800abe4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800abe4:	b590      	push	{r4, r7, lr}
 800abe6:	b087      	sub	sp, #28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	460b      	mov	r3, r1
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abf2:	4b34      	ldr	r3, [pc, #208]	; (800acc4 <SDMMC_GetCmdResp6+0xe0>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a34      	ldr	r2, [pc, #208]	; (800acc8 <SDMMC_GetCmdResp6+0xe4>)
 800abf8:	fba2 2303 	umull	r2, r3, r2, r3
 800abfc:	0a5b      	lsrs	r3, r3, #9
 800abfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac02:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ac06:	4623      	mov	r3, r4
 800ac08:	1e5c      	subs	r4, r3, #1
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d102      	bne.n	800ac14 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac12:	e052      	b.n	800acba <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac18:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d0f0      	beq.n	800ac06 <SDMMC_GetCmdResp6+0x22>
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1eb      	bne.n	800ac06 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac32:	f003 0304 	and.w	r3, r3, #4
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d004      	beq.n	800ac44 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2204      	movs	r2, #4
 800ac3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac40:	2304      	movs	r3, #4
 800ac42:	e03a      	b.n	800acba <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac48:	f003 0301 	and.w	r3, r3, #1
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d004      	beq.n	800ac5a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2201      	movs	r2, #1
 800ac54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac56:	2301      	movs	r3, #1
 800ac58:	e02f      	b.n	800acba <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff fbf0 	bl	800a440 <SDIO_GetCommandResponse>
 800ac60:	4603      	mov	r3, r0
 800ac62:	461a      	mov	r2, r3
 800ac64:	7afb      	ldrb	r3, [r7, #11]
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d001      	beq.n	800ac6e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e025      	b.n	800acba <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	22c5      	movs	r2, #197	; 0xc5
 800ac72:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ac74:	2100      	movs	r1, #0
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f7ff fbef 	bl	800a45a <SDIO_GetResponse>
 800ac7c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d106      	bne.n	800ac96 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	0c1b      	lsrs	r3, r3, #16
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ac92:	2300      	movs	r3, #0
 800ac94:	e011      	b.n	800acba <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aca4:	e009      	b.n	800acba <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800acb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acb4:	e001      	b.n	800acba <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800acb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800acba:	4618      	mov	r0, r3
 800acbc:	371c      	adds	r7, #28
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd90      	pop	{r4, r7, pc}
 800acc2:	bf00      	nop
 800acc4:	2000004c 	.word	0x2000004c
 800acc8:	10624dd3 	.word	0x10624dd3

0800accc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800accc:	b490      	push	{r4, r7}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800acd4:	4b21      	ldr	r3, [pc, #132]	; (800ad5c <SDMMC_GetCmdResp7+0x90>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a21      	ldr	r2, [pc, #132]	; (800ad60 <SDMMC_GetCmdResp7+0x94>)
 800acda:	fba2 2303 	umull	r2, r3, r2, r3
 800acde:	0a5b      	lsrs	r3, r3, #9
 800ace0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ace8:	4623      	mov	r3, r4
 800acea:	1e5c      	subs	r4, r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	d102      	bne.n	800acf6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acf4:	e02c      	b.n	800ad50 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acfa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d0f0      	beq.n	800ace8 <SDMMC_GetCmdResp7+0x1c>
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d1eb      	bne.n	800ace8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad14:	f003 0304 	and.w	r3, r3, #4
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d004      	beq.n	800ad26 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2204      	movs	r2, #4
 800ad20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad22:	2304      	movs	r3, #4
 800ad24:	e014      	b.n	800ad50 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d004      	beq.n	800ad3c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e009      	b.n	800ad50 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2240      	movs	r2, #64	; 0x40
 800ad4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ad4e:	2300      	movs	r3, #0
  
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bc90      	pop	{r4, r7}
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	2000004c 	.word	0x2000004c
 800ad60:	10624dd3 	.word	0x10624dd3

0800ad64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad64:	b084      	sub	sp, #16
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	f107 001c 	add.w	r0, r7, #28
 800ad72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d122      	bne.n	800adc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ad90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ada4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d105      	bne.n	800adb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f001 fa7c 	bl	800c2b4 <USB_CoreReset>
 800adbc:	4603      	mov	r3, r0
 800adbe:	73fb      	strb	r3, [r7, #15]
 800adc0:	e01a      	b.n	800adf8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f001 fa70 	bl	800c2b4 <USB_CoreReset>
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800add8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adda:	2b00      	cmp	r3, #0
 800addc:	d106      	bne.n	800adec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	639a      	str	r2, [r3, #56]	; 0x38
 800adea:	e005      	b.n	800adf8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800adf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d10b      	bne.n	800ae16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	f043 0206 	orr.w	r2, r3, #6
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f043 0220 	orr.w	r2, r3, #32
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ae16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae22:	b004      	add	sp, #16
 800ae24:	4770      	bx	lr
	...

0800ae28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b087      	sub	sp, #28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	4613      	mov	r3, r2
 800ae34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ae36:	79fb      	ldrb	r3, [r7, #7]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d165      	bne.n	800af08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	4a41      	ldr	r2, [pc, #260]	; (800af44 <USB_SetTurnaroundTime+0x11c>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d906      	bls.n	800ae52 <USB_SetTurnaroundTime+0x2a>
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	4a40      	ldr	r2, [pc, #256]	; (800af48 <USB_SetTurnaroundTime+0x120>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d802      	bhi.n	800ae52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ae4c:	230f      	movs	r3, #15
 800ae4e:	617b      	str	r3, [r7, #20]
 800ae50:	e062      	b.n	800af18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	4a3c      	ldr	r2, [pc, #240]	; (800af48 <USB_SetTurnaroundTime+0x120>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d906      	bls.n	800ae68 <USB_SetTurnaroundTime+0x40>
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	4a3b      	ldr	r2, [pc, #236]	; (800af4c <USB_SetTurnaroundTime+0x124>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d802      	bhi.n	800ae68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ae62:	230e      	movs	r3, #14
 800ae64:	617b      	str	r3, [r7, #20]
 800ae66:	e057      	b.n	800af18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	4a38      	ldr	r2, [pc, #224]	; (800af4c <USB_SetTurnaroundTime+0x124>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d906      	bls.n	800ae7e <USB_SetTurnaroundTime+0x56>
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	4a37      	ldr	r2, [pc, #220]	; (800af50 <USB_SetTurnaroundTime+0x128>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d802      	bhi.n	800ae7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ae78:	230d      	movs	r3, #13
 800ae7a:	617b      	str	r3, [r7, #20]
 800ae7c:	e04c      	b.n	800af18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	4a33      	ldr	r2, [pc, #204]	; (800af50 <USB_SetTurnaroundTime+0x128>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d906      	bls.n	800ae94 <USB_SetTurnaroundTime+0x6c>
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	4a32      	ldr	r2, [pc, #200]	; (800af54 <USB_SetTurnaroundTime+0x12c>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d802      	bhi.n	800ae94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ae8e:	230c      	movs	r3, #12
 800ae90:	617b      	str	r3, [r7, #20]
 800ae92:	e041      	b.n	800af18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	4a2f      	ldr	r2, [pc, #188]	; (800af54 <USB_SetTurnaroundTime+0x12c>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d906      	bls.n	800aeaa <USB_SetTurnaroundTime+0x82>
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	4a2e      	ldr	r2, [pc, #184]	; (800af58 <USB_SetTurnaroundTime+0x130>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d802      	bhi.n	800aeaa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aea4:	230b      	movs	r3, #11
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	e036      	b.n	800af18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	4a2a      	ldr	r2, [pc, #168]	; (800af58 <USB_SetTurnaroundTime+0x130>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d906      	bls.n	800aec0 <USB_SetTurnaroundTime+0x98>
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	4a29      	ldr	r2, [pc, #164]	; (800af5c <USB_SetTurnaroundTime+0x134>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d802      	bhi.n	800aec0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aeba:	230a      	movs	r3, #10
 800aebc:	617b      	str	r3, [r7, #20]
 800aebe:	e02b      	b.n	800af18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	4a26      	ldr	r2, [pc, #152]	; (800af5c <USB_SetTurnaroundTime+0x134>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d906      	bls.n	800aed6 <USB_SetTurnaroundTime+0xae>
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	4a25      	ldr	r2, [pc, #148]	; (800af60 <USB_SetTurnaroundTime+0x138>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d802      	bhi.n	800aed6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800aed0:	2309      	movs	r3, #9
 800aed2:	617b      	str	r3, [r7, #20]
 800aed4:	e020      	b.n	800af18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	4a21      	ldr	r2, [pc, #132]	; (800af60 <USB_SetTurnaroundTime+0x138>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d906      	bls.n	800aeec <USB_SetTurnaroundTime+0xc4>
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	4a20      	ldr	r2, [pc, #128]	; (800af64 <USB_SetTurnaroundTime+0x13c>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d802      	bhi.n	800aeec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aee6:	2308      	movs	r3, #8
 800aee8:	617b      	str	r3, [r7, #20]
 800aeea:	e015      	b.n	800af18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	4a1d      	ldr	r2, [pc, #116]	; (800af64 <USB_SetTurnaroundTime+0x13c>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d906      	bls.n	800af02 <USB_SetTurnaroundTime+0xda>
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	4a1c      	ldr	r2, [pc, #112]	; (800af68 <USB_SetTurnaroundTime+0x140>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d802      	bhi.n	800af02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800aefc:	2307      	movs	r3, #7
 800aefe:	617b      	str	r3, [r7, #20]
 800af00:	e00a      	b.n	800af18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800af02:	2306      	movs	r3, #6
 800af04:	617b      	str	r3, [r7, #20]
 800af06:	e007      	b.n	800af18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800af08:	79fb      	ldrb	r3, [r7, #7]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d102      	bne.n	800af14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800af0e:	2309      	movs	r3, #9
 800af10:	617b      	str	r3, [r7, #20]
 800af12:	e001      	b.n	800af18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800af14:	2309      	movs	r3, #9
 800af16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	68da      	ldr	r2, [r3, #12]
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	029b      	lsls	r3, r3, #10
 800af2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800af30:	431a      	orrs	r2, r3
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	371c      	adds	r7, #28
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	00d8acbf 	.word	0x00d8acbf
 800af48:	00e4e1bf 	.word	0x00e4e1bf
 800af4c:	00f423ff 	.word	0x00f423ff
 800af50:	0106737f 	.word	0x0106737f
 800af54:	011a499f 	.word	0x011a499f
 800af58:	01312cff 	.word	0x01312cff
 800af5c:	014ca43f 	.word	0x014ca43f
 800af60:	016e35ff 	.word	0x016e35ff
 800af64:	01a6ab1f 	.word	0x01a6ab1f
 800af68:	01e847ff 	.word	0x01e847ff

0800af6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	f043 0201 	orr.w	r2, r3, #1
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af8e:	b480      	push	{r7}
 800af90:	b083      	sub	sp, #12
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	f023 0201 	bic.w	r2, r3, #1
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	460b      	mov	r3, r1
 800afba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800afc8:	78fb      	ldrb	r3, [r7, #3]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d106      	bne.n	800afdc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	60da      	str	r2, [r3, #12]
 800afda:	e00b      	b.n	800aff4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800afdc:	78fb      	ldrb	r3, [r7, #3]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d106      	bne.n	800aff0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	60da      	str	r2, [r3, #12]
 800afee:	e001      	b.n	800aff4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e003      	b.n	800affc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800aff4:	2032      	movs	r0, #50	; 0x32
 800aff6:	f7f9 ff43 	bl	8004e80 <HAL_Delay>

  return HAL_OK;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b004:	b084      	sub	sp, #16
 800b006:	b580      	push	{r7, lr}
 800b008:	b086      	sub	sp, #24
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b01e:	2300      	movs	r3, #0
 800b020:	613b      	str	r3, [r7, #16]
 800b022:	e009      	b.n	800b038 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	3340      	adds	r3, #64	; 0x40
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	2200      	movs	r2, #0
 800b030:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	3301      	adds	r3, #1
 800b036:	613b      	str	r3, [r7, #16]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	2b0e      	cmp	r3, #14
 800b03c:	d9f2      	bls.n	800b024 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d112      	bne.n	800b06a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b048:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b054:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b060:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	639a      	str	r2, [r3, #56]	; 0x38
 800b068:	e00b      	b.n	800b082 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b088:	461a      	mov	r2, r3
 800b08a:	2300      	movs	r3, #0
 800b08c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b094:	4619      	mov	r1, r3
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b09c:	461a      	mov	r2, r3
 800b09e:	680b      	ldr	r3, [r1, #0]
 800b0a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d10c      	bne.n	800b0c2 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d104      	bne.n	800b0b8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 f961 	bl	800b378 <USB_SetDevSpeed>
 800b0b6:	e008      	b.n	800b0ca <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b0b8:	2101      	movs	r1, #1
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 f95c 	bl	800b378 <USB_SetDevSpeed>
 800b0c0:	e003      	b.n	800b0ca <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b0c2:	2103      	movs	r1, #3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f957 	bl	800b378 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b0ca:	2110      	movs	r1, #16
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f90b 	bl	800b2e8 <USB_FlushTxFifo>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 f929 	bl	800b334 <USB_FlushRxFifo>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0fe:	461a      	mov	r2, r3
 800b100:	2300      	movs	r3, #0
 800b102:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b10a:	461a      	mov	r2, r3
 800b10c:	2300      	movs	r3, #0
 800b10e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b110:	2300      	movs	r3, #0
 800b112:	613b      	str	r3, [r7, #16]
 800b114:	e043      	b.n	800b19e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	015a      	lsls	r2, r3, #5
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	4413      	add	r3, r2
 800b11e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b12c:	d118      	bne.n	800b160 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10a      	bne.n	800b14a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	015a      	lsls	r2, r3, #5
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	4413      	add	r3, r2
 800b13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b140:	461a      	mov	r2, r3
 800b142:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	e013      	b.n	800b172 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	4413      	add	r3, r2
 800b152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b156:	461a      	mov	r2, r3
 800b158:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b15c:	6013      	str	r3, [r2, #0]
 800b15e:	e008      	b.n	800b172 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	4413      	add	r3, r2
 800b168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b16c:	461a      	mov	r2, r3
 800b16e:	2300      	movs	r3, #0
 800b170:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	015a      	lsls	r2, r3, #5
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17e:	461a      	mov	r2, r3
 800b180:	2300      	movs	r3, #0
 800b182:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	015a      	lsls	r2, r3, #5
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	4413      	add	r3, r2
 800b18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b190:	461a      	mov	r2, r3
 800b192:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b196:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	3301      	adds	r3, #1
 800b19c:	613b      	str	r3, [r7, #16]
 800b19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d3b7      	bcc.n	800b116 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	613b      	str	r3, [r7, #16]
 800b1aa:	e043      	b.n	800b234 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	015a      	lsls	r2, r3, #5
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1c2:	d118      	bne.n	800b1f6 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10a      	bne.n	800b1e0 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	e013      	b.n	800b208 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b1f2:	6013      	str	r3, [r2, #0]
 800b1f4:	e008      	b.n	800b208 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	015a      	lsls	r2, r3, #5
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b202:	461a      	mov	r2, r3
 800b204:	2300      	movs	r3, #0
 800b206:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	015a      	lsls	r2, r3, #5
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	4413      	add	r3, r2
 800b210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b214:	461a      	mov	r2, r3
 800b216:	2300      	movs	r3, #0
 800b218:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	015a      	lsls	r2, r3, #5
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	4413      	add	r3, r2
 800b222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b226:	461a      	mov	r2, r3
 800b228:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b22c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	3301      	adds	r3, #1
 800b232:	613b      	str	r3, [r7, #16]
 800b234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b236:	693a      	ldr	r2, [r7, #16]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d3b7      	bcc.n	800b1ac <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b24a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b24e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800b250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b252:	2b01      	cmp	r3, #1
 800b254:	d111      	bne.n	800b27a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b25c:	461a      	mov	r2, r3
 800b25e:	4b20      	ldr	r3, [pc, #128]	; (800b2e0 <USB_DevInit+0x2dc>)
 800b260:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b274:	f043 0303 	orr.w	r3, r3, #3
 800b278:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b286:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d105      	bne.n	800b29a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	f043 0210 	orr.w	r2, r3, #16
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	699a      	ldr	r2, [r3, #24]
 800b29e:	4b11      	ldr	r3, [pc, #68]	; (800b2e4 <USB_DevInit+0x2e0>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b2a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d005      	beq.n	800b2b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	f043 0208 	orr.w	r2, r3, #8
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d107      	bne.n	800b2ce <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2c6:	f043 0304 	orr.w	r3, r3, #4
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b2da:	b004      	add	sp, #16
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	00800100 	.word	0x00800100
 800b2e4:	803c3800 	.word	0x803c3800

0800b2e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	019b      	lsls	r3, r3, #6
 800b2fa:	f043 0220 	orr.w	r2, r3, #32
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3301      	adds	r3, #1
 800b306:	60fb      	str	r3, [r7, #12]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4a09      	ldr	r2, [pc, #36]	; (800b330 <USB_FlushTxFifo+0x48>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d901      	bls.n	800b314 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b310:	2303      	movs	r3, #3
 800b312:	e006      	b.n	800b322 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	f003 0320 	and.w	r3, r3, #32
 800b31c:	2b20      	cmp	r3, #32
 800b31e:	d0f0      	beq.n	800b302 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	00030d40 	.word	0x00030d40

0800b334 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b33c:	2300      	movs	r3, #0
 800b33e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2210      	movs	r2, #16
 800b344:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3301      	adds	r3, #1
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	4a09      	ldr	r2, [pc, #36]	; (800b374 <USB_FlushRxFifo+0x40>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d901      	bls.n	800b358 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b354:	2303      	movs	r3, #3
 800b356:	e006      	b.n	800b366 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	f003 0310 	and.w	r3, r3, #16
 800b360:	2b10      	cmp	r3, #16
 800b362:	d0f0      	beq.n	800b346 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	00030d40 	.word	0x00030d40

0800b378 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	460b      	mov	r3, r1
 800b382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	78fb      	ldrb	r3, [r7, #3]
 800b392:	68f9      	ldr	r1, [r7, #12]
 800b394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b398:	4313      	orrs	r3, r2
 800b39a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b087      	sub	sp, #28
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	f003 0306 	and.w	r3, r3, #6
 800b3c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d102      	bne.n	800b3d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	75fb      	strb	r3, [r7, #23]
 800b3ce:	e00a      	b.n	800b3e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d002      	beq.n	800b3dc <USB_GetDevSpeed+0x32>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b06      	cmp	r3, #6
 800b3da:	d102      	bne.n	800b3e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b3dc:	2302      	movs	r3, #2
 800b3de:	75fb      	strb	r3, [r7, #23]
 800b3e0:	e001      	b.n	800b3e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b3e2:	230f      	movs	r3, #15
 800b3e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	371c      	adds	r7, #28
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	785b      	ldrb	r3, [r3, #1]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d13a      	bne.n	800b486 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b416:	69da      	ldr	r2, [r3, #28]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	f003 030f 	and.w	r3, r3, #15
 800b420:	2101      	movs	r1, #1
 800b422:	fa01 f303 	lsl.w	r3, r1, r3
 800b426:	b29b      	uxth	r3, r3
 800b428:	68f9      	ldr	r1, [r7, #12]
 800b42a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b42e:	4313      	orrs	r3, r2
 800b430:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	015a      	lsls	r2, r3, #5
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	4413      	add	r3, r2
 800b43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b444:	2b00      	cmp	r3, #0
 800b446:	d155      	bne.n	800b4f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	015a      	lsls	r2, r3, #5
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	4413      	add	r3, r2
 800b450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	78db      	ldrb	r3, [r3, #3]
 800b462:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b464:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	059b      	lsls	r3, r3, #22
 800b46a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b46c:	4313      	orrs	r3, r2
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	0151      	lsls	r1, r2, #5
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	440a      	add	r2, r1
 800b476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b47a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b47e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b482:	6013      	str	r3, [r2, #0]
 800b484:	e036      	b.n	800b4f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b48c:	69da      	ldr	r2, [r3, #28]
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	f003 030f 	and.w	r3, r3, #15
 800b496:	2101      	movs	r1, #1
 800b498:	fa01 f303 	lsl.w	r3, r1, r3
 800b49c:	041b      	lsls	r3, r3, #16
 800b49e:	68f9      	ldr	r1, [r7, #12]
 800b4a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	015a      	lsls	r2, r3, #5
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d11a      	bne.n	800b4f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	015a      	lsls	r2, r3, #5
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	78db      	ldrb	r3, [r3, #3]
 800b4d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b4da:	430b      	orrs	r3, r1
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	0151      	lsls	r1, r2, #5
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	440a      	add	r2, r1
 800b4e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
	...

0800b504 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	785b      	ldrb	r3, [r3, #1]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d135      	bne.n	800b58c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	f003 030f 	and.w	r3, r3, #15
 800b530:	2101      	movs	r1, #1
 800b532:	fa01 f303 	lsl.w	r3, r1, r3
 800b536:	b29b      	uxth	r3, r3
 800b538:	43db      	mvns	r3, r3
 800b53a:	68f9      	ldr	r1, [r7, #12]
 800b53c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b540:	4013      	ands	r3, r2
 800b542:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b54a:	69da      	ldr	r2, [r3, #28]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	f003 030f 	and.w	r3, r3, #15
 800b554:	2101      	movs	r1, #1
 800b556:	fa01 f303 	lsl.w	r3, r1, r3
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	43db      	mvns	r3, r3
 800b55e:	68f9      	ldr	r1, [r7, #12]
 800b560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b564:	4013      	ands	r3, r2
 800b566:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	015a      	lsls	r2, r3, #5
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	0159      	lsls	r1, r3, #5
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	440b      	add	r3, r1
 800b57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b582:	4619      	mov	r1, r3
 800b584:	4b1f      	ldr	r3, [pc, #124]	; (800b604 <USB_DeactivateEndpoint+0x100>)
 800b586:	4013      	ands	r3, r2
 800b588:	600b      	str	r3, [r1, #0]
 800b58a:	e034      	b.n	800b5f6 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	f003 030f 	and.w	r3, r3, #15
 800b59c:	2101      	movs	r1, #1
 800b59e:	fa01 f303 	lsl.w	r3, r1, r3
 800b5a2:	041b      	lsls	r3, r3, #16
 800b5a4:	43db      	mvns	r3, r3
 800b5a6:	68f9      	ldr	r1, [r7, #12]
 800b5a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5ac:	4013      	ands	r3, r2
 800b5ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b6:	69da      	ldr	r2, [r3, #28]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	f003 030f 	and.w	r3, r3, #15
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c6:	041b      	lsls	r3, r3, #16
 800b5c8:	43db      	mvns	r3, r3
 800b5ca:	68f9      	ldr	r1, [r7, #12]
 800b5cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5d0:	4013      	ands	r3, r2
 800b5d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	015a      	lsls	r2, r3, #5
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	0159      	lsls	r1, r3, #5
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	440b      	add	r3, r1
 800b5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	4b05      	ldr	r3, [pc, #20]	; (800b608 <USB_DeactivateEndpoint+0x104>)
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3714      	adds	r7, #20
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	ec337800 	.word	0xec337800
 800b608:	eff37800 	.word	0xeff37800

0800b60c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b08a      	sub	sp, #40	; 0x28
 800b610:	af02      	add	r7, sp, #8
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	4613      	mov	r3, r2
 800b618:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	785b      	ldrb	r3, [r3, #1]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	f040 815c 	bne.w	800b8e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	695b      	ldr	r3, [r3, #20]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d132      	bne.n	800b69c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	015a      	lsls	r2, r3, #5
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	4413      	add	r3, r2
 800b63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	69ba      	ldr	r2, [r7, #24]
 800b646:	0151      	lsls	r1, r2, #5
 800b648:	69fa      	ldr	r2, [r7, #28]
 800b64a:	440a      	add	r2, r1
 800b64c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b650:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b654:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b658:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	015a      	lsls	r2, r3, #5
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	4413      	add	r3, r2
 800b662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	69ba      	ldr	r2, [r7, #24]
 800b66a:	0151      	lsls	r1, r2, #5
 800b66c:	69fa      	ldr	r2, [r7, #28]
 800b66e:	440a      	add	r2, r1
 800b670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b674:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	4413      	add	r3, r2
 800b682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	69ba      	ldr	r2, [r7, #24]
 800b68a:	0151      	lsls	r1, r2, #5
 800b68c:	69fa      	ldr	r2, [r7, #28]
 800b68e:	440a      	add	r2, r1
 800b690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b694:	0cdb      	lsrs	r3, r3, #19
 800b696:	04db      	lsls	r3, r3, #19
 800b698:	6113      	str	r3, [r2, #16]
 800b69a:	e074      	b.n	800b786 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	015a      	lsls	r2, r3, #5
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	69ba      	ldr	r2, [r7, #24]
 800b6ac:	0151      	lsls	r1, r2, #5
 800b6ae:	69fa      	ldr	r2, [r7, #28]
 800b6b0:	440a      	add	r2, r1
 800b6b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6b6:	0cdb      	lsrs	r3, r3, #19
 800b6b8:	04db      	lsls	r3, r3, #19
 800b6ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	015a      	lsls	r2, r3, #5
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c8:	691b      	ldr	r3, [r3, #16]
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	0151      	lsls	r1, r2, #5
 800b6ce:	69fa      	ldr	r2, [r7, #28]
 800b6d0:	440a      	add	r2, r1
 800b6d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b6da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b6de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ec:	691a      	ldr	r2, [r3, #16]
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	6959      	ldr	r1, [r3, #20]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	440b      	add	r3, r1
 800b6f8:	1e59      	subs	r1, r3, #1
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800b702:	04d9      	lsls	r1, r3, #19
 800b704:	4b9d      	ldr	r3, [pc, #628]	; (800b97c <USB_EPStartXfer+0x370>)
 800b706:	400b      	ands	r3, r1
 800b708:	69b9      	ldr	r1, [r7, #24]
 800b70a:	0148      	lsls	r0, r1, #5
 800b70c:	69f9      	ldr	r1, [r7, #28]
 800b70e:	4401      	add	r1, r0
 800b710:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b714:	4313      	orrs	r3, r2
 800b716:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	015a      	lsls	r2, r3, #5
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	4413      	add	r3, r2
 800b720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b724:	691a      	ldr	r2, [r3, #16]
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	695b      	ldr	r3, [r3, #20]
 800b72a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b72e:	69b9      	ldr	r1, [r7, #24]
 800b730:	0148      	lsls	r0, r1, #5
 800b732:	69f9      	ldr	r1, [r7, #28]
 800b734:	4401      	add	r1, r0
 800b736:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b73a:	4313      	orrs	r3, r2
 800b73c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	78db      	ldrb	r3, [r3, #3]
 800b742:	2b01      	cmp	r3, #1
 800b744:	d11f      	bne.n	800b786 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	015a      	lsls	r2, r3, #5
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	4413      	add	r3, r2
 800b74e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	69ba      	ldr	r2, [r7, #24]
 800b756:	0151      	lsls	r1, r2, #5
 800b758:	69fa      	ldr	r2, [r7, #28]
 800b75a:	440a      	add	r2, r1
 800b75c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b760:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b764:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	015a      	lsls	r2, r3, #5
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	4413      	add	r3, r2
 800b76e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	0151      	lsls	r1, r2, #5
 800b778:	69fa      	ldr	r2, [r7, #28]
 800b77a:	440a      	add	r2, r1
 800b77c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b780:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b784:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b786:	79fb      	ldrb	r3, [r7, #7]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d14b      	bne.n	800b824 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	691b      	ldr	r3, [r3, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d009      	beq.n	800b7a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	015a      	lsls	r2, r3, #5
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	4413      	add	r3, r2
 800b79c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	78db      	ldrb	r3, [r3, #3]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d128      	bne.n	800b802 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d110      	bne.n	800b7e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	015a      	lsls	r2, r3, #5
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	69ba      	ldr	r2, [r7, #24]
 800b7d0:	0151      	lsls	r1, r2, #5
 800b7d2:	69fa      	ldr	r2, [r7, #28]
 800b7d4:	440a      	add	r2, r1
 800b7d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7de:	6013      	str	r3, [r2, #0]
 800b7e0:	e00f      	b.n	800b802 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	015a      	lsls	r2, r3, #5
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	69ba      	ldr	r2, [r7, #24]
 800b7f2:	0151      	lsls	r1, r2, #5
 800b7f4:	69fa      	ldr	r2, [r7, #28]
 800b7f6:	440a      	add	r2, r1
 800b7f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b800:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	015a      	lsls	r2, r3, #5
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	4413      	add	r3, r2
 800b80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	69ba      	ldr	r2, [r7, #24]
 800b812:	0151      	lsls	r1, r2, #5
 800b814:	69fa      	ldr	r2, [r7, #28]
 800b816:	440a      	add	r2, r1
 800b818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b81c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b820:	6013      	str	r3, [r2, #0]
 800b822:	e12f      	b.n	800ba84 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	015a      	lsls	r2, r3, #5
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	4413      	add	r3, r2
 800b82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	69ba      	ldr	r2, [r7, #24]
 800b834:	0151      	lsls	r1, r2, #5
 800b836:	69fa      	ldr	r2, [r7, #28]
 800b838:	440a      	add	r2, r1
 800b83a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b83e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b842:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	78db      	ldrb	r3, [r3, #3]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d015      	beq.n	800b878 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	695b      	ldr	r3, [r3, #20]
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 8117 	beq.w	800ba84 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b85c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	f003 030f 	and.w	r3, r3, #15
 800b866:	2101      	movs	r1, #1
 800b868:	fa01 f303 	lsl.w	r3, r1, r3
 800b86c:	69f9      	ldr	r1, [r7, #28]
 800b86e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b872:	4313      	orrs	r3, r2
 800b874:	634b      	str	r3, [r1, #52]	; 0x34
 800b876:	e105      	b.n	800ba84 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b884:	2b00      	cmp	r3, #0
 800b886:	d110      	bne.n	800b8aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	015a      	lsls	r2, r3, #5
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	4413      	add	r3, r2
 800b890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	69ba      	ldr	r2, [r7, #24]
 800b898:	0151      	lsls	r1, r2, #5
 800b89a:	69fa      	ldr	r2, [r7, #28]
 800b89c:	440a      	add	r2, r1
 800b89e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8a6:	6013      	str	r3, [r2, #0]
 800b8a8:	e00f      	b.n	800b8ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	015a      	lsls	r2, r3, #5
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	69ba      	ldr	r2, [r7, #24]
 800b8ba:	0151      	lsls	r1, r2, #5
 800b8bc:	69fa      	ldr	r2, [r7, #28]
 800b8be:	440a      	add	r2, r1
 800b8c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	68d9      	ldr	r1, [r3, #12]
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	781a      	ldrb	r2, [r3, #0]
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	695b      	ldr	r3, [r3, #20]
 800b8d6:	b298      	uxth	r0, r3
 800b8d8:	79fb      	ldrb	r3, [r7, #7]
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	4603      	mov	r3, r0
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f000 fa2b 	bl	800bd3a <USB_WritePacket>
 800b8e4:	e0ce      	b.n	800ba84 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	015a      	lsls	r2, r3, #5
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	69ba      	ldr	r2, [r7, #24]
 800b8f6:	0151      	lsls	r1, r2, #5
 800b8f8:	69fa      	ldr	r2, [r7, #28]
 800b8fa:	440a      	add	r2, r1
 800b8fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b900:	0cdb      	lsrs	r3, r3, #19
 800b902:	04db      	lsls	r3, r3, #19
 800b904:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	015a      	lsls	r2, r3, #5
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	4413      	add	r3, r2
 800b90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	69ba      	ldr	r2, [r7, #24]
 800b916:	0151      	lsls	r1, r2, #5
 800b918:	69fa      	ldr	r2, [r7, #28]
 800b91a:	440a      	add	r2, r1
 800b91c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b920:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b924:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b928:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	695b      	ldr	r3, [r3, #20]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d126      	bne.n	800b980 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	015a      	lsls	r2, r3, #5
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	4413      	add	r3, r2
 800b93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b93e:	691a      	ldr	r2, [r3, #16]
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b948:	69b9      	ldr	r1, [r7, #24]
 800b94a:	0148      	lsls	r0, r1, #5
 800b94c:	69f9      	ldr	r1, [r7, #28]
 800b94e:	4401      	add	r1, r0
 800b950:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b954:	4313      	orrs	r3, r2
 800b956:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	015a      	lsls	r2, r3, #5
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	4413      	add	r3, r2
 800b960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	69ba      	ldr	r2, [r7, #24]
 800b968:	0151      	lsls	r1, r2, #5
 800b96a:	69fa      	ldr	r2, [r7, #28]
 800b96c:	440a      	add	r2, r1
 800b96e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b972:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b976:	6113      	str	r3, [r2, #16]
 800b978:	e036      	b.n	800b9e8 <USB_EPStartXfer+0x3dc>
 800b97a:	bf00      	nop
 800b97c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	695a      	ldr	r2, [r3, #20]
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	4413      	add	r3, r2
 800b98a:	1e5a      	subs	r2, r3, #1
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	fbb2 f3f3 	udiv	r3, r2, r3
 800b994:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	015a      	lsls	r2, r3, #5
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	4413      	add	r3, r2
 800b99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9a2:	691a      	ldr	r2, [r3, #16]
 800b9a4:	8afb      	ldrh	r3, [r7, #22]
 800b9a6:	04d9      	lsls	r1, r3, #19
 800b9a8:	4b39      	ldr	r3, [pc, #228]	; (800ba90 <USB_EPStartXfer+0x484>)
 800b9aa:	400b      	ands	r3, r1
 800b9ac:	69b9      	ldr	r1, [r7, #24]
 800b9ae:	0148      	lsls	r0, r1, #5
 800b9b0:	69f9      	ldr	r1, [r7, #28]
 800b9b2:	4401      	add	r1, r0
 800b9b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	015a      	lsls	r2, r3, #5
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9c8:	691a      	ldr	r2, [r3, #16]
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	8af9      	ldrh	r1, [r7, #22]
 800b9d0:	fb01 f303 	mul.w	r3, r1, r3
 800b9d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9d8:	69b9      	ldr	r1, [r7, #24]
 800b9da:	0148      	lsls	r0, r1, #5
 800b9dc:	69f9      	ldr	r1, [r7, #28]
 800b9de:	4401      	add	r1, r0
 800b9e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b9e8:	79fb      	ldrb	r3, [r7, #7]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d10d      	bne.n	800ba0a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d009      	beq.n	800ba0a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	68d9      	ldr	r1, [r3, #12]
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	015a      	lsls	r2, r3, #5
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	4413      	add	r3, r2
 800ba02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba06:	460a      	mov	r2, r1
 800ba08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	78db      	ldrb	r3, [r3, #3]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d128      	bne.n	800ba64 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d110      	bne.n	800ba44 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	015a      	lsls	r2, r3, #5
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	4413      	add	r3, r2
 800ba2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	69ba      	ldr	r2, [r7, #24]
 800ba32:	0151      	lsls	r1, r2, #5
 800ba34:	69fa      	ldr	r2, [r7, #28]
 800ba36:	440a      	add	r2, r1
 800ba38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba40:	6013      	str	r3, [r2, #0]
 800ba42:	e00f      	b.n	800ba64 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	015a      	lsls	r2, r3, #5
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	69ba      	ldr	r2, [r7, #24]
 800ba54:	0151      	lsls	r1, r2, #5
 800ba56:	69fa      	ldr	r2, [r7, #28]
 800ba58:	440a      	add	r2, r1
 800ba5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	015a      	lsls	r2, r3, #5
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	69ba      	ldr	r2, [r7, #24]
 800ba74:	0151      	lsls	r1, r2, #5
 800ba76:	69fa      	ldr	r2, [r7, #28]
 800ba78:	440a      	add	r2, r1
 800ba7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ba82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3720      	adds	r7, #32
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	1ff80000 	.word	0x1ff80000

0800ba94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b087      	sub	sp, #28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	785b      	ldrb	r3, [r3, #1]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	f040 80cd 	bne.w	800bc50 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d132      	bne.n	800bb24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	015a      	lsls	r2, r3, #5
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	4413      	add	r3, r2
 800bac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	0151      	lsls	r1, r2, #5
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	440a      	add	r2, r1
 800bad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bad8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800badc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bae0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	0151      	lsls	r1, r2, #5
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	440a      	add	r2, r1
 800baf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bafc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	0151      	lsls	r1, r2, #5
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	440a      	add	r2, r1
 800bb18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb1c:	0cdb      	lsrs	r3, r3, #19
 800bb1e:	04db      	lsls	r3, r3, #19
 800bb20:	6113      	str	r3, [r2, #16]
 800bb22:	e04e      	b.n	800bbc2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	015a      	lsls	r2, r3, #5
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	693a      	ldr	r2, [r7, #16]
 800bb34:	0151      	lsls	r1, r2, #5
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	440a      	add	r2, r1
 800bb3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb3e:	0cdb      	lsrs	r3, r3, #19
 800bb40:	04db      	lsls	r3, r3, #19
 800bb42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	015a      	lsls	r2, r3, #5
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	693a      	ldr	r2, [r7, #16]
 800bb54:	0151      	lsls	r1, r2, #5
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	440a      	add	r2, r1
 800bb5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	695a      	ldr	r2, [r3, #20]
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d903      	bls.n	800bb7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	689a      	ldr	r2, [r3, #8]
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	015a      	lsls	r2, r3, #5
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	4413      	add	r3, r2
 800bb84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	0151      	lsls	r1, r2, #5
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	440a      	add	r2, r1
 800bb92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba8:	691a      	ldr	r2, [r3, #16]
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	695b      	ldr	r3, [r3, #20]
 800bbae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbb2:	6939      	ldr	r1, [r7, #16]
 800bbb4:	0148      	lsls	r0, r1, #5
 800bbb6:	6979      	ldr	r1, [r7, #20]
 800bbb8:	4401      	add	r1, r0
 800bbba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bbc2:	79fb      	ldrb	r3, [r7, #7]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d11e      	bne.n	800bc06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	691b      	ldr	r3, [r3, #16]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d009      	beq.n	800bbe4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	015a      	lsls	r2, r3, #5
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbdc:	461a      	mov	r2, r3
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	015a      	lsls	r2, r3, #5
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	4413      	add	r3, r2
 800bbec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	693a      	ldr	r2, [r7, #16]
 800bbf4:	0151      	lsls	r1, r2, #5
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	440a      	add	r2, r1
 800bbfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc02:	6013      	str	r3, [r2, #0]
 800bc04:	e092      	b.n	800bd2c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	015a      	lsls	r2, r3, #5
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	0151      	lsls	r1, r2, #5
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	440a      	add	r2, r1
 800bc1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d07e      	beq.n	800bd2c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	f003 030f 	and.w	r3, r3, #15
 800bc3e:	2101      	movs	r1, #1
 800bc40:	fa01 f303 	lsl.w	r3, r1, r3
 800bc44:	6979      	ldr	r1, [r7, #20]
 800bc46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	634b      	str	r3, [r1, #52]	; 0x34
 800bc4e:	e06d      	b.n	800bd2c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	015a      	lsls	r2, r3, #5
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	4413      	add	r3, r2
 800bc58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc5c:	691b      	ldr	r3, [r3, #16]
 800bc5e:	693a      	ldr	r2, [r7, #16]
 800bc60:	0151      	lsls	r1, r2, #5
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	440a      	add	r2, r1
 800bc66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc6a:	0cdb      	lsrs	r3, r3, #19
 800bc6c:	04db      	lsls	r3, r3, #19
 800bc6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	015a      	lsls	r2, r3, #5
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	4413      	add	r3, r2
 800bc78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	693a      	ldr	r2, [r7, #16]
 800bc80:	0151      	lsls	r1, r2, #5
 800bc82:	697a      	ldr	r2, [r7, #20]
 800bc84:	440a      	add	r2, r1
 800bc86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc92:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	695b      	ldr	r3, [r3, #20]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d003      	beq.n	800bca4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	689a      	ldr	r2, [r3, #8]
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	015a      	lsls	r2, r3, #5
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	4413      	add	r3, r2
 800bcac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb0:	691b      	ldr	r3, [r3, #16]
 800bcb2:	693a      	ldr	r2, [r7, #16]
 800bcb4:	0151      	lsls	r1, r2, #5
 800bcb6:	697a      	ldr	r2, [r7, #20]
 800bcb8:	440a      	add	r2, r1
 800bcba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	015a      	lsls	r2, r3, #5
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	4413      	add	r3, r2
 800bccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd0:	691a      	ldr	r2, [r3, #16]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcda:	6939      	ldr	r1, [r7, #16]
 800bcdc:	0148      	lsls	r0, r1, #5
 800bcde:	6979      	ldr	r1, [r7, #20]
 800bce0:	4401      	add	r1, r0
 800bce2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bce6:	4313      	orrs	r3, r2
 800bce8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d10d      	bne.n	800bd0c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d009      	beq.n	800bd0c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	68d9      	ldr	r1, [r3, #12]
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	015a      	lsls	r2, r3, #5
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	4413      	add	r3, r2
 800bd04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd08:	460a      	mov	r2, r1
 800bd0a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	015a      	lsls	r2, r3, #5
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	4413      	add	r3, r2
 800bd14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	693a      	ldr	r2, [r7, #16]
 800bd1c:	0151      	lsls	r1, r2, #5
 800bd1e:	697a      	ldr	r2, [r7, #20]
 800bd20:	440a      	add	r2, r1
 800bd22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	371c      	adds	r7, #28
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b089      	sub	sp, #36	; 0x24
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	60f8      	str	r0, [r7, #12]
 800bd42:	60b9      	str	r1, [r7, #8]
 800bd44:	4611      	mov	r1, r2
 800bd46:	461a      	mov	r2, r3
 800bd48:	460b      	mov	r3, r1
 800bd4a:	71fb      	strb	r3, [r7, #7]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bd58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d11a      	bne.n	800bd96 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bd60:	88bb      	ldrh	r3, [r7, #4]
 800bd62:	3303      	adds	r3, #3
 800bd64:	089b      	lsrs	r3, r3, #2
 800bd66:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bd68:	2300      	movs	r3, #0
 800bd6a:	61bb      	str	r3, [r7, #24]
 800bd6c:	e00f      	b.n	800bd8e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
 800bd70:	031a      	lsls	r2, r3, #12
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	4413      	add	r3, r2
 800bd76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	3304      	adds	r3, #4
 800bd86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	61bb      	str	r3, [r7, #24]
 800bd8e:	69ba      	ldr	r2, [r7, #24]
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d3eb      	bcc.n	800bd6e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3724      	adds	r7, #36	; 0x24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b089      	sub	sp, #36	; 0x24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bdba:	88fb      	ldrh	r3, [r7, #6]
 800bdbc:	3303      	adds	r3, #3
 800bdbe:	089b      	lsrs	r3, r3, #2
 800bdc0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	61bb      	str	r3, [r7, #24]
 800bdc6:	e00b      	b.n	800bde0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	601a      	str	r2, [r3, #0]
    pDest++;
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	3304      	adds	r3, #4
 800bdd8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	3301      	adds	r3, #1
 800bdde:	61bb      	str	r3, [r7, #24]
 800bde0:	69ba      	ldr	r2, [r7, #24]
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d3ef      	bcc.n	800bdc8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bde8:	69fb      	ldr	r3, [r7, #28]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3724      	adds	r7, #36	; 0x24
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b085      	sub	sp, #20
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	785b      	ldrb	r3, [r3, #1]
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d12c      	bne.n	800be6c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	015a      	lsls	r2, r3, #5
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	4413      	add	r3, r2
 800be1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	db12      	blt.n	800be4a <USB_EPSetStall+0x54>
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d00f      	beq.n	800be4a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	015a      	lsls	r2, r3, #5
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	4413      	add	r3, r2
 800be32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	0151      	lsls	r1, r2, #5
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	440a      	add	r2, r1
 800be40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800be48:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	015a      	lsls	r2, r3, #5
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	4413      	add	r3, r2
 800be52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68ba      	ldr	r2, [r7, #8]
 800be5a:	0151      	lsls	r1, r2, #5
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	440a      	add	r2, r1
 800be60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be68:	6013      	str	r3, [r2, #0]
 800be6a:	e02b      	b.n	800bec4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	015a      	lsls	r2, r3, #5
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	4413      	add	r3, r2
 800be74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	db12      	blt.n	800bea4 <USB_EPSetStall+0xae>
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00f      	beq.n	800bea4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	015a      	lsls	r2, r3, #5
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	4413      	add	r3, r2
 800be8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	0151      	lsls	r1, r2, #5
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	440a      	add	r2, r1
 800be9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bea2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	015a      	lsls	r2, r3, #5
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	4413      	add	r3, r2
 800beac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	0151      	lsls	r1, r2, #5
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	440a      	add	r2, r1
 800beba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bebe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bec2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bec4:	2300      	movs	r3, #0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3714      	adds	r7, #20
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bed2:	b480      	push	{r7}
 800bed4:	b085      	sub	sp, #20
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	785b      	ldrb	r3, [r3, #1]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d128      	bne.n	800bf40 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	015a      	lsls	r2, r3, #5
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	4413      	add	r3, r2
 800bef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	0151      	lsls	r1, r2, #5
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	440a      	add	r2, r1
 800bf04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	78db      	ldrb	r3, [r3, #3]
 800bf12:	2b03      	cmp	r3, #3
 800bf14:	d003      	beq.n	800bf1e <USB_EPClearStall+0x4c>
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	78db      	ldrb	r3, [r3, #3]
 800bf1a:	2b02      	cmp	r3, #2
 800bf1c:	d138      	bne.n	800bf90 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	015a      	lsls	r2, r3, #5
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	4413      	add	r3, r2
 800bf26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	0151      	lsls	r1, r2, #5
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	440a      	add	r2, r1
 800bf34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf3c:	6013      	str	r3, [r2, #0]
 800bf3e:	e027      	b.n	800bf90 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	015a      	lsls	r2, r3, #5
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	4413      	add	r3, r2
 800bf48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	68ba      	ldr	r2, [r7, #8]
 800bf50:	0151      	lsls	r1, r2, #5
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	440a      	add	r2, r1
 800bf56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	78db      	ldrb	r3, [r3, #3]
 800bf64:	2b03      	cmp	r3, #3
 800bf66:	d003      	beq.n	800bf70 <USB_EPClearStall+0x9e>
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	78db      	ldrb	r3, [r3, #3]
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d10f      	bne.n	800bf90 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	015a      	lsls	r2, r3, #5
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	0151      	lsls	r1, r2, #5
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	440a      	add	r2, r1
 800bf86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf8e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3714      	adds	r7, #20
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr

0800bf9e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	b085      	sub	sp, #20
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfbc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bfc0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	78fb      	ldrb	r3, [r7, #3]
 800bfcc:	011b      	lsls	r3, r3, #4
 800bfce:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bfd2:	68f9      	ldr	r1, [r7, #12]
 800bfd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3714      	adds	r7, #20
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr

0800bfea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b084      	sub	sp, #16
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c004:	f023 0302 	bic.w	r3, r3, #2
 800c008:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c00a:	2003      	movs	r0, #3
 800c00c:	f7f8 ff38 	bl	8004e80 <HAL_Delay>

  return HAL_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c034:	f043 0302 	orr.w	r3, r3, #2
 800c038:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c03a:	2003      	movs	r0, #3
 800c03c:	f7f8 ff20 	bl	8004e80 <HAL_Delay>

  return HAL_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c04a:	b480      	push	{r7}
 800c04c:	b085      	sub	sp, #20
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	695b      	ldr	r3, [r3, #20]
 800c056:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	699b      	ldr	r3, [r3, #24]
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	4013      	ands	r3, r2
 800c060:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c062:	68fb      	ldr	r3, [r7, #12]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	4013      	ands	r3, r2
 800c092:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	0c1b      	lsrs	r3, r3, #16
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3714      	adds	r7, #20
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0b6:	699b      	ldr	r3, [r3, #24]
 800c0b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0c0:	69db      	ldr	r3, [r3, #28]
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	4013      	ands	r3, r2
 800c0c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	b29b      	uxth	r3, r3
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c0e8:	78fb      	ldrb	r3, [r7, #3]
 800c0ea:	015a      	lsls	r2, r3, #5
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0fe:	695b      	ldr	r3, [r3, #20]
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	4013      	ands	r3, r2
 800c104:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c106:	68bb      	ldr	r3, [r7, #8]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c114:	b480      	push	{r7}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	460b      	mov	r3, r1
 800c11e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c136:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c138:	78fb      	ldrb	r3, [r7, #3]
 800c13a:	f003 030f 	and.w	r3, r3, #15
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	fa22 f303 	lsr.w	r3, r2, r3
 800c144:	01db      	lsls	r3, r3, #7
 800c146:	b2db      	uxtb	r3, r3
 800c148:	693a      	ldr	r2, [r7, #16]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c14e:	78fb      	ldrb	r3, [r7, #3]
 800c150:	015a      	lsls	r2, r3, #5
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	4413      	add	r3, r2
 800c156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	4013      	ands	r3, r2
 800c160:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c162:	68bb      	ldr	r3, [r7, #8]
}
 800c164:	4618      	mov	r0, r3
 800c166:	371c      	adds	r7, #28
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	695b      	ldr	r3, [r3, #20]
 800c17c:	f003 0301 	and.w	r3, r3, #1
}
 800c180:	4618      	mov	r0, r3
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c1aa:	f023 0307 	bic.w	r3, r3, #7
 800c1ae:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	f003 0306 	and.w	r3, r3, #6
 800c1bc:	2b04      	cmp	r3, #4
 800c1be:	d109      	bne.n	800c1d4 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1ce:	f043 0303 	orr.w	r3, r3, #3
 800c1d2:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3714      	adds	r7, #20
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
	...

0800c1f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b087      	sub	sp, #28
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	460b      	mov	r3, r1
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	333c      	adds	r3, #60	; 0x3c
 800c20e:	3304      	adds	r3, #4
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	4a26      	ldr	r2, [pc, #152]	; (800c2b0 <USB_EP0_OutStart+0xb8>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d90a      	bls.n	800c232 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c22c:	d101      	bne.n	800c232 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c22e:	2300      	movs	r3, #0
 800c230:	e037      	b.n	800c2a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c238:	461a      	mov	r2, r3
 800c23a:	2300      	movs	r3, #0
 800c23c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c24c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c260:	f043 0318 	orr.w	r3, r3, #24
 800c264:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	697a      	ldr	r2, [r7, #20]
 800c270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c274:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c278:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c27a:	7afb      	ldrb	r3, [r7, #11]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d10f      	bne.n	800c2a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c286:	461a      	mov	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	697a      	ldr	r2, [r7, #20]
 800c296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c29a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c29e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	371c      	adds	r7, #28
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	4f54300a 	.word	0x4f54300a

0800c2b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	60fb      	str	r3, [r7, #12]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	4a13      	ldr	r2, [pc, #76]	; (800c318 <USB_CoreReset+0x64>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d901      	bls.n	800c2d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	e01b      	b.n	800c30a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	daf2      	bge.n	800c2c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	f043 0201 	orr.w	r2, r3, #1
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	60fb      	str	r3, [r7, #12]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	4a09      	ldr	r2, [pc, #36]	; (800c318 <USB_CoreReset+0x64>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d901      	bls.n	800c2fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e006      	b.n	800c30a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	f003 0301 	and.w	r3, r3, #1
 800c304:	2b01      	cmp	r3, #1
 800c306:	d0f0      	beq.n	800c2ea <USB_CoreReset+0x36>

  return HAL_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3714      	adds	r7, #20
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	00030d40 	.word	0x00030d40

0800c31c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c31c:	b480      	push	{r7}
 800c31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c320:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800c322:	4618      	mov	r0, r3
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <FatFsInit>:

/* USER CODE BEGIN Application */
     
SD_error FatFsInit(void) {
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af02      	add	r7, sp, #8
	// Initializing Fat Filesystem
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0) {
 800c332:	4914      	ldr	r1, [pc, #80]	; (800c384 <FatFsInit+0x58>)
 800c334:	4814      	ldr	r0, [pc, #80]	; (800c388 <FatFsInit+0x5c>)
 800c336:	f008 ff25 	bl	8015184 <FATFS_LinkDriver>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d11c      	bne.n	800c37a <FatFsInit+0x4e>
		FRESULT res;
		/* Attempt to Mount SD Drive */
		 if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 1) != FR_OK) {
 800c340:	2201      	movs	r2, #1
 800c342:	4910      	ldr	r1, [pc, #64]	; (800c384 <FatFsInit+0x58>)
 800c344:	4811      	ldr	r0, [pc, #68]	; (800c38c <FatFsInit+0x60>)
 800c346:	f007 fbf1 	bl	8013b2c <f_mount>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00f      	beq.n	800c370 <FatFsInit+0x44>
			 /* Failed to mount drive */
			 res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 800c350:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	4b0e      	ldr	r3, [pc, #56]	; (800c390 <FatFsInit+0x64>)
 800c358:	2200      	movs	r2, #0
 800c35a:	2107      	movs	r1, #7
 800c35c:	4809      	ldr	r0, [pc, #36]	; (800c384 <FatFsInit+0x58>)
 800c35e:	f008 f9fd 	bl	801475c <f_mkfs>
 800c362:	4603      	mov	r3, r0
 800c364:	71fb      	strb	r3, [r7, #7]
			 if (res != FR_OK) {
 800c366:	79fb      	ldrb	r3, [r7, #7]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <FatFsInit+0x44>
				 /* Error, failed to initialize filesystem */
				 return SD_ERR;
 800c36c:	2301      	movs	r3, #1
 800c36e:	e005      	b.n	800c37c <FatFsInit+0x50>
			 }
		 }
		 fatFsModInit = true;
 800c370:	4b08      	ldr	r3, [pc, #32]	; (800c394 <FatFsInit+0x68>)
 800c372:	2201      	movs	r2, #1
 800c374:	701a      	strb	r2, [r3, #0]
	} else {
		// Failed to link SD Driver
		return SD_ERR;
	}
	return SD_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	e000      	b.n	800c37c <FatFsInit+0x50>
		return SD_ERR;
 800c37a:	2301      	movs	r3, #1
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	2000132c 	.word	0x2000132c
 800c388:	0801a208 	.word	0x0801a208
 800c38c:	20001560 	.word	0x20001560
 800c390:	2000112c 	.word	0x2000112c
 800c394:	20000740 	.word	0x20000740

0800c398 <FatFsDeInit>:

SD_error FatFsDeInit(void) {
 800c398:	b580      	push	{r7, lr}
 800c39a:	af00      	add	r7, sp, #0
	fatFsModInit = false;
 800c39c:	4b04      	ldr	r3, [pc, #16]	; (800c3b0 <FatFsDeInit+0x18>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	701a      	strb	r2, [r3, #0]
	return FATFS_UnLinkDriver(SDPath);
 800c3a2:	4804      	ldr	r0, [pc, #16]	; (800c3b4 <FatFsDeInit+0x1c>)
 800c3a4:	f008 ff36 	bl	8015214 <FATFS_UnLinkDriver>
 800c3a8:	4603      	mov	r3, r0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	20000740 	.word	0x20000740
 800c3b4:	2000132c 	.word	0x2000132c

0800c3b8 <FatFsIsModuleInit>:

	// Success
	return SD_OK;
}

bool FatFsIsModuleInit(void) {
 800c3b8:	b480      	push	{r7}
 800c3ba:	af00      	add	r7, sp, #0
	return fatFsModInit;
 800c3bc:	4b03      	ldr	r3, [pc, #12]	; (800c3cc <FatFsIsModuleInit+0x14>)
 800c3be:	781b      	ldrb	r3, [r3, #0]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	20000740 	.word	0x20000740

0800c3d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c3da:	f000 f89e 	bl	800c51a <BSP_SD_IsDetected>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d001      	beq.n	800c3e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e005      	b.n	800c3f4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c3e8:	4804      	ldr	r0, [pc, #16]	; (800c3fc <BSP_SD_Init+0x2c>)
 800c3ea:	f7fc f851 	bl	8008490 <HAL_SD_Init>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800c3f2:	79fb      	ldrb	r3, [r7, #7]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20001048 	.word	0x20001048

0800c400 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b088      	sub	sp, #32
 800c404:	af02      	add	r7, sp, #8
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
 800c40c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c40e:	2300      	movs	r3, #0
 800c410:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	68f9      	ldr	r1, [r7, #12]
 800c41c:	4806      	ldr	r0, [pc, #24]	; (800c438 <BSP_SD_ReadBlocks+0x38>)
 800c41e:	f7fc f8c7 	bl	80085b0 <HAL_SD_ReadBlocks>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d001      	beq.n	800c42c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3718      	adds	r7, #24
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	20001048 	.word	0x20001048

0800c43c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b088      	sub	sp, #32
 800c440:	af02      	add	r7, sp, #8
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
 800c448:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	68ba      	ldr	r2, [r7, #8]
 800c456:	68f9      	ldr	r1, [r7, #12]
 800c458:	4806      	ldr	r0, [pc, #24]	; (800c474 <BSP_SD_WriteBlocks+0x38>)
 800c45a:	f7fc faa3 	bl	80089a4 <HAL_SD_WriteBlocks>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d001      	beq.n	800c468 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c468:	7dfb      	ldrb	r3, [r7, #23]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3718      	adds	r7, #24
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20001048 	.word	0x20001048

0800c478 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c47c:	4805      	ldr	r0, [pc, #20]	; (800c494 <BSP_SD_GetCardState+0x1c>)
 800c47e:	f7fc ff93 	bl	80093a8 <HAL_SD_GetCardState>
 800c482:	4603      	mov	r3, r0
 800c484:	2b04      	cmp	r3, #4
 800c486:	bf14      	ite	ne
 800c488:	2301      	movne	r3, #1
 800c48a:	2300      	moveq	r3, #0
 800c48c:	b2db      	uxtb	r3, r3
}
 800c48e:	4618      	mov	r0, r3
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	20001048 	.word	0x20001048

0800c498 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c4a0:	6879      	ldr	r1, [r7, #4]
 800c4a2:	4803      	ldr	r0, [pc, #12]	; (800c4b0 <BSP_SD_GetCardInfo+0x18>)
 800c4a4:	f7fc ff54 	bl	8009350 <HAL_SD_GetCardInfo>
}
 800c4a8:	bf00      	nop
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	20001048 	.word	0x20001048

0800c4b4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c4bc:	f000 f818 	bl	800c4f0 <BSP_SD_AbortCallback>
}
 800c4c0:	bf00      	nop
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c4d0:	f000 f815 	bl	800c4fe <BSP_SD_WriteCpltCallback>
}
 800c4d4:	bf00      	nop
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c4e4:	f000 f812 	bl	800c50c <BSP_SD_ReadCpltCallback>
}
 800c4e8:	bf00      	nop
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	af00      	add	r7, sp, #0

}
 800c4f4:	bf00      	nop
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr

0800c4fe <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800c4fe:	b480      	push	{r7}
 800c500:	af00      	add	r7, sp, #0

}
 800c502:	bf00      	nop
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800c50c:	b480      	push	{r7}
 800c50e:	af00      	add	r7, sp, #0

}
 800c510:	bf00      	nop
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b083      	sub	sp, #12
 800c51e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c520:	2301      	movs	r3, #1
 800c522:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 800c524:	79fb      	ldrb	r3, [r7, #7]
 800c526:	b2db      	uxtb	r3, r3
}
 800c528:	4618      	mov	r0, r3
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	4603      	mov	r3, r0
 800c53c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c53e:	4b0b      	ldr	r3, [pc, #44]	; (800c56c <SD_CheckStatus+0x38>)
 800c540:	2201      	movs	r2, #1
 800c542:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c544:	f7ff ff98 	bl	800c478 <BSP_SD_GetCardState>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d107      	bne.n	800c55e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c54e:	4b07      	ldr	r3, [pc, #28]	; (800c56c <SD_CheckStatus+0x38>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	b2db      	uxtb	r3, r3
 800c554:	f023 0301 	bic.w	r3, r3, #1
 800c558:	b2da      	uxtb	r2, r3
 800c55a:	4b04      	ldr	r3, [pc, #16]	; (800c56c <SD_CheckStatus+0x38>)
 800c55c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c55e:	4b03      	ldr	r3, [pc, #12]	; (800c56c <SD_CheckStatus+0x38>)
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	b2db      	uxtb	r3, r3
}
 800c564:	4618      	mov	r0, r3
 800c566:	3708      	adds	r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	20000055 	.word	0x20000055

0800c570 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	4603      	mov	r3, r0
 800c578:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800c57a:	4b0b      	ldr	r3, [pc, #44]	; (800c5a8 <SD_initialize+0x38>)
 800c57c:	2201      	movs	r2, #1
 800c57e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c580:	f7ff ff26 	bl	800c3d0 <BSP_SD_Init>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d107      	bne.n	800c59a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff ffd1 	bl	800c534 <SD_CheckStatus>
 800c592:	4603      	mov	r3, r0
 800c594:	461a      	mov	r2, r3
 800c596:	4b04      	ldr	r3, [pc, #16]	; (800c5a8 <SD_initialize+0x38>)
 800c598:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800c59a:	4b03      	ldr	r3, [pc, #12]	; (800c5a8 <SD_initialize+0x38>)
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	b2db      	uxtb	r3, r3
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	20000055 	.word	0x20000055

0800c5ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c5b6:	79fb      	ldrb	r3, [r7, #7]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7ff ffbb 	bl	800c534 <SD_CheckStatus>
 800c5be:	4603      	mov	r3, r0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b086      	sub	sp, #24
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60b9      	str	r1, [r7, #8]
 800c5d0:	607a      	str	r2, [r7, #4]
 800c5d2:	603b      	str	r3, [r7, #0]
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	6879      	ldr	r1, [r7, #4]
 800c5e4:	68b8      	ldr	r0, [r7, #8]
 800c5e6:	f7ff ff0b 	bl	800c400 <BSP_SD_ReadBlocks>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d107      	bne.n	800c600 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c5f0:	bf00      	nop
 800c5f2:	f7ff ff41 	bl	800c478 <BSP_SD_GetCardState>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1fa      	bne.n	800c5f2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c600:	7dfb      	ldrb	r3, [r7, #23]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3718      	adds	r7, #24
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b086      	sub	sp, #24
 800c60e:	af00      	add	r7, sp, #0
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	603b      	str	r3, [r7, #0]
 800c616:	4603      	mov	r3, r0
 800c618:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c61e:	f04f 33ff 	mov.w	r3, #4294967295
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	6879      	ldr	r1, [r7, #4]
 800c626:	68b8      	ldr	r0, [r7, #8]
 800c628:	f7ff ff08 	bl	800c43c <BSP_SD_WriteBlocks>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d107      	bne.n	800c642 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c632:	bf00      	nop
 800c634:	f7ff ff20 	bl	800c478 <BSP_SD_GetCardState>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1fa      	bne.n	800c634 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c63e:	2300      	movs	r3, #0
 800c640:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c642:	7dfb      	ldrb	r3, [r7, #23]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3718      	adds	r7, #24
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b08c      	sub	sp, #48	; 0x30
 800c650:	af00      	add	r7, sp, #0
 800c652:	4603      	mov	r3, r0
 800c654:	603a      	str	r2, [r7, #0]
 800c656:	71fb      	strb	r3, [r7, #7]
 800c658:	460b      	mov	r3, r1
 800c65a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c662:	4b25      	ldr	r3, [pc, #148]	; (800c6f8 <SD_ioctl+0xac>)
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	b2db      	uxtb	r3, r3
 800c668:	f003 0301 	and.w	r3, r3, #1
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d001      	beq.n	800c674 <SD_ioctl+0x28>
 800c670:	2303      	movs	r3, #3
 800c672:	e03c      	b.n	800c6ee <SD_ioctl+0xa2>

  switch (cmd)
 800c674:	79bb      	ldrb	r3, [r7, #6]
 800c676:	2b03      	cmp	r3, #3
 800c678:	d834      	bhi.n	800c6e4 <SD_ioctl+0x98>
 800c67a:	a201      	add	r2, pc, #4	; (adr r2, 800c680 <SD_ioctl+0x34>)
 800c67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c680:	0800c691 	.word	0x0800c691
 800c684:	0800c699 	.word	0x0800c699
 800c688:	0800c6b1 	.word	0x0800c6b1
 800c68c:	0800c6cb 	.word	0x0800c6cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c690:	2300      	movs	r3, #0
 800c692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c696:	e028      	b.n	800c6ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c698:	f107 030c 	add.w	r3, r7, #12
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7ff fefb 	bl	800c498 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c6a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6ae:	e01c      	b.n	800c6ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6b0:	f107 030c 	add.w	r3, r7, #12
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7ff feef 	bl	800c498 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6c8:	e00f      	b.n	800c6ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6ca:	f107 030c 	add.w	r3, r7, #12
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7ff fee2 	bl	800c498 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d6:	0a5a      	lsrs	r2, r3, #9
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6e2:	e002      	b.n	800c6ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c6e4:	2304      	movs	r3, #4
 800c6e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c6ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3730      	adds	r7, #48	; 0x30
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	20000055 	.word	0x20000055

0800c6fc <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 800c700:	4b07      	ldr	r3, [pc, #28]	; (800c720 <rfalAnalogConfigInitialize+0x24>)
 800c702:	4a08      	ldr	r2, [pc, #32]	; (800c724 <rfalAnalogConfigInitialize+0x28>)
 800c704:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 800c706:	4b06      	ldr	r3, [pc, #24]	; (800c720 <rfalAnalogConfigInitialize+0x24>)
 800c708:	f240 22bb 	movw	r2, #699	; 0x2bb
 800c70c:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800c70e:	4b04      	ldr	r3, [pc, #16]	; (800c720 <rfalAnalogConfigInitialize+0x24>)
 800c710:	2201      	movs	r2, #1
 800c712:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 800c714:	bf00      	nop
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	20000744 	.word	0x20000744
 800c724:	0801a21c 	.word	0x0801a21c

0800c728 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b086      	sub	sp, #24
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800c732:	2300      	movs	r3, #0
 800c734:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 800c736:	2300      	movs	r3, #0
 800c738:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 800c73a:	4b4b      	ldr	r3, [pc, #300]	; (800c868 <rfalSetAnalogConfig+0x140>)
 800c73c:	799b      	ldrb	r3, [r3, #6]
 800c73e:	f083 0301 	eor.w	r3, r3, #1
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2b00      	cmp	r3, #0
 800c746:	d001      	beq.n	800c74c <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 800c748:	2305      	movs	r3, #5
 800c74a:	e089      	b.n	800c860 <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800c74c:	f107 020e 	add.w	r2, r7, #14
 800c750:	88fb      	ldrh	r3, [r7, #6]
 800c752:	4611      	mov	r1, r2
 800c754:	4618      	mov	r0, r3
 800c756:	f000 f889 	bl	800c86c <rfalAnalogConfigSearch>
 800c75a:	4603      	mov	r3, r0
 800c75c:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800c75e:	7d3b      	ldrb	r3, [r7, #20]
 800c760:	2bff      	cmp	r3, #255	; 0xff
 800c762:	d07b      	beq.n	800c85c <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800c764:	4b40      	ldr	r3, [pc, #256]	; (800c868 <rfalSetAnalogConfig+0x140>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	461a      	mov	r2, r3
 800c76a:	89fb      	ldrh	r3, [r7, #14]
 800c76c:	4413      	add	r3, r2
 800c76e:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800c770:	7d3b      	ldrb	r3, [r7, #20]
 800c772:	b29b      	uxth	r3, r3
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	b29a      	uxth	r2, r3
 800c778:	89fb      	ldrh	r3, [r7, #14]
 800c77a:	4413      	add	r3, r2
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800c780:	4b39      	ldr	r3, [pc, #228]	; (800c868 <rfalSetAnalogConfig+0x140>)
 800c782:	889b      	ldrh	r3, [r3, #4]
 800c784:	3301      	adds	r3, #1
 800c786:	89fa      	ldrh	r2, [r7, #14]
 800c788:	4293      	cmp	r3, r2
 800c78a:	d201      	bcs.n	800c790 <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 800c78c:	2301      	movs	r3, #1
 800c78e:	e067      	b.n	800c860 <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 800c790:	2300      	movs	r3, #0
 800c792:	757b      	strb	r3, [r7, #21]
 800c794:	e05d      	b.n	800c852 <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800c796:	7d7b      	ldrb	r3, [r7, #21]
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	693a      	ldr	r2, [r7, #16]
 800c79c:	4413      	add	r3, r2
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	021b      	lsls	r3, r3, #8
 800c7a2:	7d7a      	ldrb	r2, [r7, #21]
 800c7a4:	0092      	lsls	r2, r2, #2
 800c7a6:	6939      	ldr	r1, [r7, #16]
 800c7a8:	440a      	add	r2, r1
 800c7aa:	7852      	ldrb	r2, [r2, #1]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d026      	beq.n	800c804 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800c7b6:	7d7b      	ldrb	r3, [r7, #21]
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	693a      	ldr	r2, [r7, #16]
 800c7bc:	4413      	add	r3, r2
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	021b      	lsls	r3, r3, #8
 800c7c2:	b21a      	sxth	r2, r3
 800c7c4:	7d7b      	ldrb	r3, [r7, #21]
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	6939      	ldr	r1, [r7, #16]
 800c7ca:	440b      	add	r3, r1
 800c7cc:	785b      	ldrb	r3, [r3, #1]
 800c7ce:	b21b      	sxth	r3, r3
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	b21b      	sxth	r3, r3
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7da:	b298      	uxth	r0, r3
 800c7dc:	7d7b      	ldrb	r3, [r7, #21]
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	693a      	ldr	r2, [r7, #16]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	7899      	ldrb	r1, [r3, #2]
 800c7e6:	7d7b      	ldrb	r3, [r7, #21]
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	693a      	ldr	r2, [r7, #16]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	78db      	ldrb	r3, [r3, #3]
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	f002 fc81 	bl	800f0f8 <rfalChipChangeTestRegBits>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	82fb      	strh	r3, [r7, #22]
 800c7fa:	8afb      	ldrh	r3, [r7, #22]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d025      	beq.n	800c84c <rfalSetAnalogConfig+0x124>
 800c800:	8afb      	ldrh	r3, [r7, #22]
 800c802:	e02d      	b.n	800c860 <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800c804:	7d7b      	ldrb	r3, [r7, #21]
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	4413      	add	r3, r2
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	021b      	lsls	r3, r3, #8
 800c810:	b21a      	sxth	r2, r3
 800c812:	7d7b      	ldrb	r3, [r7, #21]
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	6939      	ldr	r1, [r7, #16]
 800c818:	440b      	add	r3, r1
 800c81a:	785b      	ldrb	r3, [r3, #1]
 800c81c:	b21b      	sxth	r3, r3
 800c81e:	4313      	orrs	r3, r2
 800c820:	b21b      	sxth	r3, r3
 800c822:	b298      	uxth	r0, r3
 800c824:	7d7b      	ldrb	r3, [r7, #21]
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	4413      	add	r3, r2
 800c82c:	7899      	ldrb	r1, [r3, #2]
 800c82e:	7d7b      	ldrb	r3, [r7, #21]
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	4413      	add	r3, r2
 800c836:	78db      	ldrb	r3, [r3, #3]
 800c838:	461a      	mov	r2, r3
 800c83a:	f002 fc3b 	bl	800f0b4 <rfalChipChangeRegBits>
 800c83e:	4603      	mov	r3, r0
 800c840:	82fb      	strh	r3, [r7, #22]
 800c842:	8afb      	ldrh	r3, [r7, #22]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <rfalSetAnalogConfig+0x124>
 800c848:	8afb      	ldrh	r3, [r7, #22]
 800c84a:	e009      	b.n	800c860 <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 800c84c:	7d7b      	ldrb	r3, [r7, #21]
 800c84e:	3301      	adds	r3, #1
 800c850:	757b      	strb	r3, [r7, #21]
 800c852:	7d7a      	ldrb	r2, [r7, #21]
 800c854:	7d3b      	ldrb	r3, [r7, #20]
 800c856:	429a      	cmp	r2, r3
 800c858:	d39d      	bcc.n	800c796 <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800c85a:	e777      	b.n	800c74c <rfalSetAnalogConfig+0x24>
            break;
 800c85c:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800c85e:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800c860:	4618      	mov	r0, r3
 800c862:	3718      	adds	r7, #24
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	20000744 	.word	0x20000744

0800c86c <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 800c86c:	b480      	push	{r7}
 800c86e:	b087      	sub	sp, #28
 800c870:	af00      	add	r7, sp, #0
 800c872:	4603      	mov	r3, r0
 800c874:	6039      	str	r1, [r7, #0]
 800c876:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800c878:	4b31      	ldr	r3, [pc, #196]	; (800c940 <rfalAnalogConfigSearch+0xd4>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	613b      	str	r3, [r7, #16]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 800c87e:	88fb      	ldrh	r3, [r7, #6]
 800c880:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800c884:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00a      	beq.n	800c8a0 <rfalAnalogConfigSearch+0x34>
 800c88a:	88fb      	ldrh	r3, [r7, #6]
 800c88c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c898:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	e001      	b.n	800c8a4 <rfalAnalogConfigSearch+0x38>
 800c8a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8a4:	88fb      	ldrh	r3, [r7, #6]
 800c8a6:	f003 030f 	and.w	r3, r3, #15
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d001      	beq.n	800c8b4 <rfalAnalogConfigSearch+0x48>
 800c8b0:	88fb      	ldrh	r3, [r7, #6]
 800c8b2:	e000      	b.n	800c8b6 <rfalAnalogConfigSearch+0x4a>
 800c8b4:	230f      	movs	r3, #15
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	82fb      	strh	r3, [r7, #22]
                       );
    
    
    /* When specific ConfigIDs are to be used, override search mask */
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 800c8ba:	88fb      	ldrh	r3, [r7, #6]
 800c8bc:	f003 030f 	and.w	r3, r3, #15
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	2b04      	cmp	r3, #4
 800c8c4:	d102      	bne.n	800c8cc <rfalAnalogConfigSearch+0x60>
    {
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
 800c8c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8ca:	82fb      	strh	r3, [r7, #22]
    }
    
    
    i = *configOffset;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	881b      	ldrh	r3, [r3, #0]
 800c8d0:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800c8d2:	e029      	b.n	800c928 <rfalAnalogConfigSearch+0xbc>
    {
        configTbl = &currentConfigTbl[i];
 800c8d4:	8abb      	ldrh	r3, [r7, #20]
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	4413      	add	r3, r2
 800c8da:	60fb      	str	r3, [r7, #12]
        foundConfigId = GETU16(configTbl);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	021b      	lsls	r3, r3, #8
 800c8e2:	b21a      	sxth	r2, r3
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	b21b      	sxth	r3, r3
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	b21b      	sxth	r3, r3
 800c8f0:	817b      	strh	r3, [r7, #10]
        if (configId == (foundConfigId & configIdMaskVal))
 800c8f2:	897a      	ldrh	r2, [r7, #10]
 800c8f4:	8afb      	ldrh	r3, [r7, #22]
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	88fa      	ldrh	r2, [r7, #6]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d108      	bne.n	800c912 <rfalAnalogConfigSearch+0xa6>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800c900:	8abb      	ldrh	r3, [r7, #20]
 800c902:	3303      	adds	r3, #3
 800c904:	b29a      	uxth	r2, r3
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3302      	adds	r3, #2
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	e010      	b.n	800c934 <rfalAnalogConfigSearch+0xc8>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	3302      	adds	r3, #2
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	b29b      	uxth	r3, r3
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800c91e:	8abb      	ldrh	r3, [r7, #20]
 800c920:	4413      	add	r3, r2
 800c922:	b29b      	uxth	r3, r3
 800c924:	3303      	adds	r3, #3
 800c926:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800c928:	4b05      	ldr	r3, [pc, #20]	; (800c940 <rfalAnalogConfigSearch+0xd4>)
 800c92a:	889b      	ldrh	r3, [r3, #4]
 800c92c:	8aba      	ldrh	r2, [r7, #20]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d3d0      	bcc.n	800c8d4 <rfalAnalogConfigSearch+0x68>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 800c932:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 800c934:	4618      	mov	r0, r3
 800c936:	371c      	adds	r7, #28
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr
 800c940:	20000744 	.word	0x20000744

0800c944 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	4603      	mov	r3, r0
 800c94c:	6039      	str	r1, [r7, #0]
 800c94e:	80fb      	strh	r3, [r7, #6]
 800c950:	4613      	mov	r3, r2
 800c952:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 800c954:	88fb      	ldrh	r3, [r7, #6]
 800c956:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 800c958:	2300      	movs	r3, #0
 800c95a:	81bb      	strh	r3, [r7, #12]
 800c95c:	e00d      	b.n	800c97a <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 800c95e:	89bb      	ldrh	r3, [r7, #12]
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	4413      	add	r3, r2
 800c964:	781a      	ldrb	r2, [r3, #0]
 800c966:	89fb      	ldrh	r3, [r7, #14]
 800c968:	4611      	mov	r1, r2
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 f80e 	bl	800c98c <rfalCrcUpdateCcitt>
 800c970:	4603      	mov	r3, r0
 800c972:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 800c974:	89bb      	ldrh	r3, [r7, #12]
 800c976:	3301      	adds	r3, #1
 800c978:	81bb      	strh	r3, [r7, #12]
 800c97a:	89ba      	ldrh	r2, [r7, #12]
 800c97c:	88bb      	ldrh	r3, [r7, #4]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d3ed      	bcc.n	800c95e <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 800c982:	89fb      	ldrh	r3, [r7, #14]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	4603      	mov	r3, r0
 800c994:	460a      	mov	r2, r1
 800c996:	80fb      	strh	r3, [r7, #6]
 800c998:	4613      	mov	r3, r2
 800c99a:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 800c99c:	88fb      	ldrh	r3, [r7, #6]
 800c99e:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 800c9a0:	797b      	ldrb	r3, [r7, #5]
 800c9a2:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800c9a4:	89fb      	ldrh	r3, [r7, #14]
 800c9a6:	b2da      	uxtb	r2, r3
 800c9a8:	7b7b      	ldrb	r3, [r7, #13]
 800c9aa:	4053      	eors	r3, r2
 800c9ac:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 800c9ae:	7b7b      	ldrb	r3, [r7, #13]
 800c9b0:	011b      	lsls	r3, r3, #4
 800c9b2:	b25a      	sxtb	r2, r3
 800c9b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c9b8:	4053      	eors	r3, r2
 800c9ba:	b25b      	sxtb	r3, r3
 800c9bc:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800c9be:	89fb      	ldrh	r3, [r7, #14]
 800c9c0:	0a1b      	lsrs	r3, r3, #8
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	b21a      	sxth	r2, r3
 800c9c6:	7b7b      	ldrb	r3, [r7, #13]
 800c9c8:	021b      	lsls	r3, r3, #8
 800c9ca:	b21b      	sxth	r3, r3
 800c9cc:	4053      	eors	r3, r2
 800c9ce:	b21a      	sxth	r2, r3
 800c9d0:	7b7b      	ldrb	r3, [r7, #13]
 800c9d2:	00db      	lsls	r3, r3, #3
 800c9d4:	b21b      	sxth	r3, r3
 800c9d6:	4053      	eors	r3, r2
 800c9d8:	b21a      	sxth	r2, r3
 800c9da:	7b7b      	ldrb	r3, [r7, #13]
 800c9dc:	091b      	lsrs	r3, r3, #4
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	b21b      	sxth	r3, r3
 800c9e2:	4053      	eors	r3, r2
 800c9e4:	b21b      	sxth	r3, r3
 800c9e6:	81fb      	strh	r3, [r7, #14]

    return crc;
 800c9e8:	89fb      	ldrh	r3, [r7, #14]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3714      	adds	r7, #20
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr
	...

0800c9f8 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800ca02:	2208      	movs	r2, #8
 800ca04:	6879      	ldr	r1, [r7, #4]
 800ca06:	480d      	ldr	r0, [pc, #52]	; (800ca3c <iso15693PhyConfigure+0x44>)
 800ca08:	f009 fa33 	bl	8015e72 <memcpy>
    
    if ( config->speedMode <= 3U)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	2b03      	cmp	r3, #3
 800ca12:	d808      	bhi.n	800ca26 <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	f1c3 0303 	rsb	r3, r3, #3
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	4b07      	ldr	r3, [pc, #28]	; (800ca40 <iso15693PhyConfigure+0x48>)
 800ca22:	70da      	strb	r2, [r3, #3]
 800ca24:	e002      	b.n	800ca2c <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 800ca26:	4b06      	ldr	r3, [pc, #24]	; (800ca40 <iso15693PhyConfigure+0x48>)
 800ca28:	2203      	movs	r2, #3
 800ca2a:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	4a04      	ldr	r2, [pc, #16]	; (800ca40 <iso15693PhyConfigure+0x48>)
 800ca30:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	2000074c 	.word	0x2000074c
 800ca40:	20000058 	.word	0x20000058

0800ca44 <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 800ca44:	b590      	push	{r4, r7, lr}
 800ca46:	b08b      	sub	sp, #44	; 0x2c
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	4608      	mov	r0, r1
 800ca4e:	4611      	mov	r1, r2
 800ca50:	461a      	mov	r2, r3
 800ca52:	4603      	mov	r3, r0
 800ca54:	807b      	strh	r3, [r7, #2]
 800ca56:	460b      	mov	r3, r1
 800ca58:	707b      	strb	r3, [r7, #1]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 800ca66:	787b      	ldrb	r3, [r7, #1]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d001      	beq.n	800ca70 <iso15693VCDCode+0x2c>
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	e000      	b.n	800ca72 <iso15693VCDCode+0x2e>
 800ca70:	2300      	movs	r3, #0
 800ca72:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 800ca74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca76:	2200      	movs	r2, #0
 800ca78:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 800ca7a:	4b94      	ldr	r3, [pc, #592]	; (800cccc <iso15693VCDCode+0x288>)
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d117      	bne.n	800cab2 <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 800ca82:	2321      	movs	r3, #33	; 0x21
 800ca84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 800ca88:	2304      	movs	r3, #4
 800ca8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 800ca8e:	4b90      	ldr	r3, [pc, #576]	; (800ccd0 <iso15693VCDCode+0x28c>)
 800ca90:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 800ca92:	887a      	ldrh	r2, [r7, #2]
 800ca94:	7d7b      	ldrb	r3, [r7, #21]
 800ca96:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	3302      	adds	r3, #2
 800caa0:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800caa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa4:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800caa6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800caaa:	2b04      	cmp	r3, #4
 800caac:	d823      	bhi.n	800caf6 <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 800caae:	2301      	movs	r3, #1
 800cab0:	e13a      	b.n	800cd28 <iso15693VCDCode+0x2e4>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 800cab2:	2381      	movs	r3, #129	; 0x81
 800cab4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 800cab8:	2304      	movs	r3, #4
 800caba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 800cabe:	4b85      	ldr	r3, [pc, #532]	; (800ccd4 <iso15693VCDCode+0x290>)
 800cac0:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 800cac2:	887a      	ldrh	r2, [r7, #2]
 800cac4:	7d7b      	ldrb	r3, [r7, #21]
 800cac6:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800cac8:	b29b      	uxth	r3, r3
 800caca:	019b      	lsls	r3, r3, #6
 800cacc:	b29b      	uxth	r3, r3
 800cace:	3302      	adds	r3, #2
 800cad0:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800cad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad4:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 800cad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d005      	beq.n	800caea <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800cade:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cae2:	2b3f      	cmp	r3, #63	; 0x3f
 800cae4:	d807      	bhi.n	800caf6 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e11e      	b.n	800cd28 <iso15693VCDCode+0x2e4>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800caea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800caee:	2b40      	cmp	r3, #64	; 0x40
 800caf0:	d801      	bhi.n	800caf6 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800caf2:	2301      	movs	r3, #1
 800caf4:	e118      	b.n	800cd28 <iso15693VCDCode+0x2e4>
            }
        }
    }

    if (length == 0U)
 800caf6:	887b      	ldrh	r3, [r7, #2]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d102      	bne.n	800cb02 <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 800cafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cafe:	2201      	movs	r2, #1
 800cb00:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800cb02:	887b      	ldrh	r3, [r7, #2]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d01b      	beq.n	800cb40 <iso15693VCDCode+0xfc>
 800cb08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb0a:	881b      	ldrh	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d117      	bne.n	800cb40 <iso15693VCDCode+0xfc>
 800cb10:	783b      	ldrb	r3, [r7, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d014      	beq.n	800cb40 <iso15693VCDCode+0xfc>
 800cb16:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800cb1a:	f083 0301 	eor.w	r3, r3, #1
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00d      	beq.n	800cb40 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	f043 0302 	orr.w	r3, r3, #2
 800cb2c:	b2da      	uxtb	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	f023 0301 	bic.w	r3, r3, #1
 800cb3a:	b2da      	uxtb	r2, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 800cb40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb42:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 800cb44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cb48:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 800cb4a:	887b      	ldrh	r3, [r7, #2]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d03b      	beq.n	800cbc8 <iso15693VCDCode+0x184>
 800cb50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d137      	bne.n	800cbc8 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800cb5e:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800cb60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb62:	881b      	ldrh	r3, [r3, #0]
 800cb64:	3301      	adds	r3, #1
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb6a:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800cb6c:	8afb      	ldrh	r3, [r7, #22]
 800cb6e:	3b01      	subs	r3, #1
 800cb70:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	3301      	adds	r3, #1
 800cb76:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 800cb78:	e026      	b.n	800cbc8 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800cb7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb7c:	881b      	ldrh	r3, [r3, #0]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4413      	add	r3, r2
 800cb84:	7818      	ldrb	r0, [r3, #0]
 800cb86:	f107 030e 	add.w	r3, r7, #14
 800cb8a:	8afa      	ldrh	r2, [r7, #22]
 800cb8c:	69fc      	ldr	r4, [r7, #28]
 800cb8e:	69b9      	ldr	r1, [r7, #24]
 800cb90:	47a0      	blx	r4
 800cb92:	4603      	mov	r3, r0
 800cb94:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800cb96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb98:	881a      	ldrh	r2, [r3, #0]
 800cb9a:	89fb      	ldrh	r3, [r7, #14]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cba2:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800cba4:	89fb      	ldrh	r3, [r7, #14]
 800cba6:	461a      	mov	r2, r3
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	4413      	add	r3, r2
 800cbac:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800cbae:	89fb      	ldrh	r3, [r7, #14]
 800cbb0:	8afa      	ldrh	r2, [r7, #22]
 800cbb2:	1ad3      	subs	r3, r2, r3
 800cbb4:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800cbb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d105      	bne.n	800cbc8 <iso15693VCDCode+0x184>
            (*offset)++;
 800cbbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbc6:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 800cbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbca:	881b      	ldrh	r3, [r3, #0]
 800cbcc:	887a      	ldrh	r2, [r7, #2]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d902      	bls.n	800cbd8 <iso15693VCDCode+0x194>
 800cbd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d0d0      	beq.n	800cb7a <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 800cbd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d063      	beq.n	800cca6 <iso15693VCDCode+0x262>
        return ERR_AGAIN;
 800cbde:	230d      	movs	r3, #13
 800cbe0:	e0a2      	b.n	800cd28 <iso15693VCDCode+0x2e4>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800cbe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d12b      	bne.n	800cc40 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800cbe8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d002      	beq.n	800cbf6 <iso15693VCDCode+0x1b2>
 800cbf0:	f24e 0012 	movw	r0, #57362	; 0xe012
 800cbf4:	e001      	b.n	800cbfa <iso15693VCDCode+0x1b6>
 800cbf6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cbfa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d002      	beq.n	800cc08 <iso15693VCDCode+0x1c4>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	3301      	adds	r3, #1
 800cc06:	e000      	b.n	800cc0a <iso15693VCDCode+0x1c6>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cc0e:	2a00      	cmp	r2, #0
 800cc10:	d003      	beq.n	800cc1a <iso15693VCDCode+0x1d6>
 800cc12:	887a      	ldrh	r2, [r7, #2]
 800cc14:	3a01      	subs	r2, #1
 800cc16:	b292      	uxth	r2, r2
 800cc18:	e000      	b.n	800cc1c <iso15693VCDCode+0x1d8>
 800cc1a:	887a      	ldrh	r2, [r7, #2]
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	f7ff fe91 	bl	800c944 <rfalCrcCalculateCcitt>
 800cc22:	4603      	mov	r3, r0
 800cc24:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800cc26:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800cc2a:	f083 0301 	eor.w	r3, r3, #1
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d003      	beq.n	800cc3c <iso15693VCDCode+0x1f8>
 800cc34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc36:	43db      	mvns	r3, r3
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	e000      	b.n	800cc3e <iso15693VCDCode+0x1fa>
 800cc3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc3e:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800cc40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 800cc46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc48:	0a1b      	lsrs	r3, r3, #8
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800cc50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc52:	881b      	ldrh	r3, [r3, #0]
 800cc54:	461a      	mov	r2, r3
 800cc56:	887b      	ldrh	r3, [r7, #2]
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cc5e:	4413      	add	r3, r2
 800cc60:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 800cc64:	f107 030c 	add.w	r3, r7, #12
 800cc68:	8afa      	ldrh	r2, [r7, #22]
 800cc6a:	69fc      	ldr	r4, [r7, #28]
 800cc6c:	69b9      	ldr	r1, [r7, #24]
 800cc6e:	47a0      	blx	r4
 800cc70:	4603      	mov	r3, r0
 800cc72:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800cc74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc76:	881a      	ldrh	r2, [r3, #0]
 800cc78:	89bb      	ldrh	r3, [r7, #12]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc80:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800cc82:	89bb      	ldrh	r3, [r7, #12]
 800cc84:	461a      	mov	r2, r3
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	4413      	add	r3, r2
 800cc8a:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800cc8c:	89bb      	ldrh	r3, [r7, #12]
 800cc8e:	8afa      	ldrh	r2, [r7, #22]
 800cc90:	1ad3      	subs	r3, r2, r3
 800cc92:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800cc94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d105      	bne.n	800cca6 <iso15693VCDCode+0x262>
            (*offset)++;
 800cc9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc9c:	881b      	ldrh	r3, [r3, #0]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cca4:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800cca6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d109      	bne.n	800ccc0 <iso15693VCDCode+0x27c>
 800ccac:	787b      	ldrb	r3, [r7, #1]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d006      	beq.n	800ccc0 <iso15693VCDCode+0x27c>
 800ccb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccb4:	881b      	ldrh	r3, [r3, #0]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	887b      	ldrh	r3, [r7, #2]
 800ccba:	3302      	adds	r3, #2
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d390      	bcc.n	800cbe2 <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 800ccc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d008      	beq.n	800ccd8 <iso15693VCDCode+0x294>
        return ERR_AGAIN;
 800ccc6:	230d      	movs	r3, #13
 800ccc8:	e02e      	b.n	800cd28 <iso15693VCDCode+0x2e4>
 800ccca:	bf00      	nop
 800cccc:	2000074c 	.word	0x2000074c
 800ccd0:	0800cf6d 	.word	0x0800cf6d
 800ccd4:	0800d015 	.word	0x0800d015
    }

    if ((!sendCrc && (*offset == length))
 800ccd8:	787b      	ldrb	r3, [r7, #1]
 800ccda:	f083 0301 	eor.w	r3, r3, #1
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d004      	beq.n	800ccee <iso15693VCDCode+0x2aa>
 800cce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cce6:	881b      	ldrh	r3, [r3, #0]
 800cce8:	887a      	ldrh	r2, [r7, #2]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d009      	beq.n	800cd02 <iso15693VCDCode+0x2be>
            || (sendCrc && (*offset == (length + 2U))))
 800ccee:	787b      	ldrb	r3, [r7, #1]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d018      	beq.n	800cd26 <iso15693VCDCode+0x2e2>
 800ccf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccf6:	881b      	ldrh	r3, [r3, #0]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	887b      	ldrh	r3, [r7, #2]
 800ccfc:	3302      	adds	r3, #2
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d111      	bne.n	800cd26 <iso15693VCDCode+0x2e2>
    {
        *outputBuf = eof; 
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800cd08:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800cd0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd0c:	881b      	ldrh	r3, [r3, #0]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd14:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800cd16:	8afb      	ldrh	r3, [r7, #22]
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 800cd22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cd24:	e000      	b.n	800cd28 <iso15693VCDCode+0x2e4>
        return ERR_AGAIN;
 800cd26:	230d      	movs	r3, #13
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	372c      	adds	r7, #44	; 0x2c
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd90      	pop	{r4, r7, pc}

0800cd30 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b088      	sub	sp, #32
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	607a      	str	r2, [r7, #4]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	817b      	strh	r3, [r7, #10]
 800cd40:	4613      	mov	r3, r2
 800cd42:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 800cd44:	2300      	movs	r3, #0
 800cd46:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 800cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 800cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd50:	2200      	movs	r2, #0
 800cd52:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	f003 031f 	and.w	r3, r3, #31
 800cd5c:	2b17      	cmp	r3, #23
 800cd5e:	d001      	beq.n	800cd64 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 800cd60:	2309      	movs	r3, #9
 800cd62:	e0ff      	b.n	800cf64 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 800cd64:	893b      	ldrh	r3, [r7, #8]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d101      	bne.n	800cd6e <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e0fa      	b.n	800cf64 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800cd6e:	2305      	movs	r3, #5
 800cd70:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 800cd72:	2300      	movs	r3, #0
 800cd74:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 800cd76:	893b      	ldrh	r3, [r7, #8]
 800cd78:	461a      	mov	r2, r3
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f009 f883 	bl	8015e88 <memset>

    if (inBufLen == 0U)
 800cd82:	897b      	ldrh	r3, [r7, #10]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f040 808e 	bne.w	800cea6 <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 800cd8a:	2315      	movs	r3, #21
 800cd8c:	e0ea      	b.n	800cf64 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800cd92:	8bbb      	ldrh	r3, [r7, #28]
 800cd94:	08db      	lsrs	r3, r3, #3
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	461a      	mov	r2, r3
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	461a      	mov	r2, r3
 800cda2:	8bbb      	ldrh	r3, [r7, #28]
 800cda4:	f003 0307 	and.w	r3, r3, #7
 800cda8:	fa42 f303 	asr.w	r3, r2, r3
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	f003 0301 	and.w	r3, r3, #1
 800cdb2:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800cdb4:	8bbb      	ldrh	r3, [r7, #28]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	08db      	lsrs	r3, r3, #3
 800cdba:	68fa      	ldr	r2, [r7, #12]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	8bbb      	ldrh	r3, [r7, #28]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	f003 0307 	and.w	r3, r3, #7
 800cdca:	fa42 f303 	asr.w	r3, r2, r3
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	005b      	lsls	r3, r3, #1
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	f003 0302 	and.w	r3, r3, #2
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	7e3b      	ldrb	r3, [r7, #24]
 800cddc:	4313      	orrs	r3, r2
 800cdde:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 800cde0:	7e3b      	ldrb	r3, [r7, #24]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d102      	bne.n	800cdec <iso15693VICCDecode+0xbc>
        {
            bp++;
 800cde6:	8b7b      	ldrh	r3, [r7, #26]
 800cde8:	3301      	adds	r3, #1
 800cdea:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 800cdec:	7e3b      	ldrb	r3, [r7, #24]
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	d119      	bne.n	800ce26 <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800cdf2:	8b7b      	ldrh	r3, [r7, #26]
 800cdf4:	08db      	lsrs	r3, r3, #3
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	7819      	ldrb	r1, [r3, #0]
 800ce00:	8b7b      	ldrh	r3, [r7, #26]
 800ce02:	f003 0307 	and.w	r3, r3, #7
 800ce06:	2201      	movs	r2, #1
 800ce08:	fa02 f303 	lsl.w	r3, r2, r3
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	8b7b      	ldrh	r3, [r7, #26]
 800ce10:	08db      	lsrs	r3, r3, #3
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	4618      	mov	r0, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4403      	add	r3, r0
 800ce1a:	430a      	orrs	r2, r1
 800ce1c:	b2d2      	uxtb	r2, r2
 800ce1e:	701a      	strb	r2, [r3, #0]
            bp++;
 800ce20:	8b7b      	ldrh	r3, [r7, #26]
 800ce22:	3301      	adds	r3, #1
 800ce24:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800ce26:	8b7b      	ldrh	r3, [r7, #26]
 800ce28:	f003 0307 	and.w	r3, r3, #7
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d115      	bne.n	800ce5e <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 800ce32:	8bbb      	ldrh	r3, [r7, #28]
 800ce34:	08db      	lsrs	r3, r3, #3
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	461a      	mov	r2, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ce44:	2ba0      	cmp	r3, #160	; 0xa0
 800ce46:	d10a      	bne.n	800ce5e <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800ce48:	8bbb      	ldrh	r3, [r7, #28]
 800ce4a:	08db      	lsrs	r3, r3, #3
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	3301      	adds	r3, #1
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	4413      	add	r3, r2
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	2b03      	cmp	r3, #3
 800ce58:	d101      	bne.n	800ce5e <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 800ce5e:	7e3b      	ldrb	r3, [r7, #24]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d002      	beq.n	800ce6a <iso15693VICCDecode+0x13a>
 800ce64:	7e3b      	ldrb	r3, [r7, #24]
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	d10f      	bne.n	800ce8a <iso15693VICCDecode+0x15a>
 800ce6a:	7e7b      	ldrb	r3, [r7, #25]
 800ce6c:	f083 0301 	eor.w	r3, r3, #1
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d009      	beq.n	800ce8a <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 800ce76:	8b7a      	ldrh	r2, [r7, #26]
 800ce78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d302      	bcc.n	800ce84 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 800ce7e:	231d      	movs	r3, #29
 800ce80:	83fb      	strh	r3, [r7, #30]
 800ce82:	e002      	b.n	800ce8a <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 800ce84:	8b7b      	ldrh	r3, [r7, #26]
 800ce86:	3301      	adds	r3, #1
 800ce88:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800ce8a:	8b7a      	ldrh	r2, [r7, #26]
 800ce8c:	893b      	ldrh	r3, [r7, #8]
 800ce8e:	00db      	lsls	r3, r3, #3
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d20f      	bcs.n	800ceb4 <iso15693VICCDecode+0x184>
 800ce94:	8bfb      	ldrh	r3, [r7, #30]
 800ce96:	2b1d      	cmp	r3, #29
 800ce98:	d00c      	beq.n	800ceb4 <iso15693VICCDecode+0x184>
 800ce9a:	7e7b      	ldrb	r3, [r7, #25]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d109      	bne.n	800ceb4 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800cea0:	8bbb      	ldrh	r3, [r7, #28]
 800cea2:	3302      	adds	r3, #2
 800cea4:	83bb      	strh	r3, [r7, #28]
 800cea6:	8bba      	ldrh	r2, [r7, #28]
 800cea8:	897b      	ldrh	r3, [r7, #10]
 800ceaa:	00db      	lsls	r3, r3, #3
 800ceac:	3b02      	subs	r3, #2
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	f4ff af6d 	bcc.w	800cd8e <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 800ceb4:	8b7b      	ldrh	r3, [r7, #26]
 800ceb6:	08db      	lsrs	r3, r3, #3
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cebc:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 800cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec0:	8b7a      	ldrh	r2, [r7, #26]
 800cec2:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 800cec4:	8bfb      	ldrh	r3, [r7, #30]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <iso15693VICCDecode+0x19e>
    {
        return err;
 800ceca:	8bfb      	ldrh	r3, [r7, #30]
 800cecc:	e04a      	b.n	800cf64 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 800cece:	8b7b      	ldrh	r3, [r7, #26]
 800ced0:	f003 0307 	and.w	r3, r3, #7
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 800ceda:	2315      	movs	r3, #21
 800cedc:	e042      	b.n	800cf64 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 800cede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee0:	881b      	ldrh	r3, [r3, #0]
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d93b      	bls.n	800cf5e <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800cee6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d002      	beq.n	800cef4 <iso15693VICCDecode+0x1c4>
 800ceee:	f24e 0012 	movw	r0, #57362	; 0xe012
 800cef2:	e001      	b.n	800cef8 <iso15693VICCDecode+0x1c8>
 800cef4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefa:	881b      	ldrh	r3, [r3, #0]
 800cefc:	3b02      	subs	r3, #2
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	461a      	mov	r2, r3
 800cf02:	6879      	ldr	r1, [r7, #4]
 800cf04:	f7ff fd1e 	bl	800c944 <rfalCrcCalculateCcitt>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800cf0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800cf10:	f083 0301 	eor.w	r3, r3, #1
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d003      	beq.n	800cf22 <iso15693VICCDecode+0x1f2>
 800cf1a:	8afb      	ldrh	r3, [r7, #22]
 800cf1c:	43db      	mvns	r3, r3
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	e000      	b.n	800cf24 <iso15693VICCDecode+0x1f4>
 800cf22:	8afb      	ldrh	r3, [r7, #22]
 800cf24:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800cf26:	8afb      	ldrh	r3, [r7, #22]
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf2c:	8812      	ldrh	r2, [r2, #0]
 800cf2e:	3a02      	subs	r2, #2
 800cf30:	6879      	ldr	r1, [r7, #4]
 800cf32:	440a      	add	r2, r1
 800cf34:	7812      	ldrb	r2, [r2, #0]
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d10e      	bne.n	800cf58 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 800cf3a:	8afb      	ldrh	r3, [r7, #22]
 800cf3c:	0a1b      	lsrs	r3, r3, #8
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf44:	8812      	ldrh	r2, [r2, #0]
 800cf46:	3a01      	subs	r2, #1
 800cf48:	6879      	ldr	r1, [r7, #4]
 800cf4a:	440a      	add	r2, r1
 800cf4c:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d102      	bne.n	800cf58 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 800cf52:	2300      	movs	r3, #0
 800cf54:	83fb      	strh	r3, [r7, #30]
 800cf56:	e004      	b.n	800cf62 <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 800cf58:	2315      	movs	r3, #21
 800cf5a:	83fb      	strh	r3, [r7, #30]
 800cf5c:	e001      	b.n	800cf62 <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 800cf5e:	2315      	movs	r3, #21
 800cf60:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 800cf62:	8bfb      	ldrh	r3, [r7, #30]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3720      	adds	r7, #32
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b089      	sub	sp, #36	; 0x24
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60b9      	str	r1, [r7, #8]
 800cf74:	607b      	str	r3, [r7, #4]
 800cf76:	4603      	mov	r3, r0
 800cf78:	73fb      	strb	r3, [r7, #15]
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 800cf8c:	89bb      	ldrh	r3, [r7, #12]
 800cf8e:	2b03      	cmp	r3, #3
 800cf90:	d801      	bhi.n	800cf96 <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 800cf92:	2301      	movs	r3, #1
 800cf94:	e038      	b.n	800d008 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
 800cf98:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	83bb      	strh	r3, [r7, #28]
 800cf9e:	e02f      	b.n	800d000 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 800cfa0:	7ffb      	ldrb	r3, [r7, #31]
 800cfa2:	f003 0303 	and.w	r3, r3, #3
 800cfa6:	2b03      	cmp	r3, #3
 800cfa8:	d81a      	bhi.n	800cfe0 <iso15693PhyVCDCode1Of4+0x74>
 800cfaa:	a201      	add	r2, pc, #4	; (adr r2, 800cfb0 <iso15693PhyVCDCode1Of4+0x44>)
 800cfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb0:	0800cfc1 	.word	0x0800cfc1
 800cfb4:	0800cfc9 	.word	0x0800cfc9
 800cfb8:	0800cfd1 	.word	0x0800cfd1
 800cfbc:	0800cfd9 	.word	0x0800cfd9
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	701a      	strb	r2, [r3, #0]
                break;
 800cfc6:	e00c      	b.n	800cfe2 <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	2208      	movs	r2, #8
 800cfcc:	701a      	strb	r2, [r3, #0]
                break;
 800cfce:	e008      	b.n	800cfe2 <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 800cfd0:	69bb      	ldr	r3, [r7, #24]
 800cfd2:	2220      	movs	r2, #32
 800cfd4:	701a      	strb	r2, [r3, #0]
                break;
 800cfd6:	e004      	b.n	800cfe2 <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	2280      	movs	r2, #128	; 0x80
 800cfdc:	701a      	strb	r2, [r3, #0]
                break;
 800cfde:	e000      	b.n	800cfe2 <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 800cfe0:	bf00      	nop
        }
        outbuf++;
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	881b      	ldrh	r3, [r3, #0]
 800cfec:	3301      	adds	r3, #1
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 800cff4:	7ffb      	ldrb	r3, [r7, #31]
 800cff6:	089b      	lsrs	r3, r3, #2
 800cff8:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800cffa:	8bbb      	ldrh	r3, [r7, #28]
 800cffc:	3301      	adds	r3, #1
 800cffe:	83bb      	strh	r3, [r7, #28]
 800d000:	8bbb      	ldrh	r3, [r7, #28]
 800d002:	2b03      	cmp	r3, #3
 800d004:	d9cc      	bls.n	800cfa0 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 800d006:	8afb      	ldrh	r3, [r7, #22]
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3724      	adds	r7, #36	; 0x24
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d014:	b480      	push	{r7}
 800d016:	b089      	sub	sp, #36	; 0x24
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60b9      	str	r1, [r7, #8]
 800d01c:	607b      	str	r3, [r7, #4]
 800d01e:	4603      	mov	r3, r0
 800d020:	73fb      	strb	r3, [r7, #15]
 800d022:	4613      	mov	r3, r2
 800d024:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d026:	2300      	movs	r3, #0
 800d028:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 800d034:	89bb      	ldrh	r3, [r7, #12]
 800d036:	2b3f      	cmp	r3, #63	; 0x3f
 800d038:	d801      	bhi.n	800d03e <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 800d03a:	2301      	movs	r3, #1
 800d03c:	e039      	b.n	800d0b2 <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 800d03e:	7bfb      	ldrb	r3, [r7, #15]
 800d040:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d042:	2300      	movs	r3, #0
 800d044:	83bb      	strh	r3, [r7, #28]
 800d046:	e030      	b.n	800d0aa <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 800d048:	7ffb      	ldrb	r3, [r7, #31]
 800d04a:	2b03      	cmp	r3, #3
 800d04c:	d81a      	bhi.n	800d084 <iso15693PhyVCDCode1Of256+0x70>
 800d04e:	a201      	add	r2, pc, #4	; (adr r2, 800d054 <iso15693PhyVCDCode1Of256+0x40>)
 800d050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d054:	0800d065 	.word	0x0800d065
 800d058:	0800d06d 	.word	0x0800d06d
 800d05c:	0800d075 	.word	0x0800d075
 800d060:	0800d07d 	.word	0x0800d07d
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	2202      	movs	r2, #2
 800d068:	701a      	strb	r2, [r3, #0]
                break;
 800d06a:	e00f      	b.n	800d08c <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	2208      	movs	r2, #8
 800d070:	701a      	strb	r2, [r3, #0]
                break;
 800d072:	e00b      	b.n	800d08c <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	2220      	movs	r2, #32
 800d078:	701a      	strb	r2, [r3, #0]
                break;
 800d07a:	e007      	b.n	800d08c <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	2280      	movs	r2, #128	; 0x80
 800d080:	701a      	strb	r2, [r3, #0]
                break;
 800d082:	e003      	b.n	800d08c <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	2200      	movs	r2, #0
 800d088:	701a      	strb	r2, [r3, #0]
                break;               
 800d08a:	bf00      	nop
        }
        outbuf++;
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	3301      	adds	r3, #1
 800d090:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	881b      	ldrh	r3, [r3, #0]
 800d096:	3301      	adds	r3, #1
 800d098:	b29a      	uxth	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 800d09e:	7ffb      	ldrb	r3, [r7, #31]
 800d0a0:	3b04      	subs	r3, #4
 800d0a2:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d0a4:	8bbb      	ldrh	r3, [r7, #28]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	83bb      	strh	r3, [r7, #28]
 800d0aa:	8bbb      	ldrh	r3, [r7, #28]
 800d0ac:	2b3f      	cmp	r3, #63	; 0x3f
 800d0ae:	d9cb      	bls.n	800d048 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 800d0b0:	8afb      	ldrh	r3, [r7, #22]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3724      	adds	r7, #36	; 0x24
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop

0800d0c0 <rfalInitialize>:
*/


/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    EXIT_ON_ERR( err, st25r3916Initialize() );
 800d0c6:	f002 f85b 	bl	800f180 <st25r3916Initialize>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	80fb      	strh	r3, [r7, #6]
 800d0ce:	88fb      	ldrh	r3, [r7, #6]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d001      	beq.n	800d0d8 <rfalInitialize+0x18>
 800d0d4:	88fb      	ldrh	r3, [r7, #6]
 800d0d6:	e043      	b.n	800d160 <rfalInitialize+0xa0>
    
    st25r3916ClearInterrupts();
 800d0d8:	f003 f822 	bl	8010120 <st25r3916ClearInterrupts>
    
    /* Disable any previous observation mode */
    rfalST25R3916ObsModeDisable();
 800d0dc:	2140      	movs	r1, #64	; 0x40
 800d0de:	2001      	movs	r0, #1
 800d0e0:	f002 fd37 	bl	800fb52 <st25r3916WriteTestRegister>
    
    /*******************************************************************************/    
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	f7ff fb1f 	bl	800c728 <rfalSetAnalogConfig>
    

    /*******************************************************************************/
    /* Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 800d0ea:	2203      	movs	r2, #3
 800d0ec:	2103      	movs	r1, #3
 800d0ee:	2002      	movs	r0, #2
 800d0f0:	f002 fdb8 	bl	800fc64 <st25r3916ChangeRegisterBits>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800d0f4:	f001 fea8 	bl	800ee48 <rfalFIFOStatusClear>
    
    
    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 800d0f8:	4b1b      	ldr	r3, [pc, #108]	; (800d168 <rfalInitialize+0xa8>)
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 800d0fe:	4b1a      	ldr	r3, [pc, #104]	; (800d168 <rfalInitialize+0xa8>)
 800d100:	2200      	movs	r2, #0
 800d102:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 800d104:	4b18      	ldr	r3, [pc, #96]	; (800d168 <rfalInitialize+0xa8>)
 800d106:	2200      	movs	r2, #0
 800d108:	711a      	strb	r2, [r3, #4]
    
    /* Set RFAL default configs */
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 800d10a:	4b17      	ldr	r3, [pc, #92]	; (800d168 <rfalInitialize+0xa8>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 800d110:	4b15      	ldr	r3, [pc, #84]	; (800d168 <rfalInitialize+0xa8>)
 800d112:	2200      	movs	r2, #0
 800d114:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 800d116:	4b14      	ldr	r3, [pc, #80]	; (800d168 <rfalInitialize+0xa8>)
 800d118:	2200      	movs	r2, #0
 800d11a:	71da      	strb	r2, [r3, #7]
    
    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 800d11c:	4b12      	ldr	r3, [pc, #72]	; (800d168 <rfalInitialize+0xa8>)
 800d11e:	2200      	movs	r2, #0
 800d120:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 800d122:	4b11      	ldr	r3, [pc, #68]	; (800d168 <rfalInitialize+0xa8>)
 800d124:	2200      	movs	r2, #0
 800d126:	751a      	strb	r2, [r3, #20]
    
    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 800d128:	4b0f      	ldr	r3, [pc, #60]	; (800d168 <rfalInitialize+0xa8>)
 800d12a:	2200      	movs	r2, #0
 800d12c:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 800d12e:	4b0e      	ldr	r3, [pc, #56]	; (800d168 <rfalInitialize+0xa8>)
 800d130:	2200      	movs	r2, #0
 800d132:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 800d134:	4b0c      	ldr	r3, [pc, #48]	; (800d168 <rfalInitialize+0xa8>)
 800d136:	2200      	movs	r2, #0
 800d138:	609a      	str	r2, [r3, #8]
    
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 800d13a:	4b0b      	ldr	r3, [pc, #44]	; (800d168 <rfalInitialize+0xa8>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	63da      	str	r2, [r3, #60]	; 0x3c
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800d140:	4b09      	ldr	r3, [pc, #36]	; (800d168 <rfalInitialize+0xa8>)
 800d142:	2200      	movs	r2, #0
 800d144:	645a      	str	r2, [r3, #68]	; 0x44
    
    gRFAL.callbacks.preTxRx  = NULL;
 800d146:	4b08      	ldr	r3, [pc, #32]	; (800d168 <rfalInitialize+0xa8>)
 800d148:	2200      	movs	r2, #0
 800d14a:	649a      	str	r2, [r3, #72]	; 0x48
    gRFAL.callbacks.postTxRx = NULL;
 800d14c:	4b06      	ldr	r3, [pc, #24]	; (800d168 <rfalInitialize+0xa8>)
 800d14e:	2200      	movs	r2, #0
 800d150:	64da      	str	r2, [r3, #76]	; 0x4c
    
#if RFAL_FEATURE_NFCV    
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 800d152:	4b05      	ldr	r3, [pc, #20]	; (800d168 <rfalInitialize+0xa8>)
 800d154:	2200      	movs	r2, #0
 800d156:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    
    
    /*******************************************************************************/    
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 800d15a:	f000 f807 	bl	800d16c <rfalCalibrate>
    
    return ERR_NONE;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	20000754 	.word	0x20000754

0800d16c <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d172:	4b0b      	ldr	r3, [pc, #44]	; (800d1a0 <rfalCalibrate+0x34>)
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d101      	bne.n	800d17e <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 800d17a:	2321      	movs	r3, #33	; 0x21
 800d17c:	e00c      	b.n	800d198 <rfalCalibrate+0x2c>
    /*******************************************************************************/
    /* Perform ST25R3916 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3916CheckReg( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 800d17e:	2200      	movs	r2, #0
 800d180:	2180      	movs	r1, #128	; 0x80
 800d182:	202c      	movs	r0, #44	; 0x2c
 800d184:	f002 fdf2 	bl	800fd6c <st25r3916CheckReg>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d003      	beq.n	800d196 <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3916AdjustRegulators( &resValue );
 800d18e:	1dbb      	adds	r3, r7, #6
 800d190:	4618      	mov	r0, r3
 800d192:	f002 f899 	bl	800f2c8 <st25r3916AdjustRegulators>
    }
    
    return ERR_NONE;
 800d196:	2300      	movs	r3, #0
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	20000754 	.word	0x20000754

0800d1a4 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	71fb      	strb	r3, [r7, #7]
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	71bb      	strb	r3, [r7, #6]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d1b6:	4b99      	ldr	r3, [pc, #612]	; (800d41c <rfalSetMode+0x278>)
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d101      	bne.n	800d1c2 <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 800d1be:	2321      	movs	r3, #33	; 0x21
 800d1c0:	e127      	b.n	800d412 <rfalSetMode+0x26e>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 800d1c2:	79bb      	ldrb	r3, [r7, #6]
 800d1c4:	2bff      	cmp	r3, #255	; 0xff
 800d1c6:	d002      	beq.n	800d1ce <rfalSetMode+0x2a>
 800d1c8:	797b      	ldrb	r3, [r7, #5]
 800d1ca:	2bff      	cmp	r3, #255	; 0xff
 800d1cc:	d101      	bne.n	800d1d2 <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 800d1ce:	2307      	movs	r3, #7
 800d1d0:	e11f      	b.n	800d412 <rfalSetMode+0x26e>
    }
   
    switch( mode )
 800d1d2:	79fb      	ldrb	r3, [r7, #7]
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	2b0c      	cmp	r3, #12
 800d1d8:	f200 8107 	bhi.w	800d3ea <rfalSetMode+0x246>
 800d1dc:	a201      	add	r2, pc, #4	; (adr r2, 800d1e4 <rfalSetMode+0x40>)
 800d1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e2:	bf00      	nop
 800d1e4:	0800d219 	.word	0x0800d219
 800d1e8:	0800d23b 	.word	0x0800d23b
 800d1ec:	0800d25d 	.word	0x0800d25d
 800d1f0:	0800d293 	.word	0x0800d293
 800d1f4:	0800d2c9 	.word	0x0800d2c9
 800d1f8:	0800d2ff 	.word	0x0800d2ff
 800d1fc:	0800d321 	.word	0x0800d321
 800d200:	0800d321 	.word	0x0800d321
 800d204:	0800d33b 	.word	0x0800d33b
 800d208:	0800d3a3 	.word	0x0800d3a3
 800d20c:	0800d3e7 	.word	0x0800d3e7
 800d210:	0800d3c5 	.word	0x0800d3c5
 800d214:	0800d36f 	.word	0x0800d36f
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d218:	2104      	movs	r1, #4
 800d21a:	2002      	movs	r0, #2
 800d21c:	f002 fcbe 	bl	800fb9c <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a );
 800d220:	2108      	movs	r1, #8
 800d222:	2003      	movs	r0, #3
 800d224:	f002 fbd0 	bl	800f9c8 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d228:	f240 1001 	movw	r0, #257	; 0x101
 800d22c:	f7ff fa7c 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d230:	f44f 7081 	mov.w	r0, #258	; 0x102
 800d234:	f7ff fa78 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d238:	e0d9      	b.n	800d3ee <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d23a:	2104      	movs	r1, #4
 800d23c:	2002      	movs	r0, #2
 800d23e:	f002 fcad 	bl	800fb9c <st25r3916ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 800d242:	2120      	movs	r1, #32
 800d244:	2003      	movs	r0, #3
 800d246:	f002 fbbf 	bl	800f9c8 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d24a:	f240 1001 	movw	r0, #257	; 0x101
 800d24e:	f7ff fa6b 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d252:	f44f 7081 	mov.w	r0, #258	; 0x102
 800d256:	f7ff fa67 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d25a:	e0c8      	b.n	800d3ee <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d25c:	2104      	movs	r1, #4
 800d25e:	2002      	movs	r0, #2
 800d260:	f002 fc9c 	bl	800fb9c <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d264:	2110      	movs	r1, #16
 800d266:	2003      	movs	r0, #3
 800d268:	f002 fbae 	bl	800f9c8 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d26c:	2200      	movs	r2, #0
 800d26e:	21fc      	movs	r1, #252	; 0xfc
 800d270:	2006      	movs	r0, #6
 800d272:	f002 fcf7 	bl	800fc64 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d276:	2200      	movs	r2, #0
 800d278:	21f0      	movs	r1, #240	; 0xf0
 800d27a:	2007      	movs	r0, #7
 800d27c:	f002 fcf2 	bl	800fc64 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d280:	f240 2001 	movw	r0, #513	; 0x201
 800d284:	f7ff fa50 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d288:	f240 2002 	movw	r0, #514	; 0x202
 800d28c:	f7ff fa4c 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d290:	e0ad      	b.n	800d3ee <rfalSetMode+0x24a>
            
        /*******************************************************************************/    
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d292:	2104      	movs	r1, #4
 800d294:	2002      	movs	r0, #2
 800d296:	f002 fc81 	bl	800fb9c <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d29a:	2110      	movs	r1, #16
 800d29c:	2003      	movs	r0, #3
 800d29e:	f002 fb93 	bl	800f9c8 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	21fc      	movs	r1, #252	; 0xfc
 800d2a6:	2006      	movs	r0, #6
 800d2a8:	f002 fcdc 	bl	800fc64 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d2ac:	2220      	movs	r2, #32
 800d2ae:	21f0      	movs	r1, #240	; 0xf0
 800d2b0:	2007      	movs	r0, #7
 800d2b2:	f002 fcd7 	bl	800fc64 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof  ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d2b6:	f240 2001 	movw	r0, #513	; 0x201
 800d2ba:	f7ff fa35 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d2be:	f240 2002 	movw	r0, #514	; 0x202
 800d2c2:	f7ff fa31 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d2c6:	e092      	b.n	800d3ee <rfalSetMode+0x24a>
            
            /*******************************************************************************/    
            case RFAL_MODE_POLL_B_CTS:
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d2c8:	2104      	movs	r1, #4
 800d2ca:	2002      	movs	r0, #2
 800d2cc:	f002 fc66 	bl	800fb9c <st25r3916ClrRegisterBits>
                
                /* Enable ISO14443B mode */
                st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d2d0:	2110      	movs	r1, #16
 800d2d2:	2003      	movs	r0, #3
 800d2d4:	f002 fb78 	bl	800f9c8 <st25r3916WriteRegister>
                
                /* Set the EGT, SOF, EOF and EOF */
                st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d2d8:	2200      	movs	r2, #0
 800d2da:	21fc      	movs	r1, #252	; 0xfc
 800d2dc:	2006      	movs	r0, #6
 800d2de:	f002 fcc1 	bl	800fc64 <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                          ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                            
                /* Set the minimum TR1, clear SOF, EOF and EOF12 */
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d2e2:	2230      	movs	r2, #48	; 0x30
 800d2e4:	21f0      	movs	r1, #240	; 0xf0
 800d2e6:	2007      	movs	r0, #7
 800d2e8:	f002 fcbc 	bl	800fc64 <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                          (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof ) );


                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d2ec:	f240 2001 	movw	r0, #513	; 0x201
 800d2f0:	f7ff fa1a 	bl	800c728 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d2f4:	f240 2002 	movw	r0, #514	; 0x202
 800d2f8:	f7ff fa16 	bl	800c728 <rfalSetAnalogConfig>
                break;
 800d2fc:	e077      	b.n	800d3ee <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d2fe:	2104      	movs	r1, #4
 800d300:	2002      	movs	r0, #2
 800d302:	f002 fc4b 	bl	800fb9c <st25r3916ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_felica );
 800d306:	2118      	movs	r1, #24
 800d308:	2003      	movs	r0, #3
 800d30a:	f002 fb5d 	bl	800f9c8 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d30e:	f240 4001 	movw	r0, #1025	; 0x401
 800d312:	f7ff fa09 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d316:	f240 4002 	movw	r0, #1026	; 0x402
 800d31a:	f7ff fa05 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d31e:	e066      	b.n	800d3ee <rfalSetMode+0x24a>
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d320:	2104      	movs	r1, #4
 800d322:	2002      	movs	r0, #2
 800d324:	f002 fc3a 	bl	800fb9c <st25r3916ClrRegisterBits>
                
                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d328:	f241 0001 	movw	r0, #4097	; 0x1001
 800d32c:	f7ff f9fc 	bl	800c728 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d330:	f241 0002 	movw	r0, #4098	; 0x1002
 800d334:	f7ff f9f8 	bl	800c728 <rfalSetAnalogConfig>
                break;
 800d338:	e059      	b.n	800d3ee <rfalSetMode+0x24a>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication Initiator mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_eof) );
 800d33a:	2102      	movs	r1, #2
 800d33c:	2003      	movs	r0, #3
 800d33e:	f002 fb43 	bl	800f9c8 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */ 
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800d342:	2200      	movs	r2, #0
 800d344:	2104      	movs	r1, #4
 800d346:	2012      	movs	r0, #18
 800d348:	f002 fc8c 	bl	800fc64 <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800d34c:	2160      	movs	r1, #96	; 0x60
 800d34e:	2040      	movs	r0, #64	; 0x40
 800d350:	f002 f931 	bl	800f5b6 <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800d354:	2180      	movs	r1, #128	; 0x80
 800d356:	2015      	movs	r0, #21
 800d358:	f002 fb36 	bl	800f9c8 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d35c:	f640 0001 	movw	r0, #2049	; 0x801
 800d360:	f7ff f9e2 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d364:	f640 0002 	movw	r0, #2050	; 0x802
 800d368:	f7ff f9de 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d36c:	e03f      	b.n	800d3ee <rfalSetMode+0x24a>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication Target mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 800d36e:	21ba      	movs	r1, #186	; 0xba
 800d370:	2003      	movs	r0, #3
 800d372:	f002 fb29 	bl	800f9c8 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800d376:	2200      	movs	r2, #0
 800d378:	2104      	movs	r1, #4
 800d37a:	2012      	movs	r0, #18
 800d37c:	f002 fc72 	bl	800fc64 <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800d380:	2160      	movs	r1, #96	; 0x60
 800d382:	2040      	movs	r0, #64	; 0x40
 800d384:	f002 f917 	bl	800f5b6 <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800d388:	2180      	movs	r1, #128	; 0x80
 800d38a:	2015      	movs	r0, #21
 800d38c:	f002 fb1c 	bl	800f9c8 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d390:	f648 0001 	movw	r0, #34817	; 0x8801
 800d394:	f7ff f9c8 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d398:	f648 0002 	movw	r0, #34818	; 0x8802
 800d39c:	f7ff f9c4 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d3a0:	e025      	b.n	800d3ee <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:

            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d3a2:	2104      	movs	r1, #4
 800d3a4:	2002      	movs	r0, #2
 800d3a6:	f002 fbf9 	bl	800fb9c <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-A mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfca | ST25R3916_REG_MODE_nfc_ar_off) );
 800d3aa:	2188      	movs	r1, #136	; 0x88
 800d3ac:	2003      	movs	r0, #3
 800d3ae:	f002 fb0b 	bl	800f9c8 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d3b2:	f248 1001 	movw	r0, #33025	; 0x8101
 800d3b6:	f7ff f9b7 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d3ba:	f248 1002 	movw	r0, #33026	; 0x8102
 800d3be:	f7ff f9b3 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d3c2:	e014      	b.n	800d3ee <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d3c4:	2104      	movs	r1, #4
 800d3c6:	2002      	movs	r0, #2
 800d3c8:	f002 fbe8 	bl	800fb9c <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-F mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfcf | ST25R3916_REG_MODE_nfc_ar_off) );
 800d3cc:	21a0      	movs	r1, #160	; 0xa0
 800d3ce:	2003      	movs	r0, #3
 800d3d0:	f002 fafa 	bl	800f9c8 <st25r3916WriteRegister>
            
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d3d4:	f248 4001 	movw	r0, #33793	; 0x8401
 800d3d8:	f7ff f9a6 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d3dc:	f248 4002 	movw	r0, #33794	; 0x8402
 800d3e0:	f7ff f9a2 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d3e4:	e003      	b.n	800d3ee <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
            return ERR_NOTSUPP;
 800d3e6:	2318      	movs	r3, #24
 800d3e8:	e013      	b.n	800d412 <rfalSetMode+0x26e>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800d3ea:	230f      	movs	r3, #15
 800d3ec:	e011      	b.n	800d412 <rfalSetMode+0x26e>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800d3ee:	4b0b      	ldr	r3, [pc, #44]	; (800d41c <rfalSetMode+0x278>)
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	bf38      	it	cc
 800d3f6:	2302      	movcc	r3, #2
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	4b08      	ldr	r3, [pc, #32]	; (800d41c <rfalSetMode+0x278>)
 800d3fc:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 800d3fe:	4a07      	ldr	r2, [pc, #28]	; (800d41c <rfalSetMode+0x278>)
 800d400:	79fb      	ldrb	r3, [r7, #7]
 800d402:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 800d404:	797a      	ldrb	r2, [r7, #5]
 800d406:	79bb      	ldrb	r3, [r7, #6]
 800d408:	4611      	mov	r1, r2
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 f808 	bl	800d420 <rfalSetBitRate>
 800d410:	4603      	mov	r3, r0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3708      	adds	r7, #8
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	20000754 	.word	0x20000754

0800d420 <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b088      	sub	sp, #32
 800d424:	af00      	add	r7, sp, #0
 800d426:	4603      	mov	r3, r0
 800d428:	460a      	mov	r2, r1
 800d42a:	71fb      	strb	r3, [r7, #7]
 800d42c:	4613      	mov	r3, r2
 800d42e:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d430:	4ba0      	ldr	r3, [pc, #640]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d101      	bne.n	800d43c <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 800d438:	2321      	movs	r3, #33	; 0x21
 800d43a:	e2d2      	b.n	800d9e2 <rfalSetBitRate+0x5c2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800d43c:	79fb      	ldrb	r3, [r7, #7]
 800d43e:	2bff      	cmp	r3, #255	; 0xff
 800d440:	d102      	bne.n	800d448 <rfalSetBitRate+0x28>
 800d442:	4b9c      	ldr	r3, [pc, #624]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d444:	789b      	ldrb	r3, [r3, #2]
 800d446:	e000      	b.n	800d44a <rfalSetBitRate+0x2a>
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	4a9a      	ldr	r2, [pc, #616]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d44c:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800d44e:	79bb      	ldrb	r3, [r7, #6]
 800d450:	2bff      	cmp	r3, #255	; 0xff
 800d452:	d102      	bne.n	800d45a <rfalSetBitRate+0x3a>
 800d454:	4b97      	ldr	r3, [pc, #604]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d456:	78db      	ldrb	r3, [r3, #3]
 800d458:	e000      	b.n	800d45c <rfalSetBitRate+0x3c>
 800d45a:	79bb      	ldrb	r3, [r7, #6]
 800d45c:	4a95      	ldr	r2, [pc, #596]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d45e:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 800d460:	4b94      	ldr	r3, [pc, #592]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d462:	785b      	ldrb	r3, [r3, #1]
 800d464:	2b07      	cmp	r3, #7
 800d466:	d012      	beq.n	800d48e <rfalSetBitRate+0x6e>
 800d468:	4b92      	ldr	r3, [pc, #584]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d46a:	785b      	ldrb	r3, [r3, #1]
 800d46c:	2b08      	cmp	r3, #8
 800d46e:	d00e      	beq.n	800d48e <rfalSetBitRate+0x6e>
    {
        /* Set bit rate register */
        EXIT_ON_ERR( ret, st25r3916SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800d470:	4b90      	ldr	r3, [pc, #576]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d472:	789a      	ldrb	r2, [r3, #2]
 800d474:	4b8f      	ldr	r3, [pc, #572]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d476:	78db      	ldrb	r3, [r3, #3]
 800d478:	4619      	mov	r1, r3
 800d47a:	4610      	mov	r0, r2
 800d47c:	f001 ff6f 	bl	800f35e <st25r3916SetBitrate>
 800d480:	4603      	mov	r3, r0
 800d482:	83fb      	strh	r3, [r7, #30]
 800d484:	8bfb      	ldrh	r3, [r7, #30]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <rfalSetBitRate+0x6e>
 800d48a:	8bfb      	ldrh	r3, [r7, #30]
 800d48c:	e2a9      	b.n	800d9e2 <rfalSetBitRate+0x5c2>
    }
    
    
    switch( gRFAL.mode )
 800d48e:	4b89      	ldr	r3, [pc, #548]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d490:	785b      	ldrb	r3, [r3, #1]
 800d492:	2b0d      	cmp	r3, #13
 800d494:	f200 82a2 	bhi.w	800d9dc <rfalSetBitRate+0x5bc>
 800d498:	a201      	add	r2, pc, #4	; (adr r2, 800d4a0 <rfalSetBitRate+0x80>)
 800d49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49e:	bf00      	nop
 800d4a0:	0800d9d9 	.word	0x0800d9d9
 800d4a4:	0800d4d9 	.word	0x0800d4d9
 800d4a8:	0800d4d9 	.word	0x0800d4d9
 800d4ac:	0800d561 	.word	0x0800d561
 800d4b0:	0800d561 	.word	0x0800d561
 800d4b4:	0800d561 	.word	0x0800d561
 800d4b8:	0800d5f1 	.word	0x0800d5f1
 800d4bc:	0800d681 	.word	0x0800d681
 800d4c0:	0800d681 	.word	0x0800d681
 800d4c4:	0800d7b5 	.word	0x0800d7b5
 800d4c8:	0800d8c5 	.word	0x0800d8c5
 800d4cc:	0800d9d9 	.word	0x0800d9d9
 800d4d0:	0800d959 	.word	0x0800d959
 800d4d4:	0800d845 	.word	0x0800d845
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d4d8:	2008      	movs	r0, #8
 800d4da:	f7ff f925 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d4de:	4b75      	ldr	r3, [pc, #468]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d4e0:	789b      	ldrb	r3, [r3, #2]
 800d4e2:	2bea      	cmp	r3, #234	; 0xea
 800d4e4:	d90c      	bls.n	800d500 <rfalSetBitRate+0xe0>
 800d4e6:	4b73      	ldr	r3, [pc, #460]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d4e8:	789b      	ldrb	r3, [r3, #2]
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	011b      	lsls	r3, r3, #4
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4f8:	f043 0301 	orr.w	r3, r3, #1
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	e00d      	b.n	800d51c <rfalSetBitRate+0xfc>
 800d500:	4b6c      	ldr	r3, [pc, #432]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d502:	789b      	ldrb	r3, [r3, #2]
 800d504:	b29b      	uxth	r3, r3
 800d506:	3301      	adds	r3, #1
 800d508:	b29b      	uxth	r3, r3
 800d50a:	011b      	lsls	r3, r3, #4
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	b29b      	uxth	r3, r3
 800d512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d516:	f043 0301 	orr.w	r3, r3, #1
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7ff f903 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d522:	4b64      	ldr	r3, [pc, #400]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d524:	78db      	ldrb	r3, [r3, #3]
 800d526:	2bea      	cmp	r3, #234	; 0xea
 800d528:	d90a      	bls.n	800d540 <rfalSetBitRate+0x120>
 800d52a:	4b62      	ldr	r3, [pc, #392]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d52c:	78db      	ldrb	r3, [r3, #3]
 800d52e:	b29b      	uxth	r3, r3
 800d530:	011b      	lsls	r3, r3, #4
 800d532:	b29b      	uxth	r3, r3
 800d534:	b2db      	uxtb	r3, r3
 800d536:	b29b      	uxth	r3, r3
 800d538:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	e00b      	b.n	800d558 <rfalSetBitRate+0x138>
 800d540:	4b5c      	ldr	r3, [pc, #368]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d542:	78db      	ldrb	r3, [r3, #3]
 800d544:	b29b      	uxth	r3, r3
 800d546:	3301      	adds	r3, #1
 800d548:	b29b      	uxth	r3, r3
 800d54a:	011b      	lsls	r3, r3, #4
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	b29b      	uxth	r3, r3
 800d552:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800d556:	b29b      	uxth	r3, r3
 800d558:	4618      	mov	r0, r3
 800d55a:	f7ff f8e5 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d55e:	e23f      	b.n	800d9e0 <rfalSetBitRate+0x5c0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d560:	2008      	movs	r0, #8
 800d562:	f7ff f8e1 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d566:	4b53      	ldr	r3, [pc, #332]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d568:	789b      	ldrb	r3, [r3, #2]
 800d56a:	2bea      	cmp	r3, #234	; 0xea
 800d56c:	d90c      	bls.n	800d588 <rfalSetBitRate+0x168>
 800d56e:	4b51      	ldr	r3, [pc, #324]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d570:	789b      	ldrb	r3, [r3, #2]
 800d572:	b29b      	uxth	r3, r3
 800d574:	011b      	lsls	r3, r3, #4
 800d576:	b29b      	uxth	r3, r3
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d580:	f043 0301 	orr.w	r3, r3, #1
 800d584:	b29b      	uxth	r3, r3
 800d586:	e00d      	b.n	800d5a4 <rfalSetBitRate+0x184>
 800d588:	4b4a      	ldr	r3, [pc, #296]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d58a:	789b      	ldrb	r3, [r3, #2]
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	3301      	adds	r3, #1
 800d590:	b29b      	uxth	r3, r3
 800d592:	011b      	lsls	r3, r3, #4
 800d594:	b29b      	uxth	r3, r3
 800d596:	b2db      	uxtb	r3, r3
 800d598:	b29b      	uxth	r3, r3
 800d59a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d59e:	f043 0301 	orr.w	r3, r3, #1
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7ff f8bf 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d5aa:	4b42      	ldr	r3, [pc, #264]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d5ac:	78db      	ldrb	r3, [r3, #3]
 800d5ae:	2bea      	cmp	r3, #234	; 0xea
 800d5b0:	d90c      	bls.n	800d5cc <rfalSetBitRate+0x1ac>
 800d5b2:	4b40      	ldr	r3, [pc, #256]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d5b4:	78db      	ldrb	r3, [r3, #3]
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	011b      	lsls	r3, r3, #4
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d5c4:	f043 0302 	orr.w	r3, r3, #2
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	e00d      	b.n	800d5e8 <rfalSetBitRate+0x1c8>
 800d5cc:	4b39      	ldr	r3, [pc, #228]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d5ce:	78db      	ldrb	r3, [r3, #3]
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	011b      	lsls	r3, r3, #4
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d5e2:	f043 0302 	orr.w	r3, r3, #2
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7ff f89d 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d5ee:	e1f7      	b.n	800d9e0 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d5f0:	2008      	movs	r0, #8
 800d5f2:	f7ff f899 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d5f6:	4b2f      	ldr	r3, [pc, #188]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d5f8:	789b      	ldrb	r3, [r3, #2]
 800d5fa:	2bea      	cmp	r3, #234	; 0xea
 800d5fc:	d90c      	bls.n	800d618 <rfalSetBitRate+0x1f8>
 800d5fe:	4b2d      	ldr	r3, [pc, #180]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d600:	789b      	ldrb	r3, [r3, #2]
 800d602:	b29b      	uxth	r3, r3
 800d604:	011b      	lsls	r3, r3, #4
 800d606:	b29b      	uxth	r3, r3
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d610:	f043 0301 	orr.w	r3, r3, #1
 800d614:	b29b      	uxth	r3, r3
 800d616:	e00d      	b.n	800d634 <rfalSetBitRate+0x214>
 800d618:	4b26      	ldr	r3, [pc, #152]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d61a:	789b      	ldrb	r3, [r3, #2]
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	3301      	adds	r3, #1
 800d620:	b29b      	uxth	r3, r3
 800d622:	011b      	lsls	r3, r3, #4
 800d624:	b29b      	uxth	r3, r3
 800d626:	b2db      	uxtb	r3, r3
 800d628:	b29b      	uxth	r3, r3
 800d62a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d62e:	f043 0301 	orr.w	r3, r3, #1
 800d632:	b29b      	uxth	r3, r3
 800d634:	4618      	mov	r0, r3
 800d636:	f7ff f877 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d63a:	4b1e      	ldr	r3, [pc, #120]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d63c:	78db      	ldrb	r3, [r3, #3]
 800d63e:	2bea      	cmp	r3, #234	; 0xea
 800d640:	d90c      	bls.n	800d65c <rfalSetBitRate+0x23c>
 800d642:	4b1c      	ldr	r3, [pc, #112]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d644:	78db      	ldrb	r3, [r3, #3]
 800d646:	b29b      	uxth	r3, r3
 800d648:	011b      	lsls	r3, r3, #4
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	b29b      	uxth	r3, r3
 800d650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d654:	f043 0302 	orr.w	r3, r3, #2
 800d658:	b29b      	uxth	r3, r3
 800d65a:	e00d      	b.n	800d678 <rfalSetBitRate+0x258>
 800d65c:	4b15      	ldr	r3, [pc, #84]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d65e:	78db      	ldrb	r3, [r3, #3]
 800d660:	b29b      	uxth	r3, r3
 800d662:	3301      	adds	r3, #1
 800d664:	b29b      	uxth	r3, r3
 800d666:	011b      	lsls	r3, r3, #4
 800d668:	b29b      	uxth	r3, r3
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d672:	f043 0302 	orr.w	r3, r3, #2
 800d676:	b29b      	uxth	r3, r3
 800d678:	4618      	mov	r0, r3
 800d67a:	f7ff f855 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d67e:	e1af      	b.n	800d9e0 <rfalSetBitRate+0x5c0>
            
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
            
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 800d680:	4b0c      	ldr	r3, [pc, #48]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d682:	78db      	ldrb	r3, [r3, #3]
 800d684:	2bec      	cmp	r3, #236	; 0xec
 800d686:	d00b      	beq.n	800d6a0 <rfalSetBitRate+0x280>
 800d688:	4b0a      	ldr	r3, [pc, #40]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d68a:	78db      	ldrb	r3, [r3, #3]
 800d68c:	2beb      	cmp	r3, #235	; 0xeb
 800d68e:	d007      	beq.n	800d6a0 <rfalSetBitRate+0x280>
 800d690:	4b08      	ldr	r3, [pc, #32]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d692:	78db      	ldrb	r3, [r3, #3]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d003      	beq.n	800d6a0 <rfalSetBitRate+0x280>
 800d698:	4b06      	ldr	r3, [pc, #24]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d69a:	78db      	ldrb	r3, [r3, #3]
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d107      	bne.n	800d6b0 <rfalSetBitRate+0x290>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 800d6a0:	4b04      	ldr	r3, [pc, #16]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d6a2:	789b      	ldrb	r3, [r3, #2]
 800d6a4:	2bed      	cmp	r3, #237	; 0xed
 800d6a6:	d007      	beq.n	800d6b8 <rfalSetBitRate+0x298>
 800d6a8:	4b02      	ldr	r3, [pc, #8]	; (800d6b4 <rfalSetBitRate+0x294>)
 800d6aa:	789b      	ldrb	r3, [r3, #2]
 800d6ac:	2bec      	cmp	r3, #236	; 0xec
 800d6ae:	d003      	beq.n	800d6b8 <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 800d6b0:	2307      	movs	r3, #7
 800d6b2:	e196      	b.n	800d9e2 <rfalSetBitRate+0x5c2>
 800d6b4:	20000754 	.word	0x20000754
                {
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3916StreamConfig      streamConf;
                    iso15693PhyConfig_t                config;
                    
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 800d6b8:	4b9a      	ldr	r3, [pc, #616]	; (800d924 <rfalSetBitRate+0x504>)
 800d6ba:	789b      	ldrb	r3, [r3, #2]
 800d6bc:	2bed      	cmp	r3, #237	; 0xed
 800d6be:	bf0c      	ite	eq
 800d6c0:	2301      	moveq	r3, #1
 800d6c2:	2300      	movne	r3, #0
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 800d6c8:	4b96      	ldr	r3, [pc, #600]	; (800d924 <rfalSetBitRate+0x504>)
 800d6ca:	78db      	ldrb	r3, [r3, #3]
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d00a      	beq.n	800d6e6 <rfalSetBitRate+0x2c6>
 800d6d0:	2beb      	cmp	r3, #235	; 0xeb
 800d6d2:	d002      	beq.n	800d6da <rfalSetBitRate+0x2ba>
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d003      	beq.n	800d6e0 <rfalSetBitRate+0x2c0>
 800d6d8:	e008      	b.n	800d6ec <rfalSetBitRate+0x2cc>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	613b      	str	r3, [r7, #16]
                            break;
 800d6de:	e008      	b.n	800d6f2 <rfalSetBitRate+0x2d2>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 800d6e0:	2302      	movs	r3, #2
 800d6e2:	613b      	str	r3, [r7, #16]
                            break;
 800d6e4:	e005      	b.n	800d6f2 <rfalSetBitRate+0x2d2>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 800d6e6:	2303      	movs	r3, #3
 800d6e8:	613b      	str	r3, [r7, #16]
                            break;
 800d6ea:	e002      	b.n	800d6f2 <rfalSetBitRate+0x2d2>
                        default:
                            config.speedMode = 0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	613b      	str	r3, [r7, #16]
                            break;
 800d6f0:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);
 800d6f2:	f107 0218 	add.w	r2, r7, #24
 800d6f6:	f107 030c 	add.w	r3, r7, #12
 800d6fa:	4611      	mov	r1, r2
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7ff f97b 	bl	800c9f8 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	785b      	ldrb	r3, [r3, #1]
 800d706:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	789b      	ldrb	r3, [r3, #2]
 800d70c:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	78db      	ldrb	r3, [r3, #3]
 800d712:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 800d714:	69bb      	ldr	r3, [r7, #24]
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	753b      	strb	r3, [r7, #20]
                    st25r3916StreamConfigure(&streamConf);
 800d71a:	f107 0314 	add.w	r3, r7, #20
 800d71e:	4618      	mov	r0, r3
 800d720:	f001 ff87 	bl	800f632 <st25r3916StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d724:	2008      	movs	r0, #8
 800d726:	f7fe ffff 	bl	800c728 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d72a:	4b7e      	ldr	r3, [pc, #504]	; (800d924 <rfalSetBitRate+0x504>)
 800d72c:	789b      	ldrb	r3, [r3, #2]
 800d72e:	2bea      	cmp	r3, #234	; 0xea
 800d730:	d90c      	bls.n	800d74c <rfalSetBitRate+0x32c>
 800d732:	4b7c      	ldr	r3, [pc, #496]	; (800d924 <rfalSetBitRate+0x504>)
 800d734:	789b      	ldrb	r3, [r3, #2]
 800d736:	b29b      	uxth	r3, r3
 800d738:	011b      	lsls	r3, r3, #4
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	b29b      	uxth	r3, r3
 800d740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d744:	f043 0301 	orr.w	r3, r3, #1
 800d748:	b29b      	uxth	r3, r3
 800d74a:	e00d      	b.n	800d768 <rfalSetBitRate+0x348>
 800d74c:	4b75      	ldr	r3, [pc, #468]	; (800d924 <rfalSetBitRate+0x504>)
 800d74e:	789b      	ldrb	r3, [r3, #2]
 800d750:	b29b      	uxth	r3, r3
 800d752:	3301      	adds	r3, #1
 800d754:	b29b      	uxth	r3, r3
 800d756:	011b      	lsls	r3, r3, #4
 800d758:	b29b      	uxth	r3, r3
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d762:	f043 0301 	orr.w	r3, r3, #1
 800d766:	b29b      	uxth	r3, r3
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fe ffdd 	bl	800c728 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d76e:	4b6d      	ldr	r3, [pc, #436]	; (800d924 <rfalSetBitRate+0x504>)
 800d770:	78db      	ldrb	r3, [r3, #3]
 800d772:	2bea      	cmp	r3, #234	; 0xea
 800d774:	d90c      	bls.n	800d790 <rfalSetBitRate+0x370>
 800d776:	4b6b      	ldr	r3, [pc, #428]	; (800d924 <rfalSetBitRate+0x504>)
 800d778:	78db      	ldrb	r3, [r3, #3]
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	011b      	lsls	r3, r3, #4
 800d77e:	b29b      	uxth	r3, r3
 800d780:	b2db      	uxtb	r3, r3
 800d782:	b29b      	uxth	r3, r3
 800d784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d788:	f043 0302 	orr.w	r3, r3, #2
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	e00d      	b.n	800d7ac <rfalSetBitRate+0x38c>
 800d790:	4b64      	ldr	r3, [pc, #400]	; (800d924 <rfalSetBitRate+0x504>)
 800d792:	78db      	ldrb	r3, [r3, #3]
 800d794:	b29b      	uxth	r3, r3
 800d796:	3301      	adds	r3, #1
 800d798:	b29b      	uxth	r3, r3
 800d79a:	011b      	lsls	r3, r3, #4
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d7a6:	f043 0302 	orr.w	r3, r3, #2
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fe ffbb 	bl	800c728 <rfalSetAnalogConfig>
                break;
 800d7b2:	e115      	b.n	800d9e0 <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d7b4:	2008      	movs	r0, #8
 800d7b6:	f7fe ffb7 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d7ba:	4b5a      	ldr	r3, [pc, #360]	; (800d924 <rfalSetBitRate+0x504>)
 800d7bc:	789b      	ldrb	r3, [r3, #2]
 800d7be:	2bea      	cmp	r3, #234	; 0xea
 800d7c0:	d90c      	bls.n	800d7dc <rfalSetBitRate+0x3bc>
 800d7c2:	4b58      	ldr	r3, [pc, #352]	; (800d924 <rfalSetBitRate+0x504>)
 800d7c4:	789b      	ldrb	r3, [r3, #2]
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	011b      	lsls	r3, r3, #4
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d7d4:	f043 0301 	orr.w	r3, r3, #1
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	e00d      	b.n	800d7f8 <rfalSetBitRate+0x3d8>
 800d7dc:	4b51      	ldr	r3, [pc, #324]	; (800d924 <rfalSetBitRate+0x504>)
 800d7de:	789b      	ldrb	r3, [r3, #2]
 800d7e0:	b29b      	uxth	r3, r3
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	011b      	lsls	r3, r3, #4
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d7f2:	f043 0301 	orr.w	r3, r3, #1
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fe ff95 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d7fe:	4b49      	ldr	r3, [pc, #292]	; (800d924 <rfalSetBitRate+0x504>)
 800d800:	78db      	ldrb	r3, [r3, #3]
 800d802:	2bea      	cmp	r3, #234	; 0xea
 800d804:	d90c      	bls.n	800d820 <rfalSetBitRate+0x400>
 800d806:	4b47      	ldr	r3, [pc, #284]	; (800d924 <rfalSetBitRate+0x504>)
 800d808:	78db      	ldrb	r3, [r3, #3]
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	011b      	lsls	r3, r3, #4
 800d80e:	b29b      	uxth	r3, r3
 800d810:	b2db      	uxtb	r3, r3
 800d812:	b29b      	uxth	r3, r3
 800d814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d818:	f043 0302 	orr.w	r3, r3, #2
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	e00d      	b.n	800d83c <rfalSetBitRate+0x41c>
 800d820:	4b40      	ldr	r3, [pc, #256]	; (800d924 <rfalSetBitRate+0x504>)
 800d822:	78db      	ldrb	r3, [r3, #3]
 800d824:	b29b      	uxth	r3, r3
 800d826:	3301      	adds	r3, #1
 800d828:	b29b      	uxth	r3, r3
 800d82a:	011b      	lsls	r3, r3, #4
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	b29b      	uxth	r3, r3
 800d832:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d836:	f043 0302 	orr.w	r3, r3, #2
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7fe ff73 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d842:	e0cd      	b.n	800d9e0 <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800d844:	2009      	movs	r0, #9
 800d846:	f7fe ff6f 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d84a:	4b36      	ldr	r3, [pc, #216]	; (800d924 <rfalSetBitRate+0x504>)
 800d84c:	789b      	ldrb	r3, [r3, #2]
 800d84e:	2bea      	cmp	r3, #234	; 0xea
 800d850:	d90a      	bls.n	800d868 <rfalSetBitRate+0x448>
 800d852:	4b34      	ldr	r3, [pc, #208]	; (800d924 <rfalSetBitRate+0x504>)
 800d854:	789b      	ldrb	r3, [r3, #2]
 800d856:	b29b      	uxth	r3, r3
 800d858:	011b      	lsls	r3, r3, #4
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	b29a      	uxth	r2, r3
 800d860:	4b31      	ldr	r3, [pc, #196]	; (800d928 <rfalSetBitRate+0x508>)
 800d862:	4313      	orrs	r3, r2
 800d864:	b29b      	uxth	r3, r3
 800d866:	e00b      	b.n	800d880 <rfalSetBitRate+0x460>
 800d868:	4b2e      	ldr	r3, [pc, #184]	; (800d924 <rfalSetBitRate+0x504>)
 800d86a:	789b      	ldrb	r3, [r3, #2]
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	3301      	adds	r3, #1
 800d870:	b29b      	uxth	r3, r3
 800d872:	011b      	lsls	r3, r3, #4
 800d874:	b29b      	uxth	r3, r3
 800d876:	b2db      	uxtb	r3, r3
 800d878:	b29a      	uxth	r2, r3
 800d87a:	4b2b      	ldr	r3, [pc, #172]	; (800d928 <rfalSetBitRate+0x508>)
 800d87c:	4313      	orrs	r3, r2
 800d87e:	b29b      	uxth	r3, r3
 800d880:	4618      	mov	r0, r3
 800d882:	f7fe ff51 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d886:	4b27      	ldr	r3, [pc, #156]	; (800d924 <rfalSetBitRate+0x504>)
 800d888:	78db      	ldrb	r3, [r3, #3]
 800d88a:	2bea      	cmp	r3, #234	; 0xea
 800d88c:	d90a      	bls.n	800d8a4 <rfalSetBitRate+0x484>
 800d88e:	4b25      	ldr	r3, [pc, #148]	; (800d924 <rfalSetBitRate+0x504>)
 800d890:	78db      	ldrb	r3, [r3, #3]
 800d892:	b29b      	uxth	r3, r3
 800d894:	011b      	lsls	r3, r3, #4
 800d896:	b29b      	uxth	r3, r3
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	4b23      	ldr	r3, [pc, #140]	; (800d92c <rfalSetBitRate+0x50c>)
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	e00b      	b.n	800d8bc <rfalSetBitRate+0x49c>
 800d8a4:	4b1f      	ldr	r3, [pc, #124]	; (800d924 <rfalSetBitRate+0x504>)
 800d8a6:	78db      	ldrb	r3, [r3, #3]
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	011b      	lsls	r3, r3, #4
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	4b1d      	ldr	r3, [pc, #116]	; (800d92c <rfalSetBitRate+0x50c>)
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fe ff33 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d8c2:	e08d      	b.n	800d9e0 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800d8c4:	2009      	movs	r0, #9
 800d8c6:	f7fe ff2f 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d8ca:	4b16      	ldr	r3, [pc, #88]	; (800d924 <rfalSetBitRate+0x504>)
 800d8cc:	789b      	ldrb	r3, [r3, #2]
 800d8ce:	2bea      	cmp	r3, #234	; 0xea
 800d8d0:	d90a      	bls.n	800d8e8 <rfalSetBitRate+0x4c8>
 800d8d2:	4b14      	ldr	r3, [pc, #80]	; (800d924 <rfalSetBitRate+0x504>)
 800d8d4:	789b      	ldrb	r3, [r3, #2]
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	011b      	lsls	r3, r3, #4
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	4b13      	ldr	r3, [pc, #76]	; (800d930 <rfalSetBitRate+0x510>)
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	e00b      	b.n	800d900 <rfalSetBitRate+0x4e0>
 800d8e8:	4b0e      	ldr	r3, [pc, #56]	; (800d924 <rfalSetBitRate+0x504>)
 800d8ea:	789b      	ldrb	r3, [r3, #2]
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	011b      	lsls	r3, r3, #4
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	4b0d      	ldr	r3, [pc, #52]	; (800d930 <rfalSetBitRate+0x510>)
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	4618      	mov	r0, r3
 800d902:	f7fe ff11 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d906:	4b07      	ldr	r3, [pc, #28]	; (800d924 <rfalSetBitRate+0x504>)
 800d908:	78db      	ldrb	r3, [r3, #3]
 800d90a:	2bea      	cmp	r3, #234	; 0xea
 800d90c:	d914      	bls.n	800d938 <rfalSetBitRate+0x518>
 800d90e:	4b05      	ldr	r3, [pc, #20]	; (800d924 <rfalSetBitRate+0x504>)
 800d910:	78db      	ldrb	r3, [r3, #3]
 800d912:	b29b      	uxth	r3, r3
 800d914:	011b      	lsls	r3, r3, #4
 800d916:	b29b      	uxth	r3, r3
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	4b05      	ldr	r3, [pc, #20]	; (800d934 <rfalSetBitRate+0x514>)
 800d91e:	4313      	orrs	r3, r2
 800d920:	b29b      	uxth	r3, r3
 800d922:	e015      	b.n	800d950 <rfalSetBitRate+0x530>
 800d924:	20000754 	.word	0x20000754
 800d928:	ffff8801 	.word	0xffff8801
 800d92c:	ffff8802 	.word	0xffff8802
 800d930:	ffff8101 	.word	0xffff8101
 800d934:	ffff8102 	.word	0xffff8102
 800d938:	4b2c      	ldr	r3, [pc, #176]	; (800d9ec <rfalSetBitRate+0x5cc>)
 800d93a:	78db      	ldrb	r3, [r3, #3]
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	3301      	adds	r3, #1
 800d940:	b29b      	uxth	r3, r3
 800d942:	011b      	lsls	r3, r3, #4
 800d944:	b29b      	uxth	r3, r3
 800d946:	b2db      	uxtb	r3, r3
 800d948:	b29a      	uxth	r2, r3
 800d94a:	4b29      	ldr	r3, [pc, #164]	; (800d9f0 <rfalSetBitRate+0x5d0>)
 800d94c:	4313      	orrs	r3, r2
 800d94e:	b29b      	uxth	r3, r3
 800d950:	4618      	mov	r0, r3
 800d952:	f7fe fee9 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d956:	e043      	b.n	800d9e0 <rfalSetBitRate+0x5c0>
                
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
                        
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800d958:	2009      	movs	r0, #9
 800d95a:	f7fe fee5 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d95e:	4b23      	ldr	r3, [pc, #140]	; (800d9ec <rfalSetBitRate+0x5cc>)
 800d960:	789b      	ldrb	r3, [r3, #2]
 800d962:	2bea      	cmp	r3, #234	; 0xea
 800d964:	d90a      	bls.n	800d97c <rfalSetBitRate+0x55c>
 800d966:	4b21      	ldr	r3, [pc, #132]	; (800d9ec <rfalSetBitRate+0x5cc>)
 800d968:	789b      	ldrb	r3, [r3, #2]
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	011b      	lsls	r3, r3, #4
 800d96e:	b29b      	uxth	r3, r3
 800d970:	b2db      	uxtb	r3, r3
 800d972:	b29a      	uxth	r2, r3
 800d974:	4b1f      	ldr	r3, [pc, #124]	; (800d9f4 <rfalSetBitRate+0x5d4>)
 800d976:	4313      	orrs	r3, r2
 800d978:	b29b      	uxth	r3, r3
 800d97a:	e00b      	b.n	800d994 <rfalSetBitRate+0x574>
 800d97c:	4b1b      	ldr	r3, [pc, #108]	; (800d9ec <rfalSetBitRate+0x5cc>)
 800d97e:	789b      	ldrb	r3, [r3, #2]
 800d980:	b29b      	uxth	r3, r3
 800d982:	3301      	adds	r3, #1
 800d984:	b29b      	uxth	r3, r3
 800d986:	011b      	lsls	r3, r3, #4
 800d988:	b29b      	uxth	r3, r3
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	4b19      	ldr	r3, [pc, #100]	; (800d9f4 <rfalSetBitRate+0x5d4>)
 800d990:	4313      	orrs	r3, r2
 800d992:	b29b      	uxth	r3, r3
 800d994:	4618      	mov	r0, r3
 800d996:	f7fe fec7 	bl	800c728 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d99a:	4b14      	ldr	r3, [pc, #80]	; (800d9ec <rfalSetBitRate+0x5cc>)
 800d99c:	78db      	ldrb	r3, [r3, #3]
 800d99e:	2bea      	cmp	r3, #234	; 0xea
 800d9a0:	d90a      	bls.n	800d9b8 <rfalSetBitRate+0x598>
 800d9a2:	4b12      	ldr	r3, [pc, #72]	; (800d9ec <rfalSetBitRate+0x5cc>)
 800d9a4:	78db      	ldrb	r3, [r3, #3]
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	011b      	lsls	r3, r3, #4
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	4b11      	ldr	r3, [pc, #68]	; (800d9f8 <rfalSetBitRate+0x5d8>)
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	e00b      	b.n	800d9d0 <rfalSetBitRate+0x5b0>
 800d9b8:	4b0c      	ldr	r3, [pc, #48]	; (800d9ec <rfalSetBitRate+0x5cc>)
 800d9ba:	78db      	ldrb	r3, [r3, #3]
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	3301      	adds	r3, #1
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	011b      	lsls	r3, r3, #4
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	4b0b      	ldr	r3, [pc, #44]	; (800d9f8 <rfalSetBitRate+0x5d8>)
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7fe fea9 	bl	800c728 <rfalSetAnalogConfig>
            break;
 800d9d6:	e003      	b.n	800d9e0 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 800d9d8:	2321      	movs	r3, #33	; 0x21
 800d9da:	e002      	b.n	800d9e2 <rfalSetBitRate+0x5c2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800d9dc:	230f      	movs	r3, #15
 800d9de:	e000      	b.n	800d9e2 <rfalSetBitRate+0x5c2>
    }
    
    return ERR_NONE;
 800d9e0:	2300      	movs	r3, #0
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3720      	adds	r7, #32
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	20000754 	.word	0x20000754
 800d9f0:	ffff8102 	.word	0xffff8102
 800d9f4:	ffff8401 	.word	0xffff8401
 800d9f8:	ffff8402 	.word	0xffff8402

0800d9fc <rfalSetErrorHandling>:
}


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	4603      	mov	r3, r0
 800da04:	71fb      	strb	r3, [r7, #7]
    switch(eHandling)
 800da06:	79fb      	ldrb	r3, [r7, #7]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	db0f      	blt.n	800da2c <rfalSetErrorHandling+0x30>
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	dd02      	ble.n	800da16 <rfalSetErrorHandling+0x1a>
 800da10:	2b02      	cmp	r3, #2
 800da12:	d005      	beq.n	800da20 <rfalSetErrorHandling+0x24>
                                 (ST25R3916_REG_EMD_SUP_CONF_emd_emv_on | ST25R3916_REG_EMD_SUP_CONF_emd_crc_prot_off | ST25R3916_REG_EMD_SUP_CONF_emd_res_bits_off | RFAL_EMVCO_RX_MAXLEN) );
#endif /* RFAL_SW_EMD */
            break;
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800da14:	e00a      	b.n	800da2c <rfalSetErrorHandling+0x30>
            st25r3916ClrRegisterBits( ST25R3916_REG_EMD_SUP_CONF, ST25R3916_REG_EMD_SUP_CONF_emd_emv );
 800da16:	2180      	movs	r1, #128	; 0x80
 800da18:	2045      	movs	r0, #69	; 0x45
 800da1a:	f002 f8bf 	bl	800fb9c <st25r3916ClrRegisterBits>
            break;
 800da1e:	e006      	b.n	800da2e <rfalSetErrorHandling+0x32>
            st25r3916ModifyRegister( ST25R3916_REG_EMD_SUP_CONF, 
 800da20:	2284      	movs	r2, #132	; 0x84
 800da22:	21bf      	movs	r1, #191	; 0xbf
 800da24:	2045      	movs	r0, #69	; 0x45
 800da26:	f002 f934 	bl	800fc92 <st25r3916ModifyRegister>
            break;
 800da2a:	e000      	b.n	800da2e <rfalSetErrorHandling+0x32>
            break;
 800da2c:	bf00      	nop
    }

    gRFAL.conf.eHandling = eHandling;
 800da2e:	4a03      	ldr	r2, [pc, #12]	; (800da3c <rfalSetErrorHandling+0x40>)
 800da30:	79fb      	ldrb	r3, [r7, #7]
 800da32:	71d3      	strb	r3, [r2, #7]
}
 800da34:	bf00      	nop
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	20000754 	.word	0x20000754

0800da40 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3916_GPT_MAX_1FC );
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	4a06      	ldr	r2, [pc, #24]	; (800da64 <rfalSetFDTPoll+0x24>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	bf28      	it	cs
 800da50:	4613      	movcs	r3, r2
 800da52:	4a05      	ldr	r2, [pc, #20]	; (800da68 <rfalSetFDTPoll+0x28>)
 800da54:	6113      	str	r3, [r2, #16]
}
 800da56:	bf00      	nop
 800da58:	370c      	adds	r7, #12
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	0007fff8 	.word	0x0007fff8
 800da68:	20000754 	.word	0x20000754

0800da6c <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 800da6c:	b480      	push	{r7}
 800da6e:	b083      	sub	sp, #12
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3916_MRT_MAX_1FC );
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 800da7a:	bf28      	it	cs
 800da7c:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 800da80:	4a03      	ldr	r2, [pc, #12]	; (800da90 <rfalSetFDTListen+0x24>)
 800da82:	60d3      	str	r3, [r2, #12]
}
 800da84:	bf00      	nop
 800da86:	370c      	adds	r7, #12
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	20000754 	.word	0x20000754

0800da94 <rfalSetGT>:
}


/*******************************************************************************/
void rfalSetGT( uint32_t GT )
{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3916_GT_MAX_1FC );
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4a06      	ldr	r2, [pc, #24]	; (800dab8 <rfalSetGT+0x24>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	bf28      	it	cs
 800daa4:	4613      	movcs	r3, r2
 800daa6:	4a05      	ldr	r2, [pc, #20]	; (800dabc <rfalSetGT+0x28>)
 800daa8:	6093      	str	r3, [r2, #8]
}
 800daaa:	bf00      	nop
 800daac:	370c      	adds	r7, #12
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop
 800dab8:	040a8bc0 	.word	0x040a8bc0
 800dabc:	20000754 	.word	0x20000754

0800dac0 <rfalIsGTExpired>:
}


/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 800dac4:	4b09      	ldr	r3, [pc, #36]	; (800daec <rfalIsGTExpired+0x2c>)
 800dac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00c      	beq.n	800dae6 <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 800dacc:	4b07      	ldr	r3, [pc, #28]	; (800daec <rfalIsGTExpired+0x2c>)
 800dace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7f6 fa8b 	bl	8003fec <timerIsExpired>
 800dad6:	4603      	mov	r3, r0
 800dad8:	f083 0301 	eor.w	r3, r3, #1
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d001      	beq.n	800dae6 <rfalIsGTExpired+0x26>
        {
            return false;
 800dae2:	2300      	movs	r3, #0
 800dae4:	e000      	b.n	800dae8 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 800dae6:	2301      	movs	r3, #1
}
 800dae8:	4618      	mov	r0, r3
 800daea:	bd80      	pop	{r7, pc}
 800daec:	20000754 	.word	0x20000754

0800daf0 <rfalFieldOnAndStartGT>:


/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3916IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 800daf6:	2280      	movs	r2, #128	; 0x80
 800daf8:	2180      	movs	r1, #128	; 0x80
 800dafa:	2002      	movs	r0, #2
 800dafc:	f002 f936 	bl	800fd6c <st25r3916CheckReg>
 800db00:	4603      	mov	r3, r0
 800db02:	f083 0301 	eor.w	r3, r3, #1
 800db06:	b2db      	uxtb	r3, r3
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d103      	bne.n	800db14 <rfalFieldOnAndStartGT+0x24>
 800db0c:	4b2a      	ldr	r3, [pc, #168]	; (800dbb8 <rfalFieldOnAndStartGT+0xc8>)
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d101      	bne.n	800db18 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 800db14:	2321      	movs	r3, #33	; 0x21
 800db16:	e04a      	b.n	800dbae <rfalFieldOnAndStartGT+0xbe>
    }
    
    ret = ERR_NONE;
 800db18:	2300      	movs	r3, #0
 800db1a:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 800db1c:	2002      	movs	r0, #2
 800db1e:	f7fe fe03 	bl	800c728 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3916IsTxEnabled() || !gRFAL.field )
 800db22:	2208      	movs	r2, #8
 800db24:	2108      	movs	r1, #8
 800db26:	2002      	movs	r0, #2
 800db28:	f002 f920 	bl	800fd6c <st25r3916CheckReg>
 800db2c:	4603      	mov	r3, r0
 800db2e:	f083 0301 	eor.w	r3, r3, #1
 800db32:	b2db      	uxtb	r3, r3
 800db34:	2b00      	cmp	r3, #0
 800db36:	d106      	bne.n	800db46 <rfalFieldOnAndStartGT+0x56>
 800db38:	4b1f      	ldr	r3, [pc, #124]	; (800dbb8 <rfalFieldOnAndStartGT+0xc8>)
 800db3a:	791b      	ldrb	r3, [r3, #4]
 800db3c:	f083 0301 	eor.w	r3, r3, #1
 800db40:	b2db      	uxtb	r3, r3
 800db42:	2b00      	cmp	r3, #0
 800db44:	d01c      	beq.n	800db80 <rfalFieldOnAndStartGT+0x90>
    {
        
        /* Set TARFG: 0 (75us+0ms=75us), GT is fulfilled using a SW timer */
        st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 800db46:	2100      	movs	r1, #0
 800db48:	2055      	movs	r0, #85	; 0x55
 800db4a:	f001 ff3d 	bl	800f9c8 <st25r3916WriteRegister>
        
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, 0 );
 800db4e:	2300      	movs	r3, #0
 800db50:	22ff      	movs	r2, #255	; 0xff
 800db52:	21ff      	movs	r1, #255	; 0xff
 800db54:	20c8      	movs	r0, #200	; 0xc8
 800db56:	f001 fc43 	bl	800f3e0 <st25r3916PerformCollisionAvoidance>
 800db5a:	4603      	mov	r3, r0
 800db5c:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3916IsTxEnabled(); //(ret == ERR_NONE);
 800db5e:	2208      	movs	r2, #8
 800db60:	2108      	movs	r1, #8
 800db62:	2002      	movs	r0, #2
 800db64:	f002 f902 	bl	800fd6c <st25r3916CheckReg>
 800db68:	4603      	mov	r3, r0
 800db6a:	461a      	mov	r2, r3
 800db6c:	4b12      	ldr	r3, [pc, #72]	; (800dbb8 <rfalFieldOnAndStartGT+0xc8>)
 800db6e:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 800db70:	4b11      	ldr	r3, [pc, #68]	; (800dbb8 <rfalFieldOnAndStartGT+0xc8>)
 800db72:	791b      	ldrb	r3, [r3, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d003      	beq.n	800db80 <rfalFieldOnAndStartGT+0x90>
        {            
            st25r3916TxRxOn(); /* Enable Tx and Rx (Tx is already On)*/
 800db78:	2148      	movs	r1, #72	; 0x48
 800db7a:	2002      	movs	r0, #2
 800db7c:	f002 f845 	bl	800fc0a <st25r3916SetRegisterBits>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800db80:	4b0d      	ldr	r3, [pc, #52]	; (800dbb8 <rfalFieldOnAndStartGT+0xc8>)
 800db82:	689b      	ldr	r3, [r3, #8]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d011      	beq.n	800dbac <rfalFieldOnAndStartGT+0xbc>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3916_GT_MIN_1FC) ) );
 800db88:	4b0b      	ldr	r3, [pc, #44]	; (800dbb8 <rfalFieldOnAndStartGT+0xc8>)
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800db90:	4293      	cmp	r3, r2
 800db92:	bf38      	it	cc
 800db94:	4613      	movcc	r3, r2
 800db96:	4a09      	ldr	r2, [pc, #36]	; (800dbbc <rfalFieldOnAndStartGT+0xcc>)
 800db98:	fba2 2303 	umull	r2, r3, r2, r3
 800db9c:	0b1b      	lsrs	r3, r3, #12
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7f6 fa15 	bl	8003fd0 <timerCalculateTimer>
 800dba6:	4602      	mov	r2, r0
 800dba8:	4b03      	ldr	r3, [pc, #12]	; (800dbb8 <rfalFieldOnAndStartGT+0xc8>)
 800dbaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    return ret;
 800dbac:	88fb      	ldrh	r3, [r7, #6]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	20000754 	.word	0x20000754
 800dbbc:	4d542005 	.word	0x4d542005

0800dbc0 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 800dbc4:	4b09      	ldr	r3, [pc, #36]	; (800dbec <rfalFieldOff+0x2c>)
 800dbc6:	7d1b      	ldrb	r3, [r3, #20]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d001      	beq.n	800dbd0 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 800dbcc:	f000 fa94 	bl	800e0f8 <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3916TxRxOff();
 800dbd0:	2148      	movs	r1, #72	; 0x48
 800dbd2:	2002      	movs	r0, #2
 800dbd4:	f001 ffe2 	bl	800fb9c <st25r3916ClrRegisterBits>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 800dbd8:	2003      	movs	r0, #3
 800dbda:	f7fe fda5 	bl	800c728 <rfalSetAnalogConfig>
    gRFAL.field = false;
 800dbde:	4b03      	ldr	r3, [pc, #12]	; (800dbec <rfalFieldOff+0x2c>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 800dbe4:	2300      	movs	r3, #0
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	20000754 	.word	0x20000754

0800dbf0 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 800dbf0:	b5b0      	push	{r4, r5, r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d101      	bne.n	800dc02 <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 800dbfe:	2307      	movs	r3, #7
 800dc00:	e127      	b.n	800de52 <rfalStartTransceive+0x262>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800dc02:	4b96      	ldr	r3, [pc, #600]	; (800de5c <rfalStartTransceive+0x26c>)
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	f240 8122 	bls.w	800de50 <rfalStartTransceive+0x260>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3916IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800dc0c:	2208      	movs	r2, #8
 800dc0e:	2108      	movs	r1, #8
 800dc10:	2002      	movs	r0, #2
 800dc12:	f002 f8ab 	bl	800fd6c <st25r3916CheckReg>
 800dc16:	4603      	mov	r3, r0
 800dc18:	f083 0301 	eor.w	r3, r3, #1
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d011      	beq.n	800dc46 <rfalStartTransceive+0x56>
 800dc22:	4b8e      	ldr	r3, [pc, #568]	; (800de5c <rfalStartTransceive+0x26c>)
 800dc24:	785b      	ldrb	r3, [r3, #1]
 800dc26:	2b0a      	cmp	r3, #10
 800dc28:	d00d      	beq.n	800dc46 <rfalStartTransceive+0x56>
 800dc2a:	4b8c      	ldr	r3, [pc, #560]	; (800de5c <rfalStartTransceive+0x26c>)
 800dc2c:	785b      	ldrb	r3, [r3, #1]
 800dc2e:	2b0b      	cmp	r3, #11
 800dc30:	d009      	beq.n	800dc46 <rfalStartTransceive+0x56>
 800dc32:	4b8a      	ldr	r3, [pc, #552]	; (800de5c <rfalStartTransceive+0x26c>)
 800dc34:	785b      	ldrb	r3, [r3, #1]
 800dc36:	2b0c      	cmp	r3, #12
 800dc38:	d005      	beq.n	800dc46 <rfalStartTransceive+0x56>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d001      	beq.n	800dc46 <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 800dc42:	2321      	movs	r3, #33	; 0x21
 800dc44:	e105      	b.n	800de52 <rfalStartTransceive+0x262>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 800dc46:	4b85      	ldr	r3, [pc, #532]	; (800de5c <rfalStartTransceive+0x26c>)
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	f103 0418 	add.w	r4, r3, #24
 800dc4e:	4615      	mov	r5, r2
 800dc50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800dc5c:	4b7f      	ldr	r3, [pc, #508]	; (800de5c <rfalStartTransceive+0x26c>)
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d04b      	beq.n	800dcfc <rfalStartTransceive+0x10c>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 800dc64:	2340      	movs	r3, #64	; 0x40
 800dc66:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800dc68:	4b7c      	ldr	r3, [pc, #496]	; (800de5c <rfalStartTransceive+0x26c>)
 800dc6a:	785b      	ldrb	r3, [r3, #1]
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d102      	bne.n	800dc76 <rfalStartTransceive+0x86>
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	33d4      	adds	r3, #212	; 0xd4
 800dc74:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800dc76:	4b79      	ldr	r3, [pc, #484]	; (800de5c <rfalStartTransceive+0x26c>)
 800dc78:	785b      	ldrb	r3, [r3, #1]
 800dc7a:	2b02      	cmp	r3, #2
 800dc7c:	d102      	bne.n	800dc84 <rfalStartTransceive+0x94>
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	33d4      	adds	r3, #212	; 0xd4
 800dc82:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 800dc84:	4b75      	ldr	r3, [pc, #468]	; (800de5c <rfalStartTransceive+0x26c>)
 800dc86:	785b      	ldrb	r3, [r3, #1]
 800dc88:	2b03      	cmp	r3, #3
 800dc8a:	d103      	bne.n	800dc94 <rfalStartTransceive+0xa4>
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dc92:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 800dc94:	4b71      	ldr	r3, [pc, #452]	; (800de5c <rfalStartTransceive+0x26c>)
 800dc96:	785b      	ldrb	r3, [r3, #1]
 800dc98:	2b07      	cmp	r3, #7
 800dc9a:	d102      	bne.n	800dca2 <rfalStartTransceive+0xb2>
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	3340      	adds	r3, #64	; 0x40
 800dca0:	60fb      	str	r3, [r7, #12]
            
            /* Ensure that MRT is using 64/fc steps */
            st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 800dca2:	2108      	movs	r1, #8
 800dca4:	2012      	movs	r0, #18
 800dca6:	f001 ff79 	bl	800fb9c <st25r3916ClrRegisterBits>
            
            
            /* If Correlator is being used further adjustment is required for NFCB */
            if( (st25r3916CheckReg(ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, 0x00U)) && (gRFAL.mode == RFAL_MODE_POLL_NFCB) )
 800dcaa:	2200      	movs	r2, #0
 800dcac:	2104      	movs	r1, #4
 800dcae:	200a      	movs	r0, #10
 800dcb0:	f002 f85c 	bl	800fd6c <st25r3916CheckReg>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d00f      	beq.n	800dcda <rfalStartTransceive+0xea>
 800dcba:	4b68      	ldr	r3, [pc, #416]	; (800de5c <rfalStartTransceive+0x26c>)
 800dcbc:	785b      	ldrb	r3, [r3, #1]
 800dcbe:	2b03      	cmp	r3, #3
 800dcc0:	d10b      	bne.n	800dcda <rfalStartTransceive+0xea>
            {
                FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJT_CORR;                                                                                        /* Reduce FDT(Listen)                   */
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	3380      	adds	r3, #128	; 0x80
 800dcc6:	60fb      	str	r3, [r7, #12]
                st25r3916SetRegisterBits( ST25R3916_REG_CORR_CONF1, ST25R3916_REG_CORR_CONF1_corr_s3 );                                                 /* Ensure BPSK start to 33 pilot pulses */
 800dcc8:	2108      	movs	r1, #8
 800dcca:	204c      	movs	r0, #76	; 0x4c
 800dccc:	f001 ff9d 	bl	800fc0a <st25r3916SetRegisterBits>
                st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 800dcd0:	2214      	movs	r2, #20
 800dcd2:	211f      	movs	r1, #31
 800dcd4:	2046      	movs	r0, #70	; 0x46
 800dcd6:	f001 ffc5 	bl	800fc64 <st25r3916ChangeRegisterBits>
            }
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 800dcda:	4b60      	ldr	r3, [pc, #384]	; (800de5c <rfalStartTransceive+0x26c>)
 800dcdc:	68db      	ldr	r3, [r3, #12]
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d806      	bhi.n	800dcf2 <rfalStartTransceive+0x102>
 800dce4:	4b5d      	ldr	r3, [pc, #372]	; (800de5c <rfalStartTransceive+0x26c>)
 800dce6:	68da      	ldr	r2, [r3, #12]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	1ad3      	subs	r3, r2, r3
 800dcec:	099b      	lsrs	r3, r3, #6
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	e000      	b.n	800dcf4 <rfalStartTransceive+0x104>
 800dcf2:	2304      	movs	r3, #4
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	200f      	movs	r0, #15
 800dcf8:	f001 fe66 	bl	800f9c8 <st25r3916WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800dcfc:	4b57      	ldr	r3, [pc, #348]	; (800de5c <rfalStartTransceive+0x26c>)
 800dcfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd04:	d046      	beq.n	800dd94 <rfalStartTransceive+0x1a4>
 800dd06:	4b55      	ldr	r3, [pc, #340]	; (800de5c <rfalStartTransceive+0x26c>)
 800dd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d042      	beq.n	800dd94 <rfalStartTransceive+0x1a4>
        {
            /* Ensure proper timing configuration */
            if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 800dd0e:	4b53      	ldr	r3, [pc, #332]	; (800de5c <rfalStartTransceive+0x26c>)
 800dd10:	68da      	ldr	r2, [r3, #12]
 800dd12:	4b52      	ldr	r3, [pc, #328]	; (800de5c <rfalStartTransceive+0x26c>)
 800dd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d301      	bcc.n	800dd1e <rfalStartTransceive+0x12e>
            {
                return ERR_PARAM;
 800dd1a:	2307      	movs	r3, #7
 800dd1c:	e099      	b.n	800de52 <rfalStartTransceive+0x262>
            }
            
            FxTAdj = RFAL_FWT_ADJUSTMENT;
 800dd1e:	2340      	movs	r3, #64	; 0x40
 800dd20:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800dd22:	4b4e      	ldr	r3, [pc, #312]	; (800de5c <rfalStartTransceive+0x26c>)
 800dd24:	785b      	ldrb	r3, [r3, #1]
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d103      	bne.n	800dd32 <rfalStartTransceive+0x142>
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800dd30:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800dd32:	4b4a      	ldr	r3, [pc, #296]	; (800de5c <rfalStartTransceive+0x26c>)
 800dd34:	785b      	ldrb	r3, [r3, #1]
 800dd36:	2b02      	cmp	r3, #2
 800dd38:	d103      	bne.n	800dd42 <rfalStartTransceive+0x152>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800dd40:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 800dd42:	4b46      	ldr	r3, [pc, #280]	; (800de5c <rfalStartTransceive+0x26c>)
 800dd44:	785b      	ldrb	r3, [r3, #1]
 800dd46:	2b03      	cmp	r3, #3
 800dd48:	d103      	bne.n	800dd52 <rfalStartTransceive+0x162>
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd50:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 800dd52:	4b42      	ldr	r3, [pc, #264]	; (800de5c <rfalStartTransceive+0x26c>)
 800dd54:	785b      	ldrb	r3, [r3, #1]
 800dd56:	2b06      	cmp	r3, #6
 800dd58:	d10b      	bne.n	800dd72 <rfalStartTransceive+0x182>
            {
                FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 800dd5a:	4b40      	ldr	r3, [pc, #256]	; (800de5c <rfalStartTransceive+0x26c>)
 800dd5c:	789b      	ldrb	r3, [r3, #2]
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d102      	bne.n	800dd68 <rfalStartTransceive+0x178>
 800dd62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd66:	e001      	b.n	800dd6c <rfalStartTransceive+0x17c>
 800dd68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	4413      	add	r3, r2
 800dd70:	60fb      	str	r3, [r7, #12]
            }
            
            /* Ensure that the given FWT doesn't exceed NRT maximum */
            gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3916_NRT_MAX_1FC );
 800dd72:	4b3a      	ldr	r3, [pc, #232]	; (800de5c <rfalStartTransceive+0x26c>)
 800dd74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	4413      	add	r3, r2
 800dd7a:	4a39      	ldr	r2, [pc, #228]	; (800de60 <rfalStartTransceive+0x270>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	bf28      	it	cs
 800dd80:	4613      	movcs	r3, r2
 800dd82:	4a36      	ldr	r2, [pc, #216]	; (800de5c <rfalStartTransceive+0x26c>)
 800dd84:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* Set FWT in the NRT */
            st25r3916SetNoResponseTime( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 800dd86:	4b35      	ldr	r3, [pc, #212]	; (800de5c <rfalStartTransceive+0x26c>)
 800dd88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd8a:	099b      	lsrs	r3, r3, #6
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f001 fbbd 	bl	800f50c <st25r3916SetNoResponseTime>
 800dd92:	e002      	b.n	800dd9a <rfalStartTransceive+0x1aa>
        }
        else
        {
            /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 800dd94:	2000      	movs	r0, #0
 800dd96:	f001 fbb9 	bl	800f50c <st25r3916SetNoResponseTime>
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 800dd9a:	4b30      	ldr	r3, [pc, #192]	; (800de5c <rfalStartTransceive+0x26c>)
 800dd9c:	2203      	movs	r2, #3
 800dd9e:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 800dda0:	4b2e      	ldr	r3, [pc, #184]	; (800de5c <rfalStartTransceive+0x26c>)
 800dda2:	220b      	movs	r2, #11
 800dda4:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800dda6:	4b2d      	ldr	r3, [pc, #180]	; (800de5c <rfalStartTransceive+0x26c>)
 800dda8:	2202      	movs	r2, #2
 800ddaa:	82da      	strh	r2, [r3, #22]
        
        
    #if RFAL_FEATURE_NFCV
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800ddac:	4b2b      	ldr	r3, [pc, #172]	; (800de5c <rfalStartTransceive+0x26c>)
 800ddae:	785b      	ldrb	r3, [r3, #1]
 800ddb0:	2b07      	cmp	r3, #7
 800ddb2:	d003      	beq.n	800ddbc <rfalStartTransceive+0x1cc>
 800ddb4:	4b29      	ldr	r3, [pc, #164]	; (800de5c <rfalStartTransceive+0x26c>)
 800ddb6:	785b      	ldrb	r3, [r3, #1]
 800ddb8:	2b08      	cmp	r3, #8
 800ddba:	d128      	bne.n	800de0e <rfalStartTransceive+0x21e>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 800ddbc:	4a27      	ldr	r2, [pc, #156]	; (800de5c <rfalStartTransceive+0x26c>)
 800ddbe:	4b27      	ldr	r3, [pc, #156]	; (800de5c <rfalStartTransceive+0x26c>)
 800ddc0:	f502 7417 	add.w	r4, r2, #604	; 0x25c
 800ddc4:	f103 0518 	add.w	r5, r3, #24
 800ddc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ddd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 800ddd4:	4b21      	ldr	r3, [pc, #132]	; (800de5c <rfalStartTransceive+0x26c>)
 800ddd6:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d001      	beq.n	800dde2 <rfalStartTransceive+0x1f2>
 800ddde:	4b21      	ldr	r3, [pc, #132]	; (800de64 <rfalStartTransceive+0x274>)
 800dde0:	e000      	b.n	800dde4 <rfalStartTransceive+0x1f4>
 800dde2:	2300      	movs	r3, #0
 800dde4:	4a1d      	ldr	r2, [pc, #116]	; (800de5c <rfalStartTransceive+0x26c>)
 800dde6:	6213      	str	r3, [r2, #32]
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 800dde8:	4b1c      	ldr	r3, [pc, #112]	; (800de5c <rfalStartTransceive+0x26c>)
 800ddea:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 800ddee:	849a      	strh	r2, [r3, #36]	; 0x24
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 800ddf0:	4b1a      	ldr	r3, [pc, #104]	; (800de5c <rfalStartTransceive+0x26c>)
 800ddf2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ddf6:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800ddfa:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 800ddfe:	4a17      	ldr	r2, [pc, #92]	; (800de5c <rfalStartTransceive+0x26c>)
 800de00:	62d3      	str	r3, [r2, #44]	; 0x2c
          
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 800de02:	4b16      	ldr	r3, [pc, #88]	; (800de5c <rfalStartTransceive+0x26c>)
 800de04:	699b      	ldr	r3, [r3, #24]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d001      	beq.n	800de0e <rfalStartTransceive+0x21e>
            {
                return  ERR_NONE;
 800de0a:	2300      	movs	r3, #0
 800de0c:	e021      	b.n	800de52 <rfalStartTransceive+0x262>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 800de0e:	4b13      	ldr	r3, [pc, #76]	; (800de5c <rfalStartTransceive+0x26c>)
 800de10:	699b      	ldr	r3, [r3, #24]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d003      	beq.n	800de1e <rfalStartTransceive+0x22e>
 800de16:	4b11      	ldr	r3, [pc, #68]	; (800de5c <rfalStartTransceive+0x26c>)
 800de18:	8b9b      	ldrh	r3, [r3, #28]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d116      	bne.n	800de4c <rfalStartTransceive+0x25c>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800de1e:	f000 f983 	bl	800e128 <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 800de22:	4b0e      	ldr	r3, [pc, #56]	; (800de5c <rfalStartTransceive+0x26c>)
 800de24:	785b      	ldrb	r3, [r3, #1]
 800de26:	2b09      	cmp	r3, #9
 800de28:	d003      	beq.n	800de32 <rfalStartTransceive+0x242>
 800de2a:	4b0c      	ldr	r3, [pc, #48]	; (800de5c <rfalStartTransceive+0x26c>)
 800de2c:	785b      	ldrb	r3, [r3, #1]
 800de2e:	2b0d      	cmp	r3, #13
 800de30:	d103      	bne.n	800de3a <rfalStartTransceive+0x24a>
            {
                st25r3916TxOff();
 800de32:	2108      	movs	r1, #8
 800de34:	2002      	movs	r0, #2
 800de36:	f001 feb1 	bl	800fb9c <st25r3916ClrRegisterBits>
            } 
            
            /* No Tx done, enable the Receiver */
            st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800de3a:	20d1      	movs	r0, #209	; 0xd1
 800de3c:	f001 fe4d 	bl	800fada <st25r3916ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3916ExecuteCommand( ST25R3916_CMD_START_NO_RESPONSE_TIMER );
 800de40:	20e3      	movs	r0, #227	; 0xe3
 800de42:	f001 fe4a 	bl	800fada <st25r3916ExecuteCommand>

            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800de46:	4b05      	ldr	r3, [pc, #20]	; (800de5c <rfalStartTransceive+0x26c>)
 800de48:	2251      	movs	r2, #81	; 0x51
 800de4a:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 800de4c:	2300      	movs	r3, #0
 800de4e:	e000      	b.n	800de52 <rfalStartTransceive+0x262>
    }
    
    return ERR_WRONG_STATE;
 800de50:	2321      	movs	r3, #33	; 0x21
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bdb0      	pop	{r4, r5, r7, pc}
 800de5a:	bf00      	nop
 800de5c:	20000754 	.word	0x20000754
 800de60:	0ffff000 	.word	0x0ffff000
 800de64:	200007a4 	.word	0x200007a4

0800de68 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 800de68:	b480      	push	{r7}
 800de6a:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800de6c:	4b09      	ldr	r3, [pc, #36]	; (800de94 <rfalIsTransceiveInTx+0x2c>)
 800de6e:	7d1b      	ldrb	r3, [r3, #20]
 800de70:	2b0a      	cmp	r3, #10
 800de72:	d905      	bls.n	800de80 <rfalIsTransceiveInTx+0x18>
 800de74:	4b07      	ldr	r3, [pc, #28]	; (800de94 <rfalIsTransceiveInTx+0x2c>)
 800de76:	7d1b      	ldrb	r3, [r3, #20]
 800de78:	2b50      	cmp	r3, #80	; 0x50
 800de7a:	d801      	bhi.n	800de80 <rfalIsTransceiveInTx+0x18>
 800de7c:	2301      	movs	r3, #1
 800de7e:	e000      	b.n	800de82 <rfalIsTransceiveInTx+0x1a>
 800de80:	2300      	movs	r3, #0
 800de82:	f003 0301 	and.w	r3, r3, #1
 800de86:	b2db      	uxtb	r3, r3
}
 800de88:	4618      	mov	r0, r3
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	20000754 	.word	0x20000754

0800de98 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 800de98:	b480      	push	{r7}
 800de9a:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800de9c:	4b05      	ldr	r3, [pc, #20]	; (800deb4 <rfalIsTransceiveInRx+0x1c>)
 800de9e:	7d1b      	ldrb	r3, [r3, #20]
 800dea0:	2b50      	cmp	r3, #80	; 0x50
 800dea2:	bf8c      	ite	hi
 800dea4:	2301      	movhi	r3, #1
 800dea6:	2300      	movls	r3, #0
 800dea8:	b2db      	uxtb	r3, r3
}
 800deaa:	4618      	mov	r0, r3
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr
 800deb4:	20000754 	.word	0x20000754

0800deb8 <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b08c      	sub	sp, #48	; 0x30
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	607a      	str	r2, [r7, #4]
 800dec2:	461a      	mov	r2, r3
 800dec4:	460b      	mov	r3, r1
 800dec6:	817b      	strh	r3, [r7, #10]
 800dec8:	4613      	mov	r3, r2
 800deca:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	613b      	str	r3, [r7, #16]
 800ded0:	897b      	ldrh	r3, [r7, #10]
 800ded2:	00db      	lsls	r3, r3, #3
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	82bb      	strh	r3, [r7, #20]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	61bb      	str	r3, [r7, #24]
 800dedc:	893b      	ldrh	r3, [r7, #8]
 800dede:	00db      	lsls	r3, r3, #3
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	83bb      	strh	r3, [r7, #28]
 800dee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee6:	623b      	str	r3, [r7, #32]
 800dee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deea:	627b      	str	r3, [r7, #36]	; 0x24
 800deec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deee:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800def0:	f107 0310 	add.w	r3, r7, #16
 800def4:	4618      	mov	r0, r3
 800def6:	f7ff fe7b 	bl	800dbf0 <rfalStartTransceive>
 800defa:	4603      	mov	r3, r0
 800defc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800defe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df00:	2b00      	cmp	r3, #0
 800df02:	d001      	beq.n	800df08 <rfalTransceiveBlockingTx+0x50>
 800df04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df06:	e002      	b.n	800df0e <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 800df08:	f000 f805 	bl	800df16 <rfalTransceiveRunBlockingTx>
 800df0c:	4603      	mov	r3, r0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3730      	adds	r7, #48	; 0x30
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b082      	sub	sp, #8
 800df1a:	af00      	add	r7, sp, #0
    ReturnCode ret;
        
    do{
        rfalWorker();
 800df1c:	f000 f8a6 	bl	800e06c <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800df20:	f000 f892 	bl	800e048 <rfalGetTransceiveStatus>
 800df24:	4603      	mov	r3, r0
 800df26:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800df28:	f7ff ff9e 	bl	800de68 <rfalIsTransceiveInTx>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d002      	beq.n	800df38 <rfalTransceiveRunBlockingTx+0x22>
 800df32:	88fb      	ldrh	r3, [r7, #6]
 800df34:	2b02      	cmp	r3, #2
 800df36:	d0f1      	beq.n	800df1c <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 800df38:	f7ff ffae 	bl	800de98 <rfalIsTransceiveInRx>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d001      	beq.n	800df46 <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 800df42:	2300      	movs	r3, #0
 800df44:	e000      	b.n	800df48 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 800df46:	88fb      	ldrh	r3, [r7, #6]
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 800df56:	f000 f889 	bl	800e06c <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800df5a:	f000 f875 	bl	800e048 <rfalGetTransceiveStatus>
 800df5e:	4603      	mov	r3, r0
 800df60:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );    
 800df62:	f7ff ff99 	bl	800de98 <rfalIsTransceiveInRx>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d002      	beq.n	800df72 <rfalTransceiveBlockingRx+0x22>
 800df6c:	88fb      	ldrh	r3, [r7, #6]
 800df6e:	2b02      	cmp	r3, #2
 800df70:	d0f1      	beq.n	800df56 <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 800df72:	88fb      	ldrh	r3, [r7, #6]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b08a      	sub	sp, #40	; 0x28
 800df80:	af04      	add	r7, sp, #16
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	607a      	str	r2, [r7, #4]
 800df86:	461a      	mov	r2, r3
 800df88:	460b      	mov	r3, r1
 800df8a:	817b      	strh	r3, [r7, #10]
 800df8c:	4613      	mov	r3, r2
 800df8e:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 800df90:	893a      	ldrh	r2, [r7, #8]
 800df92:	8979      	ldrh	r1, [r7, #10]
 800df94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df96:	9302      	str	r3, [sp, #8]
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9a:	9301      	str	r3, [sp, #4]
 800df9c:	6a3b      	ldr	r3, [r7, #32]
 800df9e:	9300      	str	r3, [sp, #0]
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f7ff ff87 	bl	800deb8 <rfalTransceiveBlockingTx>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	82fb      	strh	r3, [r7, #22]
 800dfae:	8afb      	ldrh	r3, [r7, #22]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <rfalTransceiveBlockingTxRx+0x3c>
 800dfb4:	8afb      	ldrh	r3, [r7, #22]
 800dfb6:	e00e      	b.n	800dfd6 <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 800dfb8:	f7ff ffca 	bl	800df50 <rfalTransceiveBlockingRx>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 800dfc0:	6a3b      	ldr	r3, [r7, #32]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d006      	beq.n	800dfd4 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen = rfalConvBitsToBytes(*actLen);
 800dfc6:	6a3b      	ldr	r3, [r7, #32]
 800dfc8:	881b      	ldrh	r3, [r3, #0]
 800dfca:	3307      	adds	r3, #7
 800dfcc:	08db      	lsrs	r3, r3, #3
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	6a3b      	ldr	r3, [r7, #32]
 800dfd2:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 800dfd4:	8afb      	ldrh	r3, [r7, #22]
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3718      	adds	r7, #24
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
	...

0800dfe0 <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 800dfe4:	4b17      	ldr	r3, [pc, #92]	; (800e044 <rfalRunTransceiveWorker+0x64>)
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	2b03      	cmp	r3, #3
 800dfea:	d127      	bne.n	800e03c <rfalRunTransceiveWorker+0x5c>
    {
        /*******************************************************************************/
        /* Check Transceive Sanity Timer has expired */
        if( gRFAL.tmr.txRx != RFAL_TIMING_NONE )
 800dfec:	4b15      	ldr	r3, [pc, #84]	; (800e044 <rfalRunTransceiveWorker+0x64>)
 800dfee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d00d      	beq.n	800e010 <rfalRunTransceiveWorker+0x30>
        {
            if( rfalTimerisExpired( gRFAL.tmr.txRx ) )
 800dff4:	4b13      	ldr	r3, [pc, #76]	; (800e044 <rfalRunTransceiveWorker+0x64>)
 800dff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7f5 fff7 	bl	8003fec <timerIsExpired>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d005      	beq.n	800e010 <rfalRunTransceiveWorker+0x30>
            {
                /* If sanity timer has expired abort ongoing transceive and signal error */
                gRFAL.TxRx.status = ERR_IO;
 800e004:	4b0f      	ldr	r3, [pc, #60]	; (800e044 <rfalRunTransceiveWorker+0x64>)
 800e006:	2203      	movs	r2, #3
 800e008:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e00a:	4b0e      	ldr	r3, [pc, #56]	; (800e044 <rfalRunTransceiveWorker+0x64>)
 800e00c:	225a      	movs	r2, #90	; 0x5a
 800e00e:	751a      	strb	r2, [r3, #20]
            }
        }
        
        /*******************************************************************************/
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 800e010:	f7ff ff2a 	bl	800de68 <rfalIsTransceiveInTx>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d005      	beq.n	800e026 <rfalRunTransceiveWorker+0x46>
        {
            rfalTransceiveTx();
 800e01a:	f000 f957 	bl	800e2cc <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 800e01e:	f000 f813 	bl	800e048 <rfalGetTransceiveStatus>
 800e022:	4603      	mov	r3, r0
 800e024:	e00b      	b.n	800e03e <rfalRunTransceiveWorker+0x5e>
        }
        if( rfalIsTransceiveInRx() )
 800e026:	f7ff ff37 	bl	800de98 <rfalIsTransceiveInRx>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d005      	beq.n	800e03c <rfalRunTransceiveWorker+0x5c>
        {
            rfalTransceiveRx();
 800e030:	f000 fb92 	bl	800e758 <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 800e034:	f000 f808 	bl	800e048 <rfalGetTransceiveStatus>
 800e038:	4603      	mov	r3, r0
 800e03a:	e000      	b.n	800e03e <rfalRunTransceiveWorker+0x5e>
        }
    }    
    return ERR_WRONG_STATE;
 800e03c:	2321      	movs	r3, #33	; 0x21
}
 800e03e:	4618      	mov	r0, r3
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	20000754 	.word	0x20000754

0800e048 <rfalGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalGetTransceiveStatus( void )
{
 800e048:	b480      	push	{r7}
 800e04a:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800e04c:	4b06      	ldr	r3, [pc, #24]	; (800e068 <rfalGetTransceiveStatus+0x20>)
 800e04e:	7d1b      	ldrb	r3, [r3, #20]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d102      	bne.n	800e05a <rfalGetTransceiveStatus+0x12>
 800e054:	4b04      	ldr	r3, [pc, #16]	; (800e068 <rfalGetTransceiveStatus+0x20>)
 800e056:	8adb      	ldrh	r3, [r3, #22]
 800e058:	e000      	b.n	800e05c <rfalGetTransceiveStatus+0x14>
 800e05a:	2302      	movs	r3, #2
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	46bd      	mov	sp, r7
 800e060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e064:	4770      	bx	lr
 800e066:	bf00      	nop
 800e068:	20000754 	.word	0x20000754

0800e06c <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 800e070:	4b04      	ldr	r3, [pc, #16]	; (800e084 <rfalWorker+0x18>)
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	2b03      	cmp	r3, #3
 800e076:	d000      	beq.n	800e07a <rfalWorker+0xe>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800e078:	e002      	b.n	800e080 <rfalWorker+0x14>
            rfalRunTransceiveWorker();
 800e07a:	f7ff ffb1 	bl	800dfe0 <rfalRunTransceiveWorker>
            break;
 800e07e:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 800e080:	bf00      	nop
 800e082:	bd80      	pop	{r7, pc}
 800e084:	20000754 	.word	0x20000754

0800e088 <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
    uint16_t fifoBytesToRead;
 
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 800e08e:	f000 fee9 	bl	800ee64 <rfalFIFOStatusGetNumBytes>
 800e092:	4603      	mov	r3, r0
 800e094:	80fb      	strh	r3, [r7, #6]
    

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 800e096:	4b17      	ldr	r3, [pc, #92]	; (800e0f4 <rfalErrorHandling+0x6c>)
 800e098:	785b      	ldrb	r3, [r3, #1]
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d125      	bne.n	800e0ea <rfalErrorHandling+0x62>
        
        /*******************************************************************************/
        /* If we received a frame with a incomplete byte we`ll raise a specific error  *
         * ( support for T2T 4 bit ACK / NAK, MIFARE and Kovio )                       */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 800e09e:	4b15      	ldr	r3, [pc, #84]	; (800e0f4 <rfalErrorHandling+0x6c>)
 800e0a0:	8adb      	ldrh	r3, [r3, #22]
 800e0a2:	2b1b      	cmp	r3, #27
 800e0a4:	d003      	beq.n	800e0ae <rfalErrorHandling+0x26>
 800e0a6:	4b13      	ldr	r3, [pc, #76]	; (800e0f4 <rfalErrorHandling+0x6c>)
 800e0a8:	8adb      	ldrh	r3, [r3, #22]
 800e0aa:	2b15      	cmp	r3, #21
 800e0ac:	d11d      	bne.n	800e0ea <rfalErrorHandling+0x62>
        {
            if( rfalFIFOStatusIsIncompleteByte() )
 800e0ae:	f000 fef5 	bl	800ee9c <rfalFIFOStatusIsIncompleteByte>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d018      	beq.n	800e0ea <rfalErrorHandling+0x62>
            {
                st25r3916ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 800e0b8:	4b0e      	ldr	r3, [pc, #56]	; (800e0f4 <rfalErrorHandling+0x6c>)
 800e0ba:	6a1b      	ldr	r3, [r3, #32]
 800e0bc:	88fa      	ldrh	r2, [r7, #6]
 800e0be:	4611      	mov	r1, r2
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f001 fcee 	bl	800faa2 <st25r3916ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 800e0c6:	4b0b      	ldr	r3, [pc, #44]	; (800e0f4 <rfalErrorHandling+0x6c>)
 800e0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d007      	beq.n	800e0de <rfalErrorHandling+0x56>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 800e0ce:	f000 ff09 	bl	800eee4 <rfalFIFOGetNumIncompleteBits>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	4b07      	ldr	r3, [pc, #28]	; (800e0f4 <rfalErrorHandling+0x6c>)
 800e0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0da:	b292      	uxth	r2, r2
 800e0dc:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800e0de:	4b05      	ldr	r3, [pc, #20]	; (800e0f4 <rfalErrorHandling+0x6c>)
 800e0e0:	2228      	movs	r2, #40	; 0x28
 800e0e2:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e0e4:	4b03      	ldr	r3, [pc, #12]	; (800e0f4 <rfalErrorHandling+0x6c>)
 800e0e6:	225a      	movs	r2, #90	; 0x5a
 800e0e8:	751a      	strb	r2, [r3, #20]
            }
        }
    }
    
}
 800e0ea:	bf00      	nop
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	20000754 	.word	0x20000754

0800e0f8 <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 800e0fc:	21e0      	movs	r1, #224	; 0xe0
 800e0fe:	2005      	movs	r0, #5
 800e100:	f001 fd4c 	bl	800fb9c <st25r3916ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e104:	2108      	movs	r1, #8
 800e106:	200c      	movs	r0, #12
 800e108:	f001 fd7f 	bl	800fc0a <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Transceive timers                                                           */
    /*******************************************************************************/
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800e10c:	4b05      	ldr	r3, [pc, #20]	; (800e124 <rfalCleanupTransceive+0x2c>)
 800e10e:	2200      	movs	r2, #0
 800e110:	645a      	str	r2, [r3, #68]	; 0x44
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 800e112:	4b04      	ldr	r3, [pc, #16]	; (800e124 <rfalCleanupTransceive+0x2c>)
 800e114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e116:	2b00      	cmp	r3, #0
 800e118:	d002      	beq.n	800e120 <rfalCleanupTransceive+0x28>
    {
        gRFAL.callbacks.postTxRx();
 800e11a:	4b02      	ldr	r3, [pc, #8]	; (800e124 <rfalCleanupTransceive+0x2c>)
 800e11c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e11e:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 800e120:	bf00      	nop
 800e122:	bd80      	pop	{r7, pc}
 800e124:	20000754 	.word	0x20000754

0800e128 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0
    uint32_t maskInterrupts;
    uint8_t  reg;
    
    /* If we are in RW or AP2P mode */
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 800e12e:	4b64      	ldr	r3, [pc, #400]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e130:	785b      	ldrb	r3, [r3, #1]
 800e132:	2b0a      	cmp	r3, #10
 800e134:	d00e      	beq.n	800e154 <rfalPrepareTransceive+0x2c>
 800e136:	4b62      	ldr	r3, [pc, #392]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e138:	785b      	ldrb	r3, [r3, #1]
 800e13a:	2b0b      	cmp	r3, #11
 800e13c:	d00a      	beq.n	800e154 <rfalPrepareTransceive+0x2c>
 800e13e:	4b60      	ldr	r3, [pc, #384]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e140:	785b      	ldrb	r3, [r3, #1]
 800e142:	2b0c      	cmp	r3, #12
 800e144:	d006      	beq.n	800e154 <rfalPrepareTransceive+0x2c>
    {
        /* Reset receive logic with STOP command */
        st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 800e146:	20c2      	movs	r0, #194	; 0xc2
 800e148:	f001 fcc7 	bl	800fada <st25r3916ExecuteCommand>
    
        /* Reset Rx Gain */
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 800e14c:	20d5      	movs	r0, #213	; 0xd5
 800e14e:	f001 fcc4 	bl	800fada <st25r3916ExecuteCommand>
 800e152:	e002      	b.n	800e15a <rfalPrepareTransceive+0x32>
    }
    else
    {
        /* In Passive Listen Mode do not use STOP as it stops FDT timer */
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800e154:	20db      	movs	r0, #219	; 0xdb
 800e156:	f001 fcc0 	bl	800fada <st25r3916ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800e15a:	4b59      	ldr	r3, [pc, #356]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e15c:	785b      	ldrb	r3, [r3, #1]
 800e15e:	2b09      	cmp	r3, #9
 800e160:	d01c      	beq.n	800e19c <rfalPrepareTransceive+0x74>
 800e162:	4b57      	ldr	r3, [pc, #348]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e164:	785b      	ldrb	r3, [r3, #1]
 800e166:	2b0d      	cmp	r3, #13
 800e168:	d018      	beq.n	800e19c <rfalPrepareTransceive+0x74>
    {
        /* In Passive communications General Purpose Timer is used to measure FDT Poll */
        if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800e16a:	4b55      	ldr	r3, [pc, #340]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d014      	beq.n	800e19c <rfalPrepareTransceive+0x74>
        {
            /* Configure GPT to start at RX end */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 800e172:	4b53      	ldr	r3, [pc, #332]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e174:	691b      	ldr	r3, [r3, #16]
 800e176:	f240 423b 	movw	r2, #1083	; 0x43b
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d804      	bhi.n	800e188 <rfalPrepareTransceive+0x60>
 800e17e:	4b50      	ldr	r3, [pc, #320]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e180:	691b      	ldr	r3, [r3, #16]
 800e182:	08db      	lsrs	r3, r3, #3
 800e184:	b29b      	uxth	r3, r3
 800e186:	e005      	b.n	800e194 <rfalPrepareTransceive+0x6c>
 800e188:	4b4d      	ldr	r3, [pc, #308]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e18a:	691b      	ldr	r3, [r3, #16]
 800e18c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800e190:	08db      	lsrs	r3, r3, #3
 800e192:	b29b      	uxth	r3, r3
 800e194:	2120      	movs	r1, #32
 800e196:	4618      	mov	r0, r3
 800e198:	f001 fa0d 	bl	800f5b6 <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 800e19c:	4b48      	ldr	r3, [pc, #288]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e19e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <rfalPrepareTransceive+0x82>
    {
        gRFAL.callbacks.preTxRx();
 800e1a4:	4b46      	ldr	r3, [pc, #280]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e1a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1a8:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    
    maskInterrupts = ( ST25R3916_IRQ_MASK_FWL  | ST25R3916_IRQ_MASK_TXE  |
 800e1aa:	4b46      	ldr	r3, [pc, #280]	; (800e2c4 <rfalPrepareTransceive+0x19c>)
 800e1ac:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3916_REG_ISO14443A_NFC_no_tx_par_off | ST25R3916_REG_ISO14443A_NFC_no_rx_par_off | ST25R3916_REG_ISO14443A_NFC_nfc_f0_off);
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 800e1b2:	4b43      	ldr	r3, [pc, #268]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b6:	f003 0304 	and.w	r3, r3, #4
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d003      	beq.n	800e1c6 <rfalPrepareTransceive+0x9e>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_nfc_f0;
 800e1be:	78fb      	ldrb	r3, [r7, #3]
 800e1c0:	f043 0320 	orr.w	r3, r3, #32
 800e1c4:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 800e1c6:	4b3e      	ldr	r3, [pc, #248]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ca:	f003 0310 	and.w	r3, r3, #16
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d003      	beq.n	800e1da <rfalPrepareTransceive+0xb2>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_rx_par;
 800e1d2:	78fb      	ldrb	r3, [r7, #3]
 800e1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1d8:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 800e1da:	4b39      	ldr	r3, [pc, #228]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1de:	f003 0320 	and.w	r3, r3, #32
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d003      	beq.n	800e1ee <rfalPrepareTransceive+0xc6>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_tx_par;
 800e1e6:	78fb      	ldrb	r3, [r7, #3]
 800e1e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e1ec:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0), reg );
 800e1ee:	78fb      	ldrb	r3, [r7, #3]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	21e0      	movs	r1, #224	; 0xe0
 800e1f4:	2005      	movs	r0, #5
 800e1f6:	f001 fd35 	bl	800fc64 <st25r3916ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 800e1fa:	4b31      	ldr	r3, [pc, #196]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1fe:	f003 0308 	and.w	r3, r3, #8
 800e202:	2b00      	cmp	r3, #0
 800e204:	d004      	beq.n	800e210 <rfalPrepareTransceive+0xe8>
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e206:	2108      	movs	r1, #8
 800e208:	200c      	movs	r0, #12
 800e20a:	f001 fcc7 	bl	800fb9c <st25r3916ClrRegisterBits>
 800e20e:	e003      	b.n	800e218 <rfalPrepareTransceive+0xf0>
    }
    else
    {
        st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e210:	2108      	movs	r1, #8
 800e212:	200c      	movs	r0, #12
 800e214:	f001 fcf9 	bl	800fc0a <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800e218:	4b29      	ldr	r3, [pc, #164]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e21a:	79db      	ldrb	r3, [r3, #7]
 800e21c:	2b02      	cmp	r3, #2
 800e21e:	d108      	bne.n	800e232 <rfalPrepareTransceive+0x10a>
    {
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800e220:	2102      	movs	r1, #2
 800e222:	2012      	movs	r0, #18
 800e224:	f001 fcf1 	bl	800fc0a <st25r3916SetRegisterBits>
        maskInterrupts |= ST25R3916_IRQ_MASK_RX_REST;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f043 0302 	orr.w	r3, r3, #2
 800e22e:	607b      	str	r3, [r7, #4]
 800e230:	e003      	b.n	800e23a <rfalPrepareTransceive+0x112>
    }
    else
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800e232:	2102      	movs	r1, #2
 800e234:	2012      	movs	r0, #18
 800e236:	f001 fcb1 	bl	800fb9c <st25r3916ClrRegisterBits>
    }
    /*******************************************************************************/
    
    /* In Passive Listen mode additionally enable External Field interrupts  */    
    if( rfalIsModePassiveListen( gRFAL.mode ) )
 800e23a:	4b21      	ldr	r3, [pc, #132]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e23c:	785b      	ldrb	r3, [r3, #1]
 800e23e:	2b0a      	cmp	r3, #10
 800e240:	d007      	beq.n	800e252 <rfalPrepareTransceive+0x12a>
 800e242:	4b1f      	ldr	r3, [pc, #124]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e244:	785b      	ldrb	r3, [r3, #1]
 800e246:	2b0b      	cmp	r3, #11
 800e248:	d003      	beq.n	800e252 <rfalPrepareTransceive+0x12a>
 800e24a:	4b1d      	ldr	r3, [pc, #116]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e24c:	785b      	ldrb	r3, [r3, #1]
 800e24e:	2b0c      	cmp	r3, #12
 800e250:	d103      	bne.n	800e25a <rfalPrepareTransceive+0x132>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_F );      /* Enable external Field interrupts to detect Link Loss and SENF_REQ auto responses */
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
 800e258:	607b      	str	r3, [r7, #4]
    }
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 800e25a:	4b19      	ldr	r3, [pc, #100]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e25c:	785b      	ldrb	r3, [r3, #1]
 800e25e:	2b09      	cmp	r3, #9
 800e260:	d003      	beq.n	800e26a <rfalPrepareTransceive+0x142>
 800e262:	4b17      	ldr	r3, [pc, #92]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e264:	785b      	ldrb	r3, [r3, #1]
 800e266:	2b0d      	cmp	r3, #13
 800e268:	d105      	bne.n	800e276 <rfalPrepareTransceive+0x14e>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e270:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800e274:	607b      	str	r3, [r7, #4]
    }
    
    /*******************************************************************************/
    /* Start transceive Sanity Timer if a FWT is used */
    if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800e276:	4b12      	ldr	r3, [pc, #72]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e27e:	d013      	beq.n	800e2a8 <rfalPrepareTransceive+0x180>
 800e280:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00f      	beq.n	800e2a8 <rfalPrepareTransceive+0x180>
    {
        rfalTimerStart( gRFAL.tmr.txRx, rfalCalcSanityTmr( gRFAL.TxRx.ctx.fwt ) );
 800e288:	4b0d      	ldr	r3, [pc, #52]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e28c:	4a0e      	ldr	r2, [pc, #56]	; (800e2c8 <rfalPrepareTransceive+0x1a0>)
 800e28e:	fba2 2303 	umull	r2, r3, r2, r3
 800e292:	0b1b      	lsrs	r3, r3, #12
 800e294:	b29b      	uxth	r3, r3
 800e296:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7f5 fe97 	bl	8003fd0 <timerCalculateTimer>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	4b06      	ldr	r3, [pc, #24]	; (800e2c0 <rfalPrepareTransceive+0x198>)
 800e2a6:	645a      	str	r2, [r3, #68]	; 0x44
    /*******************************************************************************/
    
    
    /*******************************************************************************/
    /* Clear and enable these interrupts */
    st25r3916GetInterrupt( maskInterrupts );
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f001 fee9 	bl	8010080 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( maskInterrupts );
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f001 ff1e 	bl	80100f0 <st25r3916EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800e2b4:	f000 fdc8 	bl	800ee48 <rfalFIFOStatusClear>
}
 800e2b8:	bf00      	nop
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	20000754 	.word	0x20000754
 800e2c4:	00f04078 	.word	0x00f04078
 800e2c8:	4d542005 	.word	0x4d542005

0800e2cc <rfalTransceiveTx>:


/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 800e2cc:	b5b0      	push	{r4, r5, r7, lr}
 800e2ce:	b08a      	sub	sp, #40	; 0x28
 800e2d0:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	81fb      	strh	r3, [r7, #14]
    NO_WARNING( ret );
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800e2da:	4ba1      	ldr	r3, [pc, #644]	; (800e560 <rfalTransceiveTx+0x294>)
 800e2dc:	7d1a      	ldrb	r2, [r3, #20]
 800e2de:	4ba0      	ldr	r3, [pc, #640]	; (800e560 <rfalTransceiveTx+0x294>)
 800e2e0:	7d5b      	ldrb	r3, [r3, #21]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d003      	beq.n	800e2ee <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800e2e6:	4b9e      	ldr	r3, [pc, #632]	; (800e560 <rfalTransceiveTx+0x294>)
 800e2e8:	7d1a      	ldrb	r2, [r3, #20]
 800e2ea:	4b9d      	ldr	r3, [pc, #628]	; (800e560 <rfalTransceiveTx+0x294>)
 800e2ec:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800e2ee:	4b9c      	ldr	r3, [pc, #624]	; (800e560 <rfalTransceiveTx+0x294>)
 800e2f0:	7d1b      	ldrb	r3, [r3, #20]
 800e2f2:	3b0b      	subs	r3, #11
 800e2f4:	2b08      	cmp	r3, #8
 800e2f6:	f200 8212 	bhi.w	800e71e <rfalTransceiveTx+0x452>
 800e2fa:	a201      	add	r2, pc, #4	; (adr r2, 800e300 <rfalTransceiveTx+0x34>)
 800e2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e300:	0800e325 	.word	0x0800e325
 800e304:	0800e32b 	.word	0x0800e32b
 800e308:	0800e349 	.word	0x0800e349
 800e30c:	0800e371 	.word	0x0800e371
 800e310:	0800e4f1 	.word	0x0800e4f1
 800e314:	0800e52d 	.word	0x0800e52d
 800e318:	0800e66f 	.word	0x0800e66f
 800e31c:	0800e6a9 	.word	0x0800e6a9
 800e320:	0800e6f5 	.word	0x0800e6f5
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 800e324:	4b8e      	ldr	r3, [pc, #568]	; (800e560 <rfalTransceiveTx+0x294>)
 800e326:	220c      	movs	r2, #12
 800e328:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 800e32a:	f7ff fbc9 	bl	800dac0 <rfalIsGTExpired>
 800e32e:	4603      	mov	r3, r0
 800e330:	f083 0301 	eor.w	r3, r3, #1
 800e334:	b2db      	uxtb	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	f040 81f8 	bne.w	800e72c <rfalTransceiveTx+0x460>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800e33c:	4b88      	ldr	r3, [pc, #544]	; (800e560 <rfalTransceiveTx+0x294>)
 800e33e:	2200      	movs	r2, #0
 800e340:	63da      	str	r2, [r3, #60]	; 0x3c
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 800e342:	4b87      	ldr	r3, [pc, #540]	; (800e560 <rfalTransceiveTx+0x294>)
 800e344:	220d      	movs	r2, #13
 800e346:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 800e348:	4b85      	ldr	r3, [pc, #532]	; (800e560 <rfalTransceiveTx+0x294>)
 800e34a:	785b      	ldrb	r3, [r3, #1]
 800e34c:	2b09      	cmp	r3, #9
 800e34e:	d00c      	beq.n	800e36a <rfalTransceiveTx+0x9e>
 800e350:	4b83      	ldr	r3, [pc, #524]	; (800e560 <rfalTransceiveTx+0x294>)
 800e352:	785b      	ldrb	r3, [r3, #1]
 800e354:	2b0d      	cmp	r3, #13
 800e356:	d008      	beq.n	800e36a <rfalTransceiveTx+0x9e>
            {
                if( st25r3916IsGPTRunning() )
 800e358:	2204      	movs	r2, #4
 800e35a:	2104      	movs	r1, #4
 800e35c:	2024      	movs	r0, #36	; 0x24
 800e35e:	f001 fd05 	bl	800fd6c <st25r3916CheckReg>
 800e362:	4603      	mov	r3, r0
 800e364:	2b00      	cmp	r3, #0
 800e366:	f040 81e3 	bne.w	800e730 <rfalTransceiveTx+0x464>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 800e36a:	4b7d      	ldr	r3, [pc, #500]	; (800e560 <rfalTransceiveTx+0x294>)
 800e36c:	220e      	movs	r2, #14
 800e36e:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800e370:	f7ff feda 	bl	800e128 <rfalPrepareTransceive>

            /* ST25R3916 has a fixed FIFO water level */
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 800e374:	4b7a      	ldr	r3, [pc, #488]	; (800e560 <rfalTransceiveTx+0x294>)
 800e376:	f44f 729c 	mov.w	r2, #312	; 0x138
 800e37a:	869a      	strh	r2, [r3, #52]	; 0x34

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800e37c:	4b78      	ldr	r3, [pc, #480]	; (800e560 <rfalTransceiveTx+0x294>)
 800e37e:	785b      	ldrb	r3, [r3, #1]
 800e380:	2b07      	cmp	r3, #7
 800e382:	d003      	beq.n	800e38c <rfalTransceiveTx+0xc0>
 800e384:	4b76      	ldr	r3, [pc, #472]	; (800e560 <rfalTransceiveTx+0x294>)
 800e386:	785b      	ldrb	r3, [r3, #1]
 800e388:	2b08      	cmp	r3, #8
 800e38a:	d152      	bne.n	800e432 <rfalTransceiveTx+0x166>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3916WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
#endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 800e38c:	4b74      	ldr	r3, [pc, #464]	; (800e560 <rfalTransceiveTx+0x294>)
 800e38e:	2200      	movs	r2, #0
 800e390:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800e394:	4b72      	ldr	r3, [pc, #456]	; (800e560 <rfalTransceiveTx+0x294>)
 800e396:	6998      	ldr	r0, [r3, #24]
 800e398:	4b71      	ldr	r3, [pc, #452]	; (800e560 <rfalTransceiveTx+0x294>)
 800e39a:	8b9b      	ldrh	r3, [r3, #28]
 800e39c:	3307      	adds	r3, #7
 800e39e:	08db      	lsrs	r3, r3, #3
 800e3a0:	b299      	uxth	r1, r3
 800e3a2:	4b6f      	ldr	r3, [pc, #444]	; (800e560 <rfalTransceiveTx+0x294>)
 800e3a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e3a8:	f003 0301 	and.w	r3, r3, #1
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	bf0c      	ite	eq
 800e3b0:	2301      	moveq	r3, #1
 800e3b2:	2300      	movne	r3, #0
 800e3b4:	b2dc      	uxtb	r4, r3
 800e3b6:	4b6a      	ldr	r3, [pc, #424]	; (800e560 <rfalTransceiveTx+0x294>)
 800e3b8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e3bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	bf0c      	ite	eq
 800e3c4:	2301      	moveq	r3, #1
 800e3c6:	2300      	movne	r3, #0
 800e3c8:	b2dd      	uxtb	r5, r3
 800e3ca:	4b65      	ldr	r3, [pc, #404]	; (800e560 <rfalTransceiveTx+0x294>)
 800e3cc:	785b      	ldrb	r3, [r3, #1]
 800e3ce:	2b08      	cmp	r3, #8
 800e3d0:	bf0c      	ite	eq
 800e3d2:	2301      	moveq	r3, #1
 800e3d4:	2300      	movne	r3, #0
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	4a62      	ldr	r2, [pc, #392]	; (800e564 <rfalTransceiveTx+0x298>)
 800e3da:	9205      	str	r2, [sp, #20]
 800e3dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3e0:	9204      	str	r2, [sp, #16]
 800e3e2:	4a61      	ldr	r2, [pc, #388]	; (800e568 <rfalTransceiveTx+0x29c>)
 800e3e4:	9203      	str	r2, [sp, #12]
 800e3e6:	4a61      	ldr	r2, [pc, #388]	; (800e56c <rfalTransceiveTx+0x2a0>)
 800e3e8:	9202      	str	r2, [sp, #8]
 800e3ea:	4a61      	ldr	r2, [pc, #388]	; (800e570 <rfalTransceiveTx+0x2a4>)
 800e3ec:	9201      	str	r2, [sp, #4]
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	462b      	mov	r3, r5
 800e3f2:	4622      	mov	r2, r4
 800e3f4:	f7fe fb26 	bl	800ca44 <iso15693VCDCode>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3916_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800e3fc:	89fb      	ldrh	r3, [r7, #14]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d009      	beq.n	800e416 <rfalTransceiveTx+0x14a>
 800e402:	89fb      	ldrh	r3, [r7, #14]
 800e404:	2b0d      	cmp	r3, #13
 800e406:	d006      	beq.n	800e416 <rfalTransceiveTx+0x14a>
                {
                    gRFAL.TxRx.status = ret;
 800e408:	4a55      	ldr	r2, [pc, #340]	; (800e560 <rfalTransceiveTx+0x294>)
 800e40a:	89fb      	ldrh	r3, [r7, #14]
 800e40c:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e40e:	4b54      	ldr	r3, [pc, #336]	; (800e560 <rfalTransceiveTx+0x294>)
 800e410:	2213      	movs	r2, #19
 800e412:	751a      	strb	r2, [r3, #20]
                    break;
 800e414:	e193      	b.n	800e73e <rfalTransceiveTx+0x472>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( (uint16_t)rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 800e416:	4b52      	ldr	r3, [pc, #328]	; (800e560 <rfalTransceiveTx+0x294>)
 800e418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e41a:	00db      	lsls	r3, r3, #3
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	4618      	mov	r0, r3
 800e420:	f001 f85c 	bl	800f4dc <st25r3916SetNumTxBits>

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, gRFAL.fifo.bytesWritten );
 800e424:	4b4e      	ldr	r3, [pc, #312]	; (800e560 <rfalTransceiveTx+0x294>)
 800e426:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e428:	4619      	mov	r1, r3
 800e42a:	484f      	ldr	r0, [pc, #316]	; (800e568 <rfalTransceiveTx+0x29c>)
 800e42c:	f001 fb16 	bl	800fa5c <st25r3916WriteFifo>
 800e430:	e01d      	b.n	800e46e <rfalTransceiveTx+0x1a2>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 800e432:	4b4b      	ldr	r3, [pc, #300]	; (800e560 <rfalTransceiveTx+0x294>)
 800e434:	8b9b      	ldrh	r3, [r3, #28]
 800e436:	3307      	adds	r3, #7
 800e438:	08db      	lsrs	r3, r3, #3
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	4b48      	ldr	r3, [pc, #288]	; (800e560 <rfalTransceiveTx+0x294>)
 800e43e:	86da      	strh	r2, [r3, #54]	; 0x36
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 800e440:	4b47      	ldr	r3, [pc, #284]	; (800e560 <rfalTransceiveTx+0x294>)
 800e442:	8b9b      	ldrh	r3, [r3, #28]
 800e444:	4618      	mov	r0, r3
 800e446:	f001 f849 	bl	800f4dc <st25r3916SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 800e44a:	4b45      	ldr	r3, [pc, #276]	; (800e560 <rfalTransceiveTx+0x294>)
 800e44c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e44e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e452:	bf28      	it	cs
 800e454:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e458:	b29a      	uxth	r2, r3
 800e45a:	4b41      	ldr	r3, [pc, #260]	; (800e560 <rfalTransceiveTx+0x294>)
 800e45c:	871a      	strh	r2, [r3, #56]	; 0x38
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 800e45e:	4b40      	ldr	r3, [pc, #256]	; (800e560 <rfalTransceiveTx+0x294>)
 800e460:	699a      	ldr	r2, [r3, #24]
 800e462:	4b3f      	ldr	r3, [pc, #252]	; (800e560 <rfalTransceiveTx+0x294>)
 800e464:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e466:	4619      	mov	r1, r3
 800e468:	4610      	mov	r0, r2
 800e46a:	f001 faf7 	bl	800fa5c <st25r3916WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx();
 800e46e:	4b3c      	ldr	r3, [pc, #240]	; (800e560 <rfalTransceiveTx+0x294>)
 800e470:	795b      	ldrb	r3, [r3, #5]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d008      	beq.n	800e488 <rfalTransceiveTx+0x1bc>
 800e476:	4b3a      	ldr	r3, [pc, #232]	; (800e560 <rfalTransceiveTx+0x294>)
 800e478:	795b      	ldrb	r3, [r3, #5]
 800e47a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	4619      	mov	r1, r3
 800e482:	2001      	movs	r0, #1
 800e484:	f001 fb65 	bl	800fb52 <st25r3916WriteTestRegister>
            
            
            /*******************************************************************************/
            /* If we're in Passive Listen mode ensure that the external field is still On  */
            if( rfalIsModePassiveListen(gRFAL.mode) )
 800e488:	4b35      	ldr	r3, [pc, #212]	; (800e560 <rfalTransceiveTx+0x294>)
 800e48a:	785b      	ldrb	r3, [r3, #1]
 800e48c:	2b0a      	cmp	r3, #10
 800e48e:	d007      	beq.n	800e4a0 <rfalTransceiveTx+0x1d4>
 800e490:	4b33      	ldr	r3, [pc, #204]	; (800e560 <rfalTransceiveTx+0x294>)
 800e492:	785b      	ldrb	r3, [r3, #1]
 800e494:	2b0b      	cmp	r3, #11
 800e496:	d003      	beq.n	800e4a0 <rfalTransceiveTx+0x1d4>
 800e498:	4b31      	ldr	r3, [pc, #196]	; (800e560 <rfalTransceiveTx+0x294>)
 800e49a:	785b      	ldrb	r3, [r3, #1]
 800e49c:	2b0c      	cmp	r3, #12
 800e49e:	d10e      	bne.n	800e4be <rfalTransceiveTx+0x1f2>
            {
                if( !rfalIsExtFieldOn() )
 800e4a0:	f000 fdfe 	bl	800f0a0 <rfalIsExtFieldOn>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	f083 0301 	eor.w	r3, r3, #1
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d006      	beq.n	800e4be <rfalTransceiveTx+0x1f2>
                {
                    gRFAL.TxRx.status = ERR_LINK_LOSS;
 800e4b0:	4b2b      	ldr	r3, [pc, #172]	; (800e560 <rfalTransceiveTx+0x294>)
 800e4b2:	2225      	movs	r2, #37	; 0x25
 800e4b4:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e4b6:	4b2a      	ldr	r3, [pc, #168]	; (800e560 <rfalTransceiveTx+0x294>)
 800e4b8:	2213      	movs	r2, #19
 800e4ba:	751a      	strb	r2, [r3, #20]
                    break;
 800e4bc:	e13f      	b.n	800e73e <rfalTransceiveTx+0x472>
                }
            }
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 800e4be:	4b28      	ldr	r3, [pc, #160]	; (800e560 <rfalTransceiveTx+0x294>)
 800e4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c2:	f003 0301 	and.w	r3, r3, #1
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d003      	beq.n	800e4d2 <rfalTransceiveTx+0x206>
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITHOUT_CRC );
 800e4ca:	20c5      	movs	r0, #197	; 0xc5
 800e4cc:	f001 fb05 	bl	800fada <st25r3916ExecuteCommand>
 800e4d0:	e002      	b.n	800e4d8 <rfalTransceiveTx+0x20c>
            }
            else
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITH_CRC );
 800e4d2:	20c4      	movs	r0, #196	; 0xc4
 800e4d4:	f001 fb01 	bl	800fada <st25r3916ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800e4d8:	4b21      	ldr	r3, [pc, #132]	; (800e560 <rfalTransceiveTx+0x294>)
 800e4da:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800e4dc:	4b20      	ldr	r3, [pc, #128]	; (800e560 <rfalTransceiveTx+0x294>)
 800e4de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d201      	bcs.n	800e4e8 <rfalTransceiveTx+0x21c>
 800e4e4:	220f      	movs	r2, #15
 800e4e6:	e000      	b.n	800e4ea <rfalTransceiveTx+0x21e>
 800e4e8:	2211      	movs	r2, #17
 800e4ea:	4b1d      	ldr	r3, [pc, #116]	; (800e560 <rfalTransceiveTx+0x294>)
 800e4ec:	751a      	strb	r2, [r3, #20]
            break;
 800e4ee:	e126      	b.n	800e73e <rfalTransceiveTx+0x472>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800e4f0:	2048      	movs	r0, #72	; 0x48
 800e4f2:	f001 fdc5 	bl	8010080 <st25r3916GetInterrupt>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f000 8119 	beq.w	800e734 <rfalTransceiveTx+0x468>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_TXE) == 0U) )
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d008      	beq.n	800e51e <rfalTransceiveTx+0x252>
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	f003 0308 	and.w	r3, r3, #8
 800e512:	2b00      	cmp	r3, #0
 800e514:	d103      	bne.n	800e51e <rfalTransceiveTx+0x252>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 800e516:	4b12      	ldr	r3, [pc, #72]	; (800e560 <rfalTransceiveTx+0x294>)
 800e518:	2210      	movs	r2, #16
 800e51a:	751a      	strb	r2, [r3, #20]
 800e51c:	e006      	b.n	800e52c <rfalTransceiveTx+0x260>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800e51e:	4b10      	ldr	r3, [pc, #64]	; (800e560 <rfalTransceiveTx+0x294>)
 800e520:	2203      	movs	r2, #3
 800e522:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e524:	4b0e      	ldr	r3, [pc, #56]	; (800e560 <rfalTransceiveTx+0x294>)
 800e526:	2213      	movs	r2, #19
 800e528:	751a      	strb	r2, [r3, #20]
                break;
 800e52a:	e108      	b.n	800e73e <rfalTransceiveTx+0x472>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800e52c:	4b0c      	ldr	r3, [pc, #48]	; (800e560 <rfalTransceiveTx+0x294>)
 800e52e:	785b      	ldrb	r3, [r3, #1]
 800e530:	2b07      	cmp	r3, #7
 800e532:	d003      	beq.n	800e53c <rfalTransceiveTx+0x270>
 800e534:	4b0a      	ldr	r3, [pc, #40]	; (800e560 <rfalTransceiveTx+0x294>)
 800e536:	785b      	ldrb	r3, [r3, #1]
 800e538:	2b08      	cmp	r3, #8
 800e53a:	d16d      	bne.n	800e618 <rfalTransceiveTx+0x34c>
            {
                uint16_t maxLen;
                                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 800e53c:	4b08      	ldr	r3, [pc, #32]	; (800e560 <rfalTransceiveTx+0x294>)
 800e53e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e540:	461a      	mov	r2, r3
 800e542:	4b07      	ldr	r3, [pc, #28]	; (800e560 <rfalTransceiveTx+0x294>)
 800e544:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	4a05      	ldr	r2, [pc, #20]	; (800e560 <rfalTransceiveTx+0x294>)
 800e54a:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800e54c:	4293      	cmp	r3, r2
 800e54e:	da11      	bge.n	800e574 <rfalTransceiveTx+0x2a8>
 800e550:	4b03      	ldr	r3, [pc, #12]	; (800e560 <rfalTransceiveTx+0x294>)
 800e552:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800e554:	4b02      	ldr	r3, [pc, #8]	; (800e560 <rfalTransceiveTx+0x294>)
 800e556:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	e00c      	b.n	800e578 <rfalTransceiveTx+0x2ac>
 800e55e:	bf00      	nop
 800e560:	20000754 	.word	0x20000754
 800e564:	2000078c 	.word	0x2000078c
 800e568:	200007a4 	.word	0x200007a4
 800e56c:	200009ac 	.word	0x200009ac
 800e570:	2000078a 	.word	0x2000078a
 800e574:	4b74      	ldr	r3, [pc, #464]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e576:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e578:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 800e57a:	89bb      	ldrh	r3, [r7, #12]
 800e57c:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800e580:	bf28      	it	cs
 800e582:	f44f 7302 	movcs.w	r3, #520	; 0x208
 800e586:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 800e588:	2300      	movs	r3, #0
 800e58a:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800e58c:	4b6e      	ldr	r3, [pc, #440]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e58e:	6998      	ldr	r0, [r3, #24]
 800e590:	4b6d      	ldr	r3, [pc, #436]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e592:	8b9b      	ldrh	r3, [r3, #28]
 800e594:	3307      	adds	r3, #7
 800e596:	08db      	lsrs	r3, r3, #3
 800e598:	b299      	uxth	r1, r3
 800e59a:	4b6b      	ldr	r3, [pc, #428]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e59c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e5a0:	f003 0301 	and.w	r3, r3, #1
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	bf0c      	ite	eq
 800e5a8:	2301      	moveq	r3, #1
 800e5aa:	2300      	movne	r3, #0
 800e5ac:	b2dc      	uxtb	r4, r3
 800e5ae:	4b66      	ldr	r3, [pc, #408]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e5b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	bf0c      	ite	eq
 800e5bc:	2301      	moveq	r3, #1
 800e5be:	2300      	movne	r3, #0
 800e5c0:	b2dd      	uxtb	r5, r3
 800e5c2:	4b61      	ldr	r3, [pc, #388]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e5c4:	785b      	ldrb	r3, [r3, #1]
 800e5c6:	2b08      	cmp	r3, #8
 800e5c8:	bf0c      	ite	eq
 800e5ca:	2301      	moveq	r3, #1
 800e5cc:	2300      	movne	r3, #0
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	1dba      	adds	r2, r7, #6
 800e5d2:	9205      	str	r2, [sp, #20]
 800e5d4:	89ba      	ldrh	r2, [r7, #12]
 800e5d6:	9204      	str	r2, [sp, #16]
 800e5d8:	4a5c      	ldr	r2, [pc, #368]	; (800e74c <rfalTransceiveTx+0x480>)
 800e5da:	9203      	str	r2, [sp, #12]
 800e5dc:	4a5c      	ldr	r2, [pc, #368]	; (800e750 <rfalTransceiveTx+0x484>)
 800e5de:	9202      	str	r2, [sp, #8]
 800e5e0:	4a5c      	ldr	r2, [pc, #368]	; (800e754 <rfalTransceiveTx+0x488>)
 800e5e2:	9201      	str	r2, [sp, #4]
 800e5e4:	9300      	str	r3, [sp, #0]
 800e5e6:	462b      	mov	r3, r5
 800e5e8:	4622      	mov	r2, r4
 800e5ea:	f7fe fa2b 	bl	800ca44 <iso15693VCDCode>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800e5f2:	89fb      	ldrh	r3, [r7, #14]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d009      	beq.n	800e60c <rfalTransceiveTx+0x340>
 800e5f8:	89fb      	ldrh	r3, [r7, #14]
 800e5fa:	2b0d      	cmp	r3, #13
 800e5fc:	d006      	beq.n	800e60c <rfalTransceiveTx+0x340>
                {
                    gRFAL.TxRx.status = ret;
 800e5fe:	4a52      	ldr	r2, [pc, #328]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e600:	89fb      	ldrh	r3, [r7, #14]
 800e602:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e604:	4b50      	ldr	r3, [pc, #320]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e606:	2213      	movs	r2, #19
 800e608:	751a      	strb	r2, [r3, #20]
                    break;
 800e60a:	e098      	b.n	800e73e <rfalTransceiveTx+0x472>
                }

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, tmp );
 800e60c:	88fb      	ldrh	r3, [r7, #6]
 800e60e:	4619      	mov	r1, r3
 800e610:	484e      	ldr	r0, [pc, #312]	; (800e74c <rfalTransceiveTx+0x480>)
 800e612:	f001 fa23 	bl	800fa5c <st25r3916WriteFifo>
            {
 800e616:	e017      	b.n	800e648 <rfalTransceiveTx+0x37c>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 800e618:	4b4b      	ldr	r3, [pc, #300]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e61a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e61c:	461a      	mov	r2, r3
 800e61e:	4b4a      	ldr	r3, [pc, #296]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e622:	4619      	mov	r1, r3
 800e624:	4b48      	ldr	r3, [pc, #288]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e626:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e628:	1acb      	subs	r3, r1, r3
 800e62a:	4293      	cmp	r3, r2
 800e62c:	bfa8      	it	ge
 800e62e:	4613      	movge	r3, r2
 800e630:	b29b      	uxth	r3, r3
 800e632:	80fb      	strh	r3, [r7, #6]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 800e634:	4b44      	ldr	r3, [pc, #272]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e636:	699b      	ldr	r3, [r3, #24]
 800e638:	4a43      	ldr	r2, [pc, #268]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e63a:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800e63c:	4413      	add	r3, r2
 800e63e:	88fa      	ldrh	r2, [r7, #6]
 800e640:	4611      	mov	r1, r2
 800e642:	4618      	mov	r0, r3
 800e644:	f001 fa0a 	bl	800fa5c <st25r3916WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 800e648:	4b3f      	ldr	r3, [pc, #252]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e64a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800e64c:	88fb      	ldrh	r3, [r7, #6]
 800e64e:	4413      	add	r3, r2
 800e650:	b29a      	uxth	r2, r3
 800e652:	4b3d      	ldr	r3, [pc, #244]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e654:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800e656:	4b3c      	ldr	r3, [pc, #240]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e658:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800e65a:	4b3b      	ldr	r3, [pc, #236]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e65c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e65e:	429a      	cmp	r2, r3
 800e660:	d201      	bcs.n	800e666 <rfalTransceiveTx+0x39a>
 800e662:	220f      	movs	r2, #15
 800e664:	e000      	b.n	800e668 <rfalTransceiveTx+0x39c>
 800e666:	2211      	movs	r2, #17
 800e668:	4b37      	ldr	r3, [pc, #220]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e66a:	751a      	strb	r2, [r3, #20]
            break;
 800e66c:	e067      	b.n	800e73e <rfalTransceiveTx+0x472>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800e66e:	2048      	movs	r0, #72	; 0x48
 800e670:	f001 fd06 	bl	8010080 <st25r3916GetInterrupt>
 800e674:	4603      	mov	r3, r0
 800e676:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d05c      	beq.n	800e738 <rfalTransceiveTx+0x46c>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3916_IRQ_MASK_TXE) != 0U )
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	f003 0308 	and.w	r3, r3, #8
 800e684:	2b00      	cmp	r3, #0
 800e686:	d003      	beq.n	800e690 <rfalTransceiveTx+0x3c4>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 800e688:	4b2f      	ldr	r3, [pc, #188]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e68a:	2212      	movs	r2, #18
 800e68c:	751a      	strb	r2, [r3, #20]
 800e68e:	e00b      	b.n	800e6a8 <rfalTransceiveTx+0x3dc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_FWL) != 0U )
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e696:	2b00      	cmp	r3, #0
 800e698:	d150      	bne.n	800e73c <rfalTransceiveTx+0x470>
            {
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800e69a:	4b2b      	ldr	r3, [pc, #172]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e69c:	2203      	movs	r2, #3
 800e69e:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e6a0:	4b29      	ldr	r3, [pc, #164]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e6a2:	2213      	movs	r2, #19
 800e6a4:	751a      	strb	r2, [r3, #20]
               break;
 800e6a6:	e04a      	b.n	800e73e <rfalTransceiveTx+0x472>
                           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 800e6a8:	4b27      	ldr	r3, [pc, #156]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e6aa:	6a1b      	ldr	r3, [r3, #32]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d110      	bne.n	800e6d2 <rfalTransceiveTx+0x406>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 800e6b0:	4b25      	ldr	r3, [pc, #148]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e6b2:	799b      	ldrb	r3, [r3, #6]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d003      	beq.n	800e6c0 <rfalTransceiveTx+0x3f4>
 800e6b8:	2140      	movs	r1, #64	; 0x40
 800e6ba:	2001      	movs	r0, #1
 800e6bc:	f001 fa49 	bl	800fb52 <st25r3916WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 800e6c0:	f7ff fd1a 	bl	800e0f8 <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 800e6c4:	4b20      	ldr	r3, [pc, #128]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 800e6ca:	4b1f      	ldr	r3, [pc, #124]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	751a      	strb	r2, [r3, #20]
                break;
 800e6d0:	e035      	b.n	800e73e <rfalTransceiveTx+0x472>
            }
            
            rfalCheckEnableObsModeRx();
 800e6d2:	4b1d      	ldr	r3, [pc, #116]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e6d4:	799b      	ldrb	r3, [r3, #6]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d008      	beq.n	800e6ec <rfalTransceiveTx+0x420>
 800e6da:	4b1b      	ldr	r3, [pc, #108]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e6dc:	799b      	ldrb	r3, [r3, #6]
 800e6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	2001      	movs	r0, #1
 800e6e8:	f001 fa33 	bl	800fb52 <st25r3916WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 800e6ec:	4b16      	ldr	r3, [pc, #88]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e6ee:	2251      	movs	r2, #81	; 0x51
 800e6f0:	751a      	strb	r2, [r3, #20]
            break;
 800e6f2:	e024      	b.n	800e73e <rfalTransceiveTx+0x472>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800e6f4:	4b14      	ldr	r3, [pc, #80]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e6f6:	8adb      	ldrh	r3, [r3, #22]
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d102      	bne.n	800e702 <rfalTransceiveTx+0x436>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800e6fc:	4b12      	ldr	r3, [pc, #72]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e6fe:	2208      	movs	r2, #8
 800e700:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800e702:	4b11      	ldr	r3, [pc, #68]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e704:	799b      	ldrb	r3, [r3, #6]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d003      	beq.n	800e712 <rfalTransceiveTx+0x446>
 800e70a:	2140      	movs	r1, #64	; 0x40
 800e70c:	2001      	movs	r0, #1
 800e70e:	f001 fa20 	bl	800fb52 <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800e712:	f7ff fcf1 	bl	800e0f8 <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800e716:	4b0c      	ldr	r3, [pc, #48]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e718:	2200      	movs	r2, #0
 800e71a:	751a      	strb	r2, [r3, #20]
            break;
 800e71c:	e00f      	b.n	800e73e <rfalTransceiveTx+0x472>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800e71e:	4b0a      	ldr	r3, [pc, #40]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e720:	2208      	movs	r2, #8
 800e722:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e724:	4b08      	ldr	r3, [pc, #32]	; (800e748 <rfalTransceiveTx+0x47c>)
 800e726:	2213      	movs	r2, #19
 800e728:	751a      	strb	r2, [r3, #20]
            break;
 800e72a:	e008      	b.n	800e73e <rfalTransceiveTx+0x472>
                break;
 800e72c:	bf00      	nop
 800e72e:	e006      	b.n	800e73e <rfalTransceiveTx+0x472>
                   break;
 800e730:	bf00      	nop
 800e732:	e004      	b.n	800e73e <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800e734:	bf00      	nop
 800e736:	e002      	b.n	800e73e <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800e738:	bf00      	nop
 800e73a:	e000      	b.n	800e73e <rfalTransceiveTx+0x472>
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
 800e73c:	bf00      	nop
    }
}
 800e73e:	bf00      	nop
 800e740:	3710      	adds	r7, #16
 800e742:	46bd      	mov	sp, r7
 800e744:	bdb0      	pop	{r4, r5, r7, pc}
 800e746:	bf00      	nop
 800e748:	20000754 	.word	0x20000754
 800e74c:	200007a4 	.word	0x200007a4
 800e750:	200009ac 	.word	0x200009ac
 800e754:	2000078a 	.word	0x2000078a

0800e758 <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 800e758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e75a:	b089      	sub	sp, #36	; 0x24
 800e75c:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint16_t          tmp;
    uint16_t          aux;
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800e75e:	2300      	movs	r3, #0
 800e760:	607b      	str	r3, [r7, #4]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800e762:	4baf      	ldr	r3, [pc, #700]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e764:	7d1a      	ldrb	r2, [r3, #20]
 800e766:	4bae      	ldr	r3, [pc, #696]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e768:	7d5b      	ldrb	r3, [r3, #21]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d003      	beq.n	800e776 <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800e76e:	4bac      	ldr	r3, [pc, #688]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e770:	7d1a      	ldrb	r2, [r3, #20]
 800e772:	4bab      	ldr	r3, [pc, #684]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e774:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800e776:	4baa      	ldr	r3, [pc, #680]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e778:	7d1b      	ldrb	r3, [r3, #20]
 800e77a:	3b51      	subs	r3, #81	; 0x51
 800e77c:	2b09      	cmp	r3, #9
 800e77e:	f200 8339 	bhi.w	800edf4 <rfalTransceiveRx+0x69c>
 800e782:	a201      	add	r2, pc, #4	; (adr r2, 800e788 <rfalTransceiveRx+0x30>)
 800e784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e788:	0800e7b1 	.word	0x0800e7b1
 800e78c:	0800ed61 	.word	0x0800ed61
 800e790:	0800e7e9 	.word	0x0800e7e9
 800e794:	0800e88d 	.word	0x0800e88d
 800e798:	0800eca5 	.word	0x0800eca5
 800e79c:	0800e96b 	.word	0x0800e96b
 800e7a0:	0800ea9f 	.word	0x0800ea9f
 800e7a4:	0800edab 	.word	0x0800edab
 800e7a8:	0800ec7d 	.word	0x0800ec7d
 800e7ac:	0800ed37 	.word	0x0800ed37
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 800e7b0:	4b9b      	ldr	r3, [pc, #620]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	871a      	strh	r2, [r3, #56]	; 0x38
            gRFAL.fifo.bytesTotal     = 0;            /* Total bytes in FIFO will now be from Rx */
 800e7b6:	4b9a      	ldr	r3, [pc, #616]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	86da      	strh	r2, [r3, #54]	; 0x36
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800e7bc:	4b98      	ldr	r3, [pc, #608]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d003      	beq.n	800e7cc <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 800e7c4:	4b96      	ldr	r3, [pc, #600]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	801a      	strh	r2, [r3, #0]
            }
           
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 800e7cc:	4b94      	ldr	r3, [pc, #592]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e7ce:	785b      	ldrb	r3, [r3, #1]
 800e7d0:	2b09      	cmp	r3, #9
 800e7d2:	d003      	beq.n	800e7dc <rfalTransceiveRx+0x84>
 800e7d4:	4b92      	ldr	r3, [pc, #584]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e7d6:	785b      	ldrb	r3, [r3, #1]
 800e7d8:	2b0d      	cmp	r3, #13
 800e7da:	d101      	bne.n	800e7e0 <rfalTransceiveRx+0x88>
 800e7dc:	2252      	movs	r2, #82	; 0x52
 800e7de:	e000      	b.n	800e7e2 <rfalTransceiveRx+0x8a>
 800e7e0:	2253      	movs	r2, #83	; 0x53
 800e7e2:	4b8f      	ldr	r3, [pc, #572]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e7e4:	751a      	strb	r2, [r3, #20]
            break;
 800e7e6:	e315      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
            
            /*******************************************************************************/
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_EOF) );
 800e7e8:	f644 0020 	movw	r0, #18464	; 0x4820
 800e7ec:	f001 fc48 	bl	8010080 <st25r3916GetInterrupt>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	f000 8303 	beq.w	800ee02 <rfalTransceiveRx+0x6aa>
            {
                break;  /* No interrupt to process */
            }
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode) */
            if( ((irqs & ST25R3916_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e802:	2b00      	cmp	r3, #0
 800e804:	d00b      	beq.n	800e81e <rfalTransceiveRx+0xc6>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f003 0320 	and.w	r3, r3, #32
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d106      	bne.n	800e81e <rfalTransceiveRx+0xc6>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800e810:	4b83      	ldr	r3, [pc, #524]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e812:	2204      	movs	r2, #4
 800e814:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e816:	4b82      	ldr	r3, [pc, #520]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e818:	225a      	movs	r2, #90	; 0x5a
 800e81a:	751a      	strb	r2, [r3, #20]
                break;
 800e81c:	e2fa      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e824:	2b00      	cmp	r3, #0
 800e826:	d015      	beq.n	800e854 <rfalTransceiveRx+0xfc>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f003 0320 	and.w	r3, r3, #32
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d110      	bne.n	800e854 <rfalTransceiveRx+0xfc>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800e832:	4b7b      	ldr	r3, [pc, #492]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e834:	785b      	ldrb	r3, [r3, #1]
 800e836:	2b09      	cmp	r3, #9
 800e838:	d003      	beq.n	800e842 <rfalTransceiveRx+0xea>
 800e83a:	4b79      	ldr	r3, [pc, #484]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e83c:	785b      	ldrb	r3, [r3, #1]
 800e83e:	2b0d      	cmp	r3, #13
 800e840:	d101      	bne.n	800e846 <rfalTransceiveRx+0xee>
 800e842:	2204      	movs	r2, #4
 800e844:	e000      	b.n	800e848 <rfalTransceiveRx+0xf0>
 800e846:	2225      	movs	r2, #37	; 0x25
 800e848:	4b75      	ldr	r3, [pc, #468]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e84a:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e84c:	4b74      	ldr	r3, [pc, #464]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e84e:	225a      	movs	r2, #90	; 0x5a
 800e850:	751a      	strb	r2, [r3, #20]
                break;
 800e852:	e2df      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RXS) != 0U )
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f003 0320 	and.w	r3, r3, #32
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d00f      	beq.n	800e87e <rfalTransceiveRx+0x126>
            {
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
                /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                /* Use a SW timer to handle an eventual missing RXE                            */
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800e85e:	2032      	movs	r0, #50	; 0x32
 800e860:	f7f5 fbb6 	bl	8003fd0 <timerCalculateTimer>
 800e864:	4602      	mov	r2, r0
 800e866:	4b6e      	ldr	r3, [pc, #440]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e868:	641a      	str	r2, [r3, #64]	; 0x40
                /*******************************************************************************/
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800e86a:	4b6d      	ldr	r3, [pc, #436]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e86c:	2254      	movs	r2, #84	; 0x54
 800e86e:	751a      	strb	r2, [r3, #20]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
                break;
            }
            
            /* remove NRE that might appear together (NRT EMV mode), and remove RXS, but keep EOF if present for next state */
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e876:	f023 0320 	bic.w	r3, r3, #32
 800e87a:	607b      	str	r3, [r7, #4]
 800e87c:	e006      	b.n	800e88c <rfalTransceiveRx+0x134>
                gRFAL.TxRx.status = ERR_IO;
 800e87e:	4b68      	ldr	r3, [pc, #416]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e880:	2203      	movs	r2, #3
 800e882:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e884:	4b66      	ldr	r3, [pc, #408]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e886:	225a      	movs	r2, #90	; 0x5a
 800e888:	751a      	strb	r2, [r3, #20]
                break;
 800e88a:	e2c3      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* ST25R396 may indicate RXS without RXE afterwards, this happens rarely on    */
            /* corrupted frames.                                                           */
            /* SW timer is used to timeout upon a missing RXE                              */
            if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 800e88c:	4b64      	ldr	r3, [pc, #400]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e890:	4618      	mov	r0, r3
 800e892:	f7f5 fbab 	bl	8003fec <timerIsExpired>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d005      	beq.n	800e8a8 <rfalTransceiveRx+0x150>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800e89c:	4b60      	ldr	r3, [pc, #384]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e89e:	2209      	movs	r2, #9
 800e8a0:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e8a2:	4b5f      	ldr	r3, [pc, #380]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e8a4:	225a      	movs	r2, #90	; 0x5a
 800e8a6:	751a      	strb	r2, [r3, #20]
            }
            /*******************************************************************************/
            
            irqs |= st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_WU_F ) );
 800e8a8:	485e      	ldr	r0, [pc, #376]	; (800ea24 <rfalTransceiveRx+0x2cc>)
 800e8aa:	f001 fbe9 	bl	8010080 <st25r3916GetInterrupt>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f000 82a4 	beq.w	800ee06 <rfalTransceiveRx+0x6ae>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RX_REST) != 0U )
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f003 0302 	and.w	r3, r3, #2
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d02f      	beq.n	800e928 <rfalTransceiveRx+0x1d0>
            {
                /* RX_REST indicates that Receiver has been reseted due to EMD, therefore a RXS + RXE should *
                 * follow if a good reception is followed within the valid initial timeout                   */
                
                /* Check whether NRT has expired already, if so signal a timeout */
                if( st25r3916GetInterrupt( ST25R3916_IRQ_MASK_NRE ) != 0U )
 800e8c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e8cc:	f001 fbd8 	bl	8010080 <st25r3916GetInterrupt>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d006      	beq.n	800e8e4 <rfalTransceiveRx+0x18c>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800e8d6:	4b52      	ldr	r3, [pc, #328]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e8d8:	2204      	movs	r2, #4
 800e8da:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e8dc:	4b50      	ldr	r3, [pc, #320]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e8de:	225a      	movs	r2, #90	; 0x5a
 800e8e0:	751a      	strb	r2, [r3, #20]
                    break;
 800e8e2:	e297      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
                }
                if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0 ) )   /* MISRA 13.5 */
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	2102      	movs	r1, #2
 800e8e8:	2024      	movs	r0, #36	; 0x24
 800e8ea:	f001 fa3f 	bl	800fd6c <st25r3916CheckReg>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d006      	beq.n	800e902 <rfalTransceiveRx+0x1aa>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800e8f4:	4b4a      	ldr	r3, [pc, #296]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e8f6:	2204      	movs	r2, #4
 800e8f8:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e8fa:	4b49      	ldr	r3, [pc, #292]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e8fc:	225a      	movs	r2, #90	; 0x5a
 800e8fe:	751a      	strb	r2, [r3, #20]
                    break;
 800e900:	e288      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
                }
                
                /* Discard any previous RXS */
                st25r3916GetInterrupt( ST25R3916_IRQ_MASK_RXS );
 800e902:	2020      	movs	r0, #32
 800e904:	f001 fbbc 	bl	8010080 <st25r3916GetInterrupt>
                
                /* Check whether a following reception has already started */
                if( st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_rx_act, ST25R3916_REG_AUX_DISPLAY_rx_act) )
 800e908:	2204      	movs	r2, #4
 800e90a:	2104      	movs	r1, #4
 800e90c:	2031      	movs	r0, #49	; 0x31
 800e90e:	f001 fa2d 	bl	800fd6c <st25r3916CheckReg>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d003      	beq.n	800e920 <rfalTransceiveRx+0x1c8>
                {
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800e918:	4b41      	ldr	r3, [pc, #260]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e91a:	2254      	movs	r2, #84	; 0x54
 800e91c:	751a      	strb	r2, [r3, #20]
                    break;
 800e91e:	e279      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
                }
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800e920:	4b3f      	ldr	r3, [pc, #252]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e922:	2253      	movs	r2, #83	; 0x53
 800e924:	751a      	strb	r2, [r3, #20]
                break;
 800e926:	e275      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXE) == 0U) )
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d008      	beq.n	800e944 <rfalTransceiveRx+0x1ec>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f003 0310 	and.w	r3, r3, #16
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d103      	bne.n	800e944 <rfalTransceiveRx+0x1ec>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 800e93c:	4b38      	ldr	r3, [pc, #224]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e93e:	2255      	movs	r2, #85	; 0x55
 800e940:	751a      	strb	r2, [r3, #20]
                break;
 800e942:	e267      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            }
            
            /* Automatic responses allowed during TxRx only for the SENSF_REQ */
            if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d003      	beq.n	800e956 <rfalTransceiveRx+0x1fe>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800e94e:	4b34      	ldr	r3, [pc, #208]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e950:	2253      	movs	r2, #83	; 0x53
 800e952:	751a      	strb	r2, [r3, #20]
                break;
 800e954:	e25e      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            }
            
            /* After RXE retrieve and check for any error irqs */
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 800e956:	4834      	ldr	r0, [pc, #208]	; (800ea28 <rfalTransceiveRx+0x2d0>)
 800e958:	f001 fb92 	bl	8010080 <st25r3916GetInterrupt>
 800e95c:	4602      	mov	r2, r0
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4313      	orrs	r3, r2
 800e962:	607b      	str	r3, [r7, #4]
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800e964:	4b2e      	ldr	r3, [pc, #184]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e966:	2256      	movs	r2, #86	; 0x56
 800e968:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( (irqs & ST25R3916_IRQ_MASK_ERR1) != 0U )
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e970:	2b00      	cmp	r3, #0
 800e972:	d008      	beq.n	800e986 <rfalTransceiveRx+0x22e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800e974:	4b2a      	ldr	r3, [pc, #168]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e976:	2209      	movs	r2, #9
 800e978:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800e97a:	4b29      	ldr	r3, [pc, #164]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e97c:	2257      	movs	r2, #87	; 0x57
 800e97e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800e980:	f7ff fb82 	bl	800e088 <rfalErrorHandling>
                break;
 800e984:	e246      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            }
            /* Discard Soft Framing errors in AP2P and CE */
            else if( rfalIsModePassivePoll( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_ERR2) != 0U) )
 800e986:	4b26      	ldr	r3, [pc, #152]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e988:	785b      	ldrb	r3, [r3, #1]
 800e98a:	2b09      	cmp	r3, #9
 800e98c:	d01d      	beq.n	800e9ca <rfalTransceiveRx+0x272>
 800e98e:	4b24      	ldr	r3, [pc, #144]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e990:	785b      	ldrb	r3, [r3, #1]
 800e992:	2b0d      	cmp	r3, #13
 800e994:	d019      	beq.n	800e9ca <rfalTransceiveRx+0x272>
 800e996:	4b22      	ldr	r3, [pc, #136]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e998:	785b      	ldrb	r3, [r3, #1]
 800e99a:	2b0a      	cmp	r3, #10
 800e99c:	d015      	beq.n	800e9ca <rfalTransceiveRx+0x272>
 800e99e:	4b20      	ldr	r3, [pc, #128]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e9a0:	785b      	ldrb	r3, [r3, #1]
 800e9a2:	2b0b      	cmp	r3, #11
 800e9a4:	d011      	beq.n	800e9ca <rfalTransceiveRx+0x272>
 800e9a6:	4b1e      	ldr	r3, [pc, #120]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e9a8:	785b      	ldrb	r3, [r3, #1]
 800e9aa:	2b0c      	cmp	r3, #12
 800e9ac:	d00d      	beq.n	800e9ca <rfalTransceiveRx+0x272>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d008      	beq.n	800e9ca <rfalTransceiveRx+0x272>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800e9b8:	4b19      	ldr	r3, [pc, #100]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e9ba:	2209      	movs	r2, #9
 800e9bc:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800e9be:	4b18      	ldr	r3, [pc, #96]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e9c0:	2257      	movs	r2, #87	; 0x57
 800e9c2:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800e9c4:	f7ff fb60 	bl	800e088 <rfalErrorHandling>
                break;
 800e9c8:	e224      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_PAR) != 0U )
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d008      	beq.n	800e9e6 <rfalTransceiveRx+0x28e>
            {
                gRFAL.TxRx.status = ERR_PAR;
 800e9d4:	4b12      	ldr	r3, [pc, #72]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e9d6:	221b      	movs	r2, #27
 800e9d8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800e9da:	4b11      	ldr	r3, [pc, #68]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e9dc:	2257      	movs	r2, #87	; 0x57
 800e9de:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800e9e0:	f7ff fb52 	bl	800e088 <rfalErrorHandling>
                break;
 800e9e4:	e216      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_CRC) != 0U )
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d008      	beq.n	800ea02 <rfalTransceiveRx+0x2aa>
            {
                gRFAL.TxRx.status = ERR_CRC;
 800e9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e9f2:	2215      	movs	r2, #21
 800e9f4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800e9f6:	4b0a      	ldr	r3, [pc, #40]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800e9f8:	2257      	movs	r2, #87	; 0x57
 800e9fa:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800e9fc:	f7ff fb44 	bl	800e088 <rfalErrorHandling>
                break;
 800ea00:	e208      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_COL) != 0U )
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f003 0304 	and.w	r3, r3, #4
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d00f      	beq.n	800ea2c <rfalTransceiveRx+0x2d4>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 800ea0c:	4b04      	ldr	r3, [pc, #16]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800ea0e:	221d      	movs	r2, #29
 800ea10:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800ea12:	4b03      	ldr	r3, [pc, #12]	; (800ea20 <rfalTransceiveRx+0x2c8>)
 800ea14:	2257      	movs	r2, #87	; 0x57
 800ea16:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800ea18:	f7ff fb36 	bl	800e088 <rfalErrorHandling>
                break;
 800ea1c:	e1fa      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
 800ea1e:	bf00      	nop
 800ea20:	20000754 	.word	0x20000754
 800ea24:	08000852 	.word	0x08000852
 800ea28:	00f00004 	.word	0x00f00004
            }
            else if( rfalIsModePassiveListen( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) )
 800ea2c:	4b9c      	ldr	r3, [pc, #624]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ea2e:	785b      	ldrb	r3, [r3, #1]
 800ea30:	2b0a      	cmp	r3, #10
 800ea32:	d007      	beq.n	800ea44 <rfalTransceiveRx+0x2ec>
 800ea34:	4b9a      	ldr	r3, [pc, #616]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ea36:	785b      	ldrb	r3, [r3, #1]
 800ea38:	2b0b      	cmp	r3, #11
 800ea3a:	d003      	beq.n	800ea44 <rfalTransceiveRx+0x2ec>
 800ea3c:	4b98      	ldr	r3, [pc, #608]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ea3e:	785b      	ldrb	r3, [r3, #1]
 800ea40:	2b0c      	cmp	r3, #12
 800ea42:	d10b      	bne.n	800ea5c <rfalTransceiveRx+0x304>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d006      	beq.n	800ea5c <rfalTransceiveRx+0x304>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 800ea4e:	4b94      	ldr	r3, [pc, #592]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ea50:	2225      	movs	r2, #37	; 0x25
 800ea52:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ea54:	4b92      	ldr	r3, [pc, #584]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ea56:	225a      	movs	r2, #90	; 0x5a
 800ea58:	751a      	strb	r2, [r3, #20]
                 break;
 800ea5a:	e1db      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f003 0310 	and.w	r3, r3, #16
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d014      	beq.n	800ea90 <rfalTransceiveRx+0x338>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 800ea66:	f000 fa19 	bl	800ee9c <rfalFIFOStatusIsIncompleteByte>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d003      	beq.n	800ea78 <rfalTransceiveRx+0x320>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800ea70:	4b8b      	ldr	r3, [pc, #556]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ea72:	2228      	movs	r2, #40	; 0x28
 800ea74:	82da      	strh	r2, [r3, #22]
 800ea76:	e007      	b.n	800ea88 <rfalTransceiveRx+0x330>
                }
                /* Check if the reception ends missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 800ea78:	f000 fa22 	bl	800eec0 <rfalFIFOStatusIsMissingPar>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d002      	beq.n	800ea88 <rfalTransceiveRx+0x330>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 800ea82:	4b87      	ldr	r3, [pc, #540]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ea84:	2209      	movs	r2, #9
 800ea86:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 800ea88:	4b85      	ldr	r3, [pc, #532]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ea8a:	2257      	movs	r2, #87	; 0x57
 800ea8c:	751a      	strb	r2, [r3, #20]
 800ea8e:	e006      	b.n	800ea9e <rfalTransceiveRx+0x346>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800ea90:	4b83      	ldr	r3, [pc, #524]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ea92:	2203      	movs	r2, #3
 800ea94:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ea96:	4b82      	ldr	r3, [pc, #520]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ea98:	225a      	movs	r2, #90	; 0x5a
 800ea9a:	751a      	strb	r2, [r3, #20]
                break;
 800ea9c:	e1ba      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                      
            tmp = rfalFIFOStatusGetNumBytes();
 800ea9e:	f000 f9e1 	bl	800ee64 <rfalFIFOStatusGetNumBytes>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	81fb      	strh	r3, [r7, #14]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 800eaa6:	4b7e      	ldr	r3, [pc, #504]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaaa:	f003 0302 	and.w	r3, r3, #2
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d117      	bne.n	800eae2 <rfalTransceiveRx+0x38a>
            {
                /* if received frame was bigger than CRC */
                if( (uint16_t)(gRFAL.fifo.bytesTotal + tmp) > 0U )
 800eab2:	4b7b      	ldr	r3, [pc, #492]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eab4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800eab6:	89fb      	ldrh	r3, [r7, #14]
 800eab8:	4413      	add	r3, r2
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d010      	beq.n	800eae2 <rfalTransceiveRx+0x38a>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > RFAL_CRC_LEN) )  
 800eac0:	89fb      	ldrh	r3, [r7, #14]
 800eac2:	2b02      	cmp	r3, #2
 800eac4:	d903      	bls.n	800eace <rfalTransceiveRx+0x376>
                    {
                        tmp -= RFAL_CRC_LEN;
 800eac6:	89fb      	ldrh	r3, [r7, #14]
 800eac8:	3b02      	subs	r3, #2
 800eaca:	81fb      	strh	r3, [r7, #14]
 800eacc:	e009      	b.n	800eae2 <rfalTransceiveRx+0x38a>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > RFAL_CRC_LEN)                       
 800eace:	4b74      	ldr	r3, [pc, #464]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ead0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ead2:	2b02      	cmp	r3, #2
 800ead4:	d905      	bls.n	800eae2 <rfalTransceiveRx+0x38a>
                    {                        
                        gRFAL.fifo.bytesTotal -= RFAL_CRC_LEN;
 800ead6:	4b72      	ldr	r3, [pc, #456]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ead8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eada:	3b02      	subs	r3, #2
 800eadc:	b29a      	uxth	r2, r3
 800eade:	4b70      	ldr	r3, [pc, #448]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eae0:	86da      	strh	r2, [r3, #54]	; 0x36
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 800eae2:	4b6f      	ldr	r3, [pc, #444]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eae4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800eae6:	89fb      	ldrh	r3, [r7, #14]
 800eae8:	4413      	add	r3, r2
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	4b6c      	ldr	r3, [pc, #432]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eaee:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 800eaf0:	4b6b      	ldr	r3, [pc, #428]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eaf2:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800eaf4:	4b6a      	ldr	r3, [pc, #424]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eaf6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eaf8:	3307      	adds	r3, #7
 800eafa:	08db      	lsrs	r3, r3, #3
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d90f      	bls.n	800eb22 <rfalTransceiveRx+0x3ca>
            {
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 800eb02:	4b67      	ldr	r3, [pc, #412]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eb06:	3307      	adds	r3, #7
 800eb08:	08db      	lsrs	r3, r3, #3
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	4b64      	ldr	r3, [pc, #400]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb0e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800eb10:	1ad3      	subs	r3, r2, r3
 800eb12:	81fb      	strh	r3, [r7, #14]
                
                /* Transmission errors have precedence over buffer error */
                if( gRFAL.TxRx.status == ERR_BUSY )
 800eb14:	4b62      	ldr	r3, [pc, #392]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb16:	8adb      	ldrh	r3, [r3, #22]
 800eb18:	2b02      	cmp	r3, #2
 800eb1a:	d102      	bne.n	800eb22 <rfalTransceiveRx+0x3ca>
                {
                    gRFAL.TxRx.status = ERR_NOMEM;
 800eb1c:	4b60      	ldr	r3, [pc, #384]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb1e:	2201      	movs	r2, #1
 800eb20:	82da      	strh	r2, [r3, #22]
                }
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 800eb22:	4b5f      	ldr	r3, [pc, #380]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb24:	6a1b      	ldr	r3, [r3, #32]
 800eb26:	4a5e      	ldr	r2, [pc, #376]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb28:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800eb2a:	4413      	add	r3, r2
 800eb2c:	89fa      	ldrh	r2, [r7, #14]
 800eb2e:	4611      	mov	r1, r2
 800eb30:	4618      	mov	r0, r3
 800eb32:	f000 ffb6 	bl	800faa2 <st25r3916ReadFifo>
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800eb36:	4b5a      	ldr	r3, [pc, #360]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d019      	beq.n	800eb72 <rfalTransceiveRx+0x41a>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 800eb3e:	4b58      	ldr	r3, [pc, #352]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb40:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800eb42:	4b57      	ldr	r3, [pc, #348]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb46:	00d2      	lsls	r2, r2, #3
 800eb48:	b292      	uxth	r2, r2
 800eb4a:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 800eb4c:	f000 f9a6 	bl	800ee9c <rfalFIFOStatusIsIncompleteByte>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d00d      	beq.n	800eb72 <rfalTransceiveRx+0x41a>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 800eb56:	f000 f9c5 	bl	800eee4 <rfalFIFOGetNumIncompleteBits>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	f1c3 0208 	rsb	r2, r3, #8
 800eb60:	4b4f      	ldr	r3, [pc, #316]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb64:	8819      	ldrh	r1, [r3, #0]
 800eb66:	b292      	uxth	r2, r2
 800eb68:	4b4d      	ldr	r3, [pc, #308]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb6c:	1a8a      	subs	r2, r1, r2
 800eb6e:	b292      	uxth	r2, r2
 800eb70:	801a      	strh	r2, [r3, #0]
            }

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 800eb72:	4b4b      	ldr	r3, [pc, #300]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb74:	785b      	ldrb	r3, [r3, #1]
 800eb76:	2b07      	cmp	r3, #7
 800eb78:	d003      	beq.n	800eb82 <rfalTransceiveRx+0x42a>
 800eb7a:	4b49      	ldr	r3, [pc, #292]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb7c:	785b      	ldrb	r3, [r3, #1]
 800eb7e:	2b08      	cmp	r3, #8
 800eb80:	d165      	bne.n	800ec4e <rfalTransceiveRx+0x4f6>
 800eb82:	4b47      	ldr	r3, [pc, #284]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb84:	8adb      	ldrh	r3, [r3, #22]
 800eb86:	2b02      	cmp	r3, #2
 800eb88:	d161      	bne.n	800ec4e <rfalTransceiveRx+0x4f6>
            {
                ReturnCode ret;
                uint16_t offset = 0; /* REMARK offset not currently used */
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	807b      	strh	r3, [r7, #2]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800eb8e:	4b44      	ldr	r3, [pc, #272]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb90:	6a18      	ldr	r0, [r3, #32]
 800eb92:	4b43      	ldr	r3, [pc, #268]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb94:	8edc      	ldrh	r4, [r3, #54]	; 0x36
 800eb96:	4b42      	ldr	r3, [pc, #264]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb98:	f8d3 5264 	ldr.w	r5, [r3, #612]	; 0x264
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800eb9c:	4b40      	ldr	r3, [pc, #256]	; (800eca0 <rfalTransceiveRx+0x548>)
 800eb9e:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 800eba2:	3307      	adds	r3, #7
 800eba4:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800eba6:	b29e      	uxth	r6, r3
 800eba8:	4b3d      	ldr	r3, [pc, #244]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ebaa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ebae:	4a3c      	ldr	r2, [pc, #240]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ebb0:	f8b2 2278 	ldrh.w	r2, [r2, #632]	; 0x278
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800ebb4:	493a      	ldr	r1, [pc, #232]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ebb6:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800ebb8:	2908      	cmp	r1, #8
 800ebba:	bf0c      	ite	eq
 800ebbc:	2101      	moveq	r1, #1
 800ebbe:	2100      	movne	r1, #0
 800ebc0:	b2c9      	uxtb	r1, r1
 800ebc2:	9103      	str	r1, [sp, #12]
 800ebc4:	9202      	str	r2, [sp, #8]
 800ebc6:	9301      	str	r3, [sp, #4]
 800ebc8:	1cbb      	adds	r3, r7, #2
 800ebca:	9300      	str	r3, [sp, #0]
 800ebcc:	4633      	mov	r3, r6
 800ebce:	462a      	mov	r2, r5
 800ebd0:	4621      	mov	r1, r4
 800ebd2:	f7fe f8ad 	bl	800cd30 <iso15693VICCDecode>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	817b      	strh	r3, [r7, #10]
                
                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 800ebda:	897b      	ldrh	r3, [r7, #10]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d002      	beq.n	800ebe6 <rfalTransceiveRx+0x48e>
 800ebe0:	897b      	ldrh	r3, [r7, #10]
 800ebe2:	2b15      	cmp	r3, #21
 800ebe4:	d11f      	bne.n	800ec26 <rfalTransceiveRx+0x4ce>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800ebe6:	4b2e      	ldr	r3, [pc, #184]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ebe8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ebec:	f003 0302 	and.w	r3, r3, #2
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d118      	bne.n	800ec26 <rfalTransceiveRx+0x4ce>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 800ebf4:	4b2a      	ldr	r3, [pc, #168]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ebf6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ebfa:	881b      	ldrh	r3, [r3, #0]
 800ebfc:	f003 0307 	and.w	r3, r3, #7
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d10f      	bne.n	800ec26 <rfalTransceiveRx+0x4ce>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800ec06:	4b26      	ldr	r3, [pc, #152]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec08:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ec0c:	881b      	ldrh	r3, [r3, #0]
 800ec0e:	2b0f      	cmp	r3, #15
 800ec10:	d909      	bls.n	800ec26 <rfalTransceiveRx+0x4ce>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800ec12:	4b23      	ldr	r3, [pc, #140]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec14:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ec18:	881a      	ldrh	r2, [r3, #0]
 800ec1a:	4b21      	ldr	r3, [pc, #132]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec1c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ec20:	3a10      	subs	r2, #16
 800ec22:	b292      	uxth	r2, r2
 800ec24:	801a      	strh	r2, [r3, #0]
                st25r3916WriteFifo(gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes( *gRFAL.nfcvData.origCtx.rxRcvdLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
            #endif
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800ec26:	4a1e      	ldr	r2, [pc, #120]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec28:	4b1d      	ldr	r3, [pc, #116]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec2a:	f102 0418 	add.w	r4, r2, #24
 800ec2e:	f503 7517 	add.w	r5, r3, #604	; 0x25c
 800ec32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ec3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800ec3e:	897b      	ldrh	r3, [r7, #10]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d001      	beq.n	800ec48 <rfalTransceiveRx+0x4f0>
 800ec44:	897b      	ldrh	r3, [r7, #10]
 800ec46:	e000      	b.n	800ec4a <rfalTransceiveRx+0x4f2>
 800ec48:	2302      	movs	r3, #2
 800ec4a:	4a15      	ldr	r2, [pc, #84]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec4c:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 800ec4e:	4b14      	ldr	r3, [pc, #80]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec50:	8adb      	ldrh	r3, [r3, #22]
 800ec52:	2b02      	cmp	r3, #2
 800ec54:	d003      	beq.n	800ec5e <rfalTransceiveRx+0x506>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 800ec56:	4b12      	ldr	r3, [pc, #72]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec58:	225a      	movs	r2, #90	; 0x5a
 800ec5a:	751a      	strb	r2, [r3, #20]
                break;
 800ec5c:	e0da      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 800ec5e:	4b10      	ldr	r3, [pc, #64]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec60:	785b      	ldrb	r3, [r3, #1]
 800ec62:	2b09      	cmp	r3, #9
 800ec64:	d003      	beq.n	800ec6e <rfalTransceiveRx+0x516>
 800ec66:	4b0e      	ldr	r3, [pc, #56]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec68:	785b      	ldrb	r3, [r3, #1]
 800ec6a:	2b0d      	cmp	r3, #13
 800ec6c:	d103      	bne.n	800ec76 <rfalTransceiveRx+0x51e>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 800ec6e:	4b0c      	ldr	r3, [pc, #48]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec70:	2258      	movs	r2, #88	; 0x58
 800ec72:	751a      	strb	r2, [r3, #20]
                break;
 800ec74:	e0ce      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800ec76:	4b0a      	ldr	r3, [pc, #40]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec78:	2259      	movs	r2, #89	; 0x59
 800ec7a:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800ec7c:	4b08      	ldr	r3, [pc, #32]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec7e:	799b      	ldrb	r3, [r3, #6]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d003      	beq.n	800ec8c <rfalTransceiveRx+0x534>
 800ec84:	2140      	movs	r1, #64	; 0x40
 800ec86:	2001      	movs	r0, #1
 800ec88:	f000 ff63 	bl	800fb52 <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800ec8c:	f7ff fa34 	bl	800e0f8 <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 800ec90:	4b03      	ldr	r3, [pc, #12]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 800ec96:	4b02      	ldr	r3, [pc, #8]	; (800eca0 <rfalTransceiveRx+0x548>)
 800ec98:	2200      	movs	r2, #0
 800ec9a:	751a      	strb	r2, [r3, #20]
            break;
 800ec9c:	e0ba      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
 800ec9e:	bf00      	nop
 800eca0:	20000754 	.word	0x20000754
            
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
            /* Use a SW timer to handle an eventual missing RXE                            */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800eca4:	2032      	movs	r0, #50	; 0x32
 800eca6:	f7f5 f993 	bl	8003fd0 <timerCalculateTimer>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	4b5b      	ldr	r3, [pc, #364]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ecae:	641a      	str	r2, [r3, #64]	; 0x40
            /*******************************************************************************/
            
            tmp = rfalFIFOStatusGetNumBytes();
 800ecb0:	f000 f8d8 	bl	800ee64 <rfalFIFOStatusGetNumBytes>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	81fb      	strh	r3, [r7, #14]
            gRFAL.fifo.bytesTotal += tmp;
 800ecb8:	4b58      	ldr	r3, [pc, #352]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ecba:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800ecbc:	89fb      	ldrh	r3, [r7, #14]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	b29a      	uxth	r2, r3
 800ecc2:	4b56      	ldr	r3, [pc, #344]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ecc4:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800ecc6:	4b55      	ldr	r3, [pc, #340]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ecc8:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800ecca:	4b54      	ldr	r3, [pc, #336]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800eccc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ecce:	3307      	adds	r3, #7
 800ecd0:	08db      	lsrs	r3, r3, #3
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d909      	bls.n	800ecec <rfalTransceiveRx+0x594>
 800ecd8:	4b50      	ldr	r3, [pc, #320]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ecda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ecdc:	3307      	adds	r3, #7
 800ecde:	08db      	lsrs	r3, r3, #3
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	4b4e      	ldr	r3, [pc, #312]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ece4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ece6:	1ad3      	subs	r3, r2, r3
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	e000      	b.n	800ecee <rfalTransceiveRx+0x596>
 800ecec:	89fb      	ldrh	r3, [r7, #14]
 800ecee:	81bb      	strh	r3, [r7, #12]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800ecf0:	4b4a      	ldr	r3, [pc, #296]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ecf2:	6a1b      	ldr	r3, [r3, #32]
 800ecf4:	4a49      	ldr	r2, [pc, #292]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ecf6:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800ecf8:	4413      	add	r3, r2
 800ecfa:	89ba      	ldrh	r2, [r7, #12]
 800ecfc:	4611      	mov	r1, r2
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f000 fecf 	bl	800faa2 <st25r3916ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 800ed04:	4b45      	ldr	r3, [pc, #276]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ed06:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800ed08:	89bb      	ldrh	r3, [r7, #12]
 800ed0a:	4413      	add	r3, r2
 800ed0c:	b29a      	uxth	r2, r3
 800ed0e:	4b43      	ldr	r3, [pc, #268]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ed10:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 800ed12:	89ba      	ldrh	r2, [r7, #12]
 800ed14:	89fb      	ldrh	r3, [r7, #14]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d207      	bcs.n	800ed2a <rfalTransceiveRx+0x5d2>
            {
                st25r3916ReadFifo( NULL, (tmp - aux) );
 800ed1a:	89fa      	ldrh	r2, [r7, #14]
 800ed1c:	89bb      	ldrh	r3, [r7, #12]
 800ed1e:	1ad3      	subs	r3, r2, r3
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	4619      	mov	r1, r3
 800ed24:	2000      	movs	r0, #0
 800ed26:	f000 febc 	bl	800faa2 <st25r3916ReadFifo>
            }
            
            rfalFIFOStatusClear();
 800ed2a:	f000 f88d 	bl	800ee48 <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800ed2e:	4b3b      	ldr	r3, [pc, #236]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ed30:	2254      	movs	r2, #84	; 0x54
 800ed32:	751a      	strb	r2, [r3, #20]
            break;
 800ed34:	e06e      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800ed36:	4b39      	ldr	r3, [pc, #228]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ed38:	799b      	ldrb	r3, [r3, #6]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d003      	beq.n	800ed46 <rfalTransceiveRx+0x5ee>
 800ed3e:	2140      	movs	r1, #64	; 0x40
 800ed40:	2001      	movs	r0, #1
 800ed42:	f000 ff06 	bl	800fb52 <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800ed46:	f7ff f9d7 	bl	800e0f8 <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800ed4a:	4b34      	ldr	r3, [pc, #208]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ed4c:	8adb      	ldrh	r3, [r3, #22]
 800ed4e:	2b02      	cmp	r3, #2
 800ed50:	d102      	bne.n	800ed58 <rfalTransceiveRx+0x600>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800ed52:	4b32      	ldr	r3, [pc, #200]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ed54:	2208      	movs	r2, #8
 800ed56:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800ed58:	4b30      	ldr	r3, [pc, #192]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	751a      	strb	r2, [r3, #20]
            break;
 800ed5e:	e059      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
        
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_PPON2) );
 800ed60:	482f      	ldr	r0, [pc, #188]	; (800ee20 <rfalTransceiveRx+0x6c8>)
 800ed62:	f001 f98d 	bl	8010080 <st25r3916GetInterrupt>
 800ed66:	4603      	mov	r3, r0
 800ed68:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d04c      	beq.n	800ee0a <rfalTransceiveRx+0x6b2>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d002      	beq.n	800ed80 <rfalTransceiveRx+0x628>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800ed7a:	4b28      	ldr	r3, [pc, #160]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ed7c:	2253      	movs	r2, #83	; 0x53
 800ed7e:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_NRE) != 0U )
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d005      	beq.n	800ed96 <rfalTransceiveRx+0x63e>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800ed8a:	4b24      	ldr	r3, [pc, #144]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ed8c:	2204      	movs	r2, #4
 800ed8e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ed90:	4b22      	ldr	r3, [pc, #136]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ed92:	225a      	movs	r2, #90	; 0x5a
 800ed94:	751a      	strb	r2, [r3, #20]
            }
            if( (irqs & ST25R3916_IRQ_MASK_PPON2) != 0U )
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	da38      	bge.n	800ee0e <rfalTransceiveRx+0x6b6>
            {
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 800ed9c:	4b1f      	ldr	r3, [pc, #124]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ed9e:	2225      	movs	r2, #37	; 0x25
 800eda0:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800eda2:	4b1e      	ldr	r3, [pc, #120]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800eda4:	225a      	movs	r2, #90	; 0x5a
 800eda6:	751a      	strb	r2, [r3, #20]
            }
            break;
 800eda8:	e031      	b.n	800ee0e <rfalTransceiveRx+0x6b6>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC) );
 800edaa:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800edae:	f001 f967 	bl	8010080 <st25r3916GetInterrupt>
 800edb2:	4603      	mov	r3, r0
 800edb4:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d02a      	beq.n	800ee12 <rfalTransceiveRx+0x6ba>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_CAT) != 0U )
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d003      	beq.n	800edce <rfalTransceiveRx+0x676>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800edc6:	4b15      	ldr	r3, [pc, #84]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800edc8:	2259      	movs	r2, #89	; 0x59
 800edca:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 800edcc:	e022      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            else if( (irqs & ST25R3916_IRQ_MASK_CAC) != 0U )
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d006      	beq.n	800ede6 <rfalTransceiveRx+0x68e>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 800edd8:	4b10      	ldr	r3, [pc, #64]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800edda:	221d      	movs	r2, #29
 800eddc:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800edde:	4b0f      	ldr	r3, [pc, #60]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ede0:	225a      	movs	r2, #90	; 0x5a
 800ede2:	751a      	strb	r2, [r3, #20]
            break;
 800ede4:	e016      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
               gRFAL.TxRx.status = ERR_IO;
 800ede6:	4b0d      	ldr	r3, [pc, #52]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800ede8:	2203      	movs	r2, #3
 800edea:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800edec:	4b0b      	ldr	r3, [pc, #44]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800edee:	225a      	movs	r2, #90	; 0x5a
 800edf0:	751a      	strb	r2, [r3, #20]
            break;
 800edf2:	e00f      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800edf4:	4b09      	ldr	r3, [pc, #36]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800edf6:	2208      	movs	r2, #8
 800edf8:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800edfa:	4b08      	ldr	r3, [pc, #32]	; (800ee1c <rfalTransceiveRx+0x6c4>)
 800edfc:	225a      	movs	r2, #90	; 0x5a
 800edfe:	751a      	strb	r2, [r3, #20]
            break;           
 800ee00:	e008      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800ee02:	bf00      	nop
 800ee04:	e006      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800ee06:	bf00      	nop
 800ee08:	e004      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800ee0a:	bf00      	nop
 800ee0c:	e002      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
            break;
 800ee0e:	bf00      	nop
 800ee10:	e000      	b.n	800ee14 <rfalTransceiveRx+0x6bc>
               break;  /* No interrupt to process */
 800ee12:	bf00      	nop
    }    
}
 800ee14:	bf00      	nop
 800ee16:	3714      	adds	r7, #20
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee1c:	20000754 	.word	0x20000754
 800ee20:	80005000 	.word	0x80005000

0800ee24 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800ee28:	4b05      	ldr	r3, [pc, #20]	; (800ee40 <rfalFIFOStatusUpdate+0x1c>)
 800ee2a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ee2e:	2bff      	cmp	r3, #255	; 0xff
 800ee30:	d104      	bne.n	800ee3c <rfalFIFOStatusUpdate+0x18>
    {
        st25r3916ReadMultipleRegisters( ST25R3916_REG_FIFO_STATUS1, gRFAL.fifo.status, ST25R3916_FIFO_STATUS_LEN );
 800ee32:	2202      	movs	r2, #2
 800ee34:	4903      	ldr	r1, [pc, #12]	; (800ee44 <rfalFIFOStatusUpdate+0x20>)
 800ee36:	201e      	movs	r0, #30
 800ee38:	f000 fd99 	bl	800f96e <st25r3916ReadMultipleRegisters>
    }
}
 800ee3c:	bf00      	nop
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	20000754 	.word	0x20000754
 800ee44:	2000078e 	.word	0x2000078e

0800ee48 <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 800ee48:	b480      	push	{r7}
 800ee4a:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800ee4c:	4b04      	ldr	r3, [pc, #16]	; (800ee60 <rfalFIFOStatusClear+0x18>)
 800ee4e:	22ff      	movs	r2, #255	; 0xff
 800ee50:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 800ee54:	bf00      	nop
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop
 800ee60:	20000754 	.word	0x20000754

0800ee64 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint16_t rfalFIFOStatusGetNumBytes( void )
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
    uint16_t result;
    
    rfalFIFOStatusUpdate();
 800ee6a:	f7ff ffdb 	bl	800ee24 <rfalFIFOStatusUpdate>
    
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 800ee6e:	4b0a      	ldr	r3, [pc, #40]	; (800ee98 <rfalFIFOStatusGetNumBytes+0x34>)
 800ee70:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ee74:	099b      	lsrs	r3, r3, #6
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	021b      	lsls	r3, r3, #8
 800ee7c:	80fb      	strh	r3, [r7, #6]
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 800ee7e:	4b06      	ldr	r3, [pc, #24]	; (800ee98 <rfalFIFOStatusGetNumBytes+0x34>)
 800ee80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	88fb      	ldrh	r3, [r7, #6]
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	80fb      	strh	r3, [r7, #6]
    return result;
 800ee8c:	88fb      	ldrh	r3, [r7, #6]
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3708      	adds	r7, #8
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	20000754 	.word	0x20000754

0800ee9c <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800eea0:	f7ff ffc0 	bl	800ee24 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 800eea4:	4b05      	ldr	r3, [pc, #20]	; (800eebc <rfalFIFOStatusIsIncompleteByte+0x20>)
 800eea6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800eeaa:	f003 030e 	and.w	r3, r3, #14
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	bf14      	ite	ne
 800eeb2:	2301      	movne	r3, #1
 800eeb4:	2300      	moveq	r3, #0
 800eeb6:	b2db      	uxtb	r3, r3
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	20000754 	.word	0x20000754

0800eec0 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800eec4:	f7ff ffae 	bl	800ee24 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_np_lb) != 0U);
 800eec8:	4b05      	ldr	r3, [pc, #20]	; (800eee0 <rfalFIFOStatusIsMissingPar+0x20>)
 800eeca:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800eece:	f003 0301 	and.w	r3, r3, #1
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	bf14      	ite	ne
 800eed6:	2301      	movne	r3, #1
 800eed8:	2300      	moveq	r3, #0
 800eeda:	b2db      	uxtb	r3, r3
}
 800eedc:	4618      	mov	r0, r3
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	20000754 	.word	0x20000754

0800eee4 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800eee8:	f7ff ff9c 	bl	800ee24 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 800eeec:	4b04      	ldr	r3, [pc, #16]	; (800ef00 <rfalFIFOGetNumIncompleteBits+0x1c>)
 800eeee:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800eef2:	085b      	lsrs	r3, r3, #1
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	f003 0307 	and.w	r3, r3, #7
 800eefa:	b2db      	uxtb	r3, r3
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	20000754 	.word	0x20000754

0800ef04 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b08c      	sub	sp, #48	; 0x30
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	607a      	str	r2, [r7, #4]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	460b      	mov	r3, r1
 800ef12:	72fb      	strb	r3, [r7, #11]
 800ef14:	4613      	mov	r3, r2
 800ef16:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800ef18:	4b55      	ldr	r3, [pc, #340]	; (800f070 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d903      	bls.n	800ef28 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 800ef20:	4b53      	ldr	r3, [pc, #332]	; (800f070 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800ef22:	785b      	ldrb	r3, [r3, #1]
 800ef24:	2b07      	cmp	r3, #7
 800ef26:	d001      	beq.n	800ef2c <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 800ef28:	2321      	movs	r3, #33	; 0x21
 800ef2a:	e09d      	b.n	800f068 <rfalISO15693TransceiveAnticollisionFrame+0x164>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800ef2c:	f241 0003 	movw	r0, #4099	; 0x1003
 800ef30:	f7fd fbfa 	bl	800c728 <rfalSetAnalogConfig>
    
    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800ef34:	4b4e      	ldr	r3, [pc, #312]	; (800f070 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800ef36:	2210      	movs	r2, #16
 800ef38:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800ef3c:	7afb      	ldrb	r3, [r7, #11]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d101      	bne.n	800ef46 <rfalISO15693TransceiveAnticollisionFrame+0x42>
 800ef42:	220b      	movs	r2, #11
 800ef44:	e000      	b.n	800ef48 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 800ef46:	220a      	movs	r2, #10
 800ef48:	7afb      	ldrb	r3, [r7, #11]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d101      	bne.n	800ef52 <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 800ef4e:	2340      	movs	r3, #64	; 0x40
 800ef50:	e000      	b.n	800ef54 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 800ef52:	2300      	movs	r3, #0
 800ef54:	4313      	orrs	r3, r2
 800ef56:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 800ef5c:	7afb      	ldrb	r3, [r7, #11]
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	00db      	lsls	r3, r3, #3
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 800ef6a:	7abb      	ldrb	r3, [r7, #10]
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	00db      	lsls	r3, r3, #3
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 800ef74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef76:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 800ef78:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800ef7c:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 800ef7e:	f107 0310 	add.w	r3, r7, #16
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fe fe34 	bl	800dbf0 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 800ef88:	f7fe ffc5 	bl	800df16 <rfalTransceiveRunBlockingTx>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 800ef90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d103      	bne.n	800ef9e <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 800ef96:	f7fe ffdb 	bl	800df50 <rfalTransceiveBlockingRx>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Check if a Transmission error and received data is less then expected */
    if( ((ret == ERR_RF_COLLISION) || (ret == ERR_CRC) || (ret == ERR_FRAMING)) && (rfalConvBitsToBytes(*ctx.rxRcvdLen) < RFAL_ISO15693_INV_RES_LEN) )
 800ef9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800efa0:	2b1d      	cmp	r3, #29
 800efa2:	d005      	beq.n	800efb0 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800efa4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800efa6:	2b15      	cmp	r3, #21
 800efa8:	d002      	beq.n	800efb0 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800efaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800efac:	2b09      	cmp	r3, #9
 800efae:	d112      	bne.n	800efd6 <rfalISO15693TransceiveAnticollisionFrame+0xd2>
 800efb0:	6a3b      	ldr	r3, [r7, #32]
 800efb2:	881b      	ldrh	r3, [r3, #0]
 800efb4:	3307      	adds	r3, #7
 800efb6:	08db      	lsrs	r3, r3, #3
 800efb8:	b29b      	uxth	r3, r3
 800efba:	2b0b      	cmp	r3, #11
 800efbc:	d80b      	bhi.n	800efd6 <rfalISO15693TransceiveAnticollisionFrame+0xd2>
    {
        /* If INVENTORY_RES is shorter than expected, tag is still modulating *
         * Ensure that response is complete before next frame                 */
        platformDelay( (uint8_t)( (RFAL_ISO15693_INV_RES_LEN - rfalConvBitsToBytes(*ctx.rxRcvdLen)) / ((RFAL_ISO15693_INV_RES_LEN / RFAL_ISO15693_INV_RES_DUR)+1U) ));
 800efbe:	6a3b      	ldr	r3, [r7, #32]
 800efc0:	881b      	ldrh	r3, [r3, #0]
 800efc2:	3307      	adds	r3, #7
 800efc4:	08db      	lsrs	r3, r3, #3
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	f1c3 030c 	rsb	r3, r3, #12
 800efcc:	089b      	lsrs	r3, r3, #2
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7f5 ff55 	bl	8004e80 <HAL_Delay>
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 800efd6:	4b26      	ldr	r3, [pc, #152]	; (800f070 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800efd8:	789b      	ldrb	r3, [r3, #2]
 800efda:	2bea      	cmp	r3, #234	; 0xea
 800efdc:	d90c      	bls.n	800eff8 <rfalISO15693TransceiveAnticollisionFrame+0xf4>
 800efde:	4b24      	ldr	r3, [pc, #144]	; (800f070 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800efe0:	789b      	ldrb	r3, [r3, #2]
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	011b      	lsls	r3, r3, #4
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	b29b      	uxth	r3, r3
 800efec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800eff0:	f043 0301 	orr.w	r3, r3, #1
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	e00d      	b.n	800f014 <rfalISO15693TransceiveAnticollisionFrame+0x110>
 800eff8:	4b1d      	ldr	r3, [pc, #116]	; (800f070 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800effa:	789b      	ldrb	r3, [r3, #2]
 800effc:	b29b      	uxth	r3, r3
 800effe:	3301      	adds	r3, #1
 800f000:	b29b      	uxth	r3, r3
 800f002:	011b      	lsls	r3, r3, #4
 800f004:	b29b      	uxth	r3, r3
 800f006:	b2db      	uxtb	r3, r3
 800f008:	b29b      	uxth	r3, r3
 800f00a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f00e:	f043 0301 	orr.w	r3, r3, #1
 800f012:	b29b      	uxth	r3, r3
 800f014:	4618      	mov	r0, r3
 800f016:	f7fd fb87 	bl	800c728 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 800f01a:	4b15      	ldr	r3, [pc, #84]	; (800f070 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f01c:	78db      	ldrb	r3, [r3, #3]
 800f01e:	2bea      	cmp	r3, #234	; 0xea
 800f020:	d90c      	bls.n	800f03c <rfalISO15693TransceiveAnticollisionFrame+0x138>
 800f022:	4b13      	ldr	r3, [pc, #76]	; (800f070 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f024:	78db      	ldrb	r3, [r3, #3]
 800f026:	b29b      	uxth	r3, r3
 800f028:	011b      	lsls	r3, r3, #4
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	b29b      	uxth	r3, r3
 800f030:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f034:	f043 0302 	orr.w	r3, r3, #2
 800f038:	b29b      	uxth	r3, r3
 800f03a:	e00d      	b.n	800f058 <rfalISO15693TransceiveAnticollisionFrame+0x154>
 800f03c:	4b0c      	ldr	r3, [pc, #48]	; (800f070 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f03e:	78db      	ldrb	r3, [r3, #3]
 800f040:	b29b      	uxth	r3, r3
 800f042:	3301      	adds	r3, #1
 800f044:	b29b      	uxth	r3, r3
 800f046:	011b      	lsls	r3, r3, #4
 800f048:	b29b      	uxth	r3, r3
 800f04a:	b2db      	uxtb	r3, r3
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f052:	f043 0302 	orr.w	r3, r3, #2
 800f056:	b29b      	uxth	r3, r3
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fd fb65 	bl	800c728 <rfalSetAnalogConfig>
    
    gRFAL.nfcvData.ignoreBits = 0;
 800f05e:	4b04      	ldr	r3, [pc, #16]	; (800f070 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f060:	2200      	movs	r2, #0
 800f062:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    return ret;
 800f066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3730      	adds	r7, #48	; 0x30
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	20000754 	.word	0x20000754

0800f074 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b088      	sub	sp, #32
 800f078:	af02      	add	r7, sp, #8
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	460b      	mov	r3, r1
 800f07e:	607a      	str	r2, [r7, #4]
 800f080:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 800f082:	7afa      	ldrb	r2, [r7, #11]
 800f084:	f107 0017 	add.w	r0, r7, #23
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	9300      	str	r3, [sp, #0]
 800f08c:	4613      	mov	r3, r2
 800f08e:	68fa      	ldr	r2, [r7, #12]
 800f090:	2100      	movs	r1, #0
 800f092:	f7ff ff37 	bl	800ef04 <rfalISO15693TransceiveAnticollisionFrame>
 800f096:	4603      	mov	r3, r0
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3718      	adds	r7, #24
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}

0800f0a0 <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	af00      	add	r7, sp, #0
    return st25r3916IsExtFieldOn();
 800f0a4:	2240      	movs	r2, #64	; 0x40
 800f0a6:	2140      	movs	r1, #64	; 0x40
 800f0a8:	2031      	movs	r0, #49	; 0x31
 800f0aa:	f000 fe5f 	bl	800fd6c <st25r3916CheckReg>
 800f0ae:	4603      	mov	r3, r0
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	80fb      	strh	r3, [r7, #6]
 800f0be:	460b      	mov	r3, r1
 800f0c0:	717b      	strb	r3, [r7, #5]
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	713b      	strb	r3, [r7, #4]
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 800f0c6:	88fb      	ldrh	r3, [r7, #6]
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f000 fe6e 	bl	800fdac <st25r3916IsRegValid>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	f083 0301 	eor.w	r3, r3, #1
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d001      	beq.n	800f0e0 <rfalChipChangeRegBits+0x2c>
    {
        return ERR_PARAM;
 800f0dc:	2307      	movs	r3, #7
 800f0de:	e007      	b.n	800f0f0 <rfalChipChangeRegBits+0x3c>
    }
    
    return st25r3916ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 800f0e0:	88fb      	ldrh	r3, [r7, #6]
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	793a      	ldrb	r2, [r7, #4]
 800f0e6:	7979      	ldrb	r1, [r7, #5]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f000 fdbb 	bl	800fc64 <st25r3916ChangeRegisterBits>
 800f0ee:	4603      	mov	r3, r0
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3708      	adds	r7, #8
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	4603      	mov	r3, r0
 800f100:	80fb      	strh	r3, [r7, #6]
 800f102:	460b      	mov	r3, r1
 800f104:	717b      	strb	r3, [r7, #5]
 800f106:	4613      	mov	r3, r2
 800f108:	713b      	strb	r3, [r7, #4]
    st25r3916ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 800f10a:	88fb      	ldrh	r3, [r7, #6]
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	793a      	ldrb	r2, [r7, #4]
 800f110:	7979      	ldrb	r1, [r7, #5]
 800f112:	4618      	mov	r0, r3
 800f114:	f000 fdf2 	bl	800fcfc <st25r3916ChangeTestRegisterBits>
    return ERR_NONE;
 800f118:	2300      	movs	r3, #0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3708      	adds	r7, #8
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}

0800f122 <st25r3916ExecuteCommandAndGetResult>:
 * LOCAL FUNCTION
 ******************************************************************************
 */

ReturnCode st25r3916ExecuteCommandAndGetResult( uint8_t cmd, uint8_t resReg, uint8_t tout, uint8_t* result )
{
 800f122:	b580      	push	{r7, lr}
 800f124:	b082      	sub	sp, #8
 800f126:	af00      	add	r7, sp, #0
 800f128:	603b      	str	r3, [r7, #0]
 800f12a:	4603      	mov	r3, r0
 800f12c:	71fb      	strb	r3, [r7, #7]
 800f12e:	460b      	mov	r3, r1
 800f130:	71bb      	strb	r3, [r7, #6]
 800f132:	4613      	mov	r3, r2
 800f134:	717b      	strb	r3, [r7, #5]
    /* Clear and enable Direct Command interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 800f136:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f13a:	f000 ffa1 	bl	8010080 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800f13e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f142:	f000 ffd5 	bl	80100f0 <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( cmd );
 800f146:	79fb      	ldrb	r3, [r7, #7]
 800f148:	4618      	mov	r0, r3
 800f14a:	f000 fcc6 	bl	800fada <st25r3916ExecuteCommand>

    st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_DCT, tout );
 800f14e:	797b      	ldrb	r3, [r7, #5]
 800f150:	b29b      	uxth	r3, r3
 800f152:	4619      	mov	r1, r3
 800f154:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f158:	f000 ff42 	bl	800ffe0 <st25r3916WaitForInterruptsTimed>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800f15c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f160:	f000 ffd2 	bl	8010108 <st25r3916DisableInterrupts>

    /* After execution read out the result if the pointer is not NULL */
    if( result != NULL )
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d004      	beq.n	800f174 <st25r3916ExecuteCommandAndGetResult+0x52>
    {
        st25r3916ReadRegister( resReg, result);
 800f16a:	79bb      	ldrb	r3, [r7, #6]
 800f16c:	6839      	ldr	r1, [r7, #0]
 800f16e:	4618      	mov	r0, r3
 800f170:	f000 fbec 	bl	800f94c <st25r3916ReadRegister>
    }

    return ERR_NONE;
 800f174:	2300      	movs	r3, #0

}
 800f176:	4618      	mov	r0, r3
 800f178:	3708      	adds	r7, #8
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
	...

0800f180 <st25r3916Initialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode st25r3916Initialize( void )
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;
    
    /* Set default state on the ST25R3916 */
    st25r3916ExecuteCommand( ST25R3916_CMD_SET_DEFAULT );
 800f186:	20c1      	movs	r0, #193	; 0xc1
 800f188:	f000 fca7 	bl	800fada <st25r3916ExecuteCommand>

#ifndef RFAL_USE_I2C    
    /* Increase MISO driving level as SPI can go up to 10MHz */
    st25r3916WriteRegister(ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_io_18);
 800f18c:	2104      	movs	r1, #4
 800f18e:	2001      	movs	r0, #1
 800f190:	f000 fc1a 	bl	800f9c8 <st25r3916WriteRegister>
#endif /* RFAL_USE_I2C */
    
    if( !st25r3916CheckChipID( NULL ) )
 800f194:	2000      	movs	r0, #0
 800f196:	f000 fa2b 	bl	800f5f0 <st25r3916CheckChipID>
 800f19a:	4603      	mov	r3, r0
 800f19c:	f083 0301 	eor.w	r3, r3, #1
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d001      	beq.n	800f1aa <st25r3916Initialize+0x2a>
    {
        return ERR_HW_MISMATCH;
 800f1a6:	2324      	movs	r3, #36	; 0x24
 800f1a8:	e02d      	b.n	800f206 <st25r3916Initialize+0x86>
    }
    
    st25r3916InitInterrupts();
 800f1aa:	f000 fe51 	bl	800fe50 <st25r3916InitInterrupts>
    st25r3916ledInit();
 800f1ae:	f000 ffe9 	bl	8010184 <st25r3916ledInit>
    
    gST25R3916NRT_64fcs = 0;
 800f1b2:	4b17      	ldr	r3, [pc, #92]	; (800f210 <st25r3916Initialize+0x90>)
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	601a      	str	r2, [r3, #0]

#ifndef RFAL_USE_I2C
    /* Enable pull downs on MISO line */
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 800f1b8:	2118      	movs	r1, #24
 800f1ba:	2001      	movs	r0, #1
 800f1bc:	f000 fd25 	bl	800fc0a <st25r3916SetRegisterBits>
#endif /* RFAL_USE_I2C */
    
    /* Disable internal overheat protection */
    st25r3916ChangeTestRegisterBits( 0x04, 0x10, 0x10 );
 800f1c0:	2210      	movs	r2, #16
 800f1c2:	2110      	movs	r1, #16
 800f1c4:	2004      	movs	r0, #4
 800f1c6:	f000 fd99 	bl	800fcfc <st25r3916ChangeTestRegisterBits>

    /* Enable Oscillator and wait until it gets stable */
    st25r3916OscOn();        
 800f1ca:	f000 f823 	bl	800f214 <st25r3916OscOn>
    
    /* Measure VDD and set sup3V bit according to Power supplied  */
    vdd_mV = st25r3916MeasureVoltage( ST25R3916_REG_REGULATOR_CONTROL_mpsv_vdd );
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	f000 f854 	bl	800f27c <st25r3916MeasureVoltage>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	80fb      	strh	r3, [r7, #6]
    st25r3916ChangeRegisterBits( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ((vdd_mV < ST25R3916_SUPPLY_THRESHOLD) ? ST25R3916_REG_IO_CONF2_sup3V_3V : ST25R3916_REG_IO_CONF2_sup3V_5V) );
 800f1d8:	88fb      	ldrh	r3, [r7, #6]
 800f1da:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800f1de:	d201      	bcs.n	800f1e4 <st25r3916Initialize+0x64>
 800f1e0:	2380      	movs	r3, #128	; 0x80
 800f1e2:	e000      	b.n	800f1e6 <st25r3916Initialize+0x66>
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	2180      	movs	r1, #128	; 0x80
 800f1ea:	2001      	movs	r0, #1
 800f1ec:	f000 fd3a 	bl	800fc64 <st25r3916ChangeRegisterBits>
            
    /* Make sure Transmitter and Receiver are disabled */
    st25r3916TxRxOff();
 800f1f0:	2148      	movs	r1, #72	; 0x48
 800f1f2:	2002      	movs	r0, #2
 800f1f4:	f000 fcd2 	bl	800fb9c <st25r3916ClrRegisterBits>
    
    /* After reset all interrupts are enabled, so disable them at first */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 800f1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1fc:	f000 ff84 	bl	8010108 <st25r3916DisableInterrupts>
    
    /* And clear them, just to be sure */
    st25r3916ClearInterrupts();
 800f200:	f000 ff8e 	bl	8010120 <st25r3916ClearInterrupts>
    
    return ERR_NONE;
 800f204:	2300      	movs	r3, #0
}
 800f206:	4618      	mov	r0, r3
 800f208:	3708      	adds	r7, #8
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
 800f20e:	bf00      	nop
 800f210:	200009d0 	.word	0x200009d0

0800f214 <st25r3916OscOn>:
}


/*******************************************************************************/
void st25r3916OscOn( void )
{
 800f214:	b580      	push	{r7, lr}
 800f216:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3916_REG_OP_CONTROL_en instead of ST25R3916_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 800f218:	2280      	movs	r2, #128	; 0x80
 800f21a:	2180      	movs	r1, #128	; 0x80
 800f21c:	2002      	movs	r0, #2
 800f21e:	f000 fda5 	bl	800fd6c <st25r3916CheckReg>
 800f222:	4603      	mov	r3, r0
 800f224:	f083 0301 	eor.w	r3, r3, #1
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d00c      	beq.n	800f248 <st25r3916OscOn+0x34>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3916GetInterrupt( ST25R3916_IRQ_MASK_OSC );
 800f22e:	2080      	movs	r0, #128	; 0x80
 800f230:	f000 ff26 	bl	8010080 <st25r3916GetInterrupt>
      
        /* Enable oscillator frequency stable interrupt */
        st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_OSC );
 800f234:	2080      	movs	r0, #128	; 0x80
 800f236:	f000 ff5b 	bl	80100f0 <st25r3916EnableInterrupts>

        /* Enable oscillator and regulator output */
        st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 800f23a:	2180      	movs	r1, #128	; 0x80
 800f23c:	2002      	movs	r0, #2
 800f23e:	f000 fce4 	bl	800fc0a <st25r3916SetRegisterBits>

        /* Wait for the oscillator interrupt */
//        st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE );
        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_OSC );
 800f242:	2080      	movs	r0, #128	; 0x80
 800f244:	f000 ff60 	bl	8010108 <st25r3916DisableInterrupts>
    }
}
 800f248:	bf00      	nop
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <st25r3916MeasurePowerSupply>:


/*******************************************************************************/
uint8_t st25r3916MeasurePowerSupply( uint8_t mpsv )
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	4603      	mov	r3, r0
 800f254:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3916ChangeRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_mpsv_mask, mpsv );
 800f256:	79fb      	ldrb	r3, [r7, #7]
 800f258:	461a      	mov	r2, r3
 800f25a:	2107      	movs	r1, #7
 800f25c:	202c      	movs	r0, #44	; 0x2c
 800f25e:	f000 fd01 	bl	800fc64 <st25r3916ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_VDD, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_VDD, &result);
 800f262:	f107 030f 	add.w	r3, r7, #15
 800f266:	2264      	movs	r2, #100	; 0x64
 800f268:	2125      	movs	r1, #37	; 0x25
 800f26a:	20df      	movs	r0, #223	; 0xdf
 800f26c:	f7ff ff59 	bl	800f122 <st25r3916ExecuteCommandAndGetResult>

    return result;
 800f270:	7bfb      	ldrb	r3, [r7, #15]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3710      	adds	r7, #16
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
	...

0800f27c <st25r3916MeasureVoltage>:


/*******************************************************************************/
uint16_t st25r3916MeasureVoltage( uint8_t mpsv )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	4603      	mov	r3, r0
 800f284:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3916MeasurePowerSupply(mpsv);
 800f286:	79fb      	ldrb	r3, [r7, #7]
 800f288:	4618      	mov	r0, r3
 800f28a:	f7ff ffdf 	bl	800f24c <st25r3916MeasurePowerSupply>
 800f28e:	4603      	mov	r3, r0
 800f290:	73fb      	strb	r3, [r7, #15]
   
    /* Convert cmd output into mV (each step represents 23.4 mV )*/
    mV  = ((uint16_t)result) * 23U;
 800f292:	7bfb      	ldrb	r3, [r7, #15]
 800f294:	b29b      	uxth	r3, r3
 800f296:	461a      	mov	r2, r3
 800f298:	0052      	lsls	r2, r2, #1
 800f29a:	441a      	add	r2, r3
 800f29c:	00d2      	lsls	r2, r2, #3
 800f29e:	1ad3      	subs	r3, r2, r3
 800f2a0:	81bb      	strh	r3, [r7, #12]
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 800f2a2:	7bfb      	ldrb	r3, [r7, #15]
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	3305      	adds	r3, #5
 800f2a8:	4a06      	ldr	r2, [pc, #24]	; (800f2c4 <st25r3916MeasureVoltage+0x48>)
 800f2aa:	fba2 2303 	umull	r2, r3, r2, r3
 800f2ae:	08db      	lsrs	r3, r3, #3
 800f2b0:	b29a      	uxth	r2, r3
 800f2b2:	89bb      	ldrh	r3, [r7, #12]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	81bb      	strh	r3, [r7, #12]

    return mV;
 800f2b8:	89bb      	ldrh	r3, [r7, #12]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	cccccccd 	.word	0xcccccccd

0800f2c8 <st25r3916AdjustRegulators>:


/*******************************************************************************/
ReturnCode st25r3916AdjustRegulators( uint16_t* result_mV )
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
    uint8_t result;

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 800f2d0:	2180      	movs	r1, #128	; 0x80
 800f2d2:	202c      	movs	r0, #44	; 0x2c
 800f2d4:	f000 fc99 	bl	800fc0a <st25r3916SetRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 800f2d8:	2180      	movs	r1, #128	; 0x80
 800f2da:	202c      	movs	r0, #44	; 0x2c
 800f2dc:	f000 fc5e 	bl	800fb9c <st25r3916ClrRegisterBits>

    /* Execute Adjust regulators cmd and retrieve result */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_ADJUST_REGULATORS, ST25R3916_REG_REGULATOR_RESULT, ST25R3916_TOUT_ADJUST_REGULATORS, &result );
 800f2e0:	f107 030f 	add.w	r3, r7, #15
 800f2e4:	2206      	movs	r2, #6
 800f2e6:	216c      	movs	r1, #108	; 0x6c
 800f2e8:	20d6      	movs	r0, #214	; 0xd6
 800f2ea:	f7ff ff1a 	bl	800f122 <st25r3916ExecuteCommandAndGetResult>

    /* Calculate result in mV */
    result >>= ST25R3916_REG_REGULATOR_RESULT_reg_shift;
 800f2ee:	7bfb      	ldrb	r3, [r7, #15]
 800f2f0:	091b      	lsrs	r3, r3, #4
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	73fb      	strb	r3, [r7, #15]
    
    if( result_mV != NULL )
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d02b      	beq.n	800f354 <st25r3916AdjustRegulators+0x8c>
    {
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ST25R3916_REG_IO_CONF2_sup3V )  )
 800f2fc:	2280      	movs	r2, #128	; 0x80
 800f2fe:	2180      	movs	r1, #128	; 0x80
 800f300:	2001      	movs	r0, #1
 800f302:	f000 fd33 	bl	800fd6c <st25r3916CheckReg>
 800f306:	4603      	mov	r3, r0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d00d      	beq.n	800f328 <st25r3916AdjustRegulators+0x60>
        {
            result = MIN( result, (uint8_t)(result-5U) );/* In 3.3V mode [0,4] are not used                       */
 800f30c:	7bfb      	ldrb	r3, [r7, #15]
 800f30e:	2b04      	cmp	r3, #4
 800f310:	d903      	bls.n	800f31a <st25r3916AdjustRegulators+0x52>
 800f312:	7bfb      	ldrb	r3, [r7, #15]
 800f314:	3b05      	subs	r3, #5
 800f316:	b2db      	uxtb	r3, r3
 800f318:	e000      	b.n	800f31c <st25r3916AdjustRegulators+0x54>
 800f31a:	7bfb      	ldrb	r3, [r7, #15]
 800f31c:	73fb      	strb	r3, [r7, #15]
            *result_mV = 2400U;                          /* Minimum regulated voltage 2.4V in case of 3.3V supply */
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800f324:	801a      	strh	r2, [r3, #0]
 800f326:	e003      	b.n	800f330 <st25r3916AdjustRegulators+0x68>
        }
        else
        {
            *result_mV = 3600U;                          /* Minimum regulated voltage 3.6V in case of 5V supply   */
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800f32e:	801a      	strh	r2, [r3, #0]
        }
        
        *result_mV += (uint16_t)result * 100U;           /* 100mV steps in both 3.3V and 5V supply                */
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	881a      	ldrh	r2, [r3, #0]
 800f334:	7bfb      	ldrb	r3, [r7, #15]
 800f336:	b29b      	uxth	r3, r3
 800f338:	4619      	mov	r1, r3
 800f33a:	0089      	lsls	r1, r1, #2
 800f33c:	440b      	add	r3, r1
 800f33e:	4619      	mov	r1, r3
 800f340:	0088      	lsls	r0, r1, #2
 800f342:	4619      	mov	r1, r3
 800f344:	4603      	mov	r3, r0
 800f346:	440b      	add	r3, r1
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	4413      	add	r3, r2
 800f34e:	b29a      	uxth	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	801a      	strh	r2, [r3, #0]
    }
    return ERR_NONE;
 800f354:	2300      	movs	r3, #0
}
 800f356:	4618      	mov	r0, r3
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <st25r3916SetBitrate>:
}


/*******************************************************************************/
ReturnCode st25r3916SetBitrate(uint8_t txrate, uint8_t rxrate)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b084      	sub	sp, #16
 800f362:	af00      	add	r7, sp, #0
 800f364:	4603      	mov	r3, r0
 800f366:	460a      	mov	r2, r1
 800f368:	71fb      	strb	r3, [r7, #7]
 800f36a:	4613      	mov	r3, r2
 800f36c:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 800f36e:	f107 030f 	add.w	r3, r7, #15
 800f372:	4619      	mov	r1, r3
 800f374:	2004      	movs	r0, #4
 800f376:	f000 fae9 	bl	800f94c <st25r3916ReadRegister>
    if( rxrate != ST25R3916_BR_DO_NOT_SET )
 800f37a:	79bb      	ldrb	r3, [r7, #6]
 800f37c:	2bff      	cmp	r3, #255	; 0xff
 800f37e:	d00e      	beq.n	800f39e <st25r3916SetBitrate+0x40>
    {
        if(rxrate > ST25R3916_BR_848)
 800f380:	79bb      	ldrb	r3, [r7, #6]
 800f382:	2b03      	cmp	r3, #3
 800f384:	d901      	bls.n	800f38a <st25r3916SetBitrate+0x2c>
        {
            return ERR_PARAM;
 800f386:	2307      	movs	r3, #7
 800f388:	e025      	b.n	800f3d6 <st25r3916SetBitrate+0x78>
        }

        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_rxrate_mask);     /* MISRA 10.3 */
 800f38a:	7bfb      	ldrb	r3, [r7, #15]
 800f38c:	f023 030f 	bic.w	r3, r3, #15
 800f390:	b2db      	uxtb	r3, r3
 800f392:	73fb      	strb	r3, [r7, #15]
        reg |= rxrate << ST25R3916_REG_BIT_RATE_rxrate_shift;
 800f394:	7bfa      	ldrb	r2, [r7, #15]
 800f396:	79bb      	ldrb	r3, [r7, #6]
 800f398:	4313      	orrs	r3, r2
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	73fb      	strb	r3, [r7, #15]
    }
    if( txrate != ST25R3916_BR_DO_NOT_SET )
 800f39e:	79fb      	ldrb	r3, [r7, #7]
 800f3a0:	2bff      	cmp	r3, #255	; 0xff
 800f3a2:	d012      	beq.n	800f3ca <st25r3916SetBitrate+0x6c>
    {
        if(txrate > ST25R3916_BR_6780)
 800f3a4:	79fb      	ldrb	r3, [r7, #7]
 800f3a6:	2b07      	cmp	r3, #7
 800f3a8:	d901      	bls.n	800f3ae <st25r3916SetBitrate+0x50>
        {
            return ERR_PARAM;
 800f3aa:	2307      	movs	r3, #7
 800f3ac:	e013      	b.n	800f3d6 <st25r3916SetBitrate+0x78>
        }
        
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 800f3ae:	7bfb      	ldrb	r3, [r7, #15]
 800f3b0:	f003 030f 	and.w	r3, r3, #15
 800f3b4:	b2db      	uxtb	r3, r3
 800f3b6:	73fb      	strb	r3, [r7, #15]
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 800f3b8:	79fb      	ldrb	r3, [r7, #7]
 800f3ba:	011b      	lsls	r3, r3, #4
 800f3bc:	b25a      	sxtb	r2, r3
 800f3be:	7bfb      	ldrb	r3, [r7, #15]
 800f3c0:	b25b      	sxtb	r3, r3
 800f3c2:	4313      	orrs	r3, r2
 800f3c4:	b25b      	sxtb	r3, r3
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	73fb      	strb	r3, [r7, #15]

    }
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );    
 800f3ca:	7bfb      	ldrb	r3, [r7, #15]
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	2004      	movs	r0, #4
 800f3d0:	f000 fafa 	bl	800f9c8 <st25r3916WriteRegister>
 800f3d4:	4603      	mov	r3, r0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
	...

0800f3e0 <st25r3916PerformCollisionAvoidance>:


/*******************************************************************************/
ReturnCode st25r3916PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 800f3e0:	b590      	push	{r4, r7, lr}
 800f3e2:	b085      	sub	sp, #20
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	4608      	mov	r0, r1
 800f3ea:	4611      	mov	r1, r2
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	4623      	mov	r3, r4
 800f3f0:	71fb      	strb	r3, [r7, #7]
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	71bb      	strb	r3, [r7, #6]
 800f3f6:	460b      	mov	r3, r1
 800f3f8:	717b      	strb	r3, [r7, #5]
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	713b      	strb	r3, [r7, #4]
    uint8_t    treMask;
    uint32_t   irqs;
    ReturnCode err;
    
    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 800f3fe:	79fb      	ldrb	r3, [r7, #7]
 800f400:	2bc8      	cmp	r3, #200	; 0xc8
 800f402:	d004      	beq.n	800f40e <st25r3916PerformCollisionAvoidance+0x2e>
 800f404:	79fb      	ldrb	r3, [r7, #7]
 800f406:	2bc9      	cmp	r3, #201	; 0xc9
 800f408:	d001      	beq.n	800f40e <st25r3916PerformCollisionAvoidance+0x2e>
    {
        return ERR_PARAM;
 800f40a:	2307      	movs	r3, #7
 800f40c:	e05d      	b.n	800f4ca <st25r3916PerformCollisionAvoidance+0xea>
    }
    
    err = ERR_INTERNAL;
 800f40e:	230c      	movs	r3, #12
 800f410:	81bb      	strh	r3, [r7, #12]
    
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 800f412:	79bb      	ldrb	r3, [r7, #6]
 800f414:	2bff      	cmp	r3, #255	; 0xff
 800f416:	d102      	bne.n	800f41e <st25r3916PerformCollisionAvoidance+0x3e>
 800f418:	797b      	ldrb	r3, [r7, #5]
 800f41a:	2bff      	cmp	r3, #255	; 0xff
 800f41c:	d01e      	beq.n	800f45c <st25r3916PerformCollisionAvoidance+0x7c>
    {
        treMask = 0;
 800f41e:	2300      	movs	r3, #0
 800f420:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 800f422:	79bb      	ldrb	r3, [r7, #6]
 800f424:	2bff      	cmp	r3, #255	; 0xff
 800f426:	d003      	beq.n	800f430 <st25r3916PerformCollisionAvoidance+0x50>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask;
 800f428:	7bfb      	ldrb	r3, [r7, #15]
 800f42a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800f42e:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 800f430:	797b      	ldrb	r3, [r7, #5]
 800f432:	2bff      	cmp	r3, #255	; 0xff
 800f434:	d003      	beq.n	800f43e <st25r3916PerformCollisionAvoidance+0x5e>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask;
 800f436:	7bfb      	ldrb	r3, [r7, #15]
 800f438:	f043 030f 	orr.w	r3, r3, #15
 800f43c:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
 800f43e:	79bb      	ldrb	r3, [r7, #6]
 800f440:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f444:	b2da      	uxtb	r2, r3
 800f446:	797b      	ldrb	r3, [r7, #5]
 800f448:	f003 030f 	and.w	r3, r3, #15
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	4313      	orrs	r3, r2
 800f450:	b2da      	uxtb	r2, r3
 800f452:	7bfb      	ldrb	r3, [r7, #15]
 800f454:	4619      	mov	r1, r3
 800f456:	202a      	movs	r0, #42	; 0x2a
 800f458:	f000 fc04 	bl	800fc64 <st25r3916ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, nTRFW );
 800f45c:	793b      	ldrb	r3, [r7, #4]
 800f45e:	461a      	mov	r2, r3
 800f460:	2103      	movs	r1, #3
 800f462:	200a      	movs	r0, #10
 800f464:	f000 fbfe 	bl	800fc64 <st25r3916ChangeRegisterBits>
        
    /*******************************************************************************/
    /* Enable and clear CA specific interrupts and execute command */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800f468:	481a      	ldr	r0, [pc, #104]	; (800f4d4 <st25r3916PerformCollisionAvoidance+0xf4>)
 800f46a:	f000 fe09 	bl	8010080 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800f46e:	4819      	ldr	r0, [pc, #100]	; (800f4d4 <st25r3916PerformCollisionAvoidance+0xf4>)
 800f470:	f000 fe3e 	bl	80100f0 <st25r3916EnableInterrupts>
    
    st25r3916ExecuteCommand( FieldONCmd );
 800f474:	79fb      	ldrb	r3, [r7, #7]
 800f476:	4618      	mov	r0, r3
 800f478:	f000 fb2f 	bl	800fada <st25r3916ExecuteCommand>
    
    /*******************************************************************************/
    /* Wait for initial APON interrupt, indicating anticollision avoidance done and ST25R3916's 
     * field is now on, or a CAC indicating a collision */   
    irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_APON ), ST25R3916_TOUT_CA );    
 800f47c:	210a      	movs	r1, #10
 800f47e:	4816      	ldr	r0, [pc, #88]	; (800f4d8 <st25r3916PerformCollisionAvoidance+0xf8>)
 800f480:	f000 fdae 	bl	800ffe0 <st25r3916WaitForInterruptsTimed>
 800f484:	60b8      	str	r0, [r7, #8]
   
    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d002      	beq.n	800f496 <st25r3916PerformCollisionAvoidance+0xb6>
    {        
        err = ERR_RF_COLLISION;
 800f490:	231d      	movs	r3, #29
 800f492:	81bb      	strh	r3, [r7, #12]
 800f494:	e011      	b.n	800f4ba <st25r3916PerformCollisionAvoidance+0xda>
    }
    else if( (ST25R3916_IRQ_MASK_APON & irqs) != 0U )
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d00c      	beq.n	800f4ba <st25r3916PerformCollisionAvoidance+0xda>
    {
        /* After APON wait for CAT interrupt, indication field was switched on minimum guard time has been fulfilled */            
        irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAT ), ST25R3916_TOUT_CA );        
 800f4a0:	210a      	movs	r1, #10
 800f4a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f4a6:	f000 fd9b 	bl	800ffe0 <st25r3916WaitForInterruptsTimed>
 800f4aa:	60b8      	str	r0, [r7, #8]
                
        if( (ST25R3916_IRQ_MASK_CAT & irqs) != 0U )                             /* No Collision detected, Field On */
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d001      	beq.n	800f4ba <st25r3916PerformCollisionAvoidance+0xda>
        {
            err = ERR_NONE;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	81bb      	strh	r3, [r7, #12]
    {
        /* MISRA 15.7 - Empty else */
    }

    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_EON) );
 800f4ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800f4be:	f000 fddf 	bl	8010080 <st25r3916GetInterrupt>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800f4c2:	4804      	ldr	r0, [pc, #16]	; (800f4d4 <st25r3916PerformCollisionAvoidance+0xf4>)
 800f4c4:	f000 fe20 	bl	8010108 <st25r3916DisableInterrupts>
    
    return err;
 800f4c8:	89bb      	ldrh	r3, [r7, #12]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3714      	adds	r7, #20
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd90      	pop	{r4, r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	20000600 	.word	0x20000600
 800f4d8:	20000400 	.word	0x20000400

0800f4dc <st25r3916SetNumTxBits>:


/*******************************************************************************/
void st25r3916SetNumTxBits( uint16_t nBits )
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xFFU) );
 800f4e6:	88fb      	ldrh	r3, [r7, #6]
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	2023      	movs	r0, #35	; 0x23
 800f4ee:	f000 fa6b 	bl	800f9c8 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xFFU) );
 800f4f2:	88fb      	ldrh	r3, [r7, #6]
 800f4f4:	0a1b      	lsrs	r3, r3, #8
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	b2db      	uxtb	r3, r3
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	2022      	movs	r0, #34	; 0x22
 800f4fe:	f000 fa63 	bl	800f9c8 <st25r3916WriteRegister>
}
 800f502:	bf00      	nop
 800f504:	3708      	adds	r7, #8
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
	...

0800f50c <st25r3916SetNoResponseTime>:
}


/*******************************************************************************/
ReturnCode st25r3916SetNoResponseTime( uint32_t nrt_64fcs )
{    
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
    ReturnCode err;
    uint8_t    nrt_step;    
    uint32_t   tmpNRT;

    tmpNRT = nrt_64fcs;       /* MISRA 17.8 */
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	60bb      	str	r3, [r7, #8]
    err    = ERR_NONE;
 800f518:	2300      	movs	r3, #0
 800f51a:	81fb      	strh	r3, [r7, #14]
    
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 800f51c:	4a19      	ldr	r2, [pc, #100]	; (800f584 <st25r3916SetNoResponseTime+0x78>)
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	6013      	str	r3, [r2, #0]
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
 800f522:	2300      	movs	r3, #0
 800f524:	737b      	strb	r3, [r7, #13]
    
    
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f52c:	d312      	bcc.n	800f554 <st25r3916SetNoResponseTime+0x48>
    {
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
 800f52e:	2301      	movs	r3, #1
 800f530:	737b      	strb	r3, [r7, #13]
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	333f      	adds	r3, #63	; 0x3f
 800f536:	099b      	lsrs	r3, r3, #6
 800f538:	60bb      	str	r3, [r7, #8]
        
        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f540:	d304      	bcc.n	800f54c <st25r3916SetNoResponseTime+0x40>
        {
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
 800f542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f546:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;                                           /* Signal parameter error                              */
 800f548:	2307      	movs	r3, #7
 800f54a:	81fb      	strh	r3, [r7, #14]
        }
        gST25R3916NRT_64fcs = (64U * tmpNRT);
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	019b      	lsls	r3, r3, #6
 800f550:	4a0c      	ldr	r2, [pc, #48]	; (800f584 <st25r3916SetNoResponseTime+0x78>)
 800f552:	6013      	str	r3, [r2, #0]
    }

    /* Set the ST25R3916 NRT step units and the value */
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 800f554:	7b7b      	ldrb	r3, [r7, #13]
 800f556:	461a      	mov	r2, r3
 800f558:	2101      	movs	r1, #1
 800f55a:	2012      	movs	r0, #18
 800f55c:	f000 fb82 	bl	800fc64 <st25r3916ChangeRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER1, (uint8_t)(tmpNRT >> 8U) );
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	0a1b      	lsrs	r3, r3, #8
 800f564:	b2db      	uxtb	r3, r3
 800f566:	4619      	mov	r1, r3
 800f568:	2010      	movs	r0, #16
 800f56a:	f000 fa2d 	bl	800f9c8 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER2, (uint8_t)(tmpNRT & 0xFFU) );
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	b2db      	uxtb	r3, r3
 800f572:	4619      	mov	r1, r3
 800f574:	2011      	movs	r0, #17
 800f576:	f000 fa27 	bl	800f9c8 <st25r3916WriteRegister>

    return err;
 800f57a:	89fb      	ldrh	r3, [r7, #14]
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3710      	adds	r7, #16
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	200009d0 	.word	0x200009d0

0800f588 <st25r3916SetGPTime>:
}


/*******************************************************************************/
void st25r3916SetGPTime( uint16_t gpt_8fcs )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	4603      	mov	r3, r0
 800f590:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_GPT1, (uint8_t)(gpt_8fcs >> 8) );
 800f592:	88fb      	ldrh	r3, [r7, #6]
 800f594:	0a1b      	lsrs	r3, r3, #8
 800f596:	b29b      	uxth	r3, r3
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	4619      	mov	r1, r3
 800f59c:	2013      	movs	r0, #19
 800f59e:	f000 fa13 	bl	800f9c8 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_GPT2, (uint8_t)(gpt_8fcs & 0xFFU) );
 800f5a2:	88fb      	ldrh	r3, [r7, #6]
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	2014      	movs	r0, #20
 800f5aa:	f000 fa0d 	bl	800f9c8 <st25r3916WriteRegister>
}
 800f5ae:	bf00      	nop
 800f5b0:	3708      	adds	r7, #8
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}

0800f5b6 <st25r3916SetStartGPTimer>:


/*******************************************************************************/
ReturnCode st25r3916SetStartGPTimer( uint16_t gpt_8fcs, uint8_t trigger_source )
{
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b082      	sub	sp, #8
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	4603      	mov	r3, r0
 800f5be:	460a      	mov	r2, r1
 800f5c0:	80fb      	strh	r3, [r7, #6]
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	717b      	strb	r3, [r7, #5]
    st25r3916SetGPTime( gpt_8fcs );
 800f5c6:	88fb      	ldrh	r3, [r7, #6]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7ff ffdd 	bl	800f588 <st25r3916SetGPTime>
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, trigger_source );
 800f5ce:	797b      	ldrb	r3, [r7, #5]
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	21e0      	movs	r1, #224	; 0xe0
 800f5d4:	2012      	movs	r0, #18
 800f5d6:	f000 fb45 	bl	800fc64 <st25r3916ChangeRegisterBits>
    
    /* If there's no trigger source, start GPT immediately */
    if( trigger_source == ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger )
 800f5da:	797b      	ldrb	r3, [r7, #5]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d102      	bne.n	800f5e6 <st25r3916SetStartGPTimer+0x30>
    {
        st25r3916ExecuteCommand( ST25R3916_CMD_START_GP_TIMER );
 800f5e0:	20e0      	movs	r0, #224	; 0xe0
 800f5e2:	f000 fa7a 	bl	800fada <st25r3916ExecuteCommand>
    }

    return ERR_NONE;
 800f5e6:	2300      	movs	r3, #0
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3708      	adds	r7, #8
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <st25r3916CheckChipID>:


/*******************************************************************************/
bool st25r3916CheckChipID( uint8_t *rev )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 800f5fc:	f107 030f 	add.w	r3, r7, #15
 800f600:	4619      	mov	r1, r3
 800f602:	203f      	movs	r0, #63	; 0x3f
 800f604:	f000 f9a2 	bl	800f94c <st25r3916ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3916's IC type code */
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 800f608:	7bfb      	ldrb	r3, [r7, #15]
 800f60a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800f60e:	2b28      	cmp	r3, #40	; 0x28
 800f610:	d001      	beq.n	800f616 <st25r3916CheckChipID+0x26>
    {
        return false;
 800f612:	2300      	movs	r3, #0
 800f614:	e009      	b.n	800f62a <st25r3916CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d005      	beq.n	800f628 <st25r3916CheckChipID+0x38>
    {
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
 800f61c:	7bfb      	ldrb	r3, [r7, #15]
 800f61e:	f003 0307 	and.w	r3, r3, #7
 800f622:	b2da      	uxtb	r2, r3
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 800f628:	2301      	movs	r3, #1
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3710      	adds	r7, #16
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <st25r3916StreamConfigure>:
}


/*******************************************************************************/
ReturnCode st25r3916StreamConfigure(const struct st25r3916StreamConfig *config)
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b084      	sub	sp, #16
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
    uint8_t smd;
    uint8_t mode;

    smd = 0;
 800f63a:	2300      	movs	r3, #0
 800f63c:	73fb      	strb	r3, [r7, #15]
    
    if( config->useBPSK != 0U )
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d016      	beq.n	800f674 <st25r3916StreamConfigure+0x42>
    {
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
 800f646:	2378      	movs	r3, #120	; 0x78
 800f648:	73bb      	strb	r3, [r7, #14]
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	785b      	ldrb	r3, [r3, #1]
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d903      	bls.n	800f65a <st25r3916StreamConfigure+0x28>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	785b      	ldrb	r3, [r3, #1]
 800f656:	2b04      	cmp	r3, #4
 800f658:	d901      	bls.n	800f65e <st25r3916StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 800f65a:	2307      	movs	r3, #7
 800f65c:	e053      	b.n	800f706 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	785b      	ldrb	r3, [r3, #1]
 800f662:	f1c3 0304 	rsb	r3, r3, #4
 800f666:	b2db      	uxtb	r3, r3
 800f668:	015b      	lsls	r3, r3, #5
 800f66a:	b2da      	uxtb	r2, r3
 800f66c:	7bfb      	ldrb	r3, [r7, #15]
 800f66e:	4313      	orrs	r3, r2
 800f670:	73fb      	strb	r3, [r7, #15]
 800f672:	e01b      	b.n	800f6ac <st25r3916StreamConfigure+0x7a>
    }
    else
    {
        mode = ST25R3916_REG_MODE_om_subcarrier_stream;
 800f674:	2370      	movs	r3, #112	; 0x70
 800f676:	73bb      	strb	r3, [r7, #14]
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	785b      	ldrb	r3, [r3, #1]
 800f67c:	2b02      	cmp	r3, #2
 800f67e:	d903      	bls.n	800f688 <st25r3916StreamConfigure+0x56>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	785b      	ldrb	r3, [r3, #1]
 800f684:	2b06      	cmp	r3, #6
 800f686:	d901      	bls.n	800f68c <st25r3916StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 800f688:	2307      	movs	r3, #7
 800f68a:	e03c      	b.n	800f706 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	785b      	ldrb	r3, [r3, #1]
 800f690:	f1c3 0306 	rsb	r3, r3, #6
 800f694:	b2db      	uxtb	r3, r3
 800f696:	015b      	lsls	r3, r3, #5
 800f698:	b2da      	uxtb	r2, r3
 800f69a:	7bfb      	ldrb	r3, [r7, #15]
 800f69c:	4313      	orrs	r3, r2
 800f69e:	73fb      	strb	r3, [r7, #15]
        if( config->report_period_length == 0U )
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	78db      	ldrb	r3, [r3, #3]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d101      	bne.n	800f6ac <st25r3916StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 800f6a8:	2307      	movs	r3, #7
 800f6aa:	e02c      	b.n	800f706 <st25r3916StreamConfigure+0xd4>
        }
    }

    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	789b      	ldrb	r3, [r3, #2]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d003      	beq.n	800f6bc <st25r3916StreamConfigure+0x8a>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	789b      	ldrb	r3, [r3, #2]
 800f6b8:	2b07      	cmp	r3, #7
 800f6ba:	d901      	bls.n	800f6c0 <st25r3916StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 800f6bc:	2307      	movs	r3, #7
 800f6be:	e022      	b.n	800f706 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	789b      	ldrb	r3, [r3, #2]
 800f6c4:	f1c3 0307 	rsb	r3, r3, #7
 800f6c8:	b2da      	uxtb	r2, r3
 800f6ca:	7bfb      	ldrb	r3, [r7, #15]
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	73fb      	strb	r3, [r7, #15]

    if( config->report_period_length > 3U )
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	78db      	ldrb	r3, [r3, #3]
 800f6d4:	2b03      	cmp	r3, #3
 800f6d6:	d901      	bls.n	800f6dc <st25r3916StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 800f6d8:	2307      	movs	r3, #7
 800f6da:	e014      	b.n	800f706 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	78db      	ldrb	r3, [r3, #3]
 800f6e0:	00db      	lsls	r3, r3, #3
 800f6e2:	b25a      	sxtb	r2, r3
 800f6e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	b25b      	sxtb	r3, r3
 800f6ec:	73fb      	strb	r3, [r7, #15]

    st25r3916WriteRegister(ST25R3916_REG_STREAM_MODE, smd);
 800f6ee:	7bfb      	ldrb	r3, [r7, #15]
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	2009      	movs	r0, #9
 800f6f4:	f000 f968 	bl	800f9c8 <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_mask, mode);
 800f6f8:	7bbb      	ldrb	r3, [r7, #14]
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	2178      	movs	r1, #120	; 0x78
 800f6fe:	2003      	movs	r0, #3
 800f700:	f000 fab0 	bl	800fc64 <st25r3916ChangeRegisterBits>

    return ERR_NONE;
 800f704:	2300      	movs	r3, #0
}
 800f706:	4618      	mov	r0, r3
 800f708:	3710      	adds	r7, #16
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
	...

0800f710 <__NVIC_EnableIRQ>:
{
 800f710:	b480      	push	{r7}
 800f712:	b083      	sub	sp, #12
 800f714:	af00      	add	r7, sp, #0
 800f716:	4603      	mov	r3, r0
 800f718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f71a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	db0b      	blt.n	800f73a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f722:	79fb      	ldrb	r3, [r7, #7]
 800f724:	f003 021f 	and.w	r2, r3, #31
 800f728:	4907      	ldr	r1, [pc, #28]	; (800f748 <__NVIC_EnableIRQ+0x38>)
 800f72a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f72e:	095b      	lsrs	r3, r3, #5
 800f730:	2001      	movs	r0, #1
 800f732:	fa00 f202 	lsl.w	r2, r0, r2
 800f736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f73a:	bf00      	nop
 800f73c:	370c      	adds	r7, #12
 800f73e:	46bd      	mov	sp, r7
 800f740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop
 800f748:	e000e100 	.word	0xe000e100

0800f74c <__NVIC_DisableIRQ>:
{
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
 800f752:	4603      	mov	r3, r0
 800f754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	db10      	blt.n	800f780 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f75e:	79fb      	ldrb	r3, [r7, #7]
 800f760:	f003 021f 	and.w	r2, r3, #31
 800f764:	4909      	ldr	r1, [pc, #36]	; (800f78c <__NVIC_DisableIRQ+0x40>)
 800f766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f76a:	095b      	lsrs	r3, r3, #5
 800f76c:	2001      	movs	r0, #1
 800f76e:	fa00 f202 	lsl.w	r2, r0, r2
 800f772:	3320      	adds	r3, #32
 800f774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800f778:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f77c:	f3bf 8f6f 	isb	sy
}
 800f780:	bf00      	nop
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr
 800f78c:	e000e100 	.word	0xe000e100

0800f790 <st25r3916comStart>:
 ******************************************************************************
 * LOCAL FUNCTION
 ******************************************************************************
 */
static void st25r3916comStart( void )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	af00      	add	r7, sp, #0
    /* Make this operation atomic, disabling ST25R3916 interrupt during communications*/
    platformProtectST25R391xComm();
 800f794:	4b0b      	ldr	r3, [pc, #44]	; (800f7c4 <st25r3916comStart+0x34>)
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	3301      	adds	r3, #1
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	4b09      	ldr	r3, [pc, #36]	; (800f7c4 <st25r3916comStart+0x34>)
 800f79e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800f7a0:	f3bf 8f4f 	dsb	sy
 800f7a4:	200a      	movs	r0, #10
 800f7a6:	f7ff ffd1 	bl	800f74c <__NVIC_DisableIRQ>
 800f7aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f7ae:	f3bf 8f6f 	isb	sy
    /* I2C Start and send Slave Address */
    st25r3916I2CStart();
    st25r3916I2CSlaveAddrWR( ST25R3916_I2C_ADDR );
#else
    /* Perform the chip select */
    platformSpiSelect();
 800f7b2:	2110      	movs	r1, #16
 800f7b4:	4804      	ldr	r0, [pc, #16]	; (800f7c8 <st25r3916comStart+0x38>)
 800f7b6:	f7f4 fbad 	bl	8003f14 <spiSelect>
    
    #if defined(ST25R391X_COM_SINGLETXRX)
        comBufIt = 0;                                  /* reset local buffer position   */
 800f7ba:	4b04      	ldr	r3, [pc, #16]	; (800f7cc <st25r3916comStart+0x3c>)
 800f7bc:	2200      	movs	r2, #0
 800f7be:	801a      	strh	r2, [r3, #0]
    #endif /* ST25R391X_COM_SINGLETXRX */
    
#endif /* RFAL_USE_I2C */
    
}
 800f7c0:	bf00      	nop
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	20000f6d 	.word	0x20000f6d
 800f7c8:	40020000 	.word	0x40020000
 800f7cc:	20000bd6 	.word	0x20000bd6

0800f7d0 <st25r3916comStop>:


/*******************************************************************************/
static void st25r3916comStop( void )
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	af00      	add	r7, sp, #0
#ifdef RFAL_USE_I2C
    /* Generate Stop signal */
    st25r3916I2CStop();
#else
    /* Release the chip select */
    platformSpiDeselect();
 800f7d4:	2110      	movs	r1, #16
 800f7d6:	4809      	ldr	r0, [pc, #36]	; (800f7fc <st25r3916comStop+0x2c>)
 800f7d8:	f7f4 fbac 	bl	8003f34 <spiDeselect>
#endif /* RFAL_USE_I2C */
    
    /* reEnable the ST25R3916 interrupt */
    platformUnprotectST25R391xComm();
 800f7dc:	4b08      	ldr	r3, [pc, #32]	; (800f800 <st25r3916comStop+0x30>)
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	3b01      	subs	r3, #1
 800f7e2:	b2da      	uxtb	r2, r3
 800f7e4:	4b06      	ldr	r3, [pc, #24]	; (800f800 <st25r3916comStop+0x30>)
 800f7e6:	701a      	strb	r2, [r3, #0]
 800f7e8:	4b05      	ldr	r3, [pc, #20]	; (800f800 <st25r3916comStop+0x30>)
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d102      	bne.n	800f7f6 <st25r3916comStop+0x26>
 800f7f0:	200a      	movs	r0, #10
 800f7f2:	f7ff ff8d 	bl	800f710 <__NVIC_EnableIRQ>
}
 800f7f6:	bf00      	nop
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	40020000 	.word	0x40020000
 800f800:	20000f6d 	.word	0x20000f6d

0800f804 <st25r3916comTx>:
#endif /* RFAL_USE_I2C */


/*******************************************************************************/
static void st25r3916comTx( const uint8_t* txBuf, uint16_t txLen, bool last, bool txOnly )
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	4608      	mov	r0, r1
 800f80e:	4611      	mov	r1, r2
 800f810:	461a      	mov	r2, r3
 800f812:	4603      	mov	r3, r0
 800f814:	807b      	strh	r3, [r7, #2]
 800f816:	460b      	mov	r3, r1
 800f818:	707b      	strb	r3, [r7, #1]
 800f81a:	4613      	mov	r3, r2
 800f81c:	703b      	strb	r3, [r7, #0]
    NO_WARNING(last);
    NO_WARNING(txOnly);
    
    if( txLen > 0U )
 800f81e:	887b      	ldrh	r3, [r7, #2]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d02e      	beq.n	800f882 <st25r3916comTx+0x7e>
        platformI2CTx( txBuf, txLen, last, txOnly );
#else /* RFAL_USE_I2C */
    
        #ifdef ST25R391X_COM_SINGLETXRX
            
            ST_MEMCPY( &comBuf[comBufIt], txBuf, MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy tx data to local buffer                      */
 800f824:	4b19      	ldr	r3, [pc, #100]	; (800f88c <st25r3916comTx+0x88>)
 800f826:	881b      	ldrh	r3, [r3, #0]
 800f828:	461a      	mov	r2, r3
 800f82a:	4b19      	ldr	r3, [pc, #100]	; (800f890 <st25r3916comTx+0x8c>)
 800f82c:	18d0      	adds	r0, r2, r3
 800f82e:	4b17      	ldr	r3, [pc, #92]	; (800f88c <st25r3916comTx+0x88>)
 800f830:	881b      	ldrh	r3, [r3, #0]
 800f832:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f836:	3301      	adds	r3, #1
 800f838:	887a      	ldrh	r2, [r7, #2]
 800f83a:	4293      	cmp	r3, r2
 800f83c:	bf28      	it	cs
 800f83e:	4613      	movcs	r3, r2
 800f840:	461a      	mov	r2, r3
 800f842:	6879      	ldr	r1, [r7, #4]
 800f844:	f006 fb15 	bl	8015e72 <memcpy>
            comBufIt += MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) );                               /* store position on local buffer                    */
 800f848:	4b10      	ldr	r3, [pc, #64]	; (800f88c <st25r3916comTx+0x88>)
 800f84a:	881b      	ldrh	r3, [r3, #0]
 800f84c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f850:	3301      	adds	r3, #1
 800f852:	887a      	ldrh	r2, [r7, #2]
 800f854:	4293      	cmp	r3, r2
 800f856:	bf28      	it	cs
 800f858:	4613      	movcs	r3, r2
 800f85a:	b29a      	uxth	r2, r3
 800f85c:	4b0b      	ldr	r3, [pc, #44]	; (800f88c <st25r3916comTx+0x88>)
 800f85e:	881b      	ldrh	r3, [r3, #0]
 800f860:	4413      	add	r3, r2
 800f862:	b29a      	uxth	r2, r3
 800f864:	4b09      	ldr	r3, [pc, #36]	; (800f88c <st25r3916comTx+0x88>)
 800f866:	801a      	strh	r2, [r3, #0]
                
            if( last && txOnly )                                                                 /* only perform SPI transaction if no Rx will follow */
 800f868:	787b      	ldrb	r3, [r7, #1]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d009      	beq.n	800f882 <st25r3916comTx+0x7e>
 800f86e:	783b      	ldrb	r3, [r7, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d006      	beq.n	800f882 <st25r3916comTx+0x7e>
            {
                platformSpiTxRx( comBuf, NULL, comBufIt );
 800f874:	4b05      	ldr	r3, [pc, #20]	; (800f88c <st25r3916comTx+0x88>)
 800f876:	881b      	ldrh	r3, [r3, #0]
 800f878:	461a      	mov	r2, r3
 800f87a:	2100      	movs	r1, #0
 800f87c:	4804      	ldr	r0, [pc, #16]	; (800f890 <st25r3916comTx+0x8c>)
 800f87e:	f7f4 fb69 	bl	8003f54 <spiTxRx>
            platformSpiTxRx( txBuf, NULL, txLen );
        #endif /* ST25R391X_COM_SINGLETXRX */
            
#endif /* RFAL_USE_I2C */
    }
}
 800f882:	bf00      	nop
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	20000bd6 	.word	0x20000bd6
 800f890:	200009d4 	.word	0x200009d4

0800f894 <st25r3916comRx>:


/*******************************************************************************/
static void st25r3916comRx( uint8_t* rxBuf, uint16_t rxLen )
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	460b      	mov	r3, r1
 800f89e:	807b      	strh	r3, [r7, #2]
    if( rxLen > 0U )
 800f8a0:	887b      	ldrh	r3, [r7, #2]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d034      	beq.n	800f910 <st25r3916comRx+0x7c>
#ifdef RFAL_USE_I2C
        platformI2CRx( rxBuf, rxLen );
#else /* RFAL_USE_I2C */
        
    #ifdef ST25R391X_COM_SINGLETXRX
        ST_MEMSET( &comBuf[comBufIt], 0x00, MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );     /* clear outgoing buffer                                  */
 800f8a6:	4b1c      	ldr	r3, [pc, #112]	; (800f918 <st25r3916comRx+0x84>)
 800f8a8:	881b      	ldrh	r3, [r3, #0]
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	4b1b      	ldr	r3, [pc, #108]	; (800f91c <st25r3916comRx+0x88>)
 800f8ae:	18d0      	adds	r0, r2, r3
 800f8b0:	4b19      	ldr	r3, [pc, #100]	; (800f918 <st25r3916comRx+0x84>)
 800f8b2:	881b      	ldrh	r3, [r3, #0]
 800f8b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	887a      	ldrh	r2, [r7, #2]
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	bf28      	it	cs
 800f8c0:	4613      	movcs	r3, r2
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	f006 fadf 	bl	8015e88 <memset>
        platformSpiTxRx( comBuf, comBuf, MIN( (comBufIt + rxLen), ST25R3916_BUF_LEN ) );        /* transceive as a single SPI call                        */
 800f8ca:	4b13      	ldr	r3, [pc, #76]	; (800f918 <st25r3916comRx+0x84>)
 800f8cc:	881b      	ldrh	r3, [r3, #0]
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	887b      	ldrh	r3, [r7, #2]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	f240 2301 	movw	r3, #513	; 0x201
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	bf28      	it	cs
 800f8de:	4613      	movcs	r3, r2
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	490d      	ldr	r1, [pc, #52]	; (800f91c <st25r3916comRx+0x88>)
 800f8e6:	480d      	ldr	r0, [pc, #52]	; (800f91c <st25r3916comRx+0x88>)
 800f8e8:	f7f4 fb34 	bl	8003f54 <spiTxRx>
        ST_MEMCPY( rxBuf, &comBuf[comBufIt], MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy from local buf to output buffer and skip cmd byte */
 800f8ec:	4b0a      	ldr	r3, [pc, #40]	; (800f918 <st25r3916comRx+0x84>)
 800f8ee:	881b      	ldrh	r3, [r3, #0]
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	4b0a      	ldr	r3, [pc, #40]	; (800f91c <st25r3916comRx+0x88>)
 800f8f4:	18d1      	adds	r1, r2, r3
 800f8f6:	4b08      	ldr	r3, [pc, #32]	; (800f918 <st25r3916comRx+0x84>)
 800f8f8:	881b      	ldrh	r3, [r3, #0]
 800f8fa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f8fe:	3301      	adds	r3, #1
 800f900:	887a      	ldrh	r2, [r7, #2]
 800f902:	4293      	cmp	r3, r2
 800f904:	bf28      	it	cs
 800f906:	4613      	movcs	r3, r2
 800f908:	461a      	mov	r2, r3
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f006 fab1 	bl	8015e72 <memcpy>
    #else
        platformSpiTxRx( NULL, rxBuf, rxLen );
    #endif /* ST25R391X_COM_SINGLETXRX */
#endif /* RFAL_USE_I2C */
    }
}
 800f910:	bf00      	nop
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}
 800f918:	20000bd6 	.word	0x20000bd6
 800f91c:	200009d4 	.word	0x200009d4

0800f920 <st25r3916comTxByte>:


/*******************************************************************************/
static void st25r3916comTxByte( uint8_t txByte, bool last, bool txOnly )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	4603      	mov	r3, r0
 800f928:	71fb      	strb	r3, [r7, #7]
 800f92a:	460b      	mov	r3, r1
 800f92c:	71bb      	strb	r3, [r7, #6]
 800f92e:	4613      	mov	r3, r2
 800f930:	717b      	strb	r3, [r7, #5]
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 800f932:	79fb      	ldrb	r3, [r7, #7]
 800f934:	73fb      	strb	r3, [r7, #15]
    st25r3916comTx( &val, ST25R3916_REG_LEN, last, txOnly );
 800f936:	797b      	ldrb	r3, [r7, #5]
 800f938:	79ba      	ldrb	r2, [r7, #6]
 800f93a:	f107 000f 	add.w	r0, r7, #15
 800f93e:	2101      	movs	r1, #1
 800f940:	f7ff ff60 	bl	800f804 <st25r3916comTx>
}
 800f944:	bf00      	nop
 800f946:	3710      	adds	r7, #16
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <st25r3916ReadRegister>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode st25r3916ReadRegister( uint8_t reg, uint8_t* val )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	4603      	mov	r3, r0
 800f954:	6039      	str	r1, [r7, #0]
 800f956:	71fb      	strb	r3, [r7, #7]
    return st25r3916ReadMultipleRegisters( reg, val, ST25R3916_REG_LEN );
 800f958:	79fb      	ldrb	r3, [r7, #7]
 800f95a:	2201      	movs	r2, #1
 800f95c:	6839      	ldr	r1, [r7, #0]
 800f95e:	4618      	mov	r0, r3
 800f960:	f000 f805 	bl	800f96e <st25r3916ReadMultipleRegisters>
 800f964:	4603      	mov	r3, r0
}
 800f966:	4618      	mov	r0, r3
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}

0800f96e <st25r3916ReadMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916ReadMultipleRegisters( uint8_t reg, uint8_t* values, uint8_t length )
{
 800f96e:	b580      	push	{r7, lr}
 800f970:	b082      	sub	sp, #8
 800f972:	af00      	add	r7, sp, #0
 800f974:	4603      	mov	r3, r0
 800f976:	6039      	str	r1, [r7, #0]
 800f978:	71fb      	strb	r3, [r7, #7]
 800f97a:	4613      	mov	r3, r2
 800f97c:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 800f97e:	79bb      	ldrb	r3, [r7, #6]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d01c      	beq.n	800f9be <st25r3916ReadMultipleRegisters+0x50>
    {
        st25r3916comStart();
 800f984:	f7ff ff04 	bl	800f790 <st25r3916comStart>
        
        /* If is a space-B register send a direct command first */
        if( (reg & ST25R3916_SPACE_B) != 0U )
 800f988:	79fb      	ldrb	r3, [r7, #7]
 800f98a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d004      	beq.n	800f99c <st25r3916ReadMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, false );
 800f992:	2200      	movs	r2, #0
 800f994:	2100      	movs	r1, #0
 800f996:	20fb      	movs	r0, #251	; 0xfb
 800f998:	f7ff ffc2 	bl	800f920 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 800f99c:	79fb      	ldrb	r3, [r7, #7]
 800f99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	2101      	movs	r1, #1
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7ff ffb9 	bl	800f920 <st25r3916comTxByte>
        st25r3916comRepeatStart();
        st25r3916comRx( values, length );
 800f9ae:	79bb      	ldrb	r3, [r7, #6]
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	6838      	ldr	r0, [r7, #0]
 800f9b6:	f7ff ff6d 	bl	800f894 <st25r3916comRx>
        st25r3916comStop();
 800f9ba:	f7ff ff09 	bl	800f7d0 <st25r3916comStop>
    }
    
    return ERR_NONE;
 800f9be:	2300      	movs	r3, #0
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <st25r3916WriteRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteRegister( uint8_t reg, uint8_t val )
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	460a      	mov	r2, r1
 800f9d2:	71fb      	strb	r3, [r7, #7]
 800f9d4:	4613      	mov	r3, r2
 800f9d6:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 800f9d8:	79bb      	ldrb	r3, [r7, #6]
 800f9da:	73fb      	strb	r3, [r7, #15]
    return st25r3916WriteMultipleRegisters( reg, &value, ST25R3916_REG_LEN );
 800f9dc:	f107 010f 	add.w	r1, r7, #15
 800f9e0:	79fb      	ldrb	r3, [r7, #7]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f000 f805 	bl	800f9f4 <st25r3916WriteMultipleRegisters>
 800f9ea:	4603      	mov	r3, r0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3710      	adds	r7, #16
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <st25r3916WriteMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916WriteMultipleRegisters( uint8_t reg, const uint8_t* values, uint8_t length )
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	6039      	str	r1, [r7, #0]
 800f9fe:	71fb      	strb	r3, [r7, #7]
 800fa00:	4613      	mov	r3, r2
 800fa02:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 800fa04:	79bb      	ldrb	r3, [r7, #6]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d023      	beq.n	800fa52 <st25r3916WriteMultipleRegisters+0x5e>
    {
        st25r3916comStart();
 800fa0a:	f7ff fec1 	bl	800f790 <st25r3916comStart>
        
        if( (reg & ST25R3916_SPACE_B) != 0U )
 800fa0e:	79fb      	ldrb	r3, [r7, #7]
 800fa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d004      	beq.n	800fa22 <st25r3916WriteMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, true );
 800fa18:	2201      	movs	r2, #1
 800fa1a:	2100      	movs	r1, #0
 800fa1c:	20fb      	movs	r0, #251	; 0xfb
 800fa1e:	f7ff ff7f 	bl	800f920 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_WRITE_MODE), false, true );
 800fa22:	79fb      	ldrb	r3, [r7, #7]
 800fa24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa28:	b2db      	uxtb	r3, r3
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7ff ff76 	bl	800f920 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 800fa34:	79bb      	ldrb	r3, [r7, #6]
 800fa36:	b299      	uxth	r1, r3
 800fa38:	2301      	movs	r3, #1
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	6838      	ldr	r0, [r7, #0]
 800fa3e:	f7ff fee1 	bl	800f804 <st25r3916comTx>
        st25r3916comStop();
 800fa42:	f7ff fec5 	bl	800f7d0 <st25r3916comStop>
        
        /* Send a WriteMultiReg event to LED handling */
        st25r3916ledEvtWrMultiReg( reg, values, length);
 800fa46:	79ba      	ldrb	r2, [r7, #6]
 800fa48:	79fb      	ldrb	r3, [r7, #7]
 800fa4a:	6839      	ldr	r1, [r7, #0]
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f000 fbba 	bl	80101c6 <st25r3916ledEvtWrMultiReg>
    }
    
    return ERR_NONE;
 800fa52:	2300      	movs	r3, #0
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3708      	adds	r7, #8
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <st25r3916WriteFifo>:


/*******************************************************************************/
ReturnCode st25r3916WriteFifo( const uint8_t* values, uint16_t length )
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	460b      	mov	r3, r1
 800fa66:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_FIFO_DEPTH )
 800fa68:	887b      	ldrh	r3, [r7, #2]
 800fa6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa6e:	d901      	bls.n	800fa74 <st25r3916WriteFifo+0x18>
    {
        return ERR_PARAM;
 800fa70:	2307      	movs	r3, #7
 800fa72:	e012      	b.n	800fa9a <st25r3916WriteFifo+0x3e>
    }
    
    if( length > 0U )
 800fa74:	887b      	ldrh	r3, [r7, #2]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00e      	beq.n	800fa98 <st25r3916WriteFifo+0x3c>
    {
        st25r3916comStart();
 800fa7a:	f7ff fe89 	bl	800f790 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_LOAD, false, true );
 800fa7e:	2201      	movs	r2, #1
 800fa80:	2100      	movs	r1, #0
 800fa82:	2080      	movs	r0, #128	; 0x80
 800fa84:	f7ff ff4c 	bl	800f920 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 800fa88:	8879      	ldrh	r1, [r7, #2]
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7ff feb8 	bl	800f804 <st25r3916comTx>
        st25r3916comStop();
 800fa94:	f7ff fe9c 	bl	800f7d0 <st25r3916comStop>
    }

    return ERR_NONE;
 800fa98:	2300      	movs	r3, #0
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3708      	adds	r7, #8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}

0800faa2 <st25r3916ReadFifo>:


/*******************************************************************************/
ReturnCode st25r3916ReadFifo( uint8_t* buf, uint16_t length )
{
 800faa2:	b580      	push	{r7, lr}
 800faa4:	b082      	sub	sp, #8
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
 800faaa:	460b      	mov	r3, r1
 800faac:	807b      	strh	r3, [r7, #2]
    if( length > 0U )
 800faae:	887b      	ldrh	r3, [r7, #2]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d00d      	beq.n	800fad0 <st25r3916ReadFifo+0x2e>
    {
        st25r3916comStart();
 800fab4:	f7ff fe6c 	bl	800f790 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_READ, true, false );
 800fab8:	2200      	movs	r2, #0
 800faba:	2101      	movs	r1, #1
 800fabc:	209f      	movs	r0, #159	; 0x9f
 800fabe:	f7ff ff2f 	bl	800f920 <st25r3916comTxByte>
        
        st25r3916comRepeatStart();
        st25r3916comRx( buf, length );
 800fac2:	887b      	ldrh	r3, [r7, #2]
 800fac4:	4619      	mov	r1, r3
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f7ff fee4 	bl	800f894 <st25r3916comRx>
        st25r3916comStop();
 800facc:	f7ff fe80 	bl	800f7d0 <st25r3916comStop>
    }

    return ERR_NONE;
 800fad0:	2300      	movs	r3, #0
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3708      	adds	r7, #8
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}

0800fada <st25r3916ExecuteCommand>:
}


/*******************************************************************************/
ReturnCode st25r3916ExecuteCommand( uint8_t cmd )
{
 800fada:	b580      	push	{r7, lr}
 800fadc:	b082      	sub	sp, #8
 800fade:	af00      	add	r7, sp, #0
 800fae0:	4603      	mov	r3, r0
 800fae2:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 800fae4:	f7ff fe54 	bl	800f790 <st25r3916comStart>
    st25r3916comTxByte( (cmd | ST25R3916_CMD_MODE ), true, true );
 800fae8:	79fb      	ldrb	r3, [r7, #7]
 800faea:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	2201      	movs	r2, #1
 800faf2:	2101      	movs	r1, #1
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7ff ff13 	bl	800f920 <st25r3916comTxByte>
    st25r3916comStop();
 800fafa:	f7ff fe69 	bl	800f7d0 <st25r3916comStop>
    
    /* Send a cmd event to LED handling */
    st25r3916ledEvtCmd(cmd);
 800fafe:	79fb      	ldrb	r3, [r7, #7]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f000 fb81 	bl	8010208 <st25r3916ledEvtCmd>
    
    return ERR_NONE;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <st25r3916ReadTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916ReadTestRegister( uint8_t reg, uint8_t* val )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	4603      	mov	r3, r0
 800fb18:	6039      	str	r1, [r7, #0]
 800fb1a:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 800fb1c:	f7ff fe38 	bl	800f790 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, false );
 800fb20:	2200      	movs	r2, #0
 800fb22:	2100      	movs	r1, #0
 800fb24:	20fc      	movs	r0, #252	; 0xfc
 800fb26:	f7ff fefb 	bl	800f920 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 800fb2a:	79fb      	ldrb	r3, [r7, #7]
 800fb2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	2200      	movs	r2, #0
 800fb34:	2101      	movs	r1, #1
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7ff fef2 	bl	800f920 <st25r3916comTxByte>
    st25r3916comRepeatStart();
    st25r3916comRx( val, ST25R3916_REG_LEN );
 800fb3c:	2101      	movs	r1, #1
 800fb3e:	6838      	ldr	r0, [r7, #0]
 800fb40:	f7ff fea8 	bl	800f894 <st25r3916comRx>
    st25r3916comStop();
 800fb44:	f7ff fe44 	bl	800f7d0 <st25r3916comStop>
    
    return ERR_NONE;
 800fb48:	2300      	movs	r3, #0
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3708      	adds	r7, #8
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}

0800fb52 <st25r3916WriteTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteTestRegister( uint8_t reg, uint8_t val )
{
 800fb52:	b580      	push	{r7, lr}
 800fb54:	b084      	sub	sp, #16
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	4603      	mov	r3, r0
 800fb5a:	460a      	mov	r2, r1
 800fb5c:	71fb      	strb	r3, [r7, #7]
 800fb5e:	4613      	mov	r3, r2
 800fb60:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 800fb62:	79bb      	ldrb	r3, [r7, #6]
 800fb64:	73fb      	strb	r3, [r7, #15]

    st25r3916comStart();
 800fb66:	f7ff fe13 	bl	800f790 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, true );
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	2100      	movs	r1, #0
 800fb6e:	20fc      	movs	r0, #252	; 0xfc
 800fb70:	f7ff fed6 	bl	800f920 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_WRITE_MODE), false, true );
 800fb74:	79fb      	ldrb	r3, [r7, #7]
 800fb76:	2201      	movs	r2, #1
 800fb78:	2100      	movs	r1, #0
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7ff fed0 	bl	800f920 <st25r3916comTxByte>
    st25r3916comTx( &value, ST25R3916_REG_LEN, true, true );
 800fb80:	f107 000f 	add.w	r0, r7, #15
 800fb84:	2301      	movs	r3, #1
 800fb86:	2201      	movs	r2, #1
 800fb88:	2101      	movs	r1, #1
 800fb8a:	f7ff fe3b 	bl	800f804 <st25r3916comTx>
    st25r3916comStop();
 800fb8e:	f7ff fe1f 	bl	800f7d0 <st25r3916comStop>
    
    return ERR_NONE;
 800fb92:	2300      	movs	r3, #0
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3710      	adds	r7, #16
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <st25r3916ClrRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	4603      	mov	r3, r0
 800fba4:	460a      	mov	r2, r1
 800fba6:	71fb      	strb	r3, [r7, #7]
 800fba8:	4613      	mov	r3, r2
 800fbaa:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 800fbac:	f107 020d 	add.w	r2, r7, #13
 800fbb0:	79fb      	ldrb	r3, [r7, #7]
 800fbb2:	4611      	mov	r1, r2
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7ff fec9 	bl	800f94c <st25r3916ReadRegister>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	81fb      	strh	r3, [r7, #14]
 800fbbe:	89fb      	ldrh	r3, [r7, #14]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d001      	beq.n	800fbc8 <st25r3916ClrRegisterBits+0x2c>
 800fbc4:	89fb      	ldrh	r3, [r7, #14]
 800fbc6:	e01c      	b.n	800fc02 <st25r3916ClrRegisterBits+0x66>
    
    /* Only perform a Write if value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 800fbc8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fbcc:	43db      	mvns	r3, r3
 800fbce:	b25a      	sxtb	r2, r3
 800fbd0:	7b7b      	ldrb	r3, [r7, #13]
 800fbd2:	b25b      	sxtb	r3, r3
 800fbd4:	4013      	ands	r3, r2
 800fbd6:	b25b      	sxtb	r3, r3
 800fbd8:	b2da      	uxtb	r2, r3
 800fbda:	7b7b      	ldrb	r3, [r7, #13]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d101      	bne.n	800fbe4 <st25r3916ClrRegisterBits+0x48>
    {
        return ERR_NONE;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	e00e      	b.n	800fc02 <st25r3916ClrRegisterBits+0x66>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (uint8_t)(rdVal & ~clr_mask) );
 800fbe4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fbe8:	43db      	mvns	r3, r3
 800fbea:	b25a      	sxtb	r2, r3
 800fbec:	7b7b      	ldrb	r3, [r7, #13]
 800fbee:	b25b      	sxtb	r3, r3
 800fbf0:	4013      	ands	r3, r2
 800fbf2:	b25b      	sxtb	r3, r3
 800fbf4:	b2da      	uxtb	r2, r3
 800fbf6:	79fb      	ldrb	r3, [r7, #7]
 800fbf8:	4611      	mov	r1, r2
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7ff fee4 	bl	800f9c8 <st25r3916WriteRegister>
 800fc00:	4603      	mov	r3, r0
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}

0800fc0a <st25r3916SetRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 800fc0a:	b580      	push	{r7, lr}
 800fc0c:	b084      	sub	sp, #16
 800fc0e:	af00      	add	r7, sp, #0
 800fc10:	4603      	mov	r3, r0
 800fc12:	460a      	mov	r2, r1
 800fc14:	71fb      	strb	r3, [r7, #7]
 800fc16:	4613      	mov	r3, r2
 800fc18:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 800fc1a:	f107 020d 	add.w	r2, r7, #13
 800fc1e:	79fb      	ldrb	r3, [r7, #7]
 800fc20:	4611      	mov	r1, r2
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7ff fe92 	bl	800f94c <st25r3916ReadRegister>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	81fb      	strh	r3, [r7, #14]
 800fc2c:	89fb      	ldrh	r3, [r7, #14]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d001      	beq.n	800fc36 <st25r3916SetRegisterBits+0x2c>
 800fc32:	89fb      	ldrh	r3, [r7, #14]
 800fc34:	e012      	b.n	800fc5c <st25r3916SetRegisterBits+0x52>
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 800fc36:	7b7a      	ldrb	r2, [r7, #13]
 800fc38:	79bb      	ldrb	r3, [r7, #6]
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	b2da      	uxtb	r2, r3
 800fc3e:	7b7b      	ldrb	r3, [r7, #13]
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d101      	bne.n	800fc48 <st25r3916SetRegisterBits+0x3e>
    {
        return ERR_NONE;
 800fc44:	2300      	movs	r3, #0
 800fc46:	e009      	b.n	800fc5c <st25r3916SetRegisterBits+0x52>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (rdVal | set_mask) );
 800fc48:	7b7a      	ldrb	r2, [r7, #13]
 800fc4a:	79bb      	ldrb	r3, [r7, #6]
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	b2da      	uxtb	r2, r3
 800fc50:	79fb      	ldrb	r3, [r7, #7]
 800fc52:	4611      	mov	r1, r2
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7ff feb7 	bl	800f9c8 <st25r3916WriteRegister>
 800fc5a:	4603      	mov	r3, r0
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3710      	adds	r7, #16
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <st25r3916ChangeRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	71fb      	strb	r3, [r7, #7]
 800fc6e:	460b      	mov	r3, r1
 800fc70:	71bb      	strb	r3, [r7, #6]
 800fc72:	4613      	mov	r3, r2
 800fc74:	717b      	strb	r3, [r7, #5]
    return st25r3916ModifyRegister(reg, valueMask, (valueMask & value) );
 800fc76:	79ba      	ldrb	r2, [r7, #6]
 800fc78:	797b      	ldrb	r3, [r7, #5]
 800fc7a:	4013      	ands	r3, r2
 800fc7c:	b2da      	uxtb	r2, r3
 800fc7e:	79b9      	ldrb	r1, [r7, #6]
 800fc80:	79fb      	ldrb	r3, [r7, #7]
 800fc82:	4618      	mov	r0, r3
 800fc84:	f000 f805 	bl	800fc92 <st25r3916ModifyRegister>
 800fc88:	4603      	mov	r3, r0
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3708      	adds	r7, #8
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <st25r3916ModifyRegister>:


/*******************************************************************************/
ReturnCode st25r3916ModifyRegister( uint8_t reg, uint8_t clr_mask, uint8_t set_mask )
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b084      	sub	sp, #16
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	4603      	mov	r3, r0
 800fc9a:	71fb      	strb	r3, [r7, #7]
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	71bb      	strb	r3, [r7, #6]
 800fca0:	4613      	mov	r3, r2
 800fca2:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 800fca4:	f107 020c 	add.w	r2, r7, #12
 800fca8:	79fb      	ldrb	r3, [r7, #7]
 800fcaa:	4611      	mov	r1, r2
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7ff fe4d 	bl	800f94c <st25r3916ReadRegister>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	81fb      	strh	r3, [r7, #14]
 800fcb6:	89fb      	ldrh	r3, [r7, #14]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d001      	beq.n	800fcc0 <st25r3916ModifyRegister+0x2e>
 800fcbc:	89fb      	ldrh	r3, [r7, #14]
 800fcbe:	e019      	b.n	800fcf4 <st25r3916ModifyRegister+0x62>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 800fcc0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fcc4:	43db      	mvns	r3, r3
 800fcc6:	b25a      	sxtb	r2, r3
 800fcc8:	7b3b      	ldrb	r3, [r7, #12]
 800fcca:	b25b      	sxtb	r3, r3
 800fccc:	4013      	ands	r3, r2
 800fcce:	b25b      	sxtb	r3, r3
 800fcd0:	737b      	strb	r3, [r7, #13]
    wrVal |= set_mask;
 800fcd2:	7b7a      	ldrb	r2, [r7, #13]
 800fcd4:	797b      	ldrb	r3, [r7, #5]
 800fcd6:	4313      	orrs	r3, r2
 800fcd8:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 800fcda:	7b3b      	ldrb	r3, [r7, #12]
 800fcdc:	7b7a      	ldrb	r2, [r7, #13]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d101      	bne.n	800fce6 <st25r3916ModifyRegister+0x54>
    {
        return ERR_NONE;
 800fce2:	2300      	movs	r3, #0
 800fce4:	e006      	b.n	800fcf4 <st25r3916ModifyRegister+0x62>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, wrVal );
 800fce6:	7b7a      	ldrb	r2, [r7, #13]
 800fce8:	79fb      	ldrb	r3, [r7, #7]
 800fcea:	4611      	mov	r1, r2
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff fe6b 	bl	800f9c8 <st25r3916WriteRegister>
 800fcf2:	4603      	mov	r3, r0
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3710      	adds	r7, #16
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <st25r3916ChangeTestRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b084      	sub	sp, #16
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	4603      	mov	r3, r0
 800fd04:	71fb      	strb	r3, [r7, #7]
 800fd06:	460b      	mov	r3, r1
 800fd08:	71bb      	strb	r3, [r7, #6]
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 800fd0e:	f107 020c 	add.w	r2, r7, #12
 800fd12:	79fb      	ldrb	r3, [r7, #7]
 800fd14:	4611      	mov	r1, r2
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7ff fefa 	bl	800fb10 <st25r3916ReadTestRegister>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	81fb      	strh	r3, [r7, #14]
 800fd20:	89fb      	ldrh	r3, [r7, #14]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d001      	beq.n	800fd2a <st25r3916ChangeTestRegisterBits+0x2e>
 800fd26:	89fb      	ldrh	r3, [r7, #14]
 800fd28:	e01c      	b.n	800fd64 <st25r3916ChangeTestRegisterBits+0x68>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 800fd2a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fd2e:	43db      	mvns	r3, r3
 800fd30:	b25a      	sxtb	r2, r3
 800fd32:	7b3b      	ldrb	r3, [r7, #12]
 800fd34:	b25b      	sxtb	r3, r3
 800fd36:	4013      	ands	r3, r2
 800fd38:	b25b      	sxtb	r3, r3
 800fd3a:	737b      	strb	r3, [r7, #13]
    wrVal |= (uint8_t)(value & valueMask);
 800fd3c:	797a      	ldrb	r2, [r7, #5]
 800fd3e:	79bb      	ldrb	r3, [r7, #6]
 800fd40:	4013      	ands	r3, r2
 800fd42:	b2da      	uxtb	r2, r3
 800fd44:	7b7b      	ldrb	r3, [r7, #13]
 800fd46:	4313      	orrs	r3, r2
 800fd48:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 800fd4a:	7b3b      	ldrb	r3, [r7, #12]
 800fd4c:	7b7a      	ldrb	r2, [r7, #13]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d101      	bne.n	800fd56 <st25r3916ChangeTestRegisterBits+0x5a>
    {
        return ERR_NONE;
 800fd52:	2300      	movs	r3, #0
 800fd54:	e006      	b.n	800fd64 <st25r3916ChangeTestRegisterBits+0x68>
    }
    
    /* Write new reg value */
    return st25r3916WriteTestRegister(reg, wrVal );
 800fd56:	7b7a      	ldrb	r2, [r7, #13]
 800fd58:	79fb      	ldrb	r3, [r7, #7]
 800fd5a:	4611      	mov	r1, r2
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7ff fef8 	bl	800fb52 <st25r3916WriteTestRegister>
 800fd62:	4603      	mov	r3, r0
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3710      	adds	r7, #16
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <st25r3916CheckReg>:


/*******************************************************************************/
bool st25r3916CheckReg( uint8_t reg, uint8_t mask, uint8_t val )
{    
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	4603      	mov	r3, r0
 800fd74:	71fb      	strb	r3, [r7, #7]
 800fd76:	460b      	mov	r3, r1
 800fd78:	71bb      	strb	r3, [r7, #6]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( reg, &regVal );
 800fd82:	f107 020f 	add.w	r2, r7, #15
 800fd86:	79fb      	ldrb	r3, [r7, #7]
 800fd88:	4611      	mov	r1, r2
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7ff fdde 	bl	800f94c <st25r3916ReadRegister>
    
    return ( (regVal & mask) == val );
 800fd90:	7bfa      	ldrb	r2, [r7, #15]
 800fd92:	79bb      	ldrb	r3, [r7, #6]
 800fd94:	4013      	ands	r3, r2
 800fd96:	b2db      	uxtb	r3, r3
 800fd98:	797a      	ldrb	r2, [r7, #5]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	bf0c      	ite	eq
 800fd9e:	2301      	moveq	r3, #1
 800fda0:	2300      	movne	r3, #0
 800fda2:	b2db      	uxtb	r3, r3
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3710      	adds	r7, #16
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <st25r3916IsRegValid>:


/*******************************************************************************/
bool st25r3916IsRegValid( uint8_t reg )
{
 800fdac:	b480      	push	{r7}
 800fdae:	b083      	sub	sp, #12
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	71fb      	strb	r3, [r7, #7]
    if( !(( (int16_t)reg >= (int16_t)ST25R3916_REG_IO_CONF1) && (reg <= (ST25R3916_SPACE_B | ST25R3916_REG_IC_IDENTITY)) ))
 800fdb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	da01      	bge.n	800fdc2 <st25r3916IsRegValid+0x16>
    {
        return false;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	e000      	b.n	800fdc4 <st25r3916IsRegValid+0x18>
    }    
    return true;
 800fdc2:	2301      	movs	r3, #1
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	370c      	adds	r7, #12
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <__NVIC_EnableIRQ>:
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fdda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	db0b      	blt.n	800fdfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fde2:	79fb      	ldrb	r3, [r7, #7]
 800fde4:	f003 021f 	and.w	r2, r3, #31
 800fde8:	4907      	ldr	r1, [pc, #28]	; (800fe08 <__NVIC_EnableIRQ+0x38>)
 800fdea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fdee:	095b      	lsrs	r3, r3, #5
 800fdf0:	2001      	movs	r0, #1
 800fdf2:	fa00 f202 	lsl.w	r2, r0, r2
 800fdf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800fdfa:	bf00      	nop
 800fdfc:	370c      	adds	r7, #12
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	e000e100 	.word	0xe000e100

0800fe0c <__NVIC_DisableIRQ>:
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	4603      	mov	r3, r0
 800fe14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fe16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	db10      	blt.n	800fe40 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fe1e:	79fb      	ldrb	r3, [r7, #7]
 800fe20:	f003 021f 	and.w	r2, r3, #31
 800fe24:	4909      	ldr	r1, [pc, #36]	; (800fe4c <__NVIC_DisableIRQ+0x40>)
 800fe26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe2a:	095b      	lsrs	r3, r3, #5
 800fe2c:	2001      	movs	r0, #1
 800fe2e:	fa00 f202 	lsl.w	r2, r0, r2
 800fe32:	3320      	adds	r3, #32
 800fe34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800fe38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800fe3c:	f3bf 8f6f 	isb	sy
}
 800fe40:	bf00      	nop
 800fe42:	370c      	adds	r7, #12
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr
 800fe4c:	e000e100 	.word	0xe000e100

0800fe50 <st25r3916InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3916InitInterrupts( void )
{
 800fe50:	b480      	push	{r7}
 800fe52:	af00      	add	r7, sp, #0
    platformIrqST25R3916PinInitialize();
    platformIrqST25R3916SetCallback( st25r3916Isr );
    
    
    st25r3916interrupt.callback     = NULL;
 800fe54:	4b08      	ldr	r3, [pc, #32]	; (800fe78 <st25r3916InitInterrupts+0x28>)
 800fe56:	2200      	movs	r2, #0
 800fe58:	605a      	str	r2, [r3, #4]
    st25r3916interrupt.prevCallback = NULL;
 800fe5a:	4b07      	ldr	r3, [pc, #28]	; (800fe78 <st25r3916InitInterrupts+0x28>)
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	601a      	str	r2, [r3, #0]
    st25r3916interrupt.status       = ST25R3916_IRQ_MASK_NONE;
 800fe60:	4b05      	ldr	r3, [pc, #20]	; (800fe78 <st25r3916InitInterrupts+0x28>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	609a      	str	r2, [r3, #8]
    st25r3916interrupt.mask         = ST25R3916_IRQ_MASK_NONE;
 800fe66:	4b04      	ldr	r3, [pc, #16]	; (800fe78 <st25r3916InitInterrupts+0x28>)
 800fe68:	2200      	movs	r2, #0
 800fe6a:	60da      	str	r2, [r3, #12]
}
 800fe6c:	bf00      	nop
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr
 800fe76:	bf00      	nop
 800fe78:	20000bd8 	.word	0x20000bd8

0800fe7c <st25r3916Isr>:


/*******************************************************************************/
void st25r3916Isr( void )
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	af00      	add	r7, sp, #0
    st25r3916CheckForReceivedInterrupts();
 800fe80:	f000 f80c 	bl	800fe9c <st25r3916CheckForReceivedInterrupts>
    
    // Check if callback is set and run it
    if( NULL != st25r3916interrupt.callback )
 800fe84:	4b04      	ldr	r3, [pc, #16]	; (800fe98 <st25r3916Isr+0x1c>)
 800fe86:	685b      	ldr	r3, [r3, #4]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d002      	beq.n	800fe92 <st25r3916Isr+0x16>
    {
        st25r3916interrupt.callback();
 800fe8c:	4b02      	ldr	r3, [pc, #8]	; (800fe98 <st25r3916Isr+0x1c>)
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	4798      	blx	r3
    }
}
 800fe92:	bf00      	nop
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	20000bd8 	.word	0x20000bd8

0800fe9c <st25r3916CheckForReceivedInterrupts>:


/*******************************************************************************/
void st25r3916CheckForReceivedInterrupts( void )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3916_INT_REGS_LEN];
    uint32_t irqStatus;

    /* Initialize iregs */
    irqStatus = ST25R3916_IRQ_MASK_NONE;
 800fea2:	2300      	movs	r3, #0
 800fea4:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 800fea6:	463b      	mov	r3, r7
 800fea8:	2204      	movs	r2, #4
 800feaa:	21ff      	movs	r1, #255	; 0xff
 800feac:	4618      	mov	r0, r3
 800feae:	f005 ffeb 	bl	8015e88 <memset>
    
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 800feb2:	e019      	b.n	800fee8 <st25r3916CheckForReceivedInterrupts+0x4c>
   {
       st25r3916ReadMultipleRegisters( ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN );
 800feb4:	463b      	mov	r3, r7
 800feb6:	2204      	movs	r2, #4
 800feb8:	4619      	mov	r1, r3
 800feba:	201a      	movs	r0, #26
 800febc:	f7ff fd57 	bl	800f96e <st25r3916ReadMultipleRegisters>

       irqStatus |= (uint32_t)iregs[0];
 800fec0:	783b      	ldrb	r3, [r7, #0]
 800fec2:	461a      	mov	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	4313      	orrs	r3, r2
 800fec8:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[1]<<8;
 800feca:	787b      	ldrb	r3, [r7, #1]
 800fecc:	021b      	lsls	r3, r3, #8
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	4313      	orrs	r3, r2
 800fed2:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[2]<<16;
 800fed4:	78bb      	ldrb	r3, [r7, #2]
 800fed6:	041b      	lsls	r3, r3, #16
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	4313      	orrs	r3, r2
 800fedc:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[3]<<24;
 800fede:	78fb      	ldrb	r3, [r7, #3]
 800fee0:	061b      	lsls	r3, r3, #24
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	4313      	orrs	r3, r2
 800fee6:	607b      	str	r3, [r7, #4]
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 800fee8:	2110      	movs	r1, #16
 800feea:	4818      	ldr	r0, [pc, #96]	; (800ff4c <st25r3916CheckForReceivedInterrupts+0xb0>)
 800feec:	f7f5 faa0 	bl	8005430 <HAL_GPIO_ReadPin>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d0de      	beq.n	800feb4 <st25r3916CheckForReceivedInterrupts+0x18>
   }
   
   /* Forward all interrupts, even masked ones to application */
   platformProtectST25R391xIrqStatus();
 800fef6:	4b16      	ldr	r3, [pc, #88]	; (800ff50 <st25r3916CheckForReceivedInterrupts+0xb4>)
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	3301      	adds	r3, #1
 800fefc:	b2da      	uxtb	r2, r3
 800fefe:	4b14      	ldr	r3, [pc, #80]	; (800ff50 <st25r3916CheckForReceivedInterrupts+0xb4>)
 800ff00:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800ff02:	f3bf 8f4f 	dsb	sy
 800ff06:	200a      	movs	r0, #10
 800ff08:	f7ff ff80 	bl	800fe0c <__NVIC_DisableIRQ>
 800ff0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ff10:	f3bf 8f6f 	isb	sy
   st25r3916interrupt.status |= irqStatus;
 800ff14:	4b0f      	ldr	r3, [pc, #60]	; (800ff54 <st25r3916CheckForReceivedInterrupts+0xb8>)
 800ff16:	689a      	ldr	r2, [r3, #8]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	4a0d      	ldr	r2, [pc, #52]	; (800ff54 <st25r3916CheckForReceivedInterrupts+0xb8>)
 800ff1e:	6093      	str	r3, [r2, #8]
   platformUnprotectST25R391xIrqStatus();
 800ff20:	4b0b      	ldr	r3, [pc, #44]	; (800ff50 <st25r3916CheckForReceivedInterrupts+0xb4>)
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	3b01      	subs	r3, #1
 800ff26:	b2da      	uxtb	r2, r3
 800ff28:	4b09      	ldr	r3, [pc, #36]	; (800ff50 <st25r3916CheckForReceivedInterrupts+0xb4>)
 800ff2a:	701a      	strb	r2, [r3, #0]
 800ff2c:	4b08      	ldr	r3, [pc, #32]	; (800ff50 <st25r3916CheckForReceivedInterrupts+0xb4>)
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d102      	bne.n	800ff3a <st25r3916CheckForReceivedInterrupts+0x9e>
 800ff34:	200a      	movs	r0, #10
 800ff36:	f7ff ff4b 	bl	800fdd0 <__NVIC_EnableIRQ>

   /* Send an IRQ event to LED handling */
   st25r3916ledEvtIrq( st25r3916interrupt.status );
 800ff3a:	4b06      	ldr	r3, [pc, #24]	; (800ff54 <st25r3916CheckForReceivedInterrupts+0xb8>)
 800ff3c:	689b      	ldr	r3, [r3, #8]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f000 f927 	bl	8010192 <st25r3916ledEvtIrq>
}
 800ff44:	bf00      	nop
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	40020800 	.word	0x40020800
 800ff50:	20000f6d 	.word	0x20000f6d
 800ff54:	20000bd8 	.word	0x20000bd8

0800ff58 <st25r3916ModifyInterrupts>:


/*******************************************************************************/
void st25r3916ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b086      	sub	sp, #24
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
    uint8_t  i;
    uint32_t old_mask;
    uint32_t new_mask;
    

    old_mask = st25r3916interrupt.mask;
 800ff62:	4b1e      	ldr	r3, [pc, #120]	; (800ffdc <st25r3916ModifyInterrupts+0x84>)
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	613b      	str	r3, [r7, #16]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	43da      	mvns	r2, r3
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	401a      	ands	r2, r3
 800ff70:	6939      	ldr	r1, [r7, #16]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	400b      	ands	r3, r1
 800ff76:	4313      	orrs	r3, r2
 800ff78:	60fb      	str	r3, [r7, #12]
    st25r3916interrupt.mask &= ~clr_mask;
 800ff7a:	4b18      	ldr	r3, [pc, #96]	; (800ffdc <st25r3916ModifyInterrupts+0x84>)
 800ff7c:	68da      	ldr	r2, [r3, #12]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	43db      	mvns	r3, r3
 800ff82:	4013      	ands	r3, r2
 800ff84:	4a15      	ldr	r2, [pc, #84]	; (800ffdc <st25r3916ModifyInterrupts+0x84>)
 800ff86:	60d3      	str	r3, [r2, #12]
    st25r3916interrupt.mask |= set_mask;
 800ff88:	4b14      	ldr	r3, [pc, #80]	; (800ffdc <st25r3916ModifyInterrupts+0x84>)
 800ff8a:	68da      	ldr	r2, [r3, #12]
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	4a12      	ldr	r2, [pc, #72]	; (800ffdc <st25r3916ModifyInterrupts+0x84>)
 800ff92:	60d3      	str	r3, [r2, #12]
    
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 800ff94:	2300      	movs	r3, #0
 800ff96:	75fb      	strb	r3, [r7, #23]
 800ff98:	e019      	b.n	800ffce <st25r3916ModifyInterrupts+0x76>
    { 
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 800ff9a:	7dfb      	ldrb	r3, [r7, #23]
 800ff9c:	00db      	lsls	r3, r3, #3
 800ff9e:	68fa      	ldr	r2, [r7, #12]
 800ffa0:	fa22 f303 	lsr.w	r3, r2, r3
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d00d      	beq.n	800ffc6 <st25r3916ModifyInterrupts+0x6e>
        {
            continue;
        }
        
        st25r3916WriteRegister(ST25R3916_REG_IRQ_MASK_MAIN + i, (uint8_t)((st25r3916interrupt.mask>>(8U*i)) & 0xFFU) );
 800ffaa:	7dfb      	ldrb	r3, [r7, #23]
 800ffac:	3316      	adds	r3, #22
 800ffae:	b2d8      	uxtb	r0, r3
 800ffb0:	4b0a      	ldr	r3, [pc, #40]	; (800ffdc <st25r3916ModifyInterrupts+0x84>)
 800ffb2:	68da      	ldr	r2, [r3, #12]
 800ffb4:	7dfb      	ldrb	r3, [r7, #23]
 800ffb6:	00db      	lsls	r3, r3, #3
 800ffb8:	fa22 f303 	lsr.w	r3, r2, r3
 800ffbc:	b2db      	uxtb	r3, r3
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	f7ff fd02 	bl	800f9c8 <st25r3916WriteRegister>
 800ffc4:	e000      	b.n	800ffc8 <st25r3916ModifyInterrupts+0x70>
            continue;
 800ffc6:	bf00      	nop
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 800ffc8:	7dfb      	ldrb	r3, [r7, #23]
 800ffca:	3301      	adds	r3, #1
 800ffcc:	75fb      	strb	r3, [r7, #23]
 800ffce:	7dfb      	ldrb	r3, [r7, #23]
 800ffd0:	2b03      	cmp	r3, #3
 800ffd2:	d9e2      	bls.n	800ff9a <st25r3916ModifyInterrupts+0x42>
    }
    return;
 800ffd4:	bf00      	nop
}
 800ffd6:	3718      	adds	r7, #24
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}
 800ffdc:	20000bd8 	.word	0x20000bd8

0800ffe0 <st25r3916WaitForInterruptsTimed>:


/*******************************************************************************/
uint32_t st25r3916WaitForInterruptsTimed( uint32_t mask, uint16_t tmo )
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	807b      	strh	r3, [r7, #2]
    uint32_t tmrDelay;
    uint32_t status;
    
    tmrDelay = platformTimerCreate( tmo );
 800ffec:	887b      	ldrh	r3, [r7, #2]
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7f3 ffee 	bl	8003fd0 <timerCalculateTimer>
 800fff4:	60f8      	str	r0, [r7, #12]
    
    /* Run until specific interrupt has happen or the timer has expired */
    do 
    {
        status = (st25r3916interrupt.status & mask);
 800fff6:	4b20      	ldr	r3, [pc, #128]	; (8010078 <st25r3916WaitForInterruptsTimed+0x98>)
 800fff8:	689b      	ldr	r3, [r3, #8]
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	4013      	ands	r3, r2
 800fffe:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmrDelay ) || (tmo == 0U)) && (status == 0U) );
 8010000:	68f8      	ldr	r0, [r7, #12]
 8010002:	f7f3 fff3 	bl	8003fec <timerIsExpired>
 8010006:	4603      	mov	r3, r0
 8010008:	f083 0301 	eor.w	r3, r3, #1
 801000c:	b2db      	uxtb	r3, r3
 801000e:	2b00      	cmp	r3, #0
 8010010:	d102      	bne.n	8010018 <st25r3916WaitForInterruptsTimed+0x38>
 8010012:	887b      	ldrh	r3, [r7, #2]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d102      	bne.n	801001e <st25r3916WaitForInterruptsTimed+0x3e>
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d0eb      	beq.n	800fff6 <st25r3916WaitForInterruptsTimed+0x16>

    status = st25r3916interrupt.status & mask;
 801001e:	4b16      	ldr	r3, [pc, #88]	; (8010078 <st25r3916WaitForInterruptsTimed+0x98>)
 8010020:	689b      	ldr	r3, [r3, #8]
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	4013      	ands	r3, r2
 8010026:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 8010028:	4b14      	ldr	r3, [pc, #80]	; (801007c <st25r3916WaitForInterruptsTimed+0x9c>)
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	3301      	adds	r3, #1
 801002e:	b2da      	uxtb	r2, r3
 8010030:	4b12      	ldr	r3, [pc, #72]	; (801007c <st25r3916WaitForInterruptsTimed+0x9c>)
 8010032:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8010034:	f3bf 8f4f 	dsb	sy
 8010038:	200a      	movs	r0, #10
 801003a:	f7ff fee7 	bl	800fe0c <__NVIC_DisableIRQ>
 801003e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010042:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status &= ~status;
 8010046:	4b0c      	ldr	r3, [pc, #48]	; (8010078 <st25r3916WaitForInterruptsTimed+0x98>)
 8010048:	689a      	ldr	r2, [r3, #8]
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	43db      	mvns	r3, r3
 801004e:	4013      	ands	r3, r2
 8010050:	4a09      	ldr	r2, [pc, #36]	; (8010078 <st25r3916WaitForInterruptsTimed+0x98>)
 8010052:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 8010054:	4b09      	ldr	r3, [pc, #36]	; (801007c <st25r3916WaitForInterruptsTimed+0x9c>)
 8010056:	781b      	ldrb	r3, [r3, #0]
 8010058:	3b01      	subs	r3, #1
 801005a:	b2da      	uxtb	r2, r3
 801005c:	4b07      	ldr	r3, [pc, #28]	; (801007c <st25r3916WaitForInterruptsTimed+0x9c>)
 801005e:	701a      	strb	r2, [r3, #0]
 8010060:	4b06      	ldr	r3, [pc, #24]	; (801007c <st25r3916WaitForInterruptsTimed+0x9c>)
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d102      	bne.n	801006e <st25r3916WaitForInterruptsTimed+0x8e>
 8010068:	200a      	movs	r0, #10
 801006a:	f7ff feb1 	bl	800fdd0 <__NVIC_EnableIRQ>
    
    return status;
 801006e:	68bb      	ldr	r3, [r7, #8]
}
 8010070:	4618      	mov	r0, r3
 8010072:	3710      	adds	r7, #16
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	20000bd8 	.word	0x20000bd8
 801007c:	20000f6d 	.word	0x20000f6d

08010080 <st25r3916GetInterrupt>:


/*******************************************************************************/
uint32_t st25r3916GetInterrupt( uint32_t mask )
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3916interrupt.status & mask);
 8010088:	4b17      	ldr	r3, [pc, #92]	; (80100e8 <st25r3916GetInterrupt+0x68>)
 801008a:	689b      	ldr	r3, [r3, #8]
 801008c:	687a      	ldr	r2, [r7, #4]
 801008e:	4013      	ands	r3, r2
 8010090:	60fb      	str	r3, [r7, #12]
    if(irqs != ST25R3916_IRQ_MASK_NONE)
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d022      	beq.n	80100de <st25r3916GetInterrupt+0x5e>
    {
        platformProtectST25R391xIrqStatus();
 8010098:	4b14      	ldr	r3, [pc, #80]	; (80100ec <st25r3916GetInterrupt+0x6c>)
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	3301      	adds	r3, #1
 801009e:	b2da      	uxtb	r2, r3
 80100a0:	4b12      	ldr	r3, [pc, #72]	; (80100ec <st25r3916GetInterrupt+0x6c>)
 80100a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80100a4:	f3bf 8f4f 	dsb	sy
 80100a8:	200a      	movs	r0, #10
 80100aa:	f7ff feaf 	bl	800fe0c <__NVIC_DisableIRQ>
 80100ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80100b2:	f3bf 8f6f 	isb	sy
        st25r3916interrupt.status &= ~irqs;
 80100b6:	4b0c      	ldr	r3, [pc, #48]	; (80100e8 <st25r3916GetInterrupt+0x68>)
 80100b8:	689a      	ldr	r2, [r3, #8]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	43db      	mvns	r3, r3
 80100be:	4013      	ands	r3, r2
 80100c0:	4a09      	ldr	r2, [pc, #36]	; (80100e8 <st25r3916GetInterrupt+0x68>)
 80100c2:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 80100c4:	4b09      	ldr	r3, [pc, #36]	; (80100ec <st25r3916GetInterrupt+0x6c>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	3b01      	subs	r3, #1
 80100ca:	b2da      	uxtb	r2, r3
 80100cc:	4b07      	ldr	r3, [pc, #28]	; (80100ec <st25r3916GetInterrupt+0x6c>)
 80100ce:	701a      	strb	r2, [r3, #0]
 80100d0:	4b06      	ldr	r3, [pc, #24]	; (80100ec <st25r3916GetInterrupt+0x6c>)
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d102      	bne.n	80100de <st25r3916GetInterrupt+0x5e>
 80100d8:	200a      	movs	r0, #10
 80100da:	f7ff fe79 	bl	800fdd0 <__NVIC_EnableIRQ>
    }

    return irqs;
 80100de:	68fb      	ldr	r3, [r7, #12]
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3710      	adds	r7, #16
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}
 80100e8:	20000bd8 	.word	0x20000bd8
 80100ec:	20000f6d 	.word	0x20000f6d

080100f0 <st25r3916EnableInterrupts>:
}


/*******************************************************************************/
void st25r3916EnableInterrupts(uint32_t mask)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(mask, 0);
 80100f8:	2100      	movs	r1, #0
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f7ff ff2c 	bl	800ff58 <st25r3916ModifyInterrupts>
}
 8010100:	bf00      	nop
 8010102:	3708      	adds	r7, #8
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <st25r3916DisableInterrupts>:


/*******************************************************************************/
void st25r3916DisableInterrupts(uint32_t mask)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(0, mask);
 8010110:	6879      	ldr	r1, [r7, #4]
 8010112:	2000      	movs	r0, #0
 8010114:	f7ff ff20 	bl	800ff58 <st25r3916ModifyInterrupts>
}
 8010118:	bf00      	nop
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <st25r3916ClearInterrupts>:

/*******************************************************************************/
void st25r3916ClearInterrupts( void )
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
    uint8_t iregs[ST25R3916_INT_REGS_LEN];

    st25r3916ReadMultipleRegisters(ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN);
 8010126:	1d3b      	adds	r3, r7, #4
 8010128:	2204      	movs	r2, #4
 801012a:	4619      	mov	r1, r3
 801012c:	201a      	movs	r0, #26
 801012e:	f7ff fc1e 	bl	800f96e <st25r3916ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 8010132:	4b12      	ldr	r3, [pc, #72]	; (801017c <st25r3916ClearInterrupts+0x5c>)
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	3301      	adds	r3, #1
 8010138:	b2da      	uxtb	r2, r3
 801013a:	4b10      	ldr	r3, [pc, #64]	; (801017c <st25r3916ClearInterrupts+0x5c>)
 801013c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	200a      	movs	r0, #10
 8010144:	f7ff fe62 	bl	800fe0c <__NVIC_DisableIRQ>
 8010148:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801014c:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status = ST25R3916_IRQ_MASK_NONE;
 8010150:	4b0b      	ldr	r3, [pc, #44]	; (8010180 <st25r3916ClearInterrupts+0x60>)
 8010152:	2200      	movs	r2, #0
 8010154:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 8010156:	4b09      	ldr	r3, [pc, #36]	; (801017c <st25r3916ClearInterrupts+0x5c>)
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	3b01      	subs	r3, #1
 801015c:	b2da      	uxtb	r2, r3
 801015e:	4b07      	ldr	r3, [pc, #28]	; (801017c <st25r3916ClearInterrupts+0x5c>)
 8010160:	701a      	strb	r2, [r3, #0]
 8010162:	4b06      	ldr	r3, [pc, #24]	; (801017c <st25r3916ClearInterrupts+0x5c>)
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d103      	bne.n	8010172 <st25r3916ClearInterrupts+0x52>
 801016a:	200a      	movs	r0, #10
 801016c:	f7ff fe30 	bl	800fdd0 <__NVIC_EnableIRQ>
    return;
 8010170:	bf00      	nop
 8010172:	bf00      	nop
}
 8010174:	3708      	adds	r7, #8
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	20000f6d 	.word	0x20000f6d
 8010180:	20000bd8 	.word	0x20000bd8

08010184 <st25r3916ledInit>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3916ledInit( void )
{
 8010184:	b480      	push	{r7}
 8010186:	af00      	add	r7, sp, #0
    /* Initialize LEDs if existing and defined */
    platformLedsInitialize();
    
    st25r3916ledRxOff();
    st25r3916ledFieldOff();
}
 8010188:	bf00      	nop
 801018a:	46bd      	mov	sp, r7
 801018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010190:	4770      	bx	lr

08010192 <st25r3916ledEvtIrq>:


/*******************************************************************************/
void st25r3916ledEvtIrq( uint32_t irqs )
{
 8010192:	b480      	push	{r7}
 8010194:	b083      	sub	sp, #12
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
    if( (irqs & (ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_NRE    | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_RXE_PTA |                                                 
                 ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_WU_F    | ST25R3916_IRQ_MASK_RFU2)   ) != 0U ) 
    {
        st25r3916ledRxOff();
    }
}
 801019a:	bf00      	nop
 801019c:	370c      	adds	r7, #12
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr

080101a6 <st25r3916ledEvtWrReg>:


/*******************************************************************************/
void st25r3916ledEvtWrReg( uint8_t reg, uint8_t val )
{
 80101a6:	b480      	push	{r7}
 80101a8:	b083      	sub	sp, #12
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	4603      	mov	r3, r0
 80101ae:	460a      	mov	r2, r1
 80101b0:	71fb      	strb	r3, [r7, #7]
 80101b2:	4613      	mov	r3, r2
 80101b4:	71bb      	strb	r3, [r7, #6]
    if( reg == ST25R3916_REG_OP_CONTROL )
 80101b6:	79fb      	ldrb	r3, [r7, #7]
 80101b8:	2b02      	cmp	r3, #2
        else
        {
            st25r3916ledFieldOff();
        }
    }
}
 80101ba:	bf00      	nop
 80101bc:	370c      	adds	r7, #12
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr

080101c6 <st25r3916ledEvtWrMultiReg>:


/*******************************************************************************/
void st25r3916ledEvtWrMultiReg( uint8_t reg, const uint8_t* vals, uint8_t len )
{
 80101c6:	b580      	push	{r7, lr}
 80101c8:	b084      	sub	sp, #16
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	4603      	mov	r3, r0
 80101ce:	6039      	str	r1, [r7, #0]
 80101d0:	71fb      	strb	r3, [r7, #7]
 80101d2:	4613      	mov	r3, r2
 80101d4:	71bb      	strb	r3, [r7, #6]
    uint8_t i;
    
    for(i=0; i<(len); i++)
 80101d6:	2300      	movs	r3, #0
 80101d8:	73fb      	strb	r3, [r7, #15]
 80101da:	e00d      	b.n	80101f8 <st25r3916ledEvtWrMultiReg+0x32>
    {
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
 80101dc:	79fa      	ldrb	r2, [r7, #7]
 80101de:	7bfb      	ldrb	r3, [r7, #15]
 80101e0:	4413      	add	r3, r2
 80101e2:	b2d8      	uxtb	r0, r3
 80101e4:	7bfb      	ldrb	r3, [r7, #15]
 80101e6:	683a      	ldr	r2, [r7, #0]
 80101e8:	4413      	add	r3, r2
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	4619      	mov	r1, r3
 80101ee:	f7ff ffda 	bl	80101a6 <st25r3916ledEvtWrReg>
    for(i=0; i<(len); i++)
 80101f2:	7bfb      	ldrb	r3, [r7, #15]
 80101f4:	3301      	adds	r3, #1
 80101f6:	73fb      	strb	r3, [r7, #15]
 80101f8:	7bfa      	ldrb	r2, [r7, #15]
 80101fa:	79bb      	ldrb	r3, [r7, #6]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d3ed      	bcc.n	80101dc <st25r3916ledEvtWrMultiReg+0x16>
    }
}
 8010200:	bf00      	nop
 8010202:	3710      	adds	r7, #16
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <st25r3916ledEvtCmd>:


/*******************************************************************************/
void st25r3916ledEvtCmd( uint8_t cmd )
{
 8010208:	b480      	push	{r7}
 801020a:	b083      	sub	sp, #12
 801020c:	af00      	add	r7, sp, #0
 801020e:	4603      	mov	r3, r0
 8010210:	71fb      	strb	r3, [r7, #7]
    if( cmd == ST25R3916_CMD_SET_DEFAULT )
    {
        st25r3916ledFieldOff();
        st25r3916ledRxOff();
    }
}
 8010212:	bf00      	nop
 8010214:	370c      	adds	r7, #12
 8010216:	46bd      	mov	sp, r7
 8010218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021c:	4770      	bx	lr

0801021e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801021e:	b580      	push	{r7, lr}
 8010220:	b084      	sub	sp, #16
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
 8010226:	460b      	mov	r3, r1
 8010228:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801022a:	2300      	movs	r3, #0
 801022c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	7c1b      	ldrb	r3, [r3, #16]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d115      	bne.n	8010262 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010236:	f44f 7300 	mov.w	r3, #512	; 0x200
 801023a:	2202      	movs	r2, #2
 801023c:	2181      	movs	r1, #129	; 0x81
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f005 fc7b 	bl	8015b3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2201      	movs	r2, #1
 8010248:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801024a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801024e:	2202      	movs	r2, #2
 8010250:	2101      	movs	r1, #1
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f005 fc71 	bl	8015b3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2201      	movs	r2, #1
 801025c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8010260:	e012      	b.n	8010288 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010262:	2340      	movs	r3, #64	; 0x40
 8010264:	2202      	movs	r2, #2
 8010266:	2181      	movs	r1, #129	; 0x81
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f005 fc66 	bl	8015b3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2201      	movs	r2, #1
 8010272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010274:	2340      	movs	r3, #64	; 0x40
 8010276:	2202      	movs	r2, #2
 8010278:	2101      	movs	r1, #1
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f005 fc5d 	bl	8015b3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2201      	movs	r2, #1
 8010284:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010288:	2308      	movs	r3, #8
 801028a:	2203      	movs	r2, #3
 801028c:	2182      	movs	r1, #130	; 0x82
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f005 fc53 	bl	8015b3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2201      	movs	r2, #1
 8010298:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 801029a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801029e:	f005 fdc9 	bl	8015e34 <malloc>
 80102a2:	4603      	mov	r3, r0
 80102a4:	461a      	mov	r2, r3
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d102      	bne.n	80102bc <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80102b6:	2301      	movs	r3, #1
 80102b8:	73fb      	strb	r3, [r7, #15]
 80102ba:	e026      	b.n	801030a <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80102c2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	2200      	movs	r2, #0
 80102d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	2200      	movs	r2, #0
 80102da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	7c1b      	ldrb	r3, [r3, #16]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d109      	bne.n	80102fa <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80102ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102f0:	2101      	movs	r1, #1
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f005 fd12 	bl	8015d1c <USBD_LL_PrepareReceive>
 80102f8:	e007      	b.n	801030a <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010300:	2340      	movs	r3, #64	; 0x40
 8010302:	2101      	movs	r1, #1
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f005 fd09 	bl	8015d1c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801030a:	7bfb      	ldrb	r3, [r7, #15]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	460b      	mov	r3, r1
 801031e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8010320:	2300      	movs	r3, #0
 8010322:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010324:	2181      	movs	r1, #129	; 0x81
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f005 fc2d 	bl	8015b86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2200      	movs	r2, #0
 8010330:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010332:	2101      	movs	r1, #1
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f005 fc26 	bl	8015b86 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2200      	movs	r2, #0
 801033e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010342:	2182      	movs	r1, #130	; 0x82
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f005 fc1e 	bl	8015b86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2200      	movs	r2, #0
 801034e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010356:	2b00      	cmp	r3, #0
 8010358:	d00e      	beq.n	8010378 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801036a:	4618      	mov	r0, r3
 801036c:	f005 fd6a 	bl	8015e44 <free>
    pdev->pClassData = NULL;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2200      	movs	r2, #0
 8010374:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8010378:	7bfb      	ldrb	r3, [r7, #15]
}
 801037a:	4618      	mov	r0, r3
 801037c:	3710      	adds	r7, #16
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8010382:	b580      	push	{r7, lr}
 8010384:	b086      	sub	sp, #24
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
 801038a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010392:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010394:	2300      	movs	r3, #0
 8010396:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010398:	2300      	movs	r3, #0
 801039a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 801039c:	2300      	movs	r3, #0
 801039e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d039      	beq.n	8010420 <USBD_CDC_Setup+0x9e>
 80103ac:	2b20      	cmp	r3, #32
 80103ae:	d17c      	bne.n	80104aa <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	88db      	ldrh	r3, [r3, #6]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d029      	beq.n	801040c <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	b25b      	sxtb	r3, r3
 80103be:	2b00      	cmp	r3, #0
 80103c0:	da11      	bge.n	80103e6 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80103c8:	689b      	ldr	r3, [r3, #8]
 80103ca:	683a      	ldr	r2, [r7, #0]
 80103cc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80103ce:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80103d0:	683a      	ldr	r2, [r7, #0]
 80103d2:	88d2      	ldrh	r2, [r2, #6]
 80103d4:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80103d6:	6939      	ldr	r1, [r7, #16]
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	88db      	ldrh	r3, [r3, #6]
 80103dc:	461a      	mov	r2, r3
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f001 f99c 	bl	801171c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80103e4:	e068      	b.n	80104b8 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	785a      	ldrb	r2, [r3, #1]
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	88db      	ldrh	r3, [r3, #6]
 80103f4:	b2da      	uxtb	r2, r3
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80103fc:	6939      	ldr	r1, [r7, #16]
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	88db      	ldrh	r3, [r3, #6]
 8010402:	461a      	mov	r2, r3
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f001 f9b7 	bl	8011778 <USBD_CtlPrepareRx>
    break;
 801040a:	e055      	b.n	80104b8 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010412:	689b      	ldr	r3, [r3, #8]
 8010414:	683a      	ldr	r2, [r7, #0]
 8010416:	7850      	ldrb	r0, [r2, #1]
 8010418:	2200      	movs	r2, #0
 801041a:	6839      	ldr	r1, [r7, #0]
 801041c:	4798      	blx	r3
    break;
 801041e:	e04b      	b.n	80104b8 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	785b      	ldrb	r3, [r3, #1]
 8010424:	2b0a      	cmp	r3, #10
 8010426:	d017      	beq.n	8010458 <USBD_CDC_Setup+0xd6>
 8010428:	2b0b      	cmp	r3, #11
 801042a:	d029      	beq.n	8010480 <USBD_CDC_Setup+0xfe>
 801042c:	2b00      	cmp	r3, #0
 801042e:	d133      	bne.n	8010498 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010436:	2b03      	cmp	r3, #3
 8010438:	d107      	bne.n	801044a <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 801043a:	f107 030c 	add.w	r3, r7, #12
 801043e:	2202      	movs	r2, #2
 8010440:	4619      	mov	r1, r3
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f001 f96a 	bl	801171c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8010448:	e02e      	b.n	80104a8 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 801044a:	6839      	ldr	r1, [r7, #0]
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f001 f8fa 	bl	8011646 <USBD_CtlError>
			  ret = USBD_FAIL;
 8010452:	2302      	movs	r3, #2
 8010454:	75fb      	strb	r3, [r7, #23]
      break;
 8010456:	e027      	b.n	80104a8 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801045e:	2b03      	cmp	r3, #3
 8010460:	d107      	bne.n	8010472 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8010462:	f107 030f 	add.w	r3, r7, #15
 8010466:	2201      	movs	r2, #1
 8010468:	4619      	mov	r1, r3
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f001 f956 	bl	801171c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8010470:	e01a      	b.n	80104a8 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8010472:	6839      	ldr	r1, [r7, #0]
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f001 f8e6 	bl	8011646 <USBD_CtlError>
			  ret = USBD_FAIL;
 801047a:	2302      	movs	r3, #2
 801047c:	75fb      	strb	r3, [r7, #23]
      break;
 801047e:	e013      	b.n	80104a8 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010486:	2b03      	cmp	r3, #3
 8010488:	d00d      	beq.n	80104a6 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 801048a:	6839      	ldr	r1, [r7, #0]
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f001 f8da 	bl	8011646 <USBD_CtlError>
			  ret = USBD_FAIL;
 8010492:	2302      	movs	r3, #2
 8010494:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010496:	e006      	b.n	80104a6 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8010498:	6839      	ldr	r1, [r7, #0]
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f001 f8d3 	bl	8011646 <USBD_CtlError>
      ret = USBD_FAIL;
 80104a0:	2302      	movs	r3, #2
 80104a2:	75fb      	strb	r3, [r7, #23]
      break;
 80104a4:	e000      	b.n	80104a8 <USBD_CDC_Setup+0x126>
      break;
 80104a6:	bf00      	nop
    }
    break;
 80104a8:	e006      	b.n	80104b8 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80104aa:	6839      	ldr	r1, [r7, #0]
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f001 f8ca 	bl	8011646 <USBD_CtlError>
    ret = USBD_FAIL;
 80104b2:	2302      	movs	r3, #2
 80104b4:	75fb      	strb	r3, [r7, #23]
    break;
 80104b6:	bf00      	nop
  }

  return ret;
 80104b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	3718      	adds	r7, #24
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}

080104c2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80104c2:	b580      	push	{r7, lr}
 80104c4:	b084      	sub	sp, #16
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
 80104ca:	460b      	mov	r3, r1
 80104cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80104d4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80104dc:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d03a      	beq.n	801055e <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80104e8:	78fa      	ldrb	r2, [r7, #3]
 80104ea:	6879      	ldr	r1, [r7, #4]
 80104ec:	4613      	mov	r3, r2
 80104ee:	009b      	lsls	r3, r3, #2
 80104f0:	4413      	add	r3, r2
 80104f2:	009b      	lsls	r3, r3, #2
 80104f4:	440b      	add	r3, r1
 80104f6:	331c      	adds	r3, #28
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d029      	beq.n	8010552 <USBD_CDC_DataIn+0x90>
 80104fe:	78fa      	ldrb	r2, [r7, #3]
 8010500:	6879      	ldr	r1, [r7, #4]
 8010502:	4613      	mov	r3, r2
 8010504:	009b      	lsls	r3, r3, #2
 8010506:	4413      	add	r3, r2
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	440b      	add	r3, r1
 801050c:	331c      	adds	r3, #28
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	78f9      	ldrb	r1, [r7, #3]
 8010512:	68b8      	ldr	r0, [r7, #8]
 8010514:	460b      	mov	r3, r1
 8010516:	00db      	lsls	r3, r3, #3
 8010518:	1a5b      	subs	r3, r3, r1
 801051a:	009b      	lsls	r3, r3, #2
 801051c:	4403      	add	r3, r0
 801051e:	3344      	adds	r3, #68	; 0x44
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	fbb2 f1f3 	udiv	r1, r2, r3
 8010526:	fb03 f301 	mul.w	r3, r3, r1
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	2b00      	cmp	r3, #0
 801052e:	d110      	bne.n	8010552 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8010530:	78fa      	ldrb	r2, [r7, #3]
 8010532:	6879      	ldr	r1, [r7, #4]
 8010534:	4613      	mov	r3, r2
 8010536:	009b      	lsls	r3, r3, #2
 8010538:	4413      	add	r3, r2
 801053a:	009b      	lsls	r3, r3, #2
 801053c:	440b      	add	r3, r1
 801053e:	331c      	adds	r3, #28
 8010540:	2200      	movs	r2, #0
 8010542:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8010544:	78f9      	ldrb	r1, [r7, #3]
 8010546:	2300      	movs	r3, #0
 8010548:	2200      	movs	r2, #0
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f005 fbc3 	bl	8015cd6 <USBD_LL_Transmit>
 8010550:	e003      	b.n	801055a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2200      	movs	r2, #0
 8010556:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 801055a:	2300      	movs	r3, #0
 801055c:	e000      	b.n	8010560 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801055e:	2302      	movs	r3, #2
  }
}
 8010560:	4618      	mov	r0, r3
 8010562:	3710      	adds	r7, #16
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	460b      	mov	r3, r1
 8010572:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801057a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 801057c:	78fb      	ldrb	r3, [r7, #3]
 801057e:	4619      	mov	r1, r3
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f005 fbee 	bl	8015d62 <USBD_LL_GetRxDataSize>
 8010586:	4602      	mov	r2, r0
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010594:	2b00      	cmp	r3, #0
 8010596:	d00d      	beq.n	80105b4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	68fa      	ldr	r2, [r7, #12]
 80105a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80105a6:	68fa      	ldr	r2, [r7, #12]
 80105a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80105ac:	4611      	mov	r1, r2
 80105ae:	4798      	blx	r3

    return USBD_OK;
 80105b0:	2300      	movs	r3, #0
 80105b2:	e000      	b.n	80105b6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80105b4:	2302      	movs	r3, #2
  }
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3710      	adds	r7, #16
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}

080105be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b084      	sub	sp, #16
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80105cc:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d015      	beq.n	8010604 <USBD_CDC_EP0_RxReady+0x46>
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80105de:	2bff      	cmp	r3, #255	; 0xff
 80105e0:	d010      	beq.n	8010604 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80105e8:	689b      	ldr	r3, [r3, #8]
 80105ea:	68fa      	ldr	r2, [r7, #12]
 80105ec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80105f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80105f2:	68fa      	ldr	r2, [r7, #12]
 80105f4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80105f8:	b292      	uxth	r2, r2
 80105fa:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	22ff      	movs	r2, #255	; 0xff
 8010600:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8010604:	2300      	movs	r3, #0
}
 8010606:	4618      	mov	r0, r3
 8010608:	3710      	adds	r7, #16
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
	...

08010610 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2243      	movs	r2, #67	; 0x43
 801061c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801061e:	4b03      	ldr	r3, [pc, #12]	; (801062c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010620:	4618      	mov	r0, r3
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr
 801062c:	200000e4 	.word	0x200000e4

08010630 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2243      	movs	r2, #67	; 0x43
 801063c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801063e:	4b03      	ldr	r3, [pc, #12]	; (801064c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010640:	4618      	mov	r0, r3
 8010642:	370c      	adds	r7, #12
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr
 801064c:	200000a0 	.word	0x200000a0

08010650 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8010650:	b480      	push	{r7}
 8010652:	b083      	sub	sp, #12
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2243      	movs	r2, #67	; 0x43
 801065c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801065e:	4b03      	ldr	r3, [pc, #12]	; (801066c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010660:	4618      	mov	r0, r3
 8010662:	370c      	adds	r7, #12
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr
 801066c:	20000128 	.word	0x20000128

08010670 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	220a      	movs	r2, #10
 801067c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801067e:	4b03      	ldr	r3, [pc, #12]	; (801068c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010680:	4618      	mov	r0, r3
 8010682:	370c      	adds	r7, #12
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr
 801068c:	2000005c 	.word	0x2000005c

08010690 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8010690:	b480      	push	{r7}
 8010692:	b085      	sub	sp, #20
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801069a:	2302      	movs	r3, #2
 801069c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d005      	beq.n	80106b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	683a      	ldr	r2, [r7, #0]
 80106a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80106ac:	2300      	movs	r3, #0
 80106ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80106b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3714      	adds	r7, #20
 80106b6:	46bd      	mov	sp, r7
 80106b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106bc:	4770      	bx	lr

080106be <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80106be:	b480      	push	{r7}
 80106c0:	b087      	sub	sp, #28
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	60f8      	str	r0, [r7, #12]
 80106c6:	60b9      	str	r1, [r7, #8]
 80106c8:	4613      	mov	r3, r2
 80106ca:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80106d2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	68ba      	ldr	r2, [r7, #8]
 80106d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80106dc:	88fa      	ldrh	r2, [r7, #6]
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80106e4:	2300      	movs	r3, #0
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	371c      	adds	r7, #28
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr

080106f2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80106f2:	b480      	push	{r7}
 80106f4:	b085      	sub	sp, #20
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
 80106fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010702:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	683a      	ldr	r2, [r7, #0]
 8010708:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 801070c:	2300      	movs	r3, #0
}
 801070e:	4618      	mov	r0, r3
 8010710:	3714      	adds	r7, #20
 8010712:	46bd      	mov	sp, r7
 8010714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010718:	4770      	bx	lr

0801071a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801071a:	b580      	push	{r7, lr}
 801071c:	b084      	sub	sp, #16
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010728:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010730:	2b00      	cmp	r3, #0
 8010732:	d017      	beq.n	8010764 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	7c1b      	ldrb	r3, [r3, #16]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d109      	bne.n	8010750 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010746:	2101      	movs	r1, #1
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f005 fae7 	bl	8015d1c <USBD_LL_PrepareReceive>
 801074e:	e007      	b.n	8010760 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010756:	2340      	movs	r3, #64	; 0x40
 8010758:	2101      	movs	r1, #1
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f005 fade 	bl	8015d1c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8010760:	2300      	movs	r3, #0
 8010762:	e000      	b.n	8010766 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8010764:	2302      	movs	r3, #2
  }
}
 8010766:	4618      	mov	r0, r3
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801076e:	b580      	push	{r7, lr}
 8010770:	b084      	sub	sp, #16
 8010772:	af00      	add	r7, sp, #0
 8010774:	60f8      	str	r0, [r7, #12]
 8010776:	60b9      	str	r1, [r7, #8]
 8010778:	4613      	mov	r3, r2
 801077a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d101      	bne.n	8010786 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010782:	2302      	movs	r3, #2
 8010784:	e01a      	b.n	80107bc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801078c:	2b00      	cmp	r3, #0
 801078e:	d003      	beq.n	8010798 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2200      	movs	r2, #0
 8010794:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d003      	beq.n	80107a6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	68ba      	ldr	r2, [r7, #8]
 80107a2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	2201      	movs	r2, #1
 80107aa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	79fa      	ldrb	r2, [r7, #7]
 80107b2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80107b4:	68f8      	ldr	r0, [r7, #12]
 80107b6:	f005 f959 	bl	8015a6c <USBD_LL_Init>

  return USBD_OK;
 80107ba:	2300      	movs	r3, #0
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3710      	adds	r7, #16
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}

080107c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b085      	sub	sp, #20
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80107ce:	2300      	movs	r3, #0
 80107d0:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d006      	beq.n	80107e6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	683a      	ldr	r2, [r7, #0]
 80107dc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80107e0:	2300      	movs	r3, #0
 80107e2:	73fb      	strb	r3, [r7, #15]
 80107e4:	e001      	b.n	80107ea <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80107e6:	2302      	movs	r3, #2
 80107e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80107ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3714      	adds	r7, #20
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f005 f97f 	bl	8015b04 <USBD_LL_Start>

  return USBD_OK;
 8010806:	2300      	movs	r3, #0
}
 8010808:	4618      	mov	r0, r3
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010818:	2300      	movs	r3, #0
}
 801081a:	4618      	mov	r0, r3
 801081c:	370c      	adds	r7, #12
 801081e:	46bd      	mov	sp, r7
 8010820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010824:	4770      	bx	lr

08010826 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010826:	b580      	push	{r7, lr}
 8010828:	b084      	sub	sp, #16
 801082a:	af00      	add	r7, sp, #0
 801082c:	6078      	str	r0, [r7, #4]
 801082e:	460b      	mov	r3, r1
 8010830:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8010832:	2302      	movs	r3, #2
 8010834:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801083c:	2b00      	cmp	r3, #0
 801083e:	d00c      	beq.n	801085a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	78fa      	ldrb	r2, [r7, #3]
 801084a:	4611      	mov	r1, r2
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	4798      	blx	r3
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d101      	bne.n	801085a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8010856:	2300      	movs	r3, #0
 8010858:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801085a:	7bfb      	ldrb	r3, [r7, #15]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3710      	adds	r7, #16
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b082      	sub	sp, #8
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	460b      	mov	r3, r1
 801086e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	78fa      	ldrb	r2, [r7, #3]
 801087a:	4611      	mov	r1, r2
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	4798      	blx	r3
  return USBD_OK;
 8010880:	2300      	movs	r3, #0
}
 8010882:	4618      	mov	r0, r3
 8010884:	3708      	adds	r7, #8
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}

0801088a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801088a:	b580      	push	{r7, lr}
 801088c:	b082      	sub	sp, #8
 801088e:	af00      	add	r7, sp, #0
 8010890:	6078      	str	r0, [r7, #4]
 8010892:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801089a:	6839      	ldr	r1, [r7, #0]
 801089c:	4618      	mov	r0, r3
 801089e:	f000 fe95 	bl	80115cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2201      	movs	r2, #1
 80108a6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80108b0:	461a      	mov	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80108be:	f003 031f 	and.w	r3, r3, #31
 80108c2:	2b01      	cmp	r3, #1
 80108c4:	d00c      	beq.n	80108e0 <USBD_LL_SetupStage+0x56>
 80108c6:	2b01      	cmp	r3, #1
 80108c8:	d302      	bcc.n	80108d0 <USBD_LL_SetupStage+0x46>
 80108ca:	2b02      	cmp	r3, #2
 80108cc:	d010      	beq.n	80108f0 <USBD_LL_SetupStage+0x66>
 80108ce:	e017      	b.n	8010900 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80108d6:	4619      	mov	r1, r3
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 fa05 	bl	8010ce8 <USBD_StdDevReq>
    break;
 80108de:	e01a      	b.n	8010916 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80108e6:	4619      	mov	r1, r3
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f000 fa67 	bl	8010dbc <USBD_StdItfReq>
    break;
 80108ee:	e012      	b.n	8010916 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80108f6:	4619      	mov	r1, r3
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f000 faa5 	bl	8010e48 <USBD_StdEPReq>
    break;
 80108fe:	e00a      	b.n	8010916 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010906:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801090a:	b2db      	uxtb	r3, r3
 801090c:	4619      	mov	r1, r3
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f005 f958 	bl	8015bc4 <USBD_LL_StallEP>
    break;
 8010914:	bf00      	nop
  }

  return USBD_OK;
 8010916:	2300      	movs	r3, #0
}
 8010918:	4618      	mov	r0, r3
 801091a:	3708      	adds	r7, #8
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}

08010920 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b086      	sub	sp, #24
 8010924:	af00      	add	r7, sp, #0
 8010926:	60f8      	str	r0, [r7, #12]
 8010928:	460b      	mov	r3, r1
 801092a:	607a      	str	r2, [r7, #4]
 801092c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 801092e:	7afb      	ldrb	r3, [r7, #11]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d14b      	bne.n	80109cc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801093a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010942:	2b03      	cmp	r3, #3
 8010944:	d134      	bne.n	80109b0 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	68da      	ldr	r2, [r3, #12]
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	691b      	ldr	r3, [r3, #16]
 801094e:	429a      	cmp	r2, r3
 8010950:	d919      	bls.n	8010986 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	68da      	ldr	r2, [r3, #12]
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	691b      	ldr	r3, [r3, #16]
 801095a:	1ad2      	subs	r2, r2, r3
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	68da      	ldr	r2, [r3, #12]
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010968:	429a      	cmp	r2, r3
 801096a:	d203      	bcs.n	8010974 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8010970:	b29b      	uxth	r3, r3
 8010972:	e002      	b.n	801097a <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010978:	b29b      	uxth	r3, r3
 801097a:	461a      	mov	r2, r3
 801097c:	6879      	ldr	r1, [r7, #4]
 801097e:	68f8      	ldr	r0, [r7, #12]
 8010980:	f000 ff18 	bl	80117b4 <USBD_CtlContinueRx>
 8010984:	e038      	b.n	80109f8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801098c:	691b      	ldr	r3, [r3, #16]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d00a      	beq.n	80109a8 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010998:	2b03      	cmp	r3, #3
 801099a:	d105      	bne.n	80109a8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80109a2:	691b      	ldr	r3, [r3, #16]
 80109a4:	68f8      	ldr	r0, [r7, #12]
 80109a6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80109a8:	68f8      	ldr	r0, [r7, #12]
 80109aa:	f000 ff15 	bl	80117d8 <USBD_CtlSendStatus>
 80109ae:	e023      	b.n	80109f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80109b6:	2b05      	cmp	r3, #5
 80109b8:	d11e      	bne.n	80109f8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2200      	movs	r2, #0
 80109be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80109c2:	2100      	movs	r1, #0
 80109c4:	68f8      	ldr	r0, [r7, #12]
 80109c6:	f005 f8fd 	bl	8015bc4 <USBD_LL_StallEP>
 80109ca:	e015      	b.n	80109f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80109d2:	699b      	ldr	r3, [r3, #24]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d00d      	beq.n	80109f4 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80109de:	2b03      	cmp	r3, #3
 80109e0:	d108      	bne.n	80109f4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80109e8:	699b      	ldr	r3, [r3, #24]
 80109ea:	7afa      	ldrb	r2, [r7, #11]
 80109ec:	4611      	mov	r1, r2
 80109ee:	68f8      	ldr	r0, [r7, #12]
 80109f0:	4798      	blx	r3
 80109f2:	e001      	b.n	80109f8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80109f4:	2302      	movs	r3, #2
 80109f6:	e000      	b.n	80109fa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80109f8:	2300      	movs	r3, #0
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3718      	adds	r7, #24
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}

08010a02 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8010a02:	b580      	push	{r7, lr}
 8010a04:	b086      	sub	sp, #24
 8010a06:	af00      	add	r7, sp, #0
 8010a08:	60f8      	str	r0, [r7, #12]
 8010a0a:	460b      	mov	r3, r1
 8010a0c:	607a      	str	r2, [r7, #4]
 8010a0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8010a10:	7afb      	ldrb	r3, [r7, #11]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d17f      	bne.n	8010b16 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	3314      	adds	r3, #20
 8010a1a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010a22:	2b02      	cmp	r3, #2
 8010a24:	d15c      	bne.n	8010ae0 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	68da      	ldr	r2, [r3, #12]
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	691b      	ldr	r3, [r3, #16]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d915      	bls.n	8010a5e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	68da      	ldr	r2, [r3, #12]
 8010a36:	697b      	ldr	r3, [r7, #20]
 8010a38:	691b      	ldr	r3, [r3, #16]
 8010a3a:	1ad2      	subs	r2, r2, r3
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	461a      	mov	r2, r3
 8010a48:	6879      	ldr	r1, [r7, #4]
 8010a4a:	68f8      	ldr	r0, [r7, #12]
 8010a4c:	f000 fe82 	bl	8011754 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010a50:	2300      	movs	r3, #0
 8010a52:	2200      	movs	r2, #0
 8010a54:	2100      	movs	r1, #0
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f005 f960 	bl	8015d1c <USBD_LL_PrepareReceive>
 8010a5c:	e04e      	b.n	8010afc <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	689b      	ldr	r3, [r3, #8]
 8010a62:	697a      	ldr	r2, [r7, #20]
 8010a64:	6912      	ldr	r2, [r2, #16]
 8010a66:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a6a:	fb02 f201 	mul.w	r2, r2, r1
 8010a6e:	1a9b      	subs	r3, r3, r2
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d11c      	bne.n	8010aae <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	689a      	ldr	r2, [r3, #8]
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d316      	bcc.n	8010aae <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	689a      	ldr	r2, [r3, #8]
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d20f      	bcs.n	8010aae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010a8e:	2200      	movs	r2, #0
 8010a90:	2100      	movs	r1, #0
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	f000 fe5e 	bl	8011754 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	2100      	movs	r1, #0
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	f005 f938 	bl	8015d1c <USBD_LL_PrepareReceive>
 8010aac:	e026      	b.n	8010afc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ab4:	68db      	ldr	r3, [r3, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00a      	beq.n	8010ad0 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010ac0:	2b03      	cmp	r3, #3
 8010ac2:	d105      	bne.n	8010ad0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010aca:	68db      	ldr	r3, [r3, #12]
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8010ad0:	2180      	movs	r1, #128	; 0x80
 8010ad2:	68f8      	ldr	r0, [r7, #12]
 8010ad4:	f005 f876 	bl	8015bc4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010ad8:	68f8      	ldr	r0, [r7, #12]
 8010ada:	f000 fe90 	bl	80117fe <USBD_CtlReceiveStatus>
 8010ade:	e00d      	b.n	8010afc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010ae6:	2b04      	cmp	r3, #4
 8010ae8:	d004      	beq.n	8010af4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d103      	bne.n	8010afc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8010af4:	2180      	movs	r1, #128	; 0x80
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	f005 f864 	bl	8015bc4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8010b02:	2b01      	cmp	r3, #1
 8010b04:	d11d      	bne.n	8010b42 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	f7ff fe82 	bl	8010810 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	2200      	movs	r2, #0
 8010b10:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8010b14:	e015      	b.n	8010b42 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b1c:	695b      	ldr	r3, [r3, #20]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d00d      	beq.n	8010b3e <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8010b28:	2b03      	cmp	r3, #3
 8010b2a:	d108      	bne.n	8010b3e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b32:	695b      	ldr	r3, [r3, #20]
 8010b34:	7afa      	ldrb	r2, [r7, #11]
 8010b36:	4611      	mov	r1, r2
 8010b38:	68f8      	ldr	r0, [r7, #12]
 8010b3a:	4798      	blx	r3
 8010b3c:	e001      	b.n	8010b42 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010b3e:	2302      	movs	r3, #2
 8010b40:	e000      	b.n	8010b44 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8010b42:	2300      	movs	r3, #0
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3718      	adds	r7, #24
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b082      	sub	sp, #8
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010b54:	2340      	movs	r3, #64	; 0x40
 8010b56:	2200      	movs	r2, #0
 8010b58:	2100      	movs	r1, #0
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f004 ffed 	bl	8015b3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2201      	movs	r2, #1
 8010b64:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2240      	movs	r2, #64	; 0x40
 8010b6c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010b70:	2340      	movs	r3, #64	; 0x40
 8010b72:	2200      	movs	r2, #0
 8010b74:	2180      	movs	r1, #128	; 0x80
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f004 ffdf 	bl	8015b3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2201      	movs	r2, #1
 8010b80:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2240      	movs	r2, #64	; 0x40
 8010b86:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2200      	movs	r2, #0
 8010b94:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d009      	beq.n	8010bc4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	6852      	ldr	r2, [r2, #4]
 8010bbc:	b2d2      	uxtb	r2, r2
 8010bbe:	4611      	mov	r1, r2
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	4798      	blx	r3
  }

  return USBD_OK;
 8010bc4:	2300      	movs	r3, #0
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3708      	adds	r7, #8
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8010bce:	b480      	push	{r7}
 8010bd0:	b083      	sub	sp, #12
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	78fa      	ldrb	r2, [r7, #3]
 8010bde:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8010be0:	2300      	movs	r3, #0
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	370c      	adds	r7, #12
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr

08010bee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8010bee:	b480      	push	{r7}
 8010bf0:	b083      	sub	sp, #12
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2204      	movs	r2, #4
 8010c06:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010c0a:	2300      	movs	r3, #0
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	370c      	adds	r7, #12
 8010c10:	46bd      	mov	sp, r7
 8010c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c16:	4770      	bx	lr

08010c18 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010c2c:	2300      	movs	r3, #0
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	370c      	adds	r7, #12
 8010c32:	46bd      	mov	sp, r7
 8010c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c38:	4770      	bx	lr

08010c3a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8010c3a:	b580      	push	{r7, lr}
 8010c3c:	b082      	sub	sp, #8
 8010c3e:	af00      	add	r7, sp, #0
 8010c40:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010c48:	2b03      	cmp	r3, #3
 8010c4a:	d10b      	bne.n	8010c64 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010c52:	69db      	ldr	r3, [r3, #28]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d005      	beq.n	8010c64 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010c5e:	69db      	ldr	r3, [r3, #28]
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8010c64:	2300      	movs	r3, #0
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3708      	adds	r7, #8
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8010c6e:	b480      	push	{r7}
 8010c70:	b083      	sub	sp, #12
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
 8010c76:	460b      	mov	r3, r1
 8010c78:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010c7a:	2300      	movs	r3, #0
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	370c      	adds	r7, #12
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr

08010c88 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b083      	sub	sp, #12
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	460b      	mov	r3, r1
 8010c92:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010c94:	2300      	movs	r3, #0
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	370c      	adds	r7, #12
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca0:	4770      	bx	lr

08010ca2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8010ca2:	b480      	push	{r7}
 8010ca4:	b083      	sub	sp, #12
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010caa:	2300      	movs	r3, #0
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	370c      	adds	r7, #12
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr

08010cb8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	6852      	ldr	r2, [r2, #4]
 8010cd4:	b2d2      	uxtb	r2, r2
 8010cd6:	4611      	mov	r1, r2
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	4798      	blx	r3

  return USBD_OK;
 8010cdc:	2300      	movs	r3, #0
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3708      	adds	r7, #8
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
	...

08010ce8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010cfe:	2b20      	cmp	r3, #32
 8010d00:	d004      	beq.n	8010d0c <USBD_StdDevReq+0x24>
 8010d02:	2b40      	cmp	r3, #64	; 0x40
 8010d04:	d002      	beq.n	8010d0c <USBD_StdDevReq+0x24>
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d008      	beq.n	8010d1c <USBD_StdDevReq+0x34>
 8010d0a:	e04c      	b.n	8010da6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d12:	689b      	ldr	r3, [r3, #8]
 8010d14:	6839      	ldr	r1, [r7, #0]
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	4798      	blx	r3
    break;
 8010d1a:	e049      	b.n	8010db0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	785b      	ldrb	r3, [r3, #1]
 8010d20:	2b09      	cmp	r3, #9
 8010d22:	d83a      	bhi.n	8010d9a <USBD_StdDevReq+0xb2>
 8010d24:	a201      	add	r2, pc, #4	; (adr r2, 8010d2c <USBD_StdDevReq+0x44>)
 8010d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d2a:	bf00      	nop
 8010d2c:	08010d7d 	.word	0x08010d7d
 8010d30:	08010d91 	.word	0x08010d91
 8010d34:	08010d9b 	.word	0x08010d9b
 8010d38:	08010d87 	.word	0x08010d87
 8010d3c:	08010d9b 	.word	0x08010d9b
 8010d40:	08010d5f 	.word	0x08010d5f
 8010d44:	08010d55 	.word	0x08010d55
 8010d48:	08010d9b 	.word	0x08010d9b
 8010d4c:	08010d73 	.word	0x08010d73
 8010d50:	08010d69 	.word	0x08010d69
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8010d54:	6839      	ldr	r1, [r7, #0]
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f000 f9d2 	bl	8011100 <USBD_GetDescriptor>
      break;
 8010d5c:	e022      	b.n	8010da4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8010d5e:	6839      	ldr	r1, [r7, #0]
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f000 fac7 	bl	80112f4 <USBD_SetAddress>
      break;
 8010d66:	e01d      	b.n	8010da4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8010d68:	6839      	ldr	r1, [r7, #0]
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 fb04 	bl	8011378 <USBD_SetConfig>
      break;
 8010d70:	e018      	b.n	8010da4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8010d72:	6839      	ldr	r1, [r7, #0]
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 fb8d 	bl	8011494 <USBD_GetConfig>
      break;
 8010d7a:	e013      	b.n	8010da4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8010d7c:	6839      	ldr	r1, [r7, #0]
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 fbbc 	bl	80114fc <USBD_GetStatus>
      break;
 8010d84:	e00e      	b.n	8010da4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8010d86:	6839      	ldr	r1, [r7, #0]
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 fbea 	bl	8011562 <USBD_SetFeature>
      break;
 8010d8e:	e009      	b.n	8010da4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8010d90:	6839      	ldr	r1, [r7, #0]
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f000 fbf9 	bl	801158a <USBD_ClrFeature>
      break;
 8010d98:	e004      	b.n	8010da4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8010d9a:	6839      	ldr	r1, [r7, #0]
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 fc52 	bl	8011646 <USBD_CtlError>
      break;
 8010da2:	bf00      	nop
    }
    break;
 8010da4:	e004      	b.n	8010db0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8010da6:	6839      	ldr	r1, [r7, #0]
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f000 fc4c 	bl	8011646 <USBD_CtlError>
    break;
 8010dae:	bf00      	nop
  }

  return ret;
 8010db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3710      	adds	r7, #16
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop

08010dbc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010dd2:	2b20      	cmp	r3, #32
 8010dd4:	d003      	beq.n	8010dde <USBD_StdItfReq+0x22>
 8010dd6:	2b40      	cmp	r3, #64	; 0x40
 8010dd8:	d001      	beq.n	8010dde <USBD_StdItfReq+0x22>
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d12a      	bne.n	8010e34 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010de4:	3b01      	subs	r3, #1
 8010de6:	2b02      	cmp	r3, #2
 8010de8:	d81d      	bhi.n	8010e26 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	889b      	ldrh	r3, [r3, #4]
 8010dee:	b2db      	uxtb	r3, r3
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d813      	bhi.n	8010e1c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010dfa:	689b      	ldr	r3, [r3, #8]
 8010dfc:	6839      	ldr	r1, [r7, #0]
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	4798      	blx	r3
 8010e02:	4603      	mov	r3, r0
 8010e04:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	88db      	ldrh	r3, [r3, #6]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d110      	bne.n	8010e30 <USBD_StdItfReq+0x74>
 8010e0e:	7bfb      	ldrb	r3, [r7, #15]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d10d      	bne.n	8010e30 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 fcdf 	bl	80117d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010e1a:	e009      	b.n	8010e30 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8010e1c:	6839      	ldr	r1, [r7, #0]
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f000 fc11 	bl	8011646 <USBD_CtlError>
      break;
 8010e24:	e004      	b.n	8010e30 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8010e26:	6839      	ldr	r1, [r7, #0]
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f000 fc0c 	bl	8011646 <USBD_CtlError>
      break;
 8010e2e:	e000      	b.n	8010e32 <USBD_StdItfReq+0x76>
      break;
 8010e30:	bf00      	nop
    }
    break;
 8010e32:	e004      	b.n	8010e3e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8010e34:	6839      	ldr	r1, [r7, #0]
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f000 fc05 	bl	8011646 <USBD_CtlError>
    break;
 8010e3c:	bf00      	nop
  }

  return USBD_OK;
 8010e3e:	2300      	movs	r3, #0
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3710      	adds	r7, #16
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010e52:	2300      	movs	r3, #0
 8010e54:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	889b      	ldrh	r3, [r3, #4]
 8010e5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010e64:	2b20      	cmp	r3, #32
 8010e66:	d004      	beq.n	8010e72 <USBD_StdEPReq+0x2a>
 8010e68:	2b40      	cmp	r3, #64	; 0x40
 8010e6a:	d002      	beq.n	8010e72 <USBD_StdEPReq+0x2a>
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d008      	beq.n	8010e82 <USBD_StdEPReq+0x3a>
 8010e70:	e13b      	b.n	80110ea <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010e78:	689b      	ldr	r3, [r3, #8]
 8010e7a:	6839      	ldr	r1, [r7, #0]
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	4798      	blx	r3
    break;
 8010e80:	e138      	b.n	80110f4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010e8a:	2b20      	cmp	r3, #32
 8010e8c:	d10a      	bne.n	8010ea4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010e94:	689b      	ldr	r3, [r3, #8]
 8010e96:	6839      	ldr	r1, [r7, #0]
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	4798      	blx	r3
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8010ea0:	7bfb      	ldrb	r3, [r7, #15]
 8010ea2:	e128      	b.n	80110f6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	785b      	ldrb	r3, [r3, #1]
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d03e      	beq.n	8010f2a <USBD_StdEPReq+0xe2>
 8010eac:	2b03      	cmp	r3, #3
 8010eae:	d002      	beq.n	8010eb6 <USBD_StdEPReq+0x6e>
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d070      	beq.n	8010f96 <USBD_StdEPReq+0x14e>
 8010eb4:	e113      	b.n	80110de <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010ebc:	2b02      	cmp	r3, #2
 8010ebe:	d002      	beq.n	8010ec6 <USBD_StdEPReq+0x7e>
 8010ec0:	2b03      	cmp	r3, #3
 8010ec2:	d015      	beq.n	8010ef0 <USBD_StdEPReq+0xa8>
 8010ec4:	e02b      	b.n	8010f1e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010ec6:	7bbb      	ldrb	r3, [r7, #14]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d00c      	beq.n	8010ee6 <USBD_StdEPReq+0x9e>
 8010ecc:	7bbb      	ldrb	r3, [r7, #14]
 8010ece:	2b80      	cmp	r3, #128	; 0x80
 8010ed0:	d009      	beq.n	8010ee6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010ed2:	7bbb      	ldrb	r3, [r7, #14]
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f004 fe74 	bl	8015bc4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010edc:	2180      	movs	r1, #128	; 0x80
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f004 fe70 	bl	8015bc4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010ee4:	e020      	b.n	8010f28 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8010ee6:	6839      	ldr	r1, [r7, #0]
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 fbac 	bl	8011646 <USBD_CtlError>
        break;
 8010eee:	e01b      	b.n	8010f28 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	885b      	ldrh	r3, [r3, #2]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d10e      	bne.n	8010f16 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010ef8:	7bbb      	ldrb	r3, [r7, #14]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d00b      	beq.n	8010f16 <USBD_StdEPReq+0xce>
 8010efe:	7bbb      	ldrb	r3, [r7, #14]
 8010f00:	2b80      	cmp	r3, #128	; 0x80
 8010f02:	d008      	beq.n	8010f16 <USBD_StdEPReq+0xce>
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	88db      	ldrh	r3, [r3, #6]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d104      	bne.n	8010f16 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8010f0c:	7bbb      	ldrb	r3, [r7, #14]
 8010f0e:	4619      	mov	r1, r3
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f004 fe57 	bl	8015bc4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f000 fc5e 	bl	80117d8 <USBD_CtlSendStatus>

        break;
 8010f1c:	e004      	b.n	8010f28 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8010f1e:	6839      	ldr	r1, [r7, #0]
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f000 fb90 	bl	8011646 <USBD_CtlError>
        break;
 8010f26:	bf00      	nop
      }
      break;
 8010f28:	e0de      	b.n	80110e8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010f30:	2b02      	cmp	r3, #2
 8010f32:	d002      	beq.n	8010f3a <USBD_StdEPReq+0xf2>
 8010f34:	2b03      	cmp	r3, #3
 8010f36:	d015      	beq.n	8010f64 <USBD_StdEPReq+0x11c>
 8010f38:	e026      	b.n	8010f88 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010f3a:	7bbb      	ldrb	r3, [r7, #14]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d00c      	beq.n	8010f5a <USBD_StdEPReq+0x112>
 8010f40:	7bbb      	ldrb	r3, [r7, #14]
 8010f42:	2b80      	cmp	r3, #128	; 0x80
 8010f44:	d009      	beq.n	8010f5a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010f46:	7bbb      	ldrb	r3, [r7, #14]
 8010f48:	4619      	mov	r1, r3
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f004 fe3a 	bl	8015bc4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010f50:	2180      	movs	r1, #128	; 0x80
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f004 fe36 	bl	8015bc4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010f58:	e01c      	b.n	8010f94 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8010f5a:	6839      	ldr	r1, [r7, #0]
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f000 fb72 	bl	8011646 <USBD_CtlError>
        break;
 8010f62:	e017      	b.n	8010f94 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	885b      	ldrh	r3, [r3, #2]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d112      	bne.n	8010f92 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8010f6c:	7bbb      	ldrb	r3, [r7, #14]
 8010f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d004      	beq.n	8010f80 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8010f76:	7bbb      	ldrb	r3, [r7, #14]
 8010f78:	4619      	mov	r1, r3
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f004 fe41 	bl	8015c02 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f000 fc29 	bl	80117d8 <USBD_CtlSendStatus>
        }
        break;
 8010f86:	e004      	b.n	8010f92 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8010f88:	6839      	ldr	r1, [r7, #0]
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 fb5b 	bl	8011646 <USBD_CtlError>
        break;
 8010f90:	e000      	b.n	8010f94 <USBD_StdEPReq+0x14c>
        break;
 8010f92:	bf00      	nop
      }
      break;
 8010f94:	e0a8      	b.n	80110e8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010f9c:	2b02      	cmp	r3, #2
 8010f9e:	d002      	beq.n	8010fa6 <USBD_StdEPReq+0x15e>
 8010fa0:	2b03      	cmp	r3, #3
 8010fa2:	d031      	beq.n	8011008 <USBD_StdEPReq+0x1c0>
 8010fa4:	e095      	b.n	80110d2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010fa6:	7bbb      	ldrb	r3, [r7, #14]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d007      	beq.n	8010fbc <USBD_StdEPReq+0x174>
 8010fac:	7bbb      	ldrb	r3, [r7, #14]
 8010fae:	2b80      	cmp	r3, #128	; 0x80
 8010fb0:	d004      	beq.n	8010fbc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8010fb2:	6839      	ldr	r1, [r7, #0]
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f000 fb46 	bl	8011646 <USBD_CtlError>
          break;
 8010fba:	e08f      	b.n	80110dc <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	da0b      	bge.n	8010fdc <USBD_StdEPReq+0x194>
 8010fc4:	7bbb      	ldrb	r3, [r7, #14]
 8010fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010fca:	4613      	mov	r3, r2
 8010fcc:	009b      	lsls	r3, r3, #2
 8010fce:	4413      	add	r3, r2
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	3310      	adds	r3, #16
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	4413      	add	r3, r2
 8010fd8:	3304      	adds	r3, #4
 8010fda:	e00a      	b.n	8010ff2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010fdc:	7bbb      	ldrb	r3, [r7, #14]
 8010fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010fe2:	4613      	mov	r3, r2
 8010fe4:	009b      	lsls	r3, r3, #2
 8010fe6:	4413      	add	r3, r2
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	4413      	add	r3, r2
 8010ff2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8010ff4:	68bb      	ldr	r3, [r7, #8]
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	2202      	movs	r2, #2
 8010ffe:	4619      	mov	r1, r3
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f000 fb8b 	bl	801171c <USBD_CtlSendData>
          break;
 8011006:	e069      	b.n	80110dc <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8011008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801100c:	2b00      	cmp	r3, #0
 801100e:	da11      	bge.n	8011034 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011010:	7bbb      	ldrb	r3, [r7, #14]
 8011012:	f003 020f 	and.w	r2, r3, #15
 8011016:	6879      	ldr	r1, [r7, #4]
 8011018:	4613      	mov	r3, r2
 801101a:	009b      	lsls	r3, r3, #2
 801101c:	4413      	add	r3, r2
 801101e:	009b      	lsls	r3, r3, #2
 8011020:	440b      	add	r3, r1
 8011022:	3318      	adds	r3, #24
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d117      	bne.n	801105a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 801102a:	6839      	ldr	r1, [r7, #0]
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f000 fb0a 	bl	8011646 <USBD_CtlError>
            break;
 8011032:	e053      	b.n	80110dc <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011034:	7bbb      	ldrb	r3, [r7, #14]
 8011036:	f003 020f 	and.w	r2, r3, #15
 801103a:	6879      	ldr	r1, [r7, #4]
 801103c:	4613      	mov	r3, r2
 801103e:	009b      	lsls	r3, r3, #2
 8011040:	4413      	add	r3, r2
 8011042:	009b      	lsls	r3, r3, #2
 8011044:	440b      	add	r3, r1
 8011046:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d104      	bne.n	801105a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8011050:	6839      	ldr	r1, [r7, #0]
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 faf7 	bl	8011646 <USBD_CtlError>
            break;
 8011058:	e040      	b.n	80110dc <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801105a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801105e:	2b00      	cmp	r3, #0
 8011060:	da0b      	bge.n	801107a <USBD_StdEPReq+0x232>
 8011062:	7bbb      	ldrb	r3, [r7, #14]
 8011064:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011068:	4613      	mov	r3, r2
 801106a:	009b      	lsls	r3, r3, #2
 801106c:	4413      	add	r3, r2
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	3310      	adds	r3, #16
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	4413      	add	r3, r2
 8011076:	3304      	adds	r3, #4
 8011078:	e00a      	b.n	8011090 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 801107a:	7bbb      	ldrb	r3, [r7, #14]
 801107c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8011080:	4613      	mov	r3, r2
 8011082:	009b      	lsls	r3, r3, #2
 8011084:	4413      	add	r3, r2
 8011086:	009b      	lsls	r3, r3, #2
 8011088:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	4413      	add	r3, r2
 8011090:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011092:	7bbb      	ldrb	r3, [r7, #14]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d002      	beq.n	801109e <USBD_StdEPReq+0x256>
 8011098:	7bbb      	ldrb	r3, [r7, #14]
 801109a:	2b80      	cmp	r3, #128	; 0x80
 801109c:	d103      	bne.n	80110a6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	2200      	movs	r2, #0
 80110a2:	601a      	str	r2, [r3, #0]
 80110a4:	e00e      	b.n	80110c4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80110a6:	7bbb      	ldrb	r3, [r7, #14]
 80110a8:	4619      	mov	r1, r3
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f004 fdc8 	bl	8015c40 <USBD_LL_IsStallEP>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d003      	beq.n	80110be <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	2201      	movs	r2, #1
 80110ba:	601a      	str	r2, [r3, #0]
 80110bc:	e002      	b.n	80110c4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	2200      	movs	r2, #0
 80110c2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	2202      	movs	r2, #2
 80110c8:	4619      	mov	r1, r3
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f000 fb26 	bl	801171c <USBD_CtlSendData>
          break;
 80110d0:	e004      	b.n	80110dc <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80110d2:	6839      	ldr	r1, [r7, #0]
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f000 fab6 	bl	8011646 <USBD_CtlError>
        break;
 80110da:	bf00      	nop
      }
      break;
 80110dc:	e004      	b.n	80110e8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80110de:	6839      	ldr	r1, [r7, #0]
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f000 fab0 	bl	8011646 <USBD_CtlError>
      break;
 80110e6:	bf00      	nop
    }
    break;
 80110e8:	e004      	b.n	80110f4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80110ea:	6839      	ldr	r1, [r7, #0]
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 faaa 	bl	8011646 <USBD_CtlError>
    break;
 80110f2:	bf00      	nop
  }

  return ret;
 80110f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3710      	adds	r7, #16
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
	...

08011100 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	885b      	ldrh	r3, [r3, #2]
 801110e:	0a1b      	lsrs	r3, r3, #8
 8011110:	b29b      	uxth	r3, r3
 8011112:	3b01      	subs	r3, #1
 8011114:	2b06      	cmp	r3, #6
 8011116:	f200 80c9 	bhi.w	80112ac <USBD_GetDescriptor+0x1ac>
 801111a:	a201      	add	r2, pc, #4	; (adr r2, 8011120 <USBD_GetDescriptor+0x20>)
 801111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011120:	0801113d 	.word	0x0801113d
 8011124:	08011155 	.word	0x08011155
 8011128:	08011195 	.word	0x08011195
 801112c:	080112ad 	.word	0x080112ad
 8011130:	080112ad 	.word	0x080112ad
 8011134:	08011259 	.word	0x08011259
 8011138:	0801127f 	.word	0x0801127f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	687a      	ldr	r2, [r7, #4]
 8011146:	7c12      	ldrb	r2, [r2, #16]
 8011148:	f107 010a 	add.w	r1, r7, #10
 801114c:	4610      	mov	r0, r2
 801114e:	4798      	blx	r3
 8011150:	60f8      	str	r0, [r7, #12]
    break;
 8011152:	e0b0      	b.n	80112b6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	7c1b      	ldrb	r3, [r3, #16]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d10d      	bne.n	8011178 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011164:	f107 020a 	add.w	r2, r7, #10
 8011168:	4610      	mov	r0, r2
 801116a:	4798      	blx	r3
 801116c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	3301      	adds	r3, #1
 8011172:	2202      	movs	r2, #2
 8011174:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011176:	e09e      	b.n	80112b6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801117e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011180:	f107 020a 	add.w	r2, r7, #10
 8011184:	4610      	mov	r0, r2
 8011186:	4798      	blx	r3
 8011188:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	3301      	adds	r3, #1
 801118e:	2202      	movs	r2, #2
 8011190:	701a      	strb	r2, [r3, #0]
    break;
 8011192:	e090      	b.n	80112b6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	885b      	ldrh	r3, [r3, #2]
 8011198:	b2db      	uxtb	r3, r3
 801119a:	2b05      	cmp	r3, #5
 801119c:	d856      	bhi.n	801124c <USBD_GetDescriptor+0x14c>
 801119e:	a201      	add	r2, pc, #4	; (adr r2, 80111a4 <USBD_GetDescriptor+0xa4>)
 80111a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111a4:	080111bd 	.word	0x080111bd
 80111a8:	080111d5 	.word	0x080111d5
 80111ac:	080111ed 	.word	0x080111ed
 80111b0:	08011205 	.word	0x08011205
 80111b4:	0801121d 	.word	0x0801121d
 80111b8:	08011235 	.word	0x08011235
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	7c12      	ldrb	r2, [r2, #16]
 80111c8:	f107 010a 	add.w	r1, r7, #10
 80111cc:	4610      	mov	r0, r2
 80111ce:	4798      	blx	r3
 80111d0:	60f8      	str	r0, [r7, #12]
      break;
 80111d2:	e040      	b.n	8011256 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80111da:	689b      	ldr	r3, [r3, #8]
 80111dc:	687a      	ldr	r2, [r7, #4]
 80111de:	7c12      	ldrb	r2, [r2, #16]
 80111e0:	f107 010a 	add.w	r1, r7, #10
 80111e4:	4610      	mov	r0, r2
 80111e6:	4798      	blx	r3
 80111e8:	60f8      	str	r0, [r7, #12]
      break;
 80111ea:	e034      	b.n	8011256 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	687a      	ldr	r2, [r7, #4]
 80111f6:	7c12      	ldrb	r2, [r2, #16]
 80111f8:	f107 010a 	add.w	r1, r7, #10
 80111fc:	4610      	mov	r0, r2
 80111fe:	4798      	blx	r3
 8011200:	60f8      	str	r0, [r7, #12]
      break;
 8011202:	e028      	b.n	8011256 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801120a:	691b      	ldr	r3, [r3, #16]
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	7c12      	ldrb	r2, [r2, #16]
 8011210:	f107 010a 	add.w	r1, r7, #10
 8011214:	4610      	mov	r0, r2
 8011216:	4798      	blx	r3
 8011218:	60f8      	str	r0, [r7, #12]
      break;
 801121a:	e01c      	b.n	8011256 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011222:	695b      	ldr	r3, [r3, #20]
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	7c12      	ldrb	r2, [r2, #16]
 8011228:	f107 010a 	add.w	r1, r7, #10
 801122c:	4610      	mov	r0, r2
 801122e:	4798      	blx	r3
 8011230:	60f8      	str	r0, [r7, #12]
      break;
 8011232:	e010      	b.n	8011256 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801123a:	699b      	ldr	r3, [r3, #24]
 801123c:	687a      	ldr	r2, [r7, #4]
 801123e:	7c12      	ldrb	r2, [r2, #16]
 8011240:	f107 010a 	add.w	r1, r7, #10
 8011244:	4610      	mov	r0, r2
 8011246:	4798      	blx	r3
 8011248:	60f8      	str	r0, [r7, #12]
      break;
 801124a:	e004      	b.n	8011256 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 801124c:	6839      	ldr	r1, [r7, #0]
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 f9f9 	bl	8011646 <USBD_CtlError>
      return;
 8011254:	e04b      	b.n	80112ee <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8011256:	e02e      	b.n	80112b6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	7c1b      	ldrb	r3, [r3, #16]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d109      	bne.n	8011274 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011268:	f107 020a 	add.w	r2, r7, #10
 801126c:	4610      	mov	r0, r2
 801126e:	4798      	blx	r3
 8011270:	60f8      	str	r0, [r7, #12]
      break;
 8011272:	e020      	b.n	80112b6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8011274:	6839      	ldr	r1, [r7, #0]
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f000 f9e5 	bl	8011646 <USBD_CtlError>
      return;
 801127c:	e037      	b.n	80112ee <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	7c1b      	ldrb	r3, [r3, #16]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d10d      	bne.n	80112a2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801128e:	f107 020a 	add.w	r2, r7, #10
 8011292:	4610      	mov	r0, r2
 8011294:	4798      	blx	r3
 8011296:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	3301      	adds	r3, #1
 801129c:	2207      	movs	r2, #7
 801129e:	701a      	strb	r2, [r3, #0]
      break;
 80112a0:	e009      	b.n	80112b6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80112a2:	6839      	ldr	r1, [r7, #0]
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f000 f9ce 	bl	8011646 <USBD_CtlError>
      return;
 80112aa:	e020      	b.n	80112ee <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80112ac:	6839      	ldr	r1, [r7, #0]
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f000 f9c9 	bl	8011646 <USBD_CtlError>
    return;
 80112b4:	e01b      	b.n	80112ee <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80112b6:	897b      	ldrh	r3, [r7, #10]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d011      	beq.n	80112e0 <USBD_GetDescriptor+0x1e0>
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	88db      	ldrh	r3, [r3, #6]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d00d      	beq.n	80112e0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	88da      	ldrh	r2, [r3, #6]
 80112c8:	897b      	ldrh	r3, [r7, #10]
 80112ca:	4293      	cmp	r3, r2
 80112cc:	bf28      	it	cs
 80112ce:	4613      	movcs	r3, r2
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80112d4:	897b      	ldrh	r3, [r7, #10]
 80112d6:	461a      	mov	r2, r3
 80112d8:	68f9      	ldr	r1, [r7, #12]
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f000 fa1e 	bl	801171c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	88db      	ldrh	r3, [r3, #6]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d102      	bne.n	80112ee <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f000 fa75 	bl	80117d8 <USBD_CtlSendStatus>
  }
}
 80112ee:	3710      	adds	r7, #16
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b084      	sub	sp, #16
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	889b      	ldrh	r3, [r3, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d130      	bne.n	8011368 <USBD_SetAddress+0x74>
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	88db      	ldrh	r3, [r3, #6]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d12c      	bne.n	8011368 <USBD_SetAddress+0x74>
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	885b      	ldrh	r3, [r3, #2]
 8011312:	2b7f      	cmp	r3, #127	; 0x7f
 8011314:	d828      	bhi.n	8011368 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	885b      	ldrh	r3, [r3, #2]
 801131a:	b2db      	uxtb	r3, r3
 801131c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011320:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011328:	2b03      	cmp	r3, #3
 801132a:	d104      	bne.n	8011336 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 801132c:	6839      	ldr	r1, [r7, #0]
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 f989 	bl	8011646 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011334:	e01c      	b.n	8011370 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	7bfa      	ldrb	r2, [r7, #15]
 801133a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801133e:	7bfb      	ldrb	r3, [r7, #15]
 8011340:	4619      	mov	r1, r3
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f004 fca8 	bl	8015c98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f000 fa45 	bl	80117d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801134e:	7bfb      	ldrb	r3, [r7, #15]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d004      	beq.n	801135e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2202      	movs	r2, #2
 8011358:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801135c:	e008      	b.n	8011370 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2201      	movs	r2, #1
 8011362:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011366:	e003      	b.n	8011370 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011368:	6839      	ldr	r1, [r7, #0]
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f000 f96b 	bl	8011646 <USBD_CtlError>
  }
}
 8011370:	bf00      	nop
 8011372:	3710      	adds	r7, #16
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	885b      	ldrh	r3, [r3, #2]
 8011386:	b2da      	uxtb	r2, r3
 8011388:	4b41      	ldr	r3, [pc, #260]	; (8011490 <USBD_SetConfig+0x118>)
 801138a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801138c:	4b40      	ldr	r3, [pc, #256]	; (8011490 <USBD_SetConfig+0x118>)
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	2b01      	cmp	r3, #1
 8011392:	d904      	bls.n	801139e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8011394:	6839      	ldr	r1, [r7, #0]
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f000 f955 	bl	8011646 <USBD_CtlError>
 801139c:	e075      	b.n	801148a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80113a4:	2b02      	cmp	r3, #2
 80113a6:	d002      	beq.n	80113ae <USBD_SetConfig+0x36>
 80113a8:	2b03      	cmp	r3, #3
 80113aa:	d023      	beq.n	80113f4 <USBD_SetConfig+0x7c>
 80113ac:	e062      	b.n	8011474 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80113ae:	4b38      	ldr	r3, [pc, #224]	; (8011490 <USBD_SetConfig+0x118>)
 80113b0:	781b      	ldrb	r3, [r3, #0]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d01a      	beq.n	80113ec <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80113b6:	4b36      	ldr	r3, [pc, #216]	; (8011490 <USBD_SetConfig+0x118>)
 80113b8:	781b      	ldrb	r3, [r3, #0]
 80113ba:	461a      	mov	r2, r3
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2203      	movs	r2, #3
 80113c4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80113c8:	4b31      	ldr	r3, [pc, #196]	; (8011490 <USBD_SetConfig+0x118>)
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	4619      	mov	r1, r3
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f7ff fa29 	bl	8010826 <USBD_SetClassConfig>
 80113d4:	4603      	mov	r3, r0
 80113d6:	2b02      	cmp	r3, #2
 80113d8:	d104      	bne.n	80113e4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80113da:	6839      	ldr	r1, [r7, #0]
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f000 f932 	bl	8011646 <USBD_CtlError>
          return;
 80113e2:	e052      	b.n	801148a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f000 f9f7 	bl	80117d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80113ea:	e04e      	b.n	801148a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f000 f9f3 	bl	80117d8 <USBD_CtlSendStatus>
      break;
 80113f2:	e04a      	b.n	801148a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80113f4:	4b26      	ldr	r3, [pc, #152]	; (8011490 <USBD_SetConfig+0x118>)
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d112      	bne.n	8011422 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2202      	movs	r2, #2
 8011400:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8011404:	4b22      	ldr	r3, [pc, #136]	; (8011490 <USBD_SetConfig+0x118>)
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	461a      	mov	r2, r3
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 801140e:	4b20      	ldr	r3, [pc, #128]	; (8011490 <USBD_SetConfig+0x118>)
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	4619      	mov	r1, r3
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	f7ff fa25 	bl	8010864 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f000 f9dc 	bl	80117d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8011420:	e033      	b.n	801148a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8011422:	4b1b      	ldr	r3, [pc, #108]	; (8011490 <USBD_SetConfig+0x118>)
 8011424:	781b      	ldrb	r3, [r3, #0]
 8011426:	461a      	mov	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	429a      	cmp	r2, r3
 801142e:	d01d      	beq.n	801146c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	b2db      	uxtb	r3, r3
 8011436:	4619      	mov	r1, r3
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f7ff fa13 	bl	8010864 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801143e:	4b14      	ldr	r3, [pc, #80]	; (8011490 <USBD_SetConfig+0x118>)
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	461a      	mov	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011448:	4b11      	ldr	r3, [pc, #68]	; (8011490 <USBD_SetConfig+0x118>)
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	4619      	mov	r1, r3
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f7ff f9e9 	bl	8010826 <USBD_SetClassConfig>
 8011454:	4603      	mov	r3, r0
 8011456:	2b02      	cmp	r3, #2
 8011458:	d104      	bne.n	8011464 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 801145a:	6839      	ldr	r1, [r7, #0]
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f000 f8f2 	bl	8011646 <USBD_CtlError>
          return;
 8011462:	e012      	b.n	801148a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f000 f9b7 	bl	80117d8 <USBD_CtlSendStatus>
      break;
 801146a:	e00e      	b.n	801148a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f000 f9b3 	bl	80117d8 <USBD_CtlSendStatus>
      break;
 8011472:	e00a      	b.n	801148a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8011474:	6839      	ldr	r1, [r7, #0]
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f000 f8e5 	bl	8011646 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 801147c:	4b04      	ldr	r3, [pc, #16]	; (8011490 <USBD_SetConfig+0x118>)
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	4619      	mov	r1, r3
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f7ff f9ee 	bl	8010864 <USBD_ClrClassConfig>
      break;
 8011488:	bf00      	nop
    }
  }
}
 801148a:	3708      	adds	r7, #8
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}
 8011490:	20000be8 	.word	0x20000be8

08011494 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	88db      	ldrh	r3, [r3, #6]
 80114a2:	2b01      	cmp	r3, #1
 80114a4:	d004      	beq.n	80114b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80114a6:	6839      	ldr	r1, [r7, #0]
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f000 f8cc 	bl	8011646 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80114ae:	e021      	b.n	80114f4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80114b6:	2b01      	cmp	r3, #1
 80114b8:	db17      	blt.n	80114ea <USBD_GetConfig+0x56>
 80114ba:	2b02      	cmp	r3, #2
 80114bc:	dd02      	ble.n	80114c4 <USBD_GetConfig+0x30>
 80114be:	2b03      	cmp	r3, #3
 80114c0:	d00b      	beq.n	80114da <USBD_GetConfig+0x46>
 80114c2:	e012      	b.n	80114ea <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2200      	movs	r2, #0
 80114c8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	3308      	adds	r3, #8
 80114ce:	2201      	movs	r2, #1
 80114d0:	4619      	mov	r1, r3
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f000 f922 	bl	801171c <USBD_CtlSendData>
      break;
 80114d8:	e00c      	b.n	80114f4 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	3304      	adds	r3, #4
 80114de:	2201      	movs	r2, #1
 80114e0:	4619      	mov	r1, r3
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 f91a 	bl	801171c <USBD_CtlSendData>
      break;
 80114e8:	e004      	b.n	80114f4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80114ea:	6839      	ldr	r1, [r7, #0]
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f000 f8aa 	bl	8011646 <USBD_CtlError>
      break;
 80114f2:	bf00      	nop
}
 80114f4:	bf00      	nop
 80114f6:	3708      	adds	r7, #8
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}

080114fc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b082      	sub	sp, #8
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801150c:	3b01      	subs	r3, #1
 801150e:	2b02      	cmp	r3, #2
 8011510:	d81e      	bhi.n	8011550 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	88db      	ldrh	r3, [r3, #6]
 8011516:	2b02      	cmp	r3, #2
 8011518:	d004      	beq.n	8011524 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801151a:	6839      	ldr	r1, [r7, #0]
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f000 f892 	bl	8011646 <USBD_CtlError>
      break;
 8011522:	e01a      	b.n	801155a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2201      	movs	r2, #1
 8011528:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8011530:	2b00      	cmp	r3, #0
 8011532:	d005      	beq.n	8011540 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	f043 0202 	orr.w	r2, r3, #2
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	330c      	adds	r3, #12
 8011544:	2202      	movs	r2, #2
 8011546:	4619      	mov	r1, r3
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f000 f8e7 	bl	801171c <USBD_CtlSendData>
    break;
 801154e:	e004      	b.n	801155a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8011550:	6839      	ldr	r1, [r7, #0]
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f000 f877 	bl	8011646 <USBD_CtlError>
    break;
 8011558:	bf00      	nop
  }
}
 801155a:	bf00      	nop
 801155c:	3708      	adds	r7, #8
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}

08011562 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011562:	b580      	push	{r7, lr}
 8011564:	b082      	sub	sp, #8
 8011566:	af00      	add	r7, sp, #0
 8011568:	6078      	str	r0, [r7, #4]
 801156a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	885b      	ldrh	r3, [r3, #2]
 8011570:	2b01      	cmp	r3, #1
 8011572:	d106      	bne.n	8011582 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2201      	movs	r2, #1
 8011578:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f000 f92b 	bl	80117d8 <USBD_CtlSendStatus>
  }

}
 8011582:	bf00      	nop
 8011584:	3708      	adds	r7, #8
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}

0801158a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801158a:	b580      	push	{r7, lr}
 801158c:	b082      	sub	sp, #8
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
 8011592:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801159a:	3b01      	subs	r3, #1
 801159c:	2b02      	cmp	r3, #2
 801159e:	d80b      	bhi.n	80115b8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	885b      	ldrh	r3, [r3, #2]
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	d10c      	bne.n	80115c2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2200      	movs	r2, #0
 80115ac:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 f911 	bl	80117d8 <USBD_CtlSendStatus>
    }
    break;
 80115b6:	e004      	b.n	80115c2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80115b8:	6839      	ldr	r1, [r7, #0]
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 f843 	bl	8011646 <USBD_CtlError>
    break;
 80115c0:	e000      	b.n	80115c4 <USBD_ClrFeature+0x3a>
    break;
 80115c2:	bf00      	nop
  }
}
 80115c4:	bf00      	nop
 80115c6:	3708      	adds	r7, #8
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}

080115cc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80115cc:	b480      	push	{r7}
 80115ce:	b083      	sub	sp, #12
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	781a      	ldrb	r2, [r3, #0]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	785a      	ldrb	r2, [r3, #1]
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	3302      	adds	r3, #2
 80115ea:	781b      	ldrb	r3, [r3, #0]
 80115ec:	b29a      	uxth	r2, r3
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	3303      	adds	r3, #3
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	b29b      	uxth	r3, r3
 80115f6:	021b      	lsls	r3, r3, #8
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	4413      	add	r3, r2
 80115fc:	b29a      	uxth	r2, r3
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	3304      	adds	r3, #4
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	b29a      	uxth	r2, r3
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	3305      	adds	r3, #5
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	b29b      	uxth	r3, r3
 8011612:	021b      	lsls	r3, r3, #8
 8011614:	b29b      	uxth	r3, r3
 8011616:	4413      	add	r3, r2
 8011618:	b29a      	uxth	r2, r3
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	3306      	adds	r3, #6
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	b29a      	uxth	r2, r3
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	3307      	adds	r3, #7
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	b29b      	uxth	r3, r3
 801162e:	021b      	lsls	r3, r3, #8
 8011630:	b29b      	uxth	r3, r3
 8011632:	4413      	add	r3, r2
 8011634:	b29a      	uxth	r2, r3
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	80da      	strh	r2, [r3, #6]

}
 801163a:	bf00      	nop
 801163c:	370c      	adds	r7, #12
 801163e:	46bd      	mov	sp, r7
 8011640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011644:	4770      	bx	lr

08011646 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011646:	b580      	push	{r7, lr}
 8011648:	b082      	sub	sp, #8
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]
 801164e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8011650:	2180      	movs	r1, #128	; 0x80
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f004 fab6 	bl	8015bc4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8011658:	2100      	movs	r1, #0
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f004 fab2 	bl	8015bc4 <USBD_LL_StallEP>
}
 8011660:	bf00      	nop
 8011662:	3708      	adds	r7, #8
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}

08011668 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b086      	sub	sp, #24
 801166c:	af00      	add	r7, sp, #0
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	60b9      	str	r1, [r7, #8]
 8011672:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011674:	2300      	movs	r3, #0
 8011676:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d032      	beq.n	80116e4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801167e:	68f8      	ldr	r0, [r7, #12]
 8011680:	f000 f834 	bl	80116ec <USBD_GetLen>
 8011684:	4603      	mov	r3, r0
 8011686:	3301      	adds	r3, #1
 8011688:	b29b      	uxth	r3, r3
 801168a:	005b      	lsls	r3, r3, #1
 801168c:	b29a      	uxth	r2, r3
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8011692:	7dfb      	ldrb	r3, [r7, #23]
 8011694:	1c5a      	adds	r2, r3, #1
 8011696:	75fa      	strb	r2, [r7, #23]
 8011698:	461a      	mov	r2, r3
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	4413      	add	r3, r2
 801169e:	687a      	ldr	r2, [r7, #4]
 80116a0:	7812      	ldrb	r2, [r2, #0]
 80116a2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80116a4:	7dfb      	ldrb	r3, [r7, #23]
 80116a6:	1c5a      	adds	r2, r3, #1
 80116a8:	75fa      	strb	r2, [r7, #23]
 80116aa:	461a      	mov	r2, r3
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	4413      	add	r3, r2
 80116b0:	2203      	movs	r2, #3
 80116b2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80116b4:	e012      	b.n	80116dc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	1c5a      	adds	r2, r3, #1
 80116ba:	60fa      	str	r2, [r7, #12]
 80116bc:	7dfa      	ldrb	r2, [r7, #23]
 80116be:	1c51      	adds	r1, r2, #1
 80116c0:	75f9      	strb	r1, [r7, #23]
 80116c2:	4611      	mov	r1, r2
 80116c4:	68ba      	ldr	r2, [r7, #8]
 80116c6:	440a      	add	r2, r1
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80116cc:	7dfb      	ldrb	r3, [r7, #23]
 80116ce:	1c5a      	adds	r2, r3, #1
 80116d0:	75fa      	strb	r2, [r7, #23]
 80116d2:	461a      	mov	r2, r3
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	4413      	add	r3, r2
 80116d8:	2200      	movs	r2, #0
 80116da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	781b      	ldrb	r3, [r3, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d1e8      	bne.n	80116b6 <USBD_GetString+0x4e>
    }
  }
}
 80116e4:	bf00      	nop
 80116e6:	3718      	adds	r7, #24
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}

080116ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80116ec:	b480      	push	{r7}
 80116ee:	b085      	sub	sp, #20
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80116f4:	2300      	movs	r3, #0
 80116f6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80116f8:	e005      	b.n	8011706 <USBD_GetLen+0x1a>
    {
        len++;
 80116fa:	7bfb      	ldrb	r3, [r7, #15]
 80116fc:	3301      	adds	r3, #1
 80116fe:	73fb      	strb	r3, [r7, #15]
        buf++;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	3301      	adds	r3, #1
 8011704:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	781b      	ldrb	r3, [r3, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d1f5      	bne.n	80116fa <USBD_GetLen+0xe>
    }

    return len;
 801170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011710:	4618      	mov	r0, r3
 8011712:	3714      	adds	r7, #20
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr

0801171c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b084      	sub	sp, #16
 8011720:	af00      	add	r7, sp, #0
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	4613      	mov	r3, r2
 8011728:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2202      	movs	r2, #2
 801172e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8011732:	88fa      	ldrh	r2, [r7, #6]
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8011738:	88fa      	ldrh	r2, [r7, #6]
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 801173e:	88fb      	ldrh	r3, [r7, #6]
 8011740:	68ba      	ldr	r2, [r7, #8]
 8011742:	2100      	movs	r1, #0
 8011744:	68f8      	ldr	r0, [r7, #12]
 8011746:	f004 fac6 	bl	8015cd6 <USBD_LL_Transmit>

  return USBD_OK;
 801174a:	2300      	movs	r3, #0
}
 801174c:	4618      	mov	r0, r3
 801174e:	3710      	adds	r7, #16
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}

08011754 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b084      	sub	sp, #16
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	60b9      	str	r1, [r7, #8]
 801175e:	4613      	mov	r3, r2
 8011760:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8011762:	88fb      	ldrh	r3, [r7, #6]
 8011764:	68ba      	ldr	r2, [r7, #8]
 8011766:	2100      	movs	r1, #0
 8011768:	68f8      	ldr	r0, [r7, #12]
 801176a:	f004 fab4 	bl	8015cd6 <USBD_LL_Transmit>

  return USBD_OK;
 801176e:	2300      	movs	r3, #0
}
 8011770:	4618      	mov	r0, r3
 8011772:	3710      	adds	r7, #16
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}

08011778 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
 801177e:	60f8      	str	r0, [r7, #12]
 8011780:	60b9      	str	r1, [r7, #8]
 8011782:	4613      	mov	r3, r2
 8011784:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2203      	movs	r2, #3
 801178a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 801178e:	88fa      	ldrh	r2, [r7, #6]
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8011796:	88fa      	ldrh	r2, [r7, #6]
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 801179e:	88fb      	ldrh	r3, [r7, #6]
 80117a0:	68ba      	ldr	r2, [r7, #8]
 80117a2:	2100      	movs	r1, #0
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	f004 fab9 	bl	8015d1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80117aa:	2300      	movs	r3, #0
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3710      	adds	r7, #16
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}

080117b4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	60f8      	str	r0, [r7, #12]
 80117bc:	60b9      	str	r1, [r7, #8]
 80117be:	4613      	mov	r3, r2
 80117c0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80117c2:	88fb      	ldrh	r3, [r7, #6]
 80117c4:	68ba      	ldr	r2, [r7, #8]
 80117c6:	2100      	movs	r1, #0
 80117c8:	68f8      	ldr	r0, [r7, #12]
 80117ca:	f004 faa7 	bl	8015d1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80117ce:	2300      	movs	r3, #0
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3710      	adds	r7, #16
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2204      	movs	r2, #4
 80117e4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80117e8:	2300      	movs	r3, #0
 80117ea:	2200      	movs	r2, #0
 80117ec:	2100      	movs	r1, #0
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f004 fa71 	bl	8015cd6 <USBD_LL_Transmit>

  return USBD_OK;
 80117f4:	2300      	movs	r3, #0
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3708      	adds	r7, #8
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}

080117fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80117fe:	b580      	push	{r7, lr}
 8011800:	b082      	sub	sp, #8
 8011802:	af00      	add	r7, sp, #0
 8011804:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2205      	movs	r2, #5
 801180a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 801180e:	2300      	movs	r3, #0
 8011810:	2200      	movs	r2, #0
 8011812:	2100      	movs	r1, #0
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f004 fa81 	bl	8015d1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801181a:	2300      	movs	r3, #0
}
 801181c:	4618      	mov	r0, r3
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}

08011824 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b084      	sub	sp, #16
 8011828:	af00      	add	r7, sp, #0
 801182a:	4603      	mov	r3, r0
 801182c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801182e:	79fb      	ldrb	r3, [r7, #7]
 8011830:	4a08      	ldr	r2, [pc, #32]	; (8011854 <disk_status+0x30>)
 8011832:	009b      	lsls	r3, r3, #2
 8011834:	4413      	add	r3, r2
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	79fa      	ldrb	r2, [r7, #7]
 801183c:	4905      	ldr	r1, [pc, #20]	; (8011854 <disk_status+0x30>)
 801183e:	440a      	add	r2, r1
 8011840:	7a12      	ldrb	r2, [r2, #8]
 8011842:	4610      	mov	r0, r2
 8011844:	4798      	blx	r3
 8011846:	4603      	mov	r3, r0
 8011848:	73fb      	strb	r3, [r7, #15]
  return stat;
 801184a:	7bfb      	ldrb	r3, [r7, #15]
}
 801184c:	4618      	mov	r0, r3
 801184e:	3710      	adds	r7, #16
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	20000e14 	.word	0x20000e14

08011858 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b084      	sub	sp, #16
 801185c:	af00      	add	r7, sp, #0
 801185e:	4603      	mov	r3, r0
 8011860:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011862:	2300      	movs	r3, #0
 8011864:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011866:	79fb      	ldrb	r3, [r7, #7]
 8011868:	4a0d      	ldr	r2, [pc, #52]	; (80118a0 <disk_initialize+0x48>)
 801186a:	5cd3      	ldrb	r3, [r2, r3]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d111      	bne.n	8011894 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011870:	79fb      	ldrb	r3, [r7, #7]
 8011872:	4a0b      	ldr	r2, [pc, #44]	; (80118a0 <disk_initialize+0x48>)
 8011874:	2101      	movs	r1, #1
 8011876:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011878:	79fb      	ldrb	r3, [r7, #7]
 801187a:	4a09      	ldr	r2, [pc, #36]	; (80118a0 <disk_initialize+0x48>)
 801187c:	009b      	lsls	r3, r3, #2
 801187e:	4413      	add	r3, r2
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	79fa      	ldrb	r2, [r7, #7]
 8011886:	4906      	ldr	r1, [pc, #24]	; (80118a0 <disk_initialize+0x48>)
 8011888:	440a      	add	r2, r1
 801188a:	7a12      	ldrb	r2, [r2, #8]
 801188c:	4610      	mov	r0, r2
 801188e:	4798      	blx	r3
 8011890:	4603      	mov	r3, r0
 8011892:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011894:	7bfb      	ldrb	r3, [r7, #15]
}
 8011896:	4618      	mov	r0, r3
 8011898:	3710      	adds	r7, #16
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
 801189e:	bf00      	nop
 80118a0:	20000e14 	.word	0x20000e14

080118a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80118a4:	b590      	push	{r4, r7, lr}
 80118a6:	b087      	sub	sp, #28
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60b9      	str	r1, [r7, #8]
 80118ac:	607a      	str	r2, [r7, #4]
 80118ae:	603b      	str	r3, [r7, #0]
 80118b0:	4603      	mov	r3, r0
 80118b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80118b4:	7bfb      	ldrb	r3, [r7, #15]
 80118b6:	4a0a      	ldr	r2, [pc, #40]	; (80118e0 <disk_read+0x3c>)
 80118b8:	009b      	lsls	r3, r3, #2
 80118ba:	4413      	add	r3, r2
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	689c      	ldr	r4, [r3, #8]
 80118c0:	7bfb      	ldrb	r3, [r7, #15]
 80118c2:	4a07      	ldr	r2, [pc, #28]	; (80118e0 <disk_read+0x3c>)
 80118c4:	4413      	add	r3, r2
 80118c6:	7a18      	ldrb	r0, [r3, #8]
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	687a      	ldr	r2, [r7, #4]
 80118cc:	68b9      	ldr	r1, [r7, #8]
 80118ce:	47a0      	blx	r4
 80118d0:	4603      	mov	r3, r0
 80118d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80118d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	371c      	adds	r7, #28
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd90      	pop	{r4, r7, pc}
 80118de:	bf00      	nop
 80118e0:	20000e14 	.word	0x20000e14

080118e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80118e4:	b590      	push	{r4, r7, lr}
 80118e6:	b087      	sub	sp, #28
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60b9      	str	r1, [r7, #8]
 80118ec:	607a      	str	r2, [r7, #4]
 80118ee:	603b      	str	r3, [r7, #0]
 80118f0:	4603      	mov	r3, r0
 80118f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80118f4:	7bfb      	ldrb	r3, [r7, #15]
 80118f6:	4a0a      	ldr	r2, [pc, #40]	; (8011920 <disk_write+0x3c>)
 80118f8:	009b      	lsls	r3, r3, #2
 80118fa:	4413      	add	r3, r2
 80118fc:	685b      	ldr	r3, [r3, #4]
 80118fe:	68dc      	ldr	r4, [r3, #12]
 8011900:	7bfb      	ldrb	r3, [r7, #15]
 8011902:	4a07      	ldr	r2, [pc, #28]	; (8011920 <disk_write+0x3c>)
 8011904:	4413      	add	r3, r2
 8011906:	7a18      	ldrb	r0, [r3, #8]
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	68b9      	ldr	r1, [r7, #8]
 801190e:	47a0      	blx	r4
 8011910:	4603      	mov	r3, r0
 8011912:	75fb      	strb	r3, [r7, #23]
  return res;
 8011914:	7dfb      	ldrb	r3, [r7, #23]
}
 8011916:	4618      	mov	r0, r3
 8011918:	371c      	adds	r7, #28
 801191a:	46bd      	mov	sp, r7
 801191c:	bd90      	pop	{r4, r7, pc}
 801191e:	bf00      	nop
 8011920:	20000e14 	.word	0x20000e14

08011924 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b084      	sub	sp, #16
 8011928:	af00      	add	r7, sp, #0
 801192a:	4603      	mov	r3, r0
 801192c:	603a      	str	r2, [r7, #0]
 801192e:	71fb      	strb	r3, [r7, #7]
 8011930:	460b      	mov	r3, r1
 8011932:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011934:	79fb      	ldrb	r3, [r7, #7]
 8011936:	4a09      	ldr	r2, [pc, #36]	; (801195c <disk_ioctl+0x38>)
 8011938:	009b      	lsls	r3, r3, #2
 801193a:	4413      	add	r3, r2
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	691b      	ldr	r3, [r3, #16]
 8011940:	79fa      	ldrb	r2, [r7, #7]
 8011942:	4906      	ldr	r1, [pc, #24]	; (801195c <disk_ioctl+0x38>)
 8011944:	440a      	add	r2, r1
 8011946:	7a10      	ldrb	r0, [r2, #8]
 8011948:	79b9      	ldrb	r1, [r7, #6]
 801194a:	683a      	ldr	r2, [r7, #0]
 801194c:	4798      	blx	r3
 801194e:	4603      	mov	r3, r0
 8011950:	73fb      	strb	r3, [r7, #15]
  return res;
 8011952:	7bfb      	ldrb	r3, [r7, #15]
}
 8011954:	4618      	mov	r0, r3
 8011956:	3710      	adds	r7, #16
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}
 801195c:	20000e14 	.word	0x20000e14

08011960 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011960:	b480      	push	{r7}
 8011962:	b085      	sub	sp, #20
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	3301      	adds	r3, #1
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011970:	89fb      	ldrh	r3, [r7, #14]
 8011972:	021b      	lsls	r3, r3, #8
 8011974:	b21a      	sxth	r2, r3
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	b21b      	sxth	r3, r3
 801197c:	4313      	orrs	r3, r2
 801197e:	b21b      	sxth	r3, r3
 8011980:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011982:	89fb      	ldrh	r3, [r7, #14]
}
 8011984:	4618      	mov	r0, r3
 8011986:	3714      	adds	r7, #20
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr

08011990 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011990:	b480      	push	{r7}
 8011992:	b085      	sub	sp, #20
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	3303      	adds	r3, #3
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	021b      	lsls	r3, r3, #8
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	3202      	adds	r2, #2
 80119a8:	7812      	ldrb	r2, [r2, #0]
 80119aa:	4313      	orrs	r3, r2
 80119ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	021b      	lsls	r3, r3, #8
 80119b2:	687a      	ldr	r2, [r7, #4]
 80119b4:	3201      	adds	r2, #1
 80119b6:	7812      	ldrb	r2, [r2, #0]
 80119b8:	4313      	orrs	r3, r2
 80119ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	021b      	lsls	r3, r3, #8
 80119c0:	687a      	ldr	r2, [r7, #4]
 80119c2:	7812      	ldrb	r2, [r2, #0]
 80119c4:	4313      	orrs	r3, r2
 80119c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80119c8:	68fb      	ldr	r3, [r7, #12]
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3714      	adds	r7, #20
 80119ce:	46bd      	mov	sp, r7
 80119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d4:	4770      	bx	lr

080119d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80119d6:	b480      	push	{r7}
 80119d8:	b083      	sub	sp, #12
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
 80119de:	460b      	mov	r3, r1
 80119e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	1c5a      	adds	r2, r3, #1
 80119e6:	607a      	str	r2, [r7, #4]
 80119e8:	887a      	ldrh	r2, [r7, #2]
 80119ea:	b2d2      	uxtb	r2, r2
 80119ec:	701a      	strb	r2, [r3, #0]
 80119ee:	887b      	ldrh	r3, [r7, #2]
 80119f0:	0a1b      	lsrs	r3, r3, #8
 80119f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	1c5a      	adds	r2, r3, #1
 80119f8:	607a      	str	r2, [r7, #4]
 80119fa:	887a      	ldrh	r2, [r7, #2]
 80119fc:	b2d2      	uxtb	r2, r2
 80119fe:	701a      	strb	r2, [r3, #0]
}
 8011a00:	bf00      	nop
 8011a02:	370c      	adds	r7, #12
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr

08011a0c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
 8011a14:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	1c5a      	adds	r2, r3, #1
 8011a1a:	607a      	str	r2, [r7, #4]
 8011a1c:	683a      	ldr	r2, [r7, #0]
 8011a1e:	b2d2      	uxtb	r2, r2
 8011a20:	701a      	strb	r2, [r3, #0]
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	0a1b      	lsrs	r3, r3, #8
 8011a26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	1c5a      	adds	r2, r3, #1
 8011a2c:	607a      	str	r2, [r7, #4]
 8011a2e:	683a      	ldr	r2, [r7, #0]
 8011a30:	b2d2      	uxtb	r2, r2
 8011a32:	701a      	strb	r2, [r3, #0]
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	0a1b      	lsrs	r3, r3, #8
 8011a38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	1c5a      	adds	r2, r3, #1
 8011a3e:	607a      	str	r2, [r7, #4]
 8011a40:	683a      	ldr	r2, [r7, #0]
 8011a42:	b2d2      	uxtb	r2, r2
 8011a44:	701a      	strb	r2, [r3, #0]
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	0a1b      	lsrs	r3, r3, #8
 8011a4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	1c5a      	adds	r2, r3, #1
 8011a50:	607a      	str	r2, [r7, #4]
 8011a52:	683a      	ldr	r2, [r7, #0]
 8011a54:	b2d2      	uxtb	r2, r2
 8011a56:	701a      	strb	r2, [r3, #0]
}
 8011a58:	bf00      	nop
 8011a5a:	370c      	adds	r7, #12
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a62:	4770      	bx	lr

08011a64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011a64:	b480      	push	{r7}
 8011a66:	b087      	sub	sp, #28
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	60f8      	str	r0, [r7, #12]
 8011a6c:	60b9      	str	r1, [r7, #8]
 8011a6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d00d      	beq.n	8011a9a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011a7e:	693a      	ldr	r2, [r7, #16]
 8011a80:	1c53      	adds	r3, r2, #1
 8011a82:	613b      	str	r3, [r7, #16]
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	1c59      	adds	r1, r3, #1
 8011a88:	6179      	str	r1, [r7, #20]
 8011a8a:	7812      	ldrb	r2, [r2, #0]
 8011a8c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	3b01      	subs	r3, #1
 8011a92:	607b      	str	r3, [r7, #4]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d1f1      	bne.n	8011a7e <mem_cpy+0x1a>
	}
}
 8011a9a:	bf00      	nop
 8011a9c:	371c      	adds	r7, #28
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa4:	4770      	bx	lr

08011aa6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011aa6:	b480      	push	{r7}
 8011aa8:	b087      	sub	sp, #28
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	60f8      	str	r0, [r7, #12]
 8011aae:	60b9      	str	r1, [r7, #8]
 8011ab0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011ab6:	697b      	ldr	r3, [r7, #20]
 8011ab8:	1c5a      	adds	r2, r3, #1
 8011aba:	617a      	str	r2, [r7, #20]
 8011abc:	68ba      	ldr	r2, [r7, #8]
 8011abe:	b2d2      	uxtb	r2, r2
 8011ac0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	3b01      	subs	r3, #1
 8011ac6:	607b      	str	r3, [r7, #4]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d1f3      	bne.n	8011ab6 <mem_set+0x10>
}
 8011ace:	bf00      	nop
 8011ad0:	371c      	adds	r7, #28
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad8:	4770      	bx	lr

08011ada <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011ada:	b480      	push	{r7}
 8011adc:	b089      	sub	sp, #36	; 0x24
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	60f8      	str	r0, [r7, #12]
 8011ae2:	60b9      	str	r1, [r7, #8]
 8011ae4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	61fb      	str	r3, [r7, #28]
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011aee:	2300      	movs	r3, #0
 8011af0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011af2:	69fb      	ldr	r3, [r7, #28]
 8011af4:	1c5a      	adds	r2, r3, #1
 8011af6:	61fa      	str	r2, [r7, #28]
 8011af8:	781b      	ldrb	r3, [r3, #0]
 8011afa:	4619      	mov	r1, r3
 8011afc:	69bb      	ldr	r3, [r7, #24]
 8011afe:	1c5a      	adds	r2, r3, #1
 8011b00:	61ba      	str	r2, [r7, #24]
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	1acb      	subs	r3, r1, r3
 8011b06:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	3b01      	subs	r3, #1
 8011b0c:	607b      	str	r3, [r7, #4]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d002      	beq.n	8011b1a <mem_cmp+0x40>
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d0eb      	beq.n	8011af2 <mem_cmp+0x18>

	return r;
 8011b1a:	697b      	ldr	r3, [r7, #20]
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3724      	adds	r7, #36	; 0x24
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011b32:	e002      	b.n	8011b3a <chk_chr+0x12>
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	3301      	adds	r3, #1
 8011b38:	607b      	str	r3, [r7, #4]
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d005      	beq.n	8011b4e <chk_chr+0x26>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	461a      	mov	r2, r3
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d1f2      	bne.n	8011b34 <chk_chr+0xc>
	return *str;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	781b      	ldrb	r3, [r3, #0]
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	370c      	adds	r7, #12
 8011b56:	46bd      	mov	sp, r7
 8011b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5c:	4770      	bx	lr
	...

08011b60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011b60:	b480      	push	{r7}
 8011b62:	b085      	sub	sp, #20
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	60bb      	str	r3, [r7, #8]
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	60fb      	str	r3, [r7, #12]
 8011b72:	e029      	b.n	8011bc8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011b74:	4a27      	ldr	r2, [pc, #156]	; (8011c14 <chk_lock+0xb4>)
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	011b      	lsls	r3, r3, #4
 8011b7a:	4413      	add	r3, r2
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d01d      	beq.n	8011bbe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011b82:	4a24      	ldr	r2, [pc, #144]	; (8011c14 <chk_lock+0xb4>)
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	011b      	lsls	r3, r3, #4
 8011b88:	4413      	add	r3, r2
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d116      	bne.n	8011bc2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011b94:	4a1f      	ldr	r2, [pc, #124]	; (8011c14 <chk_lock+0xb4>)
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	011b      	lsls	r3, r3, #4
 8011b9a:	4413      	add	r3, r2
 8011b9c:	3304      	adds	r3, #4
 8011b9e:	681a      	ldr	r2, [r3, #0]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d10c      	bne.n	8011bc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011ba8:	4a1a      	ldr	r2, [pc, #104]	; (8011c14 <chk_lock+0xb4>)
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	011b      	lsls	r3, r3, #4
 8011bae:	4413      	add	r3, r2
 8011bb0:	3308      	adds	r3, #8
 8011bb2:	681a      	ldr	r2, [r3, #0]
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d102      	bne.n	8011bc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011bbc:	e007      	b.n	8011bce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	60fb      	str	r3, [r7, #12]
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	2b01      	cmp	r3, #1
 8011bcc:	d9d2      	bls.n	8011b74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2b02      	cmp	r3, #2
 8011bd2:	d109      	bne.n	8011be8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d102      	bne.n	8011be0 <chk_lock+0x80>
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	2b02      	cmp	r3, #2
 8011bde:	d101      	bne.n	8011be4 <chk_lock+0x84>
 8011be0:	2300      	movs	r3, #0
 8011be2:	e010      	b.n	8011c06 <chk_lock+0xa6>
 8011be4:	2312      	movs	r3, #18
 8011be6:	e00e      	b.n	8011c06 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d108      	bne.n	8011c00 <chk_lock+0xa0>
 8011bee:	4a09      	ldr	r2, [pc, #36]	; (8011c14 <chk_lock+0xb4>)
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	011b      	lsls	r3, r3, #4
 8011bf4:	4413      	add	r3, r2
 8011bf6:	330c      	adds	r3, #12
 8011bf8:	881b      	ldrh	r3, [r3, #0]
 8011bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bfe:	d101      	bne.n	8011c04 <chk_lock+0xa4>
 8011c00:	2310      	movs	r3, #16
 8011c02:	e000      	b.n	8011c06 <chk_lock+0xa6>
 8011c04:	2300      	movs	r3, #0
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3714      	adds	r7, #20
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr
 8011c12:	bf00      	nop
 8011c14:	20000bf4 	.word	0x20000bf4

08011c18 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b083      	sub	sp, #12
 8011c1c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	607b      	str	r3, [r7, #4]
 8011c22:	e002      	b.n	8011c2a <enq_lock+0x12>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	3301      	adds	r3, #1
 8011c28:	607b      	str	r3, [r7, #4]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d806      	bhi.n	8011c3e <enq_lock+0x26>
 8011c30:	4a09      	ldr	r2, [pc, #36]	; (8011c58 <enq_lock+0x40>)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	011b      	lsls	r3, r3, #4
 8011c36:	4413      	add	r3, r2
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d1f2      	bne.n	8011c24 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2b02      	cmp	r3, #2
 8011c42:	bf14      	ite	ne
 8011c44:	2301      	movne	r3, #1
 8011c46:	2300      	moveq	r3, #0
 8011c48:	b2db      	uxtb	r3, r3
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	370c      	adds	r7, #12
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c54:	4770      	bx	lr
 8011c56:	bf00      	nop
 8011c58:	20000bf4 	.word	0x20000bf4

08011c5c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011c5c:	b480      	push	{r7}
 8011c5e:	b085      	sub	sp, #20
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011c66:	2300      	movs	r3, #0
 8011c68:	60fb      	str	r3, [r7, #12]
 8011c6a:	e01f      	b.n	8011cac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011c6c:	4a41      	ldr	r2, [pc, #260]	; (8011d74 <inc_lock+0x118>)
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	011b      	lsls	r3, r3, #4
 8011c72:	4413      	add	r3, r2
 8011c74:	681a      	ldr	r2, [r3, #0]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d113      	bne.n	8011ca6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011c7e:	4a3d      	ldr	r2, [pc, #244]	; (8011d74 <inc_lock+0x118>)
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	011b      	lsls	r3, r3, #4
 8011c84:	4413      	add	r3, r2
 8011c86:	3304      	adds	r3, #4
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d109      	bne.n	8011ca6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011c92:	4a38      	ldr	r2, [pc, #224]	; (8011d74 <inc_lock+0x118>)
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	011b      	lsls	r3, r3, #4
 8011c98:	4413      	add	r3, r2
 8011c9a:	3308      	adds	r3, #8
 8011c9c:	681a      	ldr	r2, [r3, #0]
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d006      	beq.n	8011cb4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	3301      	adds	r3, #1
 8011caa:	60fb      	str	r3, [r7, #12]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d9dc      	bls.n	8011c6c <inc_lock+0x10>
 8011cb2:	e000      	b.n	8011cb6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011cb4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2b02      	cmp	r3, #2
 8011cba:	d132      	bne.n	8011d22 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	60fb      	str	r3, [r7, #12]
 8011cc0:	e002      	b.n	8011cc8 <inc_lock+0x6c>
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	60fb      	str	r3, [r7, #12]
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d806      	bhi.n	8011cdc <inc_lock+0x80>
 8011cce:	4a29      	ldr	r2, [pc, #164]	; (8011d74 <inc_lock+0x118>)
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	011b      	lsls	r3, r3, #4
 8011cd4:	4413      	add	r3, r2
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d1f2      	bne.n	8011cc2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2b02      	cmp	r3, #2
 8011ce0:	d101      	bne.n	8011ce6 <inc_lock+0x8a>
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	e040      	b.n	8011d68 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681a      	ldr	r2, [r3, #0]
 8011cea:	4922      	ldr	r1, [pc, #136]	; (8011d74 <inc_lock+0x118>)
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	011b      	lsls	r3, r3, #4
 8011cf0:	440b      	add	r3, r1
 8011cf2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	689a      	ldr	r2, [r3, #8]
 8011cf8:	491e      	ldr	r1, [pc, #120]	; (8011d74 <inc_lock+0x118>)
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	011b      	lsls	r3, r3, #4
 8011cfe:	440b      	add	r3, r1
 8011d00:	3304      	adds	r3, #4
 8011d02:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	695a      	ldr	r2, [r3, #20]
 8011d08:	491a      	ldr	r1, [pc, #104]	; (8011d74 <inc_lock+0x118>)
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	011b      	lsls	r3, r3, #4
 8011d0e:	440b      	add	r3, r1
 8011d10:	3308      	adds	r3, #8
 8011d12:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011d14:	4a17      	ldr	r2, [pc, #92]	; (8011d74 <inc_lock+0x118>)
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	011b      	lsls	r3, r3, #4
 8011d1a:	4413      	add	r3, r2
 8011d1c:	330c      	adds	r3, #12
 8011d1e:	2200      	movs	r2, #0
 8011d20:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d009      	beq.n	8011d3c <inc_lock+0xe0>
 8011d28:	4a12      	ldr	r2, [pc, #72]	; (8011d74 <inc_lock+0x118>)
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	011b      	lsls	r3, r3, #4
 8011d2e:	4413      	add	r3, r2
 8011d30:	330c      	adds	r3, #12
 8011d32:	881b      	ldrh	r3, [r3, #0]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d001      	beq.n	8011d3c <inc_lock+0xe0>
 8011d38:	2300      	movs	r3, #0
 8011d3a:	e015      	b.n	8011d68 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d108      	bne.n	8011d54 <inc_lock+0xf8>
 8011d42:	4a0c      	ldr	r2, [pc, #48]	; (8011d74 <inc_lock+0x118>)
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	011b      	lsls	r3, r3, #4
 8011d48:	4413      	add	r3, r2
 8011d4a:	330c      	adds	r3, #12
 8011d4c:	881b      	ldrh	r3, [r3, #0]
 8011d4e:	3301      	adds	r3, #1
 8011d50:	b29a      	uxth	r2, r3
 8011d52:	e001      	b.n	8011d58 <inc_lock+0xfc>
 8011d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011d58:	4906      	ldr	r1, [pc, #24]	; (8011d74 <inc_lock+0x118>)
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	011b      	lsls	r3, r3, #4
 8011d5e:	440b      	add	r3, r1
 8011d60:	330c      	adds	r3, #12
 8011d62:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	3301      	adds	r3, #1
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3714      	adds	r7, #20
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d72:	4770      	bx	lr
 8011d74:	20000bf4 	.word	0x20000bf4

08011d78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011d78:	b480      	push	{r7}
 8011d7a:	b085      	sub	sp, #20
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	3b01      	subs	r3, #1
 8011d84:	607b      	str	r3, [r7, #4]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d825      	bhi.n	8011dd8 <dec_lock+0x60>
		n = Files[i].ctr;
 8011d8c:	4a17      	ldr	r2, [pc, #92]	; (8011dec <dec_lock+0x74>)
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	011b      	lsls	r3, r3, #4
 8011d92:	4413      	add	r3, r2
 8011d94:	330c      	adds	r3, #12
 8011d96:	881b      	ldrh	r3, [r3, #0]
 8011d98:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011d9a:	89fb      	ldrh	r3, [r7, #14]
 8011d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011da0:	d101      	bne.n	8011da6 <dec_lock+0x2e>
 8011da2:	2300      	movs	r3, #0
 8011da4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011da6:	89fb      	ldrh	r3, [r7, #14]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d002      	beq.n	8011db2 <dec_lock+0x3a>
 8011dac:	89fb      	ldrh	r3, [r7, #14]
 8011dae:	3b01      	subs	r3, #1
 8011db0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011db2:	4a0e      	ldr	r2, [pc, #56]	; (8011dec <dec_lock+0x74>)
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	011b      	lsls	r3, r3, #4
 8011db8:	4413      	add	r3, r2
 8011dba:	330c      	adds	r3, #12
 8011dbc:	89fa      	ldrh	r2, [r7, #14]
 8011dbe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011dc0:	89fb      	ldrh	r3, [r7, #14]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d105      	bne.n	8011dd2 <dec_lock+0x5a>
 8011dc6:	4a09      	ldr	r2, [pc, #36]	; (8011dec <dec_lock+0x74>)
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	011b      	lsls	r3, r3, #4
 8011dcc:	4413      	add	r3, r2
 8011dce:	2200      	movs	r2, #0
 8011dd0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	737b      	strb	r3, [r7, #13]
 8011dd6:	e001      	b.n	8011ddc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011dd8:	2302      	movs	r3, #2
 8011dda:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011ddc:	7b7b      	ldrb	r3, [r7, #13]
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3714      	adds	r7, #20
 8011de2:	46bd      	mov	sp, r7
 8011de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de8:	4770      	bx	lr
 8011dea:	bf00      	nop
 8011dec:	20000bf4 	.word	0x20000bf4

08011df0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011df0:	b480      	push	{r7}
 8011df2:	b085      	sub	sp, #20
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011df8:	2300      	movs	r3, #0
 8011dfa:	60fb      	str	r3, [r7, #12]
 8011dfc:	e010      	b.n	8011e20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011dfe:	4a0d      	ldr	r2, [pc, #52]	; (8011e34 <clear_lock+0x44>)
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	011b      	lsls	r3, r3, #4
 8011e04:	4413      	add	r3, r2
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d105      	bne.n	8011e1a <clear_lock+0x2a>
 8011e0e:	4a09      	ldr	r2, [pc, #36]	; (8011e34 <clear_lock+0x44>)
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	011b      	lsls	r3, r3, #4
 8011e14:	4413      	add	r3, r2
 8011e16:	2200      	movs	r2, #0
 8011e18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	60fb      	str	r3, [r7, #12]
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2b01      	cmp	r3, #1
 8011e24:	d9eb      	bls.n	8011dfe <clear_lock+0xe>
	}
}
 8011e26:	bf00      	nop
 8011e28:	3714      	adds	r7, #20
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e30:	4770      	bx	lr
 8011e32:	bf00      	nop
 8011e34:	20000bf4 	.word	0x20000bf4

08011e38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b086      	sub	sp, #24
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011e40:	2300      	movs	r3, #0
 8011e42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	78db      	ldrb	r3, [r3, #3]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d034      	beq.n	8011eb6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	7858      	ldrb	r0, [r3, #1]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	697a      	ldr	r2, [r7, #20]
 8011e60:	f7ff fd40 	bl	80118e4 <disk_write>
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d002      	beq.n	8011e70 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	73fb      	strb	r3, [r7, #15]
 8011e6e:	e022      	b.n	8011eb6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2200      	movs	r2, #0
 8011e74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e7a:	697a      	ldr	r2, [r7, #20]
 8011e7c:	1ad2      	subs	r2, r2, r3
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6a1b      	ldr	r3, [r3, #32]
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d217      	bcs.n	8011eb6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	789b      	ldrb	r3, [r3, #2]
 8011e8a:	613b      	str	r3, [r7, #16]
 8011e8c:	e010      	b.n	8011eb0 <sync_window+0x78>
					wsect += fs->fsize;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6a1b      	ldr	r3, [r3, #32]
 8011e92:	697a      	ldr	r2, [r7, #20]
 8011e94:	4413      	add	r3, r2
 8011e96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	7858      	ldrb	r0, [r3, #1]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ea2:	2301      	movs	r3, #1
 8011ea4:	697a      	ldr	r2, [r7, #20]
 8011ea6:	f7ff fd1d 	bl	80118e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	3b01      	subs	r3, #1
 8011eae:	613b      	str	r3, [r7, #16]
 8011eb0:	693b      	ldr	r3, [r7, #16]
 8011eb2:	2b01      	cmp	r3, #1
 8011eb4:	d8eb      	bhi.n	8011e8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3718      	adds	r7, #24
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ed2:	683a      	ldr	r2, [r7, #0]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d01b      	beq.n	8011f10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f7ff ffad 	bl	8011e38 <sync_window>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011ee2:	7bfb      	ldrb	r3, [r7, #15]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d113      	bne.n	8011f10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	7858      	ldrb	r0, [r3, #1]
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	683a      	ldr	r2, [r7, #0]
 8011ef6:	f7ff fcd5 	bl	80118a4 <disk_read>
 8011efa:	4603      	mov	r3, r0
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d004      	beq.n	8011f0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011f00:	f04f 33ff 	mov.w	r3, #4294967295
 8011f04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011f06:	2301      	movs	r3, #1
 8011f08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	683a      	ldr	r2, [r7, #0]
 8011f0e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3710      	adds	r7, #16
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
	...

08011f1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b084      	sub	sp, #16
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f7ff ff87 	bl	8011e38 <sync_window>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011f2e:	7bfb      	ldrb	r3, [r7, #15]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d158      	bne.n	8011fe6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	2b03      	cmp	r3, #3
 8011f3a:	d148      	bne.n	8011fce <sync_fs+0xb2>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	791b      	ldrb	r3, [r3, #4]
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d144      	bne.n	8011fce <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	3338      	adds	r3, #56	; 0x38
 8011f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7ff fda9 	bl	8011aa6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	3338      	adds	r3, #56	; 0x38
 8011f58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011f5c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7ff fd38 	bl	80119d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	3338      	adds	r3, #56	; 0x38
 8011f6a:	4921      	ldr	r1, [pc, #132]	; (8011ff0 <sync_fs+0xd4>)
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7ff fd4d 	bl	8011a0c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	3338      	adds	r3, #56	; 0x38
 8011f76:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011f7a:	491e      	ldr	r1, [pc, #120]	; (8011ff4 <sync_fs+0xd8>)
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7ff fd45 	bl	8011a0c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	3338      	adds	r3, #56	; 0x38
 8011f86:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	695b      	ldr	r3, [r3, #20]
 8011f8e:	4619      	mov	r1, r3
 8011f90:	4610      	mov	r0, r2
 8011f92:	f7ff fd3b 	bl	8011a0c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	3338      	adds	r3, #56	; 0x38
 8011f9a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	691b      	ldr	r3, [r3, #16]
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	4610      	mov	r0, r2
 8011fa6:	f7ff fd31 	bl	8011a0c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fae:	1c5a      	adds	r2, r3, #1
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	7858      	ldrb	r0, [r3, #1]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	f7ff fc8e 	bl	80118e4 <disk_write>
			fs->fsi_flag = 0;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	785b      	ldrb	r3, [r3, #1]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7ff fca4 	bl	8011924 <disk_ioctl>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d001      	beq.n	8011fe6 <sync_fs+0xca>
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3710      	adds	r7, #16
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	41615252 	.word	0x41615252
 8011ff4:	61417272 	.word	0x61417272

08011ff8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b083      	sub	sp, #12
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	3b02      	subs	r3, #2
 8012006:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	69db      	ldr	r3, [r3, #28]
 801200c:	3b02      	subs	r3, #2
 801200e:	683a      	ldr	r2, [r7, #0]
 8012010:	429a      	cmp	r2, r3
 8012012:	d301      	bcc.n	8012018 <clust2sect+0x20>
 8012014:	2300      	movs	r3, #0
 8012016:	e008      	b.n	801202a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	895b      	ldrh	r3, [r3, #10]
 801201c:	461a      	mov	r2, r3
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	fb03 f202 	mul.w	r2, r3, r2
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012028:	4413      	add	r3, r2
}
 801202a:	4618      	mov	r0, r3
 801202c:	370c      	adds	r7, #12
 801202e:	46bd      	mov	sp, r7
 8012030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012034:	4770      	bx	lr

08012036 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012036:	b580      	push	{r7, lr}
 8012038:	b086      	sub	sp, #24
 801203a:	af00      	add	r7, sp, #0
 801203c:	6078      	str	r0, [r7, #4]
 801203e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	2b01      	cmp	r3, #1
 801204a:	d904      	bls.n	8012056 <get_fat+0x20>
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	69db      	ldr	r3, [r3, #28]
 8012050:	683a      	ldr	r2, [r7, #0]
 8012052:	429a      	cmp	r2, r3
 8012054:	d302      	bcc.n	801205c <get_fat+0x26>
		val = 1;	/* Internal error */
 8012056:	2301      	movs	r3, #1
 8012058:	617b      	str	r3, [r7, #20]
 801205a:	e08c      	b.n	8012176 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801205c:	f04f 33ff 	mov.w	r3, #4294967295
 8012060:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	2b02      	cmp	r3, #2
 8012068:	d045      	beq.n	80120f6 <get_fat+0xc0>
 801206a:	2b03      	cmp	r3, #3
 801206c:	d05d      	beq.n	801212a <get_fat+0xf4>
 801206e:	2b01      	cmp	r3, #1
 8012070:	d177      	bne.n	8012162 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	60fb      	str	r3, [r7, #12]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	085b      	lsrs	r3, r3, #1
 801207a:	68fa      	ldr	r2, [r7, #12]
 801207c:	4413      	add	r3, r2
 801207e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	0a5b      	lsrs	r3, r3, #9
 8012088:	4413      	add	r3, r2
 801208a:	4619      	mov	r1, r3
 801208c:	6938      	ldr	r0, [r7, #16]
 801208e:	f7ff ff17 	bl	8011ec0 <move_window>
 8012092:	4603      	mov	r3, r0
 8012094:	2b00      	cmp	r3, #0
 8012096:	d167      	bne.n	8012168 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	1c5a      	adds	r2, r3, #1
 801209c:	60fa      	str	r2, [r7, #12]
 801209e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120a2:	693a      	ldr	r2, [r7, #16]
 80120a4:	4413      	add	r3, r2
 80120a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80120aa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	0a5b      	lsrs	r3, r3, #9
 80120b4:	4413      	add	r3, r2
 80120b6:	4619      	mov	r1, r3
 80120b8:	6938      	ldr	r0, [r7, #16]
 80120ba:	f7ff ff01 	bl	8011ec0 <move_window>
 80120be:	4603      	mov	r3, r0
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d153      	bne.n	801216c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120ca:	693a      	ldr	r2, [r7, #16]
 80120cc:	4413      	add	r3, r2
 80120ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80120d2:	021b      	lsls	r3, r3, #8
 80120d4:	461a      	mov	r2, r3
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	4313      	orrs	r3, r2
 80120da:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	f003 0301 	and.w	r3, r3, #1
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d002      	beq.n	80120ec <get_fat+0xb6>
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	091b      	lsrs	r3, r3, #4
 80120ea:	e002      	b.n	80120f2 <get_fat+0xbc>
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80120f2:	617b      	str	r3, [r7, #20]
			break;
 80120f4:	e03f      	b.n	8012176 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	0a1b      	lsrs	r3, r3, #8
 80120fe:	4413      	add	r3, r2
 8012100:	4619      	mov	r1, r3
 8012102:	6938      	ldr	r0, [r7, #16]
 8012104:	f7ff fedc 	bl	8011ec0 <move_window>
 8012108:	4603      	mov	r3, r0
 801210a:	2b00      	cmp	r3, #0
 801210c:	d130      	bne.n	8012170 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	005b      	lsls	r3, r3, #1
 8012118:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801211c:	4413      	add	r3, r2
 801211e:	4618      	mov	r0, r3
 8012120:	f7ff fc1e 	bl	8011960 <ld_word>
 8012124:	4603      	mov	r3, r0
 8012126:	617b      	str	r3, [r7, #20]
			break;
 8012128:	e025      	b.n	8012176 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	09db      	lsrs	r3, r3, #7
 8012132:	4413      	add	r3, r2
 8012134:	4619      	mov	r1, r3
 8012136:	6938      	ldr	r0, [r7, #16]
 8012138:	f7ff fec2 	bl	8011ec0 <move_window>
 801213c:	4603      	mov	r3, r0
 801213e:	2b00      	cmp	r3, #0
 8012140:	d118      	bne.n	8012174 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	009b      	lsls	r3, r3, #2
 801214c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012150:	4413      	add	r3, r2
 8012152:	4618      	mov	r0, r3
 8012154:	f7ff fc1c 	bl	8011990 <ld_dword>
 8012158:	4603      	mov	r3, r0
 801215a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801215e:	617b      	str	r3, [r7, #20]
			break;
 8012160:	e009      	b.n	8012176 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012162:	2301      	movs	r3, #1
 8012164:	617b      	str	r3, [r7, #20]
 8012166:	e006      	b.n	8012176 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012168:	bf00      	nop
 801216a:	e004      	b.n	8012176 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801216c:	bf00      	nop
 801216e:	e002      	b.n	8012176 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012170:	bf00      	nop
 8012172:	e000      	b.n	8012176 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012174:	bf00      	nop
		}
	}

	return val;
 8012176:	697b      	ldr	r3, [r7, #20]
}
 8012178:	4618      	mov	r0, r3
 801217a:	3718      	adds	r7, #24
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}

08012180 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012180:	b590      	push	{r4, r7, lr}
 8012182:	b089      	sub	sp, #36	; 0x24
 8012184:	af00      	add	r7, sp, #0
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	60b9      	str	r1, [r7, #8]
 801218a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801218c:	2302      	movs	r3, #2
 801218e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	2b01      	cmp	r3, #1
 8012194:	f240 80d6 	bls.w	8012344 <put_fat+0x1c4>
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	69db      	ldr	r3, [r3, #28]
 801219c:	68ba      	ldr	r2, [r7, #8]
 801219e:	429a      	cmp	r2, r3
 80121a0:	f080 80d0 	bcs.w	8012344 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	2b02      	cmp	r3, #2
 80121aa:	d073      	beq.n	8012294 <put_fat+0x114>
 80121ac:	2b03      	cmp	r3, #3
 80121ae:	f000 8091 	beq.w	80122d4 <put_fat+0x154>
 80121b2:	2b01      	cmp	r3, #1
 80121b4:	f040 80c6 	bne.w	8012344 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	61bb      	str	r3, [r7, #24]
 80121bc:	69bb      	ldr	r3, [r7, #24]
 80121be:	085b      	lsrs	r3, r3, #1
 80121c0:	69ba      	ldr	r2, [r7, #24]
 80121c2:	4413      	add	r3, r2
 80121c4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80121ca:	69bb      	ldr	r3, [r7, #24]
 80121cc:	0a5b      	lsrs	r3, r3, #9
 80121ce:	4413      	add	r3, r2
 80121d0:	4619      	mov	r1, r3
 80121d2:	68f8      	ldr	r0, [r7, #12]
 80121d4:	f7ff fe74 	bl	8011ec0 <move_window>
 80121d8:	4603      	mov	r3, r0
 80121da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80121dc:	7ffb      	ldrb	r3, [r7, #31]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	f040 80a9 	bne.w	8012336 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80121ea:	69bb      	ldr	r3, [r7, #24]
 80121ec:	1c59      	adds	r1, r3, #1
 80121ee:	61b9      	str	r1, [r7, #24]
 80121f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121f4:	4413      	add	r3, r2
 80121f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	f003 0301 	and.w	r3, r3, #1
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d00d      	beq.n	801221e <put_fat+0x9e>
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	b25b      	sxtb	r3, r3
 8012208:	f003 030f 	and.w	r3, r3, #15
 801220c:	b25a      	sxtb	r2, r3
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	b2db      	uxtb	r3, r3
 8012212:	011b      	lsls	r3, r3, #4
 8012214:	b25b      	sxtb	r3, r3
 8012216:	4313      	orrs	r3, r2
 8012218:	b25b      	sxtb	r3, r3
 801221a:	b2db      	uxtb	r3, r3
 801221c:	e001      	b.n	8012222 <put_fat+0xa2>
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	b2db      	uxtb	r3, r3
 8012222:	697a      	ldr	r2, [r7, #20]
 8012224:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2201      	movs	r2, #1
 801222a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012230:	69bb      	ldr	r3, [r7, #24]
 8012232:	0a5b      	lsrs	r3, r3, #9
 8012234:	4413      	add	r3, r2
 8012236:	4619      	mov	r1, r3
 8012238:	68f8      	ldr	r0, [r7, #12]
 801223a:	f7ff fe41 	bl	8011ec0 <move_window>
 801223e:	4603      	mov	r3, r0
 8012240:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012242:	7ffb      	ldrb	r3, [r7, #31]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d178      	bne.n	801233a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801224e:	69bb      	ldr	r3, [r7, #24]
 8012250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012254:	4413      	add	r3, r2
 8012256:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	f003 0301 	and.w	r3, r3, #1
 801225e:	2b00      	cmp	r3, #0
 8012260:	d003      	beq.n	801226a <put_fat+0xea>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	091b      	lsrs	r3, r3, #4
 8012266:	b2db      	uxtb	r3, r3
 8012268:	e00e      	b.n	8012288 <put_fat+0x108>
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	b25b      	sxtb	r3, r3
 8012270:	f023 030f 	bic.w	r3, r3, #15
 8012274:	b25a      	sxtb	r2, r3
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	0a1b      	lsrs	r3, r3, #8
 801227a:	b25b      	sxtb	r3, r3
 801227c:	f003 030f 	and.w	r3, r3, #15
 8012280:	b25b      	sxtb	r3, r3
 8012282:	4313      	orrs	r3, r2
 8012284:	b25b      	sxtb	r3, r3
 8012286:	b2db      	uxtb	r3, r3
 8012288:	697a      	ldr	r2, [r7, #20]
 801228a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2201      	movs	r2, #1
 8012290:	70da      	strb	r2, [r3, #3]
			break;
 8012292:	e057      	b.n	8012344 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	0a1b      	lsrs	r3, r3, #8
 801229c:	4413      	add	r3, r2
 801229e:	4619      	mov	r1, r3
 80122a0:	68f8      	ldr	r0, [r7, #12]
 80122a2:	f7ff fe0d 	bl	8011ec0 <move_window>
 80122a6:	4603      	mov	r3, r0
 80122a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80122aa:	7ffb      	ldrb	r3, [r7, #31]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d146      	bne.n	801233e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	005b      	lsls	r3, r3, #1
 80122ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80122be:	4413      	add	r3, r2
 80122c0:	687a      	ldr	r2, [r7, #4]
 80122c2:	b292      	uxth	r2, r2
 80122c4:	4611      	mov	r1, r2
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7ff fb85 	bl	80119d6 <st_word>
			fs->wflag = 1;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2201      	movs	r2, #1
 80122d0:	70da      	strb	r2, [r3, #3]
			break;
 80122d2:	e037      	b.n	8012344 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	09db      	lsrs	r3, r3, #7
 80122dc:	4413      	add	r3, r2
 80122de:	4619      	mov	r1, r3
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	f7ff fded 	bl	8011ec0 <move_window>
 80122e6:	4603      	mov	r3, r0
 80122e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80122ea:	7ffb      	ldrb	r3, [r7, #31]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d128      	bne.n	8012342 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	009b      	lsls	r3, r3, #2
 8012300:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012304:	4413      	add	r3, r2
 8012306:	4618      	mov	r0, r3
 8012308:	f7ff fb42 	bl	8011990 <ld_dword>
 801230c:	4603      	mov	r3, r0
 801230e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012312:	4323      	orrs	r3, r4
 8012314:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	009b      	lsls	r3, r3, #2
 8012320:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012324:	4413      	add	r3, r2
 8012326:	6879      	ldr	r1, [r7, #4]
 8012328:	4618      	mov	r0, r3
 801232a:	f7ff fb6f 	bl	8011a0c <st_dword>
			fs->wflag = 1;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2201      	movs	r2, #1
 8012332:	70da      	strb	r2, [r3, #3]
			break;
 8012334:	e006      	b.n	8012344 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8012336:	bf00      	nop
 8012338:	e004      	b.n	8012344 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801233a:	bf00      	nop
 801233c:	e002      	b.n	8012344 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801233e:	bf00      	nop
 8012340:	e000      	b.n	8012344 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8012342:	bf00      	nop
		}
	}
	return res;
 8012344:	7ffb      	ldrb	r3, [r7, #31]
}
 8012346:	4618      	mov	r0, r3
 8012348:	3724      	adds	r7, #36	; 0x24
 801234a:	46bd      	mov	sp, r7
 801234c:	bd90      	pop	{r4, r7, pc}

0801234e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801234e:	b580      	push	{r7, lr}
 8012350:	b088      	sub	sp, #32
 8012352:	af00      	add	r7, sp, #0
 8012354:	60f8      	str	r0, [r7, #12]
 8012356:	60b9      	str	r1, [r7, #8]
 8012358:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801235a:	2300      	movs	r3, #0
 801235c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	2b01      	cmp	r3, #1
 8012368:	d904      	bls.n	8012374 <remove_chain+0x26>
 801236a:	69bb      	ldr	r3, [r7, #24]
 801236c:	69db      	ldr	r3, [r3, #28]
 801236e:	68ba      	ldr	r2, [r7, #8]
 8012370:	429a      	cmp	r2, r3
 8012372:	d301      	bcc.n	8012378 <remove_chain+0x2a>
 8012374:	2302      	movs	r3, #2
 8012376:	e04b      	b.n	8012410 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d00c      	beq.n	8012398 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801237e:	f04f 32ff 	mov.w	r2, #4294967295
 8012382:	6879      	ldr	r1, [r7, #4]
 8012384:	69b8      	ldr	r0, [r7, #24]
 8012386:	f7ff fefb 	bl	8012180 <put_fat>
 801238a:	4603      	mov	r3, r0
 801238c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801238e:	7ffb      	ldrb	r3, [r7, #31]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d001      	beq.n	8012398 <remove_chain+0x4a>
 8012394:	7ffb      	ldrb	r3, [r7, #31]
 8012396:	e03b      	b.n	8012410 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012398:	68b9      	ldr	r1, [r7, #8]
 801239a:	68f8      	ldr	r0, [r7, #12]
 801239c:	f7ff fe4b 	bl	8012036 <get_fat>
 80123a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d031      	beq.n	801240c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	2b01      	cmp	r3, #1
 80123ac:	d101      	bne.n	80123b2 <remove_chain+0x64>
 80123ae:	2302      	movs	r3, #2
 80123b0:	e02e      	b.n	8012410 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123b8:	d101      	bne.n	80123be <remove_chain+0x70>
 80123ba:	2301      	movs	r3, #1
 80123bc:	e028      	b.n	8012410 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80123be:	2200      	movs	r2, #0
 80123c0:	68b9      	ldr	r1, [r7, #8]
 80123c2:	69b8      	ldr	r0, [r7, #24]
 80123c4:	f7ff fedc 	bl	8012180 <put_fat>
 80123c8:	4603      	mov	r3, r0
 80123ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80123cc:	7ffb      	ldrb	r3, [r7, #31]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d001      	beq.n	80123d6 <remove_chain+0x88>
 80123d2:	7ffb      	ldrb	r3, [r7, #31]
 80123d4:	e01c      	b.n	8012410 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80123d6:	69bb      	ldr	r3, [r7, #24]
 80123d8:	695a      	ldr	r2, [r3, #20]
 80123da:	69bb      	ldr	r3, [r7, #24]
 80123dc:	69db      	ldr	r3, [r3, #28]
 80123de:	3b02      	subs	r3, #2
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d20b      	bcs.n	80123fc <remove_chain+0xae>
			fs->free_clst++;
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	695b      	ldr	r3, [r3, #20]
 80123e8:	1c5a      	adds	r2, r3, #1
 80123ea:	69bb      	ldr	r3, [r7, #24]
 80123ec:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80123ee:	69bb      	ldr	r3, [r7, #24]
 80123f0:	791b      	ldrb	r3, [r3, #4]
 80123f2:	f043 0301 	orr.w	r3, r3, #1
 80123f6:	b2da      	uxtb	r2, r3
 80123f8:	69bb      	ldr	r3, [r7, #24]
 80123fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012400:	69bb      	ldr	r3, [r7, #24]
 8012402:	69db      	ldr	r3, [r3, #28]
 8012404:	68ba      	ldr	r2, [r7, #8]
 8012406:	429a      	cmp	r2, r3
 8012408:	d3c6      	bcc.n	8012398 <remove_chain+0x4a>
 801240a:	e000      	b.n	801240e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801240c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801240e:	2300      	movs	r3, #0
}
 8012410:	4618      	mov	r0, r3
 8012412:	3720      	adds	r7, #32
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}

08012418 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b088      	sub	sp, #32
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d10d      	bne.n	801244a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801242e:	693b      	ldr	r3, [r7, #16]
 8012430:	691b      	ldr	r3, [r3, #16]
 8012432:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012434:	69bb      	ldr	r3, [r7, #24]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d004      	beq.n	8012444 <create_chain+0x2c>
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	69db      	ldr	r3, [r3, #28]
 801243e:	69ba      	ldr	r2, [r7, #24]
 8012440:	429a      	cmp	r2, r3
 8012442:	d31b      	bcc.n	801247c <create_chain+0x64>
 8012444:	2301      	movs	r3, #1
 8012446:	61bb      	str	r3, [r7, #24]
 8012448:	e018      	b.n	801247c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801244a:	6839      	ldr	r1, [r7, #0]
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f7ff fdf2 	bl	8012036 <get_fat>
 8012452:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	2b01      	cmp	r3, #1
 8012458:	d801      	bhi.n	801245e <create_chain+0x46>
 801245a:	2301      	movs	r3, #1
 801245c:	e070      	b.n	8012540 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012464:	d101      	bne.n	801246a <create_chain+0x52>
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	e06a      	b.n	8012540 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	69db      	ldr	r3, [r3, #28]
 801246e:	68fa      	ldr	r2, [r7, #12]
 8012470:	429a      	cmp	r2, r3
 8012472:	d201      	bcs.n	8012478 <create_chain+0x60>
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	e063      	b.n	8012540 <create_chain+0x128>
		scl = clst;
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012480:	69fb      	ldr	r3, [r7, #28]
 8012482:	3301      	adds	r3, #1
 8012484:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	69db      	ldr	r3, [r3, #28]
 801248a:	69fa      	ldr	r2, [r7, #28]
 801248c:	429a      	cmp	r2, r3
 801248e:	d307      	bcc.n	80124a0 <create_chain+0x88>
				ncl = 2;
 8012490:	2302      	movs	r3, #2
 8012492:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012494:	69fa      	ldr	r2, [r7, #28]
 8012496:	69bb      	ldr	r3, [r7, #24]
 8012498:	429a      	cmp	r2, r3
 801249a:	d901      	bls.n	80124a0 <create_chain+0x88>
 801249c:	2300      	movs	r3, #0
 801249e:	e04f      	b.n	8012540 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80124a0:	69f9      	ldr	r1, [r7, #28]
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f7ff fdc7 	bl	8012036 <get_fat>
 80124a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d00e      	beq.n	80124ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	2b01      	cmp	r3, #1
 80124b4:	d003      	beq.n	80124be <create_chain+0xa6>
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124bc:	d101      	bne.n	80124c2 <create_chain+0xaa>
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	e03e      	b.n	8012540 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80124c2:	69fa      	ldr	r2, [r7, #28]
 80124c4:	69bb      	ldr	r3, [r7, #24]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d1da      	bne.n	8012480 <create_chain+0x68>
 80124ca:	2300      	movs	r3, #0
 80124cc:	e038      	b.n	8012540 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80124ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80124d0:	f04f 32ff 	mov.w	r2, #4294967295
 80124d4:	69f9      	ldr	r1, [r7, #28]
 80124d6:	6938      	ldr	r0, [r7, #16]
 80124d8:	f7ff fe52 	bl	8012180 <put_fat>
 80124dc:	4603      	mov	r3, r0
 80124de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80124e0:	7dfb      	ldrb	r3, [r7, #23]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d109      	bne.n	80124fa <create_chain+0xe2>
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d006      	beq.n	80124fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80124ec:	69fa      	ldr	r2, [r7, #28]
 80124ee:	6839      	ldr	r1, [r7, #0]
 80124f0:	6938      	ldr	r0, [r7, #16]
 80124f2:	f7ff fe45 	bl	8012180 <put_fat>
 80124f6:	4603      	mov	r3, r0
 80124f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80124fa:	7dfb      	ldrb	r3, [r7, #23]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d116      	bne.n	801252e <create_chain+0x116>
		fs->last_clst = ncl;
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	69fa      	ldr	r2, [r7, #28]
 8012504:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	695a      	ldr	r2, [r3, #20]
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	69db      	ldr	r3, [r3, #28]
 801250e:	3b02      	subs	r3, #2
 8012510:	429a      	cmp	r2, r3
 8012512:	d804      	bhi.n	801251e <create_chain+0x106>
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	695b      	ldr	r3, [r3, #20]
 8012518:	1e5a      	subs	r2, r3, #1
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	791b      	ldrb	r3, [r3, #4]
 8012522:	f043 0301 	orr.w	r3, r3, #1
 8012526:	b2da      	uxtb	r2, r3
 8012528:	693b      	ldr	r3, [r7, #16]
 801252a:	711a      	strb	r2, [r3, #4]
 801252c:	e007      	b.n	801253e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801252e:	7dfb      	ldrb	r3, [r7, #23]
 8012530:	2b01      	cmp	r3, #1
 8012532:	d102      	bne.n	801253a <create_chain+0x122>
 8012534:	f04f 33ff 	mov.w	r3, #4294967295
 8012538:	e000      	b.n	801253c <create_chain+0x124>
 801253a:	2301      	movs	r3, #1
 801253c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801253e:	69fb      	ldr	r3, [r7, #28]
}
 8012540:	4618      	mov	r0, r3
 8012542:	3720      	adds	r7, #32
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012548:	b480      	push	{r7}
 801254a:	b087      	sub	sp, #28
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801255c:	3304      	adds	r3, #4
 801255e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	0a5b      	lsrs	r3, r3, #9
 8012564:	68fa      	ldr	r2, [r7, #12]
 8012566:	8952      	ldrh	r2, [r2, #10]
 8012568:	fbb3 f3f2 	udiv	r3, r3, r2
 801256c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	1d1a      	adds	r2, r3, #4
 8012572:	613a      	str	r2, [r7, #16]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d101      	bne.n	8012582 <clmt_clust+0x3a>
 801257e:	2300      	movs	r3, #0
 8012580:	e010      	b.n	80125a4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012582:	697a      	ldr	r2, [r7, #20]
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	429a      	cmp	r2, r3
 8012588:	d307      	bcc.n	801259a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801258a:	697a      	ldr	r2, [r7, #20]
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	1ad3      	subs	r3, r2, r3
 8012590:	617b      	str	r3, [r7, #20]
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	3304      	adds	r3, #4
 8012596:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012598:	e7e9      	b.n	801256e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801259a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	681a      	ldr	r2, [r3, #0]
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	4413      	add	r3, r2
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	371c      	adds	r7, #28
 80125a8:	46bd      	mov	sp, r7
 80125aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ae:	4770      	bx	lr

080125b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80125c6:	d204      	bcs.n	80125d2 <dir_sdi+0x22>
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	f003 031f 	and.w	r3, r3, #31
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d001      	beq.n	80125d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80125d2:	2302      	movs	r3, #2
 80125d4:	e063      	b.n	801269e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	683a      	ldr	r2, [r7, #0]
 80125da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	689b      	ldr	r3, [r3, #8]
 80125e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d106      	bne.n	80125f6 <dir_sdi+0x46>
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	2b02      	cmp	r3, #2
 80125ee:	d902      	bls.n	80125f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d10c      	bne.n	8012616 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	095b      	lsrs	r3, r3, #5
 8012600:	693a      	ldr	r2, [r7, #16]
 8012602:	8912      	ldrh	r2, [r2, #8]
 8012604:	4293      	cmp	r3, r2
 8012606:	d301      	bcc.n	801260c <dir_sdi+0x5c>
 8012608:	2302      	movs	r3, #2
 801260a:	e048      	b.n	801269e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801260c:	693b      	ldr	r3, [r7, #16]
 801260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	61da      	str	r2, [r3, #28]
 8012614:	e029      	b.n	801266a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	895b      	ldrh	r3, [r3, #10]
 801261a:	025b      	lsls	r3, r3, #9
 801261c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801261e:	e019      	b.n	8012654 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6979      	ldr	r1, [r7, #20]
 8012624:	4618      	mov	r0, r3
 8012626:	f7ff fd06 	bl	8012036 <get_fat>
 801262a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012632:	d101      	bne.n	8012638 <dir_sdi+0x88>
 8012634:	2301      	movs	r3, #1
 8012636:	e032      	b.n	801269e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	2b01      	cmp	r3, #1
 801263c:	d904      	bls.n	8012648 <dir_sdi+0x98>
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	69db      	ldr	r3, [r3, #28]
 8012642:	697a      	ldr	r2, [r7, #20]
 8012644:	429a      	cmp	r2, r3
 8012646:	d301      	bcc.n	801264c <dir_sdi+0x9c>
 8012648:	2302      	movs	r3, #2
 801264a:	e028      	b.n	801269e <dir_sdi+0xee>
			ofs -= csz;
 801264c:	683a      	ldr	r2, [r7, #0]
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	1ad3      	subs	r3, r2, r3
 8012652:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012654:	683a      	ldr	r2, [r7, #0]
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	429a      	cmp	r2, r3
 801265a:	d2e1      	bcs.n	8012620 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801265c:	6979      	ldr	r1, [r7, #20]
 801265e:	6938      	ldr	r0, [r7, #16]
 8012660:	f7ff fcca 	bl	8011ff8 <clust2sect>
 8012664:	4602      	mov	r2, r0
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	697a      	ldr	r2, [r7, #20]
 801266e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	69db      	ldr	r3, [r3, #28]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d101      	bne.n	801267c <dir_sdi+0xcc>
 8012678:	2302      	movs	r3, #2
 801267a:	e010      	b.n	801269e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	69da      	ldr	r2, [r3, #28]
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	0a5b      	lsrs	r3, r3, #9
 8012684:	441a      	add	r2, r3
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012696:	441a      	add	r2, r3
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801269c:	2300      	movs	r3, #0
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3718      	adds	r7, #24
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}

080126a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80126a6:	b580      	push	{r7, lr}
 80126a8:	b086      	sub	sp, #24
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	6078      	str	r0, [r7, #4]
 80126ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	695b      	ldr	r3, [r3, #20]
 80126ba:	3320      	adds	r3, #32
 80126bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	69db      	ldr	r3, [r3, #28]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d003      	beq.n	80126ce <dir_next+0x28>
 80126c6:	68bb      	ldr	r3, [r7, #8]
 80126c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80126cc:	d301      	bcc.n	80126d2 <dir_next+0x2c>
 80126ce:	2304      	movs	r3, #4
 80126d0:	e0aa      	b.n	8012828 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f040 8098 	bne.w	801280e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	69db      	ldr	r3, [r3, #28]
 80126e2:	1c5a      	adds	r2, r3, #1
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	699b      	ldr	r3, [r3, #24]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d10b      	bne.n	8012708 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	095b      	lsrs	r3, r3, #5
 80126f4:	68fa      	ldr	r2, [r7, #12]
 80126f6:	8912      	ldrh	r2, [r2, #8]
 80126f8:	4293      	cmp	r3, r2
 80126fa:	f0c0 8088 	bcc.w	801280e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2200      	movs	r2, #0
 8012702:	61da      	str	r2, [r3, #28]
 8012704:	2304      	movs	r3, #4
 8012706:	e08f      	b.n	8012828 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012708:	68bb      	ldr	r3, [r7, #8]
 801270a:	0a5b      	lsrs	r3, r3, #9
 801270c:	68fa      	ldr	r2, [r7, #12]
 801270e:	8952      	ldrh	r2, [r2, #10]
 8012710:	3a01      	subs	r2, #1
 8012712:	4013      	ands	r3, r2
 8012714:	2b00      	cmp	r3, #0
 8012716:	d17a      	bne.n	801280e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012718:	687a      	ldr	r2, [r7, #4]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	699b      	ldr	r3, [r3, #24]
 801271e:	4619      	mov	r1, r3
 8012720:	4610      	mov	r0, r2
 8012722:	f7ff fc88 	bl	8012036 <get_fat>
 8012726:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	2b01      	cmp	r3, #1
 801272c:	d801      	bhi.n	8012732 <dir_next+0x8c>
 801272e:	2302      	movs	r3, #2
 8012730:	e07a      	b.n	8012828 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012738:	d101      	bne.n	801273e <dir_next+0x98>
 801273a:	2301      	movs	r3, #1
 801273c:	e074      	b.n	8012828 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	69db      	ldr	r3, [r3, #28]
 8012742:	697a      	ldr	r2, [r7, #20]
 8012744:	429a      	cmp	r2, r3
 8012746:	d358      	bcc.n	80127fa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d104      	bne.n	8012758 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2200      	movs	r2, #0
 8012752:	61da      	str	r2, [r3, #28]
 8012754:	2304      	movs	r3, #4
 8012756:	e067      	b.n	8012828 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012758:	687a      	ldr	r2, [r7, #4]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	699b      	ldr	r3, [r3, #24]
 801275e:	4619      	mov	r1, r3
 8012760:	4610      	mov	r0, r2
 8012762:	f7ff fe59 	bl	8012418 <create_chain>
 8012766:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d101      	bne.n	8012772 <dir_next+0xcc>
 801276e:	2307      	movs	r3, #7
 8012770:	e05a      	b.n	8012828 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	2b01      	cmp	r3, #1
 8012776:	d101      	bne.n	801277c <dir_next+0xd6>
 8012778:	2302      	movs	r3, #2
 801277a:	e055      	b.n	8012828 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012782:	d101      	bne.n	8012788 <dir_next+0xe2>
 8012784:	2301      	movs	r3, #1
 8012786:	e04f      	b.n	8012828 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012788:	68f8      	ldr	r0, [r7, #12]
 801278a:	f7ff fb55 	bl	8011e38 <sync_window>
 801278e:	4603      	mov	r3, r0
 8012790:	2b00      	cmp	r3, #0
 8012792:	d001      	beq.n	8012798 <dir_next+0xf2>
 8012794:	2301      	movs	r3, #1
 8012796:	e047      	b.n	8012828 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	3338      	adds	r3, #56	; 0x38
 801279c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80127a0:	2100      	movs	r1, #0
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7ff f97f 	bl	8011aa6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80127a8:	2300      	movs	r3, #0
 80127aa:	613b      	str	r3, [r7, #16]
 80127ac:	6979      	ldr	r1, [r7, #20]
 80127ae:	68f8      	ldr	r0, [r7, #12]
 80127b0:	f7ff fc22 	bl	8011ff8 <clust2sect>
 80127b4:	4602      	mov	r2, r0
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	635a      	str	r2, [r3, #52]	; 0x34
 80127ba:	e012      	b.n	80127e2 <dir_next+0x13c>
						fs->wflag = 1;
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	2201      	movs	r2, #1
 80127c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80127c2:	68f8      	ldr	r0, [r7, #12]
 80127c4:	f7ff fb38 	bl	8011e38 <sync_window>
 80127c8:	4603      	mov	r3, r0
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d001      	beq.n	80127d2 <dir_next+0x12c>
 80127ce:	2301      	movs	r3, #1
 80127d0:	e02a      	b.n	8012828 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	3301      	adds	r3, #1
 80127d6:	613b      	str	r3, [r7, #16]
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127dc:	1c5a      	adds	r2, r3, #1
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	635a      	str	r2, [r3, #52]	; 0x34
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	895b      	ldrh	r3, [r3, #10]
 80127e6:	461a      	mov	r2, r3
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d3e6      	bcc.n	80127bc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	1ad2      	subs	r2, r2, r3
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	697a      	ldr	r2, [r7, #20]
 80127fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012800:	6979      	ldr	r1, [r7, #20]
 8012802:	68f8      	ldr	r0, [r7, #12]
 8012804:	f7ff fbf8 	bl	8011ff8 <clust2sect>
 8012808:	4602      	mov	r2, r0
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	68ba      	ldr	r2, [r7, #8]
 8012812:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012820:	441a      	add	r2, r3
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012826:	2300      	movs	r3, #0
}
 8012828:	4618      	mov	r0, r3
 801282a:	3718      	adds	r7, #24
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b086      	sub	sp, #24
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012840:	2100      	movs	r1, #0
 8012842:	6878      	ldr	r0, [r7, #4]
 8012844:	f7ff feb4 	bl	80125b0 <dir_sdi>
 8012848:	4603      	mov	r3, r0
 801284a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801284c:	7dfb      	ldrb	r3, [r7, #23]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d12b      	bne.n	80128aa <dir_alloc+0x7a>
		n = 0;
 8012852:	2300      	movs	r3, #0
 8012854:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	69db      	ldr	r3, [r3, #28]
 801285a:	4619      	mov	r1, r3
 801285c:	68f8      	ldr	r0, [r7, #12]
 801285e:	f7ff fb2f 	bl	8011ec0 <move_window>
 8012862:	4603      	mov	r3, r0
 8012864:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012866:	7dfb      	ldrb	r3, [r7, #23]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d11d      	bne.n	80128a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	6a1b      	ldr	r3, [r3, #32]
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	2be5      	cmp	r3, #229	; 0xe5
 8012874:	d004      	beq.n	8012880 <dir_alloc+0x50>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6a1b      	ldr	r3, [r3, #32]
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d107      	bne.n	8012890 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012880:	693b      	ldr	r3, [r7, #16]
 8012882:	3301      	adds	r3, #1
 8012884:	613b      	str	r3, [r7, #16]
 8012886:	693a      	ldr	r2, [r7, #16]
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	429a      	cmp	r2, r3
 801288c:	d102      	bne.n	8012894 <dir_alloc+0x64>
 801288e:	e00c      	b.n	80128aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012890:	2300      	movs	r3, #0
 8012892:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012894:	2101      	movs	r1, #1
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f7ff ff05 	bl	80126a6 <dir_next>
 801289c:	4603      	mov	r3, r0
 801289e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80128a0:	7dfb      	ldrb	r3, [r7, #23]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d0d7      	beq.n	8012856 <dir_alloc+0x26>
 80128a6:	e000      	b.n	80128aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80128a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80128aa:	7dfb      	ldrb	r3, [r7, #23]
 80128ac:	2b04      	cmp	r3, #4
 80128ae:	d101      	bne.n	80128b4 <dir_alloc+0x84>
 80128b0:	2307      	movs	r3, #7
 80128b2:	75fb      	strb	r3, [r7, #23]
	return res;
 80128b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3718      	adds	r7, #24
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}

080128be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80128be:	b580      	push	{r7, lr}
 80128c0:	b084      	sub	sp, #16
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
 80128c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	331a      	adds	r3, #26
 80128cc:	4618      	mov	r0, r3
 80128ce:	f7ff f847 	bl	8011960 <ld_word>
 80128d2:	4603      	mov	r3, r0
 80128d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	781b      	ldrb	r3, [r3, #0]
 80128da:	2b03      	cmp	r3, #3
 80128dc:	d109      	bne.n	80128f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	3314      	adds	r3, #20
 80128e2:	4618      	mov	r0, r3
 80128e4:	f7ff f83c 	bl	8011960 <ld_word>
 80128e8:	4603      	mov	r3, r0
 80128ea:	041b      	lsls	r3, r3, #16
 80128ec:	68fa      	ldr	r2, [r7, #12]
 80128ee:	4313      	orrs	r3, r2
 80128f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80128f2:	68fb      	ldr	r3, [r7, #12]
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3710      	adds	r7, #16
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	60f8      	str	r0, [r7, #12]
 8012904:	60b9      	str	r1, [r7, #8]
 8012906:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	331a      	adds	r3, #26
 801290c:	687a      	ldr	r2, [r7, #4]
 801290e:	b292      	uxth	r2, r2
 8012910:	4611      	mov	r1, r2
 8012912:	4618      	mov	r0, r3
 8012914:	f7ff f85f 	bl	80119d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	2b03      	cmp	r3, #3
 801291e:	d109      	bne.n	8012934 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	f103 0214 	add.w	r2, r3, #20
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	0c1b      	lsrs	r3, r3, #16
 801292a:	b29b      	uxth	r3, r3
 801292c:	4619      	mov	r1, r3
 801292e:	4610      	mov	r0, r2
 8012930:	f7ff f851 	bl	80119d6 <st_word>
	}
}
 8012934:	bf00      	nop
 8012936:	3710      	adds	r7, #16
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}

0801293c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801293c:	b590      	push	{r4, r7, lr}
 801293e:	b087      	sub	sp, #28
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	331a      	adds	r3, #26
 801294a:	4618      	mov	r0, r3
 801294c:	f7ff f808 	bl	8011960 <ld_word>
 8012950:	4603      	mov	r3, r0
 8012952:	2b00      	cmp	r3, #0
 8012954:	d001      	beq.n	801295a <cmp_lfn+0x1e>
 8012956:	2300      	movs	r3, #0
 8012958:	e059      	b.n	8012a0e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012962:	1e5a      	subs	r2, r3, #1
 8012964:	4613      	mov	r3, r2
 8012966:	005b      	lsls	r3, r3, #1
 8012968:	4413      	add	r3, r2
 801296a:	009b      	lsls	r3, r3, #2
 801296c:	4413      	add	r3, r2
 801296e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012970:	2301      	movs	r3, #1
 8012972:	81fb      	strh	r3, [r7, #14]
 8012974:	2300      	movs	r3, #0
 8012976:	613b      	str	r3, [r7, #16]
 8012978:	e033      	b.n	80129e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801297a:	4a27      	ldr	r2, [pc, #156]	; (8012a18 <cmp_lfn+0xdc>)
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	4413      	add	r3, r2
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	461a      	mov	r2, r3
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	4413      	add	r3, r2
 8012988:	4618      	mov	r0, r3
 801298a:	f7fe ffe9 	bl	8011960 <ld_word>
 801298e:	4603      	mov	r3, r0
 8012990:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012992:	89fb      	ldrh	r3, [r7, #14]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d01a      	beq.n	80129ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012998:	697b      	ldr	r3, [r7, #20]
 801299a:	2bfe      	cmp	r3, #254	; 0xfe
 801299c:	d812      	bhi.n	80129c4 <cmp_lfn+0x88>
 801299e:	89bb      	ldrh	r3, [r7, #12]
 80129a0:	4618      	mov	r0, r3
 80129a2:	f002 fc81 	bl	80152a8 <ff_wtoupper>
 80129a6:	4603      	mov	r3, r0
 80129a8:	461c      	mov	r4, r3
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	1c5a      	adds	r2, r3, #1
 80129ae:	617a      	str	r2, [r7, #20]
 80129b0:	005b      	lsls	r3, r3, #1
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	4413      	add	r3, r2
 80129b6:	881b      	ldrh	r3, [r3, #0]
 80129b8:	4618      	mov	r0, r3
 80129ba:	f002 fc75 	bl	80152a8 <ff_wtoupper>
 80129be:	4603      	mov	r3, r0
 80129c0:	429c      	cmp	r4, r3
 80129c2:	d001      	beq.n	80129c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80129c4:	2300      	movs	r3, #0
 80129c6:	e022      	b.n	8012a0e <cmp_lfn+0xd2>
			}
			wc = uc;
 80129c8:	89bb      	ldrh	r3, [r7, #12]
 80129ca:	81fb      	strh	r3, [r7, #14]
 80129cc:	e006      	b.n	80129dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80129ce:	89bb      	ldrh	r3, [r7, #12]
 80129d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129d4:	4293      	cmp	r3, r2
 80129d6:	d001      	beq.n	80129dc <cmp_lfn+0xa0>
 80129d8:	2300      	movs	r3, #0
 80129da:	e018      	b.n	8012a0e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	3301      	adds	r3, #1
 80129e0:	613b      	str	r3, [r7, #16]
 80129e2:	693b      	ldr	r3, [r7, #16]
 80129e4:	2b0c      	cmp	r3, #12
 80129e6:	d9c8      	bls.n	801297a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d00b      	beq.n	8012a0c <cmp_lfn+0xd0>
 80129f4:	89fb      	ldrh	r3, [r7, #14]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d008      	beq.n	8012a0c <cmp_lfn+0xd0>
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	005b      	lsls	r3, r3, #1
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	4413      	add	r3, r2
 8012a02:	881b      	ldrh	r3, [r3, #0]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d001      	beq.n	8012a0c <cmp_lfn+0xd0>
 8012a08:	2300      	movs	r3, #0
 8012a0a:	e000      	b.n	8012a0e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012a0c:	2301      	movs	r3, #1
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	371c      	adds	r7, #28
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd90      	pop	{r4, r7, pc}
 8012a16:	bf00      	nop
 8012a18:	0801a558 	.word	0x0801a558

08012a1c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b088      	sub	sp, #32
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	60f8      	str	r0, [r7, #12]
 8012a24:	60b9      	str	r1, [r7, #8]
 8012a26:	4611      	mov	r1, r2
 8012a28:	461a      	mov	r2, r3
 8012a2a:	460b      	mov	r3, r1
 8012a2c:	71fb      	strb	r3, [r7, #7]
 8012a2e:	4613      	mov	r3, r2
 8012a30:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	330d      	adds	r3, #13
 8012a36:	79ba      	ldrb	r2, [r7, #6]
 8012a38:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	330b      	adds	r3, #11
 8012a3e:	220f      	movs	r2, #15
 8012a40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	330c      	adds	r3, #12
 8012a46:	2200      	movs	r2, #0
 8012a48:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	331a      	adds	r3, #26
 8012a4e:	2100      	movs	r1, #0
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7fe ffc0 	bl	80119d6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8012a56:	79fb      	ldrb	r3, [r7, #7]
 8012a58:	1e5a      	subs	r2, r3, #1
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	005b      	lsls	r3, r3, #1
 8012a5e:	4413      	add	r3, r2
 8012a60:	009b      	lsls	r3, r3, #2
 8012a62:	4413      	add	r3, r2
 8012a64:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012a66:	2300      	movs	r3, #0
 8012a68:	82fb      	strh	r3, [r7, #22]
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012a6e:	8afb      	ldrh	r3, [r7, #22]
 8012a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a74:	4293      	cmp	r3, r2
 8012a76:	d007      	beq.n	8012a88 <put_lfn+0x6c>
 8012a78:	69fb      	ldr	r3, [r7, #28]
 8012a7a:	1c5a      	adds	r2, r3, #1
 8012a7c:	61fa      	str	r2, [r7, #28]
 8012a7e:	005b      	lsls	r3, r3, #1
 8012a80:	68fa      	ldr	r2, [r7, #12]
 8012a82:	4413      	add	r3, r2
 8012a84:	881b      	ldrh	r3, [r3, #0]
 8012a86:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012a88:	4a17      	ldr	r2, [pc, #92]	; (8012ae8 <put_lfn+0xcc>)
 8012a8a:	69bb      	ldr	r3, [r7, #24]
 8012a8c:	4413      	add	r3, r2
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	461a      	mov	r2, r3
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	4413      	add	r3, r2
 8012a96:	8afa      	ldrh	r2, [r7, #22]
 8012a98:	4611      	mov	r1, r2
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7fe ff9b 	bl	80119d6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012aa0:	8afb      	ldrh	r3, [r7, #22]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d102      	bne.n	8012aac <put_lfn+0x90>
 8012aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012aaa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012aac:	69bb      	ldr	r3, [r7, #24]
 8012aae:	3301      	adds	r3, #1
 8012ab0:	61bb      	str	r3, [r7, #24]
 8012ab2:	69bb      	ldr	r3, [r7, #24]
 8012ab4:	2b0c      	cmp	r3, #12
 8012ab6:	d9da      	bls.n	8012a6e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012ab8:	8afb      	ldrh	r3, [r7, #22]
 8012aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012abe:	4293      	cmp	r3, r2
 8012ac0:	d006      	beq.n	8012ad0 <put_lfn+0xb4>
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	005b      	lsls	r3, r3, #1
 8012ac6:	68fa      	ldr	r2, [r7, #12]
 8012ac8:	4413      	add	r3, r2
 8012aca:	881b      	ldrh	r3, [r3, #0]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d103      	bne.n	8012ad8 <put_lfn+0xbc>
 8012ad0:	79fb      	ldrb	r3, [r7, #7]
 8012ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ad6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	79fa      	ldrb	r2, [r7, #7]
 8012adc:	701a      	strb	r2, [r3, #0]
}
 8012ade:	bf00      	nop
 8012ae0:	3720      	adds	r7, #32
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}
 8012ae6:	bf00      	nop
 8012ae8:	0801a558 	.word	0x0801a558

08012aec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b08c      	sub	sp, #48	; 0x30
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	60f8      	str	r0, [r7, #12]
 8012af4:	60b9      	str	r1, [r7, #8]
 8012af6:	607a      	str	r2, [r7, #4]
 8012af8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012afa:	220b      	movs	r2, #11
 8012afc:	68b9      	ldr	r1, [r7, #8]
 8012afe:	68f8      	ldr	r0, [r7, #12]
 8012b00:	f7fe ffb0 	bl	8011a64 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	2b05      	cmp	r3, #5
 8012b08:	d92b      	bls.n	8012b62 <gen_numname+0x76>
		sr = seq;
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8012b0e:	e022      	b.n	8012b56 <gen_numname+0x6a>
			wc = *lfn++;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	1c9a      	adds	r2, r3, #2
 8012b14:	607a      	str	r2, [r7, #4]
 8012b16:	881b      	ldrh	r3, [r3, #0]
 8012b18:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b1e:	e017      	b.n	8012b50 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8012b20:	69fb      	ldr	r3, [r7, #28]
 8012b22:	005a      	lsls	r2, r3, #1
 8012b24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b26:	f003 0301 	and.w	r3, r3, #1
 8012b2a:	4413      	add	r3, r2
 8012b2c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012b2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b30:	085b      	lsrs	r3, r3, #1
 8012b32:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8012b34:	69fb      	ldr	r3, [r7, #28]
 8012b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d005      	beq.n	8012b4a <gen_numname+0x5e>
 8012b3e:	69fb      	ldr	r3, [r7, #28]
 8012b40:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8012b44:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8012b48:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8012b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b52:	2b0f      	cmp	r3, #15
 8012b54:	d9e4      	bls.n	8012b20 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	881b      	ldrh	r3, [r3, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d1d8      	bne.n	8012b10 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012b5e:	69fb      	ldr	r3, [r7, #28]
 8012b60:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8012b62:	2307      	movs	r3, #7
 8012b64:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	b2db      	uxtb	r3, r3
 8012b6a:	f003 030f 	and.w	r3, r3, #15
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	3330      	adds	r3, #48	; 0x30
 8012b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8012b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b7a:	2b39      	cmp	r3, #57	; 0x39
 8012b7c:	d904      	bls.n	8012b88 <gen_numname+0x9c>
 8012b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b82:	3307      	adds	r3, #7
 8012b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8012b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b8a:	1e5a      	subs	r2, r3, #1
 8012b8c:	62ba      	str	r2, [r7, #40]	; 0x28
 8012b8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012b92:	4413      	add	r3, r2
 8012b94:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012b98:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	091b      	lsrs	r3, r3, #4
 8012ba0:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d1de      	bne.n	8012b66 <gen_numname+0x7a>
	ns[i] = '~';
 8012ba8:	f107 0214 	add.w	r2, r7, #20
 8012bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bae:	4413      	add	r3, r2
 8012bb0:	227e      	movs	r2, #126	; 0x7e
 8012bb2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8012bb8:	e002      	b.n	8012bc0 <gen_numname+0xd4>
 8012bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bbc:	3301      	adds	r3, #1
 8012bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8012bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d205      	bcs.n	8012bd4 <gen_numname+0xe8>
 8012bc8:	68fa      	ldr	r2, [r7, #12]
 8012bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bcc:	4413      	add	r3, r2
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	2b20      	cmp	r3, #32
 8012bd2:	d1f2      	bne.n	8012bba <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd6:	2b07      	cmp	r3, #7
 8012bd8:	d808      	bhi.n	8012bec <gen_numname+0x100>
 8012bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bdc:	1c5a      	adds	r2, r3, #1
 8012bde:	62ba      	str	r2, [r7, #40]	; 0x28
 8012be0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012be4:	4413      	add	r3, r2
 8012be6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012bea:	e000      	b.n	8012bee <gen_numname+0x102>
 8012bec:	2120      	movs	r1, #32
 8012bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf0:	1c5a      	adds	r2, r3, #1
 8012bf2:	627a      	str	r2, [r7, #36]	; 0x24
 8012bf4:	68fa      	ldr	r2, [r7, #12]
 8012bf6:	4413      	add	r3, r2
 8012bf8:	460a      	mov	r2, r1
 8012bfa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfe:	2b07      	cmp	r3, #7
 8012c00:	d9e8      	bls.n	8012bd4 <gen_numname+0xe8>
}
 8012c02:	bf00      	nop
 8012c04:	3730      	adds	r7, #48	; 0x30
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}

08012c0a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8012c0a:	b480      	push	{r7}
 8012c0c:	b085      	sub	sp, #20
 8012c0e:	af00      	add	r7, sp, #0
 8012c10:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012c12:	2300      	movs	r3, #0
 8012c14:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012c16:	230b      	movs	r3, #11
 8012c18:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012c1a:	7bfb      	ldrb	r3, [r7, #15]
 8012c1c:	b2da      	uxtb	r2, r3
 8012c1e:	0852      	lsrs	r2, r2, #1
 8012c20:	01db      	lsls	r3, r3, #7
 8012c22:	4313      	orrs	r3, r2
 8012c24:	b2da      	uxtb	r2, r3
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	1c59      	adds	r1, r3, #1
 8012c2a:	6079      	str	r1, [r7, #4]
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	4413      	add	r3, r2
 8012c30:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	3b01      	subs	r3, #1
 8012c36:	60bb      	str	r3, [r7, #8]
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d1ed      	bne.n	8012c1a <sum_sfn+0x10>
	return sum;
 8012c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3714      	adds	r7, #20
 8012c44:	46bd      	mov	sp, r7
 8012c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4a:	4770      	bx	lr

08012c4c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b086      	sub	sp, #24
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012c5a:	2100      	movs	r1, #0
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f7ff fca7 	bl	80125b0 <dir_sdi>
 8012c62:	4603      	mov	r3, r0
 8012c64:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012c66:	7dfb      	ldrb	r3, [r7, #23]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d001      	beq.n	8012c70 <dir_find+0x24>
 8012c6c:	7dfb      	ldrb	r3, [r7, #23]
 8012c6e:	e0a9      	b.n	8012dc4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012c70:	23ff      	movs	r3, #255	; 0xff
 8012c72:	753b      	strb	r3, [r7, #20]
 8012c74:	7d3b      	ldrb	r3, [r7, #20]
 8012c76:	757b      	strb	r3, [r7, #21]
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c7e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	69db      	ldr	r3, [r3, #28]
 8012c84:	4619      	mov	r1, r3
 8012c86:	6938      	ldr	r0, [r7, #16]
 8012c88:	f7ff f91a 	bl	8011ec0 <move_window>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012c90:	7dfb      	ldrb	r3, [r7, #23]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	f040 8090 	bne.w	8012db8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	6a1b      	ldr	r3, [r3, #32]
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012ca0:	7dbb      	ldrb	r3, [r7, #22]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d102      	bne.n	8012cac <dir_find+0x60>
 8012ca6:	2304      	movs	r3, #4
 8012ca8:	75fb      	strb	r3, [r7, #23]
 8012caa:	e08a      	b.n	8012dc2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	6a1b      	ldr	r3, [r3, #32]
 8012cb0:	330b      	adds	r3, #11
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012cb8:	73fb      	strb	r3, [r7, #15]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	7bfa      	ldrb	r2, [r7, #15]
 8012cbe:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012cc0:	7dbb      	ldrb	r3, [r7, #22]
 8012cc2:	2be5      	cmp	r3, #229	; 0xe5
 8012cc4:	d007      	beq.n	8012cd6 <dir_find+0x8a>
 8012cc6:	7bfb      	ldrb	r3, [r7, #15]
 8012cc8:	f003 0308 	and.w	r3, r3, #8
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d009      	beq.n	8012ce4 <dir_find+0x98>
 8012cd0:	7bfb      	ldrb	r3, [r7, #15]
 8012cd2:	2b0f      	cmp	r3, #15
 8012cd4:	d006      	beq.n	8012ce4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012cd6:	23ff      	movs	r3, #255	; 0xff
 8012cd8:	757b      	strb	r3, [r7, #21]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8012ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8012ce2:	e05e      	b.n	8012da2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012ce4:	7bfb      	ldrb	r3, [r7, #15]
 8012ce6:	2b0f      	cmp	r3, #15
 8012ce8:	d136      	bne.n	8012d58 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d154      	bne.n	8012da2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012cf8:	7dbb      	ldrb	r3, [r7, #22]
 8012cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d00d      	beq.n	8012d1e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6a1b      	ldr	r3, [r3, #32]
 8012d06:	7b5b      	ldrb	r3, [r3, #13]
 8012d08:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012d0a:	7dbb      	ldrb	r3, [r7, #22]
 8012d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012d10:	75bb      	strb	r3, [r7, #22]
 8012d12:	7dbb      	ldrb	r3, [r7, #22]
 8012d14:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	695a      	ldr	r2, [r3, #20]
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012d1e:	7dba      	ldrb	r2, [r7, #22]
 8012d20:	7d7b      	ldrb	r3, [r7, #21]
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d115      	bne.n	8012d52 <dir_find+0x106>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	6a1b      	ldr	r3, [r3, #32]
 8012d2a:	330d      	adds	r3, #13
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	7d3a      	ldrb	r2, [r7, #20]
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d10e      	bne.n	8012d52 <dir_find+0x106>
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	68da      	ldr	r2, [r3, #12]
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6a1b      	ldr	r3, [r3, #32]
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	4610      	mov	r0, r2
 8012d40:	f7ff fdfc 	bl	801293c <cmp_lfn>
 8012d44:	4603      	mov	r3, r0
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d003      	beq.n	8012d52 <dir_find+0x106>
 8012d4a:	7d7b      	ldrb	r3, [r7, #21]
 8012d4c:	3b01      	subs	r3, #1
 8012d4e:	b2db      	uxtb	r3, r3
 8012d50:	e000      	b.n	8012d54 <dir_find+0x108>
 8012d52:	23ff      	movs	r3, #255	; 0xff
 8012d54:	757b      	strb	r3, [r7, #21]
 8012d56:	e024      	b.n	8012da2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012d58:	7d7b      	ldrb	r3, [r7, #21]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d109      	bne.n	8012d72 <dir_find+0x126>
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6a1b      	ldr	r3, [r3, #32]
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7ff ff51 	bl	8012c0a <sum_sfn>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	7d3b      	ldrb	r3, [r7, #20]
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	d024      	beq.n	8012dbc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012d78:	f003 0301 	and.w	r3, r3, #1
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d10a      	bne.n	8012d96 <dir_find+0x14a>
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6a18      	ldr	r0, [r3, #32]
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	3324      	adds	r3, #36	; 0x24
 8012d88:	220b      	movs	r2, #11
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	f7fe fea5 	bl	8011ada <mem_cmp>
 8012d90:	4603      	mov	r3, r0
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d014      	beq.n	8012dc0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012d96:	23ff      	movs	r3, #255	; 0xff
 8012d98:	757b      	strb	r3, [r7, #21]
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8012da0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012da2:	2100      	movs	r1, #0
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f7ff fc7e 	bl	80126a6 <dir_next>
 8012daa:	4603      	mov	r3, r0
 8012dac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012dae:	7dfb      	ldrb	r3, [r7, #23]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	f43f af65 	beq.w	8012c80 <dir_find+0x34>
 8012db6:	e004      	b.n	8012dc2 <dir_find+0x176>
		if (res != FR_OK) break;
 8012db8:	bf00      	nop
 8012dba:	e002      	b.n	8012dc2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012dbc:	bf00      	nop
 8012dbe:	e000      	b.n	8012dc2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012dc0:	bf00      	nop

	return res;
 8012dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3718      	adds	r7, #24
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b08c      	sub	sp, #48	; 0x30
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012de0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d001      	beq.n	8012dec <dir_register+0x20>
 8012de8:	2306      	movs	r3, #6
 8012dea:	e0e0      	b.n	8012fae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012dec:	2300      	movs	r3, #0
 8012dee:	627b      	str	r3, [r7, #36]	; 0x24
 8012df0:	e002      	b.n	8012df8 <dir_register+0x2c>
 8012df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df4:	3301      	adds	r3, #1
 8012df6:	627b      	str	r3, [r7, #36]	; 0x24
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	68da      	ldr	r2, [r3, #12]
 8012dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfe:	005b      	lsls	r3, r3, #1
 8012e00:	4413      	add	r3, r2
 8012e02:	881b      	ldrh	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d1f4      	bne.n	8012df2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8012e0e:	f107 030c 	add.w	r3, r7, #12
 8012e12:	220c      	movs	r2, #12
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7fe fe25 	bl	8011a64 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012e1a:	7dfb      	ldrb	r3, [r7, #23]
 8012e1c:	f003 0301 	and.w	r3, r3, #1
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d032      	beq.n	8012e8a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2240      	movs	r2, #64	; 0x40
 8012e28:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e30:	e016      	b.n	8012e60 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	68da      	ldr	r2, [r3, #12]
 8012e3c:	f107 010c 	add.w	r1, r7, #12
 8012e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e42:	f7ff fe53 	bl	8012aec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	f7ff ff00 	bl	8012c4c <dir_find>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8012e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d106      	bne.n	8012e68 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8012e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e62:	2b63      	cmp	r3, #99	; 0x63
 8012e64:	d9e5      	bls.n	8012e32 <dir_register+0x66>
 8012e66:	e000      	b.n	8012e6a <dir_register+0x9e>
			if (res != FR_OK) break;
 8012e68:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8012e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6c:	2b64      	cmp	r3, #100	; 0x64
 8012e6e:	d101      	bne.n	8012e74 <dir_register+0xa8>
 8012e70:	2307      	movs	r3, #7
 8012e72:	e09c      	b.n	8012fae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012e74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e78:	2b04      	cmp	r3, #4
 8012e7a:	d002      	beq.n	8012e82 <dir_register+0xb6>
 8012e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e80:	e095      	b.n	8012fae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012e82:	7dfa      	ldrb	r2, [r7, #23]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012e8a:	7dfb      	ldrb	r3, [r7, #23]
 8012e8c:	f003 0302 	and.w	r3, r3, #2
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d007      	beq.n	8012ea4 <dir_register+0xd8>
 8012e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e96:	330c      	adds	r3, #12
 8012e98:	4a47      	ldr	r2, [pc, #284]	; (8012fb8 <dir_register+0x1ec>)
 8012e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8012e9e:	089b      	lsrs	r3, r3, #2
 8012ea0:	3301      	adds	r3, #1
 8012ea2:	e000      	b.n	8012ea6 <dir_register+0xda>
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012ea8:	6a39      	ldr	r1, [r7, #32]
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7ff fcc0 	bl	8012830 <dir_alloc>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d148      	bne.n	8012f50 <dir_register+0x184>
 8012ebe:	6a3b      	ldr	r3, [r7, #32]
 8012ec0:	3b01      	subs	r3, #1
 8012ec2:	623b      	str	r3, [r7, #32]
 8012ec4:	6a3b      	ldr	r3, [r7, #32]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d042      	beq.n	8012f50 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	695a      	ldr	r2, [r3, #20]
 8012ece:	6a3b      	ldr	r3, [r7, #32]
 8012ed0:	015b      	lsls	r3, r3, #5
 8012ed2:	1ad3      	subs	r3, r2, r3
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f7ff fb6a 	bl	80125b0 <dir_sdi>
 8012edc:	4603      	mov	r3, r0
 8012ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8012ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d132      	bne.n	8012f50 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	3324      	adds	r3, #36	; 0x24
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7ff fe8b 	bl	8012c0a <sum_sfn>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	69db      	ldr	r3, [r3, #28]
 8012efc:	4619      	mov	r1, r3
 8012efe:	69f8      	ldr	r0, [r7, #28]
 8012f00:	f7fe ffde 	bl	8011ec0 <move_window>
 8012f04:	4603      	mov	r3, r0
 8012f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8012f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d11d      	bne.n	8012f4e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	68d8      	ldr	r0, [r3, #12]
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6a19      	ldr	r1, [r3, #32]
 8012f1a:	6a3b      	ldr	r3, [r7, #32]
 8012f1c:	b2da      	uxtb	r2, r3
 8012f1e:	7efb      	ldrb	r3, [r7, #27]
 8012f20:	f7ff fd7c 	bl	8012a1c <put_lfn>
				fs->wflag = 1;
 8012f24:	69fb      	ldr	r3, [r7, #28]
 8012f26:	2201      	movs	r2, #1
 8012f28:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012f2a:	2100      	movs	r1, #0
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f7ff fbba 	bl	80126a6 <dir_next>
 8012f32:	4603      	mov	r3, r0
 8012f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8012f38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d107      	bne.n	8012f50 <dir_register+0x184>
 8012f40:	6a3b      	ldr	r3, [r7, #32]
 8012f42:	3b01      	subs	r3, #1
 8012f44:	623b      	str	r3, [r7, #32]
 8012f46:	6a3b      	ldr	r3, [r7, #32]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d1d5      	bne.n	8012ef8 <dir_register+0x12c>
 8012f4c:	e000      	b.n	8012f50 <dir_register+0x184>
				if (res != FR_OK) break;
 8012f4e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d128      	bne.n	8012faa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	69db      	ldr	r3, [r3, #28]
 8012f5c:	4619      	mov	r1, r3
 8012f5e:	69f8      	ldr	r0, [r7, #28]
 8012f60:	f7fe ffae 	bl	8011ec0 <move_window>
 8012f64:	4603      	mov	r3, r0
 8012f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8012f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d11b      	bne.n	8012faa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6a1b      	ldr	r3, [r3, #32]
 8012f76:	2220      	movs	r2, #32
 8012f78:	2100      	movs	r1, #0
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7fe fd93 	bl	8011aa6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	6a18      	ldr	r0, [r3, #32]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	3324      	adds	r3, #36	; 0x24
 8012f88:	220b      	movs	r2, #11
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	f7fe fd6a 	bl	8011a64 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	6a1b      	ldr	r3, [r3, #32]
 8012f9a:	330c      	adds	r3, #12
 8012f9c:	f002 0218 	and.w	r2, r2, #24
 8012fa0:	b2d2      	uxtb	r2, r2
 8012fa2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012fa4:	69fb      	ldr	r3, [r7, #28]
 8012fa6:	2201      	movs	r2, #1
 8012fa8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012faa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3730      	adds	r7, #48	; 0x30
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	4ec4ec4f 	.word	0x4ec4ec4f

08012fbc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b08a      	sub	sp, #40	; 0x28
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	613b      	str	r3, [r7, #16]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	60fb      	str	r3, [r7, #12]
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	617b      	str	r3, [r7, #20]
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012fdc:	69bb      	ldr	r3, [r7, #24]
 8012fde:	1c5a      	adds	r2, r3, #1
 8012fe0:	61ba      	str	r2, [r7, #24]
 8012fe2:	693a      	ldr	r2, [r7, #16]
 8012fe4:	4413      	add	r3, r2
 8012fe6:	781b      	ldrb	r3, [r3, #0]
 8012fe8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012fea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012fec:	2b1f      	cmp	r3, #31
 8012fee:	d940      	bls.n	8013072 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ff2:	2b2f      	cmp	r3, #47	; 0x2f
 8012ff4:	d006      	beq.n	8013004 <create_name+0x48>
 8012ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ff8:	2b5c      	cmp	r3, #92	; 0x5c
 8012ffa:	d110      	bne.n	801301e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012ffc:	e002      	b.n	8013004 <create_name+0x48>
 8012ffe:	69bb      	ldr	r3, [r7, #24]
 8013000:	3301      	adds	r3, #1
 8013002:	61bb      	str	r3, [r7, #24]
 8013004:	693a      	ldr	r2, [r7, #16]
 8013006:	69bb      	ldr	r3, [r7, #24]
 8013008:	4413      	add	r3, r2
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	2b2f      	cmp	r3, #47	; 0x2f
 801300e:	d0f6      	beq.n	8012ffe <create_name+0x42>
 8013010:	693a      	ldr	r2, [r7, #16]
 8013012:	69bb      	ldr	r3, [r7, #24]
 8013014:	4413      	add	r3, r2
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	2b5c      	cmp	r3, #92	; 0x5c
 801301a:	d0f0      	beq.n	8012ffe <create_name+0x42>
			break;
 801301c:	e02a      	b.n	8013074 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	2bfe      	cmp	r3, #254	; 0xfe
 8013022:	d901      	bls.n	8013028 <create_name+0x6c>
 8013024:	2306      	movs	r3, #6
 8013026:	e1c9      	b.n	80133bc <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801302a:	b2db      	uxtb	r3, r3
 801302c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801302e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013030:	2101      	movs	r1, #1
 8013032:	4618      	mov	r0, r3
 8013034:	f002 f8fc 	bl	8015230 <ff_convert>
 8013038:	4603      	mov	r3, r0
 801303a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801303c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801303e:	2b00      	cmp	r3, #0
 8013040:	d101      	bne.n	8013046 <create_name+0x8a>
 8013042:	2306      	movs	r3, #6
 8013044:	e1ba      	b.n	80133bc <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013048:	2b7f      	cmp	r3, #127	; 0x7f
 801304a:	d809      	bhi.n	8013060 <create_name+0xa4>
 801304c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801304e:	4619      	mov	r1, r3
 8013050:	48a5      	ldr	r0, [pc, #660]	; (80132e8 <create_name+0x32c>)
 8013052:	f7fe fd69 	bl	8011b28 <chk_chr>
 8013056:	4603      	mov	r3, r0
 8013058:	2b00      	cmp	r3, #0
 801305a:	d001      	beq.n	8013060 <create_name+0xa4>
 801305c:	2306      	movs	r3, #6
 801305e:	e1ad      	b.n	80133bc <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	1c5a      	adds	r2, r3, #1
 8013064:	617a      	str	r2, [r7, #20]
 8013066:	005b      	lsls	r3, r3, #1
 8013068:	68fa      	ldr	r2, [r7, #12]
 801306a:	4413      	add	r3, r2
 801306c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801306e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013070:	e7b4      	b.n	8012fdc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8013072:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013074:	693a      	ldr	r2, [r7, #16]
 8013076:	69bb      	ldr	r3, [r7, #24]
 8013078:	441a      	add	r2, r3
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801307e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013080:	2b1f      	cmp	r3, #31
 8013082:	d801      	bhi.n	8013088 <create_name+0xcc>
 8013084:	2304      	movs	r3, #4
 8013086:	e000      	b.n	801308a <create_name+0xce>
 8013088:	2300      	movs	r3, #0
 801308a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	2b01      	cmp	r3, #1
 8013092:	d109      	bne.n	80130a8 <create_name+0xec>
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801309a:	3b01      	subs	r3, #1
 801309c:	005b      	lsls	r3, r3, #1
 801309e:	68fa      	ldr	r2, [r7, #12]
 80130a0:	4413      	add	r3, r2
 80130a2:	881b      	ldrh	r3, [r3, #0]
 80130a4:	2b2e      	cmp	r3, #46	; 0x2e
 80130a6:	d016      	beq.n	80130d6 <create_name+0x11a>
 80130a8:	697b      	ldr	r3, [r7, #20]
 80130aa:	2b02      	cmp	r3, #2
 80130ac:	d14e      	bne.n	801314c <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80130b4:	3b01      	subs	r3, #1
 80130b6:	005b      	lsls	r3, r3, #1
 80130b8:	68fa      	ldr	r2, [r7, #12]
 80130ba:	4413      	add	r3, r2
 80130bc:	881b      	ldrh	r3, [r3, #0]
 80130be:	2b2e      	cmp	r3, #46	; 0x2e
 80130c0:	d144      	bne.n	801314c <create_name+0x190>
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80130c8:	3b02      	subs	r3, #2
 80130ca:	005b      	lsls	r3, r3, #1
 80130cc:	68fa      	ldr	r2, [r7, #12]
 80130ce:	4413      	add	r3, r2
 80130d0:	881b      	ldrh	r3, [r3, #0]
 80130d2:	2b2e      	cmp	r3, #46	; 0x2e
 80130d4:	d13a      	bne.n	801314c <create_name+0x190>
		lfn[di] = 0;
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	005b      	lsls	r3, r3, #1
 80130da:	68fa      	ldr	r2, [r7, #12]
 80130dc:	4413      	add	r3, r2
 80130de:	2200      	movs	r2, #0
 80130e0:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80130e2:	2300      	movs	r3, #0
 80130e4:	623b      	str	r3, [r7, #32]
 80130e6:	e00f      	b.n	8013108 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 80130e8:	6a3a      	ldr	r2, [r7, #32]
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	429a      	cmp	r2, r3
 80130ee:	d201      	bcs.n	80130f4 <create_name+0x138>
 80130f0:	212e      	movs	r1, #46	; 0x2e
 80130f2:	e000      	b.n	80130f6 <create_name+0x13a>
 80130f4:	2120      	movs	r1, #32
 80130f6:	687a      	ldr	r2, [r7, #4]
 80130f8:	6a3b      	ldr	r3, [r7, #32]
 80130fa:	4413      	add	r3, r2
 80130fc:	3324      	adds	r3, #36	; 0x24
 80130fe:	460a      	mov	r2, r1
 8013100:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8013102:	6a3b      	ldr	r3, [r7, #32]
 8013104:	3301      	adds	r3, #1
 8013106:	623b      	str	r3, [r7, #32]
 8013108:	6a3b      	ldr	r3, [r7, #32]
 801310a:	2b0a      	cmp	r3, #10
 801310c:	d9ec      	bls.n	80130e8 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 801310e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013112:	f043 0320 	orr.w	r3, r3, #32
 8013116:	b2d9      	uxtb	r1, r3
 8013118:	687a      	ldr	r2, [r7, #4]
 801311a:	6a3b      	ldr	r3, [r7, #32]
 801311c:	4413      	add	r3, r2
 801311e:	3324      	adds	r3, #36	; 0x24
 8013120:	460a      	mov	r2, r1
 8013122:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8013124:	2300      	movs	r3, #0
 8013126:	e149      	b.n	80133bc <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801312e:	3b01      	subs	r3, #1
 8013130:	005b      	lsls	r3, r3, #1
 8013132:	68fa      	ldr	r2, [r7, #12]
 8013134:	4413      	add	r3, r2
 8013136:	881b      	ldrh	r3, [r3, #0]
 8013138:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801313a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801313c:	2b20      	cmp	r3, #32
 801313e:	d002      	beq.n	8013146 <create_name+0x18a>
 8013140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013142:	2b2e      	cmp	r3, #46	; 0x2e
 8013144:	d106      	bne.n	8013154 <create_name+0x198>
		di--;
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	3b01      	subs	r3, #1
 801314a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d1ea      	bne.n	8013128 <create_name+0x16c>
 8013152:	e000      	b.n	8013156 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 8013154:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	005b      	lsls	r3, r3, #1
 801315a:	68fa      	ldr	r2, [r7, #12]
 801315c:	4413      	add	r3, r2
 801315e:	2200      	movs	r2, #0
 8013160:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d101      	bne.n	801316c <create_name+0x1b0>
 8013168:	2306      	movs	r3, #6
 801316a:	e127      	b.n	80133bc <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	3324      	adds	r3, #36	; 0x24
 8013170:	220b      	movs	r2, #11
 8013172:	2120      	movs	r1, #32
 8013174:	4618      	mov	r0, r3
 8013176:	f7fe fc96 	bl	8011aa6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801317a:	2300      	movs	r3, #0
 801317c:	61bb      	str	r3, [r7, #24]
 801317e:	e002      	b.n	8013186 <create_name+0x1ca>
 8013180:	69bb      	ldr	r3, [r7, #24]
 8013182:	3301      	adds	r3, #1
 8013184:	61bb      	str	r3, [r7, #24]
 8013186:	69bb      	ldr	r3, [r7, #24]
 8013188:	005b      	lsls	r3, r3, #1
 801318a:	68fa      	ldr	r2, [r7, #12]
 801318c:	4413      	add	r3, r2
 801318e:	881b      	ldrh	r3, [r3, #0]
 8013190:	2b20      	cmp	r3, #32
 8013192:	d0f5      	beq.n	8013180 <create_name+0x1c4>
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	005b      	lsls	r3, r3, #1
 8013198:	68fa      	ldr	r2, [r7, #12]
 801319a:	4413      	add	r3, r2
 801319c:	881b      	ldrh	r3, [r3, #0]
 801319e:	2b2e      	cmp	r3, #46	; 0x2e
 80131a0:	d0ee      	beq.n	8013180 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 80131a2:	69bb      	ldr	r3, [r7, #24]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d009      	beq.n	80131bc <create_name+0x200>
 80131a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131ac:	f043 0303 	orr.w	r3, r3, #3
 80131b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80131b4:	e002      	b.n	80131bc <create_name+0x200>
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	3b01      	subs	r3, #1
 80131ba:	617b      	str	r3, [r7, #20]
 80131bc:	697b      	ldr	r3, [r7, #20]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d009      	beq.n	80131d6 <create_name+0x21a>
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80131c8:	3b01      	subs	r3, #1
 80131ca:	005b      	lsls	r3, r3, #1
 80131cc:	68fa      	ldr	r2, [r7, #12]
 80131ce:	4413      	add	r3, r2
 80131d0:	881b      	ldrh	r3, [r3, #0]
 80131d2:	2b2e      	cmp	r3, #46	; 0x2e
 80131d4:	d1ef      	bne.n	80131b6 <create_name+0x1fa>

	i = b = 0; ni = 8;
 80131d6:	2300      	movs	r3, #0
 80131d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80131dc:	2300      	movs	r3, #0
 80131de:	623b      	str	r3, [r7, #32]
 80131e0:	2308      	movs	r3, #8
 80131e2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80131e4:	69bb      	ldr	r3, [r7, #24]
 80131e6:	1c5a      	adds	r2, r3, #1
 80131e8:	61ba      	str	r2, [r7, #24]
 80131ea:	005b      	lsls	r3, r3, #1
 80131ec:	68fa      	ldr	r2, [r7, #12]
 80131ee:	4413      	add	r3, r2
 80131f0:	881b      	ldrh	r3, [r3, #0]
 80131f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80131f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	f000 8096 	beq.w	8013328 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80131fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131fe:	2b20      	cmp	r3, #32
 8013200:	d006      	beq.n	8013210 <create_name+0x254>
 8013202:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013204:	2b2e      	cmp	r3, #46	; 0x2e
 8013206:	d10a      	bne.n	801321e <create_name+0x262>
 8013208:	69ba      	ldr	r2, [r7, #24]
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	429a      	cmp	r2, r3
 801320e:	d006      	beq.n	801321e <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 8013210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013214:	f043 0303 	orr.w	r3, r3, #3
 8013218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801321c:	e083      	b.n	8013326 <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801321e:	6a3a      	ldr	r2, [r7, #32]
 8013220:	69fb      	ldr	r3, [r7, #28]
 8013222:	429a      	cmp	r2, r3
 8013224:	d203      	bcs.n	801322e <create_name+0x272>
 8013226:	69ba      	ldr	r2, [r7, #24]
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	429a      	cmp	r2, r3
 801322c:	d123      	bne.n	8013276 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 801322e:	69fb      	ldr	r3, [r7, #28]
 8013230:	2b0b      	cmp	r3, #11
 8013232:	d106      	bne.n	8013242 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 8013234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013238:	f043 0303 	orr.w	r3, r3, #3
 801323c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013240:	e075      	b.n	801332e <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013242:	69ba      	ldr	r2, [r7, #24]
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	429a      	cmp	r2, r3
 8013248:	d005      	beq.n	8013256 <create_name+0x29a>
 801324a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801324e:	f043 0303 	orr.w	r3, r3, #3
 8013252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8013256:	69ba      	ldr	r2, [r7, #24]
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	429a      	cmp	r2, r3
 801325c:	d866      	bhi.n	801332c <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801325e:	697b      	ldr	r3, [r7, #20]
 8013260:	61bb      	str	r3, [r7, #24]
 8013262:	2308      	movs	r3, #8
 8013264:	623b      	str	r3, [r7, #32]
 8013266:	230b      	movs	r3, #11
 8013268:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801326a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801326e:	009b      	lsls	r3, r3, #2
 8013270:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013274:	e057      	b.n	8013326 <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013278:	2b7f      	cmp	r3, #127	; 0x7f
 801327a:	d914      	bls.n	80132a6 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801327c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801327e:	2100      	movs	r1, #0
 8013280:	4618      	mov	r0, r3
 8013282:	f001 ffd5 	bl	8015230 <ff_convert>
 8013286:	4603      	mov	r3, r0
 8013288:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801328a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801328c:	2b00      	cmp	r3, #0
 801328e:	d004      	beq.n	801329a <create_name+0x2de>
 8013290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013292:	3b80      	subs	r3, #128	; 0x80
 8013294:	4a15      	ldr	r2, [pc, #84]	; (80132ec <create_name+0x330>)
 8013296:	5cd3      	ldrb	r3, [r2, r3]
 8013298:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801329a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801329e:	f043 0302 	orr.w	r3, r3, #2
 80132a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80132a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d007      	beq.n	80132bc <create_name+0x300>
 80132ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132ae:	4619      	mov	r1, r3
 80132b0:	480f      	ldr	r0, [pc, #60]	; (80132f0 <create_name+0x334>)
 80132b2:	f7fe fc39 	bl	8011b28 <chk_chr>
 80132b6:	4603      	mov	r3, r0
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d008      	beq.n	80132ce <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80132bc:	235f      	movs	r3, #95	; 0x5f
 80132be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80132c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132c4:	f043 0303 	orr.w	r3, r3, #3
 80132c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80132cc:	e021      	b.n	8013312 <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80132ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132d0:	2b40      	cmp	r3, #64	; 0x40
 80132d2:	d90f      	bls.n	80132f4 <create_name+0x338>
 80132d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132d6:	2b5a      	cmp	r3, #90	; 0x5a
 80132d8:	d80c      	bhi.n	80132f4 <create_name+0x338>
					b |= 2;
 80132da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80132de:	f043 0302 	orr.w	r3, r3, #2
 80132e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80132e6:	e014      	b.n	8013312 <create_name+0x356>
 80132e8:	08016808 	.word	0x08016808
 80132ec:	0801a4d8 	.word	0x0801a4d8
 80132f0:	08016814 	.word	0x08016814
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80132f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132f6:	2b60      	cmp	r3, #96	; 0x60
 80132f8:	d90b      	bls.n	8013312 <create_name+0x356>
 80132fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132fc:	2b7a      	cmp	r3, #122	; 0x7a
 80132fe:	d808      	bhi.n	8013312 <create_name+0x356>
						b |= 1; w -= 0x20;
 8013300:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013304:	f043 0301 	orr.w	r3, r3, #1
 8013308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801330c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801330e:	3b20      	subs	r3, #32
 8013310:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8013312:	6a3b      	ldr	r3, [r7, #32]
 8013314:	1c5a      	adds	r2, r3, #1
 8013316:	623a      	str	r2, [r7, #32]
 8013318:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801331a:	b2d1      	uxtb	r1, r2
 801331c:	687a      	ldr	r2, [r7, #4]
 801331e:	4413      	add	r3, r2
 8013320:	460a      	mov	r2, r1
 8013322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8013326:	e75d      	b.n	80131e4 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 8013328:	bf00      	nop
 801332a:	e000      	b.n	801332e <create_name+0x372>
			if (si > di) break;			/* No extension */
 801332c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013334:	2be5      	cmp	r3, #229	; 0xe5
 8013336:	d103      	bne.n	8013340 <create_name+0x384>
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2205      	movs	r2, #5
 801333c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8013340:	69fb      	ldr	r3, [r7, #28]
 8013342:	2b08      	cmp	r3, #8
 8013344:	d104      	bne.n	8013350 <create_name+0x394>
 8013346:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801334a:	009b      	lsls	r3, r3, #2
 801334c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013350:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013354:	f003 030c 	and.w	r3, r3, #12
 8013358:	2b0c      	cmp	r3, #12
 801335a:	d005      	beq.n	8013368 <create_name+0x3ac>
 801335c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013360:	f003 0303 	and.w	r3, r3, #3
 8013364:	2b03      	cmp	r3, #3
 8013366:	d105      	bne.n	8013374 <create_name+0x3b8>
 8013368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801336c:	f043 0302 	orr.w	r3, r3, #2
 8013370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013378:	f003 0302 	and.w	r3, r3, #2
 801337c:	2b00      	cmp	r3, #0
 801337e:	d117      	bne.n	80133b0 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013380:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013384:	f003 0303 	and.w	r3, r3, #3
 8013388:	2b01      	cmp	r3, #1
 801338a:	d105      	bne.n	8013398 <create_name+0x3dc>
 801338c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013390:	f043 0310 	orr.w	r3, r3, #16
 8013394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013398:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801339c:	f003 030c 	and.w	r3, r3, #12
 80133a0:	2b04      	cmp	r3, #4
 80133a2:	d105      	bne.n	80133b0 <create_name+0x3f4>
 80133a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133a8:	f043 0308 	orr.w	r3, r3, #8
 80133ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80133b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80133ba:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3728      	adds	r7, #40	; 0x28
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b086      	sub	sp, #24
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80133d2:	693b      	ldr	r3, [r7, #16]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	2b2f      	cmp	r3, #47	; 0x2f
 80133de:	d00b      	beq.n	80133f8 <follow_path+0x34>
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	2b5c      	cmp	r3, #92	; 0x5c
 80133e6:	d007      	beq.n	80133f8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	699a      	ldr	r2, [r3, #24]
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	609a      	str	r2, [r3, #8]
 80133f0:	e00d      	b.n	801340e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	3301      	adds	r3, #1
 80133f6:	603b      	str	r3, [r7, #0]
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	2b2f      	cmp	r3, #47	; 0x2f
 80133fe:	d0f8      	beq.n	80133f2 <follow_path+0x2e>
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	2b5c      	cmp	r3, #92	; 0x5c
 8013406:	d0f4      	beq.n	80133f2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8013408:	693b      	ldr	r3, [r7, #16]
 801340a:	2200      	movs	r2, #0
 801340c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	781b      	ldrb	r3, [r3, #0]
 8013412:	2b1f      	cmp	r3, #31
 8013414:	d80a      	bhi.n	801342c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2280      	movs	r2, #128	; 0x80
 801341a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801341e:	2100      	movs	r1, #0
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f7ff f8c5 	bl	80125b0 <dir_sdi>
 8013426:	4603      	mov	r3, r0
 8013428:	75fb      	strb	r3, [r7, #23]
 801342a:	e056      	b.n	80134da <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801342c:	463b      	mov	r3, r7
 801342e:	4619      	mov	r1, r3
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7ff fdc3 	bl	8012fbc <create_name>
 8013436:	4603      	mov	r3, r0
 8013438:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801343a:	7dfb      	ldrb	r3, [r7, #23]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d147      	bne.n	80134d0 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f7ff fc03 	bl	8012c4c <dir_find>
 8013446:	4603      	mov	r3, r0
 8013448:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013450:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013452:	7dfb      	ldrb	r3, [r7, #23]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d01b      	beq.n	8013490 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013458:	7dfb      	ldrb	r3, [r7, #23]
 801345a:	2b04      	cmp	r3, #4
 801345c:	d13a      	bne.n	80134d4 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801345e:	7afb      	ldrb	r3, [r7, #11]
 8013460:	f003 0320 	and.w	r3, r3, #32
 8013464:	2b00      	cmp	r3, #0
 8013466:	d00b      	beq.n	8013480 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8013468:	7afb      	ldrb	r3, [r7, #11]
 801346a:	f003 0304 	and.w	r3, r3, #4
 801346e:	2b00      	cmp	r3, #0
 8013470:	d02c      	beq.n	80134cc <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	2280      	movs	r2, #128	; 0x80
 8013476:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801347a:	2300      	movs	r3, #0
 801347c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801347e:	e029      	b.n	80134d4 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013480:	7afb      	ldrb	r3, [r7, #11]
 8013482:	f003 0304 	and.w	r3, r3, #4
 8013486:	2b00      	cmp	r3, #0
 8013488:	d124      	bne.n	80134d4 <follow_path+0x110>
 801348a:	2305      	movs	r3, #5
 801348c:	75fb      	strb	r3, [r7, #23]
				break;
 801348e:	e021      	b.n	80134d4 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013490:	7afb      	ldrb	r3, [r7, #11]
 8013492:	f003 0304 	and.w	r3, r3, #4
 8013496:	2b00      	cmp	r3, #0
 8013498:	d11e      	bne.n	80134d8 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	799b      	ldrb	r3, [r3, #6]
 801349e:	f003 0310 	and.w	r3, r3, #16
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d102      	bne.n	80134ac <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80134a6:	2305      	movs	r3, #5
 80134a8:	75fb      	strb	r3, [r7, #23]
 80134aa:	e016      	b.n	80134da <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	695b      	ldr	r3, [r3, #20]
 80134b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134ba:	4413      	add	r3, r2
 80134bc:	4619      	mov	r1, r3
 80134be:	68f8      	ldr	r0, [r7, #12]
 80134c0:	f7ff f9fd 	bl	80128be <ld_clust>
 80134c4:	4602      	mov	r2, r0
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	609a      	str	r2, [r3, #8]
 80134ca:	e7af      	b.n	801342c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80134cc:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80134ce:	e7ad      	b.n	801342c <follow_path+0x68>
			if (res != FR_OK) break;
 80134d0:	bf00      	nop
 80134d2:	e002      	b.n	80134da <follow_path+0x116>
				break;
 80134d4:	bf00      	nop
 80134d6:	e000      	b.n	80134da <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80134d8:	bf00      	nop
			}
		}
	}

	return res;
 80134da:	7dfb      	ldrb	r3, [r7, #23]
}
 80134dc:	4618      	mov	r0, r3
 80134de:	3718      	adds	r7, #24
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}

080134e4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80134e4:	b480      	push	{r7}
 80134e6:	b087      	sub	sp, #28
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80134ec:	f04f 33ff 	mov.w	r3, #4294967295
 80134f0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d031      	beq.n	801355e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	617b      	str	r3, [r7, #20]
 8013500:	e002      	b.n	8013508 <get_ldnumber+0x24>
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	3301      	adds	r3, #1
 8013506:	617b      	str	r3, [r7, #20]
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	781b      	ldrb	r3, [r3, #0]
 801350c:	2b1f      	cmp	r3, #31
 801350e:	d903      	bls.n	8013518 <get_ldnumber+0x34>
 8013510:	697b      	ldr	r3, [r7, #20]
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	2b3a      	cmp	r3, #58	; 0x3a
 8013516:	d1f4      	bne.n	8013502 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	2b3a      	cmp	r3, #58	; 0x3a
 801351e:	d11c      	bne.n	801355a <get_ldnumber+0x76>
			tp = *path;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	1c5a      	adds	r2, r3, #1
 801352a:	60fa      	str	r2, [r7, #12]
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	3b30      	subs	r3, #48	; 0x30
 8013530:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	2b09      	cmp	r3, #9
 8013536:	d80e      	bhi.n	8013556 <get_ldnumber+0x72>
 8013538:	68fa      	ldr	r2, [r7, #12]
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	429a      	cmp	r2, r3
 801353e:	d10a      	bne.n	8013556 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d107      	bne.n	8013556 <get_ldnumber+0x72>
					vol = (int)i;
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	3301      	adds	r3, #1
 801354e:	617b      	str	r3, [r7, #20]
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	697a      	ldr	r2, [r7, #20]
 8013554:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013556:	693b      	ldr	r3, [r7, #16]
 8013558:	e002      	b.n	8013560 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801355a:	2300      	movs	r3, #0
 801355c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801355e:	693b      	ldr	r3, [r7, #16]
}
 8013560:	4618      	mov	r0, r3
 8013562:	371c      	adds	r7, #28
 8013564:	46bd      	mov	sp, r7
 8013566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356a:	4770      	bx	lr

0801356c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b082      	sub	sp, #8
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2200      	movs	r2, #0
 801357a:	70da      	strb	r2, [r3, #3]
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f04f 32ff 	mov.w	r2, #4294967295
 8013582:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013584:	6839      	ldr	r1, [r7, #0]
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f7fe fc9a 	bl	8011ec0 <move_window>
 801358c:	4603      	mov	r3, r0
 801358e:	2b00      	cmp	r3, #0
 8013590:	d001      	beq.n	8013596 <check_fs+0x2a>
 8013592:	2304      	movs	r3, #4
 8013594:	e038      	b.n	8013608 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	3338      	adds	r3, #56	; 0x38
 801359a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801359e:	4618      	mov	r0, r3
 80135a0:	f7fe f9de 	bl	8011960 <ld_word>
 80135a4:	4603      	mov	r3, r0
 80135a6:	461a      	mov	r2, r3
 80135a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80135ac:	429a      	cmp	r2, r3
 80135ae:	d001      	beq.n	80135b4 <check_fs+0x48>
 80135b0:	2303      	movs	r3, #3
 80135b2:	e029      	b.n	8013608 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80135ba:	2be9      	cmp	r3, #233	; 0xe9
 80135bc:	d009      	beq.n	80135d2 <check_fs+0x66>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80135c4:	2beb      	cmp	r3, #235	; 0xeb
 80135c6:	d11e      	bne.n	8013606 <check_fs+0x9a>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80135ce:	2b90      	cmp	r3, #144	; 0x90
 80135d0:	d119      	bne.n	8013606 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	3338      	adds	r3, #56	; 0x38
 80135d6:	3336      	adds	r3, #54	; 0x36
 80135d8:	4618      	mov	r0, r3
 80135da:	f7fe f9d9 	bl	8011990 <ld_dword>
 80135de:	4603      	mov	r3, r0
 80135e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80135e4:	4a0a      	ldr	r2, [pc, #40]	; (8013610 <check_fs+0xa4>)
 80135e6:	4293      	cmp	r3, r2
 80135e8:	d101      	bne.n	80135ee <check_fs+0x82>
 80135ea:	2300      	movs	r3, #0
 80135ec:	e00c      	b.n	8013608 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	3338      	adds	r3, #56	; 0x38
 80135f2:	3352      	adds	r3, #82	; 0x52
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7fe f9cb 	bl	8011990 <ld_dword>
 80135fa:	4602      	mov	r2, r0
 80135fc:	4b05      	ldr	r3, [pc, #20]	; (8013614 <check_fs+0xa8>)
 80135fe:	429a      	cmp	r2, r3
 8013600:	d101      	bne.n	8013606 <check_fs+0x9a>
 8013602:	2300      	movs	r3, #0
 8013604:	e000      	b.n	8013608 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013606:	2302      	movs	r3, #2
}
 8013608:	4618      	mov	r0, r3
 801360a:	3708      	adds	r7, #8
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}
 8013610:	00544146 	.word	0x00544146
 8013614:	33544146 	.word	0x33544146

08013618 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b096      	sub	sp, #88	; 0x58
 801361c:	af00      	add	r7, sp, #0
 801361e:	60f8      	str	r0, [r7, #12]
 8013620:	60b9      	str	r1, [r7, #8]
 8013622:	4613      	mov	r3, r2
 8013624:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	2200      	movs	r2, #0
 801362a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801362c:	68f8      	ldr	r0, [r7, #12]
 801362e:	f7ff ff59 	bl	80134e4 <get_ldnumber>
 8013632:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013636:	2b00      	cmp	r3, #0
 8013638:	da01      	bge.n	801363e <find_volume+0x26>
 801363a:	230b      	movs	r3, #11
 801363c:	e234      	b.n	8013aa8 <find_volume+0x490>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801363e:	4aa8      	ldr	r2, [pc, #672]	; (80138e0 <find_volume+0x2c8>)
 8013640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013646:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801364a:	2b00      	cmp	r3, #0
 801364c:	d101      	bne.n	8013652 <find_volume+0x3a>
 801364e:	230c      	movs	r3, #12
 8013650:	e22a      	b.n	8013aa8 <find_volume+0x490>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013656:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013658:	79fb      	ldrb	r3, [r7, #7]
 801365a:	f023 0301 	bic.w	r3, r3, #1
 801365e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d01a      	beq.n	801369e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801366a:	785b      	ldrb	r3, [r3, #1]
 801366c:	4618      	mov	r0, r3
 801366e:	f7fe f8d9 	bl	8011824 <disk_status>
 8013672:	4603      	mov	r3, r0
 8013674:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013678:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801367c:	f003 0301 	and.w	r3, r3, #1
 8013680:	2b00      	cmp	r3, #0
 8013682:	d10c      	bne.n	801369e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013684:	79fb      	ldrb	r3, [r7, #7]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d007      	beq.n	801369a <find_volume+0x82>
 801368a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801368e:	f003 0304 	and.w	r3, r3, #4
 8013692:	2b00      	cmp	r3, #0
 8013694:	d001      	beq.n	801369a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013696:	230a      	movs	r3, #10
 8013698:	e206      	b.n	8013aa8 <find_volume+0x490>
			}
			return FR_OK;				/* The file system object is valid */
 801369a:	2300      	movs	r3, #0
 801369c:	e204      	b.n	8013aa8 <find_volume+0x490>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136a0:	2200      	movs	r2, #0
 80136a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80136a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136a6:	b2da      	uxtb	r2, r3
 80136a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80136ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ae:	785b      	ldrb	r3, [r3, #1]
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7fe f8d1 	bl	8011858 <disk_initialize>
 80136b6:	4603      	mov	r3, r0
 80136b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80136bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80136c0:	f003 0301 	and.w	r3, r3, #1
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d001      	beq.n	80136cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80136c8:	2303      	movs	r3, #3
 80136ca:	e1ed      	b.n	8013aa8 <find_volume+0x490>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80136cc:	79fb      	ldrb	r3, [r7, #7]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d007      	beq.n	80136e2 <find_volume+0xca>
 80136d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80136d6:	f003 0304 	and.w	r3, r3, #4
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d001      	beq.n	80136e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80136de:	230a      	movs	r3, #10
 80136e0:	e1e2      	b.n	8013aa8 <find_volume+0x490>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80136e2:	2300      	movs	r3, #0
 80136e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80136e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80136e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80136ea:	f7ff ff3f 	bl	801356c <check_fs>
 80136ee:	4603      	mov	r3, r0
 80136f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80136f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80136f8:	2b02      	cmp	r3, #2
 80136fa:	d14b      	bne.n	8013794 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80136fc:	2300      	movs	r3, #0
 80136fe:	643b      	str	r3, [r7, #64]	; 0x40
 8013700:	e01f      	b.n	8013742 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013704:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801370a:	011b      	lsls	r3, r3, #4
 801370c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013710:	4413      	add	r3, r2
 8013712:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013716:	3304      	adds	r3, #4
 8013718:	781b      	ldrb	r3, [r3, #0]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d006      	beq.n	801372c <find_volume+0x114>
 801371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013720:	3308      	adds	r3, #8
 8013722:	4618      	mov	r0, r3
 8013724:	f7fe f934 	bl	8011990 <ld_dword>
 8013728:	4602      	mov	r2, r0
 801372a:	e000      	b.n	801372e <find_volume+0x116>
 801372c:	2200      	movs	r2, #0
 801372e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013736:	440b      	add	r3, r1
 8013738:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801373c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801373e:	3301      	adds	r3, #1
 8013740:	643b      	str	r3, [r7, #64]	; 0x40
 8013742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013744:	2b03      	cmp	r3, #3
 8013746:	d9dc      	bls.n	8013702 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013748:	2300      	movs	r3, #0
 801374a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801374c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801374e:	2b00      	cmp	r3, #0
 8013750:	d002      	beq.n	8013758 <find_volume+0x140>
 8013752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013754:	3b01      	subs	r3, #1
 8013756:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801375a:	009b      	lsls	r3, r3, #2
 801375c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013760:	4413      	add	r3, r2
 8013762:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013766:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801376a:	2b00      	cmp	r3, #0
 801376c:	d005      	beq.n	801377a <find_volume+0x162>
 801376e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013770:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013772:	f7ff fefb 	bl	801356c <check_fs>
 8013776:	4603      	mov	r3, r0
 8013778:	e000      	b.n	801377c <find_volume+0x164>
 801377a:	2303      	movs	r3, #3
 801377c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013784:	2b01      	cmp	r3, #1
 8013786:	d905      	bls.n	8013794 <find_volume+0x17c>
 8013788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801378a:	3301      	adds	r3, #1
 801378c:	643b      	str	r3, [r7, #64]	; 0x40
 801378e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013790:	2b03      	cmp	r3, #3
 8013792:	d9e1      	bls.n	8013758 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013794:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013798:	2b04      	cmp	r3, #4
 801379a:	d101      	bne.n	80137a0 <find_volume+0x188>
 801379c:	2301      	movs	r3, #1
 801379e:	e183      	b.n	8013aa8 <find_volume+0x490>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80137a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80137a4:	2b01      	cmp	r3, #1
 80137a6:	d901      	bls.n	80137ac <find_volume+0x194>
 80137a8:	230d      	movs	r3, #13
 80137aa:	e17d      	b.n	8013aa8 <find_volume+0x490>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80137ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ae:	3338      	adds	r3, #56	; 0x38
 80137b0:	330b      	adds	r3, #11
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7fe f8d4 	bl	8011960 <ld_word>
 80137b8:	4603      	mov	r3, r0
 80137ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80137be:	d001      	beq.n	80137c4 <find_volume+0x1ac>
 80137c0:	230d      	movs	r3, #13
 80137c2:	e171      	b.n	8013aa8 <find_volume+0x490>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80137c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c6:	3338      	adds	r3, #56	; 0x38
 80137c8:	3316      	adds	r3, #22
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7fe f8c8 	bl	8011960 <ld_word>
 80137d0:	4603      	mov	r3, r0
 80137d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80137d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d106      	bne.n	80137e8 <find_volume+0x1d0>
 80137da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137dc:	3338      	adds	r3, #56	; 0x38
 80137de:	3324      	adds	r3, #36	; 0x24
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7fe f8d5 	bl	8011990 <ld_dword>
 80137e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80137e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80137ec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80137ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80137f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80137f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fa:	789b      	ldrb	r3, [r3, #2]
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	d005      	beq.n	801380c <find_volume+0x1f4>
 8013800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013802:	789b      	ldrb	r3, [r3, #2]
 8013804:	2b02      	cmp	r3, #2
 8013806:	d001      	beq.n	801380c <find_volume+0x1f4>
 8013808:	230d      	movs	r3, #13
 801380a:	e14d      	b.n	8013aa8 <find_volume+0x490>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801380e:	789b      	ldrb	r3, [r3, #2]
 8013810:	461a      	mov	r2, r3
 8013812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013814:	fb02 f303 	mul.w	r3, r2, r3
 8013818:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801381c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013820:	b29a      	uxth	r2, r3
 8013822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013824:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013828:	895b      	ldrh	r3, [r3, #10]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d008      	beq.n	8013840 <find_volume+0x228>
 801382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013830:	895b      	ldrh	r3, [r3, #10]
 8013832:	461a      	mov	r2, r3
 8013834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013836:	895b      	ldrh	r3, [r3, #10]
 8013838:	3b01      	subs	r3, #1
 801383a:	4013      	ands	r3, r2
 801383c:	2b00      	cmp	r3, #0
 801383e:	d001      	beq.n	8013844 <find_volume+0x22c>
 8013840:	230d      	movs	r3, #13
 8013842:	e131      	b.n	8013aa8 <find_volume+0x490>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013846:	3338      	adds	r3, #56	; 0x38
 8013848:	3311      	adds	r3, #17
 801384a:	4618      	mov	r0, r3
 801384c:	f7fe f888 	bl	8011960 <ld_word>
 8013850:	4603      	mov	r3, r0
 8013852:	461a      	mov	r2, r3
 8013854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013856:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801385a:	891b      	ldrh	r3, [r3, #8]
 801385c:	f003 030f 	and.w	r3, r3, #15
 8013860:	b29b      	uxth	r3, r3
 8013862:	2b00      	cmp	r3, #0
 8013864:	d001      	beq.n	801386a <find_volume+0x252>
 8013866:	230d      	movs	r3, #13
 8013868:	e11e      	b.n	8013aa8 <find_volume+0x490>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801386c:	3338      	adds	r3, #56	; 0x38
 801386e:	3313      	adds	r3, #19
 8013870:	4618      	mov	r0, r3
 8013872:	f7fe f875 	bl	8011960 <ld_word>
 8013876:	4603      	mov	r3, r0
 8013878:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801387a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801387c:	2b00      	cmp	r3, #0
 801387e:	d106      	bne.n	801388e <find_volume+0x276>
 8013880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013882:	3338      	adds	r3, #56	; 0x38
 8013884:	3320      	adds	r3, #32
 8013886:	4618      	mov	r0, r3
 8013888:	f7fe f882 	bl	8011990 <ld_dword>
 801388c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013890:	3338      	adds	r3, #56	; 0x38
 8013892:	330e      	adds	r3, #14
 8013894:	4618      	mov	r0, r3
 8013896:	f7fe f863 	bl	8011960 <ld_word>
 801389a:	4603      	mov	r3, r0
 801389c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801389e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d101      	bne.n	80138a8 <find_volume+0x290>
 80138a4:	230d      	movs	r3, #13
 80138a6:	e0ff      	b.n	8013aa8 <find_volume+0x490>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80138a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80138aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138ac:	4413      	add	r3, r2
 80138ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138b0:	8912      	ldrh	r2, [r2, #8]
 80138b2:	0912      	lsrs	r2, r2, #4
 80138b4:	b292      	uxth	r2, r2
 80138b6:	4413      	add	r3, r2
 80138b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80138ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80138bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138be:	429a      	cmp	r2, r3
 80138c0:	d201      	bcs.n	80138c6 <find_volume+0x2ae>
 80138c2:	230d      	movs	r3, #13
 80138c4:	e0f0      	b.n	8013aa8 <find_volume+0x490>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80138c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80138c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ca:	1ad3      	subs	r3, r2, r3
 80138cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138ce:	8952      	ldrh	r2, [r2, #10]
 80138d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80138d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80138d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d103      	bne.n	80138e4 <find_volume+0x2cc>
 80138dc:	230d      	movs	r3, #13
 80138de:	e0e3      	b.n	8013aa8 <find_volume+0x490>
 80138e0:	20000bec 	.word	0x20000bec
		fmt = FS_FAT32;
 80138e4:	2303      	movs	r3, #3
 80138e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80138ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80138f0:	4293      	cmp	r3, r2
 80138f2:	d802      	bhi.n	80138fa <find_volume+0x2e2>
 80138f4:	2302      	movs	r3, #2
 80138f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80138fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013900:	4293      	cmp	r3, r2
 8013902:	d802      	bhi.n	801390a <find_volume+0x2f2>
 8013904:	2301      	movs	r3, #1
 8013906:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801390c:	1c9a      	adds	r2, r3, #2
 801390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013910:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013914:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013916:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013918:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801391c:	441a      	add	r2, r3
 801391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013920:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013922:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013926:	441a      	add	r2, r3
 8013928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801392a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801392c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013930:	2b03      	cmp	r3, #3
 8013932:	d11e      	bne.n	8013972 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013936:	3338      	adds	r3, #56	; 0x38
 8013938:	332a      	adds	r3, #42	; 0x2a
 801393a:	4618      	mov	r0, r3
 801393c:	f7fe f810 	bl	8011960 <ld_word>
 8013940:	4603      	mov	r3, r0
 8013942:	2b00      	cmp	r3, #0
 8013944:	d001      	beq.n	801394a <find_volume+0x332>
 8013946:	230d      	movs	r3, #13
 8013948:	e0ae      	b.n	8013aa8 <find_volume+0x490>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801394c:	891b      	ldrh	r3, [r3, #8]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d001      	beq.n	8013956 <find_volume+0x33e>
 8013952:	230d      	movs	r3, #13
 8013954:	e0a8      	b.n	8013aa8 <find_volume+0x490>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013958:	3338      	adds	r3, #56	; 0x38
 801395a:	332c      	adds	r3, #44	; 0x2c
 801395c:	4618      	mov	r0, r3
 801395e:	f7fe f817 	bl	8011990 <ld_dword>
 8013962:	4602      	mov	r2, r0
 8013964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013966:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801396a:	69db      	ldr	r3, [r3, #28]
 801396c:	009b      	lsls	r3, r3, #2
 801396e:	647b      	str	r3, [r7, #68]	; 0x44
 8013970:	e01f      	b.n	80139b2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013974:	891b      	ldrh	r3, [r3, #8]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d101      	bne.n	801397e <find_volume+0x366>
 801397a:	230d      	movs	r3, #13
 801397c:	e094      	b.n	8013aa8 <find_volume+0x490>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013984:	441a      	add	r2, r3
 8013986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013988:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801398a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801398e:	2b02      	cmp	r3, #2
 8013990:	d103      	bne.n	801399a <find_volume+0x382>
 8013992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013994:	69db      	ldr	r3, [r3, #28]
 8013996:	005b      	lsls	r3, r3, #1
 8013998:	e00a      	b.n	80139b0 <find_volume+0x398>
 801399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801399c:	69da      	ldr	r2, [r3, #28]
 801399e:	4613      	mov	r3, r2
 80139a0:	005b      	lsls	r3, r3, #1
 80139a2:	4413      	add	r3, r2
 80139a4:	085a      	lsrs	r2, r3, #1
 80139a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a8:	69db      	ldr	r3, [r3, #28]
 80139aa:	f003 0301 	and.w	r3, r3, #1
 80139ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80139b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80139b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b4:	6a1a      	ldr	r2, [r3, #32]
 80139b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80139bc:	0a5b      	lsrs	r3, r3, #9
 80139be:	429a      	cmp	r2, r3
 80139c0:	d201      	bcs.n	80139c6 <find_volume+0x3ae>
 80139c2:	230d      	movs	r3, #13
 80139c4:	e070      	b.n	8013aa8 <find_volume+0x490>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80139c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c8:	f04f 32ff 	mov.w	r2, #4294967295
 80139cc:	615a      	str	r2, [r3, #20]
 80139ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d0:	695a      	ldr	r2, [r3, #20]
 80139d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80139d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d8:	2280      	movs	r2, #128	; 0x80
 80139da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80139dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139e0:	2b03      	cmp	r3, #3
 80139e2:	d149      	bne.n	8013a78 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80139e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139e6:	3338      	adds	r3, #56	; 0x38
 80139e8:	3330      	adds	r3, #48	; 0x30
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7fd ffb8 	bl	8011960 <ld_word>
 80139f0:	4603      	mov	r3, r0
 80139f2:	2b01      	cmp	r3, #1
 80139f4:	d140      	bne.n	8013a78 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80139f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139f8:	3301      	adds	r3, #1
 80139fa:	4619      	mov	r1, r3
 80139fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80139fe:	f7fe fa5f 	bl	8011ec0 <move_window>
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d137      	bne.n	8013a78 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8013a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a10:	3338      	adds	r3, #56	; 0x38
 8013a12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7fd ffa2 	bl	8011960 <ld_word>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	461a      	mov	r2, r3
 8013a20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d127      	bne.n	8013a78 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a2a:	3338      	adds	r3, #56	; 0x38
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7fd ffaf 	bl	8011990 <ld_dword>
 8013a32:	4602      	mov	r2, r0
 8013a34:	4b1e      	ldr	r3, [pc, #120]	; (8013ab0 <find_volume+0x498>)
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d11e      	bne.n	8013a78 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a3c:	3338      	adds	r3, #56	; 0x38
 8013a3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7fd ffa4 	bl	8011990 <ld_dword>
 8013a48:	4602      	mov	r2, r0
 8013a4a:	4b1a      	ldr	r3, [pc, #104]	; (8013ab4 <find_volume+0x49c>)
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d113      	bne.n	8013a78 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a52:	3338      	adds	r3, #56	; 0x38
 8013a54:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7fd ff99 	bl	8011990 <ld_dword>
 8013a5e:	4602      	mov	r2, r0
 8013a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a62:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a66:	3338      	adds	r3, #56	; 0x38
 8013a68:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7fd ff8f 	bl	8011990 <ld_dword>
 8013a72:	4602      	mov	r2, r0
 8013a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a76:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a7a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013a7e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013a80:	4b0d      	ldr	r3, [pc, #52]	; (8013ab8 <find_volume+0x4a0>)
 8013a82:	881b      	ldrh	r3, [r3, #0]
 8013a84:	3301      	adds	r3, #1
 8013a86:	b29a      	uxth	r2, r3
 8013a88:	4b0b      	ldr	r3, [pc, #44]	; (8013ab8 <find_volume+0x4a0>)
 8013a8a:	801a      	strh	r2, [r3, #0]
 8013a8c:	4b0a      	ldr	r3, [pc, #40]	; (8013ab8 <find_volume+0x4a0>)
 8013a8e:	881a      	ldrh	r2, [r3, #0]
 8013a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a92:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8013a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a96:	4a09      	ldr	r2, [pc, #36]	; (8013abc <find_volume+0x4a4>)
 8013a98:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013aa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013aa2:	f7fe f9a5 	bl	8011df0 <clear_lock>
#endif
	return FR_OK;
 8013aa6:	2300      	movs	r3, #0
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	3758      	adds	r7, #88	; 0x58
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd80      	pop	{r7, pc}
 8013ab0:	41615252 	.word	0x41615252
 8013ab4:	61417272 	.word	0x61417272
 8013ab8:	20000bf0 	.word	0x20000bf0
 8013abc:	20000c14 	.word	0x20000c14

08013ac0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b084      	sub	sp, #16
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
 8013ac8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013aca:	2309      	movs	r3, #9
 8013acc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d01c      	beq.n	8013b0e <validate+0x4e>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d018      	beq.n	8013b0e <validate+0x4e>
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	781b      	ldrb	r3, [r3, #0]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d013      	beq.n	8013b0e <validate+0x4e>
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	889a      	ldrh	r2, [r3, #4]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	88db      	ldrh	r3, [r3, #6]
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d10c      	bne.n	8013b0e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	785b      	ldrb	r3, [r3, #1]
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7fd fe92 	bl	8011824 <disk_status>
 8013b00:	4603      	mov	r3, r0
 8013b02:	f003 0301 	and.w	r3, r3, #1
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d101      	bne.n	8013b0e <validate+0x4e>
			res = FR_OK;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013b0e:	7bfb      	ldrb	r3, [r7, #15]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d102      	bne.n	8013b1a <validate+0x5a>
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	e000      	b.n	8013b1c <validate+0x5c>
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	683a      	ldr	r2, [r7, #0]
 8013b1e:	6013      	str	r3, [r2, #0]
	return res;
 8013b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3710      	adds	r7, #16
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
	...

08013b2c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b088      	sub	sp, #32
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	60f8      	str	r0, [r7, #12]
 8013b34:	60b9      	str	r1, [r7, #8]
 8013b36:	4613      	mov	r3, r2
 8013b38:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013b3e:	f107 0310 	add.w	r3, r7, #16
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7ff fcce 	bl	80134e4 <get_ldnumber>
 8013b48:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	da01      	bge.n	8013b54 <f_mount+0x28>
 8013b50:	230b      	movs	r3, #11
 8013b52:	e02b      	b.n	8013bac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013b54:	4a17      	ldr	r2, [pc, #92]	; (8013bb4 <f_mount+0x88>)
 8013b56:	69fb      	ldr	r3, [r7, #28]
 8013b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b5c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013b5e:	69bb      	ldr	r3, [r7, #24]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d005      	beq.n	8013b70 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013b64:	69b8      	ldr	r0, [r7, #24]
 8013b66:	f7fe f943 	bl	8011df0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013b6a:	69bb      	ldr	r3, [r7, #24]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d002      	beq.n	8013b7c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	2200      	movs	r2, #0
 8013b7a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013b7c:	68fa      	ldr	r2, [r7, #12]
 8013b7e:	490d      	ldr	r1, [pc, #52]	; (8013bb4 <f_mount+0x88>)
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d002      	beq.n	8013b92 <f_mount+0x66>
 8013b8c:	79fb      	ldrb	r3, [r7, #7]
 8013b8e:	2b01      	cmp	r3, #1
 8013b90:	d001      	beq.n	8013b96 <f_mount+0x6a>
 8013b92:	2300      	movs	r3, #0
 8013b94:	e00a      	b.n	8013bac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013b96:	f107 010c 	add.w	r1, r7, #12
 8013b9a:	f107 0308 	add.w	r3, r7, #8
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7ff fd39 	bl	8013618 <find_volume>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3720      	adds	r7, #32
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	20000bec 	.word	0x20000bec

08013bb8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b09a      	sub	sp, #104	; 0x68
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	60f8      	str	r0, [r7, #12]
 8013bc0:	60b9      	str	r1, [r7, #8]
 8013bc2:	4613      	mov	r3, r2
 8013bc4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d101      	bne.n	8013bd0 <f_open+0x18>
 8013bcc:	2309      	movs	r3, #9
 8013bce:	e1ad      	b.n	8013f2c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013bd0:	79fb      	ldrb	r3, [r7, #7]
 8013bd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013bd6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013bd8:	79fa      	ldrb	r2, [r7, #7]
 8013bda:	f107 0114 	add.w	r1, r7, #20
 8013bde:	f107 0308 	add.w	r3, r7, #8
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7ff fd18 	bl	8013618 <find_volume>
 8013be8:	4603      	mov	r3, r0
 8013bea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8013bee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	f040 8191 	bne.w	8013f1a <f_open+0x362>
		dj.obj.fs = fs;
 8013bf8:	697b      	ldr	r3, [r7, #20]
 8013bfa:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013bfc:	68ba      	ldr	r2, [r7, #8]
 8013bfe:	f107 0318 	add.w	r3, r7, #24
 8013c02:	4611      	mov	r1, r2
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7ff fbdd 	bl	80133c4 <follow_path>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013c10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d11a      	bne.n	8013c4e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013c18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013c1c:	b25b      	sxtb	r3, r3
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	da03      	bge.n	8013c2a <f_open+0x72>
				res = FR_INVALID_NAME;
 8013c22:	2306      	movs	r3, #6
 8013c24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013c28:	e011      	b.n	8013c4e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013c2a:	79fb      	ldrb	r3, [r7, #7]
 8013c2c:	f023 0301 	bic.w	r3, r3, #1
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	bf14      	ite	ne
 8013c34:	2301      	movne	r3, #1
 8013c36:	2300      	moveq	r3, #0
 8013c38:	b2db      	uxtb	r3, r3
 8013c3a:	461a      	mov	r2, r3
 8013c3c:	f107 0318 	add.w	r3, r7, #24
 8013c40:	4611      	mov	r1, r2
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7fd ff8c 	bl	8011b60 <chk_lock>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013c4e:	79fb      	ldrb	r3, [r7, #7]
 8013c50:	f003 031c 	and.w	r3, r3, #28
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d07f      	beq.n	8013d58 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013c58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d017      	beq.n	8013c90 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013c60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013c64:	2b04      	cmp	r3, #4
 8013c66:	d10e      	bne.n	8013c86 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013c68:	f7fd ffd6 	bl	8011c18 <enq_lock>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d006      	beq.n	8013c80 <f_open+0xc8>
 8013c72:	f107 0318 	add.w	r3, r7, #24
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7ff f8a8 	bl	8012dcc <dir_register>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	e000      	b.n	8013c82 <f_open+0xca>
 8013c80:	2312      	movs	r3, #18
 8013c82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013c86:	79fb      	ldrb	r3, [r7, #7]
 8013c88:	f043 0308 	orr.w	r3, r3, #8
 8013c8c:	71fb      	strb	r3, [r7, #7]
 8013c8e:	e010      	b.n	8013cb2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013c90:	7fbb      	ldrb	r3, [r7, #30]
 8013c92:	f003 0311 	and.w	r3, r3, #17
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d003      	beq.n	8013ca2 <f_open+0xea>
					res = FR_DENIED;
 8013c9a:	2307      	movs	r3, #7
 8013c9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013ca0:	e007      	b.n	8013cb2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013ca2:	79fb      	ldrb	r3, [r7, #7]
 8013ca4:	f003 0304 	and.w	r3, r3, #4
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d002      	beq.n	8013cb2 <f_open+0xfa>
 8013cac:	2308      	movs	r3, #8
 8013cae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013cb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d168      	bne.n	8013d8c <f_open+0x1d4>
 8013cba:	79fb      	ldrb	r3, [r7, #7]
 8013cbc:	f003 0308 	and.w	r3, r3, #8
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d063      	beq.n	8013d8c <f_open+0x1d4>
				dw = GET_FATTIME();
 8013cc4:	f7f8 fb2a 	bl	800c31c <get_fattime>
 8013cc8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ccc:	330e      	adds	r3, #14
 8013cce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7fd fe9b 	bl	8011a0c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cd8:	3316      	adds	r3, #22
 8013cda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7fd fe95 	bl	8011a0c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ce4:	330b      	adds	r3, #11
 8013ce6:	2220      	movs	r2, #32
 8013ce8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cee:	4611      	mov	r1, r2
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7fe fde4 	bl	80128be <ld_clust>
 8013cf6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7fe fdfc 	bl	80128fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d06:	331c      	adds	r3, #28
 8013d08:	2100      	movs	r1, #0
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7fd fe7e 	bl	8011a0c <st_dword>
					fs->wflag = 1;
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	2201      	movs	r2, #1
 8013d14:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d037      	beq.n	8013d8c <f_open+0x1d4>
						dw = fs->winsect;
 8013d1c:	697b      	ldr	r3, [r7, #20]
 8013d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d20:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8013d22:	f107 0318 	add.w	r3, r7, #24
 8013d26:	2200      	movs	r2, #0
 8013d28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7fe fb0f 	bl	801234e <remove_chain>
 8013d30:	4603      	mov	r3, r0
 8013d32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8013d36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d126      	bne.n	8013d8c <f_open+0x1d4>
							res = move_window(fs, dw);
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7fe f8bc 	bl	8011ec0 <move_window>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013d52:	3a01      	subs	r2, #1
 8013d54:	611a      	str	r2, [r3, #16]
 8013d56:	e019      	b.n	8013d8c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013d58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d115      	bne.n	8013d8c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013d60:	7fbb      	ldrb	r3, [r7, #30]
 8013d62:	f003 0310 	and.w	r3, r3, #16
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d003      	beq.n	8013d72 <f_open+0x1ba>
					res = FR_NO_FILE;
 8013d6a:	2304      	movs	r3, #4
 8013d6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013d70:	e00c      	b.n	8013d8c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013d72:	79fb      	ldrb	r3, [r7, #7]
 8013d74:	f003 0302 	and.w	r3, r3, #2
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d007      	beq.n	8013d8c <f_open+0x1d4>
 8013d7c:	7fbb      	ldrb	r3, [r7, #30]
 8013d7e:	f003 0301 	and.w	r3, r3, #1
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d002      	beq.n	8013d8c <f_open+0x1d4>
						res = FR_DENIED;
 8013d86:	2307      	movs	r3, #7
 8013d88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8013d8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d128      	bne.n	8013de6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013d94:	79fb      	ldrb	r3, [r7, #7]
 8013d96:	f003 0308 	and.w	r3, r3, #8
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d003      	beq.n	8013da6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013d9e:	79fb      	ldrb	r3, [r7, #7]
 8013da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013da4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013da6:	697b      	ldr	r3, [r7, #20]
 8013da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013db4:	79fb      	ldrb	r3, [r7, #7]
 8013db6:	f023 0301 	bic.w	r3, r3, #1
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	bf14      	ite	ne
 8013dbe:	2301      	movne	r3, #1
 8013dc0:	2300      	moveq	r3, #0
 8013dc2:	b2db      	uxtb	r3, r3
 8013dc4:	461a      	mov	r2, r3
 8013dc6:	f107 0318 	add.w	r3, r7, #24
 8013dca:	4611      	mov	r1, r2
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7fd ff45 	bl	8011c5c <inc_lock>
 8013dd2:	4602      	mov	r2, r0
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	691b      	ldr	r3, [r3, #16]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d102      	bne.n	8013de6 <f_open+0x22e>
 8013de0:	2302      	movs	r3, #2
 8013de2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013de6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	f040 8095 	bne.w	8013f1a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013df4:	4611      	mov	r1, r2
 8013df6:	4618      	mov	r0, r3
 8013df8:	f7fe fd61 	bl	80128be <ld_clust>
 8013dfc:	4602      	mov	r2, r0
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e04:	331c      	adds	r3, #28
 8013e06:	4618      	mov	r0, r3
 8013e08:	f7fd fdc2 	bl	8011990 <ld_dword>
 8013e0c:	4602      	mov	r2, r0
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	2200      	movs	r2, #0
 8013e16:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013e18:	697a      	ldr	r2, [r7, #20]
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	88da      	ldrh	r2, [r3, #6]
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	79fa      	ldrb	r2, [r7, #7]
 8013e2a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	2200      	movs	r2, #0
 8013e30:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	2200      	movs	r2, #0
 8013e36:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	3330      	adds	r3, #48	; 0x30
 8013e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e46:	2100      	movs	r1, #0
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f7fd fe2c 	bl	8011aa6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013e4e:	79fb      	ldrb	r3, [r7, #7]
 8013e50:	f003 0320 	and.w	r3, r3, #32
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d060      	beq.n	8013f1a <f_open+0x362>
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	68db      	ldr	r3, [r3, #12]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d05c      	beq.n	8013f1a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	68da      	ldr	r2, [r3, #12]
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013e68:	697b      	ldr	r3, [r7, #20]
 8013e6a:	895b      	ldrh	r3, [r3, #10]
 8013e6c:	025b      	lsls	r3, r3, #9
 8013e6e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	689b      	ldr	r3, [r3, #8]
 8013e74:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	68db      	ldr	r3, [r3, #12]
 8013e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013e7c:	e016      	b.n	8013eac <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013e82:	4618      	mov	r0, r3
 8013e84:	f7fe f8d7 	bl	8012036 <get_fat>
 8013e88:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8013e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d802      	bhi.n	8013e96 <f_open+0x2de>
 8013e90:	2302      	movs	r3, #2
 8013e92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e9c:	d102      	bne.n	8013ea4 <f_open+0x2ec>
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013ea4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ea8:	1ad3      	subs	r3, r2, r3
 8013eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013eac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d103      	bne.n	8013ebc <f_open+0x304>
 8013eb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013eb8:	429a      	cmp	r2, r3
 8013eba:	d8e0      	bhi.n	8013e7e <f_open+0x2c6>
				}
				fp->clust = clst;
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013ec0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013ec2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d127      	bne.n	8013f1a <f_open+0x362>
 8013eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d022      	beq.n	8013f1a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7fe f88d 	bl	8011ff8 <clust2sect>
 8013ede:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d103      	bne.n	8013eee <f_open+0x336>
						res = FR_INT_ERR;
 8013ee6:	2302      	movs	r3, #2
 8013ee8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013eec:	e015      	b.n	8013f1a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ef0:	0a5a      	lsrs	r2, r3, #9
 8013ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ef4:	441a      	add	r2, r3
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013efa:	697b      	ldr	r3, [r7, #20]
 8013efc:	7858      	ldrb	r0, [r3, #1]
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	6a1a      	ldr	r2, [r3, #32]
 8013f08:	2301      	movs	r3, #1
 8013f0a:	f7fd fccb 	bl	80118a4 <disk_read>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d002      	beq.n	8013f1a <f_open+0x362>
 8013f14:	2301      	movs	r3, #1
 8013f16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013f1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d002      	beq.n	8013f28 <f_open+0x370>
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	2200      	movs	r2, #0
 8013f26:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013f28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3768      	adds	r7, #104	; 0x68
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}

08013f34 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b08c      	sub	sp, #48	; 0x30
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	607a      	str	r2, [r7, #4]
 8013f40:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	2200      	movs	r2, #0
 8013f4a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	f107 0210 	add.w	r2, r7, #16
 8013f52:	4611      	mov	r1, r2
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7ff fdb3 	bl	8013ac0 <validate>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013f60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d107      	bne.n	8013f78 <f_write+0x44>
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	7d5b      	ldrb	r3, [r3, #21]
 8013f6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013f70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d002      	beq.n	8013f7e <f_write+0x4a>
 8013f78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f7c:	e14b      	b.n	8014216 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	7d1b      	ldrb	r3, [r3, #20]
 8013f82:	f003 0302 	and.w	r3, r3, #2
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d101      	bne.n	8013f8e <f_write+0x5a>
 8013f8a:	2307      	movs	r3, #7
 8013f8c:	e143      	b.n	8014216 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	699a      	ldr	r2, [r3, #24]
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	441a      	add	r2, r3
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	699b      	ldr	r3, [r3, #24]
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	f080 812d 	bcs.w	80141fa <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	699b      	ldr	r3, [r3, #24]
 8013fa4:	43db      	mvns	r3, r3
 8013fa6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013fa8:	e127      	b.n	80141fa <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	699b      	ldr	r3, [r3, #24]
 8013fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	f040 80e3 	bne.w	801417e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	699b      	ldr	r3, [r3, #24]
 8013fbc:	0a5b      	lsrs	r3, r3, #9
 8013fbe:	693a      	ldr	r2, [r7, #16]
 8013fc0:	8952      	ldrh	r2, [r2, #10]
 8013fc2:	3a01      	subs	r2, #1
 8013fc4:	4013      	ands	r3, r2
 8013fc6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013fc8:	69bb      	ldr	r3, [r7, #24]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d143      	bne.n	8014056 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	699b      	ldr	r3, [r3, #24]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d10c      	bne.n	8013ff0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	689b      	ldr	r3, [r3, #8]
 8013fda:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d11a      	bne.n	8014018 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	2100      	movs	r1, #0
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7fe fa16 	bl	8012418 <create_chain>
 8013fec:	62b8      	str	r0, [r7, #40]	; 0x28
 8013fee:	e013      	b.n	8014018 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d007      	beq.n	8014008 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	699b      	ldr	r3, [r3, #24]
 8013ffc:	4619      	mov	r1, r3
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f7fe faa2 	bl	8012548 <clmt_clust>
 8014004:	62b8      	str	r0, [r7, #40]	; 0x28
 8014006:	e007      	b.n	8014018 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	69db      	ldr	r3, [r3, #28]
 801400e:	4619      	mov	r1, r3
 8014010:	4610      	mov	r0, r2
 8014012:	f7fe fa01 	bl	8012418 <create_chain>
 8014016:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801401a:	2b00      	cmp	r3, #0
 801401c:	f000 80f2 	beq.w	8014204 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014022:	2b01      	cmp	r3, #1
 8014024:	d104      	bne.n	8014030 <f_write+0xfc>
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	2202      	movs	r2, #2
 801402a:	755a      	strb	r2, [r3, #21]
 801402c:	2302      	movs	r3, #2
 801402e:	e0f2      	b.n	8014216 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014036:	d104      	bne.n	8014042 <f_write+0x10e>
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	2201      	movs	r2, #1
 801403c:	755a      	strb	r2, [r3, #21]
 801403e:	2301      	movs	r3, #1
 8014040:	e0e9      	b.n	8014216 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014046:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	689b      	ldr	r3, [r3, #8]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d102      	bne.n	8014056 <f_write+0x122>
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014054:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	7d1b      	ldrb	r3, [r3, #20]
 801405a:	b25b      	sxtb	r3, r3
 801405c:	2b00      	cmp	r3, #0
 801405e:	da18      	bge.n	8014092 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	7858      	ldrb	r0, [r3, #1]
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	6a1a      	ldr	r2, [r3, #32]
 801406e:	2301      	movs	r3, #1
 8014070:	f7fd fc38 	bl	80118e4 <disk_write>
 8014074:	4603      	mov	r3, r0
 8014076:	2b00      	cmp	r3, #0
 8014078:	d004      	beq.n	8014084 <f_write+0x150>
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	2201      	movs	r2, #1
 801407e:	755a      	strb	r2, [r3, #21]
 8014080:	2301      	movs	r3, #1
 8014082:	e0c8      	b.n	8014216 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	7d1b      	ldrb	r3, [r3, #20]
 8014088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801408c:	b2da      	uxtb	r2, r3
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014092:	693a      	ldr	r2, [r7, #16]
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	69db      	ldr	r3, [r3, #28]
 8014098:	4619      	mov	r1, r3
 801409a:	4610      	mov	r0, r2
 801409c:	f7fd ffac 	bl	8011ff8 <clust2sect>
 80140a0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d104      	bne.n	80140b2 <f_write+0x17e>
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	2202      	movs	r2, #2
 80140ac:	755a      	strb	r2, [r3, #21]
 80140ae:	2302      	movs	r3, #2
 80140b0:	e0b1      	b.n	8014216 <f_write+0x2e2>
			sect += csect;
 80140b2:	697a      	ldr	r2, [r7, #20]
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	4413      	add	r3, r2
 80140b8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	0a5b      	lsrs	r3, r3, #9
 80140be:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80140c0:	6a3b      	ldr	r3, [r7, #32]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d03c      	beq.n	8014140 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80140c6:	69ba      	ldr	r2, [r7, #24]
 80140c8:	6a3b      	ldr	r3, [r7, #32]
 80140ca:	4413      	add	r3, r2
 80140cc:	693a      	ldr	r2, [r7, #16]
 80140ce:	8952      	ldrh	r2, [r2, #10]
 80140d0:	4293      	cmp	r3, r2
 80140d2:	d905      	bls.n	80140e0 <f_write+0x1ac>
					cc = fs->csize - csect;
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	895b      	ldrh	r3, [r3, #10]
 80140d8:	461a      	mov	r2, r3
 80140da:	69bb      	ldr	r3, [r7, #24]
 80140dc:	1ad3      	subs	r3, r2, r3
 80140de:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80140e0:	693b      	ldr	r3, [r7, #16]
 80140e2:	7858      	ldrb	r0, [r3, #1]
 80140e4:	6a3b      	ldr	r3, [r7, #32]
 80140e6:	697a      	ldr	r2, [r7, #20]
 80140e8:	69f9      	ldr	r1, [r7, #28]
 80140ea:	f7fd fbfb 	bl	80118e4 <disk_write>
 80140ee:	4603      	mov	r3, r0
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d004      	beq.n	80140fe <f_write+0x1ca>
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	2201      	movs	r2, #1
 80140f8:	755a      	strb	r2, [r3, #21]
 80140fa:	2301      	movs	r3, #1
 80140fc:	e08b      	b.n	8014216 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	6a1a      	ldr	r2, [r3, #32]
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	1ad3      	subs	r3, r2, r3
 8014106:	6a3a      	ldr	r2, [r7, #32]
 8014108:	429a      	cmp	r2, r3
 801410a:	d915      	bls.n	8014138 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	6a1a      	ldr	r2, [r3, #32]
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	1ad3      	subs	r3, r2, r3
 801411a:	025b      	lsls	r3, r3, #9
 801411c:	69fa      	ldr	r2, [r7, #28]
 801411e:	4413      	add	r3, r2
 8014120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014124:	4619      	mov	r1, r3
 8014126:	f7fd fc9d 	bl	8011a64 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	7d1b      	ldrb	r3, [r3, #20]
 801412e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014132:	b2da      	uxtb	r2, r3
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014138:	6a3b      	ldr	r3, [r7, #32]
 801413a:	025b      	lsls	r3, r3, #9
 801413c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801413e:	e03f      	b.n	80141c0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	6a1b      	ldr	r3, [r3, #32]
 8014144:	697a      	ldr	r2, [r7, #20]
 8014146:	429a      	cmp	r2, r3
 8014148:	d016      	beq.n	8014178 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	699a      	ldr	r2, [r3, #24]
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014152:	429a      	cmp	r2, r3
 8014154:	d210      	bcs.n	8014178 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	7858      	ldrb	r0, [r3, #1]
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014160:	2301      	movs	r3, #1
 8014162:	697a      	ldr	r2, [r7, #20]
 8014164:	f7fd fb9e 	bl	80118a4 <disk_read>
 8014168:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801416a:	2b00      	cmp	r3, #0
 801416c:	d004      	beq.n	8014178 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2201      	movs	r2, #1
 8014172:	755a      	strb	r2, [r3, #21]
 8014174:	2301      	movs	r3, #1
 8014176:	e04e      	b.n	8014216 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	697a      	ldr	r2, [r7, #20]
 801417c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	699b      	ldr	r3, [r3, #24]
 8014182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014186:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801418a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801418c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	429a      	cmp	r2, r3
 8014192:	d901      	bls.n	8014198 <f_write+0x264>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	699b      	ldr	r3, [r3, #24]
 80141a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141a6:	4413      	add	r3, r2
 80141a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141aa:	69f9      	ldr	r1, [r7, #28]
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7fd fc59 	bl	8011a64 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	7d1b      	ldrb	r3, [r3, #20]
 80141b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80141ba:	b2da      	uxtb	r2, r3
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80141c0:	69fa      	ldr	r2, [r7, #28]
 80141c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c4:	4413      	add	r3, r2
 80141c6:	61fb      	str	r3, [r7, #28]
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	699a      	ldr	r2, [r3, #24]
 80141cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ce:	441a      	add	r2, r3
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	619a      	str	r2, [r3, #24]
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	68da      	ldr	r2, [r3, #12]
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	699b      	ldr	r3, [r3, #24]
 80141dc:	429a      	cmp	r2, r3
 80141de:	bf38      	it	cc
 80141e0:	461a      	movcc	r2, r3
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	60da      	str	r2, [r3, #12]
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	681a      	ldr	r2, [r3, #0]
 80141ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ec:	441a      	add	r2, r3
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	601a      	str	r2, [r3, #0]
 80141f2:	687a      	ldr	r2, [r7, #4]
 80141f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f6:	1ad3      	subs	r3, r2, r3
 80141f8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	f47f aed4 	bne.w	8013faa <f_write+0x76>
 8014202:	e000      	b.n	8014206 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014204:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	7d1b      	ldrb	r3, [r3, #20]
 801420a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801420e:	b2da      	uxtb	r2, r3
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014214:	2300      	movs	r3, #0
}
 8014216:	4618      	mov	r0, r3
 8014218:	3730      	adds	r7, #48	; 0x30
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}

0801421e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801421e:	b580      	push	{r7, lr}
 8014220:	b086      	sub	sp, #24
 8014222:	af00      	add	r7, sp, #0
 8014224:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	f107 0208 	add.w	r2, r7, #8
 801422c:	4611      	mov	r1, r2
 801422e:	4618      	mov	r0, r3
 8014230:	f7ff fc46 	bl	8013ac0 <validate>
 8014234:	4603      	mov	r3, r0
 8014236:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014238:	7dfb      	ldrb	r3, [r7, #23]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d168      	bne.n	8014310 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	7d1b      	ldrb	r3, [r3, #20]
 8014242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014246:	2b00      	cmp	r3, #0
 8014248:	d062      	beq.n	8014310 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	7d1b      	ldrb	r3, [r3, #20]
 801424e:	b25b      	sxtb	r3, r3
 8014250:	2b00      	cmp	r3, #0
 8014252:	da15      	bge.n	8014280 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	7858      	ldrb	r0, [r3, #1]
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	6a1a      	ldr	r2, [r3, #32]
 8014262:	2301      	movs	r3, #1
 8014264:	f7fd fb3e 	bl	80118e4 <disk_write>
 8014268:	4603      	mov	r3, r0
 801426a:	2b00      	cmp	r3, #0
 801426c:	d001      	beq.n	8014272 <f_sync+0x54>
 801426e:	2301      	movs	r3, #1
 8014270:	e04f      	b.n	8014312 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	7d1b      	ldrb	r3, [r3, #20]
 8014276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801427a:	b2da      	uxtb	r2, r3
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014280:	f7f8 f84c 	bl	800c31c <get_fattime>
 8014284:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014286:	68ba      	ldr	r2, [r7, #8]
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801428c:	4619      	mov	r1, r3
 801428e:	4610      	mov	r0, r2
 8014290:	f7fd fe16 	bl	8011ec0 <move_window>
 8014294:	4603      	mov	r3, r0
 8014296:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014298:	7dfb      	ldrb	r3, [r7, #23]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d138      	bne.n	8014310 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142a2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	330b      	adds	r3, #11
 80142a8:	781a      	ldrb	r2, [r3, #0]
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	330b      	adds	r3, #11
 80142ae:	f042 0220 	orr.w	r2, r2, #32
 80142b2:	b2d2      	uxtb	r2, r2
 80142b4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	6818      	ldr	r0, [r3, #0]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	689b      	ldr	r3, [r3, #8]
 80142be:	461a      	mov	r2, r3
 80142c0:	68f9      	ldr	r1, [r7, #12]
 80142c2:	f7fe fb1b 	bl	80128fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	f103 021c 	add.w	r2, r3, #28
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	68db      	ldr	r3, [r3, #12]
 80142d0:	4619      	mov	r1, r3
 80142d2:	4610      	mov	r0, r2
 80142d4:	f7fd fb9a 	bl	8011a0c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	3316      	adds	r3, #22
 80142dc:	6939      	ldr	r1, [r7, #16]
 80142de:	4618      	mov	r0, r3
 80142e0:	f7fd fb94 	bl	8011a0c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	3312      	adds	r3, #18
 80142e8:	2100      	movs	r1, #0
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7fd fb73 	bl	80119d6 <st_word>
					fs->wflag = 1;
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	2201      	movs	r2, #1
 80142f4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80142f6:	68bb      	ldr	r3, [r7, #8]
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7fd fe0f 	bl	8011f1c <sync_fs>
 80142fe:	4603      	mov	r3, r0
 8014300:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	7d1b      	ldrb	r3, [r3, #20]
 8014306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801430a:	b2da      	uxtb	r2, r3
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014310:	7dfb      	ldrb	r3, [r7, #23]
}
 8014312:	4618      	mov	r0, r3
 8014314:	3718      	adds	r7, #24
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}

0801431a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801431a:	b580      	push	{r7, lr}
 801431c:	b084      	sub	sp, #16
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f7ff ff7b 	bl	801421e <f_sync>
 8014328:	4603      	mov	r3, r0
 801432a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801432c:	7bfb      	ldrb	r3, [r7, #15]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d118      	bne.n	8014364 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f107 0208 	add.w	r2, r7, #8
 8014338:	4611      	mov	r1, r2
 801433a:	4618      	mov	r0, r3
 801433c:	f7ff fbc0 	bl	8013ac0 <validate>
 8014340:	4603      	mov	r3, r0
 8014342:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014344:	7bfb      	ldrb	r3, [r7, #15]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d10c      	bne.n	8014364 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	691b      	ldr	r3, [r3, #16]
 801434e:	4618      	mov	r0, r3
 8014350:	f7fd fd12 	bl	8011d78 <dec_lock>
 8014354:	4603      	mov	r3, r0
 8014356:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014358:	7bfb      	ldrb	r3, [r7, #15]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d102      	bne.n	8014364 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	2200      	movs	r2, #0
 8014362:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014364:	7bfb      	ldrb	r3, [r7, #15]
}
 8014366:	4618      	mov	r0, r3
 8014368:	3710      	adds	r7, #16
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}

0801436e <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801436e:	b590      	push	{r4, r7, lr}
 8014370:	b093      	sub	sp, #76	; 0x4c
 8014372:	af00      	add	r7, sp, #0
 8014374:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014376:	f107 010c 	add.w	r1, r7, #12
 801437a:	1d3b      	adds	r3, r7, #4
 801437c:	2200      	movs	r2, #0
 801437e:	4618      	mov	r0, r3
 8014380:	f7ff f94a 	bl	8013618 <find_volume>
 8014384:	4603      	mov	r3, r0
 8014386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801438a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801438e:	2b00      	cmp	r3, #0
 8014390:	d131      	bne.n	80143f6 <f_chdir+0x88>
		dj.obj.fs = fs;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	f107 0310 	add.w	r3, r7, #16
 801439c:	4611      	mov	r1, r2
 801439e:	4618      	mov	r0, r3
 80143a0:	f7ff f810 	bl	80133c4 <follow_path>
 80143a4:	4603      	mov	r3, r0
 80143a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 80143aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d11a      	bne.n	80143e8 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80143b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80143b6:	b25b      	sxtb	r3, r3
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	da03      	bge.n	80143c4 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	69ba      	ldr	r2, [r7, #24]
 80143c0:	619a      	str	r2, [r3, #24]
 80143c2:	e011      	b.n	80143e8 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80143c4:	7dbb      	ldrb	r3, [r7, #22]
 80143c6:	f003 0310 	and.w	r3, r3, #16
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d009      	beq.n	80143e2 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143d2:	68fc      	ldr	r4, [r7, #12]
 80143d4:	4611      	mov	r1, r2
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7fe fa71 	bl	80128be <ld_clust>
 80143dc:	4603      	mov	r3, r0
 80143de:	61a3      	str	r3, [r4, #24]
 80143e0:	e002      	b.n	80143e8 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80143e2:	2305      	movs	r3, #5
 80143e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80143e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80143ec:	2b04      	cmp	r3, #4
 80143ee:	d102      	bne.n	80143f6 <f_chdir+0x88>
 80143f0:	2305      	movs	r3, #5
 80143f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 80143f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80143fa:	4618      	mov	r0, r3
 80143fc:	374c      	adds	r7, #76	; 0x4c
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd90      	pop	{r4, r7, pc}

08014402 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014402:	b580      	push	{r7, lr}
 8014404:	b086      	sub	sp, #24
 8014406:	af00      	add	r7, sp, #0
 8014408:	6078      	str	r0, [r7, #4]
 801440a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d101      	bne.n	8014416 <f_opendir+0x14>
 8014412:	2309      	movs	r3, #9
 8014414:	e064      	b.n	80144e0 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801441a:	f107 010c 	add.w	r1, r7, #12
 801441e:	463b      	mov	r3, r7
 8014420:	2200      	movs	r2, #0
 8014422:	4618      	mov	r0, r3
 8014424:	f7ff f8f8 	bl	8013618 <find_volume>
 8014428:	4603      	mov	r3, r0
 801442a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801442c:	7dfb      	ldrb	r3, [r7, #23]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d14f      	bne.n	80144d2 <f_opendir+0xd0>
		obj->fs = fs;
 8014432:	68fa      	ldr	r2, [r7, #12]
 8014434:	693b      	ldr	r3, [r7, #16]
 8014436:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8014438:	683b      	ldr	r3, [r7, #0]
 801443a:	4619      	mov	r1, r3
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f7fe ffc1 	bl	80133c4 <follow_path>
 8014442:	4603      	mov	r3, r0
 8014444:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8014446:	7dfb      	ldrb	r3, [r7, #23]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d13d      	bne.n	80144c8 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014452:	b25b      	sxtb	r3, r3
 8014454:	2b00      	cmp	r3, #0
 8014456:	db12      	blt.n	801447e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	799b      	ldrb	r3, [r3, #6]
 801445c:	f003 0310 	and.w	r3, r3, #16
 8014460:	2b00      	cmp	r3, #0
 8014462:	d00a      	beq.n	801447a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014464:	68fa      	ldr	r2, [r7, #12]
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	6a1b      	ldr	r3, [r3, #32]
 801446a:	4619      	mov	r1, r3
 801446c:	4610      	mov	r0, r2
 801446e:	f7fe fa26 	bl	80128be <ld_clust>
 8014472:	4602      	mov	r2, r0
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	609a      	str	r2, [r3, #8]
 8014478:	e001      	b.n	801447e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801447a:	2305      	movs	r3, #5
 801447c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801447e:	7dfb      	ldrb	r3, [r7, #23]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d121      	bne.n	80144c8 <f_opendir+0xc6>
				obj->id = fs->id;
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	88da      	ldrh	r2, [r3, #6]
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801448c:	2100      	movs	r1, #0
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f7fe f88e 	bl	80125b0 <dir_sdi>
 8014494:	4603      	mov	r3, r0
 8014496:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8014498:	7dfb      	ldrb	r3, [r7, #23]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d114      	bne.n	80144c8 <f_opendir+0xc6>
					if (obj->sclust) {
 801449e:	693b      	ldr	r3, [r7, #16]
 80144a0:	689b      	ldr	r3, [r3, #8]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d00d      	beq.n	80144c2 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80144a6:	2100      	movs	r1, #0
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f7fd fbd7 	bl	8011c5c <inc_lock>
 80144ae:	4602      	mov	r2, r0
 80144b0:	693b      	ldr	r3, [r7, #16]
 80144b2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	691b      	ldr	r3, [r3, #16]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d105      	bne.n	80144c8 <f_opendir+0xc6>
 80144bc:	2312      	movs	r3, #18
 80144be:	75fb      	strb	r3, [r7, #23]
 80144c0:	e002      	b.n	80144c8 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	2200      	movs	r2, #0
 80144c6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80144c8:	7dfb      	ldrb	r3, [r7, #23]
 80144ca:	2b04      	cmp	r3, #4
 80144cc:	d101      	bne.n	80144d2 <f_opendir+0xd0>
 80144ce:	2305      	movs	r3, #5
 80144d0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80144d2:	7dfb      	ldrb	r3, [r7, #23]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d002      	beq.n	80144de <f_opendir+0xdc>
 80144d8:	693b      	ldr	r3, [r7, #16]
 80144da:	2200      	movs	r2, #0
 80144dc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80144de:	7dfb      	ldrb	r3, [r7, #23]
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3718      	adds	r7, #24
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}

080144e8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b084      	sub	sp, #16
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f107 0208 	add.w	r2, r7, #8
 80144f6:	4611      	mov	r1, r2
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7ff fae1 	bl	8013ac0 <validate>
 80144fe:	4603      	mov	r3, r0
 8014500:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014502:	7bfb      	ldrb	r3, [r7, #15]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d110      	bne.n	801452a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	691b      	ldr	r3, [r3, #16]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d006      	beq.n	801451e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	691b      	ldr	r3, [r3, #16]
 8014514:	4618      	mov	r0, r3
 8014516:	f7fd fc2f 	bl	8011d78 <dec_lock>
 801451a:	4603      	mov	r3, r0
 801451c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801451e:	7bfb      	ldrb	r3, [r7, #15]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d102      	bne.n	801452a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2200      	movs	r2, #0
 8014528:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801452a:	7bfb      	ldrb	r3, [r7, #15]
}
 801452c:	4618      	mov	r0, r3
 801452e:	3710      	adds	r7, #16
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}

08014534 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b098      	sub	sp, #96	; 0x60
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801453c:	f107 010c 	add.w	r1, r7, #12
 8014540:	1d3b      	adds	r3, r7, #4
 8014542:	2202      	movs	r2, #2
 8014544:	4618      	mov	r0, r3
 8014546:	f7ff f867 	bl	8013618 <find_volume>
 801454a:	4603      	mov	r3, r0
 801454c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8014554:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014558:	2b00      	cmp	r3, #0
 801455a:	f040 80f9 	bne.w	8014750 <f_mkdir+0x21c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801455e:	687a      	ldr	r2, [r7, #4]
 8014560:	f107 0310 	add.w	r3, r7, #16
 8014564:	4611      	mov	r1, r2
 8014566:	4618      	mov	r0, r3
 8014568:	f7fe ff2c 	bl	80133c4 <follow_path>
 801456c:	4603      	mov	r3, r0
 801456e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014576:	2b00      	cmp	r3, #0
 8014578:	d102      	bne.n	8014580 <f_mkdir+0x4c>
 801457a:	2308      	movs	r3, #8
 801457c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8014580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014584:	2b04      	cmp	r3, #4
 8014586:	d108      	bne.n	801459a <f_mkdir+0x66>
 8014588:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801458c:	f003 0320 	and.w	r3, r3, #32
 8014590:	2b00      	cmp	r3, #0
 8014592:	d002      	beq.n	801459a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014594:	2306      	movs	r3, #6
 8014596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801459a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801459e:	2b04      	cmp	r3, #4
 80145a0:	f040 80d6 	bne.w	8014750 <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80145a4:	f107 0310 	add.w	r3, r7, #16
 80145a8:	2100      	movs	r1, #0
 80145aa:	4618      	mov	r0, r3
 80145ac:	f7fd ff34 	bl	8012418 <create_chain>
 80145b0:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	895b      	ldrh	r3, [r3, #10]
 80145b6:	025b      	lsls	r3, r3, #9
 80145b8:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 80145ba:	2300      	movs	r3, #0
 80145bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80145c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d102      	bne.n	80145cc <f_mkdir+0x98>
 80145c6:	2307      	movs	r3, #7
 80145c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 80145cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80145ce:	2b01      	cmp	r3, #1
 80145d0:	d102      	bne.n	80145d8 <f_mkdir+0xa4>
 80145d2:	2302      	movs	r3, #2
 80145d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80145d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80145da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145de:	d102      	bne.n	80145e6 <f_mkdir+0xb2>
 80145e0:	2301      	movs	r3, #1
 80145e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80145e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d106      	bne.n	80145fc <f_mkdir+0xc8>
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	4618      	mov	r0, r3
 80145f2:	f7fd fc21 	bl	8011e38 <sync_window>
 80145f6:	4603      	mov	r3, r0
 80145f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 80145fc:	f7f7 fe8e 	bl	800c31c <get_fattime>
 8014600:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014606:	2b00      	cmp	r3, #0
 8014608:	d16a      	bne.n	80146e0 <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801460e:	4618      	mov	r0, r3
 8014610:	f7fd fcf2 	bl	8011ff8 <clust2sect>
 8014614:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	3338      	adds	r3, #56	; 0x38
 801461a:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 801461c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014620:	2100      	movs	r1, #0
 8014622:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014624:	f7fd fa3f 	bl	8011aa6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014628:	220b      	movs	r2, #11
 801462a:	2120      	movs	r1, #32
 801462c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801462e:	f7fd fa3a 	bl	8011aa6 <mem_set>
					dir[DIR_Name] = '.';
 8014632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014634:	222e      	movs	r2, #46	; 0x2e
 8014636:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801463a:	330b      	adds	r3, #11
 801463c:	2210      	movs	r2, #16
 801463e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014642:	3316      	adds	r3, #22
 8014644:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014646:	4618      	mov	r0, r3
 8014648:	f7fd f9e0 	bl	8011a0c <st_dword>
					st_clust(fs, dir, dcl);
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014650:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014652:	4618      	mov	r0, r3
 8014654:	f7fe f952 	bl	80128fc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801465a:	3320      	adds	r3, #32
 801465c:	2220      	movs	r2, #32
 801465e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014660:	4618      	mov	r0, r3
 8014662:	f7fd f9ff 	bl	8011a64 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014668:	3321      	adds	r3, #33	; 0x21
 801466a:	222e      	movs	r2, #46	; 0x2e
 801466c:	701a      	strb	r2, [r3, #0]
 801466e:	69bb      	ldr	r3, [r7, #24]
 8014670:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	781b      	ldrb	r3, [r3, #0]
 8014676:	2b03      	cmp	r3, #3
 8014678:	d106      	bne.n	8014688 <f_mkdir+0x154>
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801467e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014680:	429a      	cmp	r2, r3
 8014682:	d101      	bne.n	8014688 <f_mkdir+0x154>
 8014684:	2300      	movs	r3, #0
 8014686:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8014688:	68f8      	ldr	r0, [r7, #12]
 801468a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801468c:	3320      	adds	r3, #32
 801468e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014690:	4619      	mov	r1, r3
 8014692:	f7fe f933 	bl	80128fc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	895b      	ldrh	r3, [r3, #10]
 801469a:	65bb      	str	r3, [r7, #88]	; 0x58
 801469c:	e01b      	b.n	80146d6 <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 801469e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146a0:	1c5a      	adds	r2, r3, #1
 80146a2:	657a      	str	r2, [r7, #84]	; 0x54
 80146a4:	68fa      	ldr	r2, [r7, #12]
 80146a6:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	2201      	movs	r2, #1
 80146ac:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7fd fbc1 	bl	8011e38 <sync_window>
 80146b6:	4603      	mov	r3, r0
 80146b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 80146bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d10c      	bne.n	80146de <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 80146c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80146c8:	2100      	movs	r1, #0
 80146ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80146cc:	f7fd f9eb 	bl	8011aa6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80146d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146d2:	3b01      	subs	r3, #1
 80146d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80146d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d1e0      	bne.n	801469e <f_mkdir+0x16a>
 80146dc:	e000      	b.n	80146e0 <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 80146de:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80146e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d107      	bne.n	80146f8 <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80146e8:	f107 0310 	add.w	r3, r7, #16
 80146ec:	4618      	mov	r0, r3
 80146ee:	f7fe fb6d 	bl	8012dcc <dir_register>
 80146f2:	4603      	mov	r3, r0
 80146f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 80146f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d120      	bne.n	8014742 <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014702:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014706:	3316      	adds	r3, #22
 8014708:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801470a:	4618      	mov	r0, r3
 801470c:	f7fd f97e 	bl	8011a0c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014714:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014716:	4618      	mov	r0, r3
 8014718:	f7fe f8f0 	bl	80128fc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801471c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801471e:	330b      	adds	r3, #11
 8014720:	2210      	movs	r2, #16
 8014722:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	2201      	movs	r2, #1
 8014728:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801472a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801472e:	2b00      	cmp	r3, #0
 8014730:	d10e      	bne.n	8014750 <f_mkdir+0x21c>
					res = sync_fs(fs);
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	4618      	mov	r0, r3
 8014736:	f7fd fbf1 	bl	8011f1c <sync_fs>
 801473a:	4603      	mov	r3, r0
 801473c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014740:	e006      	b.n	8014750 <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014742:	f107 0310 	add.w	r3, r7, #16
 8014746:	2200      	movs	r2, #0
 8014748:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801474a:	4618      	mov	r0, r3
 801474c:	f7fd fdff 	bl	801234e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014754:	4618      	mov	r0, r3
 8014756:	3760      	adds	r7, #96	; 0x60
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}

0801475c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 801475c:	b590      	push	{r4, r7, lr}
 801475e:	b09d      	sub	sp, #116	; 0x74
 8014760:	af00      	add	r7, sp, #0
 8014762:	60f8      	str	r0, [r7, #12]
 8014764:	607a      	str	r2, [r7, #4]
 8014766:	603b      	str	r3, [r7, #0]
 8014768:	460b      	mov	r3, r1
 801476a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 801476c:	2301      	movs	r3, #1
 801476e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8014770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014774:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8014776:	f107 030c 	add.w	r3, r7, #12
 801477a:	4618      	mov	r0, r3
 801477c:	f7fe feb2 	bl	80134e4 <get_ldnumber>
 8014780:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014784:	2b00      	cmp	r3, #0
 8014786:	da02      	bge.n	801478e <f_mkfs+0x32>
 8014788:	230b      	movs	r3, #11
 801478a:	f000 bc0d 	b.w	8014fa8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 801478e:	4a94      	ldr	r2, [pc, #592]	; (80149e0 <f_mkfs+0x284>)
 8014790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d005      	beq.n	80147a6 <f_mkfs+0x4a>
 801479a:	4a91      	ldr	r2, [pc, #580]	; (80149e0 <f_mkfs+0x284>)
 801479c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801479e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80147a2:	2200      	movs	r2, #0
 80147a4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80147a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80147ac:	2300      	movs	r3, #0
 80147ae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80147b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7fd f84e 	bl	8011858 <disk_initialize>
 80147bc:	4603      	mov	r3, r0
 80147be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80147c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80147c6:	f003 0301 	and.w	r3, r3, #1
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d001      	beq.n	80147d2 <f_mkfs+0x76>
 80147ce:	2303      	movs	r3, #3
 80147d0:	e3ea      	b.n	8014fa8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80147d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80147d6:	f003 0304 	and.w	r3, r3, #4
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d001      	beq.n	80147e2 <f_mkfs+0x86>
 80147de:	230a      	movs	r3, #10
 80147e0:	e3e2      	b.n	8014fa8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80147e2:	f107 0214 	add.w	r2, r7, #20
 80147e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80147ea:	2103      	movs	r1, #3
 80147ec:	4618      	mov	r0, r3
 80147ee:	f7fd f899 	bl	8011924 <disk_ioctl>
 80147f2:	4603      	mov	r3, r0
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d10c      	bne.n	8014812 <f_mkfs+0xb6>
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d009      	beq.n	8014812 <f_mkfs+0xb6>
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014804:	d805      	bhi.n	8014812 <f_mkfs+0xb6>
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	1e5a      	subs	r2, r3, #1
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	4013      	ands	r3, r2
 801480e:	2b00      	cmp	r3, #0
 8014810:	d001      	beq.n	8014816 <f_mkfs+0xba>
 8014812:	2301      	movs	r3, #1
 8014814:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8014816:	f44f 7300 	mov.w	r3, #512	; 0x200
 801481a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d003      	beq.n	801482a <f_mkfs+0xce>
 8014822:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014824:	687a      	ldr	r2, [r7, #4]
 8014826:	429a      	cmp	r2, r3
 8014828:	d309      	bcc.n	801483e <f_mkfs+0xe2>
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014830:	d805      	bhi.n	801483e <f_mkfs+0xe2>
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	1e5a      	subs	r2, r3, #1
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	4013      	ands	r3, r2
 801483a:	2b00      	cmp	r3, #0
 801483c:	d001      	beq.n	8014842 <f_mkfs+0xe6>
 801483e:	2313      	movs	r3, #19
 8014840:	e3b2      	b.n	8014fa8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8014842:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014844:	687a      	ldr	r2, [r7, #4]
 8014846:	fbb2 f3f3 	udiv	r3, r2, r3
 801484a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8014850:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014856:	fbb2 f3f3 	udiv	r3, r2, r3
 801485a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 801485c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014860:	fb02 f303 	mul.w	r3, r2, r3
 8014864:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8014866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014868:	2b00      	cmp	r3, #0
 801486a:	d101      	bne.n	8014870 <f_mkfs+0x114>
 801486c:	230e      	movs	r3, #14
 801486e:	e39b      	b.n	8014fa8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8014870:	f107 0210 	add.w	r2, r7, #16
 8014874:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014878:	2101      	movs	r1, #1
 801487a:	4618      	mov	r0, r3
 801487c:	f7fd f852 	bl	8011924 <disk_ioctl>
 8014880:	4603      	mov	r3, r0
 8014882:	2b00      	cmp	r3, #0
 8014884:	d001      	beq.n	801488a <f_mkfs+0x12e>
 8014886:	2301      	movs	r3, #1
 8014888:	e38e      	b.n	8014fa8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 801488a:	7afb      	ldrb	r3, [r7, #11]
 801488c:	f003 0308 	and.w	r3, r3, #8
 8014890:	2b00      	cmp	r3, #0
 8014892:	d001      	beq.n	8014898 <f_mkfs+0x13c>
 8014894:	2300      	movs	r3, #0
 8014896:	e000      	b.n	801489a <f_mkfs+0x13e>
 8014898:	233f      	movs	r3, #63	; 0x3f
 801489a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 801489c:	693b      	ldr	r3, [r7, #16]
 801489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d901      	bls.n	80148a8 <f_mkfs+0x14c>
 80148a4:	230e      	movs	r3, #14
 80148a6:	e37f      	b.n	8014fa8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80148a8:	693a      	ldr	r2, [r7, #16]
 80148aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ac:	1ad3      	subs	r3, r2, r3
 80148ae:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80148b0:	693b      	ldr	r3, [r7, #16]
 80148b2:	2b7f      	cmp	r3, #127	; 0x7f
 80148b4:	d801      	bhi.n	80148ba <f_mkfs+0x15e>
 80148b6:	230e      	movs	r3, #14
 80148b8:	e376      	b.n	8014fa8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	2b80      	cmp	r3, #128	; 0x80
 80148be:	d901      	bls.n	80148c4 <f_mkfs+0x168>
 80148c0:	2313      	movs	r3, #19
 80148c2:	e371      	b.n	8014fa8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80148c4:	7afb      	ldrb	r3, [r7, #11]
 80148c6:	f003 0302 	and.w	r3, r3, #2
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d00d      	beq.n	80148ea <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80148ce:	7afb      	ldrb	r3, [r7, #11]
 80148d0:	f003 0307 	and.w	r3, r3, #7
 80148d4:	2b02      	cmp	r3, #2
 80148d6:	d004      	beq.n	80148e2 <f_mkfs+0x186>
 80148d8:	7afb      	ldrb	r3, [r7, #11]
 80148da:	f003 0301 	and.w	r3, r3, #1
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d103      	bne.n	80148ea <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80148e2:	2303      	movs	r3, #3
 80148e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80148e8:	e009      	b.n	80148fe <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80148ea:	7afb      	ldrb	r3, [r7, #11]
 80148ec:	f003 0301 	and.w	r3, r3, #1
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d101      	bne.n	80148f8 <f_mkfs+0x19c>
 80148f4:	2313      	movs	r3, #19
 80148f6:	e357      	b.n	8014fa8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80148f8:	2302      	movs	r3, #2
 80148fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8014902:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014906:	2b03      	cmp	r3, #3
 8014908:	d13c      	bne.n	8014984 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 801490a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801490c:	2b00      	cmp	r3, #0
 801490e:	d11b      	bne.n	8014948 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	0c5b      	lsrs	r3, r3, #17
 8014914:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014916:	2300      	movs	r3, #0
 8014918:	64bb      	str	r3, [r7, #72]	; 0x48
 801491a:	2301      	movs	r3, #1
 801491c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801491e:	e005      	b.n	801492c <f_mkfs+0x1d0>
 8014920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014922:	3301      	adds	r3, #1
 8014924:	64bb      	str	r3, [r7, #72]	; 0x48
 8014926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014928:	005b      	lsls	r3, r3, #1
 801492a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801492c:	4a2d      	ldr	r2, [pc, #180]	; (80149e4 <f_mkfs+0x288>)
 801492e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d007      	beq.n	8014948 <f_mkfs+0x1ec>
 8014938:	4a2a      	ldr	r2, [pc, #168]	; (80149e4 <f_mkfs+0x288>)
 801493a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801493c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014940:	461a      	mov	r2, r3
 8014942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014944:	4293      	cmp	r3, r2
 8014946:	d2eb      	bcs.n	8014920 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8014948:	693a      	ldr	r2, [r7, #16]
 801494a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014950:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8014952:	6a3b      	ldr	r3, [r7, #32]
 8014954:	3302      	adds	r3, #2
 8014956:	009a      	lsls	r2, r3, #2
 8014958:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801495a:	4413      	add	r3, r2
 801495c:	1e5a      	subs	r2, r3, #1
 801495e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014960:	fbb2 f3f3 	udiv	r3, r2, r3
 8014964:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8014966:	2320      	movs	r3, #32
 8014968:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 801496a:	2300      	movs	r3, #0
 801496c:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 801496e:	6a3b      	ldr	r3, [r7, #32]
 8014970:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014974:	4293      	cmp	r3, r2
 8014976:	d903      	bls.n	8014980 <f_mkfs+0x224>
 8014978:	6a3b      	ldr	r3, [r7, #32]
 801497a:	4a1b      	ldr	r2, [pc, #108]	; (80149e8 <f_mkfs+0x28c>)
 801497c:	4293      	cmp	r3, r2
 801497e:	d952      	bls.n	8014a26 <f_mkfs+0x2ca>
 8014980:	230e      	movs	r3, #14
 8014982:	e311      	b.n	8014fa8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8014984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014986:	2b00      	cmp	r3, #0
 8014988:	d11b      	bne.n	80149c2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 801498a:	693b      	ldr	r3, [r7, #16]
 801498c:	0b1b      	lsrs	r3, r3, #12
 801498e:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014990:	2300      	movs	r3, #0
 8014992:	64bb      	str	r3, [r7, #72]	; 0x48
 8014994:	2301      	movs	r3, #1
 8014996:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014998:	e005      	b.n	80149a6 <f_mkfs+0x24a>
 801499a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801499c:	3301      	adds	r3, #1
 801499e:	64bb      	str	r3, [r7, #72]	; 0x48
 80149a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80149a2:	005b      	lsls	r3, r3, #1
 80149a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80149a6:	4a11      	ldr	r2, [pc, #68]	; (80149ec <f_mkfs+0x290>)
 80149a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80149aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d007      	beq.n	80149c2 <f_mkfs+0x266>
 80149b2:	4a0e      	ldr	r2, [pc, #56]	; (80149ec <f_mkfs+0x290>)
 80149b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80149b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149ba:	461a      	mov	r2, r3
 80149bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80149be:	4293      	cmp	r3, r2
 80149c0:	d2eb      	bcs.n	801499a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80149c2:	693a      	ldr	r2, [r7, #16]
 80149c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80149c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80149ca:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80149cc:	6a3b      	ldr	r3, [r7, #32]
 80149ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 80149d2:	4293      	cmp	r3, r2
 80149d4:	d90c      	bls.n	80149f0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80149d6:	6a3b      	ldr	r3, [r7, #32]
 80149d8:	3302      	adds	r3, #2
 80149da:	005b      	lsls	r3, r3, #1
 80149dc:	663b      	str	r3, [r7, #96]	; 0x60
 80149de:	e012      	b.n	8014a06 <f_mkfs+0x2aa>
 80149e0:	20000bec 	.word	0x20000bec
 80149e4:	0801a568 	.word	0x0801a568
 80149e8:	0ffffff5 	.word	0x0ffffff5
 80149ec:	0801a578 	.word	0x0801a578
				} else {
					fmt = FS_FAT12;
 80149f0:	2301      	movs	r3, #1
 80149f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80149f6:	6a3a      	ldr	r2, [r7, #32]
 80149f8:	4613      	mov	r3, r2
 80149fa:	005b      	lsls	r3, r3, #1
 80149fc:	4413      	add	r3, r2
 80149fe:	3301      	adds	r3, #1
 8014a00:	085b      	lsrs	r3, r3, #1
 8014a02:	3303      	adds	r3, #3
 8014a04:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8014a06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014a0a:	4413      	add	r3, r2
 8014a0c:	1e5a      	subs	r2, r3, #1
 8014a0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a14:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 8014a16:	2301      	movs	r3, #1
 8014a18:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8014a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a1c:	015a      	lsls	r2, r3, #5
 8014a1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a24:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8014a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014a2a:	4413      	add	r3, r2
 8014a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8014a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014a32:	fb02 f203 	mul.w	r2, r2, r3
 8014a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014a38:	4413      	add	r3, r2
 8014a3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014a3c:	4413      	add	r3, r2
 8014a3e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8014a40:	697a      	ldr	r2, [r7, #20]
 8014a42:	69fb      	ldr	r3, [r7, #28]
 8014a44:	4413      	add	r3, r2
 8014a46:	1e5a      	subs	r2, r3, #1
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	425b      	negs	r3, r3
 8014a4c:	401a      	ands	r2, r3
 8014a4e:	69fb      	ldr	r3, [r7, #28]
 8014a50:	1ad3      	subs	r3, r2, r3
 8014a52:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8014a54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014a58:	2b03      	cmp	r3, #3
 8014a5a:	d108      	bne.n	8014a6e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8014a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014a60:	4413      	add	r3, r2
 8014a62:	65bb      	str	r3, [r7, #88]	; 0x58
 8014a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014a68:	4413      	add	r3, r2
 8014a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014a6c:	e006      	b.n	8014a7c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8014a6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a78:	4413      	add	r3, r2
 8014a7a:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8014a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a7e:	011a      	lsls	r2, r3, #4
 8014a80:	69fb      	ldr	r3, [r7, #28]
 8014a82:	441a      	add	r2, r3
 8014a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a86:	1ad2      	subs	r2, r2, r3
 8014a88:	693b      	ldr	r3, [r7, #16]
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d901      	bls.n	8014a92 <f_mkfs+0x336>
 8014a8e:	230e      	movs	r3, #14
 8014a90:	e28a      	b.n	8014fa8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8014a92:	693a      	ldr	r2, [r7, #16]
 8014a94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014a96:	1ad2      	subs	r2, r2, r3
 8014a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014a9c:	fb01 f303 	mul.w	r3, r1, r3
 8014aa0:	1ad2      	subs	r2, r2, r3
 8014aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014aa4:	1ad2      	subs	r2, r2, r3
 8014aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8014aac:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8014aae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014ab2:	2b03      	cmp	r3, #3
 8014ab4:	d10f      	bne.n	8014ad6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8014ab6:	6a3b      	ldr	r3, [r7, #32]
 8014ab8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014abc:	4293      	cmp	r3, r2
 8014abe:	d80a      	bhi.n	8014ad6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d105      	bne.n	8014ad2 <f_mkfs+0x376>
 8014ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ac8:	085b      	lsrs	r3, r3, #1
 8014aca:	607b      	str	r3, [r7, #4]
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d144      	bne.n	8014b5c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8014ad2:	230e      	movs	r3, #14
 8014ad4:	e268      	b.n	8014fa8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8014ad6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014ada:	2b02      	cmp	r3, #2
 8014adc:	d133      	bne.n	8014b46 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8014ade:	6a3b      	ldr	r3, [r7, #32]
 8014ae0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014ae4:	4293      	cmp	r3, r2
 8014ae6:	d91e      	bls.n	8014b26 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d107      	bne.n	8014afe <f_mkfs+0x3a2>
 8014aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014af0:	005b      	lsls	r3, r3, #1
 8014af2:	2b40      	cmp	r3, #64	; 0x40
 8014af4:	d803      	bhi.n	8014afe <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8014af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014af8:	005b      	lsls	r3, r3, #1
 8014afa:	607b      	str	r3, [r7, #4]
 8014afc:	e033      	b.n	8014b66 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8014afe:	7afb      	ldrb	r3, [r7, #11]
 8014b00:	f003 0302 	and.w	r3, r3, #2
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d003      	beq.n	8014b10 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8014b08:	2303      	movs	r3, #3
 8014b0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8014b0e:	e02a      	b.n	8014b66 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d105      	bne.n	8014b22 <f_mkfs+0x3c6>
 8014b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b18:	005b      	lsls	r3, r3, #1
 8014b1a:	607b      	str	r3, [r7, #4]
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2b80      	cmp	r3, #128	; 0x80
 8014b20:	d91e      	bls.n	8014b60 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8014b22:	230e      	movs	r3, #14
 8014b24:	e240      	b.n	8014fa8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8014b26:	6a3b      	ldr	r3, [r7, #32]
 8014b28:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014b2c:	4293      	cmp	r3, r2
 8014b2e:	d80a      	bhi.n	8014b46 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d105      	bne.n	8014b42 <f_mkfs+0x3e6>
 8014b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b38:	005b      	lsls	r3, r3, #1
 8014b3a:	607b      	str	r3, [r7, #4]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2b80      	cmp	r3, #128	; 0x80
 8014b40:	d910      	bls.n	8014b64 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8014b42:	230e      	movs	r3, #14
 8014b44:	e230      	b.n	8014fa8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8014b46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014b4a:	2b01      	cmp	r3, #1
 8014b4c:	d10c      	bne.n	8014b68 <f_mkfs+0x40c>
 8014b4e:	6a3b      	ldr	r3, [r7, #32]
 8014b50:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014b54:	4293      	cmp	r3, r2
 8014b56:	d907      	bls.n	8014b68 <f_mkfs+0x40c>
 8014b58:	230e      	movs	r3, #14
 8014b5a:	e225      	b.n	8014fa8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014b5c:	bf00      	nop
 8014b5e:	e6ce      	b.n	80148fe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014b60:	bf00      	nop
 8014b62:	e6cc      	b.n	80148fe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014b64:	bf00      	nop
			pau = au;
 8014b66:	e6ca      	b.n	80148fe <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8014b68:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8014b6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014b6c:	461a      	mov	r2, r3
 8014b6e:	2100      	movs	r1, #0
 8014b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b72:	f7fc ff98 	bl	8011aa6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8014b76:	220b      	movs	r2, #11
 8014b78:	49bc      	ldr	r1, [pc, #752]	; (8014e6c <f_mkfs+0x710>)
 8014b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b7c:	f7fc ff72 	bl	8011a64 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8014b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b82:	330b      	adds	r3, #11
 8014b84:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014b86:	4611      	mov	r1, r2
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f7fc ff24 	bl	80119d6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8014b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b90:	330d      	adds	r3, #13
 8014b92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014b94:	b2d2      	uxtb	r2, r2
 8014b96:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8014b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b9a:	330e      	adds	r3, #14
 8014b9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014b9e:	b292      	uxth	r2, r2
 8014ba0:	4611      	mov	r1, r2
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f7fc ff17 	bl	80119d6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8014ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014baa:	3310      	adds	r3, #16
 8014bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014bae:	b2d2      	uxtb	r2, r2
 8014bb0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8014bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb4:	f103 0211 	add.w	r2, r3, #17
 8014bb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014bbc:	2b03      	cmp	r3, #3
 8014bbe:	d002      	beq.n	8014bc6 <f_mkfs+0x46a>
 8014bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	e000      	b.n	8014bc8 <f_mkfs+0x46c>
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	4619      	mov	r1, r3
 8014bca:	4610      	mov	r0, r2
 8014bcc:	f7fc ff03 	bl	80119d6 <st_word>
		if (sz_vol < 0x10000) {
 8014bd0:	693b      	ldr	r3, [r7, #16]
 8014bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014bd6:	d208      	bcs.n	8014bea <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8014bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bda:	3313      	adds	r3, #19
 8014bdc:	693a      	ldr	r2, [r7, #16]
 8014bde:	b292      	uxth	r2, r2
 8014be0:	4611      	mov	r1, r2
 8014be2:	4618      	mov	r0, r3
 8014be4:	f7fc fef7 	bl	80119d6 <st_word>
 8014be8:	e006      	b.n	8014bf8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8014bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bec:	3320      	adds	r3, #32
 8014bee:	693a      	ldr	r2, [r7, #16]
 8014bf0:	4611      	mov	r1, r2
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7fc ff0a 	bl	8011a0c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8014bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bfa:	3315      	adds	r3, #21
 8014bfc:	22f8      	movs	r2, #248	; 0xf8
 8014bfe:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8014c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c02:	3318      	adds	r3, #24
 8014c04:	213f      	movs	r1, #63	; 0x3f
 8014c06:	4618      	mov	r0, r3
 8014c08:	f7fc fee5 	bl	80119d6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8014c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c0e:	331a      	adds	r3, #26
 8014c10:	21ff      	movs	r1, #255	; 0xff
 8014c12:	4618      	mov	r0, r3
 8014c14:	f7fc fedf 	bl	80119d6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8014c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c1a:	331c      	adds	r3, #28
 8014c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f7fc fef4 	bl	8011a0c <st_dword>
		if (fmt == FS_FAT32) {
 8014c24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014c28:	2b03      	cmp	r3, #3
 8014c2a:	d131      	bne.n	8014c90 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8014c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c2e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8014c32:	f7f7 fb73 	bl	800c31c <get_fattime>
 8014c36:	4603      	mov	r3, r0
 8014c38:	4619      	mov	r1, r3
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	f7fc fee6 	bl	8011a0c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8014c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c42:	3324      	adds	r3, #36	; 0x24
 8014c44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7fc fee0 	bl	8011a0c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8014c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c4e:	332c      	adds	r3, #44	; 0x2c
 8014c50:	2102      	movs	r1, #2
 8014c52:	4618      	mov	r0, r3
 8014c54:	f7fc feda 	bl	8011a0c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8014c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c5a:	3330      	adds	r3, #48	; 0x30
 8014c5c:	2101      	movs	r1, #1
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7fc feb9 	bl	80119d6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8014c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c66:	3332      	adds	r3, #50	; 0x32
 8014c68:	2106      	movs	r1, #6
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7fc feb3 	bl	80119d6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8014c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c72:	3340      	adds	r3, #64	; 0x40
 8014c74:	2280      	movs	r2, #128	; 0x80
 8014c76:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8014c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c7a:	3342      	adds	r3, #66	; 0x42
 8014c7c:	2229      	movs	r2, #41	; 0x29
 8014c7e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8014c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c82:	3347      	adds	r3, #71	; 0x47
 8014c84:	2213      	movs	r2, #19
 8014c86:	497a      	ldr	r1, [pc, #488]	; (8014e70 <f_mkfs+0x714>)
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f7fc feeb 	bl	8011a64 <mem_cpy>
 8014c8e:	e020      	b.n	8014cd2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8014c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c92:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8014c96:	f7f7 fb41 	bl	800c31c <get_fattime>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	4619      	mov	r1, r3
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f7fc feb4 	bl	8011a0c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8014ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca6:	3316      	adds	r3, #22
 8014ca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014caa:	b292      	uxth	r2, r2
 8014cac:	4611      	mov	r1, r2
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7fc fe91 	bl	80119d6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8014cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cb6:	3324      	adds	r3, #36	; 0x24
 8014cb8:	2280      	movs	r2, #128	; 0x80
 8014cba:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8014cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cbe:	3326      	adds	r3, #38	; 0x26
 8014cc0:	2229      	movs	r2, #41	; 0x29
 8014cc2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8014cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cc6:	332b      	adds	r3, #43	; 0x2b
 8014cc8:	2213      	movs	r2, #19
 8014cca:	496a      	ldr	r1, [pc, #424]	; (8014e74 <f_mkfs+0x718>)
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7fc fec9 	bl	8011a64 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8014cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014cd8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f7fc fe7a 	bl	80119d6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8014ce2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014cec:	f7fc fdfa 	bl	80118e4 <disk_write>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d001      	beq.n	8014cfa <f_mkfs+0x59e>
 8014cf6:	2301      	movs	r3, #1
 8014cf8:	e156      	b.n	8014fa8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8014cfa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014cfe:	2b03      	cmp	r3, #3
 8014d00:	d140      	bne.n	8014d84 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8014d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d04:	1d9a      	adds	r2, r3, #6
 8014d06:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014d0e:	f7fc fde9 	bl	80118e4 <disk_write>
			mem_set(buf, 0, ss);
 8014d12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014d14:	461a      	mov	r2, r3
 8014d16:	2100      	movs	r1, #0
 8014d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d1a:	f7fc fec4 	bl	8011aa6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8014d1e:	4956      	ldr	r1, [pc, #344]	; (8014e78 <f_mkfs+0x71c>)
 8014d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d22:	f7fc fe73 	bl	8011a0c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8014d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d28:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014d2c:	4953      	ldr	r1, [pc, #332]	; (8014e7c <f_mkfs+0x720>)
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f7fc fe6c 	bl	8011a0c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8014d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d36:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8014d3a:	6a3b      	ldr	r3, [r7, #32]
 8014d3c:	3b01      	subs	r3, #1
 8014d3e:	4619      	mov	r1, r3
 8014d40:	4610      	mov	r0, r2
 8014d42:	f7fc fe63 	bl	8011a0c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8014d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d48:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014d4c:	2102      	movs	r1, #2
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7fc fe5c 	bl	8011a0c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8014d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014d5a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7fc fe39 	bl	80119d6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8014d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d66:	1dda      	adds	r2, r3, #7
 8014d68:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014d70:	f7fc fdb8 	bl	80118e4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8014d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d76:	1c5a      	adds	r2, r3, #1
 8014d78:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014d80:	f7fc fdb0 	bl	80118e4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8014d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d86:	2100      	movs	r1, #0
 8014d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d8a:	f7fc fe8c 	bl	8011aa6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8014d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d90:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014d92:	2300      	movs	r3, #0
 8014d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8014d96:	e04b      	b.n	8014e30 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8014d98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014d9c:	2b03      	cmp	r3, #3
 8014d9e:	d113      	bne.n	8014dc8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8014da0:	f06f 0107 	mvn.w	r1, #7
 8014da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014da6:	f7fc fe31 	bl	8011a0c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8014daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dac:	3304      	adds	r3, #4
 8014dae:	f04f 31ff 	mov.w	r1, #4294967295
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7fc fe2a 	bl	8011a0c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8014db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dba:	3308      	adds	r3, #8
 8014dbc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7fc fe23 	bl	8011a0c <st_dword>
 8014dc6:	e00b      	b.n	8014de0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8014dc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014dcc:	2b01      	cmp	r3, #1
 8014dce:	d101      	bne.n	8014dd4 <f_mkfs+0x678>
 8014dd0:	4b2b      	ldr	r3, [pc, #172]	; (8014e80 <f_mkfs+0x724>)
 8014dd2:	e001      	b.n	8014dd8 <f_mkfs+0x67c>
 8014dd4:	f06f 0307 	mvn.w	r3, #7
 8014dd8:	4619      	mov	r1, r3
 8014dda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ddc:	f7fc fe16 	bl	8011a0c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8014de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014de2:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8014de4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014de8:	4293      	cmp	r3, r2
 8014dea:	bf28      	it	cs
 8014dec:	4613      	movcs	r3, r2
 8014dee:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014df0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8014df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014df6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014dfa:	f7fc fd73 	bl	80118e4 <disk_write>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d001      	beq.n	8014e08 <f_mkfs+0x6ac>
 8014e04:	2301      	movs	r3, #1
 8014e06:	e0cf      	b.n	8014fa8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8014e08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014e0a:	461a      	mov	r2, r3
 8014e0c:	2100      	movs	r1, #0
 8014e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e10:	f7fc fe49 	bl	8011aa6 <mem_set>
				sect += n; nsect -= n;
 8014e14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e18:	4413      	add	r3, r2
 8014e1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8014e1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e20:	1ad3      	subs	r3, r2, r3
 8014e22:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 8014e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d1dc      	bne.n	8014de4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8014e30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e34:	429a      	cmp	r2, r3
 8014e36:	d3af      	bcc.n	8014d98 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8014e38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014e3c:	2b03      	cmp	r3, #3
 8014e3e:	d101      	bne.n	8014e44 <f_mkfs+0x6e8>
 8014e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e42:	e000      	b.n	8014e46 <f_mkfs+0x6ea>
 8014e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e46:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8014e48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e4c:	4293      	cmp	r3, r2
 8014e4e:	bf28      	it	cs
 8014e50:	4613      	movcs	r3, r2
 8014e52:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014e54:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8014e58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014e5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014e5e:	f7fc fd41 	bl	80118e4 <disk_write>
 8014e62:	4603      	mov	r3, r0
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d00d      	beq.n	8014e84 <f_mkfs+0x728>
 8014e68:	2301      	movs	r3, #1
 8014e6a:	e09d      	b.n	8014fa8 <f_mkfs+0x84c>
 8014e6c:	0801681c 	.word	0x0801681c
 8014e70:	08016828 	.word	0x08016828
 8014e74:	0801683c 	.word	0x0801683c
 8014e78:	41615252 	.word	0x41615252
 8014e7c:	61417272 	.word	0x61417272
 8014e80:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8014e84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e88:	4413      	add	r3, r2
 8014e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8014e8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e90:	1ad3      	subs	r3, r2, r3
 8014e92:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 8014e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d1d6      	bne.n	8014e48 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8014e9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014e9e:	2b03      	cmp	r3, #3
 8014ea0:	d103      	bne.n	8014eaa <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8014ea2:	230c      	movs	r3, #12
 8014ea4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8014ea8:	e010      	b.n	8014ecc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8014eaa:	693b      	ldr	r3, [r7, #16]
 8014eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014eb0:	d303      	bcc.n	8014eba <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8014eb2:	2306      	movs	r3, #6
 8014eb4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8014eb8:	e008      	b.n	8014ecc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8014eba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014ebe:	2b02      	cmp	r3, #2
 8014ec0:	d101      	bne.n	8014ec6 <f_mkfs+0x76a>
 8014ec2:	2304      	movs	r3, #4
 8014ec4:	e000      	b.n	8014ec8 <f_mkfs+0x76c>
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8014ecc:	7afb      	ldrb	r3, [r7, #11]
 8014ece:	f003 0308 	and.w	r3, r3, #8
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d15b      	bne.n	8014f8e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8014ed6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014ed8:	461a      	mov	r2, r3
 8014eda:	2100      	movs	r1, #0
 8014edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ede:	f7fc fde2 	bl	8011aa6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8014ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014ee8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7fc fd72 	bl	80119d6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8014ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014ef8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8014efa:	69bb      	ldr	r3, [r7, #24]
 8014efc:	2200      	movs	r2, #0
 8014efe:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8014f00:	69bb      	ldr	r3, [r7, #24]
 8014f02:	3301      	adds	r3, #1
 8014f04:	2201      	movs	r2, #1
 8014f06:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8014f08:	69bb      	ldr	r3, [r7, #24]
 8014f0a:	3302      	adds	r3, #2
 8014f0c:	2201      	movs	r2, #1
 8014f0e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8014f10:	69bb      	ldr	r3, [r7, #24]
 8014f12:	3303      	adds	r3, #3
 8014f14:	2200      	movs	r2, #0
 8014f16:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8014f18:	69bb      	ldr	r3, [r7, #24]
 8014f1a:	3304      	adds	r3, #4
 8014f1c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8014f20:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8014f22:	693a      	ldr	r2, [r7, #16]
 8014f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f26:	441a      	add	r2, r3
 8014f28:	4b21      	ldr	r3, [pc, #132]	; (8014fb0 <f_mkfs+0x854>)
 8014f2a:	fba3 1302 	umull	r1, r3, r3, r2
 8014f2e:	1ad2      	subs	r2, r2, r3
 8014f30:	0852      	lsrs	r2, r2, #1
 8014f32:	4413      	add	r3, r2
 8014f34:	0b5b      	lsrs	r3, r3, #13
 8014f36:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 8014f38:	69bb      	ldr	r3, [r7, #24]
 8014f3a:	3305      	adds	r3, #5
 8014f3c:	22fe      	movs	r2, #254	; 0xfe
 8014f3e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8014f40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f42:	089b      	lsrs	r3, r3, #2
 8014f44:	b2da      	uxtb	r2, r3
 8014f46:	69bb      	ldr	r3, [r7, #24]
 8014f48:	3306      	adds	r3, #6
 8014f4a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8014f4e:	b2d2      	uxtb	r2, r2
 8014f50:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8014f52:	69bb      	ldr	r3, [r7, #24]
 8014f54:	3307      	adds	r3, #7
 8014f56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014f58:	b2d2      	uxtb	r2, r2
 8014f5a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8014f5c:	69bb      	ldr	r3, [r7, #24]
 8014f5e:	3308      	adds	r3, #8
 8014f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7fc fd52 	bl	8011a0c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8014f68:	69bb      	ldr	r3, [r7, #24]
 8014f6a:	330c      	adds	r3, #12
 8014f6c:	693a      	ldr	r2, [r7, #16]
 8014f6e:	4611      	mov	r1, r2
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7fc fd4b 	bl	8011a0c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8014f76:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8014f7a:	2301      	movs	r3, #1
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014f80:	f7fc fcb0 	bl	80118e4 <disk_write>
 8014f84:	4603      	mov	r3, r0
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d001      	beq.n	8014f8e <f_mkfs+0x832>
 8014f8a:	2301      	movs	r3, #1
 8014f8c:	e00c      	b.n	8014fa8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8014f8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014f92:	2200      	movs	r2, #0
 8014f94:	2100      	movs	r1, #0
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7fc fcc4 	bl	8011924 <disk_ioctl>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d001      	beq.n	8014fa6 <f_mkfs+0x84a>
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	e000      	b.n	8014fa8 <f_mkfs+0x84c>

	return FR_OK;
 8014fa6:	2300      	movs	r3, #0
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3774      	adds	r7, #116	; 0x74
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd90      	pop	{r4, r7, pc}
 8014fb0:	0515565b 	.word	0x0515565b

08014fb4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b084      	sub	sp, #16
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
 8014fbc:	460b      	mov	r3, r1
 8014fbe:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8014fc0:	78fb      	ldrb	r3, [r7, #3]
 8014fc2:	2b0a      	cmp	r3, #10
 8014fc4:	d103      	bne.n	8014fce <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8014fc6:	210d      	movs	r1, #13
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f7ff fff3 	bl	8014fb4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	685b      	ldr	r3, [r3, #4]
 8014fd2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	db25      	blt.n	8015026 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	1c5a      	adds	r2, r3, #1
 8014fde:	60fa      	str	r2, [r7, #12]
 8014fe0:	687a      	ldr	r2, [r7, #4]
 8014fe2:	4413      	add	r3, r2
 8014fe4:	78fa      	ldrb	r2, [r7, #3]
 8014fe6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	2b3c      	cmp	r3, #60	; 0x3c
 8014fec:	dd12      	ble.n	8015014 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6818      	ldr	r0, [r3, #0]
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f103 010c 	add.w	r1, r3, #12
 8014ff8:	68fa      	ldr	r2, [r7, #12]
 8014ffa:	f107 0308 	add.w	r3, r7, #8
 8014ffe:	f7fe ff99 	bl	8013f34 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8015002:	68ba      	ldr	r2, [r7, #8]
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	429a      	cmp	r2, r3
 8015008:	d101      	bne.n	801500e <putc_bfd+0x5a>
 801500a:	2300      	movs	r3, #0
 801500c:	e001      	b.n	8015012 <putc_bfd+0x5e>
 801500e:	f04f 33ff 	mov.w	r3, #4294967295
 8015012:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	68fa      	ldr	r2, [r7, #12]
 8015018:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	689b      	ldr	r3, [r3, #8]
 801501e:	1c5a      	adds	r2, r3, #1
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	609a      	str	r2, [r3, #8]
 8015024:	e000      	b.n	8015028 <putc_bfd+0x74>
	if (i < 0) return;
 8015026:	bf00      	nop
}
 8015028:	3710      	adds	r7, #16
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}

0801502e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801502e:	b580      	push	{r7, lr}
 8015030:	b084      	sub	sp, #16
 8015032:	af00      	add	r7, sp, #0
 8015034:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	685b      	ldr	r3, [r3, #4]
 801503a:	2b00      	cmp	r3, #0
 801503c:	db17      	blt.n	801506e <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	6818      	ldr	r0, [r3, #0]
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f103 010c 	add.w	r1, r3, #12
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	685b      	ldr	r3, [r3, #4]
 801504c:	461a      	mov	r2, r3
 801504e:	f107 030c 	add.w	r3, r7, #12
 8015052:	f7fe ff6f 	bl	8013f34 <f_write>
 8015056:	4603      	mov	r3, r0
 8015058:	2b00      	cmp	r3, #0
 801505a:	d108      	bne.n	801506e <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	685b      	ldr	r3, [r3, #4]
 8015060:	461a      	mov	r2, r3
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	429a      	cmp	r2, r3
 8015066:	d102      	bne.n	801506e <putc_flush+0x40>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	689b      	ldr	r3, [r3, #8]
 801506c:	e001      	b.n	8015072 <putc_flush+0x44>
	return EOF;
 801506e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015072:	4618      	mov	r0, r3
 8015074:	3710      	adds	r7, #16
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}

0801507a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801507a:	b480      	push	{r7}
 801507c:	b083      	sub	sp, #12
 801507e:	af00      	add	r7, sp, #0
 8015080:	6078      	str	r0, [r7, #4]
 8015082:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	683a      	ldr	r2, [r7, #0]
 8015088:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	2200      	movs	r2, #0
 801508e:	605a      	str	r2, [r3, #4]
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	685a      	ldr	r2, [r3, #4]
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	609a      	str	r2, [r3, #8]
}
 8015098:	bf00      	nop
 801509a:	370c      	adds	r7, #12
 801509c:	46bd      	mov	sp, r7
 801509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a2:	4770      	bx	lr

080150a4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b096      	sub	sp, #88	; 0x58
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80150ae:	f107 030c 	add.w	r3, r7, #12
 80150b2:	6839      	ldr	r1, [r7, #0]
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7ff ffe0 	bl	801507a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80150ba:	e009      	b.n	80150d0 <f_puts+0x2c>
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	1c5a      	adds	r2, r3, #1
 80150c0:	607a      	str	r2, [r7, #4]
 80150c2:	781a      	ldrb	r2, [r3, #0]
 80150c4:	f107 030c 	add.w	r3, r7, #12
 80150c8:	4611      	mov	r1, r2
 80150ca:	4618      	mov	r0, r3
 80150cc:	f7ff ff72 	bl	8014fb4 <putc_bfd>
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	781b      	ldrb	r3, [r3, #0]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d1f1      	bne.n	80150bc <f_puts+0x18>
	return putc_flush(&pb);
 80150d8:	f107 030c 	add.w	r3, r7, #12
 80150dc:	4618      	mov	r0, r3
 80150de:	f7ff ffa6 	bl	801502e <putc_flush>
 80150e2:	4603      	mov	r3, r0
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	3758      	adds	r7, #88	; 0x58
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80150ec:	b480      	push	{r7}
 80150ee:	b087      	sub	sp, #28
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	60f8      	str	r0, [r7, #12]
 80150f4:	60b9      	str	r1, [r7, #8]
 80150f6:	4613      	mov	r3, r2
 80150f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80150fa:	2301      	movs	r3, #1
 80150fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80150fe:	2300      	movs	r3, #0
 8015100:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015102:	4b1f      	ldr	r3, [pc, #124]	; (8015180 <FATFS_LinkDriverEx+0x94>)
 8015104:	7a5b      	ldrb	r3, [r3, #9]
 8015106:	b2db      	uxtb	r3, r3
 8015108:	2b00      	cmp	r3, #0
 801510a:	d131      	bne.n	8015170 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801510c:	4b1c      	ldr	r3, [pc, #112]	; (8015180 <FATFS_LinkDriverEx+0x94>)
 801510e:	7a5b      	ldrb	r3, [r3, #9]
 8015110:	b2db      	uxtb	r3, r3
 8015112:	461a      	mov	r2, r3
 8015114:	4b1a      	ldr	r3, [pc, #104]	; (8015180 <FATFS_LinkDriverEx+0x94>)
 8015116:	2100      	movs	r1, #0
 8015118:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801511a:	4b19      	ldr	r3, [pc, #100]	; (8015180 <FATFS_LinkDriverEx+0x94>)
 801511c:	7a5b      	ldrb	r3, [r3, #9]
 801511e:	b2db      	uxtb	r3, r3
 8015120:	4a17      	ldr	r2, [pc, #92]	; (8015180 <FATFS_LinkDriverEx+0x94>)
 8015122:	009b      	lsls	r3, r3, #2
 8015124:	4413      	add	r3, r2
 8015126:	68fa      	ldr	r2, [r7, #12]
 8015128:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801512a:	4b15      	ldr	r3, [pc, #84]	; (8015180 <FATFS_LinkDriverEx+0x94>)
 801512c:	7a5b      	ldrb	r3, [r3, #9]
 801512e:	b2db      	uxtb	r3, r3
 8015130:	461a      	mov	r2, r3
 8015132:	4b13      	ldr	r3, [pc, #76]	; (8015180 <FATFS_LinkDriverEx+0x94>)
 8015134:	4413      	add	r3, r2
 8015136:	79fa      	ldrb	r2, [r7, #7]
 8015138:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801513a:	4b11      	ldr	r3, [pc, #68]	; (8015180 <FATFS_LinkDriverEx+0x94>)
 801513c:	7a5b      	ldrb	r3, [r3, #9]
 801513e:	b2db      	uxtb	r3, r3
 8015140:	1c5a      	adds	r2, r3, #1
 8015142:	b2d1      	uxtb	r1, r2
 8015144:	4a0e      	ldr	r2, [pc, #56]	; (8015180 <FATFS_LinkDriverEx+0x94>)
 8015146:	7251      	strb	r1, [r2, #9]
 8015148:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801514a:	7dbb      	ldrb	r3, [r7, #22]
 801514c:	3330      	adds	r3, #48	; 0x30
 801514e:	b2da      	uxtb	r2, r3
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	3301      	adds	r3, #1
 8015158:	223a      	movs	r2, #58	; 0x3a
 801515a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	3302      	adds	r3, #2
 8015160:	222f      	movs	r2, #47	; 0x2f
 8015162:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	3303      	adds	r3, #3
 8015168:	2200      	movs	r2, #0
 801516a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801516c:	2300      	movs	r3, #0
 801516e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015170:	7dfb      	ldrb	r3, [r7, #23]
}
 8015172:	4618      	mov	r0, r3
 8015174:	371c      	adds	r7, #28
 8015176:	46bd      	mov	sp, r7
 8015178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517c:	4770      	bx	lr
 801517e:	bf00      	nop
 8015180:	20000e14 	.word	0x20000e14

08015184 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b082      	sub	sp, #8
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
 801518c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801518e:	2200      	movs	r2, #0
 8015190:	6839      	ldr	r1, [r7, #0]
 8015192:	6878      	ldr	r0, [r7, #4]
 8015194:	f7ff ffaa 	bl	80150ec <FATFS_LinkDriverEx>
 8015198:	4603      	mov	r3, r0
}
 801519a:	4618      	mov	r0, r3
 801519c:	3708      	adds	r7, #8
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}
	...

080151a4 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 80151a4:	b480      	push	{r7}
 80151a6:	b085      	sub	sp, #20
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
 80151ac:	460b      	mov	r3, r1
 80151ae:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80151b0:	2300      	movs	r3, #0
 80151b2:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80151b4:	2301      	movs	r3, #1
 80151b6:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80151b8:	4b15      	ldr	r3, [pc, #84]	; (8015210 <FATFS_UnLinkDriverEx+0x6c>)
 80151ba:	7a5b      	ldrb	r3, [r3, #9]
 80151bc:	b2db      	uxtb	r3, r3
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d01e      	beq.n	8015200 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	781b      	ldrb	r3, [r3, #0]
 80151c6:	3b30      	subs	r3, #48	; 0x30
 80151c8:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 80151ca:	7bbb      	ldrb	r3, [r7, #14]
 80151cc:	4a10      	ldr	r2, [pc, #64]	; (8015210 <FATFS_UnLinkDriverEx+0x6c>)
 80151ce:	009b      	lsls	r3, r3, #2
 80151d0:	4413      	add	r3, r2
 80151d2:	685b      	ldr	r3, [r3, #4]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d013      	beq.n	8015200 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80151d8:	7bbb      	ldrb	r3, [r7, #14]
 80151da:	4a0d      	ldr	r2, [pc, #52]	; (8015210 <FATFS_UnLinkDriverEx+0x6c>)
 80151dc:	009b      	lsls	r3, r3, #2
 80151de:	4413      	add	r3, r2
 80151e0:	2200      	movs	r2, #0
 80151e2:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 80151e4:	7bbb      	ldrb	r3, [r7, #14]
 80151e6:	4a0a      	ldr	r2, [pc, #40]	; (8015210 <FATFS_UnLinkDriverEx+0x6c>)
 80151e8:	4413      	add	r3, r2
 80151ea:	2200      	movs	r2, #0
 80151ec:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 80151ee:	4b08      	ldr	r3, [pc, #32]	; (8015210 <FATFS_UnLinkDriverEx+0x6c>)
 80151f0:	7a5b      	ldrb	r3, [r3, #9]
 80151f2:	b2db      	uxtb	r3, r3
 80151f4:	3b01      	subs	r3, #1
 80151f6:	b2da      	uxtb	r2, r3
 80151f8:	4b05      	ldr	r3, [pc, #20]	; (8015210 <FATFS_UnLinkDriverEx+0x6c>)
 80151fa:	725a      	strb	r2, [r3, #9]
      ret = 0;
 80151fc:	2300      	movs	r3, #0
 80151fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8015200:	7bfb      	ldrb	r3, [r7, #15]
}
 8015202:	4618      	mov	r0, r3
 8015204:	3714      	adds	r7, #20
 8015206:	46bd      	mov	sp, r7
 8015208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520c:	4770      	bx	lr
 801520e:	bf00      	nop
 8015210:	20000e14 	.word	0x20000e14

08015214 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b082      	sub	sp, #8
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 801521c:	2100      	movs	r1, #0
 801521e:	6878      	ldr	r0, [r7, #4]
 8015220:	f7ff ffc0 	bl	80151a4 <FATFS_UnLinkDriverEx>
 8015224:	4603      	mov	r3, r0
}
 8015226:	4618      	mov	r0, r3
 8015228:	3708      	adds	r7, #8
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}
	...

08015230 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015230:	b480      	push	{r7}
 8015232:	b085      	sub	sp, #20
 8015234:	af00      	add	r7, sp, #0
 8015236:	4603      	mov	r3, r0
 8015238:	6039      	str	r1, [r7, #0]
 801523a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801523c:	88fb      	ldrh	r3, [r7, #6]
 801523e:	2b7f      	cmp	r3, #127	; 0x7f
 8015240:	d802      	bhi.n	8015248 <ff_convert+0x18>
		c = chr;
 8015242:	88fb      	ldrh	r3, [r7, #6]
 8015244:	81fb      	strh	r3, [r7, #14]
 8015246:	e025      	b.n	8015294 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d00b      	beq.n	8015266 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801524e:	88fb      	ldrh	r3, [r7, #6]
 8015250:	2bff      	cmp	r3, #255	; 0xff
 8015252:	d805      	bhi.n	8015260 <ff_convert+0x30>
 8015254:	88fb      	ldrh	r3, [r7, #6]
 8015256:	3b80      	subs	r3, #128	; 0x80
 8015258:	4a12      	ldr	r2, [pc, #72]	; (80152a4 <ff_convert+0x74>)
 801525a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801525e:	e000      	b.n	8015262 <ff_convert+0x32>
 8015260:	2300      	movs	r3, #0
 8015262:	81fb      	strh	r3, [r7, #14]
 8015264:	e016      	b.n	8015294 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8015266:	2300      	movs	r3, #0
 8015268:	81fb      	strh	r3, [r7, #14]
 801526a:	e009      	b.n	8015280 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801526c:	89fb      	ldrh	r3, [r7, #14]
 801526e:	4a0d      	ldr	r2, [pc, #52]	; (80152a4 <ff_convert+0x74>)
 8015270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015274:	88fa      	ldrh	r2, [r7, #6]
 8015276:	429a      	cmp	r2, r3
 8015278:	d006      	beq.n	8015288 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801527a:	89fb      	ldrh	r3, [r7, #14]
 801527c:	3301      	adds	r3, #1
 801527e:	81fb      	strh	r3, [r7, #14]
 8015280:	89fb      	ldrh	r3, [r7, #14]
 8015282:	2b7f      	cmp	r3, #127	; 0x7f
 8015284:	d9f2      	bls.n	801526c <ff_convert+0x3c>
 8015286:	e000      	b.n	801528a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015288:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801528a:	89fb      	ldrh	r3, [r7, #14]
 801528c:	3380      	adds	r3, #128	; 0x80
 801528e:	b29b      	uxth	r3, r3
 8015290:	b2db      	uxtb	r3, r3
 8015292:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015294:	89fb      	ldrh	r3, [r7, #14]
}
 8015296:	4618      	mov	r0, r3
 8015298:	3714      	adds	r7, #20
 801529a:	46bd      	mov	sp, r7
 801529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a0:	4770      	bx	lr
 80152a2:	bf00      	nop
 80152a4:	0801a588 	.word	0x0801a588

080152a8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80152a8:	b480      	push	{r7}
 80152aa:	b087      	sub	sp, #28
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	4603      	mov	r3, r0
 80152b0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80152b2:	88fb      	ldrh	r3, [r7, #6]
 80152b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80152b8:	d201      	bcs.n	80152be <ff_wtoupper+0x16>
 80152ba:	4b3e      	ldr	r3, [pc, #248]	; (80153b4 <ff_wtoupper+0x10c>)
 80152bc:	e000      	b.n	80152c0 <ff_wtoupper+0x18>
 80152be:	4b3e      	ldr	r3, [pc, #248]	; (80153b8 <ff_wtoupper+0x110>)
 80152c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80152c2:	697b      	ldr	r3, [r7, #20]
 80152c4:	1c9a      	adds	r2, r3, #2
 80152c6:	617a      	str	r2, [r7, #20]
 80152c8:	881b      	ldrh	r3, [r3, #0]
 80152ca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80152cc:	8a7b      	ldrh	r3, [r7, #18]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d068      	beq.n	80153a4 <ff_wtoupper+0xfc>
 80152d2:	88fa      	ldrh	r2, [r7, #6]
 80152d4:	8a7b      	ldrh	r3, [r7, #18]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d364      	bcc.n	80153a4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	1c9a      	adds	r2, r3, #2
 80152de:	617a      	str	r2, [r7, #20]
 80152e0:	881b      	ldrh	r3, [r3, #0]
 80152e2:	823b      	strh	r3, [r7, #16]
 80152e4:	8a3b      	ldrh	r3, [r7, #16]
 80152e6:	0a1b      	lsrs	r3, r3, #8
 80152e8:	81fb      	strh	r3, [r7, #14]
 80152ea:	8a3b      	ldrh	r3, [r7, #16]
 80152ec:	b2db      	uxtb	r3, r3
 80152ee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80152f0:	88fa      	ldrh	r2, [r7, #6]
 80152f2:	8a79      	ldrh	r1, [r7, #18]
 80152f4:	8a3b      	ldrh	r3, [r7, #16]
 80152f6:	440b      	add	r3, r1
 80152f8:	429a      	cmp	r2, r3
 80152fa:	da49      	bge.n	8015390 <ff_wtoupper+0xe8>
			switch (cmd) {
 80152fc:	89fb      	ldrh	r3, [r7, #14]
 80152fe:	2b08      	cmp	r3, #8
 8015300:	d84f      	bhi.n	80153a2 <ff_wtoupper+0xfa>
 8015302:	a201      	add	r2, pc, #4	; (adr r2, 8015308 <ff_wtoupper+0x60>)
 8015304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015308:	0801532d 	.word	0x0801532d
 801530c:	0801533f 	.word	0x0801533f
 8015310:	08015355 	.word	0x08015355
 8015314:	0801535d 	.word	0x0801535d
 8015318:	08015365 	.word	0x08015365
 801531c:	0801536d 	.word	0x0801536d
 8015320:	08015375 	.word	0x08015375
 8015324:	0801537d 	.word	0x0801537d
 8015328:	08015385 	.word	0x08015385
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801532c:	88fa      	ldrh	r2, [r7, #6]
 801532e:	8a7b      	ldrh	r3, [r7, #18]
 8015330:	1ad3      	subs	r3, r2, r3
 8015332:	005b      	lsls	r3, r3, #1
 8015334:	697a      	ldr	r2, [r7, #20]
 8015336:	4413      	add	r3, r2
 8015338:	881b      	ldrh	r3, [r3, #0]
 801533a:	80fb      	strh	r3, [r7, #6]
 801533c:	e027      	b.n	801538e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801533e:	88fa      	ldrh	r2, [r7, #6]
 8015340:	8a7b      	ldrh	r3, [r7, #18]
 8015342:	1ad3      	subs	r3, r2, r3
 8015344:	b29b      	uxth	r3, r3
 8015346:	f003 0301 	and.w	r3, r3, #1
 801534a:	b29b      	uxth	r3, r3
 801534c:	88fa      	ldrh	r2, [r7, #6]
 801534e:	1ad3      	subs	r3, r2, r3
 8015350:	80fb      	strh	r3, [r7, #6]
 8015352:	e01c      	b.n	801538e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8015354:	88fb      	ldrh	r3, [r7, #6]
 8015356:	3b10      	subs	r3, #16
 8015358:	80fb      	strh	r3, [r7, #6]
 801535a:	e018      	b.n	801538e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801535c:	88fb      	ldrh	r3, [r7, #6]
 801535e:	3b20      	subs	r3, #32
 8015360:	80fb      	strh	r3, [r7, #6]
 8015362:	e014      	b.n	801538e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015364:	88fb      	ldrh	r3, [r7, #6]
 8015366:	3b30      	subs	r3, #48	; 0x30
 8015368:	80fb      	strh	r3, [r7, #6]
 801536a:	e010      	b.n	801538e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801536c:	88fb      	ldrh	r3, [r7, #6]
 801536e:	3b1a      	subs	r3, #26
 8015370:	80fb      	strh	r3, [r7, #6]
 8015372:	e00c      	b.n	801538e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015374:	88fb      	ldrh	r3, [r7, #6]
 8015376:	3308      	adds	r3, #8
 8015378:	80fb      	strh	r3, [r7, #6]
 801537a:	e008      	b.n	801538e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801537c:	88fb      	ldrh	r3, [r7, #6]
 801537e:	3b50      	subs	r3, #80	; 0x50
 8015380:	80fb      	strh	r3, [r7, #6]
 8015382:	e004      	b.n	801538e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015384:	88fb      	ldrh	r3, [r7, #6]
 8015386:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801538a:	80fb      	strh	r3, [r7, #6]
 801538c:	bf00      	nop
			}
			break;
 801538e:	e008      	b.n	80153a2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015390:	89fb      	ldrh	r3, [r7, #14]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d195      	bne.n	80152c2 <ff_wtoupper+0x1a>
 8015396:	8a3b      	ldrh	r3, [r7, #16]
 8015398:	005b      	lsls	r3, r3, #1
 801539a:	697a      	ldr	r2, [r7, #20]
 801539c:	4413      	add	r3, r2
 801539e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80153a0:	e78f      	b.n	80152c2 <ff_wtoupper+0x1a>
			break;
 80153a2:	bf00      	nop
	}

	return chr;
 80153a4:	88fb      	ldrh	r3, [r7, #6]
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	371c      	adds	r7, #28
 80153aa:	46bd      	mov	sp, r7
 80153ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b0:	4770      	bx	lr
 80153b2:	bf00      	nop
 80153b4:	0801a688 	.word	0x0801a688
 80153b8:	0801a87c 	.word	0x0801a87c

080153bc <rxCliInput>:

	cliInitialized = true;
	return CLI_OK;
}

void rxCliInput(uint8_t* Buf, uint32_t *Len) {
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	6039      	str	r1, [r7, #0]
	if (Buf[0] != 13){					// Ignore Return Character
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	781b      	ldrb	r3, [r3, #0]
 80153ca:	2b0d      	cmp	r3, #13
 80153cc:	d00d      	beq.n	80153ea <rxCliInput+0x2e>
		usbCli.rxFlag = true;			/* Set the flag for the parser				*/
 80153ce:	4b09      	ldr	r3, [pc, #36]	; (80153f4 <rxCliInput+0x38>)
 80153d0:	2201      	movs	r2, #1
 80153d2:	719a      	strb	r2, [r3, #6]
		usbCli.cmd_len = Len[0];		/* Store the command length for the parser	*/
 80153d4:	683b      	ldr	r3, [r7, #0]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	4a06      	ldr	r2, [pc, #24]	; (80153f4 <rxCliInput+0x38>)
 80153da:	6093      	str	r3, [r2, #8]

		// Copy the Received String to the Buffer in the structure
		memcpy(usbCli.cmd_buffer, Buf, usbCli.cmd_len);
 80153dc:	4b05      	ldr	r3, [pc, #20]	; (80153f4 <rxCliInput+0x38>)
 80153de:	689b      	ldr	r3, [r3, #8]
 80153e0:	461a      	mov	r2, r3
 80153e2:	6879      	ldr	r1, [r7, #4]
 80153e4:	4804      	ldr	r0, [pc, #16]	; (80153f8 <rxCliInput+0x3c>)
 80153e6:	f000 fd44 	bl	8015e72 <memcpy>
	}
}
 80153ea:	bf00      	nop
 80153ec:	3708      	adds	r7, #8
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bd80      	pop	{r7, pc}
 80153f2:	bf00      	nop
 80153f4:	20000e20 	.word	0x20000e20
 80153f8:	20000e2c 	.word	0x20000e2c

080153fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015400:	2200      	movs	r2, #0
 8015402:	4912      	ldr	r1, [pc, #72]	; (801544c <MX_USB_DEVICE_Init+0x50>)
 8015404:	4812      	ldr	r0, [pc, #72]	; (8015450 <MX_USB_DEVICE_Init+0x54>)
 8015406:	f7fb f9b2 	bl	801076e <USBD_Init>
 801540a:	4603      	mov	r3, r0
 801540c:	2b00      	cmp	r3, #0
 801540e:	d001      	beq.n	8015414 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015410:	f7ef f900 	bl	8004614 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015414:	490f      	ldr	r1, [pc, #60]	; (8015454 <MX_USB_DEVICE_Init+0x58>)
 8015416:	480e      	ldr	r0, [pc, #56]	; (8015450 <MX_USB_DEVICE_Init+0x54>)
 8015418:	f7fb f9d4 	bl	80107c4 <USBD_RegisterClass>
 801541c:	4603      	mov	r3, r0
 801541e:	2b00      	cmp	r3, #0
 8015420:	d001      	beq.n	8015426 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015422:	f7ef f8f7 	bl	8004614 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015426:	490c      	ldr	r1, [pc, #48]	; (8015458 <MX_USB_DEVICE_Init+0x5c>)
 8015428:	4809      	ldr	r0, [pc, #36]	; (8015450 <MX_USB_DEVICE_Init+0x54>)
 801542a:	f7fb f931 	bl	8010690 <USBD_CDC_RegisterInterface>
 801542e:	4603      	mov	r3, r0
 8015430:	2b00      	cmp	r3, #0
 8015432:	d001      	beq.n	8015438 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015434:	f7ef f8ee 	bl	8004614 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015438:	4805      	ldr	r0, [pc, #20]	; (8015450 <MX_USB_DEVICE_Init+0x54>)
 801543a:	f7fb f9dd 	bl	80107f8 <USBD_Start>
 801543e:	4603      	mov	r3, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	d001      	beq.n	8015448 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015444:	f7ef f8e6 	bl	8004614 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015448:	bf00      	nop
 801544a:	bd80      	pop	{r7, pc}
 801544c:	20000184 	.word	0x20000184
 8015450:	20001798 	.word	0x20001798
 8015454:	20000068 	.word	0x20000068
 8015458:	20000174 	.word	0x20000174

0801545c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015460:	2200      	movs	r2, #0
 8015462:	4905      	ldr	r1, [pc, #20]	; (8015478 <CDC_Init_FS+0x1c>)
 8015464:	4805      	ldr	r0, [pc, #20]	; (801547c <CDC_Init_FS+0x20>)
 8015466:	f7fb f92a 	bl	80106be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801546a:	4905      	ldr	r1, [pc, #20]	; (8015480 <CDC_Init_FS+0x24>)
 801546c:	4803      	ldr	r0, [pc, #12]	; (801547c <CDC_Init_FS+0x20>)
 801546e:	f7fb f940 	bl	80106f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015472:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015474:	4618      	mov	r0, r3
 8015476:	bd80      	pop	{r7, pc}
 8015478:	20001e34 	.word	0x20001e34
 801547c:	20001798 	.word	0x20001798
 8015480:	20001a34 	.word	0x20001a34

08015484 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015484:	b480      	push	{r7}
 8015486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015488:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801548a:	4618      	mov	r0, r3
 801548c:	46bd      	mov	sp, r7
 801548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015492:	4770      	bx	lr

08015494 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015494:	b480      	push	{r7}
 8015496:	b083      	sub	sp, #12
 8015498:	af00      	add	r7, sp, #0
 801549a:	4603      	mov	r3, r0
 801549c:	6039      	str	r1, [r7, #0]
 801549e:	71fb      	strb	r3, [r7, #7]
 80154a0:	4613      	mov	r3, r2
 80154a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80154a4:	79fb      	ldrb	r3, [r7, #7]
 80154a6:	2b23      	cmp	r3, #35	; 0x23
 80154a8:	d85c      	bhi.n	8015564 <CDC_Control_FS+0xd0>
 80154aa:	a201      	add	r2, pc, #4	; (adr r2, 80154b0 <CDC_Control_FS+0x1c>)
 80154ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154b0:	08015565 	.word	0x08015565
 80154b4:	08015565 	.word	0x08015565
 80154b8:	08015565 	.word	0x08015565
 80154bc:	08015565 	.word	0x08015565
 80154c0:	08015565 	.word	0x08015565
 80154c4:	08015565 	.word	0x08015565
 80154c8:	08015565 	.word	0x08015565
 80154cc:	08015565 	.word	0x08015565
 80154d0:	08015565 	.word	0x08015565
 80154d4:	08015565 	.word	0x08015565
 80154d8:	08015565 	.word	0x08015565
 80154dc:	08015565 	.word	0x08015565
 80154e0:	08015565 	.word	0x08015565
 80154e4:	08015565 	.word	0x08015565
 80154e8:	08015565 	.word	0x08015565
 80154ec:	08015565 	.word	0x08015565
 80154f0:	08015565 	.word	0x08015565
 80154f4:	08015565 	.word	0x08015565
 80154f8:	08015565 	.word	0x08015565
 80154fc:	08015565 	.word	0x08015565
 8015500:	08015565 	.word	0x08015565
 8015504:	08015565 	.word	0x08015565
 8015508:	08015565 	.word	0x08015565
 801550c:	08015565 	.word	0x08015565
 8015510:	08015565 	.word	0x08015565
 8015514:	08015565 	.word	0x08015565
 8015518:	08015565 	.word	0x08015565
 801551c:	08015565 	.word	0x08015565
 8015520:	08015565 	.word	0x08015565
 8015524:	08015565 	.word	0x08015565
 8015528:	08015565 	.word	0x08015565
 801552c:	08015565 	.word	0x08015565
 8015530:	08015541 	.word	0x08015541
 8015534:	08015553 	.word	0x08015553
 8015538:	08015565 	.word	0x08015565
 801553c:	08015565 	.word	0x08015565
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) );
 8015540:	4b0c      	ldr	r3, [pc, #48]	; (8015574 <CDC_Control_FS+0xe0>)
 8015542:	683a      	ldr	r2, [r7, #0]
 8015544:	6810      	ldr	r0, [r2, #0]
 8015546:	6018      	str	r0, [r3, #0]
 8015548:	8891      	ldrh	r1, [r2, #4]
 801554a:	7992      	ldrb	r2, [r2, #6]
 801554c:	8099      	strh	r1, [r3, #4]
 801554e:	719a      	strb	r2, [r3, #6]
    break;
 8015550:	e009      	b.n	8015566 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) );
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	4a07      	ldr	r2, [pc, #28]	; (8015574 <CDC_Control_FS+0xe0>)
 8015556:	6810      	ldr	r0, [r2, #0]
 8015558:	6018      	str	r0, [r3, #0]
 801555a:	8891      	ldrh	r1, [r2, #4]
 801555c:	7992      	ldrb	r2, [r2, #6]
 801555e:	8099      	strh	r1, [r3, #4]
 8015560:	719a      	strb	r2, [r3, #6]
    break;
 8015562:	e000      	b.n	8015566 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015564:	bf00      	nop
  }

  return (USBD_OK);
 8015566:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015568:	4618      	mov	r0, r3
 801556a:	370c      	adds	r7, #12
 801556c:	46bd      	mov	sp, r7
 801556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015572:	4770      	bx	lr
 8015574:	2000016c 	.word	0x2000016c

08015578 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015582:	6879      	ldr	r1, [r7, #4]
 8015584:	4807      	ldr	r0, [pc, #28]	; (80155a4 <CDC_Receive_FS+0x2c>)
 8015586:	f7fb f8b4 	bl	80106f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801558a:	4806      	ldr	r0, [pc, #24]	; (80155a4 <CDC_Receive_FS+0x2c>)
 801558c:	f7fb f8c5 	bl	801071a <USBD_CDC_ReceivePacket>

  // Feed the buffer through to the CLI parser
  rxCliInput(Buf, Len);
 8015590:	6839      	ldr	r1, [r7, #0]
 8015592:	6878      	ldr	r0, [r7, #4]
 8015594:	f7ff ff12 	bl	80153bc <rxCliInput>

  return (USBD_OK);
 8015598:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801559a:	4618      	mov	r0, r3
 801559c:	3708      	adds	r7, #8
 801559e:	46bd      	mov	sp, r7
 80155a0:	bd80      	pop	{r7, pc}
 80155a2:	bf00      	nop
 80155a4:	20001798 	.word	0x20001798

080155a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155a8:	b480      	push	{r7}
 80155aa:	b083      	sub	sp, #12
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	4603      	mov	r3, r0
 80155b0:	6039      	str	r1, [r7, #0]
 80155b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	2212      	movs	r2, #18
 80155b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80155ba:	4b03      	ldr	r3, [pc, #12]	; (80155c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80155bc:	4618      	mov	r0, r3
 80155be:	370c      	adds	r7, #12
 80155c0:	46bd      	mov	sp, r7
 80155c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c6:	4770      	bx	lr
 80155c8:	200001a0 	.word	0x200001a0

080155cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155cc:	b480      	push	{r7}
 80155ce:	b083      	sub	sp, #12
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	4603      	mov	r3, r0
 80155d4:	6039      	str	r1, [r7, #0]
 80155d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	2204      	movs	r2, #4
 80155dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80155de:	4b03      	ldr	r3, [pc, #12]	; (80155ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80155e0:	4618      	mov	r0, r3
 80155e2:	370c      	adds	r7, #12
 80155e4:	46bd      	mov	sp, r7
 80155e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ea:	4770      	bx	lr
 80155ec:	200001b4 	.word	0x200001b4

080155f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b082      	sub	sp, #8
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	4603      	mov	r3, r0
 80155f8:	6039      	str	r1, [r7, #0]
 80155fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80155fc:	79fb      	ldrb	r3, [r7, #7]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d105      	bne.n	801560e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015602:	683a      	ldr	r2, [r7, #0]
 8015604:	4907      	ldr	r1, [pc, #28]	; (8015624 <USBD_FS_ProductStrDescriptor+0x34>)
 8015606:	4808      	ldr	r0, [pc, #32]	; (8015628 <USBD_FS_ProductStrDescriptor+0x38>)
 8015608:	f7fc f82e 	bl	8011668 <USBD_GetString>
 801560c:	e004      	b.n	8015618 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801560e:	683a      	ldr	r2, [r7, #0]
 8015610:	4904      	ldr	r1, [pc, #16]	; (8015624 <USBD_FS_ProductStrDescriptor+0x34>)
 8015612:	4805      	ldr	r0, [pc, #20]	; (8015628 <USBD_FS_ProductStrDescriptor+0x38>)
 8015614:	f7fc f828 	bl	8011668 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015618:	4b02      	ldr	r3, [pc, #8]	; (8015624 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801561a:	4618      	mov	r0, r3
 801561c:	3708      	adds	r7, #8
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}
 8015622:	bf00      	nop
 8015624:	20002234 	.word	0x20002234
 8015628:	08016850 	.word	0x08016850

0801562c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b082      	sub	sp, #8
 8015630:	af00      	add	r7, sp, #0
 8015632:	4603      	mov	r3, r0
 8015634:	6039      	str	r1, [r7, #0]
 8015636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015638:	683a      	ldr	r2, [r7, #0]
 801563a:	4904      	ldr	r1, [pc, #16]	; (801564c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801563c:	4804      	ldr	r0, [pc, #16]	; (8015650 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801563e:	f7fc f813 	bl	8011668 <USBD_GetString>
  return USBD_StrDesc;
 8015642:	4b02      	ldr	r3, [pc, #8]	; (801564c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015644:	4618      	mov	r0, r3
 8015646:	3708      	adds	r7, #8
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}
 801564c:	20002234 	.word	0x20002234
 8015650:	08016868 	.word	0x08016868

08015654 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b082      	sub	sp, #8
 8015658:	af00      	add	r7, sp, #0
 801565a:	4603      	mov	r3, r0
 801565c:	6039      	str	r1, [r7, #0]
 801565e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	221a      	movs	r2, #26
 8015664:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015666:	f000 f843 	bl	80156f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801566a:	4b02      	ldr	r3, [pc, #8]	; (8015674 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801566c:	4618      	mov	r0, r3
 801566e:	3708      	adds	r7, #8
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}
 8015674:	200001b8 	.word	0x200001b8

08015678 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b082      	sub	sp, #8
 801567c:	af00      	add	r7, sp, #0
 801567e:	4603      	mov	r3, r0
 8015680:	6039      	str	r1, [r7, #0]
 8015682:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015684:	79fb      	ldrb	r3, [r7, #7]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d105      	bne.n	8015696 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801568a:	683a      	ldr	r2, [r7, #0]
 801568c:	4907      	ldr	r1, [pc, #28]	; (80156ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801568e:	4808      	ldr	r0, [pc, #32]	; (80156b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015690:	f7fb ffea 	bl	8011668 <USBD_GetString>
 8015694:	e004      	b.n	80156a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015696:	683a      	ldr	r2, [r7, #0]
 8015698:	4904      	ldr	r1, [pc, #16]	; (80156ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801569a:	4805      	ldr	r0, [pc, #20]	; (80156b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801569c:	f7fb ffe4 	bl	8011668 <USBD_GetString>
  }
  return USBD_StrDesc;
 80156a0:	4b02      	ldr	r3, [pc, #8]	; (80156ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	3708      	adds	r7, #8
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
 80156aa:	bf00      	nop
 80156ac:	20002234 	.word	0x20002234
 80156b0:	0801687c 	.word	0x0801687c

080156b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	4603      	mov	r3, r0
 80156bc:	6039      	str	r1, [r7, #0]
 80156be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80156c0:	79fb      	ldrb	r3, [r7, #7]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d105      	bne.n	80156d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80156c6:	683a      	ldr	r2, [r7, #0]
 80156c8:	4907      	ldr	r1, [pc, #28]	; (80156e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80156ca:	4808      	ldr	r0, [pc, #32]	; (80156ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80156cc:	f7fb ffcc 	bl	8011668 <USBD_GetString>
 80156d0:	e004      	b.n	80156dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80156d2:	683a      	ldr	r2, [r7, #0]
 80156d4:	4904      	ldr	r1, [pc, #16]	; (80156e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80156d6:	4805      	ldr	r0, [pc, #20]	; (80156ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80156d8:	f7fb ffc6 	bl	8011668 <USBD_GetString>
  }
  return USBD_StrDesc;
 80156dc:	4b02      	ldr	r3, [pc, #8]	; (80156e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80156de:	4618      	mov	r0, r3
 80156e0:	3708      	adds	r7, #8
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}
 80156e6:	bf00      	nop
 80156e8:	20002234 	.word	0x20002234
 80156ec:	08016888 	.word	0x08016888

080156f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b084      	sub	sp, #16
 80156f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80156f6:	4b0f      	ldr	r3, [pc, #60]	; (8015734 <Get_SerialNum+0x44>)
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80156fc:	4b0e      	ldr	r3, [pc, #56]	; (8015738 <Get_SerialNum+0x48>)
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015702:	4b0e      	ldr	r3, [pc, #56]	; (801573c <Get_SerialNum+0x4c>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015708:	68fa      	ldr	r2, [r7, #12]
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	4413      	add	r3, r2
 801570e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d009      	beq.n	801572a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015716:	2208      	movs	r2, #8
 8015718:	4909      	ldr	r1, [pc, #36]	; (8015740 <Get_SerialNum+0x50>)
 801571a:	68f8      	ldr	r0, [r7, #12]
 801571c:	f000 f814 	bl	8015748 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015720:	2204      	movs	r2, #4
 8015722:	4908      	ldr	r1, [pc, #32]	; (8015744 <Get_SerialNum+0x54>)
 8015724:	68b8      	ldr	r0, [r7, #8]
 8015726:	f000 f80f 	bl	8015748 <IntToUnicode>
  }
}
 801572a:	bf00      	nop
 801572c:	3710      	adds	r7, #16
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	1fff7a10 	.word	0x1fff7a10
 8015738:	1fff7a14 	.word	0x1fff7a14
 801573c:	1fff7a18 	.word	0x1fff7a18
 8015740:	200001ba 	.word	0x200001ba
 8015744:	200001ca 	.word	0x200001ca

08015748 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015748:	b480      	push	{r7}
 801574a:	b087      	sub	sp, #28
 801574c:	af00      	add	r7, sp, #0
 801574e:	60f8      	str	r0, [r7, #12]
 8015750:	60b9      	str	r1, [r7, #8]
 8015752:	4613      	mov	r3, r2
 8015754:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015756:	2300      	movs	r3, #0
 8015758:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801575a:	2300      	movs	r3, #0
 801575c:	75fb      	strb	r3, [r7, #23]
 801575e:	e027      	b.n	80157b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	0f1b      	lsrs	r3, r3, #28
 8015764:	2b09      	cmp	r3, #9
 8015766:	d80b      	bhi.n	8015780 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	0f1b      	lsrs	r3, r3, #28
 801576c:	b2da      	uxtb	r2, r3
 801576e:	7dfb      	ldrb	r3, [r7, #23]
 8015770:	005b      	lsls	r3, r3, #1
 8015772:	4619      	mov	r1, r3
 8015774:	68bb      	ldr	r3, [r7, #8]
 8015776:	440b      	add	r3, r1
 8015778:	3230      	adds	r2, #48	; 0x30
 801577a:	b2d2      	uxtb	r2, r2
 801577c:	701a      	strb	r2, [r3, #0]
 801577e:	e00a      	b.n	8015796 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	0f1b      	lsrs	r3, r3, #28
 8015784:	b2da      	uxtb	r2, r3
 8015786:	7dfb      	ldrb	r3, [r7, #23]
 8015788:	005b      	lsls	r3, r3, #1
 801578a:	4619      	mov	r1, r3
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	440b      	add	r3, r1
 8015790:	3237      	adds	r2, #55	; 0x37
 8015792:	b2d2      	uxtb	r2, r2
 8015794:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	011b      	lsls	r3, r3, #4
 801579a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801579c:	7dfb      	ldrb	r3, [r7, #23]
 801579e:	005b      	lsls	r3, r3, #1
 80157a0:	3301      	adds	r3, #1
 80157a2:	68ba      	ldr	r2, [r7, #8]
 80157a4:	4413      	add	r3, r2
 80157a6:	2200      	movs	r2, #0
 80157a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80157aa:	7dfb      	ldrb	r3, [r7, #23]
 80157ac:	3301      	adds	r3, #1
 80157ae:	75fb      	strb	r3, [r7, #23]
 80157b0:	7dfa      	ldrb	r2, [r7, #23]
 80157b2:	79fb      	ldrb	r3, [r7, #7]
 80157b4:	429a      	cmp	r2, r3
 80157b6:	d3d3      	bcc.n	8015760 <IntToUnicode+0x18>
  }
}
 80157b8:	bf00      	nop
 80157ba:	371c      	adds	r7, #28
 80157bc:	46bd      	mov	sp, r7
 80157be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c2:	4770      	bx	lr

080157c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b08a      	sub	sp, #40	; 0x28
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80157cc:	f107 0314 	add.w	r3, r7, #20
 80157d0:	2200      	movs	r2, #0
 80157d2:	601a      	str	r2, [r3, #0]
 80157d4:	605a      	str	r2, [r3, #4]
 80157d6:	609a      	str	r2, [r3, #8]
 80157d8:	60da      	str	r2, [r3, #12]
 80157da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80157e4:	d152      	bne.n	801588c <HAL_PCD_MspInit+0xc8>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80157e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80157ea:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80157ec:	2301      	movs	r3, #1
 80157ee:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80157f0:	2300      	movs	r3, #0
 80157f2:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80157f4:	2302      	movs	r3, #2
 80157f6:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80157f8:	f107 0314 	add.w	r3, r7, #20
 80157fc:	4619      	mov	r1, r3
 80157fe:	4825      	ldr	r0, [pc, #148]	; (8015894 <HAL_PCD_MspInit+0xd0>)
 8015800:	f7ef fc94 	bl	800512c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8015804:	2200      	movs	r2, #0
 8015806:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801580a:	4822      	ldr	r0, [pc, #136]	; (8015894 <HAL_PCD_MspInit+0xd0>)
 801580c:	f7ef fe28 	bl	8005460 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8015810:	2005      	movs	r0, #5
 8015812:	f7ef fb35 	bl	8004e80 <HAL_Delay>

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015816:	2300      	movs	r3, #0
 8015818:	613b      	str	r3, [r7, #16]
 801581a:	4b1f      	ldr	r3, [pc, #124]	; (8015898 <HAL_PCD_MspInit+0xd4>)
 801581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801581e:	4a1e      	ldr	r2, [pc, #120]	; (8015898 <HAL_PCD_MspInit+0xd4>)
 8015820:	f043 0301 	orr.w	r3, r3, #1
 8015824:	6313      	str	r3, [r2, #48]	; 0x30
 8015826:	4b1c      	ldr	r3, [pc, #112]	; (8015898 <HAL_PCD_MspInit+0xd4>)
 8015828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801582a:	f003 0301 	and.w	r3, r3, #1
 801582e:	613b      	str	r3, [r7, #16]
 8015830:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015832:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015838:	2302      	movs	r3, #2
 801583a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801583c:	2300      	movs	r3, #0
 801583e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015840:	2303      	movs	r3, #3
 8015842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015844:	230a      	movs	r3, #10
 8015846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015848:	f107 0314 	add.w	r3, r7, #20
 801584c:	4619      	mov	r1, r3
 801584e:	4811      	ldr	r0, [pc, #68]	; (8015894 <HAL_PCD_MspInit+0xd0>)
 8015850:	f7ef fc6c 	bl	800512c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015854:	4b10      	ldr	r3, [pc, #64]	; (8015898 <HAL_PCD_MspInit+0xd4>)
 8015856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015858:	4a0f      	ldr	r2, [pc, #60]	; (8015898 <HAL_PCD_MspInit+0xd4>)
 801585a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801585e:	6353      	str	r3, [r2, #52]	; 0x34
 8015860:	2300      	movs	r3, #0
 8015862:	60fb      	str	r3, [r7, #12]
 8015864:	4b0c      	ldr	r3, [pc, #48]	; (8015898 <HAL_PCD_MspInit+0xd4>)
 8015866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015868:	4a0b      	ldr	r2, [pc, #44]	; (8015898 <HAL_PCD_MspInit+0xd4>)
 801586a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801586e:	6453      	str	r3, [r2, #68]	; 0x44
 8015870:	4b09      	ldr	r3, [pc, #36]	; (8015898 <HAL_PCD_MspInit+0xd4>)
 8015872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015878:	60fb      	str	r3, [r7, #12]
 801587a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801587c:	2200      	movs	r2, #0
 801587e:	2100      	movs	r1, #0
 8015880:	2043      	movs	r0, #67	; 0x43
 8015882:	f7ef fbfa 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015886:	2043      	movs	r0, #67	; 0x43
 8015888:	f7ef fc13 	bl	80050b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801588c:	bf00      	nop
 801588e:	3728      	adds	r7, #40	; 0x28
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}
 8015894:	40020000 	.word	0x40020000
 8015898:	40023800 	.word	0x40023800

0801589c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b082      	sub	sp, #8
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80158b0:	4619      	mov	r1, r3
 80158b2:	4610      	mov	r0, r2
 80158b4:	f7fa ffe9 	bl	801088a <USBD_LL_SetupStage>
}
 80158b8:	bf00      	nop
 80158ba:	3708      	adds	r7, #8
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}

080158c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b082      	sub	sp, #8
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
 80158c8:	460b      	mov	r3, r1
 80158ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80158d2:	78fa      	ldrb	r2, [r7, #3]
 80158d4:	6879      	ldr	r1, [r7, #4]
 80158d6:	4613      	mov	r3, r2
 80158d8:	00db      	lsls	r3, r3, #3
 80158da:	1a9b      	subs	r3, r3, r2
 80158dc:	009b      	lsls	r3, r3, #2
 80158de:	440b      	add	r3, r1
 80158e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80158e4:	681a      	ldr	r2, [r3, #0]
 80158e6:	78fb      	ldrb	r3, [r7, #3]
 80158e8:	4619      	mov	r1, r3
 80158ea:	f7fb f819 	bl	8010920 <USBD_LL_DataOutStage>
}
 80158ee:	bf00      	nop
 80158f0:	3708      	adds	r7, #8
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd80      	pop	{r7, pc}

080158f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158f6:	b580      	push	{r7, lr}
 80158f8:	b082      	sub	sp, #8
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]
 80158fe:	460b      	mov	r3, r1
 8015900:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015908:	78fa      	ldrb	r2, [r7, #3]
 801590a:	6879      	ldr	r1, [r7, #4]
 801590c:	4613      	mov	r3, r2
 801590e:	00db      	lsls	r3, r3, #3
 8015910:	1a9b      	subs	r3, r3, r2
 8015912:	009b      	lsls	r3, r3, #2
 8015914:	440b      	add	r3, r1
 8015916:	3348      	adds	r3, #72	; 0x48
 8015918:	681a      	ldr	r2, [r3, #0]
 801591a:	78fb      	ldrb	r3, [r7, #3]
 801591c:	4619      	mov	r1, r3
 801591e:	f7fb f870 	bl	8010a02 <USBD_LL_DataInStage>
}
 8015922:	bf00      	nop
 8015924:	3708      	adds	r7, #8
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}

0801592a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801592a:	b580      	push	{r7, lr}
 801592c:	b082      	sub	sp, #8
 801592e:	af00      	add	r7, sp, #0
 8015930:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015938:	4618      	mov	r0, r3
 801593a:	f7fb f97e 	bl	8010c3a <USBD_LL_SOF>
}
 801593e:	bf00      	nop
 8015940:	3708      	adds	r7, #8
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}

08015946 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8015946:	b580      	push	{r7, lr}
 8015948:	b084      	sub	sp, #16
 801594a:	af00      	add	r7, sp, #0
 801594c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801594e:	2301      	movs	r3, #1
 8015950:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	68db      	ldr	r3, [r3, #12]
 8015956:	2b02      	cmp	r3, #2
 8015958:	d001      	beq.n	801595e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801595a:	f7ee fe5b 	bl	8004614 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015964:	7bfa      	ldrb	r2, [r7, #15]
 8015966:	4611      	mov	r1, r2
 8015968:	4618      	mov	r0, r3
 801596a:	f7fb f930 	bl	8010bce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015974:	4618      	mov	r0, r3
 8015976:	f7fb f8e9 	bl	8010b4c <USBD_LL_Reset>
}
 801597a:	bf00      	nop
 801597c:	3710      	adds	r7, #16
 801597e:	46bd      	mov	sp, r7
 8015980:	bd80      	pop	{r7, pc}
	...

08015984 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b082      	sub	sp, #8
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015992:	4618      	mov	r0, r3
 8015994:	f7fb f92b 	bl	8010bee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	6812      	ldr	r2, [r2, #0]
 80159a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80159aa:	f043 0301 	orr.w	r3, r3, #1
 80159ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	6a1b      	ldr	r3, [r3, #32]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d005      	beq.n	80159c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80159b8:	4b04      	ldr	r3, [pc, #16]	; (80159cc <HAL_PCD_SuspendCallback+0x48>)
 80159ba:	691b      	ldr	r3, [r3, #16]
 80159bc:	4a03      	ldr	r2, [pc, #12]	; (80159cc <HAL_PCD_SuspendCallback+0x48>)
 80159be:	f043 0306 	orr.w	r3, r3, #6
 80159c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80159c4:	bf00      	nop
 80159c6:	3708      	adds	r7, #8
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}
 80159cc:	e000ed00 	.word	0xe000ed00

080159d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b082      	sub	sp, #8
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80159de:	4618      	mov	r0, r3
 80159e0:	f7fb f91a 	bl	8010c18 <USBD_LL_Resume>
}
 80159e4:	bf00      	nop
 80159e6:	3708      	adds	r7, #8
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bd80      	pop	{r7, pc}

080159ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b082      	sub	sp, #8
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
 80159f4:	460b      	mov	r3, r1
 80159f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80159fe:	78fa      	ldrb	r2, [r7, #3]
 8015a00:	4611      	mov	r1, r2
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7fb f940 	bl	8010c88 <USBD_LL_IsoOUTIncomplete>
}
 8015a08:	bf00      	nop
 8015a0a:	3708      	adds	r7, #8
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}

08015a10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b082      	sub	sp, #8
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
 8015a18:	460b      	mov	r3, r1
 8015a1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a22:	78fa      	ldrb	r2, [r7, #3]
 8015a24:	4611      	mov	r1, r2
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7fb f921 	bl	8010c6e <USBD_LL_IsoINIncomplete>
}
 8015a2c:	bf00      	nop
 8015a2e:	3708      	adds	r7, #8
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}

08015a34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b082      	sub	sp, #8
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7fb f92d 	bl	8010ca2 <USBD_LL_DevConnected>
}
 8015a48:	bf00      	nop
 8015a4a:	3708      	adds	r7, #8
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}

08015a50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b082      	sub	sp, #8
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f7fb f92a 	bl	8010cb8 <USBD_LL_DevDisconnected>
}
 8015a64:	bf00      	nop
 8015a66:	3708      	adds	r7, #8
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd80      	pop	{r7, pc}

08015a6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b082      	sub	sp, #8
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	781b      	ldrb	r3, [r3, #0]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d13c      	bne.n	8015af6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015a7c:	4a20      	ldr	r2, [pc, #128]	; (8015b00 <USBD_LL_Init+0x94>)
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	4a1e      	ldr	r2, [pc, #120]	; (8015b00 <USBD_LL_Init+0x94>)
 8015a88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015a8c:	4b1c      	ldr	r3, [pc, #112]	; (8015b00 <USBD_LL_Init+0x94>)
 8015a8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015a92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015a94:	4b1a      	ldr	r3, [pc, #104]	; (8015b00 <USBD_LL_Init+0x94>)
 8015a96:	2204      	movs	r2, #4
 8015a98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015a9a:	4b19      	ldr	r3, [pc, #100]	; (8015b00 <USBD_LL_Init+0x94>)
 8015a9c:	2202      	movs	r2, #2
 8015a9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015aa0:	4b17      	ldr	r3, [pc, #92]	; (8015b00 <USBD_LL_Init+0x94>)
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015aa6:	4b16      	ldr	r3, [pc, #88]	; (8015b00 <USBD_LL_Init+0x94>)
 8015aa8:	2202      	movs	r2, #2
 8015aaa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015aac:	4b14      	ldr	r3, [pc, #80]	; (8015b00 <USBD_LL_Init+0x94>)
 8015aae:	2200      	movs	r2, #0
 8015ab0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015ab2:	4b13      	ldr	r3, [pc, #76]	; (8015b00 <USBD_LL_Init+0x94>)
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015ab8:	4b11      	ldr	r3, [pc, #68]	; (8015b00 <USBD_LL_Init+0x94>)
 8015aba:	2200      	movs	r2, #0
 8015abc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015abe:	4b10      	ldr	r3, [pc, #64]	; (8015b00 <USBD_LL_Init+0x94>)
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015ac4:	4b0e      	ldr	r3, [pc, #56]	; (8015b00 <USBD_LL_Init+0x94>)
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015aca:	480d      	ldr	r0, [pc, #52]	; (8015b00 <USBD_LL_Init+0x94>)
 8015acc:	f7f0 fae6 	bl	800609c <HAL_PCD_Init>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d001      	beq.n	8015ada <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015ad6:	f7ee fd9d 	bl	8004614 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015ada:	2180      	movs	r1, #128	; 0x80
 8015adc:	4808      	ldr	r0, [pc, #32]	; (8015b00 <USBD_LL_Init+0x94>)
 8015ade:	f7f1 fc4a 	bl	8007376 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015ae2:	2240      	movs	r2, #64	; 0x40
 8015ae4:	2100      	movs	r1, #0
 8015ae6:	4806      	ldr	r0, [pc, #24]	; (8015b00 <USBD_LL_Init+0x94>)
 8015ae8:	f7f1 fbfe 	bl	80072e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015aec:	2280      	movs	r2, #128	; 0x80
 8015aee:	2101      	movs	r1, #1
 8015af0:	4803      	ldr	r0, [pc, #12]	; (8015b00 <USBD_LL_Init+0x94>)
 8015af2:	f7f1 fbf9 	bl	80072e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015af6:	2300      	movs	r3, #0
}
 8015af8:	4618      	mov	r0, r3
 8015afa:	3708      	adds	r7, #8
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd80      	pop	{r7, pc}
 8015b00:	20002434 	.word	0x20002434

08015b04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b084      	sub	sp, #16
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b10:	2300      	movs	r3, #0
 8015b12:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7f0 fbdb 	bl	80062d6 <HAL_PCD_Start>
 8015b20:	4603      	mov	r3, r0
 8015b22:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8015b24:	7bfb      	ldrb	r3, [r7, #15]
 8015b26:	4618      	mov	r0, r3
 8015b28:	f000 f92e 	bl	8015d88 <USBD_Get_USB_Status>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3710      	adds	r7, #16
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}

08015b3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015b3a:	b580      	push	{r7, lr}
 8015b3c:	b084      	sub	sp, #16
 8015b3e:	af00      	add	r7, sp, #0
 8015b40:	6078      	str	r0, [r7, #4]
 8015b42:	4608      	mov	r0, r1
 8015b44:	4611      	mov	r1, r2
 8015b46:	461a      	mov	r2, r3
 8015b48:	4603      	mov	r3, r0
 8015b4a:	70fb      	strb	r3, [r7, #3]
 8015b4c:	460b      	mov	r3, r1
 8015b4e:	70bb      	strb	r3, [r7, #2]
 8015b50:	4613      	mov	r3, r2
 8015b52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b54:	2300      	movs	r3, #0
 8015b56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8015b62:	78bb      	ldrb	r3, [r7, #2]
 8015b64:	883a      	ldrh	r2, [r7, #0]
 8015b66:	78f9      	ldrb	r1, [r7, #3]
 8015b68:	f7f0 ffb0 	bl	8006acc <HAL_PCD_EP_Open>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b70:	7bfb      	ldrb	r3, [r7, #15]
 8015b72:	4618      	mov	r0, r3
 8015b74:	f000 f908 	bl	8015d88 <USBD_Get_USB_Status>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3710      	adds	r7, #16
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}

08015b86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b86:	b580      	push	{r7, lr}
 8015b88:	b084      	sub	sp, #16
 8015b8a:	af00      	add	r7, sp, #0
 8015b8c:	6078      	str	r0, [r7, #4]
 8015b8e:	460b      	mov	r3, r1
 8015b90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b92:	2300      	movs	r3, #0
 8015b94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b96:	2300      	movs	r3, #0
 8015b98:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015ba0:	78fa      	ldrb	r2, [r7, #3]
 8015ba2:	4611      	mov	r1, r2
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7f0 fff9 	bl	8006b9c <HAL_PCD_EP_Close>
 8015baa:	4603      	mov	r3, r0
 8015bac:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8015bae:	7bfb      	ldrb	r3, [r7, #15]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f000 f8e9 	bl	8015d88 <USBD_Get_USB_Status>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8015bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3710      	adds	r7, #16
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}

08015bc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b084      	sub	sp, #16
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
 8015bcc:	460b      	mov	r3, r1
 8015bce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015bde:	78fa      	ldrb	r2, [r7, #3]
 8015be0:	4611      	mov	r1, r2
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7f1 f8d1 	bl	8006d8a <HAL_PCD_EP_SetStall>
 8015be8:	4603      	mov	r3, r0
 8015bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bec:	7bfb      	ldrb	r3, [r7, #15]
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f000 f8ca 	bl	8015d88 <USBD_Get_USB_Status>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3710      	adds	r7, #16
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}

08015c02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c02:	b580      	push	{r7, lr}
 8015c04:	b084      	sub	sp, #16
 8015c06:	af00      	add	r7, sp, #0
 8015c08:	6078      	str	r0, [r7, #4]
 8015c0a:	460b      	mov	r3, r1
 8015c0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c12:	2300      	movs	r3, #0
 8015c14:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015c1c:	78fa      	ldrb	r2, [r7, #3]
 8015c1e:	4611      	mov	r1, r2
 8015c20:	4618      	mov	r0, r3
 8015c22:	f7f1 f916 	bl	8006e52 <HAL_PCD_EP_ClrStall>
 8015c26:	4603      	mov	r3, r0
 8015c28:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8015c2a:	7bfb      	ldrb	r3, [r7, #15]
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	f000 f8ab 	bl	8015d88 <USBD_Get_USB_Status>
 8015c32:	4603      	mov	r3, r0
 8015c34:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8015c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c38:	4618      	mov	r0, r3
 8015c3a:	3710      	adds	r7, #16
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd80      	pop	{r7, pc}

08015c40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c40:	b480      	push	{r7}
 8015c42:	b085      	sub	sp, #20
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
 8015c48:	460b      	mov	r3, r1
 8015c4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015c52:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	da0b      	bge.n	8015c74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015c5c:	78fb      	ldrb	r3, [r7, #3]
 8015c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c62:	68f9      	ldr	r1, [r7, #12]
 8015c64:	4613      	mov	r3, r2
 8015c66:	00db      	lsls	r3, r3, #3
 8015c68:	1a9b      	subs	r3, r3, r2
 8015c6a:	009b      	lsls	r3, r3, #2
 8015c6c:	440b      	add	r3, r1
 8015c6e:	333e      	adds	r3, #62	; 0x3e
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	e00b      	b.n	8015c8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015c74:	78fb      	ldrb	r3, [r7, #3]
 8015c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c7a:	68f9      	ldr	r1, [r7, #12]
 8015c7c:	4613      	mov	r3, r2
 8015c7e:	00db      	lsls	r3, r3, #3
 8015c80:	1a9b      	subs	r3, r3, r2
 8015c82:	009b      	lsls	r3, r3, #2
 8015c84:	440b      	add	r3, r1
 8015c86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015c8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	3714      	adds	r7, #20
 8015c90:	46bd      	mov	sp, r7
 8015c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c96:	4770      	bx	lr

08015c98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b084      	sub	sp, #16
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
 8015ca0:	460b      	mov	r3, r1
 8015ca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015cb2:	78fa      	ldrb	r2, [r7, #3]
 8015cb4:	4611      	mov	r1, r2
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f7f0 fee3 	bl	8006a82 <HAL_PCD_SetAddress>
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cc0:	7bfb      	ldrb	r3, [r7, #15]
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f000 f860 	bl	8015d88 <USBD_Get_USB_Status>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015ccc:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cce:	4618      	mov	r0, r3
 8015cd0:	3710      	adds	r7, #16
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd80      	pop	{r7, pc}

08015cd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015cd6:	b580      	push	{r7, lr}
 8015cd8:	b086      	sub	sp, #24
 8015cda:	af00      	add	r7, sp, #0
 8015cdc:	60f8      	str	r0, [r7, #12]
 8015cde:	607a      	str	r2, [r7, #4]
 8015ce0:	461a      	mov	r2, r3
 8015ce2:	460b      	mov	r3, r1
 8015ce4:	72fb      	strb	r3, [r7, #11]
 8015ce6:	4613      	mov	r3, r2
 8015ce8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cea:	2300      	movs	r3, #0
 8015cec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8015cf8:	893b      	ldrh	r3, [r7, #8]
 8015cfa:	7af9      	ldrb	r1, [r7, #11]
 8015cfc:	687a      	ldr	r2, [r7, #4]
 8015cfe:	f7f0 fffa 	bl	8006cf6 <HAL_PCD_EP_Transmit>
 8015d02:	4603      	mov	r3, r0
 8015d04:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8015d06:	7dfb      	ldrb	r3, [r7, #23]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f000 f83d 	bl	8015d88 <USBD_Get_USB_Status>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8015d12:	7dbb      	ldrb	r3, [r7, #22]
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	3718      	adds	r7, #24
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}

08015d1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b086      	sub	sp, #24
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	60f8      	str	r0, [r7, #12]
 8015d24:	607a      	str	r2, [r7, #4]
 8015d26:	461a      	mov	r2, r3
 8015d28:	460b      	mov	r3, r1
 8015d2a:	72fb      	strb	r3, [r7, #11]
 8015d2c:	4613      	mov	r3, r2
 8015d2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d30:	2300      	movs	r3, #0
 8015d32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d34:	2300      	movs	r3, #0
 8015d36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8015d3e:	893b      	ldrh	r3, [r7, #8]
 8015d40:	7af9      	ldrb	r1, [r7, #11]
 8015d42:	687a      	ldr	r2, [r7, #4]
 8015d44:	f7f0 ff74 	bl	8006c30 <HAL_PCD_EP_Receive>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015d4c:	7dfb      	ldrb	r3, [r7, #23]
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f000 f81a 	bl	8015d88 <USBD_Get_USB_Status>
 8015d54:	4603      	mov	r3, r0
 8015d56:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8015d58:	7dbb      	ldrb	r3, [r7, #22]
}
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	3718      	adds	r7, #24
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd80      	pop	{r7, pc}

08015d62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d62:	b580      	push	{r7, lr}
 8015d64:	b082      	sub	sp, #8
 8015d66:	af00      	add	r7, sp, #0
 8015d68:	6078      	str	r0, [r7, #4]
 8015d6a:	460b      	mov	r3, r1
 8015d6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015d74:	78fa      	ldrb	r2, [r7, #3]
 8015d76:	4611      	mov	r1, r2
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f7f0 ffa4 	bl	8006cc6 <HAL_PCD_EP_GetRxCount>
 8015d7e:	4603      	mov	r3, r0
}
 8015d80:	4618      	mov	r0, r3
 8015d82:	3708      	adds	r7, #8
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}

08015d88 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015d88:	b480      	push	{r7}
 8015d8a:	b085      	sub	sp, #20
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	4603      	mov	r3, r0
 8015d90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d92:	2300      	movs	r3, #0
 8015d94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015d96:	79fb      	ldrb	r3, [r7, #7]
 8015d98:	2b03      	cmp	r3, #3
 8015d9a:	d817      	bhi.n	8015dcc <USBD_Get_USB_Status+0x44>
 8015d9c:	a201      	add	r2, pc, #4	; (adr r2, 8015da4 <USBD_Get_USB_Status+0x1c>)
 8015d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015da2:	bf00      	nop
 8015da4:	08015db5 	.word	0x08015db5
 8015da8:	08015dbb 	.word	0x08015dbb
 8015dac:	08015dc1 	.word	0x08015dc1
 8015db0:	08015dc7 	.word	0x08015dc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015db4:	2300      	movs	r3, #0
 8015db6:	73fb      	strb	r3, [r7, #15]
    break;
 8015db8:	e00b      	b.n	8015dd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015dba:	2302      	movs	r3, #2
 8015dbc:	73fb      	strb	r3, [r7, #15]
    break;
 8015dbe:	e008      	b.n	8015dd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8015dc4:	e005      	b.n	8015dd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015dc6:	2302      	movs	r3, #2
 8015dc8:	73fb      	strb	r3, [r7, #15]
    break;
 8015dca:	e002      	b.n	8015dd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015dcc:	2302      	movs	r3, #2
 8015dce:	73fb      	strb	r3, [r7, #15]
    break;
 8015dd0:	bf00      	nop
  }
  return usb_status;
 8015dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	3714      	adds	r7, #20
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dde:	4770      	bx	lr

08015de0 <__errno>:
 8015de0:	4b01      	ldr	r3, [pc, #4]	; (8015de8 <__errno+0x8>)
 8015de2:	6818      	ldr	r0, [r3, #0]
 8015de4:	4770      	bx	lr
 8015de6:	bf00      	nop
 8015de8:	200001d4 	.word	0x200001d4

08015dec <__libc_init_array>:
 8015dec:	b570      	push	{r4, r5, r6, lr}
 8015dee:	4e0d      	ldr	r6, [pc, #52]	; (8015e24 <__libc_init_array+0x38>)
 8015df0:	4c0d      	ldr	r4, [pc, #52]	; (8015e28 <__libc_init_array+0x3c>)
 8015df2:	1ba4      	subs	r4, r4, r6
 8015df4:	10a4      	asrs	r4, r4, #2
 8015df6:	2500      	movs	r5, #0
 8015df8:	42a5      	cmp	r5, r4
 8015dfa:	d109      	bne.n	8015e10 <__libc_init_array+0x24>
 8015dfc:	4e0b      	ldr	r6, [pc, #44]	; (8015e2c <__libc_init_array+0x40>)
 8015dfe:	4c0c      	ldr	r4, [pc, #48]	; (8015e30 <__libc_init_array+0x44>)
 8015e00:	f000 fc4e 	bl	80166a0 <_init>
 8015e04:	1ba4      	subs	r4, r4, r6
 8015e06:	10a4      	asrs	r4, r4, #2
 8015e08:	2500      	movs	r5, #0
 8015e0a:	42a5      	cmp	r5, r4
 8015e0c:	d105      	bne.n	8015e1a <__libc_init_array+0x2e>
 8015e0e:	bd70      	pop	{r4, r5, r6, pc}
 8015e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015e14:	4798      	blx	r3
 8015e16:	3501      	adds	r5, #1
 8015e18:	e7ee      	b.n	8015df8 <__libc_init_array+0xc>
 8015e1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015e1e:	4798      	blx	r3
 8015e20:	3501      	adds	r5, #1
 8015e22:	e7f2      	b.n	8015e0a <__libc_init_array+0x1e>
 8015e24:	0801a974 	.word	0x0801a974
 8015e28:	0801a974 	.word	0x0801a974
 8015e2c:	0801a974 	.word	0x0801a974
 8015e30:	0801a978 	.word	0x0801a978

08015e34 <malloc>:
 8015e34:	4b02      	ldr	r3, [pc, #8]	; (8015e40 <malloc+0xc>)
 8015e36:	4601      	mov	r1, r0
 8015e38:	6818      	ldr	r0, [r3, #0]
 8015e3a:	f000 b87b 	b.w	8015f34 <_malloc_r>
 8015e3e:	bf00      	nop
 8015e40:	200001d4 	.word	0x200001d4

08015e44 <free>:
 8015e44:	4b02      	ldr	r3, [pc, #8]	; (8015e50 <free+0xc>)
 8015e46:	4601      	mov	r1, r0
 8015e48:	6818      	ldr	r0, [r3, #0]
 8015e4a:	f000 b825 	b.w	8015e98 <_free_r>
 8015e4e:	bf00      	nop
 8015e50:	200001d4 	.word	0x200001d4

08015e54 <memcmp>:
 8015e54:	b530      	push	{r4, r5, lr}
 8015e56:	2400      	movs	r4, #0
 8015e58:	42a2      	cmp	r2, r4
 8015e5a:	d101      	bne.n	8015e60 <memcmp+0xc>
 8015e5c:	2000      	movs	r0, #0
 8015e5e:	e007      	b.n	8015e70 <memcmp+0x1c>
 8015e60:	5d03      	ldrb	r3, [r0, r4]
 8015e62:	3401      	adds	r4, #1
 8015e64:	190d      	adds	r5, r1, r4
 8015e66:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8015e6a:	42ab      	cmp	r3, r5
 8015e6c:	d0f4      	beq.n	8015e58 <memcmp+0x4>
 8015e6e:	1b58      	subs	r0, r3, r5
 8015e70:	bd30      	pop	{r4, r5, pc}

08015e72 <memcpy>:
 8015e72:	b510      	push	{r4, lr}
 8015e74:	1e43      	subs	r3, r0, #1
 8015e76:	440a      	add	r2, r1
 8015e78:	4291      	cmp	r1, r2
 8015e7a:	d100      	bne.n	8015e7e <memcpy+0xc>
 8015e7c:	bd10      	pop	{r4, pc}
 8015e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e86:	e7f7      	b.n	8015e78 <memcpy+0x6>

08015e88 <memset>:
 8015e88:	4402      	add	r2, r0
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	4293      	cmp	r3, r2
 8015e8e:	d100      	bne.n	8015e92 <memset+0xa>
 8015e90:	4770      	bx	lr
 8015e92:	f803 1b01 	strb.w	r1, [r3], #1
 8015e96:	e7f9      	b.n	8015e8c <memset+0x4>

08015e98 <_free_r>:
 8015e98:	b538      	push	{r3, r4, r5, lr}
 8015e9a:	4605      	mov	r5, r0
 8015e9c:	2900      	cmp	r1, #0
 8015e9e:	d045      	beq.n	8015f2c <_free_r+0x94>
 8015ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ea4:	1f0c      	subs	r4, r1, #4
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	bfb8      	it	lt
 8015eaa:	18e4      	addlt	r4, r4, r3
 8015eac:	f000 f8d4 	bl	8016058 <__malloc_lock>
 8015eb0:	4a1f      	ldr	r2, [pc, #124]	; (8015f30 <_free_r+0x98>)
 8015eb2:	6813      	ldr	r3, [r2, #0]
 8015eb4:	4610      	mov	r0, r2
 8015eb6:	b933      	cbnz	r3, 8015ec6 <_free_r+0x2e>
 8015eb8:	6063      	str	r3, [r4, #4]
 8015eba:	6014      	str	r4, [r2, #0]
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ec2:	f000 b8ca 	b.w	801605a <__malloc_unlock>
 8015ec6:	42a3      	cmp	r3, r4
 8015ec8:	d90c      	bls.n	8015ee4 <_free_r+0x4c>
 8015eca:	6821      	ldr	r1, [r4, #0]
 8015ecc:	1862      	adds	r2, r4, r1
 8015ece:	4293      	cmp	r3, r2
 8015ed0:	bf04      	itt	eq
 8015ed2:	681a      	ldreq	r2, [r3, #0]
 8015ed4:	685b      	ldreq	r3, [r3, #4]
 8015ed6:	6063      	str	r3, [r4, #4]
 8015ed8:	bf04      	itt	eq
 8015eda:	1852      	addeq	r2, r2, r1
 8015edc:	6022      	streq	r2, [r4, #0]
 8015ede:	6004      	str	r4, [r0, #0]
 8015ee0:	e7ec      	b.n	8015ebc <_free_r+0x24>
 8015ee2:	4613      	mov	r3, r2
 8015ee4:	685a      	ldr	r2, [r3, #4]
 8015ee6:	b10a      	cbz	r2, 8015eec <_free_r+0x54>
 8015ee8:	42a2      	cmp	r2, r4
 8015eea:	d9fa      	bls.n	8015ee2 <_free_r+0x4a>
 8015eec:	6819      	ldr	r1, [r3, #0]
 8015eee:	1858      	adds	r0, r3, r1
 8015ef0:	42a0      	cmp	r0, r4
 8015ef2:	d10b      	bne.n	8015f0c <_free_r+0x74>
 8015ef4:	6820      	ldr	r0, [r4, #0]
 8015ef6:	4401      	add	r1, r0
 8015ef8:	1858      	adds	r0, r3, r1
 8015efa:	4282      	cmp	r2, r0
 8015efc:	6019      	str	r1, [r3, #0]
 8015efe:	d1dd      	bne.n	8015ebc <_free_r+0x24>
 8015f00:	6810      	ldr	r0, [r2, #0]
 8015f02:	6852      	ldr	r2, [r2, #4]
 8015f04:	605a      	str	r2, [r3, #4]
 8015f06:	4401      	add	r1, r0
 8015f08:	6019      	str	r1, [r3, #0]
 8015f0a:	e7d7      	b.n	8015ebc <_free_r+0x24>
 8015f0c:	d902      	bls.n	8015f14 <_free_r+0x7c>
 8015f0e:	230c      	movs	r3, #12
 8015f10:	602b      	str	r3, [r5, #0]
 8015f12:	e7d3      	b.n	8015ebc <_free_r+0x24>
 8015f14:	6820      	ldr	r0, [r4, #0]
 8015f16:	1821      	adds	r1, r4, r0
 8015f18:	428a      	cmp	r2, r1
 8015f1a:	bf04      	itt	eq
 8015f1c:	6811      	ldreq	r1, [r2, #0]
 8015f1e:	6852      	ldreq	r2, [r2, #4]
 8015f20:	6062      	str	r2, [r4, #4]
 8015f22:	bf04      	itt	eq
 8015f24:	1809      	addeq	r1, r1, r0
 8015f26:	6021      	streq	r1, [r4, #0]
 8015f28:	605c      	str	r4, [r3, #4]
 8015f2a:	e7c7      	b.n	8015ebc <_free_r+0x24>
 8015f2c:	bd38      	pop	{r3, r4, r5, pc}
 8015f2e:	bf00      	nop
 8015f30:	20000e90 	.word	0x20000e90

08015f34 <_malloc_r>:
 8015f34:	b570      	push	{r4, r5, r6, lr}
 8015f36:	1ccd      	adds	r5, r1, #3
 8015f38:	f025 0503 	bic.w	r5, r5, #3
 8015f3c:	3508      	adds	r5, #8
 8015f3e:	2d0c      	cmp	r5, #12
 8015f40:	bf38      	it	cc
 8015f42:	250c      	movcc	r5, #12
 8015f44:	2d00      	cmp	r5, #0
 8015f46:	4606      	mov	r6, r0
 8015f48:	db01      	blt.n	8015f4e <_malloc_r+0x1a>
 8015f4a:	42a9      	cmp	r1, r5
 8015f4c:	d903      	bls.n	8015f56 <_malloc_r+0x22>
 8015f4e:	230c      	movs	r3, #12
 8015f50:	6033      	str	r3, [r6, #0]
 8015f52:	2000      	movs	r0, #0
 8015f54:	bd70      	pop	{r4, r5, r6, pc}
 8015f56:	f000 f87f 	bl	8016058 <__malloc_lock>
 8015f5a:	4a21      	ldr	r2, [pc, #132]	; (8015fe0 <_malloc_r+0xac>)
 8015f5c:	6814      	ldr	r4, [r2, #0]
 8015f5e:	4621      	mov	r1, r4
 8015f60:	b991      	cbnz	r1, 8015f88 <_malloc_r+0x54>
 8015f62:	4c20      	ldr	r4, [pc, #128]	; (8015fe4 <_malloc_r+0xb0>)
 8015f64:	6823      	ldr	r3, [r4, #0]
 8015f66:	b91b      	cbnz	r3, 8015f70 <_malloc_r+0x3c>
 8015f68:	4630      	mov	r0, r6
 8015f6a:	f000 f83d 	bl	8015fe8 <_sbrk_r>
 8015f6e:	6020      	str	r0, [r4, #0]
 8015f70:	4629      	mov	r1, r5
 8015f72:	4630      	mov	r0, r6
 8015f74:	f000 f838 	bl	8015fe8 <_sbrk_r>
 8015f78:	1c43      	adds	r3, r0, #1
 8015f7a:	d124      	bne.n	8015fc6 <_malloc_r+0x92>
 8015f7c:	230c      	movs	r3, #12
 8015f7e:	6033      	str	r3, [r6, #0]
 8015f80:	4630      	mov	r0, r6
 8015f82:	f000 f86a 	bl	801605a <__malloc_unlock>
 8015f86:	e7e4      	b.n	8015f52 <_malloc_r+0x1e>
 8015f88:	680b      	ldr	r3, [r1, #0]
 8015f8a:	1b5b      	subs	r3, r3, r5
 8015f8c:	d418      	bmi.n	8015fc0 <_malloc_r+0x8c>
 8015f8e:	2b0b      	cmp	r3, #11
 8015f90:	d90f      	bls.n	8015fb2 <_malloc_r+0x7e>
 8015f92:	600b      	str	r3, [r1, #0]
 8015f94:	50cd      	str	r5, [r1, r3]
 8015f96:	18cc      	adds	r4, r1, r3
 8015f98:	4630      	mov	r0, r6
 8015f9a:	f000 f85e 	bl	801605a <__malloc_unlock>
 8015f9e:	f104 000b 	add.w	r0, r4, #11
 8015fa2:	1d23      	adds	r3, r4, #4
 8015fa4:	f020 0007 	bic.w	r0, r0, #7
 8015fa8:	1ac3      	subs	r3, r0, r3
 8015faa:	d0d3      	beq.n	8015f54 <_malloc_r+0x20>
 8015fac:	425a      	negs	r2, r3
 8015fae:	50e2      	str	r2, [r4, r3]
 8015fb0:	e7d0      	b.n	8015f54 <_malloc_r+0x20>
 8015fb2:	428c      	cmp	r4, r1
 8015fb4:	684b      	ldr	r3, [r1, #4]
 8015fb6:	bf16      	itet	ne
 8015fb8:	6063      	strne	r3, [r4, #4]
 8015fba:	6013      	streq	r3, [r2, #0]
 8015fbc:	460c      	movne	r4, r1
 8015fbe:	e7eb      	b.n	8015f98 <_malloc_r+0x64>
 8015fc0:	460c      	mov	r4, r1
 8015fc2:	6849      	ldr	r1, [r1, #4]
 8015fc4:	e7cc      	b.n	8015f60 <_malloc_r+0x2c>
 8015fc6:	1cc4      	adds	r4, r0, #3
 8015fc8:	f024 0403 	bic.w	r4, r4, #3
 8015fcc:	42a0      	cmp	r0, r4
 8015fce:	d005      	beq.n	8015fdc <_malloc_r+0xa8>
 8015fd0:	1a21      	subs	r1, r4, r0
 8015fd2:	4630      	mov	r0, r6
 8015fd4:	f000 f808 	bl	8015fe8 <_sbrk_r>
 8015fd8:	3001      	adds	r0, #1
 8015fda:	d0cf      	beq.n	8015f7c <_malloc_r+0x48>
 8015fdc:	6025      	str	r5, [r4, #0]
 8015fde:	e7db      	b.n	8015f98 <_malloc_r+0x64>
 8015fe0:	20000e90 	.word	0x20000e90
 8015fe4:	20000e94 	.word	0x20000e94

08015fe8 <_sbrk_r>:
 8015fe8:	b538      	push	{r3, r4, r5, lr}
 8015fea:	4c06      	ldr	r4, [pc, #24]	; (8016004 <_sbrk_r+0x1c>)
 8015fec:	2300      	movs	r3, #0
 8015fee:	4605      	mov	r5, r0
 8015ff0:	4608      	mov	r0, r1
 8015ff2:	6023      	str	r3, [r4, #0]
 8015ff4:	f7ee fe66 	bl	8004cc4 <_sbrk>
 8015ff8:	1c43      	adds	r3, r0, #1
 8015ffa:	d102      	bne.n	8016002 <_sbrk_r+0x1a>
 8015ffc:	6823      	ldr	r3, [r4, #0]
 8015ffe:	b103      	cbz	r3, 8016002 <_sbrk_r+0x1a>
 8016000:	602b      	str	r3, [r5, #0]
 8016002:	bd38      	pop	{r3, r4, r5, pc}
 8016004:	2000283c 	.word	0x2000283c

08016008 <siprintf>:
 8016008:	b40e      	push	{r1, r2, r3}
 801600a:	b500      	push	{lr}
 801600c:	b09c      	sub	sp, #112	; 0x70
 801600e:	ab1d      	add	r3, sp, #116	; 0x74
 8016010:	9002      	str	r0, [sp, #8]
 8016012:	9006      	str	r0, [sp, #24]
 8016014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016018:	4809      	ldr	r0, [pc, #36]	; (8016040 <siprintf+0x38>)
 801601a:	9107      	str	r1, [sp, #28]
 801601c:	9104      	str	r1, [sp, #16]
 801601e:	4909      	ldr	r1, [pc, #36]	; (8016044 <siprintf+0x3c>)
 8016020:	f853 2b04 	ldr.w	r2, [r3], #4
 8016024:	9105      	str	r1, [sp, #20]
 8016026:	6800      	ldr	r0, [r0, #0]
 8016028:	9301      	str	r3, [sp, #4]
 801602a:	a902      	add	r1, sp, #8
 801602c:	f000 f870 	bl	8016110 <_svfiprintf_r>
 8016030:	9b02      	ldr	r3, [sp, #8]
 8016032:	2200      	movs	r2, #0
 8016034:	701a      	strb	r2, [r3, #0]
 8016036:	b01c      	add	sp, #112	; 0x70
 8016038:	f85d eb04 	ldr.w	lr, [sp], #4
 801603c:	b003      	add	sp, #12
 801603e:	4770      	bx	lr
 8016040:	200001d4 	.word	0x200001d4
 8016044:	ffff0208 	.word	0xffff0208

08016048 <strcpy>:
 8016048:	4603      	mov	r3, r0
 801604a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801604e:	f803 2b01 	strb.w	r2, [r3], #1
 8016052:	2a00      	cmp	r2, #0
 8016054:	d1f9      	bne.n	801604a <strcpy+0x2>
 8016056:	4770      	bx	lr

08016058 <__malloc_lock>:
 8016058:	4770      	bx	lr

0801605a <__malloc_unlock>:
 801605a:	4770      	bx	lr

0801605c <__ssputs_r>:
 801605c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016060:	688e      	ldr	r6, [r1, #8]
 8016062:	429e      	cmp	r6, r3
 8016064:	4682      	mov	sl, r0
 8016066:	460c      	mov	r4, r1
 8016068:	4690      	mov	r8, r2
 801606a:	4699      	mov	r9, r3
 801606c:	d837      	bhi.n	80160de <__ssputs_r+0x82>
 801606e:	898a      	ldrh	r2, [r1, #12]
 8016070:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016074:	d031      	beq.n	80160da <__ssputs_r+0x7e>
 8016076:	6825      	ldr	r5, [r4, #0]
 8016078:	6909      	ldr	r1, [r1, #16]
 801607a:	1a6f      	subs	r7, r5, r1
 801607c:	6965      	ldr	r5, [r4, #20]
 801607e:	2302      	movs	r3, #2
 8016080:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016084:	fb95 f5f3 	sdiv	r5, r5, r3
 8016088:	f109 0301 	add.w	r3, r9, #1
 801608c:	443b      	add	r3, r7
 801608e:	429d      	cmp	r5, r3
 8016090:	bf38      	it	cc
 8016092:	461d      	movcc	r5, r3
 8016094:	0553      	lsls	r3, r2, #21
 8016096:	d530      	bpl.n	80160fa <__ssputs_r+0x9e>
 8016098:	4629      	mov	r1, r5
 801609a:	f7ff ff4b 	bl	8015f34 <_malloc_r>
 801609e:	4606      	mov	r6, r0
 80160a0:	b950      	cbnz	r0, 80160b8 <__ssputs_r+0x5c>
 80160a2:	230c      	movs	r3, #12
 80160a4:	f8ca 3000 	str.w	r3, [sl]
 80160a8:	89a3      	ldrh	r3, [r4, #12]
 80160aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160ae:	81a3      	strh	r3, [r4, #12]
 80160b0:	f04f 30ff 	mov.w	r0, #4294967295
 80160b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160b8:	463a      	mov	r2, r7
 80160ba:	6921      	ldr	r1, [r4, #16]
 80160bc:	f7ff fed9 	bl	8015e72 <memcpy>
 80160c0:	89a3      	ldrh	r3, [r4, #12]
 80160c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80160c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80160ca:	81a3      	strh	r3, [r4, #12]
 80160cc:	6126      	str	r6, [r4, #16]
 80160ce:	6165      	str	r5, [r4, #20]
 80160d0:	443e      	add	r6, r7
 80160d2:	1bed      	subs	r5, r5, r7
 80160d4:	6026      	str	r6, [r4, #0]
 80160d6:	60a5      	str	r5, [r4, #8]
 80160d8:	464e      	mov	r6, r9
 80160da:	454e      	cmp	r6, r9
 80160dc:	d900      	bls.n	80160e0 <__ssputs_r+0x84>
 80160de:	464e      	mov	r6, r9
 80160e0:	4632      	mov	r2, r6
 80160e2:	4641      	mov	r1, r8
 80160e4:	6820      	ldr	r0, [r4, #0]
 80160e6:	f000 fa93 	bl	8016610 <memmove>
 80160ea:	68a3      	ldr	r3, [r4, #8]
 80160ec:	1b9b      	subs	r3, r3, r6
 80160ee:	60a3      	str	r3, [r4, #8]
 80160f0:	6823      	ldr	r3, [r4, #0]
 80160f2:	441e      	add	r6, r3
 80160f4:	6026      	str	r6, [r4, #0]
 80160f6:	2000      	movs	r0, #0
 80160f8:	e7dc      	b.n	80160b4 <__ssputs_r+0x58>
 80160fa:	462a      	mov	r2, r5
 80160fc:	f000 faa1 	bl	8016642 <_realloc_r>
 8016100:	4606      	mov	r6, r0
 8016102:	2800      	cmp	r0, #0
 8016104:	d1e2      	bne.n	80160cc <__ssputs_r+0x70>
 8016106:	6921      	ldr	r1, [r4, #16]
 8016108:	4650      	mov	r0, sl
 801610a:	f7ff fec5 	bl	8015e98 <_free_r>
 801610e:	e7c8      	b.n	80160a2 <__ssputs_r+0x46>

08016110 <_svfiprintf_r>:
 8016110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016114:	461d      	mov	r5, r3
 8016116:	898b      	ldrh	r3, [r1, #12]
 8016118:	061f      	lsls	r7, r3, #24
 801611a:	b09d      	sub	sp, #116	; 0x74
 801611c:	4680      	mov	r8, r0
 801611e:	460c      	mov	r4, r1
 8016120:	4616      	mov	r6, r2
 8016122:	d50f      	bpl.n	8016144 <_svfiprintf_r+0x34>
 8016124:	690b      	ldr	r3, [r1, #16]
 8016126:	b96b      	cbnz	r3, 8016144 <_svfiprintf_r+0x34>
 8016128:	2140      	movs	r1, #64	; 0x40
 801612a:	f7ff ff03 	bl	8015f34 <_malloc_r>
 801612e:	6020      	str	r0, [r4, #0]
 8016130:	6120      	str	r0, [r4, #16]
 8016132:	b928      	cbnz	r0, 8016140 <_svfiprintf_r+0x30>
 8016134:	230c      	movs	r3, #12
 8016136:	f8c8 3000 	str.w	r3, [r8]
 801613a:	f04f 30ff 	mov.w	r0, #4294967295
 801613e:	e0c8      	b.n	80162d2 <_svfiprintf_r+0x1c2>
 8016140:	2340      	movs	r3, #64	; 0x40
 8016142:	6163      	str	r3, [r4, #20]
 8016144:	2300      	movs	r3, #0
 8016146:	9309      	str	r3, [sp, #36]	; 0x24
 8016148:	2320      	movs	r3, #32
 801614a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801614e:	2330      	movs	r3, #48	; 0x30
 8016150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016154:	9503      	str	r5, [sp, #12]
 8016156:	f04f 0b01 	mov.w	fp, #1
 801615a:	4637      	mov	r7, r6
 801615c:	463d      	mov	r5, r7
 801615e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016162:	b10b      	cbz	r3, 8016168 <_svfiprintf_r+0x58>
 8016164:	2b25      	cmp	r3, #37	; 0x25
 8016166:	d13e      	bne.n	80161e6 <_svfiprintf_r+0xd6>
 8016168:	ebb7 0a06 	subs.w	sl, r7, r6
 801616c:	d00b      	beq.n	8016186 <_svfiprintf_r+0x76>
 801616e:	4653      	mov	r3, sl
 8016170:	4632      	mov	r2, r6
 8016172:	4621      	mov	r1, r4
 8016174:	4640      	mov	r0, r8
 8016176:	f7ff ff71 	bl	801605c <__ssputs_r>
 801617a:	3001      	adds	r0, #1
 801617c:	f000 80a4 	beq.w	80162c8 <_svfiprintf_r+0x1b8>
 8016180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016182:	4453      	add	r3, sl
 8016184:	9309      	str	r3, [sp, #36]	; 0x24
 8016186:	783b      	ldrb	r3, [r7, #0]
 8016188:	2b00      	cmp	r3, #0
 801618a:	f000 809d 	beq.w	80162c8 <_svfiprintf_r+0x1b8>
 801618e:	2300      	movs	r3, #0
 8016190:	f04f 32ff 	mov.w	r2, #4294967295
 8016194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016198:	9304      	str	r3, [sp, #16]
 801619a:	9307      	str	r3, [sp, #28]
 801619c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80161a0:	931a      	str	r3, [sp, #104]	; 0x68
 80161a2:	462f      	mov	r7, r5
 80161a4:	2205      	movs	r2, #5
 80161a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80161aa:	4850      	ldr	r0, [pc, #320]	; (80162ec <_svfiprintf_r+0x1dc>)
 80161ac:	f7ea f818 	bl	80001e0 <memchr>
 80161b0:	9b04      	ldr	r3, [sp, #16]
 80161b2:	b9d0      	cbnz	r0, 80161ea <_svfiprintf_r+0xda>
 80161b4:	06d9      	lsls	r1, r3, #27
 80161b6:	bf44      	itt	mi
 80161b8:	2220      	movmi	r2, #32
 80161ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80161be:	071a      	lsls	r2, r3, #28
 80161c0:	bf44      	itt	mi
 80161c2:	222b      	movmi	r2, #43	; 0x2b
 80161c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80161c8:	782a      	ldrb	r2, [r5, #0]
 80161ca:	2a2a      	cmp	r2, #42	; 0x2a
 80161cc:	d015      	beq.n	80161fa <_svfiprintf_r+0xea>
 80161ce:	9a07      	ldr	r2, [sp, #28]
 80161d0:	462f      	mov	r7, r5
 80161d2:	2000      	movs	r0, #0
 80161d4:	250a      	movs	r5, #10
 80161d6:	4639      	mov	r1, r7
 80161d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80161dc:	3b30      	subs	r3, #48	; 0x30
 80161de:	2b09      	cmp	r3, #9
 80161e0:	d94d      	bls.n	801627e <_svfiprintf_r+0x16e>
 80161e2:	b1b8      	cbz	r0, 8016214 <_svfiprintf_r+0x104>
 80161e4:	e00f      	b.n	8016206 <_svfiprintf_r+0xf6>
 80161e6:	462f      	mov	r7, r5
 80161e8:	e7b8      	b.n	801615c <_svfiprintf_r+0x4c>
 80161ea:	4a40      	ldr	r2, [pc, #256]	; (80162ec <_svfiprintf_r+0x1dc>)
 80161ec:	1a80      	subs	r0, r0, r2
 80161ee:	fa0b f000 	lsl.w	r0, fp, r0
 80161f2:	4318      	orrs	r0, r3
 80161f4:	9004      	str	r0, [sp, #16]
 80161f6:	463d      	mov	r5, r7
 80161f8:	e7d3      	b.n	80161a2 <_svfiprintf_r+0x92>
 80161fa:	9a03      	ldr	r2, [sp, #12]
 80161fc:	1d11      	adds	r1, r2, #4
 80161fe:	6812      	ldr	r2, [r2, #0]
 8016200:	9103      	str	r1, [sp, #12]
 8016202:	2a00      	cmp	r2, #0
 8016204:	db01      	blt.n	801620a <_svfiprintf_r+0xfa>
 8016206:	9207      	str	r2, [sp, #28]
 8016208:	e004      	b.n	8016214 <_svfiprintf_r+0x104>
 801620a:	4252      	negs	r2, r2
 801620c:	f043 0302 	orr.w	r3, r3, #2
 8016210:	9207      	str	r2, [sp, #28]
 8016212:	9304      	str	r3, [sp, #16]
 8016214:	783b      	ldrb	r3, [r7, #0]
 8016216:	2b2e      	cmp	r3, #46	; 0x2e
 8016218:	d10c      	bne.n	8016234 <_svfiprintf_r+0x124>
 801621a:	787b      	ldrb	r3, [r7, #1]
 801621c:	2b2a      	cmp	r3, #42	; 0x2a
 801621e:	d133      	bne.n	8016288 <_svfiprintf_r+0x178>
 8016220:	9b03      	ldr	r3, [sp, #12]
 8016222:	1d1a      	adds	r2, r3, #4
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	9203      	str	r2, [sp, #12]
 8016228:	2b00      	cmp	r3, #0
 801622a:	bfb8      	it	lt
 801622c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016230:	3702      	adds	r7, #2
 8016232:	9305      	str	r3, [sp, #20]
 8016234:	4d2e      	ldr	r5, [pc, #184]	; (80162f0 <_svfiprintf_r+0x1e0>)
 8016236:	7839      	ldrb	r1, [r7, #0]
 8016238:	2203      	movs	r2, #3
 801623a:	4628      	mov	r0, r5
 801623c:	f7e9 ffd0 	bl	80001e0 <memchr>
 8016240:	b138      	cbz	r0, 8016252 <_svfiprintf_r+0x142>
 8016242:	2340      	movs	r3, #64	; 0x40
 8016244:	1b40      	subs	r0, r0, r5
 8016246:	fa03 f000 	lsl.w	r0, r3, r0
 801624a:	9b04      	ldr	r3, [sp, #16]
 801624c:	4303      	orrs	r3, r0
 801624e:	3701      	adds	r7, #1
 8016250:	9304      	str	r3, [sp, #16]
 8016252:	7839      	ldrb	r1, [r7, #0]
 8016254:	4827      	ldr	r0, [pc, #156]	; (80162f4 <_svfiprintf_r+0x1e4>)
 8016256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801625a:	2206      	movs	r2, #6
 801625c:	1c7e      	adds	r6, r7, #1
 801625e:	f7e9 ffbf 	bl	80001e0 <memchr>
 8016262:	2800      	cmp	r0, #0
 8016264:	d038      	beq.n	80162d8 <_svfiprintf_r+0x1c8>
 8016266:	4b24      	ldr	r3, [pc, #144]	; (80162f8 <_svfiprintf_r+0x1e8>)
 8016268:	bb13      	cbnz	r3, 80162b0 <_svfiprintf_r+0x1a0>
 801626a:	9b03      	ldr	r3, [sp, #12]
 801626c:	3307      	adds	r3, #7
 801626e:	f023 0307 	bic.w	r3, r3, #7
 8016272:	3308      	adds	r3, #8
 8016274:	9303      	str	r3, [sp, #12]
 8016276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016278:	444b      	add	r3, r9
 801627a:	9309      	str	r3, [sp, #36]	; 0x24
 801627c:	e76d      	b.n	801615a <_svfiprintf_r+0x4a>
 801627e:	fb05 3202 	mla	r2, r5, r2, r3
 8016282:	2001      	movs	r0, #1
 8016284:	460f      	mov	r7, r1
 8016286:	e7a6      	b.n	80161d6 <_svfiprintf_r+0xc6>
 8016288:	2300      	movs	r3, #0
 801628a:	3701      	adds	r7, #1
 801628c:	9305      	str	r3, [sp, #20]
 801628e:	4619      	mov	r1, r3
 8016290:	250a      	movs	r5, #10
 8016292:	4638      	mov	r0, r7
 8016294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016298:	3a30      	subs	r2, #48	; 0x30
 801629a:	2a09      	cmp	r2, #9
 801629c:	d903      	bls.n	80162a6 <_svfiprintf_r+0x196>
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d0c8      	beq.n	8016234 <_svfiprintf_r+0x124>
 80162a2:	9105      	str	r1, [sp, #20]
 80162a4:	e7c6      	b.n	8016234 <_svfiprintf_r+0x124>
 80162a6:	fb05 2101 	mla	r1, r5, r1, r2
 80162aa:	2301      	movs	r3, #1
 80162ac:	4607      	mov	r7, r0
 80162ae:	e7f0      	b.n	8016292 <_svfiprintf_r+0x182>
 80162b0:	ab03      	add	r3, sp, #12
 80162b2:	9300      	str	r3, [sp, #0]
 80162b4:	4622      	mov	r2, r4
 80162b6:	4b11      	ldr	r3, [pc, #68]	; (80162fc <_svfiprintf_r+0x1ec>)
 80162b8:	a904      	add	r1, sp, #16
 80162ba:	4640      	mov	r0, r8
 80162bc:	f3af 8000 	nop.w
 80162c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80162c4:	4681      	mov	r9, r0
 80162c6:	d1d6      	bne.n	8016276 <_svfiprintf_r+0x166>
 80162c8:	89a3      	ldrh	r3, [r4, #12]
 80162ca:	065b      	lsls	r3, r3, #25
 80162cc:	f53f af35 	bmi.w	801613a <_svfiprintf_r+0x2a>
 80162d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80162d2:	b01d      	add	sp, #116	; 0x74
 80162d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d8:	ab03      	add	r3, sp, #12
 80162da:	9300      	str	r3, [sp, #0]
 80162dc:	4622      	mov	r2, r4
 80162de:	4b07      	ldr	r3, [pc, #28]	; (80162fc <_svfiprintf_r+0x1ec>)
 80162e0:	a904      	add	r1, sp, #16
 80162e2:	4640      	mov	r0, r8
 80162e4:	f000 f882 	bl	80163ec <_printf_i>
 80162e8:	e7ea      	b.n	80162c0 <_svfiprintf_r+0x1b0>
 80162ea:	bf00      	nop
 80162ec:	0801a938 	.word	0x0801a938
 80162f0:	0801a93e 	.word	0x0801a93e
 80162f4:	0801a942 	.word	0x0801a942
 80162f8:	00000000 	.word	0x00000000
 80162fc:	0801605d 	.word	0x0801605d

08016300 <_printf_common>:
 8016300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016304:	4691      	mov	r9, r2
 8016306:	461f      	mov	r7, r3
 8016308:	688a      	ldr	r2, [r1, #8]
 801630a:	690b      	ldr	r3, [r1, #16]
 801630c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016310:	4293      	cmp	r3, r2
 8016312:	bfb8      	it	lt
 8016314:	4613      	movlt	r3, r2
 8016316:	f8c9 3000 	str.w	r3, [r9]
 801631a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801631e:	4606      	mov	r6, r0
 8016320:	460c      	mov	r4, r1
 8016322:	b112      	cbz	r2, 801632a <_printf_common+0x2a>
 8016324:	3301      	adds	r3, #1
 8016326:	f8c9 3000 	str.w	r3, [r9]
 801632a:	6823      	ldr	r3, [r4, #0]
 801632c:	0699      	lsls	r1, r3, #26
 801632e:	bf42      	ittt	mi
 8016330:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016334:	3302      	addmi	r3, #2
 8016336:	f8c9 3000 	strmi.w	r3, [r9]
 801633a:	6825      	ldr	r5, [r4, #0]
 801633c:	f015 0506 	ands.w	r5, r5, #6
 8016340:	d107      	bne.n	8016352 <_printf_common+0x52>
 8016342:	f104 0a19 	add.w	sl, r4, #25
 8016346:	68e3      	ldr	r3, [r4, #12]
 8016348:	f8d9 2000 	ldr.w	r2, [r9]
 801634c:	1a9b      	subs	r3, r3, r2
 801634e:	42ab      	cmp	r3, r5
 8016350:	dc28      	bgt.n	80163a4 <_printf_common+0xa4>
 8016352:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016356:	6822      	ldr	r2, [r4, #0]
 8016358:	3300      	adds	r3, #0
 801635a:	bf18      	it	ne
 801635c:	2301      	movne	r3, #1
 801635e:	0692      	lsls	r2, r2, #26
 8016360:	d42d      	bmi.n	80163be <_printf_common+0xbe>
 8016362:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016366:	4639      	mov	r1, r7
 8016368:	4630      	mov	r0, r6
 801636a:	47c0      	blx	r8
 801636c:	3001      	adds	r0, #1
 801636e:	d020      	beq.n	80163b2 <_printf_common+0xb2>
 8016370:	6823      	ldr	r3, [r4, #0]
 8016372:	68e5      	ldr	r5, [r4, #12]
 8016374:	f8d9 2000 	ldr.w	r2, [r9]
 8016378:	f003 0306 	and.w	r3, r3, #6
 801637c:	2b04      	cmp	r3, #4
 801637e:	bf08      	it	eq
 8016380:	1aad      	subeq	r5, r5, r2
 8016382:	68a3      	ldr	r3, [r4, #8]
 8016384:	6922      	ldr	r2, [r4, #16]
 8016386:	bf0c      	ite	eq
 8016388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801638c:	2500      	movne	r5, #0
 801638e:	4293      	cmp	r3, r2
 8016390:	bfc4      	itt	gt
 8016392:	1a9b      	subgt	r3, r3, r2
 8016394:	18ed      	addgt	r5, r5, r3
 8016396:	f04f 0900 	mov.w	r9, #0
 801639a:	341a      	adds	r4, #26
 801639c:	454d      	cmp	r5, r9
 801639e:	d11a      	bne.n	80163d6 <_printf_common+0xd6>
 80163a0:	2000      	movs	r0, #0
 80163a2:	e008      	b.n	80163b6 <_printf_common+0xb6>
 80163a4:	2301      	movs	r3, #1
 80163a6:	4652      	mov	r2, sl
 80163a8:	4639      	mov	r1, r7
 80163aa:	4630      	mov	r0, r6
 80163ac:	47c0      	blx	r8
 80163ae:	3001      	adds	r0, #1
 80163b0:	d103      	bne.n	80163ba <_printf_common+0xba>
 80163b2:	f04f 30ff 	mov.w	r0, #4294967295
 80163b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163ba:	3501      	adds	r5, #1
 80163bc:	e7c3      	b.n	8016346 <_printf_common+0x46>
 80163be:	18e1      	adds	r1, r4, r3
 80163c0:	1c5a      	adds	r2, r3, #1
 80163c2:	2030      	movs	r0, #48	; 0x30
 80163c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80163c8:	4422      	add	r2, r4
 80163ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80163ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80163d2:	3302      	adds	r3, #2
 80163d4:	e7c5      	b.n	8016362 <_printf_common+0x62>
 80163d6:	2301      	movs	r3, #1
 80163d8:	4622      	mov	r2, r4
 80163da:	4639      	mov	r1, r7
 80163dc:	4630      	mov	r0, r6
 80163de:	47c0      	blx	r8
 80163e0:	3001      	adds	r0, #1
 80163e2:	d0e6      	beq.n	80163b2 <_printf_common+0xb2>
 80163e4:	f109 0901 	add.w	r9, r9, #1
 80163e8:	e7d8      	b.n	801639c <_printf_common+0x9c>
	...

080163ec <_printf_i>:
 80163ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80163f4:	460c      	mov	r4, r1
 80163f6:	7e09      	ldrb	r1, [r1, #24]
 80163f8:	b085      	sub	sp, #20
 80163fa:	296e      	cmp	r1, #110	; 0x6e
 80163fc:	4617      	mov	r7, r2
 80163fe:	4606      	mov	r6, r0
 8016400:	4698      	mov	r8, r3
 8016402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016404:	f000 80b3 	beq.w	801656e <_printf_i+0x182>
 8016408:	d822      	bhi.n	8016450 <_printf_i+0x64>
 801640a:	2963      	cmp	r1, #99	; 0x63
 801640c:	d036      	beq.n	801647c <_printf_i+0x90>
 801640e:	d80a      	bhi.n	8016426 <_printf_i+0x3a>
 8016410:	2900      	cmp	r1, #0
 8016412:	f000 80b9 	beq.w	8016588 <_printf_i+0x19c>
 8016416:	2958      	cmp	r1, #88	; 0x58
 8016418:	f000 8083 	beq.w	8016522 <_printf_i+0x136>
 801641c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016420:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016424:	e032      	b.n	801648c <_printf_i+0xa0>
 8016426:	2964      	cmp	r1, #100	; 0x64
 8016428:	d001      	beq.n	801642e <_printf_i+0x42>
 801642a:	2969      	cmp	r1, #105	; 0x69
 801642c:	d1f6      	bne.n	801641c <_printf_i+0x30>
 801642e:	6820      	ldr	r0, [r4, #0]
 8016430:	6813      	ldr	r3, [r2, #0]
 8016432:	0605      	lsls	r5, r0, #24
 8016434:	f103 0104 	add.w	r1, r3, #4
 8016438:	d52a      	bpl.n	8016490 <_printf_i+0xa4>
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	6011      	str	r1, [r2, #0]
 801643e:	2b00      	cmp	r3, #0
 8016440:	da03      	bge.n	801644a <_printf_i+0x5e>
 8016442:	222d      	movs	r2, #45	; 0x2d
 8016444:	425b      	negs	r3, r3
 8016446:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801644a:	486f      	ldr	r0, [pc, #444]	; (8016608 <_printf_i+0x21c>)
 801644c:	220a      	movs	r2, #10
 801644e:	e039      	b.n	80164c4 <_printf_i+0xd8>
 8016450:	2973      	cmp	r1, #115	; 0x73
 8016452:	f000 809d 	beq.w	8016590 <_printf_i+0x1a4>
 8016456:	d808      	bhi.n	801646a <_printf_i+0x7e>
 8016458:	296f      	cmp	r1, #111	; 0x6f
 801645a:	d020      	beq.n	801649e <_printf_i+0xb2>
 801645c:	2970      	cmp	r1, #112	; 0x70
 801645e:	d1dd      	bne.n	801641c <_printf_i+0x30>
 8016460:	6823      	ldr	r3, [r4, #0]
 8016462:	f043 0320 	orr.w	r3, r3, #32
 8016466:	6023      	str	r3, [r4, #0]
 8016468:	e003      	b.n	8016472 <_printf_i+0x86>
 801646a:	2975      	cmp	r1, #117	; 0x75
 801646c:	d017      	beq.n	801649e <_printf_i+0xb2>
 801646e:	2978      	cmp	r1, #120	; 0x78
 8016470:	d1d4      	bne.n	801641c <_printf_i+0x30>
 8016472:	2378      	movs	r3, #120	; 0x78
 8016474:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016478:	4864      	ldr	r0, [pc, #400]	; (801660c <_printf_i+0x220>)
 801647a:	e055      	b.n	8016528 <_printf_i+0x13c>
 801647c:	6813      	ldr	r3, [r2, #0]
 801647e:	1d19      	adds	r1, r3, #4
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	6011      	str	r1, [r2, #0]
 8016484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801648c:	2301      	movs	r3, #1
 801648e:	e08c      	b.n	80165aa <_printf_i+0x1be>
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	6011      	str	r1, [r2, #0]
 8016494:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016498:	bf18      	it	ne
 801649a:	b21b      	sxthne	r3, r3
 801649c:	e7cf      	b.n	801643e <_printf_i+0x52>
 801649e:	6813      	ldr	r3, [r2, #0]
 80164a0:	6825      	ldr	r5, [r4, #0]
 80164a2:	1d18      	adds	r0, r3, #4
 80164a4:	6010      	str	r0, [r2, #0]
 80164a6:	0628      	lsls	r0, r5, #24
 80164a8:	d501      	bpl.n	80164ae <_printf_i+0xc2>
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	e002      	b.n	80164b4 <_printf_i+0xc8>
 80164ae:	0668      	lsls	r0, r5, #25
 80164b0:	d5fb      	bpl.n	80164aa <_printf_i+0xbe>
 80164b2:	881b      	ldrh	r3, [r3, #0]
 80164b4:	4854      	ldr	r0, [pc, #336]	; (8016608 <_printf_i+0x21c>)
 80164b6:	296f      	cmp	r1, #111	; 0x6f
 80164b8:	bf14      	ite	ne
 80164ba:	220a      	movne	r2, #10
 80164bc:	2208      	moveq	r2, #8
 80164be:	2100      	movs	r1, #0
 80164c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80164c4:	6865      	ldr	r5, [r4, #4]
 80164c6:	60a5      	str	r5, [r4, #8]
 80164c8:	2d00      	cmp	r5, #0
 80164ca:	f2c0 8095 	blt.w	80165f8 <_printf_i+0x20c>
 80164ce:	6821      	ldr	r1, [r4, #0]
 80164d0:	f021 0104 	bic.w	r1, r1, #4
 80164d4:	6021      	str	r1, [r4, #0]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d13d      	bne.n	8016556 <_printf_i+0x16a>
 80164da:	2d00      	cmp	r5, #0
 80164dc:	f040 808e 	bne.w	80165fc <_printf_i+0x210>
 80164e0:	4665      	mov	r5, ip
 80164e2:	2a08      	cmp	r2, #8
 80164e4:	d10b      	bne.n	80164fe <_printf_i+0x112>
 80164e6:	6823      	ldr	r3, [r4, #0]
 80164e8:	07db      	lsls	r3, r3, #31
 80164ea:	d508      	bpl.n	80164fe <_printf_i+0x112>
 80164ec:	6923      	ldr	r3, [r4, #16]
 80164ee:	6862      	ldr	r2, [r4, #4]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	bfde      	ittt	le
 80164f4:	2330      	movle	r3, #48	; 0x30
 80164f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80164fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80164fe:	ebac 0305 	sub.w	r3, ip, r5
 8016502:	6123      	str	r3, [r4, #16]
 8016504:	f8cd 8000 	str.w	r8, [sp]
 8016508:	463b      	mov	r3, r7
 801650a:	aa03      	add	r2, sp, #12
 801650c:	4621      	mov	r1, r4
 801650e:	4630      	mov	r0, r6
 8016510:	f7ff fef6 	bl	8016300 <_printf_common>
 8016514:	3001      	adds	r0, #1
 8016516:	d14d      	bne.n	80165b4 <_printf_i+0x1c8>
 8016518:	f04f 30ff 	mov.w	r0, #4294967295
 801651c:	b005      	add	sp, #20
 801651e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016522:	4839      	ldr	r0, [pc, #228]	; (8016608 <_printf_i+0x21c>)
 8016524:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016528:	6813      	ldr	r3, [r2, #0]
 801652a:	6821      	ldr	r1, [r4, #0]
 801652c:	1d1d      	adds	r5, r3, #4
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	6015      	str	r5, [r2, #0]
 8016532:	060a      	lsls	r2, r1, #24
 8016534:	d50b      	bpl.n	801654e <_printf_i+0x162>
 8016536:	07ca      	lsls	r2, r1, #31
 8016538:	bf44      	itt	mi
 801653a:	f041 0120 	orrmi.w	r1, r1, #32
 801653e:	6021      	strmi	r1, [r4, #0]
 8016540:	b91b      	cbnz	r3, 801654a <_printf_i+0x15e>
 8016542:	6822      	ldr	r2, [r4, #0]
 8016544:	f022 0220 	bic.w	r2, r2, #32
 8016548:	6022      	str	r2, [r4, #0]
 801654a:	2210      	movs	r2, #16
 801654c:	e7b7      	b.n	80164be <_printf_i+0xd2>
 801654e:	064d      	lsls	r5, r1, #25
 8016550:	bf48      	it	mi
 8016552:	b29b      	uxthmi	r3, r3
 8016554:	e7ef      	b.n	8016536 <_printf_i+0x14a>
 8016556:	4665      	mov	r5, ip
 8016558:	fbb3 f1f2 	udiv	r1, r3, r2
 801655c:	fb02 3311 	mls	r3, r2, r1, r3
 8016560:	5cc3      	ldrb	r3, [r0, r3]
 8016562:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016566:	460b      	mov	r3, r1
 8016568:	2900      	cmp	r1, #0
 801656a:	d1f5      	bne.n	8016558 <_printf_i+0x16c>
 801656c:	e7b9      	b.n	80164e2 <_printf_i+0xf6>
 801656e:	6813      	ldr	r3, [r2, #0]
 8016570:	6825      	ldr	r5, [r4, #0]
 8016572:	6961      	ldr	r1, [r4, #20]
 8016574:	1d18      	adds	r0, r3, #4
 8016576:	6010      	str	r0, [r2, #0]
 8016578:	0628      	lsls	r0, r5, #24
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	d501      	bpl.n	8016582 <_printf_i+0x196>
 801657e:	6019      	str	r1, [r3, #0]
 8016580:	e002      	b.n	8016588 <_printf_i+0x19c>
 8016582:	066a      	lsls	r2, r5, #25
 8016584:	d5fb      	bpl.n	801657e <_printf_i+0x192>
 8016586:	8019      	strh	r1, [r3, #0]
 8016588:	2300      	movs	r3, #0
 801658a:	6123      	str	r3, [r4, #16]
 801658c:	4665      	mov	r5, ip
 801658e:	e7b9      	b.n	8016504 <_printf_i+0x118>
 8016590:	6813      	ldr	r3, [r2, #0]
 8016592:	1d19      	adds	r1, r3, #4
 8016594:	6011      	str	r1, [r2, #0]
 8016596:	681d      	ldr	r5, [r3, #0]
 8016598:	6862      	ldr	r2, [r4, #4]
 801659a:	2100      	movs	r1, #0
 801659c:	4628      	mov	r0, r5
 801659e:	f7e9 fe1f 	bl	80001e0 <memchr>
 80165a2:	b108      	cbz	r0, 80165a8 <_printf_i+0x1bc>
 80165a4:	1b40      	subs	r0, r0, r5
 80165a6:	6060      	str	r0, [r4, #4]
 80165a8:	6863      	ldr	r3, [r4, #4]
 80165aa:	6123      	str	r3, [r4, #16]
 80165ac:	2300      	movs	r3, #0
 80165ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80165b2:	e7a7      	b.n	8016504 <_printf_i+0x118>
 80165b4:	6923      	ldr	r3, [r4, #16]
 80165b6:	462a      	mov	r2, r5
 80165b8:	4639      	mov	r1, r7
 80165ba:	4630      	mov	r0, r6
 80165bc:	47c0      	blx	r8
 80165be:	3001      	adds	r0, #1
 80165c0:	d0aa      	beq.n	8016518 <_printf_i+0x12c>
 80165c2:	6823      	ldr	r3, [r4, #0]
 80165c4:	079b      	lsls	r3, r3, #30
 80165c6:	d413      	bmi.n	80165f0 <_printf_i+0x204>
 80165c8:	68e0      	ldr	r0, [r4, #12]
 80165ca:	9b03      	ldr	r3, [sp, #12]
 80165cc:	4298      	cmp	r0, r3
 80165ce:	bfb8      	it	lt
 80165d0:	4618      	movlt	r0, r3
 80165d2:	e7a3      	b.n	801651c <_printf_i+0x130>
 80165d4:	2301      	movs	r3, #1
 80165d6:	464a      	mov	r2, r9
 80165d8:	4639      	mov	r1, r7
 80165da:	4630      	mov	r0, r6
 80165dc:	47c0      	blx	r8
 80165de:	3001      	adds	r0, #1
 80165e0:	d09a      	beq.n	8016518 <_printf_i+0x12c>
 80165e2:	3501      	adds	r5, #1
 80165e4:	68e3      	ldr	r3, [r4, #12]
 80165e6:	9a03      	ldr	r2, [sp, #12]
 80165e8:	1a9b      	subs	r3, r3, r2
 80165ea:	42ab      	cmp	r3, r5
 80165ec:	dcf2      	bgt.n	80165d4 <_printf_i+0x1e8>
 80165ee:	e7eb      	b.n	80165c8 <_printf_i+0x1dc>
 80165f0:	2500      	movs	r5, #0
 80165f2:	f104 0919 	add.w	r9, r4, #25
 80165f6:	e7f5      	b.n	80165e4 <_printf_i+0x1f8>
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d1ac      	bne.n	8016556 <_printf_i+0x16a>
 80165fc:	7803      	ldrb	r3, [r0, #0]
 80165fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016602:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016606:	e76c      	b.n	80164e2 <_printf_i+0xf6>
 8016608:	0801a949 	.word	0x0801a949
 801660c:	0801a95a 	.word	0x0801a95a

08016610 <memmove>:
 8016610:	4288      	cmp	r0, r1
 8016612:	b510      	push	{r4, lr}
 8016614:	eb01 0302 	add.w	r3, r1, r2
 8016618:	d807      	bhi.n	801662a <memmove+0x1a>
 801661a:	1e42      	subs	r2, r0, #1
 801661c:	4299      	cmp	r1, r3
 801661e:	d00a      	beq.n	8016636 <memmove+0x26>
 8016620:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016624:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016628:	e7f8      	b.n	801661c <memmove+0xc>
 801662a:	4283      	cmp	r3, r0
 801662c:	d9f5      	bls.n	801661a <memmove+0xa>
 801662e:	1881      	adds	r1, r0, r2
 8016630:	1ad2      	subs	r2, r2, r3
 8016632:	42d3      	cmn	r3, r2
 8016634:	d100      	bne.n	8016638 <memmove+0x28>
 8016636:	bd10      	pop	{r4, pc}
 8016638:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801663c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016640:	e7f7      	b.n	8016632 <memmove+0x22>

08016642 <_realloc_r>:
 8016642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016644:	4607      	mov	r7, r0
 8016646:	4614      	mov	r4, r2
 8016648:	460e      	mov	r6, r1
 801664a:	b921      	cbnz	r1, 8016656 <_realloc_r+0x14>
 801664c:	4611      	mov	r1, r2
 801664e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016652:	f7ff bc6f 	b.w	8015f34 <_malloc_r>
 8016656:	b922      	cbnz	r2, 8016662 <_realloc_r+0x20>
 8016658:	f7ff fc1e 	bl	8015e98 <_free_r>
 801665c:	4625      	mov	r5, r4
 801665e:	4628      	mov	r0, r5
 8016660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016662:	f000 f814 	bl	801668e <_malloc_usable_size_r>
 8016666:	42a0      	cmp	r0, r4
 8016668:	d20f      	bcs.n	801668a <_realloc_r+0x48>
 801666a:	4621      	mov	r1, r4
 801666c:	4638      	mov	r0, r7
 801666e:	f7ff fc61 	bl	8015f34 <_malloc_r>
 8016672:	4605      	mov	r5, r0
 8016674:	2800      	cmp	r0, #0
 8016676:	d0f2      	beq.n	801665e <_realloc_r+0x1c>
 8016678:	4631      	mov	r1, r6
 801667a:	4622      	mov	r2, r4
 801667c:	f7ff fbf9 	bl	8015e72 <memcpy>
 8016680:	4631      	mov	r1, r6
 8016682:	4638      	mov	r0, r7
 8016684:	f7ff fc08 	bl	8015e98 <_free_r>
 8016688:	e7e9      	b.n	801665e <_realloc_r+0x1c>
 801668a:	4635      	mov	r5, r6
 801668c:	e7e7      	b.n	801665e <_realloc_r+0x1c>

0801668e <_malloc_usable_size_r>:
 801668e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016692:	1f18      	subs	r0, r3, #4
 8016694:	2b00      	cmp	r3, #0
 8016696:	bfbc      	itt	lt
 8016698:	580b      	ldrlt	r3, [r1, r0]
 801669a:	18c0      	addlt	r0, r0, r3
 801669c:	4770      	bx	lr
	...

080166a0 <_init>:
 80166a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166a2:	bf00      	nop
 80166a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166a6:	bc08      	pop	{r3}
 80166a8:	469e      	mov	lr, r3
 80166aa:	4770      	bx	lr

080166ac <_fini>:
 80166ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ae:	bf00      	nop
 80166b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166b2:	bc08      	pop	{r3}
 80166b4:	469e      	mov	lr, r3
 80166b6:	4770      	bx	lr
