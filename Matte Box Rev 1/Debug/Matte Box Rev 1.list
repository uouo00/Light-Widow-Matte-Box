
Matte Box Rev 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017438  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000042f0  080175d8  080175d8  000275d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b8c8  0801b8c8  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  0801b8c8  0801b8c8  0002b8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b8d0  0801b8d0  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b8d0  0801b8d0  0002b8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b8d4  0801b8d4  0002b8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0801b8d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002620  20000238  0801bb10  00030238  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002858  0801bb10  00032858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c3d2  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000804a  00000000  00000000  0006c63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002318  00000000  00000000  00074688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f98  00000000  00000000  000769a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000126c4  00000000  00000000  00078938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b29e  00000000  00000000  0008affc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1bd6  00000000  00000000  000b629a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167e70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009130  00000000  00000000  00167eec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080175c0 	.word	0x080175c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	080175c0 	.word	0x080175c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b972 	b.w	8000d78 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4688      	mov	r8, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14b      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4615      	mov	r5, r2
 8000abe:	d967      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0720 	rsb	r7, r2, #32
 8000aca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ace:	fa20 f707 	lsr.w	r7, r0, r7
 8000ad2:	4095      	lsls	r5, r2
 8000ad4:	ea47 0803 	orr.w	r8, r7, r3
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ae4:	fa1f fc85 	uxth.w	ip, r5
 8000ae8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000aec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af0:	fb07 f10c 	mul.w	r1, r7, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000afe:	f080 811b 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8118 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b08:	3f02      	subs	r7, #2
 8000b0a:	442b      	add	r3, r5
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	192c      	adds	r4, r5, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8107 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b2e:	45a4      	cmp	ip, r4
 8000b30:	f240 8104 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b34:	3802      	subs	r0, #2
 8000b36:	442c      	add	r4, r5
 8000b38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b3c:	eba4 040c 	sub.w	r4, r4, ip
 8000b40:	2700      	movs	r7, #0
 8000b42:	b11e      	cbz	r6, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0xbe>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80eb 	beq.w	8000d32 <__udivmoddi4+0x286>
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b62:	4638      	mov	r0, r7
 8000b64:	4639      	mov	r1, r7
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f783 	clz	r7, r3
 8000b6e:	2f00      	cmp	r7, #0
 8000b70:	d147      	bne.n	8000c02 <__udivmoddi4+0x156>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0xd0>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80fa 	bhi.w	8000d70 <__udivmoddi4+0x2c4>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	4698      	mov	r8, r3
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d0e0      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000b8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b8e:	e7dd      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000b90:	b902      	cbnz	r2, 8000b94 <__udivmoddi4+0xe8>
 8000b92:	deff      	udf	#255	; 0xff
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	f040 808f 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9e:	1b49      	subs	r1, r1, r5
 8000ba0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba4:	fa1f f885 	uxth.w	r8, r5
 8000ba8:	2701      	movs	r7, #1
 8000baa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bae:	0c23      	lsrs	r3, r4, #16
 8000bb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bc0:	18eb      	adds	r3, r5, r3
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	f200 80cd 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1a59      	subs	r1, r3, r1
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x14c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x14a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80b6 	bhi.w	8000d62 <__udivmoddi4+0x2b6>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e79f      	b.n	8000b42 <__udivmoddi4+0x96>
 8000c02:	f1c7 0c20 	rsb	ip, r7, #32
 8000c06:	40bb      	lsls	r3, r7
 8000c08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c10:	fa01 f407 	lsl.w	r4, r1, r7
 8000c14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c20:	4325      	orrs	r5, r4
 8000c22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c26:	0c2c      	lsrs	r4, r5, #16
 8000c28:	fb08 3319 	mls	r3, r8, r9, r3
 8000c2c:	fa1f fa8e 	uxth.w	sl, lr
 8000c30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c34:	fb09 f40a 	mul.w	r4, r9, sl
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1e 0303 	adds.w	r3, lr, r3
 8000c48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c4c:	f080 8087 	bcs.w	8000d5e <__udivmoddi4+0x2b2>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f240 8084 	bls.w	8000d5e <__udivmoddi4+0x2b2>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4473      	add	r3, lr
 8000c5c:	1b1b      	subs	r3, r3, r4
 8000c5e:	b2ad      	uxth	r5, r5
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c70:	45a2      	cmp	sl, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1e 0404 	adds.w	r4, lr, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	d26b      	bcs.n	8000d56 <__udivmoddi4+0x2aa>
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d969      	bls.n	8000d56 <__udivmoddi4+0x2aa>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4474      	add	r4, lr
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8e:	eba4 040a 	sub.w	r4, r4, sl
 8000c92:	454c      	cmp	r4, r9
 8000c94:	46c2      	mov	sl, r8
 8000c96:	464b      	mov	r3, r9
 8000c98:	d354      	bcc.n	8000d44 <__udivmoddi4+0x298>
 8000c9a:	d051      	beq.n	8000d40 <__udivmoddi4+0x294>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d069      	beq.n	8000d74 <__udivmoddi4+0x2c8>
 8000ca0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ca4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ca8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	40fc      	lsrs	r4, r7
 8000cb0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cb4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e747      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000cbc:	f1c2 0320 	rsb	r3, r2, #32
 8000cc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cc4:	4095      	lsls	r5, r2
 8000cc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cca:	fa21 f303 	lsr.w	r3, r1, r3
 8000cce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd2:	4338      	orrs	r0, r7
 8000cd4:	0c01      	lsrs	r1, r0, #16
 8000cd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cda:	fa1f f885 	uxth.w	r8, r5
 8000cde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb07 f308 	mul.w	r3, r7, r8
 8000cea:	428b      	cmp	r3, r1
 8000cec:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x256>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cf8:	d22f      	bcs.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d92d      	bls.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfe:	3f02      	subs	r7, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	b281      	uxth	r1, r0
 8000d06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d12:	fb00 f308 	mul.w	r3, r0, r8
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d907      	bls.n	8000d2a <__udivmoddi4+0x27e>
 8000d1a:	1869      	adds	r1, r5, r1
 8000d1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d20:	d217      	bcs.n	8000d52 <__udivmoddi4+0x2a6>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d915      	bls.n	8000d52 <__udivmoddi4+0x2a6>
 8000d26:	3802      	subs	r0, #2
 8000d28:	4429      	add	r1, r5
 8000d2a:	1ac9      	subs	r1, r1, r3
 8000d2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d30:	e73b      	b.n	8000baa <__udivmoddi4+0xfe>
 8000d32:	4637      	mov	r7, r6
 8000d34:	4630      	mov	r0, r6
 8000d36:	e709      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d38:	4607      	mov	r7, r0
 8000d3a:	e6e7      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	e6fb      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d40:	4541      	cmp	r1, r8
 8000d42:	d2ab      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d48:	eb69 020e 	sbc.w	r2, r9, lr
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	4613      	mov	r3, r2
 8000d50:	e7a4      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d52:	4660      	mov	r0, ip
 8000d54:	e7e9      	b.n	8000d2a <__udivmoddi4+0x27e>
 8000d56:	4618      	mov	r0, r3
 8000d58:	e795      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5a:	4667      	mov	r7, ip
 8000d5c:	e7d1      	b.n	8000d02 <__udivmoddi4+0x256>
 8000d5e:	4681      	mov	r9, r0
 8000d60:	e77c      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	442c      	add	r4, r5
 8000d66:	e747      	b.n	8000bf8 <__udivmoddi4+0x14c>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	442b      	add	r3, r5
 8000d6e:	e72f      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d70:	4638      	mov	r0, r7
 8000d72:	e708      	b.n	8000b86 <__udivmoddi4+0xda>
 8000d74:	4637      	mov	r7, r6
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0xa0>

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
    //if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <DWT_Init+0x2c>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <DWT_Init+0x2c>)
 8000d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d8a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <DWT_Init+0x30>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <DWT_Init+0x30>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <DWT_Init+0x30>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6013      	str	r3, [r2, #0]
    //}
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000edf0 	.word	0xe000edf0
 8000dac:	e0001000 	.word	0xe0001000

08000db0 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <DWT_Delay+0x40>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <DWT_Delay+0x44>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <DWT_Delay+0x48>)
 8000dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc8:	0c9a      	lsrs	r2, r3, #18
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	fb02 f303 	mul.w	r3, r2, r3
 8000dd0:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000dd2:	bf00      	nop
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <DWT_Delay+0x40>)
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d8f8      	bhi.n	8000dd4 <DWT_Delay+0x24>
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e0001000 	.word	0xe0001000
 8000df4:	2000004c 	.word	0x2000004c
 8000df8:	431bde83 	.word	0x431bde83

08000dfc <updateFilterSection>:
 *******************************************************************************/

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/
filterSectionStatus_t updateFilterSection(detectedTags_t *dTag, filterSection_t *currentFilters){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	filterSectionStatus_t status = NO_CHANGE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	77fb      	strb	r3, [r7, #31]
	bool UIDMatched = false;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	77bb      	strb	r3, [r7, #30]
	uint8_t tempZero[10] = {0};
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	811a      	strh	r2, [r3, #8]
	// For Loop Variables
	uint8_t detectedTag;
	uint8_t currentTag;

	// Look for filters that have been removed
	for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	773b      	strb	r3, [r7, #28]
 8000e1e:	e07d      	b.n	8000f1c <updateFilterSection+0x120>
		UIDMatched = false;
 8000e20:	2300      	movs	r3, #0
 8000e22:	77bb      	strb	r3, [r7, #30]
		// Take each current filter tag UID and try to locate it within the detected tags.
		for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000e24:	2300      	movs	r3, #0
 8000e26:	777b      	strb	r3, [r7, #29]
 8000e28:	e02f      	b.n	8000e8a <updateFilterSection+0x8e>
			if (memcmp(dTag->filterTags[detectedTag].tagUID, currentFilters->filter[currentTag].filterTagUID, 8) == 0){
 8000e2a:	7f7a      	ldrb	r2, [r7, #29]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	1c58      	adds	r0, r3, #1
 8000e3a:	7f3a      	ldrb	r2, [r7, #28]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	4413      	add	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	3308      	adds	r3, #8
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4619      	mov	r1, r3
 8000e52:	f015 ff8f 	bl	8016d74 <memcmp>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d113      	bne.n	8000e84 <updateFilterSection+0x88>
				// To Prevent matching 2 empty stages
				if (memcmp(dTag->filterTags[detectedTag].tagUID, tempZero, 8) != 0){
 8000e5c:	7f7a      	ldrb	r2, [r7, #29]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f107 010c 	add.w	r1, r7, #12
 8000e70:	2208      	movs	r2, #8
 8000e72:	4618      	mov	r0, r3
 8000e74:	f015 ff7e 	bl	8016d74 <memcmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <updateFilterSection+0x88>
					// Found a match. The tag is still here.
					UIDMatched = true;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	77bb      	strb	r3, [r7, #30]
					break;
 8000e82:	e005      	b.n	8000e90 <updateFilterSection+0x94>
		for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000e84:	7f7b      	ldrb	r3, [r7, #29]
 8000e86:	3301      	adds	r3, #1
 8000e88:	777b      	strb	r3, [r7, #29]
 8000e8a:	7f7b      	ldrb	r3, [r7, #29]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d9cc      	bls.n	8000e2a <updateFilterSection+0x2e>
				}
			}
		}

		if (!UIDMatched){
 8000e90:	7fbb      	ldrb	r3, [r7, #30]
 8000e92:	f083 0301 	eor.w	r3, r3, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d03c      	beq.n	8000f16 <updateFilterSection+0x11a>
			// Make sure the UID is not all 0's
			if (memcmp(currentFilters->filter[currentTag].filterTagUID, tempZero, 8) != 0){
 8000e9c:	7f3a      	ldrb	r2, [r7, #28]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3308      	adds	r3, #8
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	3303      	adds	r3, #3
 8000eb0:	f107 010c 	add.w	r1, r7, #12
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f015 ff5c 	bl	8016d74 <memcmp>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d029      	beq.n	8000f16 <updateFilterSection+0x11a>
				// A filter has been taken out
				// Clear UID, Name, and Position
				memset(currentFilters->filter[currentTag].filterTagUID, 0x00, 8);
 8000ec2:	7f3a      	ldrb	r2, [r7, #28]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4413      	add	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	3308      	adds	r3, #8
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3303      	adds	r3, #3
 8000ed6:	2208      	movs	r2, #8
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f015 ff64 	bl	8016da8 <memset>
				memset(currentFilters->filter[currentTag].filterName, 0x00, 10);
 8000ee0:	7f3a      	ldrb	r2, [r7, #28]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	220a      	movs	r2, #10
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f015 ff56 	bl	8016da8 <memset>
				currentFilters->filter[currentTag].position = 0;
 8000efc:	7f3a      	ldrb	r2, [r7, #28]
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	4613      	mov	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3313      	adds	r3, #19
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
				status = FILTER_REMOVED;
 8000f12:	2301      	movs	r3, #1
 8000f14:	77fb      	strb	r3, [r7, #31]
	for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++) {
 8000f16:	7f3b      	ldrb	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	773b      	strb	r3, [r7, #28]
 8000f1c:	7f3b      	ldrb	r3, [r7, #28]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	f67f af7e 	bls.w	8000e20 <updateFilterSection+0x24>
			}
		}
	}

	// Look for filters that have been installed
	for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000f24:	2300      	movs	r3, #0
 8000f26:	777b      	strb	r3, [r7, #29]
 8000f28:	e0bc      	b.n	80010a4 <updateFilterSection+0x2a8>
		UIDMatched = false;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	77bb      	strb	r3, [r7, #30]
		// Loop through each detected UID and try to find it within the current filters
		for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++){
 8000f2e:	2300      	movs	r3, #0
 8000f30:	773b      	strb	r3, [r7, #28]
 8000f32:	e01e      	b.n	8000f72 <updateFilterSection+0x176>
			if (memcmp(dTag->filterTags[detectedTag].tagUID, currentFilters->filter[currentTag].filterTagUID, 8) == 0){
 8000f34:	7f7a      	ldrb	r2, [r7, #29]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	1c58      	adds	r0, r3, #1
 8000f44:	7f3a      	ldrb	r2, [r7, #28]
 8000f46:	4613      	mov	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	3308      	adds	r3, #8
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	3303      	adds	r3, #3
 8000f58:	2208      	movs	r2, #8
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f015 ff0a 	bl	8016d74 <memcmp>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <updateFilterSection+0x170>
				// Found a match. The tag is still installed.
				UIDMatched = true;
 8000f66:	2301      	movs	r3, #1
 8000f68:	77bb      	strb	r3, [r7, #30]
				break;
 8000f6a:	e005      	b.n	8000f78 <updateFilterSection+0x17c>
		for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++){
 8000f6c:	7f3b      	ldrb	r3, [r7, #28]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	773b      	strb	r3, [r7, #28]
 8000f72:	7f3b      	ldrb	r3, [r7, #28]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d9dd      	bls.n	8000f34 <updateFilterSection+0x138>
			}
		}

		if (!UIDMatched){
 8000f78:	7fbb      	ldrb	r3, [r7, #30]
 8000f7a:	f083 0301 	eor.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 808c 	beq.w	800109e <updateFilterSection+0x2a2>
			// Make sure the detected UID is not all 0's
			if (memcmp(dTag->filterTags[detectedTag].tagUID, tempZero, 8) != 0){
 8000f86:	7f7a      	ldrb	r2, [r7, #29]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	3301      	adds	r3, #1
 8000f96:	f107 010c 	add.w	r1, r7, #12
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f015 fee9 	bl	8016d74 <memcmp>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d07a      	beq.n	800109e <updateFilterSection+0x2a2>
				// A new filter has been installed.
				bool stageEmpty; // Holder for the empty stage
				uint8_t stagePos;

				// Check the name to see if it isn't all zero's
				if (memcmp(dTag->filterTags[detectedTag].tagName, tempZero, 10) != 0){
 8000fa8:	7f7a      	ldrb	r2, [r7, #29]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4413      	add	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3301      	adds	r3, #1
 8000fba:	f107 010c 	add.w	r1, r7, #12
 8000fbe:	220a      	movs	r2, #10
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f015 fed7 	bl	8016d74 <memcmp>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d066      	beq.n	800109a <updateFilterSection+0x29e>
					// Find first empty stage
					for (stagePos = 0; stagePos < FILTER_SECTION_SIZE; stagePos++){
 8000fcc:	2300      	movs	r3, #0
 8000fce:	76bb      	strb	r3, [r7, #26]
 8000fd0:	e021      	b.n	8001016 <updateFilterSection+0x21a>
						stageEmpty = true; // Assume the stage is empty
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	76fb      	strb	r3, [r7, #27]
						for (uint8_t curFilter = 0; curFilter < FILTER_SECTION_SIZE; curFilter++){
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	767b      	strb	r3, [r7, #25]
 8000fda:	e013      	b.n	8001004 <updateFilterSection+0x208>
							if (currentFilters->filter[curFilter].position == stagePos + 1){
 8000fdc:	7e7a      	ldrb	r2, [r7, #25]
 8000fde:	6839      	ldr	r1, [r7, #0]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	3313      	adds	r3, #19
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	7ebb      	ldrb	r3, [r7, #26]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d101      	bne.n	8000ffe <updateFilterSection+0x202>
								//There is a filter loaded in this position
								stageEmpty = false;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	76fb      	strb	r3, [r7, #27]
						for (uint8_t curFilter = 0; curFilter < FILTER_SECTION_SIZE; curFilter++){
 8000ffe:	7e7b      	ldrb	r3, [r7, #25]
 8001000:	3301      	adds	r3, #1
 8001002:	767b      	strb	r3, [r7, #25]
 8001004:	7e7b      	ldrb	r3, [r7, #25]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d9e8      	bls.n	8000fdc <updateFilterSection+0x1e0>
							}
						}

						if (stageEmpty) {
 800100a:	7efb      	ldrb	r3, [r7, #27]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d106      	bne.n	800101e <updateFilterSection+0x222>
					for (stagePos = 0; stagePos < FILTER_SECTION_SIZE; stagePos++){
 8001010:	7ebb      	ldrb	r3, [r7, #26]
 8001012:	3301      	adds	r3, #1
 8001014:	76bb      	strb	r3, [r7, #26]
 8001016:	7ebb      	ldrb	r3, [r7, #26]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d9da      	bls.n	8000fd2 <updateFilterSection+0x1d6>
 800101c:	e000      	b.n	8001020 <updateFilterSection+0x224>
							// Searched through all Filter positions, and this stage is empty
							break; // Break for loop and access stagePos for first empty stage
 800101e:	bf00      	nop
						}
					}

					// The first open stage is stored in stagePos
					// Write the new UID, Name, and Position
					memcpy(currentFilters->filter[stagePos].filterTagUID, dTag->filterTags[detectedTag].tagUID, 8);
 8001020:	7eba      	ldrb	r2, [r7, #26]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	3308      	adds	r3, #8
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	1cd8      	adds	r0, r3, #3
 8001034:	7f7a      	ldrb	r2, [r7, #29]
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	3301      	adds	r3, #1
 8001044:	2208      	movs	r2, #8
 8001046:	4619      	mov	r1, r3
 8001048:	f015 fea3 	bl	8016d92 <memcpy>
					memcpy(currentFilters->filter[stagePos].filterName, dTag->filterTags[detectedTag].tagName, 10);
 800104c:	7eba      	ldrb	r2, [r7, #26]
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4413      	add	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	4413      	add	r3, r2
 800105c:	1c58      	adds	r0, r3, #1
 800105e:	7f7a      	ldrb	r2, [r7, #29]
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	3308      	adds	r3, #8
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	3301      	adds	r3, #1
 8001070:	220a      	movs	r2, #10
 8001072:	4619      	mov	r1, r3
 8001074:	f015 fe8d 	bl	8016d92 <memcpy>
					currentFilters->filter[stagePos].position = stagePos + 1;
 8001078:	7eba      	ldrb	r2, [r7, #26]
 800107a:	7ebb      	ldrb	r3, [r7, #26]
 800107c:	3301      	adds	r3, #1
 800107e:	b2d8      	uxtb	r0, r3
 8001080:	6839      	ldr	r1, [r7, #0]
 8001082:	4613      	mov	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	440b      	add	r3, r1
 800108e:	3313      	adds	r3, #19
 8001090:	4602      	mov	r2, r0
 8001092:	701a      	strb	r2, [r3, #0]
					status = FILTER_INSTALLED;
 8001094:	2302      	movs	r3, #2
 8001096:	77fb      	strb	r3, [r7, #31]
 8001098:	e001      	b.n	800109e <updateFilterSection+0x2a2>
				} else {
					// The name is unknown
					status = UNKNOWN_FILTER_NAME;
 800109a:	2303      	movs	r3, #3
 800109c:	77fb      	strb	r3, [r7, #31]
	for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 800109e:	7f7b      	ldrb	r3, [r7, #29]
 80010a0:	3301      	adds	r3, #1
 80010a2:	777b      	strb	r3, [r7, #29]
 80010a4:	7f7b      	ldrb	r3, [r7, #29]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	f67f af3f 	bls.w	8000f2a <updateFilterSection+0x12e>
			}
		}
	}

	// Update the filter counts
	currentFilters->filterCount = dTag->tagCount;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	701a      	strb	r2, [r3, #0]

	return status;
 80010b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <setupIOs>:

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/

void setupIOs(void){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af02      	add	r7, sp, #8

	// Initialize the temperature sensor
	LM75B_Init(&hi2c1, AUX_POWER_GPIO_Port, AUX_POWER_Pin);
 80010c6:	2220      	movs	r2, #32
 80010c8:	4921      	ldr	r1, [pc, #132]	; (8001150 <setupIOs+0x90>)
 80010ca:	4822      	ldr	r0, [pc, #136]	; (8001154 <setupIOs+0x94>)
 80010cc:	f002 fc2c 	bl	8003928 <LM75B_Init>

	// Initialize and Setup the E-Paper Display
	EPD_Init(EPD_2_0, &hspi2, &epd1);
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <setupIOs+0x98>)
 80010d2:	4922      	ldr	r1, [pc, #136]	; (800115c <setupIOs+0x9c>)
 80010d4:	2002      	movs	r0, #2
 80010d6:	f000 fdaf 	bl	8001c38 <EPD_Init>

	// Initialize the GFX Library for the EPD
	Canvas_Init(&canvas1, epd1.dots_per_line, epd1.lines_per_display);
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <setupIOs+0x98>)
 80010dc:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 80010de:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <setupIOs+0x98>)
 80010e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80010e2:	461a      	mov	r2, r3
 80010e4:	481e      	ldr	r0, [pc, #120]	; (8001160 <setupIOs+0xa0>)
 80010e6:	f001 ff65 	bl	8002fb4 <Canvas_Init>
	// Text rotation for a vertical display orientation
	canvas_SetRotate(&canvas1, ROTATE_90);
 80010ea:	2101      	movs	r1, #1
 80010ec:	481c      	ldr	r0, [pc, #112]	; (8001160 <setupIOs+0xa0>)
 80010ee:	f002 f98b 	bl	8003408 <canvas_SetRotate>

	// Clear the EPD
	EPD_begin(&epd1);
 80010f2:	4819      	ldr	r0, [pc, #100]	; (8001158 <setupIOs+0x98>)
 80010f4:	f000 fed4 	bl	8001ea0 <EPD_begin>
	EPD_clear(&epd1);
 80010f8:	4817      	ldr	r0, [pc, #92]	; (8001158 <setupIOs+0x98>)
 80010fa:	f001 fa5d 	bl	80025b8 <EPD_clear>
	EPD_end(&epd1);
 80010fe:	4816      	ldr	r0, [pc, #88]	; (8001158 <setupIOs+0x98>)
 8001100:	f001 f93e 	bl	8002380 <EPD_end>

	// Render a string of text to the buffer image
	canvas_setBGImage(&canvas1, image_background);
 8001104:	4917      	ldr	r1, [pc, #92]	; (8001164 <setupIOs+0xa4>)
 8001106:	4816      	ldr	r0, [pc, #88]	; (8001160 <setupIOs+0xa0>)
 8001108:	f002 fb67 	bl	80037da <canvas_setBGImage>
	canvas_DrawStringAt(&canvas1, 10, 3, "FILTERS", &Font16, 1);
 800110c:	2301      	movs	r3, #1
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <setupIOs+0xa8>)
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <setupIOs+0xac>)
 8001116:	2203      	movs	r2, #3
 8001118:	210a      	movs	r1, #10
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <setupIOs+0xa0>)
 800111c:	f002 fb17 	bl	800374e <canvas_DrawStringAt>
	// Update the EPD with the new image
	canvas_PrintEPD(&canvas1, &epd1);
 8001120:	490d      	ldr	r1, [pc, #52]	; (8001158 <setupIOs+0x98>)
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <setupIOs+0xa0>)
 8001124:	f002 fb44 	bl	80037b0 <canvas_PrintEPD>
	//  BQ27441_Init(&hi2c1, &lipo1);
	//  // Setup the Fuel Gauge
	//  BQ27441_Setup(&lipo1);

	// Initialize the SD Card
	dataLoggerInit(SDIO_POWER_GPIO_Port, SDIO_POWER_Pin);
 8001128:	2140      	movs	r1, #64	; 0x40
 800112a:	4811      	ldr	r0, [pc, #68]	; (8001170 <setupIOs+0xb0>)
 800112c:	f000 fb80 	bl	8001830 <dataLoggerInit>

	HAL_GPIO_WritePin(RFID_POWER_GPIO_Port, RFID_POWER_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2108      	movs	r1, #8
 8001134:	480f      	ldr	r0, [pc, #60]	; (8001174 <setupIOs+0xb4>)
 8001136:	f004 fcaf 	bl	8005a98 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800113a:	2005      	movs	r0, #5
 800113c:	f004 f9bc 	bl	80054b8 <HAL_Delay>
	spiInit(&hspi1);
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <setupIOs+0xb8>)
 8001142:	f003 fa03 	bl	800454c <spiInit>

	rfidControllerInit();
 8001146:	f003 f915 	bl	8004374 <rfidControllerInit>
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020400 	.word	0x40020400
 8001154:	20000fec 	.word	0x20000fec
 8001158:	20000eec 	.word	0x20000eec
 800115c:	20000f94 	.word	0x20000f94
 8001160:	20000f78 	.word	0x20000f78
 8001164:	080177f4 	.word	0x080177f4
 8001168:	2000003c 	.word	0x2000003c
 800116c:	080175d8 	.word	0x080175d8
 8001170:	40020800 	.word	0x40020800
 8001174:	40020000 	.word	0x40020000
 8001178:	200010e4 	.word	0x200010e4

0800117c <processIOs>:


void processIOs(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0

//		HAL_GPIO_WritePin(DBG_OUT_TX_GPIO_Port, DBG_OUT_TX_Pin, 0);
//		HAL_GPIO_WritePin(DBG_OUT_RX_GPIO_Port, DBG_OUT_RX_Pin, 0);

		// Keep the RFAL Happy
		rfalWorker();
 8001182:	f00d fa93 	bl	800e6ac <rfalWorker>

		// Check ISR events
		checkISREvents();
 8001186:	f000 f89d 	bl	80012c4 <checkISREvents>

		switch (processState) {
 800118a:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <processIOs+0x128>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b04      	cmp	r3, #4
 8001190:	d8f7      	bhi.n	8001182 <processIOs+0x6>
 8001192:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <processIOs+0x1c>)
 8001194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001198:	080011ad 	.word	0x080011ad
 800119c:	08001207 	.word	0x08001207
 80011a0:	08001237 	.word	0x08001237
 80011a4:	0800123f 	.word	0x0800123f
 80011a8:	0800125d 	.word	0x0800125d

				// Check on the CLI to see if any new commands are present
				//checkCliStatus();

				// Find filters present in the matte box
				checkFilterTags(&dTags);
 80011ac:	483e      	ldr	r0, [pc, #248]	; (80012a8 <processIOs+0x12c>)
 80011ae:	f003 f901 	bl	80043b4 <checkFilterTags>

				// Compare found filter tags with previous filter section
				filterStatus = updateFilterSection(&dTags, &fSection);
 80011b2:	493e      	ldr	r1, [pc, #248]	; (80012ac <processIOs+0x130>)
 80011b4:	483c      	ldr	r0, [pc, #240]	; (80012a8 <processIOs+0x12c>)
 80011b6:	f7ff fe21 	bl	8000dfc <updateFilterSection>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				switch (filterStatus) {
 80011c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d819      	bhi.n	80011fc <processIOs+0x80>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <processIOs+0x54>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011fd 	.word	0x080011fd
 80011d4:	080011e1 	.word	0x080011e1
 80011d8:	080011e1 	.word	0x080011e1
 80011dc:	080011f5 	.word	0x080011f5
						break;

					case FILTER_REMOVED:
					case FILTER_INSTALLED:
						// Update the EPD with the new filter line up.
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80011e0:	2300      	movs	r3, #0
 80011e2:	4a32      	ldr	r2, [pc, #200]	; (80012ac <processIOs+0x130>)
 80011e4:	4932      	ldr	r1, [pc, #200]	; (80012b0 <processIOs+0x134>)
 80011e6:	4833      	ldr	r0, [pc, #204]	; (80012b4 <processIOs+0x138>)
 80011e8:	f001 ff28 	bl	800303c <canvas_DrawFilters>
						// Log to the SD Card
						SDDataLog(&fSection);
 80011ec:	482f      	ldr	r0, [pc, #188]	; (80012ac <processIOs+0x130>)
 80011ee:	f000 fcb7 	bl	8001b60 <SDDataLog>
						break;
 80011f2:	e003      	b.n	80011fc <processIOs+0x80>

					case UNKNOWN_FILTER_NAME:
						// Change state
						processState = UPDATE_FILTER_NAME;
 80011f4:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <processIOs+0x128>)
 80011f6:	2202      	movs	r2, #2
 80011f8:	701a      	strb	r2, [r3, #0]
						break;
 80011fa:	bf00      	nop
//				}

//				gotoSleep();
//				SystemClock_Config();

				HAL_Delay(500);
 80011fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001200:	f004 f95a 	bl	80054b8 <HAL_Delay>
				break;
 8001204:	e04d      	b.n	80012a2 <processIOs+0x126>

			case CHANGE_FILTER_POS:
				// Wait for another button press. Timeout after X amount of time.
				if (timeoutCtr >= FILTER_POSITION_TIMEOUT) {
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <processIOs+0x13c>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800120e:	d308      	bcc.n	8001222 <processIOs+0xa6>
					// Draw stored
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 8001210:	2300      	movs	r3, #0
 8001212:	4a26      	ldr	r2, [pc, #152]	; (80012ac <processIOs+0x130>)
 8001214:	4926      	ldr	r1, [pc, #152]	; (80012b0 <processIOs+0x134>)
 8001216:	4827      	ldr	r0, [pc, #156]	; (80012b4 <processIOs+0x138>)
 8001218:	f001 ff10 	bl	800303c <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <processIOs+0x128>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
				}

				HAL_Delay(1);
 8001222:	2001      	movs	r0, #1
 8001224:	f004 f948 	bl	80054b8 <HAL_Delay>
				timeoutCtr++;
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <processIOs+0x13c>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	3301      	adds	r3, #1
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <processIOs+0x13c>)
 8001232:	801a      	strh	r2, [r3, #0]
				break;
 8001234:	e035      	b.n	80012a2 <processIOs+0x126>

			case UPDATE_FILTER_NAME:

				// Place Holder
				processState = NORMAL_OPERATION;
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <processIOs+0x128>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
				break;
 800123c:	e031      	b.n	80012a2 <processIOs+0x126>

			case RFID_WAKEUP_MODE:
				// Handle an external wake up from the RFID chip
				if (rfalWakeUpModeHasWoke()){
 800123e:	f00e fa5f 	bl	800f700 <rfalWakeUpModeHasWoke>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d02b      	beq.n	80012a0 <processIOs+0x124>
					rfalWakeUpModeStop();
 8001248:	f00e fb46 	bl	800f8d8 <rfalWakeUpModeStop>
					processState = NORMAL_OPERATION;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <processIOs+0x128>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS("INTERRUPT\r\n", 11);
 8001252:	210b      	movs	r1, #11
 8001254:	4819      	ldr	r0, [pc, #100]	; (80012bc <processIOs+0x140>)
 8001256:	f015 f911 	bl	801647c <CDC_Transmit_FS>
				}
				break;
 800125a:	e021      	b.n	80012a0 <processIOs+0x124>
			case TEST_MODE:

				st25r3916MeasureAmplitude(&ampMeas);
 800125c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8001260:	4618      	mov	r0, r3
 8001262:	f00e fd10 	bl	800fc86 <st25r3916MeasureAmplitude>
				st25r3916MeasurePhase(&phsMeas);
 8001266:	f107 0325 	add.w	r3, r7, #37	; 0x25
 800126a:	4618      	mov	r0, r3
 800126c:	f00e fd1a 	bl	800fca4 <st25r3916MeasurePhase>

				sprintf(tmpStr, "Amplitude: %d, Phase: %d\r\n", ampMeas, phsMeas);
 8001270:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001274:	461a      	mov	r2, r3
 8001276:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800127a:	1d38      	adds	r0, r7, #4
 800127c:	4910      	ldr	r1, [pc, #64]	; (80012c0 <processIOs+0x144>)
 800127e:	f015 fe53 	bl	8016f28 <siprintf>

				CDC_Transmit_FS(tmpStr, strlen((char *)tmpStr));
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4618      	mov	r0, r3
 8001286:	f7fe ffab 	bl	80001e0 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f015 f8f2 	bl	801647c <CDC_Transmit_FS>
				HAL_Delay(100);
 8001298:	2064      	movs	r0, #100	; 0x64
 800129a:	f004 f90d 	bl	80054b8 <HAL_Delay>
				break;
 800129e:	e000      	b.n	80012a2 <processIOs+0x126>
				break;
 80012a0:	bf00      	nop
		rfalWorker();
 80012a2:	e76e      	b.n	8001182 <processIOs+0x6>
 80012a4:	20000254 	.word	0x20000254
 80012a8:	20000eb4 	.word	0x20000eb4
 80012ac:	20000f3c 	.word	0x20000f3c
 80012b0:	20000eec 	.word	0x20000eec
 80012b4:	20000f78 	.word	0x20000f78
 80012b8:	20000f86 	.word	0x20000f86
 80012bc:	080175e0 	.word	0x080175e0
 80012c0:	080175ec 	.word	0x080175ec

080012c4 <checkISREvents>:
}

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
void checkISREvents(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
	bool posFound;
//	int8_t slotIndex[FILTER_SECTION_SIZE] = {-1};

	if (isr_flags > 0){
 80012ca:	4bb2      	ldr	r3, [pc, #712]	; (8001594 <checkISREvents+0x2d0>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 81b6 	beq.w	8001640 <checkISREvents+0x37c>
		if (isr_flags & INIT_FAT_FS) {
 80012d4:	4baf      	ldr	r3, [pc, #700]	; (8001594 <checkISREvents+0x2d0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <checkISREvents+0x24>
			// An SD Card was inserted, Re-initialize FatFs and DataLogger
			dataLoggerInit(SDIO_POWER_GPIO_Port, SDIO_POWER_Pin);
 80012e0:	2140      	movs	r1, #64	; 0x40
 80012e2:	48ad      	ldr	r0, [pc, #692]	; (8001598 <checkISREvents+0x2d4>)
 80012e4:	f000 faa4 	bl	8001830 <dataLoggerInit>
		}

		if (isr_flags & DEINIT_FAT_FS) {
 80012e8:	4baa      	ldr	r3, [pc, #680]	; (8001594 <checkISREvents+0x2d0>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <checkISREvents+0x34>
			// An SD Card was removed, De-initialize FatFs and DataLogger
			dataLoggerDeInit();
 80012f4:	f000 faee 	bl	80018d4 <dataLoggerDeInit>
		}

		if (isr_flags & BTN_1_SH_PRESS) {
 80012f8:	4ba6      	ldr	r3, [pc, #664]	; (8001594 <checkISREvents+0x2d0>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d053      	beq.n	80013ac <checkISREvents+0xe8>
			// Button 1 was short pressed.
			switch (processState) {
 8001304:	4ba5      	ldr	r3, [pc, #660]	; (800159c <checkISREvents+0x2d8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d84f      	bhi.n	80013ac <checkISREvents+0xe8>
 800130c:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <checkISREvents+0x50>)
 800130e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001312:	bf00      	nop
 8001314:	08001325 	.word	0x08001325
 8001318:	0800137d 	.word	0x0800137d
 800131c:	080013ad 	.word	0x080013ad
 8001320:	08001325 	.word	0x08001325
				case RFID_WAKEUP_MODE:
					// TODO - Disable IRQs during the button handling events???
				case NORMAL_OPERATION:
					// Ensure the filter position actually has something in it
					posFound = false;
 8001324:	2300      	movs	r3, #0
 8001326:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001328:	2300      	movs	r3, #0
 800132a:	71bb      	strb	r3, [r7, #6]
 800132c:	e010      	b.n	8001350 <checkISREvents+0x8c>

						if (fSection.filter[i].position == 1) {
 800132e:	79ba      	ldrb	r2, [r7, #6]
 8001330:	499b      	ldr	r1, [pc, #620]	; (80015a0 <checkISREvents+0x2dc>)
 8001332:	4613      	mov	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	440b      	add	r3, r1
 800133e:	3313      	adds	r3, #19
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <checkISREvents+0x86>
							posFound = true;
 8001346:	2301      	movs	r3, #1
 8001348:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	3301      	adds	r3, #1
 800134e:	71bb      	strb	r3, [r7, #6]
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d9eb      	bls.n	800132e <checkISREvents+0x6a>
						}
					}

					if (posFound) {
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d026      	beq.n	80013aa <checkISREvents+0xe6>
						// Change filter position. Store button 1 as the first button.
						changeFilterPos1 = 1;			// Log Button 1 as the first Selected Filter
 800135c:	4b91      	ldr	r3, [pc, #580]	; (80015a4 <checkISREvents+0x2e0>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
						timeoutCtr = 0;
 8001362:	4b91      	ldr	r3, [pc, #580]	; (80015a8 <checkISREvents+0x2e4>)
 8001364:	2200      	movs	r2, #0
 8001366:	801a      	strh	r2, [r3, #0]
						// Highlight the Filter Name
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 1);
 8001368:	2301      	movs	r3, #1
 800136a:	4a8d      	ldr	r2, [pc, #564]	; (80015a0 <checkISREvents+0x2dc>)
 800136c:	498f      	ldr	r1, [pc, #572]	; (80015ac <checkISREvents+0x2e8>)
 800136e:	4890      	ldr	r0, [pc, #576]	; (80015b0 <checkISREvents+0x2ec>)
 8001370:	f001 fe64 	bl	800303c <canvas_DrawFilters>
						processState = CHANGE_FILTER_POS;
 8001374:	4b89      	ldr	r3, [pc, #548]	; (800159c <checkISREvents+0x2d8>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
					}
					break;
 800137a:	e016      	b.n	80013aa <checkISREvents+0xe6>
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.

					// Check to see if the same button was pressed
					if (changeFilterPos1 != 1) {
 800137c:	4b89      	ldr	r3, [pc, #548]	; (80015a4 <checkISREvents+0x2e0>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d005      	beq.n	8001390 <checkISREvents+0xcc>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 1);
 8001384:	4b87      	ldr	r3, [pc, #540]	; (80015a4 <checkISREvents+0x2e0>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2101      	movs	r1, #1
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f968 	bl	8001660 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 8001390:	4b84      	ldr	r3, [pc, #528]	; (80015a4 <checkISREvents+0x2e0>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 8001396:	2300      	movs	r3, #0
 8001398:	4a81      	ldr	r2, [pc, #516]	; (80015a0 <checkISREvents+0x2dc>)
 800139a:	4984      	ldr	r1, [pc, #528]	; (80015ac <checkISREvents+0x2e8>)
 800139c:	4884      	ldr	r0, [pc, #528]	; (80015b0 <checkISREvents+0x2ec>)
 800139e:	f001 fe4d 	bl	800303c <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 80013a2:	4b7e      	ldr	r3, [pc, #504]	; (800159c <checkISREvents+0x2d8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
					break;
 80013a8:	e000      	b.n	80013ac <checkISREvents+0xe8>
					break;
 80013aa:	bf00      	nop
					// If the top slot is selected, load new page
					break;
			}
		}

		if (isr_flags & BTN_1_LG_PRESS) {
 80013ac:	4b79      	ldr	r3, [pc, #484]	; (8001594 <checkISREvents+0x2d0>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d026      	beq.n	8001406 <checkISREvents+0x142>
			// Button 1 was long pressed. Update state to Update Filter Name
			switch (processState) {
 80013b8:	4b78      	ldr	r3, [pc, #480]	; (800159c <checkISREvents+0x2d8>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d822      	bhi.n	8001406 <checkISREvents+0x142>
 80013c0:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <checkISREvents+0x104>)
 80013c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c6:	bf00      	nop
 80013c8:	08001407 	.word	0x08001407
 80013cc:	080013d9 	.word	0x080013d9
 80013d0:	08001407 	.word	0x08001407
 80013d4:	08001407 	.word	0x08001407
					break;

				case CHANGE_FILTER_POS:
					// Even though a long press was executed, we still want the same function as a short press
					// Check to see if the same button was pressed
					if (changeFilterPos1 != 1) {
 80013d8:	4b72      	ldr	r3, [pc, #456]	; (80015a4 <checkISREvents+0x2e0>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d005      	beq.n	80013ec <checkISREvents+0x128>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 1);
 80013e0:	4b70      	ldr	r3, [pc, #448]	; (80015a4 <checkISREvents+0x2e0>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f93a 	bl	8001660 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 80013ec:	4b6d      	ldr	r3, [pc, #436]	; (80015a4 <checkISREvents+0x2e0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80013f2:	2300      	movs	r3, #0
 80013f4:	4a6a      	ldr	r2, [pc, #424]	; (80015a0 <checkISREvents+0x2dc>)
 80013f6:	496d      	ldr	r1, [pc, #436]	; (80015ac <checkISREvents+0x2e8>)
 80013f8:	486d      	ldr	r0, [pc, #436]	; (80015b0 <checkISREvents+0x2ec>)
 80013fa:	f001 fe1f 	bl	800303c <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 80013fe:	4b67      	ldr	r3, [pc, #412]	; (800159c <checkISREvents+0x2d8>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
					break;
 8001404:	bf00      	nop
				case RFID_WAKEUP_MODE:
					break;
			}
		}

		if (isr_flags & BTN_2_SH_PRESS) {
 8001406:	4b63      	ldr	r3, [pc, #396]	; (8001594 <checkISREvents+0x2d0>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	d052      	beq.n	80014b8 <checkISREvents+0x1f4>
			// Button 2 was short pressed. Update state to Change Filter Position
			switch (processState) {
 8001412:	4b62      	ldr	r3, [pc, #392]	; (800159c <checkISREvents+0x2d8>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d84e      	bhi.n	80014b8 <checkISREvents+0x1f4>
 800141a:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <checkISREvents+0x15c>)
 800141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001420:	08001431 	.word	0x08001431
 8001424:	08001489 	.word	0x08001489
 8001428:	080014b9 	.word	0x080014b9
 800142c:	08001431 	.word	0x08001431
				case RFID_WAKEUP_MODE:
				// TODO - Disable IRQs during the button handling events???
				case NORMAL_OPERATION:
					// Ensure the filter position actually has something in it
					posFound = false;
 8001430:	2300      	movs	r3, #0
 8001432:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001434:	2300      	movs	r3, #0
 8001436:	717b      	strb	r3, [r7, #5]
 8001438:	e010      	b.n	800145c <checkISREvents+0x198>

						if (fSection.filter[i].position == 2) {
 800143a:	797a      	ldrb	r2, [r7, #5]
 800143c:	4958      	ldr	r1, [pc, #352]	; (80015a0 <checkISREvents+0x2dc>)
 800143e:	4613      	mov	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	440b      	add	r3, r1
 800144a:	3313      	adds	r3, #19
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d101      	bne.n	8001456 <checkISREvents+0x192>
							posFound = true;
 8001452:	2301      	movs	r3, #1
 8001454:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001456:	797b      	ldrb	r3, [r7, #5]
 8001458:	3301      	adds	r3, #1
 800145a:	717b      	strb	r3, [r7, #5]
 800145c:	797b      	ldrb	r3, [r7, #5]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d9eb      	bls.n	800143a <checkISREvents+0x176>
						}
					}

					if (posFound) {
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d026      	beq.n	80014b6 <checkISREvents+0x1f2>
						// Change filter position. Store button 1 as the first button.
						changeFilterPos1 = 2;			// Log Button 2 as the first Selected Filter
 8001468:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <checkISREvents+0x2e0>)
 800146a:	2202      	movs	r2, #2
 800146c:	701a      	strb	r2, [r3, #0]
						timeoutCtr = 0;
 800146e:	4b4e      	ldr	r3, [pc, #312]	; (80015a8 <checkISREvents+0x2e4>)
 8001470:	2200      	movs	r2, #0
 8001472:	801a      	strh	r2, [r3, #0]
						// Highlight the Filter Name
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 2);
 8001474:	2302      	movs	r3, #2
 8001476:	4a4a      	ldr	r2, [pc, #296]	; (80015a0 <checkISREvents+0x2dc>)
 8001478:	494c      	ldr	r1, [pc, #304]	; (80015ac <checkISREvents+0x2e8>)
 800147a:	484d      	ldr	r0, [pc, #308]	; (80015b0 <checkISREvents+0x2ec>)
 800147c:	f001 fdde 	bl	800303c <canvas_DrawFilters>
						processState = CHANGE_FILTER_POS;
 8001480:	4b46      	ldr	r3, [pc, #280]	; (800159c <checkISREvents+0x2d8>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001486:	e016      	b.n	80014b6 <checkISREvents+0x1f2>
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.

					// Check to see if the same button was pressed
					if (changeFilterPos1 != 2) {
 8001488:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <checkISREvents+0x2e0>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d005      	beq.n	800149c <checkISREvents+0x1d8>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 2);
 8001490:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <checkISREvents+0x2e0>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2102      	movs	r1, #2
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f8e2 	bl	8001660 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <checkISREvents+0x2e0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80014a2:	2300      	movs	r3, #0
 80014a4:	4a3e      	ldr	r2, [pc, #248]	; (80015a0 <checkISREvents+0x2dc>)
 80014a6:	4941      	ldr	r1, [pc, #260]	; (80015ac <checkISREvents+0x2e8>)
 80014a8:	4841      	ldr	r0, [pc, #260]	; (80015b0 <checkISREvents+0x2ec>)
 80014aa:	f001 fdc7 	bl	800303c <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 80014ae:	4b3b      	ldr	r3, [pc, #236]	; (800159c <checkISREvents+0x2d8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
					break;
 80014b4:	e000      	b.n	80014b8 <checkISREvents+0x1f4>
					break;
 80014b6:	bf00      	nop
				case UPDATE_FILTER_NAME:
					break;
			}
		}

		if (isr_flags & BTN_2_LG_PRESS) {
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <checkISREvents+0x2d0>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f003 0320 	and.w	r3, r3, #32
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d026      	beq.n	8001512 <checkISREvents+0x24e>
			// Button 2 was long pressed. Update state to Update Filter Name
			switch (processState) {
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <checkISREvents+0x2d8>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d822      	bhi.n	8001512 <checkISREvents+0x24e>
 80014cc:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <checkISREvents+0x210>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	08001513 	.word	0x08001513
 80014d8:	080014e5 	.word	0x080014e5
 80014dc:	08001513 	.word	0x08001513
 80014e0:	08001513 	.word	0x08001513
					break;

				case CHANGE_FILTER_POS:
					// Even though a long press was executed, we still want the same function as a short press
					// Check to see if the same button was pressed
					if (changeFilterPos1 != 2) {
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <checkISREvents+0x2e0>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d005      	beq.n	80014f8 <checkISREvents+0x234>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 2);
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <checkISREvents+0x2e0>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2102      	movs	r1, #2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f8b4 	bl	8001660 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <checkISREvents+0x2e0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80014fe:	2300      	movs	r3, #0
 8001500:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <checkISREvents+0x2dc>)
 8001502:	492a      	ldr	r1, [pc, #168]	; (80015ac <checkISREvents+0x2e8>)
 8001504:	482a      	ldr	r0, [pc, #168]	; (80015b0 <checkISREvents+0x2ec>)
 8001506:	f001 fd99 	bl	800303c <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <checkISREvents+0x2d8>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
					break;
 8001510:	bf00      	nop
				case RFID_WAKEUP_MODE:
					break;
			}
		}

		if (isr_flags & BTN_3_SH_PRESS) {
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <checkISREvents+0x2d0>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800151a:	2b00      	cmp	r3, #0
 800151c:	d062      	beq.n	80015e4 <checkISREvents+0x320>
			// Button 3 was short pressed. Update state to Change Filter Position
			switch (processState) {
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <checkISREvents+0x2d8>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d85e      	bhi.n	80015e4 <checkISREvents+0x320>
 8001526:	a201      	add	r2, pc, #4	; (adr r2, 800152c <checkISREvents+0x268>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	0800153d 	.word	0x0800153d
 8001530:	080015b5 	.word	0x080015b5
 8001534:	080015e5 	.word	0x080015e5
 8001538:	0800153d 	.word	0x0800153d
				case RFID_WAKEUP_MODE:
				// TODO - Disable IRQs during the button handling events???
				case NORMAL_OPERATION:
					// Ensure the filter position actually has something in it
					posFound = false;
 800153c:	2300      	movs	r3, #0
 800153e:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001540:	2300      	movs	r3, #0
 8001542:	713b      	strb	r3, [r7, #4]
 8001544:	e010      	b.n	8001568 <checkISREvents+0x2a4>

						if (fSection.filter[i].position == 3) {
 8001546:	793a      	ldrb	r2, [r7, #4]
 8001548:	4915      	ldr	r1, [pc, #84]	; (80015a0 <checkISREvents+0x2dc>)
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	440b      	add	r3, r1
 8001556:	3313      	adds	r3, #19
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d101      	bne.n	8001562 <checkISREvents+0x29e>
							posFound = true;
 800155e:	2301      	movs	r3, #1
 8001560:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001562:	793b      	ldrb	r3, [r7, #4]
 8001564:	3301      	adds	r3, #1
 8001566:	713b      	strb	r3, [r7, #4]
 8001568:	793b      	ldrb	r3, [r7, #4]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d9eb      	bls.n	8001546 <checkISREvents+0x282>
						}
					}

					if (posFound) {
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d036      	beq.n	80015e2 <checkISREvents+0x31e>
						// Change filter position. Store button 1 as the first button.
						changeFilterPos1 = 3;			// Log Button 3 as the first Selected Filter
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <checkISREvents+0x2e0>)
 8001576:	2203      	movs	r2, #3
 8001578:	701a      	strb	r2, [r3, #0]
						timeoutCtr = 0;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <checkISREvents+0x2e4>)
 800157c:	2200      	movs	r2, #0
 800157e:	801a      	strh	r2, [r3, #0]
						// Highlight the Filter Name
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 3);
 8001580:	2303      	movs	r3, #3
 8001582:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <checkISREvents+0x2dc>)
 8001584:	4909      	ldr	r1, [pc, #36]	; (80015ac <checkISREvents+0x2e8>)
 8001586:	480a      	ldr	r0, [pc, #40]	; (80015b0 <checkISREvents+0x2ec>)
 8001588:	f001 fd58 	bl	800303c <canvas_DrawFilters>
						processState = CHANGE_FILTER_POS;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <checkISREvents+0x2d8>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001592:	e026      	b.n	80015e2 <checkISREvents+0x31e>
 8001594:	20000eb0 	.word	0x20000eb0
 8001598:	40020800 	.word	0x40020800
 800159c:	20000254 	.word	0x20000254
 80015a0:	20000f3c 	.word	0x20000f3c
 80015a4:	20000f84 	.word	0x20000f84
 80015a8:	20000f86 	.word	0x20000f86
 80015ac:	20000eec 	.word	0x20000eec
 80015b0:	20000f78 	.word	0x20000f78
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.

					// Check to see if the same button was pressed
					if (changeFilterPos1 != 3) {
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <checkISREvents+0x384>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d005      	beq.n	80015c8 <checkISREvents+0x304>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 3);
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <checkISREvents+0x384>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2103      	movs	r1, #3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f84c 	bl	8001660 <changeFilterPosition>
					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <checkISREvents+0x384>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80015ce:	2300      	movs	r3, #0
 80015d0:	4a1e      	ldr	r2, [pc, #120]	; (800164c <checkISREvents+0x388>)
 80015d2:	491f      	ldr	r1, [pc, #124]	; (8001650 <checkISREvents+0x38c>)
 80015d4:	481f      	ldr	r0, [pc, #124]	; (8001654 <checkISREvents+0x390>)
 80015d6:	f001 fd31 	bl	800303c <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <checkISREvents+0x394>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
					break;
 80015e0:	e000      	b.n	80015e4 <checkISREvents+0x320>
					break;
 80015e2:	bf00      	nop
				case UPDATE_FILTER_NAME:
					break;
			}
		}

		if (isr_flags & BTN_3_LG_PRESS) {
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <checkISREvents+0x398>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	da25      	bge.n	800163a <checkISREvents+0x376>
			// Button 3 was long pressed. Update state to Update Filter Name
			switch (processState) {
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <checkISREvents+0x394>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d821      	bhi.n	800163a <checkISREvents+0x376>
 80015f6:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <checkISREvents+0x338>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	0800163b 	.word	0x0800163b
 8001600:	0800160d 	.word	0x0800160d
 8001604:	0800163b 	.word	0x0800163b
 8001608:	0800163b 	.word	0x0800163b
					break;

				case CHANGE_FILTER_POS:
					// Even though a long press was executed, we still want the same function as a short press
					// Check to see if the same button was pressed
					if (changeFilterPos1 != 3) {
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <checkISREvents+0x384>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d005      	beq.n	8001620 <checkISREvents+0x35c>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 3);
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <checkISREvents+0x384>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2103      	movs	r1, #3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f820 	bl	8001660 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <checkISREvents+0x384>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 8001626:	2300      	movs	r3, #0
 8001628:	4a08      	ldr	r2, [pc, #32]	; (800164c <checkISREvents+0x388>)
 800162a:	4909      	ldr	r1, [pc, #36]	; (8001650 <checkISREvents+0x38c>)
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <checkISREvents+0x390>)
 800162e:	f001 fd05 	bl	800303c <canvas_DrawFilters>
					processState = NORMAL_OPERATION;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <checkISREvents+0x394>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
					break;
 8001638:	bf00      	nop
				case RFID_WAKEUP_MODE:
					break;
			}
		}

		isr_flags = 0;	// Reset the flag after handling
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <checkISREvents+0x398>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
	}
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000f84 	.word	0x20000f84
 800164c:	20000f3c 	.word	0x20000f3c
 8001650:	20000eec 	.word	0x20000eec
 8001654:	20000f78 	.word	0x20000f78
 8001658:	20000254 	.word	0x20000254
 800165c:	20000eb0 	.word	0x20000eb0

08001660 <changeFilterPosition>:

void changeFilterPosition(uint8_t firstBtn, uint8_t secondBtn) {
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	460a      	mov	r2, r1
 800166a:	71fb      	strb	r3, [r7, #7]
 800166c:	4613      	mov	r3, r2
 800166e:	71bb      	strb	r3, [r7, #6]
	int8_t slotIndex[FILTER_SECTION_SIZE] = {-1, -1, -1};
 8001670:	4a5c      	ldr	r2, [pc, #368]	; (80017e4 <changeFilterPosition+0x184>)
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	4611      	mov	r1, r2
 800167a:	8019      	strh	r1, [r3, #0]
 800167c:	3302      	adds	r3, #2
 800167e:	0c12      	lsrs	r2, r2, #16
 8001680:	701a      	strb	r2, [r3, #0]

	// The filter position switch is done with 2 steps.
	// Step 1. Loop through the filter positions, and transfer the positions into the proper slotIndex
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	e022      	b.n	80016ce <changeFilterPosition+0x6e>
		for (uint8_t j = 0; j < FILTER_SECTION_SIZE; j++) {
 8001688:	2300      	movs	r3, #0
 800168a:	73bb      	strb	r3, [r7, #14]
 800168c:	e019      	b.n	80016c2 <changeFilterPosition+0x62>
			// Look for the filter in the associated slot index
			if (fSection.filter[j].position == i + 1) {
 800168e:	7bba      	ldrb	r2, [r7, #14]
 8001690:	4955      	ldr	r1, [pc, #340]	; (80017e8 <changeFilterPosition+0x188>)
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	440b      	add	r3, r1
 800169e:	3313      	adds	r3, #19
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	3301      	adds	r3, #1
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d107      	bne.n	80016bc <changeFilterPosition+0x5c>
				slotIndex[i] = j;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80016b2:	f107 0110 	add.w	r1, r7, #16
 80016b6:	440b      	add	r3, r1
 80016b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for (uint8_t j = 0; j < FILTER_SECTION_SIZE; j++) {
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
 80016be:	3301      	adds	r3, #1
 80016c0:	73bb      	strb	r3, [r7, #14]
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d9e2      	bls.n	800168e <changeFilterPosition+0x2e>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	3301      	adds	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d9d9      	bls.n	8001688 <changeFilterPosition+0x28>
		}
	}

	// Step 2. If there are any open spots, they will be represented as -1 within slotIndex.
	// We need to overwrite any -1's with usable filter indexes. That is what this loop is doing.
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	737b      	strb	r3, [r7, #13]
 80016d8:	e030      	b.n	800173c <changeFilterPosition+0xdc>
		// Look for the filter in the associated slot index
		if (fSection.filter[i].position == 0) {
 80016da:	7b7a      	ldrb	r2, [r7, #13]
 80016dc:	4942      	ldr	r1, [pc, #264]	; (80017e8 <changeFilterPosition+0x188>)
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	440b      	add	r3, r1
 80016ea:	3313      	adds	r3, #19
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d121      	bne.n	8001736 <changeFilterPosition+0xd6>
			// Find the first empty position
			uint8_t j = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	733b      	strb	r3, [r7, #12]
			while ((slotIndex[j] >= 0) & (j < FILTER_SECTION_SIZE)){
 80016f6:	e002      	b.n	80016fe <changeFilterPosition+0x9e>
				j++;
 80016f8:	7b3b      	ldrb	r3, [r7, #12]
 80016fa:	3301      	adds	r3, #1
 80016fc:	733b      	strb	r3, [r7, #12]
			while ((slotIndex[j] >= 0) & (j < FILTER_SECTION_SIZE)){
 80016fe:	7b3b      	ldrb	r3, [r7, #12]
 8001700:	f107 0210 	add.w	r2, r7, #16
 8001704:	4413      	add	r3, r2
 8001706:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 800170a:	43db      	mvns	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	09db      	lsrs	r3, r3, #7
 8001710:	b2da      	uxtb	r2, r3
 8001712:	7b3b      	ldrb	r3, [r7, #12]
 8001714:	2b02      	cmp	r3, #2
 8001716:	bf94      	ite	ls
 8001718:	2301      	movls	r3, #1
 800171a:	2300      	movhi	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	4013      	ands	r3, r2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1e8      	bne.n	80016f8 <changeFilterPosition+0x98>
			}
			slotIndex[j] = i;
 8001726:	7b3b      	ldrb	r3, [r7, #12]
 8001728:	f997 200d 	ldrsb.w	r2, [r7, #13]
 800172c:	f107 0110 	add.w	r1, r7, #16
 8001730:	440b      	add	r3, r1
 8001732:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001736:	7b7b      	ldrb	r3, [r7, #13]
 8001738:	3301      	adds	r3, #1
 800173a:	737b      	strb	r3, [r7, #13]
 800173c:	7b7b      	ldrb	r3, [r7, #13]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d9cb      	bls.n	80016da <changeFilterPosition+0x7a>
	// FYI. slotIndex is the place holder for the fSection.filter index. EG -> It is to be used within fSection.filter[slotIndex]

	// Now, we have a slotIndex that is referencing the proper filter order and we just need to reposition the filters now:
	// 1st button pressed goes to 2nd button slot
	// Check to see if there is a tag in the position
	if (fSection.filter[slotIndex[firstBtn - 1]].position > 0) {
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	3b01      	subs	r3, #1
 8001746:	f107 0210 	add.w	r2, r7, #16
 800174a:	4413      	add	r3, r2
 800174c:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 8001750:	461a      	mov	r2, r3
 8001752:	4925      	ldr	r1, [pc, #148]	; (80017e8 <changeFilterPosition+0x188>)
 8001754:	4613      	mov	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	440b      	add	r3, r1
 8001760:	3313      	adds	r3, #19
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d011      	beq.n	800178c <changeFilterPosition+0x12c>
		fSection.filter[slotIndex[firstBtn - 1]].position = secondBtn;
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	3b01      	subs	r3, #1
 800176c:	f107 0210 	add.w	r2, r7, #16
 8001770:	4413      	add	r3, r2
 8001772:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 8001776:	461a      	mov	r2, r3
 8001778:	491b      	ldr	r1, [pc, #108]	; (80017e8 <changeFilterPosition+0x188>)
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	440b      	add	r3, r1
 8001786:	3313      	adds	r3, #19
 8001788:	79ba      	ldrb	r2, [r7, #6]
 800178a:	701a      	strb	r2, [r3, #0]
	}

	// 2nd button pressed goes to 1st button slot
	if (fSection.filter[slotIndex[secondBtn - 1]].position > 0) {
 800178c:	79bb      	ldrb	r3, [r7, #6]
 800178e:	3b01      	subs	r3, #1
 8001790:	f107 0210 	add.w	r2, r7, #16
 8001794:	4413      	add	r3, r2
 8001796:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 800179a:	461a      	mov	r2, r3
 800179c:	4912      	ldr	r1, [pc, #72]	; (80017e8 <changeFilterPosition+0x188>)
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4413      	add	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	3313      	adds	r3, #19
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d011      	beq.n	80017d6 <changeFilterPosition+0x176>
		fSection.filter[slotIndex[secondBtn - 1]].position = firstBtn;
 80017b2:	79bb      	ldrb	r3, [r7, #6]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	f107 0210 	add.w	r2, r7, #16
 80017ba:	4413      	add	r3, r2
 80017bc:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4909      	ldr	r1, [pc, #36]	; (80017e8 <changeFilterPosition+0x188>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	3313      	adds	r3, #19
 80017d2:	79fa      	ldrb	r2, [r7, #7]
 80017d4:	701a      	strb	r2, [r3, #0]
	}
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	08017608 	.word	0x08017608
 80017e8:	20000f3c 	.word	0x20000f3c

080017ec <isLogDirValid>:
static uint16_t sdPowerPin;

/******************************************************************************
 * PRIVATE FUNCTIONS
 *******************************************************************************/
bool isLogDirValid(void) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08e      	sub	sp, #56	; 0x38
 80017f0:	af00      	add	r7, sp, #0
	bool retVal = false;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DIR logDir;

	// Try to open the directory
	FRESULT res = f_opendir(&logDir, DL_LOG_DIR_PATH);
 80017f8:	463b      	mov	r3, r7
 80017fa:	490c      	ldr	r1, [pc, #48]	; (800182c <isLogDirValid+0x40>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f013 fd6a 	bl	80152d6 <f_opendir>
 8001802:	4603      	mov	r3, r0
 8001804:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (FR_OK == res)
 8001808:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800180c:	2b00      	cmp	r3, #0
 800180e:	d106      	bne.n	800181e <isLogDirValid+0x32>
	{
		// The directory exists, close it back up
		f_closedir(&logDir);
 8001810:	463b      	mov	r3, r7
 8001812:	4618      	mov	r0, r3
 8001814:	f013 fdd2 	bl	80153bc <f_closedir>
		retVal = true;
 8001818:	2301      	movs	r3, #1
 800181a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	return retVal;
 800181e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001822:	4618      	mov	r0, r3
 8001824:	3738      	adds	r7, #56	; 0x38
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	0801760c 	.word	0x0801760c

08001830 <dataLoggerInit>:

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/

DL_error dataLoggerInit(GPIO_TypeDef* sd_Port, uint16_t sd_Pin) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
	DL_error retVal = DATALOG_ERR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]

	// Check RTC. Initialize if needed.
	if (!rtcModuleIsInit()) {
 8001840:	f002 ff32 	bl	80046a8 <rtcModuleIsInit>
 8001844:	4603      	mov	r3, r0
 8001846:	f083 0301 	eor.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <dataLoggerInit+0x26>
		rtcModuleInit(&hrtc);
 8001850:	481b      	ldr	r0, [pc, #108]	; (80018c0 <dataLoggerInit+0x90>)
 8001852:	f002 ff15 	bl	8004680 <rtcModuleInit>
	}

	//Bind GPIO Port and Pin
	if (sdPowerPort == NULL) {
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <dataLoggerInit+0x94>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d105      	bne.n	800186a <dataLoggerInit+0x3a>
		sdPowerPort = sd_Port;
 800185e:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <dataLoggerInit+0x94>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6013      	str	r3, [r2, #0]
		sdPowerPin = sd_Pin;
 8001864:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <dataLoggerInit+0x98>)
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	8013      	strh	r3, [r2, #0]
	}

	if (startSDCard() != DATALOG_OK) {
 800186a:	f000 f83f 	bl	80018ec <startSDCard>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <dataLoggerInit+0x48>
		return DATALOG_ERR;
 8001874:	2301      	movs	r3, #1
 8001876:	e01f      	b.n	80018b8 <dataLoggerInit+0x88>
	}

	// Verify that FatFs is initialized
	if (FatFsIsModuleInit()) {
 8001878:	f00b f8ba 	bl	800c9f0 <FatFsIsModuleInit>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d014      	beq.n	80018ac <dataLoggerInit+0x7c>
		if (!isLogDirValid()) {
 8001882:	f7ff ffb3 	bl	80017ec <isLogDirValid>
 8001886:	4603      	mov	r3, r0
 8001888:	f083 0301 	eor.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00e      	beq.n	80018b0 <dataLoggerInit+0x80>
			// Create the new directory and file
			FRESULT fr;
			fr = f_mkdir(DL_LOG_DIR_PATH);
 8001892:	480e      	ldr	r0, [pc, #56]	; (80018cc <dataLoggerInit+0x9c>)
 8001894:	f013 fdb8 	bl	8015408 <f_mkdir>
 8001898:	4603      	mov	r3, r0
 800189a:	73bb      	strb	r3, [r7, #14]
			if (fr == FR_OK) {
 800189c:	7bbb      	ldrb	r3, [r7, #14]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <dataLoggerInit+0x78>
				// The directory was created successfully
				retVal = DATALOG_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	e003      	b.n	80018b0 <dataLoggerInit+0x80>
			} else {
				// FatFs Error
				return retVal;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	e005      	b.n	80018b8 <dataLoggerInit+0x88>
			}
		}
	} else {
		// FatFs Not Initialized
		return retVal;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	e003      	b.n	80018b8 <dataLoggerInit+0x88>
	}

	dlModInit = true;
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <dataLoggerInit+0xa0>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
	return retVal;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20001040 	.word	0x20001040
 80018c4:	20000258 	.word	0x20000258
 80018c8:	2000025c 	.word	0x2000025c
 80018cc:	0801760c 	.word	0x0801760c
 80018d0:	20000255 	.word	0x20000255

080018d4 <dataLoggerDeInit>:

DL_error dataLoggerDeInit(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	dlModInit = false;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <dataLoggerDeInit+0x14>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
	return stopSDCard();
 80018de:	f000 f837 	bl	8001950 <stopSDCard>
 80018e2:	4603      	mov	r3, r0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000255 	.word	0x20000255

080018ec <startSDCard>:

DL_error startSDCard(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
	// See if a card is installed
	if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_SET){
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	4813      	ldr	r0, [pc, #76]	; (8001944 <startSDCard+0x58>)
 80018f6:	f004 f8b7 	bl	8005a68 <HAL_GPIO_ReadPin>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <startSDCard+0x18>
		// No card is installed.
		return DATALOG_ERR;
 8001900:	2301      	movs	r3, #1
 8001902:	e01a      	b.n	800193a <startSDCard+0x4e>
	}

	HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_SET);
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <startSDCard+0x5c>)
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <startSDCard+0x60>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	2201      	movs	r2, #1
 800190e:	4619      	mov	r1, r3
 8001910:	f004 f8c2 	bl	8005a98 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001914:	2005      	movs	r0, #5
 8001916:	f003 fdcf 	bl	80054b8 <HAL_Delay>
	DL_error ret = FatFsInit();
 800191a:	f00b f823 	bl	800c964 <FatFsInit>
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]

	// If there is a problem with the FatFs, turn off the power.
	if (ret != DATALOG_OK) {
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <startSDCard+0x4c>
		HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_RESET);
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <startSDCard+0x5c>)
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <startSDCard+0x60>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	2200      	movs	r2, #0
 8001932:	4619      	mov	r1, r3
 8001934:	f004 f8b0 	bl	8005a98 <HAL_GPIO_WritePin>
	}
	return ret;
 8001938:	79fb      	ldrb	r3, [r7, #7]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40020800 	.word	0x40020800
 8001948:	20000258 	.word	0x20000258
 800194c:	2000025c 	.word	0x2000025c

08001950 <stopSDCard>:

DL_error stopSDCard(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	// Unlink the FatFs and turn off the SD Card
	DL_error ret = FatFsDeInit();
 8001956:	f00b f83b 	bl	800c9d0 <FatFsDeInit>
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_RESET);
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <stopSDCard+0x28>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <stopSDCard+0x2c>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	f004 f895 	bl	8005a98 <HAL_GPIO_WritePin>
	return ret;
 800196e:	79fb      	ldrb	r3, [r7, #7]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000258 	.word	0x20000258
 800197c:	2000025c 	.word	0x2000025c

08001980 <logDataToSD>:
/*	This function get's called from the FilterMachine whenever there's
 * a filter change. It first fills out a Log Record, then sends it to
 * this function to be copied to the SD Card.
 * */

DL_error logDataToSD(sdLog_record_t *sdLog) {
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b0ba      	sub	sp, #232	; 0xe8
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]

	// Ensure the modules are initialized
	if (dlModInit) {
 8001988:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <logDataToSD+0x1bc>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80d0 	beq.w	8001b32 <logDataToSD+0x1b2>

		// Verify that the directory has been initialized
		if (!isLogDirValid()) {
 8001992:	f7ff ff2b 	bl	80017ec <isLogDirValid>
 8001996:	4603      	mov	r3, r0
 8001998:	f083 0301 	eor.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <logDataToSD+0x26>
			return DATALOG_ERR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0c6      	b.n	8001b34 <logDataToSD+0x1b4>
		}

		// The log directory is valid. Start organizing the data.
		// Convert all non-string fields
		char dateStamp_s[11] = {0};
 80019a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	f8c3 2007 	str.w	r2, [r3, #7]
		char logFileName_s[35] = {0};
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	2223      	movs	r2, #35	; 0x23
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f015 f9f3 	bl	8016da8 <memset>
		char timeStamp_s[11] = {0};
 80019c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	f8c3 2007 	str.w	r2, [r3, #7]

		// Compile the Date
		sprintf(dateStamp_s, "%02d-%02d-%d",
				sdLog->dateTimeStamp.month,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7bdb      	ldrb	r3, [r3, #15]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 80019d4:	461a      	mov	r2, r3
				sdLog->dateTimeStamp.day,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7b9b      	ldrb	r3, [r3, #14]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 80019da:	4619      	mov	r1, r3
				sdLog->dateTimeStamp.year);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	8a1b      	ldrh	r3, [r3, #16]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 80019e0:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	460b      	mov	r3, r1
 80019e8:	4955      	ldr	r1, [pc, #340]	; (8001b40 <logDataToSD+0x1c0>)
 80019ea:	f015 fa9d 	bl	8016f28 <siprintf>

		// File Name Format: FilterLog_Date_Matte Box ID
		// Example: FilterLog_01-01-2020_LBSA0100P
		sprintf(logFileName_s, "FilterLog_%s_%s.csv",
				dateStamp_s,
				sdLog->matteBoxID);
 80019ee:	687b      	ldr	r3, [r7, #4]
		sprintf(logFileName_s, "FilterLog_%s_%s.csv",
 80019f0:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80019f4:	f107 0008 	add.w	r0, r7, #8
 80019f8:	4952      	ldr	r1, [pc, #328]	; (8001b44 <logDataToSD+0x1c4>)
 80019fa:	f015 fa95 	bl	8016f28 <siprintf>

		// Compile the time
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
				sdLog->dateTimeStamp.hours,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7a9b      	ldrb	r3, [r3, #10]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 8001a02:	461a      	mov	r2, r3
				sdLog->dateTimeStamp.minutes,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7adb      	ldrb	r3, [r3, #11]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 8001a08:	4619      	mov	r1, r3
				sdLog->dateTimeStamp.seconds);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 8001a0e:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	460b      	mov	r3, r1
 8001a16:	494c      	ldr	r1, [pc, #304]	; (8001b48 <logDataToSD+0x1c8>)
 8001a18:	f015 fa86 	bl	8016f28 <siprintf>

		// Prepare to write the file
		FRESULT fr;
		FIL* logFil = malloc(sizeof(FIL));
 8001a1c:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001a20:	f015 f998 	bl	8016d54 <malloc>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

		// Change to the directory
		fr = f_chdir(DL_LOG_DIR_PATH);
 8001a2a:	4848      	ldr	r0, [pc, #288]	; (8001b4c <logDataToSD+0x1cc>)
 8001a2c:	f013 fc09 	bl	8015242 <f_chdir>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		// If the file exists, open it. Otherwise, create the log file.
		fr = f_open(logFil, (const TCHAR*) logFileName_s, FA_OPEN_APPEND | FA_WRITE);
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	2232      	movs	r2, #50	; 0x32
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001a42:	f013 f823 	bl	8014a8c <f_open>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

		if (fr != FR_OK) {
 8001a4c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <logDataToSD+0xd8>
			// Can't open the file
			return DATALOG_ERR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e06d      	b.n	8001b34 <logDataToSD+0x1b4>
		}

		// The file is open and ready. Write the fields to the file.
		// Check to see if the file is empty
		if (logFil->fptr == 0){
 8001a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d12b      	bne.n	8001aba <logDataToSD+0x13a>
			// Brand New File. Make the Headers
			char headers[100] = {0};
 8001a62:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a66:	2264      	movs	r2, #100	; 0x64
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f015 f99c 	bl	8016da8 <memset>

			sprintf(headers, "Light Widow Matte Box\nMatte Box ID:,%s\nDate:,%s\nNotes:\n\n",
					sdLog->matteBoxID,
 8001a70:	687a      	ldr	r2, [r7, #4]
			sprintf(headers, "Light Widow Matte Box\nMatte Box ID:,%s\nDate:,%s\nNotes:\n\n",
 8001a72:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a76:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001a7a:	4935      	ldr	r1, [pc, #212]	; (8001b50 <logDataToSD+0x1d0>)
 8001a7c:	f015 fa54 	bl	8016f28 <siprintf>
					dateStamp_s);
			const char tmpStr[50] = "Time,Filter Slot 1,Filter Slot 2,Filter Slot 3\n";
 8001a80:	4b34      	ldr	r3, [pc, #208]	; (8001b54 <logDataToSD+0x1d4>)
 8001a82:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001a86:	461d      	mov	r5, r3
 8001a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			f_puts(headers, (FIL*) logFil);
 8001a9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001aa2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f014 fa66 	bl	8015f78 <f_puts>
			f_puts(tmpStr, (FIL*) logFil);
 8001aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f014 fa5f 	bl	8015f78 <f_puts>
		}

		// Write the Time Stamp
		f_puts(timeStamp_s, (FIL*) logFil);
 8001aba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001abe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f014 fa58 	bl	8015f78 <f_puts>

		// Write the Filter Name in Slot 1
		f_puts(sdLog->filterNames[0].filterName, (FIL*) logFil);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3312      	adds	r3, #18
 8001acc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f014 fa51 	bl	8015f78 <f_puts>
		f_puts(DL_DELIM, (FIL*) logFil);
 8001ad6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001ada:	481f      	ldr	r0, [pc, #124]	; (8001b58 <logDataToSD+0x1d8>)
 8001adc:	f014 fa4c 	bl	8015f78 <f_puts>

		// Write the Filter Name in Slot 2
		f_puts(sdLog->filterNames[1].filterName, (FIL*) logFil);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	331d      	adds	r3, #29
 8001ae4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f014 fa45 	bl	8015f78 <f_puts>
		f_puts(DL_DELIM, (FIL*) logFil);
 8001aee:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001af2:	4819      	ldr	r0, [pc, #100]	; (8001b58 <logDataToSD+0x1d8>)
 8001af4:	f014 fa40 	bl	8015f78 <f_puts>

		// Write the Filter Name in Slot 3
		f_puts(sdLog->filterNames[2].filterName, (FIL*) logFil);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3328      	adds	r3, #40	; 0x28
 8001afc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b00:	4618      	mov	r0, r3
 8001b02:	f014 fa39 	bl	8015f78 <f_puts>

		// Make a new line
		f_puts(DL_ENDL, (FIL*) logFil);
 8001b06:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b0a:	4814      	ldr	r0, [pc, #80]	; (8001b5c <logDataToSD+0x1dc>)
 8001b0c:	f014 fa34 	bl	8015f78 <f_puts>

		// Finish and Close the file
		fr = f_close((FIL*) logFil);
 8001b10:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001b14:	f013 fb6b 	bl	80151ee <f_close>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

		// De-allocate the FatFs
		free(logFil);
 8001b1e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001b22:	f015 f91f 	bl	8016d64 <free>

		if (fr == FR_OK) {
 8001b26:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <logDataToSD+0x1b2>
			// The file closed successfully
			return DATALOG_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <logDataToSD+0x1b4>
		}
	}
	return DATALOG_ERR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	37e0      	adds	r7, #224	; 0xe0
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	20000255 	.word	0x20000255
 8001b40:	0801761c 	.word	0x0801761c
 8001b44:	0801762c 	.word	0x0801762c
 8001b48:	08017640 	.word	0x08017640
 8001b4c:	0801760c 	.word	0x0801760c
 8001b50:	08017650 	.word	0x08017650
 8001b54:	08017694 	.word	0x08017694
 8001b58:	0801768c 	.word	0x0801768c
 8001b5c:	08017690 	.word	0x08017690

08001b60 <SDDataLog>:

DL_error SDDataLog(filterSection_t *fSection) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b096      	sub	sp, #88	; 0x58
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef dateStamp;
	RTC_TimeTypeDef timeStamp;
	sdLog_record_t sdLog = {0};
 8001b68:	f107 0308 	add.w	r3, r7, #8
 8001b6c:	2234      	movs	r2, #52	; 0x34
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f015 f919 	bl	8016da8 <memset>

	if (!dlModInit) {
 8001b76:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <SDDataLog+0xd0>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	f083 0301 	eor.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SDDataLog+0x28>
		return DATALOG_ERR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e04f      	b.n	8001c28 <SDDataLog+0xc8>
	}

	// See if FATFS and SD Card are ready


	strcpy(sdLog.matteBoxID, MATTE_BOX_HW_ID);
 8001b88:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <SDDataLog+0xd4>)
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b90:	c303      	stmia	r3!, {r0, r1}
 8001b92:	801a      	strh	r2, [r3, #0]

	// Get the Time and Store it
	rtcGetDateTime(&dateStamp, &timeStamp);
 8001b94:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f002 fd8e 	bl	80046c0 <rtcGetDateTime>

	// Load the DateTime results into the DataLog structure
	sdLog.dateTimeStamp.month = dateStamp.Month;
 8001ba4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001ba8:	75fb      	strb	r3, [r7, #23]
	sdLog.dateTimeStamp.day = dateStamp.Date;
 8001baa:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001bae:	75bb      	strb	r3, [r7, #22]
	sdLog.dateTimeStamp.year = dateStamp.Year + 2000;
 8001bb0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	833b      	strh	r3, [r7, #24]

	sdLog.dateTimeStamp.hours = timeStamp.Hours;
 8001bbe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001bc2:	74bb      	strb	r3, [r7, #18]
	sdLog.dateTimeStamp.minutes = timeStamp.Minutes;
 8001bc4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001bc8:	74fb      	strb	r3, [r7, #19]
	sdLog.dateTimeStamp.seconds = timeStamp.Seconds;
 8001bca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001bce:	753b      	strb	r3, [r7, #20]

	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001bd6:	e01d      	b.n	8001c14 <SDDataLog+0xb4>
		strcpy(&sdLog.filterNames[i].filterName, fSection->filter[i].filterName);
 8001bd8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001bdc:	f107 0108 	add.w	r1, r7, #8
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	3310      	adds	r3, #16
 8001bec:	440b      	add	r3, r1
 8001bee:	1c98      	adds	r0, r3, #2
 8001bf0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	3301      	adds	r3, #1
 8001c04:	4619      	mov	r1, r3
 8001c06:	f015 f9af 	bl	8016f68 <strcpy>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001c0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001c14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d9dd      	bls.n	8001bd8 <SDDataLog+0x78>
	}

	// Log to the SD Card
	return logDataToSD(&sdLog);
 8001c1c:	f107 0308 	add.w	r3, r7, #8
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fead 	bl	8001980 <logDataToSD>
 8001c26:	4603      	mov	r3, r0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3758      	adds	r7, #88	; 0x58
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000255 	.word	0x20000255
 8001c34:	080176c8 	.word	0x080176c8

08001c38 <EPD_Init>:
static void SPI_read(EPD_HandleTypeDef *epd, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);

// Global Variables
static bool setTemp = false;

void EPD_Init(EPD_size size, SPI_HandleTypeDef *spi, EPD_HandleTypeDef *epd) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	73fb      	strb	r3, [r7, #15]

	DWT_Init();											// Microsecond Delay required by the e-paper
 8001c46:	f7ff f899 	bl	8000d7c <DWT_Init>

	epd->status = EPD_OK;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
	epd->spi = spi;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	629a      	str	r2, [r3, #40]	; 0x28
	epd->size = size;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	705a      	strb	r2, [r3, #1]

	epd->panel_on_pin = EPD_POWER_Pin;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	805a      	strh	r2, [r3, #2]
	epd->discharge_pin = EPD_DISCHARGE_Pin;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	811a      	strh	r2, [r3, #8]
	epd->reset_pin = EPD_NRST_Pin;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	821a      	strh	r2, [r3, #16]
	epd->busy_pin = EPD_BUSY_Pin;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2204      	movs	r2, #4
 8001c72:	831a      	strh	r2, [r3, #24]
	epd->spi_cs_pin = EPD_SPI_CS_Pin;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	841a      	strh	r2, [r3, #32]

	epd->panel_on_port = EPD_POWER_GPIO_Port;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a81      	ldr	r2, [pc, #516]	; (8001e84 <EPD_Init+0x24c>)
 8001c7e:	605a      	str	r2, [r3, #4]
	epd->discharge_port = EPD_DISCHARGE_GPIO_Port;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a81      	ldr	r2, [pc, #516]	; (8001e88 <EPD_Init+0x250>)
 8001c84:	60da      	str	r2, [r3, #12]
	epd->reset_port = EPD_NRST_GPIO_Port;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a7f      	ldr	r2, [pc, #508]	; (8001e88 <EPD_Init+0x250>)
 8001c8a:	615a      	str	r2, [r3, #20]
	epd->busy_port = EPD_BUSY_GPIO_Port;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a7e      	ldr	r2, [pc, #504]	; (8001e88 <EPD_Init+0x250>)
 8001c90:	61da      	str	r2, [r3, #28]
	epd->spi_cs_port = EPD_SPI_CS_GPIO_Port;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a7b      	ldr	r2, [pc, #492]	; (8001e84 <EPD_Init+0x24c>)
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24

	epd->base_stage_time = 480; // milliseconds
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c9e:	859a      	strh	r2, [r3, #44]	; 0x2c

	switch (size) {
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d80b      	bhi.n	8001cc0 <EPD_Init+0x88>
 8001ca8:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <EPD_Init+0x78>)
 8001caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cae:	bf00      	nop
 8001cb0:	08001cff 	.word	0x08001cff
 8001cb4:	08001d3d 	.word	0x08001d3d
 8001cb8:	08001d7b 	.word	0x08001d7b
 8001cbc:	08001dc1 	.word	0x08001dc1
		default:
		case EPD_1_44:  // default so no change
			epd->lines_per_display = 96;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2260      	movs	r2, #96	; 0x60
 8001cc4:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 128;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 128 / 8;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2210      	movs	r2, #16
 8001cd0:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 96 / 4;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2218      	movs	r2, #24
 8001cd6:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00};
			epd->channel_select = cs;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a6c      	ldr	r2, [pc, #432]	; (8001e8c <EPD_Init+0x254>)
 8001cdc:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2209      	movs	r2, #9
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
			epd->middle_scan = true; // => data-scan-data ELSE: scan-data-scan
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->pre_border_byte = false;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_ZERO;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001cfc:	e080      	b.n	8001e00 <EPD_Init+0x1c8>

		case EPD_1_9: {
			epd->lines_per_display = 128;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 144;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2290      	movs	r2, #144	; 0x90
 8001d08:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 144 / 8;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2212      	movs	r2, #18
 8001d0e:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->middle_scan = false;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->bytes_per_scan = 128 / 4 / 2; // scan/2 - data - scan/2
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2210      	movs	r2, #16
 8001d1c:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0xff};
			epd->channel_select = cs;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a5b      	ldr	r2, [pc, #364]	; (8001e90 <EPD_Init+0x258>)
 8001d22:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2209      	movs	r2, #9
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = false;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_SET;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2202      	movs	r2, #2
 8001d36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001d3a:	e061      	b.n	8001e00 <EPD_Init+0x1c8>
		}

		case EPD_2_0: {
			epd->lines_per_display = 96;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2260      	movs	r2, #96	; 0x60
 8001d40:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 200;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	22c8      	movs	r2, #200	; 0xc8
 8001d46:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 200 / 8;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2219      	movs	r2, #25
 8001d4c:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 96 / 4;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2218      	movs	r2, #24
 8001d52:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00};
			epd->channel_select = cs;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a4f      	ldr	r2, [pc, #316]	; (8001e94 <EPD_Init+0x25c>)
 8001d58:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2209      	movs	r2, #9
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40
			epd->middle_scan = true; // => data-scan-data ELSE: scan-data-scan
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->pre_border_byte = true;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001d78:	e042      	b.n	8001e00 <EPD_Init+0x1c8>
		}

		case EPD_2_6: {
			epd->base_stage_time = 630; // milliseconds
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f240 2276 	movw	r2, #630	; 0x276
 8001d80:	859a      	strh	r2, [r3, #44]	; 0x2c
			epd->lines_per_display = 128;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 232;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	22e8      	movs	r2, #232	; 0xe8
 8001d8c:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 232 / 8;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	221d      	movs	r2, #29
 8001d92:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->middle_scan = false;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->bytes_per_scan = 128 / 4 / 2; // scan/2 - data - scan/2
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2210      	movs	r2, #16
 8001da0:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0xff};
			epd->channel_select = cs;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a3c      	ldr	r2, [pc, #240]	; (8001e98 <EPD_Init+0x260>)
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2209      	movs	r2, #9
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = false;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_SET;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001dbe:	e01f      	b.n	8001e00 <EPD_Init+0x1c8>
		}

		case EPD_2_7: {
			epd->base_stage_time = 630; // milliseconds
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f240 2276 	movw	r2, #630	; 0x276
 8001dc6:	859a      	strh	r2, [r3, #44]	; 0x2c
			epd->lines_per_display = 176;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	22b0      	movs	r2, #176	; 0xb0
 8001dcc:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 264;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001dd4:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 264 / 8;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2221      	movs	r2, #33	; 0x21
 8001dda:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 176 / 4;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	222c      	movs	r2, #44	; 0x2c
 8001de0:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00};
			epd->channel_select = cs;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <EPD_Init+0x264>)
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2209      	movs	r2, #9
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = true;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001dfe:	bf00      	nop
		}
	}

	// an initial default temperature
	epd->factored_stage_time = epd->base_stage_time;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	85da      	strh	r2, [r3, #46]	; 0x2e

	// Set a base temperature
	EPD_set_temperature(epd, 25);
 8001e08:	2119      	movs	r1, #25
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fbaa 	bl	8002564 <EPD_set_temperature>

	// buffer for frame line
	if (epd->middle_scan) {
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00a      	beq.n	8001e30 <EPD_Init+0x1f8>
		epd->line_buffer_size = 2 * epd->bytes_per_line
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001e1e:	005b      	lsls	r3, r3, #1
			+ epd->bytes_per_scan
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001e24:	4413      	add	r3, r2
			+ 3; // command byte, pre_border_byte, border byte
 8001e26:	3303      	adds	r3, #3
 8001e28:	461a      	mov	r2, r3
		epd->line_buffer_size = 2 * epd->bytes_per_line
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	649a      	str	r2, [r3, #72]	; 0x48
 8001e2e:	e00a      	b.n	8001e46 <EPD_Init+0x20e>
	} else {
		epd->line_buffer_size = epd->bytes_per_line
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001e34:	461a      	mov	r2, r3
			+ 2 * epd->bytes_per_scan
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
			+ 3; // command byte, pre_border_byte, border byte
 8001e3e:	3303      	adds	r3, #3
 8001e40:	461a      	mov	r2, r3
		epd->line_buffer_size = epd->bytes_per_line
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	649a      	str	r2, [r3, #72]	; 0x48
	}

	epd->line_buffer = malloc(epd->line_buffer_size + 4096);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f014 ff80 	bl	8016d54 <malloc>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	645a      	str	r2, [r3, #68]	; 0x44

	// ensure zero
	memset(epd->line_buffer, 0x00, epd->line_buffer_size);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e64:	461a      	mov	r2, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	f014 ff9e 	bl	8016da8 <memset>

	// ensure I/O is all set to ZERO
	power_off(epd);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fb4d 	bl	800250c <power_off>

	// COG state for partial update
	epd->COG_on = false;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	20000018 	.word	0x20000018
 8001e98:	20000024 	.word	0x20000024
 8001e9c:	20000030 	.word	0x20000030

08001ea0 <EPD_begin>:
	return epd->status;
}


// starts an EPD sequence
void EPD_begin(EPD_HandleTypeDef *epd) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0a8      	sub	sp, #160	; 0xa0
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	int8_t currentTemperature;

	// Nothing to do when COG still on
	if (epd->COG_on) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 823f 	bne.w	8002332 <EPD_begin+0x492>
		return;
	}

	if (setTemp) {
 8001eb4:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <EPD_begin+0x1d4>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d015      	beq.n	8001ee8 <EPD_begin+0x48>
		// setTemp flag is set from outside to prevent over-sampling
		if (LM75B_ReadTemp(&currentTemperature) == LM75B_OK) {
 8001ebc:	f107 030f 	add.w	r3, r7, #15
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f001 fd75 	bl	80039b0 <LM75B_ReadTemp>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d106      	bne.n	8001eda <EPD_begin+0x3a>
			EPD_set_temperature(epd, currentTemperature);
 8001ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fb46 	bl	8002564 <EPD_set_temperature>
 8001ed8:	e003      	b.n	8001ee2 <EPD_begin+0x42>
		} else {
			EPD_set_temperature(epd, 25);
 8001eda:	2119      	movs	r1, #25
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fb41 	bl	8002564 <EPD_set_temperature>
		}
		setTemp = false;
 8001ee2:	4b64      	ldr	r3, [pc, #400]	; (8002074 <EPD_begin+0x1d4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
	}

	// assume OK
	epd->status = EPD_OK;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]

	// power up sequence
	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6958      	ldr	r0, [r3, #20]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	8a1b      	ldrh	r3, [r3, #16]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f003 fdcd 	bl	8005a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, LOW);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6858      	ldr	r0, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	885b      	ldrh	r3, [r3, #2]
 8001f06:	2200      	movs	r2, #0
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f003 fdc5 	bl	8005a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, LOW);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68d8      	ldr	r0, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	891b      	ldrh	r3, [r3, #8]
 8001f16:	2200      	movs	r2, #0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f003 fdbd 	bl	8005a98 <HAL_GPIO_WritePin>

	Delay_ms(5);
 8001f1e:	2005      	movs	r0, #5
 8001f20:	f003 faca 	bl	80054b8 <HAL_Delay>
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	8c1b      	ldrh	r3, [r3, #32]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f003 fdb2 	bl	8005a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, HIGH);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6858      	ldr	r0, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	885b      	ldrh	r3, [r3, #2]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f003 fdaa 	bl	8005a98 <HAL_GPIO_WritePin>
	Delay_ms(10);
 8001f44:	200a      	movs	r0, #10
 8001f46:	f003 fab7 	bl	80054b8 <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, HIGH);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6958      	ldr	r0, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	8a1b      	ldrh	r3, [r3, #16]
 8001f52:	2201      	movs	r2, #1
 8001f54:	4619      	mov	r1, r3
 8001f56:	f003 fd9f 	bl	8005a98 <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001f5a:	2005      	movs	r0, #5
 8001f5c:	f003 faac 	bl	80054b8 <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6958      	ldr	r0, [r3, #20]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8a1b      	ldrh	r3, [r3, #16]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f003 fd94 	bl	8005a98 <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001f70:	2005      	movs	r0, #5
 8001f72:	f003 faa1 	bl	80054b8 <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, HIGH);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6958      	ldr	r0, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8a1b      	ldrh	r3, [r3, #16]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4619      	mov	r1, r3
 8001f82:	f003 fd89 	bl	8005a98 <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001f86:	2005      	movs	r0, #5
 8001f88:	f003 fa96 	bl	80054b8 <HAL_Delay>

	// wait for COG to become ready
	while (HIGH == HAL_GPIO_ReadPin(epd->busy_port, epd->busy_pin)) {
 8001f8c:	e002      	b.n	8001f94 <EPD_begin+0xf4>
		Delay_us(10);
 8001f8e:	200a      	movs	r0, #10
 8001f90:	f7fe ff0e 	bl	8000db0 <DWT_Delay>
	while (HIGH == HAL_GPIO_ReadPin(epd->busy_port, epd->busy_pin)) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69da      	ldr	r2, [r3, #28]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	8b1b      	ldrh	r3, [r3, #24]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f003 fd62 	bl	8005a68 <HAL_GPIO_ReadPin>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d0f1      	beq.n	8001f8e <EPD_begin+0xee>
	}

	// read the COG ID
	uint8_t receive_buffer[2];
	SPI_read(epd, CU8(0x71, 0x00), receive_buffer, sizeof(receive_buffer));
 8001faa:	2371      	movs	r3, #113	; 0x71
 8001fac:	743b      	strb	r3, [r7, #16]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	747b      	strb	r3, [r7, #17]
 8001fb2:	f107 020c 	add.w	r2, r7, #12
 8001fb6:	f107 0110 	add.w	r1, r7, #16
 8001fba:	2302      	movs	r3, #2
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 ffcf 	bl	8002f60 <SPI_read>
	SPI_read(epd, CU8(0x71, 0x00), receive_buffer, sizeof(receive_buffer));
 8001fc2:	2371      	movs	r3, #113	; 0x71
 8001fc4:	753b      	strb	r3, [r7, #20]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	757b      	strb	r3, [r7, #21]
 8001fca:	f107 020c 	add.w	r2, r7, #12
 8001fce:	f107 0114 	add.w	r1, r7, #20
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 ffc3 	bl	8002f60 <SPI_read>
	int cog_id = receive_buffer[1];
 8001fda:	7b7b      	ldrb	r3, [r7, #13]
 8001fdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (0x02 != (0x0f & cog_id)) {
 8001fe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d006      	beq.n	8001ffa <EPD_begin+0x15a>
		epd->status = EPD_UNSUPPORTED_COG;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fa8a 	bl	800250c <power_off>
		return;
 8001ff8:	e19c      	b.n	8002334 <EPD_begin+0x494>
	}

	// Disable OE
	SPI_send(epd, CU8(0x70, 0x02), 2);
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <EPD_begin+0x1d8>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	833b      	strh	r3, [r7, #24]
 8002000:	f107 0318 	add.w	r3, r7, #24
 8002004:	2202      	movs	r2, #2
 8002006:	4619      	mov	r1, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 ff83 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x40), 2);
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <EPD_begin+0x1dc>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	83bb      	strh	r3, [r7, #28]
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	2202      	movs	r2, #2
 800201a:	4619      	mov	r1, r3
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 ff79 	bl	8002f14 <SPI_send>

	// check breakage
	SPI_send(epd, CU8(0x70, 0x0f), 2);
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <EPD_begin+0x1e0>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	843b      	strh	r3, [r7, #32]
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	2202      	movs	r2, #2
 800202e:	4619      	mov	r1, r3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 ff6f 	bl	8002f14 <SPI_send>
	SPI_read(epd, CU8(0x73, 0x00), receive_buffer, sizeof(receive_buffer));
 8002036:	2373      	movs	r3, #115	; 0x73
 8002038:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002042:	f107 020c 	add.w	r2, r7, #12
 8002046:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800204a:	2302      	movs	r3, #2
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 ff87 	bl	8002f60 <SPI_read>
	int broken_panel = receive_buffer[1];
 8002052:	7b7b      	ldrb	r3, [r7, #13]
 8002054:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (0x00 == (0x80 & broken_panel)) {
 8002058:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10f      	bne.n	8002084 <EPD_begin+0x1e4>
		epd->status = EPD_PANEL_BROKEN;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fa4e 	bl	800250c <power_off>
		return;
 8002070:	e160      	b.n	8002334 <EPD_begin+0x494>
 8002072:	bf00      	nop
 8002074:	2000025e 	.word	0x2000025e
 8002078:	080176f8 	.word	0x080176f8
 800207c:	080176fc 	.word	0x080176fc
 8002080:	08017700 	.word	0x08017700
	}

	// power saving mode
	SPI_send(epd, CU8(0x70, 0x0b), 2);
 8002084:	4bad      	ldr	r3, [pc, #692]	; (800233c <EPD_begin+0x49c>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	853b      	strh	r3, [r7, #40]	; 0x28
 800208a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800208e:	2202      	movs	r2, #2
 8002090:	4619      	mov	r1, r3
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 ff3e 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x02), 2);
 8002098:	4ba9      	ldr	r3, [pc, #676]	; (8002340 <EPD_begin+0x4a0>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800209e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a2:	2202      	movs	r2, #2
 80020a4:	4619      	mov	r1, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 ff34 	bl	8002f14 <SPI_send>

	// channel select
	SPI_send(epd, CU8(0x70, 0x01), 2);
 80020ac:	4ba5      	ldr	r3, [pc, #660]	; (8002344 <EPD_begin+0x4a4>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	863b      	strh	r3, [r7, #48]	; 0x30
 80020b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020b6:	2202      	movs	r2, #2
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 ff2a 	bl	8002f14 <SPI_send>
	SPI_send(epd, epd->channel_select, epd->channel_select_length);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 ff21 	bl	8002f14 <SPI_send>

	// high power mode osc
	SPI_send(epd, CU8(0x70, 0x07), 2);
 80020d2:	4b9d      	ldr	r3, [pc, #628]	; (8002348 <EPD_begin+0x4a8>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80020d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020dc:	2202      	movs	r2, #2
 80020de:	4619      	mov	r1, r3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 ff17 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0xd1), 2);
 80020e6:	4b99      	ldr	r3, [pc, #612]	; (800234c <EPD_begin+0x4ac>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80020ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020f0:	2202      	movs	r2, #2
 80020f2:	4619      	mov	r1, r3
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 ff0d 	bl	8002f14 <SPI_send>

	// power setting
	SPI_send(epd, CU8(0x70, 0x08), 2);
 80020fa:	4b95      	ldr	r3, [pc, #596]	; (8002350 <EPD_begin+0x4b0>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002100:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002104:	2202      	movs	r2, #2
 8002106:	4619      	mov	r1, r3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 ff03 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x02), 2);
 800210e:	4b8c      	ldr	r3, [pc, #560]	; (8002340 <EPD_begin+0x4a0>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002116:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800211a:	2202      	movs	r2, #2
 800211c:	4619      	mov	r1, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fef8 	bl	8002f14 <SPI_send>

	// Vcom level
	SPI_send(epd, CU8(0x70, 0x09), 2);
 8002124:	4b8b      	ldr	r3, [pc, #556]	; (8002354 <EPD_begin+0x4b4>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800212c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002130:	2202      	movs	r2, #2
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 feed 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0xc2), 2);
 800213a:	4b87      	ldr	r3, [pc, #540]	; (8002358 <EPD_begin+0x4b8>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002142:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002146:	2202      	movs	r2, #2
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fee2 	bl	8002f14 <SPI_send>

	// power setting
	SPI_send(epd, CU8(0x70, 0x04), 2);
 8002150:	4b82      	ldr	r3, [pc, #520]	; (800235c <EPD_begin+0x4bc>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002158:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800215c:	2202      	movs	r2, #2
 800215e:	4619      	mov	r1, r3
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fed7 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x03), 2);
 8002166:	4b7e      	ldr	r3, [pc, #504]	; (8002360 <EPD_begin+0x4c0>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800216e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002172:	2202      	movs	r2, #2
 8002174:	4619      	mov	r1, r3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fecc 	bl	8002f14 <SPI_send>

	// driver latch on
	SPI_send(epd, CU8(0x70, 0x03), 2);
 800217c:	4b79      	ldr	r3, [pc, #484]	; (8002364 <EPD_begin+0x4c4>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8002184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002188:	2202      	movs	r2, #2
 800218a:	4619      	mov	r1, r3
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fec1 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 8002192:	4b75      	ldr	r3, [pc, #468]	; (8002368 <EPD_begin+0x4c8>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800219a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800219e:	2202      	movs	r2, #2
 80021a0:	4619      	mov	r1, r3
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 feb6 	bl	8002f14 <SPI_send>

	// driver latch off
	SPI_send(epd, CU8(0x70, 0x03), 2);
 80021a8:	4b6e      	ldr	r3, [pc, #440]	; (8002364 <EPD_begin+0x4c4>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80021b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021b4:	2202      	movs	r2, #2
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 feab 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 80021be:	2372      	movs	r3, #114	; 0x72
 80021c0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80021ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021ce:	2202      	movs	r2, #2
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fe9e 	bl	8002f14 <SPI_send>

	Delay_ms(5);
 80021d8:	2005      	movs	r0, #5
 80021da:	f003 f96d 	bl	80054b8 <HAL_Delay>

	bool dc_ok = false;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	for (int i = 0; i < 4; ++i) {
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021ea:	e075      	b.n	80022d8 <EPD_begin+0x438>
		// charge pump positive voltage on - VGH/VDL on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 80021ec:	4b5f      	ldr	r3, [pc, #380]	; (800236c <EPD_begin+0x4cc>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80021f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021f8:	2202      	movs	r2, #2
 80021fa:	4619      	mov	r1, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 fe89 	bl	8002f14 <SPI_send>
		SPI_send(epd, CU8(0x72, 0x01), 2);
 8002202:	4b59      	ldr	r3, [pc, #356]	; (8002368 <EPD_begin+0x4c8>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800220a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800220e:	2202      	movs	r2, #2
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fe7e 	bl	8002f14 <SPI_send>

		Delay_ms(240);
 8002218:	20f0      	movs	r0, #240	; 0xf0
 800221a:	f003 f94d 	bl	80054b8 <HAL_Delay>

		// charge pump negative voltage on - VGL/VDL on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 800221e:	4b53      	ldr	r3, [pc, #332]	; (800236c <EPD_begin+0x4cc>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8002226:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800222a:	2202      	movs	r2, #2
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fe70 	bl	8002f14 <SPI_send>
		SPI_send(epd, CU8(0x72, 0x03), 2);
 8002234:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <EPD_begin+0x4c0>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800223c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002240:	2202      	movs	r2, #2
 8002242:	4619      	mov	r1, r3
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fe65 	bl	8002f14 <SPI_send>

		Delay_ms(40);
 800224a:	2028      	movs	r0, #40	; 0x28
 800224c:	f003 f934 	bl	80054b8 <HAL_Delay>

		// charge pump Vcom on - Vcom driver on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 8002250:	4b46      	ldr	r3, [pc, #280]	; (800236c <EPD_begin+0x4cc>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002258:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800225c:	2202      	movs	r2, #2
 800225e:	4619      	mov	r1, r3
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 fe57 	bl	8002f14 <SPI_send>
		SPI_send(epd, CU8(0x72, 0x0f), 2);
 8002266:	4b42      	ldr	r3, [pc, #264]	; (8002370 <EPD_begin+0x4d0>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800226e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002272:	2202      	movs	r2, #2
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fe4c 	bl	8002f14 <SPI_send>

		Delay_ms(40);
 800227c:	2028      	movs	r0, #40	; 0x28
 800227e:	f003 f91b 	bl	80054b8 <HAL_Delay>

		// check DC/DC
		SPI_send(epd, CU8(0x70, 0x0f), 2);
 8002282:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <EPD_begin+0x4d4>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800228a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800228e:	2202      	movs	r2, #2
 8002290:	4619      	mov	r1, r3
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fe3e 	bl	8002f14 <SPI_send>
		SPI_read(epd, CU8(0x73, 0x00), receive_buffer, sizeof(receive_buffer));
 8002298:	2373      	movs	r3, #115	; 0x73
 800229a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 80022a4:	f107 020c 	add.w	r2, r7, #12
 80022a8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80022ac:	2302      	movs	r3, #2
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fe56 	bl	8002f60 <SPI_read>
		int dc_state = receive_buffer[1];
 80022b4:	7b7b      	ldrb	r3, [r7, #13]
 80022b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if (0x40 == (0x40 & dc_state)) {
 80022ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <EPD_begin+0x42e>
			dc_ok = true;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
 80022cc:	e008      	b.n	80022e0 <EPD_begin+0x440>
	for (int i = 0; i < 4; ++i) {
 80022ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022d2:	3301      	adds	r3, #1
 80022d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022dc:	2b03      	cmp	r3, #3
 80022de:	dd85      	ble.n	80021ec <EPD_begin+0x34c>
		}
	}
	if (!dc_ok) {
 80022e0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80022e4:	f083 0301 	eor.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <EPD_begin+0x45c>
		epd->status = EPD_DC_FAILED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2203      	movs	r2, #3
 80022f2:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f909 	bl	800250c <power_off>
		return;
 80022fa:	e01b      	b.n	8002334 <EPD_begin+0x494>
	}

	// output enable to disable
	SPI_send(epd, CU8(0x70, 0x02), 2);
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <EPD_begin+0x4d8>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002304:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002308:	2202      	movs	r2, #2
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fe01 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x04), 2);
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <EPD_begin+0x4dc>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800231a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800231e:	2202      	movs	r2, #2
 8002320:	4619      	mov	r1, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fdf6 	bl	8002f14 <SPI_send>

	epd->COG_on = true;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002330:	e000      	b.n	8002334 <EPD_begin+0x494>
		return;
 8002332:	bf00      	nop
}
 8002334:	37a0      	adds	r7, #160	; 0xa0
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	08017704 	.word	0x08017704
 8002340:	08017708 	.word	0x08017708
 8002344:	0801770c 	.word	0x0801770c
 8002348:	08017710 	.word	0x08017710
 800234c:	08017714 	.word	0x08017714
 8002350:	08017718 	.word	0x08017718
 8002354:	0801771c 	.word	0x0801771c
 8002358:	08017720 	.word	0x08017720
 800235c:	08017724 	.word	0x08017724
 8002360:	08017728 	.word	0x08017728
 8002364:	0801772c 	.word	0x0801772c
 8002368:	08017730 	.word	0x08017730
 800236c:	08017734 	.word	0x08017734
 8002370:	08017738 	.word	0x08017738
 8002374:	08017700 	.word	0x08017700
 8002378:	080176f8 	.word	0x080176f8
 800237c:	0801773c 	.word	0x0801773c

08002380 <EPD_end>:


void EPD_end(EPD_HandleTypeDef *epd) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b090      	sub	sp, #64	; 0x40
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

	nothing_frame(epd);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fa48 	bl	800281e <nothing_frame>

	if (EPD_2_7 == epd->size) {
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	2b04      	cmp	r3, #4
 8002394:	d103      	bne.n	800239e <EPD_end+0x1e>
		dummy_line(epd);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fa60 	bl	800285c <dummy_line>
 800239c:	e005      	b.n	80023aa <EPD_end+0x2a>
//		Delay_ms(25);
//		digitalWrite(epd->EPD_Pin_BORDER, LOW);
//		Delay_ms(200);
//		digitalWrite(epd->EPD_Pin_BORDER, HIGH);
	} else {
		border_dummy_line(epd);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa6f 	bl	8002882 <border_dummy_line>
		Delay_ms(200);
 80023a4:	20c8      	movs	r0, #200	; 0xc8
 80023a6:	f003 f887 	bl	80054b8 <HAL_Delay>
	}

	// ??? - not described in datasheet
	SPI_send(epd, CU8(0x70, 0x0b), 2);
 80023aa:	4b50      	ldr	r3, [pc, #320]	; (80024ec <EPD_end+0x16c>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	813b      	strh	r3, [r7, #8]
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	2202      	movs	r2, #2
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fdab 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 80023be:	2372      	movs	r3, #114	; 0x72
 80023c0:	733b      	strb	r3, [r7, #12]
 80023c2:	2300      	movs	r3, #0
 80023c4:	737b      	strb	r3, [r7, #13]
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	2202      	movs	r2, #2
 80023cc:	4619      	mov	r1, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fda0 	bl	8002f14 <SPI_send>

	// latch reset turn on
	SPI_send(epd, CU8(0x70, 0x03), 2);
 80023d4:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <EPD_end+0x170>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	823b      	strh	r3, [r7, #16]
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	2202      	movs	r2, #2
 80023e0:	4619      	mov	r1, r3
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fd96 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 80023e8:	4b42      	ldr	r3, [pc, #264]	; (80024f4 <EPD_end+0x174>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	82bb      	strh	r3, [r7, #20]
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	2202      	movs	r2, #2
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fd8c 	bl	8002f14 <SPI_send>

	// power off charge pump Vcom
	SPI_send(epd, CU8(0x70, 0x05), 2);
 80023fc:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <EPD_end+0x178>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	833b      	strh	r3, [r7, #24]
 8002402:	f107 0318 	add.w	r3, r7, #24
 8002406:	2202      	movs	r2, #2
 8002408:	4619      	mov	r1, r3
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fd82 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x03), 2);
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <EPD_end+0x17c>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	83bb      	strh	r3, [r7, #28]
 8002416:	f107 031c 	add.w	r3, r7, #28
 800241a:	2202      	movs	r2, #2
 800241c:	4619      	mov	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fd78 	bl	8002f14 <SPI_send>

	// power off charge pump neg voltage
	SPI_send(epd, CU8(0x70, 0x05), 2);
 8002424:	4b34      	ldr	r3, [pc, #208]	; (80024f8 <EPD_end+0x178>)
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	843b      	strh	r3, [r7, #32]
 800242a:	f107 0320 	add.w	r3, r7, #32
 800242e:	2202      	movs	r2, #2
 8002430:	4619      	mov	r1, r3
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fd6e 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 8002438:	4b2e      	ldr	r3, [pc, #184]	; (80024f4 <EPD_end+0x174>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800243e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002442:	2202      	movs	r2, #2
 8002444:	4619      	mov	r1, r3
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fd64 	bl	8002f14 <SPI_send>

	Delay_ms(120);
 800244c:	2078      	movs	r0, #120	; 0x78
 800244e:	f003 f833 	bl	80054b8 <HAL_Delay>

	// discharge internal
	SPI_send(epd, CU8(0x70, 0x04), 2);
 8002452:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <EPD_end+0x180>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	853b      	strh	r3, [r7, #40]	; 0x28
 8002458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800245c:	2202      	movs	r2, #2
 800245e:	4619      	mov	r1, r3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fd57 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x80), 2);
 8002466:	4b27      	ldr	r3, [pc, #156]	; (8002504 <EPD_end+0x184>)
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800246c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002470:	2202      	movs	r2, #2
 8002472:	4619      	mov	r1, r3
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fd4d 	bl	8002f14 <SPI_send>

	// turn off all charge pumps
	SPI_send(epd, CU8(0x70, 0x05), 2);
 800247a:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <EPD_end+0x178>)
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	863b      	strh	r3, [r7, #48]	; 0x30
 8002480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002484:	2202      	movs	r2, #2
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fd43 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 800248e:	2372      	movs	r3, #114	; 0x72
 8002490:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002494:	2300      	movs	r3, #0
 8002496:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800249a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800249e:	2202      	movs	r2, #2
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fd36 	bl	8002f14 <SPI_send>

	// turn of osc
	SPI_send(epd, CU8(0x70, 0x07), 2);
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <EPD_end+0x188>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	873b      	strh	r3, [r7, #56]	; 0x38
 80024ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024b2:	2202      	movs	r2, #2
 80024b4:	4619      	mov	r1, r3
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fd2c 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <EPD_end+0x174>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80024c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024c6:	2202      	movs	r2, #2
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fd22 	bl	8002f14 <SPI_send>

	Delay_ms(50);
 80024d0:	2032      	movs	r0, #50	; 0x32
 80024d2:	f002 fff1 	bl	80054b8 <HAL_Delay>

	power_off(epd);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f818 	bl	800250c <power_off>

	epd->COG_on = false;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80024e4:	bf00      	nop
 80024e6:	3740      	adds	r7, #64	; 0x40
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	08017704 	.word	0x08017704
 80024f0:	0801772c 	.word	0x0801772c
 80024f4:	08017730 	.word	0x08017730
 80024f8:	08017734 	.word	0x08017734
 80024fc:	08017728 	.word	0x08017728
 8002500:	08017724 	.word	0x08017724
 8002504:	08017740 	.word	0x08017740
 8002508:	08017710 	.word	0x08017710

0800250c <power_off>:


static void power_off(EPD_HandleTypeDef *epd) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

	// turn of power and all signals
	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6958      	ldr	r0, [r3, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8a1b      	ldrh	r3, [r3, #16]
 800251c:	2200      	movs	r2, #0
 800251e:	4619      	mov	r1, r3
 8002520:	f003 faba 	bl	8005a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, LOW);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6858      	ldr	r0, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	885b      	ldrh	r3, [r3, #2]
 800252c:	2200      	movs	r2, #0
 800252e:	4619      	mov	r1, r3
 8002530:	f003 fab2 	bl	8005a98 <HAL_GPIO_WritePin>

	// ensure SPI MOSI and CLOCK are Low before CS Low
//	SPI_off(epd->spi);

	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, HIGH);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68d8      	ldr	r0, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	891b      	ldrh	r3, [r3, #8]
 800253c:	2201      	movs	r2, #1
 800253e:	4619      	mov	r1, r3
 8002540:	f003 faaa 	bl	8005a98 <HAL_GPIO_WritePin>
	Delay_ms(150);
 8002544:	2096      	movs	r0, #150	; 0x96
 8002546:	f002 ffb7 	bl	80054b8 <HAL_Delay>
	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, LOW);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68d8      	ldr	r0, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	891b      	ldrh	r3, [r3, #8]
 8002552:	2200      	movs	r2, #0
 8002554:	4619      	mov	r1, r3
 8002556:	f003 fa9f 	bl	8005a98 <HAL_GPIO_WritePin>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <EPD_set_temperature>:


void EPD_set_temperature(EPD_HandleTypeDef *epd, int temperature) {
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
	epd->factored_stage_time = epd->base_stage_time * temperature_to_factor_10x(temperature) / 10;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002572:	461c      	mov	r4, r3
 8002574:	6838      	ldr	r0, [r7, #0]
 8002576:	f000 f86a 	bl	800264e <temperature_to_factor_10x>
 800257a:	4603      	mov	r3, r0
 800257c:	fb03 f304 	mul.w	r3, r3, r4
 8002580:	4a06      	ldr	r2, [pc, #24]	; (800259c <EPD_set_temperature+0x38>)
 8002582:	fb82 1203 	smull	r1, r2, r2, r3
 8002586:	1092      	asrs	r2, r2, #2
 8002588:	17db      	asrs	r3, r3, #31
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	b29a      	uxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bd90      	pop	{r4, r7, pc}
 800259a:	bf00      	nop
 800259c:	66666667 	.word	0x66666667

080025a0 <EPD_set_enable_temperature>:

void EPD_set_enable_temperature(void){
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
	setTemp = true;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <EPD_set_enable_temperature+0x14>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	2000025e 	.word	0x2000025e

080025b8 <EPD_clear>:
//	epd->factored_stage_time = pu_stagetime;
//}


// clear display (anything -> white)
void EPD_clear(EPD_HandleTypeDef *epd) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	frame_fixed_repeat(epd, 0xff, EPD_compensate);
 80025c0:	2200      	movs	r2, #0
 80025c2:	21ff      	movs	r1, #255	; 0xff
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f8e5 	bl	8002794 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xff, EPD_white);
 80025ca:	2201      	movs	r2, #1
 80025cc:	21ff      	movs	r1, #255	; 0xff
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8e0 	bl	8002794 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_inverse);
 80025d4:	2202      	movs	r2, #2
 80025d6:	21aa      	movs	r1, #170	; 0xaa
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f8db 	bl	8002794 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_normal);
 80025de:	2203      	movs	r2, #3
 80025e0:	21aa      	movs	r1, #170	; 0xaa
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f8d6 	bl	8002794 <frame_fixed_repeat>
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <EPD_image_0>:

// assuming a clear (white) screen output an image
void EPD_image_0(EPD_HandleTypeDef *epd, const uint8_t *image) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	frame_fixed_repeat(epd, 0xaa, EPD_compensate);
 80025fa:	2200      	movs	r2, #0
 80025fc:	21aa      	movs	r1, #170	; 0xaa
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f8c8 	bl	8002794 <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_white);
 8002604:	2201      	movs	r2, #1
 8002606:	21aa      	movs	r1, #170	; 0xaa
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f8c3 	bl	8002794 <frame_fixed_repeat>
	frame_data_repeat(epd, image, NULL, EPD_inverse);
 800260e:	2302      	movs	r3, #2
 8002610:	2200      	movs	r2, #0
 8002612:	6839      	ldr	r1, [r7, #0]
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f8e0 	bl	80027da <frame_data_repeat>
	frame_data_repeat(epd, image, NULL, EPD_normal);
 800261a:	2303      	movs	r3, #3
 800261c:	2200      	movs	r2, #0
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f8da 	bl	80027da <frame_data_repeat>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <EPD_partial_image>:
	frame_data_repeat(epd, new_image, NULL, EPD_inverse);
	frame_data_repeat(epd, new_image, NULL, EPD_normal);
}

// change from old image to new image
void EPD_partial_image(EPD_HandleTypeDef *epd, const uint8_t *old_image, const uint8_t *new_image) {
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
	// Only need last stage for partial update
	// See discussion on issue #19 in the repaper/gratis repository on github
	frame_data_repeat(epd, new_image, old_image, EPD_normal);
 800263a:	2303      	movs	r3, #3
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f8ca 	bl	80027da <frame_data_repeat>
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <temperature_to_factor_10x>:
// internal functions
// ==================

// convert a temperature in Celsius to
// the scale factor for frame_*_repeat methods
static int temperature_to_factor_10x(int temperature) {
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
	if (temperature <= -10) {
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f113 0f09 	cmn.w	r3, #9
 800265c:	da01      	bge.n	8002662 <temperature_to_factor_10x+0x14>
		return 170;
 800265e:	23aa      	movs	r3, #170	; 0xaa
 8002660:	e01f      	b.n	80026a2 <temperature_to_factor_10x+0x54>
	} else if (temperature <= -5) {
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f113 0f04 	cmn.w	r3, #4
 8002668:	da01      	bge.n	800266e <temperature_to_factor_10x+0x20>
		return 120;
 800266a:	2378      	movs	r3, #120	; 0x78
 800266c:	e019      	b.n	80026a2 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 5) {
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b05      	cmp	r3, #5
 8002672:	dc01      	bgt.n	8002678 <temperature_to_factor_10x+0x2a>
		return 80;
 8002674:	2350      	movs	r3, #80	; 0x50
 8002676:	e014      	b.n	80026a2 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 10) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b0a      	cmp	r3, #10
 800267c:	dc01      	bgt.n	8002682 <temperature_to_factor_10x+0x34>
		return 40;
 800267e:	2328      	movs	r3, #40	; 0x28
 8002680:	e00f      	b.n	80026a2 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 15) {
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	dc01      	bgt.n	800268c <temperature_to_factor_10x+0x3e>
		return 30;
 8002688:	231e      	movs	r3, #30
 800268a:	e00a      	b.n	80026a2 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 20) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b14      	cmp	r3, #20
 8002690:	dc01      	bgt.n	8002696 <temperature_to_factor_10x+0x48>
		return 20;
 8002692:	2314      	movs	r3, #20
 8002694:	e005      	b.n	80026a2 <temperature_to_factor_10x+0x54>
	} else if (temperature <= 40) {
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b28      	cmp	r3, #40	; 0x28
 800269a:	dc01      	bgt.n	80026a0 <temperature_to_factor_10x+0x52>
		return 10;
 800269c:	230a      	movs	r3, #10
 800269e:	e000      	b.n	80026a2 <temperature_to_factor_10x+0x54>
	}
	return 7;
 80026a0:	2307      	movs	r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <frame_fixed>:
// The 2.7” frame of data is 176 lines * 264 dots.

// the image is arranged by line which matches the display size
// so smallest would have 96 * 32 bytes

static void frame_fixed(EPD_HandleTypeDef *epd, uint8_t fixed_value, EPD_stage stage) {
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af02      	add	r7, sp, #8
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	70fb      	strb	r3, [r7, #3]
 80026ba:	4613      	mov	r3, r2
 80026bc:	70bb      	strb	r3, [r7, #2]
	for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e00e      	b.n	80026e2 <frame_fixed+0x34>
		one_line(epd, l, NULL, fixed_value, NULL, stage);
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	b299      	uxth	r1, r3
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	78bb      	ldrb	r3, [r7, #2]
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	2300      	movs	r3, #0
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	4613      	mov	r3, r2
 80026d4:	2200      	movs	r2, #0
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fb06 	bl	8002ce8 <one_line>
	for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	3301      	adds	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d3ea      	bcc.n	80026c4 <frame_fixed+0x16>
	}
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <frame_data>:


static void frame_data(EPD_HandleTypeDef *epd, const uint8_t *image, const uint8_t *mask, EPD_stage stage) {
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b088      	sub	sp, #32
 80026fa:	af02      	add	r7, sp, #8
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	70fb      	strb	r3, [r7, #3]
	if (NULL == mask) {
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d11e      	bne.n	8002748 <frame_data+0x52>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]
 800270e:	e014      	b.n	800273a <frame_data+0x44>
			one_line(epd, l, &image[l * epd->bytes_per_line], 0, NULL, stage);
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	b299      	uxth	r1, r3
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	441a      	add	r2, r3
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2300      	movs	r3, #0
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fada 	bl	8002ce8 <one_line>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	3301      	adds	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002742:	429a      	cmp	r2, r3
 8002744:	d3e4      	bcc.n	8002710 <frame_data+0x1a>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
			size_t n = l * epd->bytes_per_line;
			one_line(epd, l, &image[n], 0, &mask[n], stage);
		}
	}
}
 8002746:	e021      	b.n	800278c <frame_data+0x96>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8002748:	2300      	movs	r3, #0
 800274a:	75bb      	strb	r3, [r7, #22]
 800274c:	e018      	b.n	8002780 <frame_data+0x8a>
			size_t n = l * epd->bytes_per_line;
 800274e:	7dbb      	ldrb	r3, [r7, #22]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8002754:	fb02 f303 	mul.w	r3, r2, r3
 8002758:	613b      	str	r3, [r7, #16]
			one_line(epd, l, &image[n], 0, &mask[n], stage);
 800275a:	7dbb      	ldrb	r3, [r7, #22]
 800275c:	b299      	uxth	r1, r3
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	18d0      	adds	r0, r2, r3
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	2300      	movs	r3, #0
 8002772:	4602      	mov	r2, r0
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fab7 	bl	8002ce8 <one_line>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 800277a:	7dbb      	ldrb	r3, [r7, #22]
 800277c:	3301      	adds	r3, #1
 800277e:	75bb      	strb	r3, [r7, #22]
 8002780:	7dbb      	ldrb	r3, [r7, #22]
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002788:	429a      	cmp	r2, r3
 800278a:	d3e0      	bcc.n	800274e <frame_data+0x58>
}
 800278c:	bf00      	nop
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <frame_fixed_repeat>:


static void frame_fixed_repeat(EPD_HandleTypeDef *epd, uint8_t fixed_value, EPD_stage stage) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
 80027a0:	4613      	mov	r3, r2
 80027a2:	70bb      	strb	r3, [r7, #2]
	int iters = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
	uint32_t startTime = HAL_GetTick();
 80027a8:	f002 fe7a 	bl	80054a0 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]

	do {
		frame_fixed(epd, fixed_value, stage);
 80027ae:	78ba      	ldrb	r2, [r7, #2]
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	4619      	mov	r1, r3
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff7a 	bl	80026ae <frame_fixed>
		iters++;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3301      	adds	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
	} while (HAL_GetTick() - startTime < epd->factored_stage_time);
 80027c0:	f002 fe6e 	bl	80054a0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d3ed      	bcc.n	80027ae <frame_fixed_repeat+0x1a>
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <frame_data_repeat>:


static void frame_data_repeat(EPD_HandleTypeDef *epd, const uint8_t *image, const uint8_t *mask, EPD_stage stage) {
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	70fb      	strb	r3, [r7, #3]
	int iters = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
	uint32_t startTime = HAL_GetTick();
 80027ec:	f002 fe58 	bl	80054a0 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

	do {
		frame_data(epd, image, mask, stage);
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7ff ff7c 	bl	80026f6 <frame_data>
		iters++;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3301      	adds	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
	} while (HAL_GetTick() - startTime < epd->factored_stage_time);
 8002804:	f002 fe4c 	bl	80054a0 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002812:	4293      	cmp	r3, r2
 8002814:	d3ed      	bcc.n	80027f2 <frame_data_repeat+0x18>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <nothing_frame>:



static void nothing_frame(EPD_HandleTypeDef *epd) {
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af02      	add	r7, sp, #8
 8002824:	6078      	str	r0, [r7, #4]
	for (int line = 0; line < epd->lines_per_display; ++line) {
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e00d      	b.n	8002848 <nothing_frame+0x2a>
		one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_compensate);
 800282c:	2300      	movs	r3, #0
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	2300      	movs	r3, #0
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2300      	movs	r3, #0
 8002836:	2200      	movs	r2, #0
 8002838:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fa53 	bl	8002ce8 <one_line>
	for (int line = 0; line < epd->lines_per_display; ++line) {
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3301      	adds	r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800284c:	461a      	mov	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4293      	cmp	r3, r2
 8002852:	dbeb      	blt.n	800282c <nothing_frame+0xe>
	}
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <dummy_line>:


static void dummy_line(EPD_HandleTypeDef *epd) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af02      	add	r7, sp, #8
 8002862:	6078      	str	r0, [r7, #4]
	one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_compensate);
 8002864:	2300      	movs	r3, #0
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	2300      	movs	r3, #0
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2300      	movs	r3, #0
 800286e:	2200      	movs	r2, #0
 8002870:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fa37 	bl	8002ce8 <one_line>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <border_dummy_line>:


static void border_dummy_line(EPD_HandleTypeDef *epd) {
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af02      	add	r7, sp, #8
 8002888:	6078      	str	r0, [r7, #4]
	one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_normal);
 800288a:	2303      	movs	r3, #3
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	2300      	movs	r3, #0
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2300      	movs	r3, #0
 8002894:	2200      	movs	r2, #0
 8002896:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa24 	bl	8002ce8 <one_line>
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <even_pixels>:


// pixels on display are numbered from 1 so even is actually bits 1,3,5,...
static void even_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	70fb      	strb	r3, [r7, #3]

	for (uint16_t b = 0; b < epd->bytes_per_line; ++b) {
 80028b6:	2300      	movs	r3, #0
 80028b8:	82fb      	strh	r3, [r7, #22]
 80028ba:	e098      	b.n	80029ee <even_pixels+0x146>
		if (NULL != data) {
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 808b 	beq.w	80029da <even_pixels+0x132>
			uint8_t pixels = data[b] & 0xaa;
 80028c4:	8afb      	ldrh	r3, [r7, #22]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 80028d0:	757b      	strb	r3, [r7, #21]
			uint8_t pixel_mask = 0xff;
 80028d2:	23ff      	movs	r3, #255	; 0xff
 80028d4:	753b      	strb	r3, [r7, #20]
			if (NULL != mask) {
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00f      	beq.n	80028fc <even_pixels+0x54>
				pixel_mask = (mask[b] ^ pixels) & 0xaa;
 80028dc:	8afb      	ldrh	r3, [r7, #22]
 80028de:	6a3a      	ldr	r2, [r7, #32]
 80028e0:	4413      	add	r3, r2
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	7d7b      	ldrb	r3, [r7, #21]
 80028e6:	4053      	eors	r3, r2
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 80028ee:	753b      	strb	r3, [r7, #20]
				pixel_mask |= pixel_mask >> 1;
 80028f0:	7d3b      	ldrb	r3, [r7, #20]
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	7d3b      	ldrb	r3, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	753b      	strb	r3, [r7, #20]
			}
			switch(stage) {
 80028fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002900:	2b03      	cmp	r3, #3
 8002902:	d82e      	bhi.n	8002962 <even_pixels+0xba>
 8002904:	a201      	add	r2, pc, #4	; (adr r2, 800290c <even_pixels+0x64>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	0800291d 	.word	0x0800291d
 8002910:	08002931 	.word	0x08002931
 8002914:	08002943 	.word	0x08002943
 8002918:	08002955 	.word	0x08002955
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaa | ((pixels ^ 0xaa) >> 1);
 800291c:	7d7b      	ldrb	r3, [r7, #21]
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f063 0355 	orn	r3, r3, #85	; 0x55
 800292c:	757b      	strb	r3, [r7, #21]
				break;
 800292e:	e018      	b.n	8002962 <even_pixels+0xba>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x55 + ((pixels ^ 0xaa) >> 1);
 8002930:	7d7b      	ldrb	r3, [r7, #21]
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 800293a:	b2db      	uxtb	r3, r3
 800293c:	3355      	adds	r3, #85	; 0x55
 800293e:	757b      	strb	r3, [r7, #21]
				break;
 8002940:	e00f      	b.n	8002962 <even_pixels+0xba>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x55 | (pixels ^ 0xaa);
 8002942:	7d7b      	ldrb	r3, [r7, #21]
 8002944:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002948:	43db      	mvns	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002950:	757b      	strb	r3, [r7, #21]
				break;
 8002952:	e006      	b.n	8002962 <even_pixels+0xba>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaa | (pixels >> 1);
 8002954:	7d7b      	ldrb	r3, [r7, #21]
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f063 0355 	orn	r3, r3, #85	; 0x55
 800295e:	757b      	strb	r3, [r7, #21]
				break;
 8002960:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x55);
 8002962:	7d7a      	ldrb	r2, [r7, #21]
 8002964:	7d3b      	ldrb	r3, [r7, #20]
 8002966:	4013      	ands	r3, r2
 8002968:	b2db      	uxtb	r3, r3
 800296a:	b25a      	sxtb	r2, r3
 800296c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002970:	43db      	mvns	r3, r3
 8002972:	b25b      	sxtb	r3, r3
 8002974:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002978:	b25b      	sxtb	r3, r3
 800297a:	4313      	orrs	r3, r2
 800297c:	b25b      	sxtb	r3, r3
 800297e:	757b      	strb	r3, [r7, #21]
			uint8_t p1 = (pixels >> 6) & 0x03;
 8002980:	7d7b      	ldrb	r3, [r7, #21]
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	74fb      	strb	r3, [r7, #19]
			uint8_t p2 = (pixels >> 4) & 0x03;
 8002986:	7d7b      	ldrb	r3, [r7, #21]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	74bb      	strb	r3, [r7, #18]
			uint8_t p3 = (pixels >> 2) & 0x03;
 8002992:	7d7b      	ldrb	r3, [r7, #21]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	747b      	strb	r3, [r7, #17]
			uint8_t p4 = (pixels >> 0) & 0x03;
 800299e:	7d7b      	ldrb	r3, [r7, #21]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	743b      	strb	r3, [r7, #16]
			pixels = (p1 << 0) | (p2 << 2) | (p3 << 4) | (p4 << 6);
 80029a6:	7cbb      	ldrb	r3, [r7, #18]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	b25a      	sxtb	r2, r3
 80029ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	b25a      	sxtb	r2, r3
 80029b4:	7c7b      	ldrb	r3, [r7, #17]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	b25b      	sxtb	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b25a      	sxtb	r2, r3
 80029be:	7c3b      	ldrb	r3, [r7, #16]
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	757b      	strb	r3, [r7, #21]
			*(*pp)++ = pixels;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	1c59      	adds	r1, r3, #1
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	6011      	str	r1, [r2, #0]
 80029d4:	7d7a      	ldrb	r2, [r7, #21]
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e006      	b.n	80029e8 <even_pixels+0x140>
		} else {
			*(*pp)++ = fixed_value;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	1c59      	adds	r1, r3, #1
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	6011      	str	r1, [r2, #0]
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = 0; b < epd->bytes_per_line; ++b) {
 80029e8:	8afb      	ldrh	r3, [r7, #22]
 80029ea:	3301      	adds	r3, #1
 80029ec:	82fb      	strh	r3, [r7, #22]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80029f2:	8afa      	ldrh	r2, [r7, #22]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	f4ff af61 	bcc.w	80028bc <even_pixels+0x14>
		}
	}
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop

08002a08 <odd_pixels>:

// pixels on display are numbered from 1 so odd is actually bits 0,2,4,...
static void odd_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	70fb      	strb	r3, [r7, #3]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a1a:	82fb      	strh	r3, [r7, #22]
 8002a1c:	e072      	b.n	8002b04 <odd_pixels+0xfc>
		if (NULL != data) {
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d065      	beq.n	8002af0 <odd_pixels+0xe8>
			uint8_t pixels = data[b - 1] & 0x55;
 8002a24:	8afb      	ldrh	r3, [r7, #22]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002a32:	757b      	strb	r3, [r7, #21]
			uint8_t pixel_mask = 0xff;
 8002a34:	23ff      	movs	r3, #255	; 0xff
 8002a36:	753b      	strb	r3, [r7, #20]
			if (NULL != mask) {
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d012      	beq.n	8002a64 <odd_pixels+0x5c>
				pixel_mask = (mask[b - 1] ^ pixels) & 0x55;
 8002a3e:	8afb      	ldrh	r3, [r7, #22]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	6a3a      	ldr	r2, [r7, #32]
 8002a44:	4413      	add	r3, r2
 8002a46:	781a      	ldrb	r2, [r3, #0]
 8002a48:	7d7b      	ldrb	r3, [r7, #21]
 8002a4a:	4053      	eors	r3, r2
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002a52:	753b      	strb	r3, [r7, #20]
				pixel_mask |= pixel_mask << 1;
 8002a54:	7d3b      	ldrb	r3, [r7, #20]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	b25a      	sxtb	r2, r3
 8002a5a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	b25b      	sxtb	r3, r3
 8002a62:	753b      	strb	r3, [r7, #20]
			}
			switch(stage) {
 8002a64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d82a      	bhi.n	8002ac2 <odd_pixels+0xba>
 8002a6c:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <odd_pixels+0x6c>)
 8002a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a72:	bf00      	nop
 8002a74:	08002a85 	.word	0x08002a85
 8002a78:	08002a95 	.word	0x08002a95
 8002a7c:	08002aa3 	.word	0x08002aa3
 8002a80:	08002ab9 	.word	0x08002ab9
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaa | (pixels ^ 0x55);
 8002a84:	7d7b      	ldrb	r3, [r7, #21]
 8002a86:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f063 0355 	orn	r3, r3, #85	; 0x55
 8002a90:	757b      	strb	r3, [r7, #21]
				break;
 8002a92:	e016      	b.n	8002ac2 <odd_pixels+0xba>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x55 + (pixels ^ 0x55);
 8002a94:	7d7b      	ldrb	r3, [r7, #21]
 8002a96:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	3355      	adds	r3, #85	; 0x55
 8002a9e:	757b      	strb	r3, [r7, #21]
				break;
 8002aa0:	e00f      	b.n	8002ac2 <odd_pixels+0xba>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x55 | ((pixels ^ 0x55) << 1);
 8002aa2:	7d7b      	ldrb	r3, [r7, #21]
 8002aa4:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002ab2:	b25b      	sxtb	r3, r3
 8002ab4:	757b      	strb	r3, [r7, #21]
				break;
 8002ab6:	e004      	b.n	8002ac2 <odd_pixels+0xba>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaa | pixels;
 8002ab8:	7d7b      	ldrb	r3, [r7, #21]
 8002aba:	f063 0355 	orn	r3, r3, #85	; 0x55
 8002abe:	757b      	strb	r3, [r7, #21]
				break;
 8002ac0:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x55);
 8002ac2:	7d7a      	ldrb	r2, [r7, #21]
 8002ac4:	7d3b      	ldrb	r3, [r7, #20]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	b25a      	sxtb	r2, r3
 8002acc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	b25b      	sxtb	r3, r3
 8002ad4:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002ad8:	b25b      	sxtb	r3, r3
 8002ada:	4313      	orrs	r3, r2
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	757b      	strb	r3, [r7, #21]
			*(*pp)++ = pixels;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	1c59      	adds	r1, r3, #1
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	6011      	str	r1, [r2, #0]
 8002aea:	7d7a      	ldrb	r2, [r7, #21]
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e006      	b.n	8002afe <odd_pixels+0xf6>
		} else {
			*(*pp)++ = fixed_value;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	1c59      	adds	r1, r3, #1
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	6011      	str	r1, [r2, #0]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002afe:	8afb      	ldrh	r3, [r7, #22]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	82fb      	strh	r3, [r7, #22]
 8002b04:	8afb      	ldrh	r3, [r7, #22]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d189      	bne.n	8002a1e <odd_pixels+0x16>
		}
	}
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop

08002b18 <interleave_bits>:

// interleave bits: (byte)76543210 -> (16 bit).7.6.5.4.3.2.1
static inline uint16_t interleave_bits(uint16_t value) {
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 4)) & 0x0f0f;
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	b21a      	sxth	r2, r3
 8002b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002b36:	4013      	ands	r3, r2
 8002b38:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 2)) & 0x3333;
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	b21a      	sxth	r2, r3
 8002b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	b21b      	sxth	r3, r3
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	f243 3333 	movw	r3, #13107	; 0x3333
 8002b4e:	4013      	ands	r3, r2
 8002b50:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 1)) & 0x5555;
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	b21a      	sxth	r2, r3
 8002b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b21b      	sxth	r3, r3
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	f245 5355 	movw	r3, #21845	; 0x5555
 8002b66:	4013      	ands	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
	return value;
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <all_pixels>:

// pixels on display are numbered from 1
static void all_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	70fb      	strb	r3, [r7, #3]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002b8a:	82fb      	strh	r3, [r7, #22]
 8002b8c:	e0a1      	b.n	8002cd2 <all_pixels+0x15a>
		if (NULL != data) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 808d 	beq.w	8002cb0 <all_pixels+0x138>
			uint16_t pixels = interleave_bits(data[b - 1]);
 8002b96:	8afb      	ldrh	r3, [r7, #22]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ffb8 	bl	8002b18 <interleave_bits>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	82bb      	strh	r3, [r7, #20]

			uint16_t pixel_mask = 0xffff;
 8002bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb0:	827b      	strh	r3, [r7, #18]
			if (NULL != mask) {
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01a      	beq.n	8002bee <all_pixels+0x76>
				uint16_t pixel_mask = interleave_bits(mask[b - 1]);
 8002bb8:	8afb      	ldrh	r3, [r7, #22]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	6a3a      	ldr	r2, [r7, #32]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ffa7 	bl	8002b18 <interleave_bits>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	823b      	strh	r3, [r7, #16]
				pixel_mask = (pixel_mask ^ pixels) & 0x5555;
 8002bce:	8a3a      	ldrh	r2, [r7, #16]
 8002bd0:	8abb      	ldrh	r3, [r7, #20]
 8002bd2:	4053      	eors	r3, r2
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	f245 5355 	movw	r3, #21845	; 0x5555
 8002bda:	4013      	ands	r3, r2
 8002bdc:	823b      	strh	r3, [r7, #16]
				pixel_mask |= pixel_mask << 1;
 8002bde:	8a3b      	ldrh	r3, [r7, #16]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	b21a      	sxth	r2, r3
 8002be4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	b21b      	sxth	r3, r3
 8002bec:	823b      	strh	r3, [r7, #16]
			}
			switch(stage) {
 8002bee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d839      	bhi.n	8002c6a <all_pixels+0xf2>
 8002bf6:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <all_pixels+0x84>)
 8002bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfc:	08002c0d 	.word	0x08002c0d
 8002c00:	08002c21 	.word	0x08002c21
 8002c04:	08002c37 	.word	0x08002c37
 8002c08:	08002c55 	.word	0x08002c55
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaaaa | (pixels ^ 0x5555);
 8002c0c:	8abb      	ldrh	r3, [r7, #20]
 8002c0e:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002c12:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <all_pixels+0x16c>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	82bb      	strh	r3, [r7, #20]
				break;
 8002c1e:	e024      	b.n	8002c6a <all_pixels+0xf2>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x5555 + (pixels ^ 0x5555);
 8002c20:	8abb      	ldrh	r3, [r7, #20]
 8002c22:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002c26:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8002c30:	3355      	adds	r3, #85	; 0x55
 8002c32:	82bb      	strh	r3, [r7, #20]
				break;
 8002c34:	e019      	b.n	8002c6a <all_pixels+0xf2>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x5555 | ((pixels ^ 0x5555) << 1);
 8002c36:	8abb      	ldrh	r3, [r7, #20]
 8002c38:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002c3c:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	b21b      	sxth	r3, r3
 8002c46:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8002c4a:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002c4e:	b21b      	sxth	r3, r3
 8002c50:	82bb      	strh	r3, [r7, #20]
				break;
 8002c52:	e00a      	b.n	8002c6a <all_pixels+0xf2>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaaaa | pixels;
 8002c54:	8abb      	ldrh	r3, [r7, #20]
 8002c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c5e:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8002c62:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8002c66:	82bb      	strh	r3, [r7, #20]
				break;
 8002c68:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x5555);
 8002c6a:	8aba      	ldrh	r2, [r7, #20]
 8002c6c:	8a7b      	ldrh	r3, [r7, #18]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b21a      	sxth	r2, r3
 8002c74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	b219      	sxth	r1, r3
 8002c7c:	f245 5355 	movw	r3, #21845	; 0x5555
 8002c80:	400b      	ands	r3, r1
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	4313      	orrs	r3, r2
 8002c86:	b21b      	sxth	r3, r3
 8002c88:	82bb      	strh	r3, [r7, #20]
			*(*pp)++ = pixels >> 8;
 8002c8a:	8abb      	ldrh	r3, [r7, #20]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	b298      	uxth	r0, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	1c59      	adds	r1, r3, #1
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	6011      	str	r1, [r2, #0]
 8002c9a:	b2c2      	uxtb	r2, r0
 8002c9c:	701a      	strb	r2, [r3, #0]
			*(*pp)++ = pixels;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	1c59      	adds	r1, r3, #1
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	6011      	str	r1, [r2, #0]
 8002ca8:	8aba      	ldrh	r2, [r7, #20]
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e00d      	b.n	8002ccc <all_pixels+0x154>
		} else {
			*(*pp)++ = fixed_value;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	1c59      	adds	r1, r3, #1
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	6011      	str	r1, [r2, #0]
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	701a      	strb	r2, [r3, #0]
			*(*pp)++ = fixed_value;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	1c59      	adds	r1, r3, #1
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	6011      	str	r1, [r2, #0]
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002ccc:	8afb      	ldrh	r3, [r7, #22]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	82fb      	strh	r3, [r7, #22]
 8002cd2:	8afb      	ldrh	r3, [r7, #22]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f47f af5a 	bne.w	8002b8e <all_pixels+0x16>
		}
	}
}
 8002cda:	bf00      	nop
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	ffffaaaa 	.word	0xffffaaaa

08002ce8 <one_line>:

// output one line of scan and data bytes to the display
static void one_line(EPD_HandleTypeDef *epd, uint16_t line, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	; 0x30
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	817b      	strh	r3, [r7, #10]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	727b      	strb	r3, [r7, #9]

	// send data
	SPI_send(epd, CU8(0x70, 0x0a), 2);
 8002cfc:	4b82      	ldr	r3, [pc, #520]	; (8002f08 <one_line+0x220>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	833b      	strh	r3, [r7, #24]
 8002d02:	f107 0318 	add.w	r3, r7, #24
 8002d06:	2202      	movs	r2, #2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f902 	bl	8002f14 <SPI_send>

	// Start Loading the line buffer
	uint8_t *p = epd->line_buffer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d14:	617b      	str	r3, [r7, #20]

	*p++ = 0x72;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	617a      	str	r2, [r7, #20]
 8002d1c:	2272      	movs	r2, #114	; 0x72
 8002d1e:	701a      	strb	r2, [r3, #0]

	if (epd->pre_border_byte) {
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d004      	beq.n	8002d34 <one_line+0x4c>
		*p++ = 0x00;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	617a      	str	r2, [r7, #20]
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
	}

	if (epd->middle_scan) {
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03e      	beq.n	8002dbc <one_line+0xd4>
		// data bytes
		odd_pixels(epd, &p, data, fixed_value, mask, stage);
 8002d3e:	7a7a      	ldrb	r2, [r7, #9]
 8002d40:	f107 0114 	add.w	r1, r7, #20
 8002d44:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7ff fe58 	bl	8002a08 <odd_pixels>

		// scan line
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d5e:	e01c      	b.n	8002d9a <one_line+0xb2>
			if (line / 4 == b - 1) {
 8002d60:	897b      	ldrh	r3, [r7, #10]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d10c      	bne.n	8002d8a <one_line+0xa2>
				*p++ = 0x03 << (2 * (line & 0x03));
 8002d70:	897b      	ldrh	r3, [r7, #10]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	2203      	movs	r2, #3
 8002d7a:	fa02 f103 	lsl.w	r1, r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	617a      	str	r2, [r7, #20]
 8002d84:	b2ca      	uxtb	r2, r1
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e004      	b.n	8002d94 <one_line+0xac>
			} else {
				*p++ = 0x00;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	617a      	str	r2, [r7, #20]
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002d94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d96:	3b01      	subs	r3, #1
 8002d98:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1df      	bne.n	8002d60 <one_line+0x78>
			}
		}

		// data bytes
		even_pixels(epd, &p, data, fixed_value, mask, stage);
 8002da0:	7a7a      	ldrb	r2, [r7, #9]
 8002da2:	f107 0114 	add.w	r1, r7, #20
 8002da6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	4613      	mov	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7ff fd77 	bl	80028a8 <even_pixels>
 8002dba:	e05b      	b.n	8002e74 <one_line+0x18c>

	} else {
		// even scan line, but as lines on display are numbered from 1, line: 1,3,5,...
		for (uint16_t b = 0; b < epd->bytes_per_scan; ++b) {
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002dc0:	e01e      	b.n	8002e00 <one_line+0x118>
			if (0 != (line & 0x01) && line / 8 == b) {
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d011      	beq.n	8002df0 <one_line+0x108>
 8002dcc:	897b      	ldrh	r3, [r7, #10]
 8002dce:	08db      	lsrs	r3, r3, #3
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d10b      	bne.n	8002df0 <one_line+0x108>
				*p++ = 0xc0 >> (line & 0x06);
 8002dd8:	897b      	ldrh	r3, [r7, #10]
 8002dda:	f003 0306 	and.w	r3, r3, #6
 8002dde:	22c0      	movs	r2, #192	; 0xc0
 8002de0:	fa42 f103 	asr.w	r1, r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	617a      	str	r2, [r7, #20]
 8002dea:	b2ca      	uxtb	r2, r1
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	e004      	b.n	8002dfa <one_line+0x112>
			} else {
				*p++ = 0x00;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	617a      	str	r2, [r7, #20]
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = 0; b < epd->bytes_per_scan; ++b) {
 8002dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d3db      	bcc.n	8002dc2 <one_line+0xda>
			}
		}

		// data bytes
		all_pixels(epd, &p, data, fixed_value, mask, stage);
 8002e0a:	7a7a      	ldrb	r2, [r7, #9]
 8002e0c:	f107 0114 	add.w	r1, r7, #20
 8002e10:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff feaa 	bl	8002b78 <all_pixels>

		// odd scan line, but as lines on display are numbered from 1, line: 0,2,4,6,...
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e28:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e2a:	e020      	b.n	8002e6e <one_line+0x186>
			if (0 == (line & 0x01) && line / 8 == b - 1) {
 8002e2c:	897b      	ldrh	r3, [r7, #10]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d113      	bne.n	8002e5e <one_line+0x176>
 8002e36:	897b      	ldrh	r3, [r7, #10]
 8002e38:	08db      	lsrs	r3, r3, #3
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e40:	3b01      	subs	r3, #1
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10b      	bne.n	8002e5e <one_line+0x176>
				*p++ = 0x03 << (line & 0x06);
 8002e46:	897b      	ldrh	r3, [r7, #10]
 8002e48:	f003 0306 	and.w	r3, r3, #6
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	fa02 f103 	lsl.w	r1, r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	617a      	str	r2, [r7, #20]
 8002e58:	b2ca      	uxtb	r2, r1
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	e004      	b.n	8002e68 <one_line+0x180>
			} else {
				*p++ = 0x00;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	617a      	str	r2, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002e68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1db      	bne.n	8002e2c <one_line+0x144>
			}
		}
	}

	// post data border byte
	switch (epd->border_byte) {
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d003      	beq.n	8002e86 <one_line+0x19e>
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d007      	beq.n	8002e92 <one_line+0x1aa>
 8002e82:	2b00      	cmp	r3, #0
	case EPD_BORDER_BYTE_NONE:  // no border byte requred
		break;
 8002e84:	e01b      	b.n	8002ebe <one_line+0x1d6>

	case EPD_BORDER_BYTE_ZERO:  // border byte == 0x00 requred
		*p++ = 0x00;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	617a      	str	r2, [r7, #20]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
		break;
 8002e90:	e015      	b.n	8002ebe <one_line+0x1d6>

	case EPD_BORDER_BYTE_SET:   // border byte needs to be set
		switch(stage) {
 8002e92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	db10      	blt.n	8002ebc <one_line+0x1d4>
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	dd02      	ble.n	8002ea4 <one_line+0x1bc>
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d006      	beq.n	8002eb0 <one_line+0x1c8>
			break;
		case EPD_normal:
			*p++ = 0xaa;
			break;
		}
		break;
 8002ea2:	e00b      	b.n	8002ebc <one_line+0x1d4>
			*p++ = 0x00;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	617a      	str	r2, [r7, #20]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
			break;
 8002eae:	e005      	b.n	8002ebc <one_line+0x1d4>
			*p++ = 0xaa;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	617a      	str	r2, [r7, #20]
 8002eb6:	22aa      	movs	r2, #170	; 0xaa
 8002eb8:	701a      	strb	r2, [r3, #0]
			break;
 8002eba:	bf00      	nop
		break;
 8002ebc:	bf00      	nop
	}
	// send the accumulated line buffer
	SPI_send(epd, epd->line_buffer, p - epd->line_buffer);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f81f 	bl	8002f14 <SPI_send>

	// output data to panel
	SPI_send(epd, CU8(0x70, 0x02), 2);
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <one_line+0x224>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	83bb      	strh	r3, [r7, #28]
 8002edc:	f107 031c 	add.w	r3, r7, #28
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f815 	bl	8002f14 <SPI_send>
	SPI_send(epd, CU8(0x72, 0x07), 2);
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <one_line+0x228>)
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	843b      	strh	r3, [r7, #32]
 8002ef0:	f107 0320 	add.w	r3, r7, #32
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f80b 	bl	8002f14 <SPI_send>

	//Delay_ms(1);
}
 8002efe:	bf00      	nop
 8002f00:	3728      	adds	r7, #40	; 0x28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	08017744 	.word	0x08017744
 8002f0c:	080176f8 	.word	0x080176f8
 8002f10:	08017748 	.word	0x08017748

08002f14 <SPI_send>:


// Low Level SPI Commands
// SPI Send Function.
static void SPI_send(EPD_HandleTypeDef *epd, uint8_t *pData, uint16_t Size) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	80fb      	strh	r3, [r7, #6]
	// Write CS Low
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, LOW);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8c1b      	ldrh	r3, [r3, #32]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f002 fdb3 	bl	8005a98 <HAL_GPIO_WritePin>
	// Send Data
	HAL_SPI_Transmit(epd->spi, pData, Size, 1000);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002f36:	88fa      	ldrh	r2, [r7, #6]
 8002f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	f007 f86b 	bl	800a018 <HAL_SPI_Transmit>
	// Write CS High
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8c1b      	ldrh	r3, [r3, #32]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f002 fda3 	bl	8005a98 <HAL_GPIO_WritePin>
	// Delay for 10us
	Delay_us(10);
 8002f52:	200a      	movs	r0, #10
 8002f54:	f7fd ff2c 	bl	8000db0 <DWT_Delay>
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <SPI_read>:

// SPI Read Function
static void SPI_read(EPD_HandleTypeDef *epd, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size){
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	807b      	strh	r3, [r7, #2]
	// Write CS Low
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, LOW);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8c1b      	ldrh	r3, [r3, #32]
 8002f76:	2200      	movs	r2, #0
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f002 fd8d 	bl	8005a98 <HAL_GPIO_WritePin>
	// Send Data
	HAL_SPI_TransmitReceive(epd->spi, pTxData, pRxData, Size, 1000);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	f007 f976 	bl	800a280 <HAL_SPI_TransmitReceive>
	// Write CS High
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8c1b      	ldrh	r3, [r3, #32]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f002 fd7a 	bl	8005a98 <HAL_GPIO_WritePin>
	// Delay for 10us
	Delay_us(10);
 8002fa4:	200a      	movs	r0, #10
 8002fa6:	f7fd ff03 	bl	8000db0 <DWT_Delay>
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <Canvas_Init>:

/************************************************************************************************
 * GLOBAL FUNCTIONS
 ***********************************************************************************************/

Canvas_error Canvas_Init(Canvas* canvas, uint16_t width, uint16_t height) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	803b      	strh	r3, [r7, #0]
	// Allocate memory for the buffer canvas depending on display size
	b_canvas = (uint8_t *)malloc(width * height);
 8002fc4:	887b      	ldrh	r3, [r7, #2]
 8002fc6:	883a      	ldrh	r2, [r7, #0]
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f013 fec1 	bl	8016d54 <malloc>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <Canvas_Init+0x84>)
 8002fd8:	601a      	str	r2, [r3, #0]
	memset(b_canvas, 0x00, width * height);
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <Canvas_Init+0x84>)
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	883a      	ldrh	r2, [r7, #0]
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2100      	movs	r1, #0
 8002fea:	f013 fedd 	bl	8016da8 <memset>

	if (b_canvas == NULL){
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <Canvas_Init+0x84>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <Canvas_Init+0x46>
		return CANVAS_MEM_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e01a      	b.n	8003030 <Canvas_Init+0x7c>
	}
	canvas->rotate = ROTATE_0;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	721a      	strb	r2, [r3, #8]
	canvas->image = b_canvas;
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <Canvas_Init+0x84>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	601a      	str	r2, [r3, #0]
	/* 1 byte = 8 pixels, so the width should be the multiple of 8 */
	canvas->width = width % 8 ? width + 8 - (width % 8) : width;
 8003008:	887b      	ldrh	r3, [r7, #2]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d006      	beq.n	8003022 <Canvas_Init+0x6e>
 8003014:	887b      	ldrh	r3, [r7, #2]
 8003016:	f023 0307 	bic.w	r3, r3, #7
 800301a:	b29b      	uxth	r3, r3
 800301c:	3308      	adds	r3, #8
 800301e:	b29b      	uxth	r3, r3
 8003020:	e000      	b.n	8003024 <Canvas_Init+0x70>
 8003022:	887b      	ldrh	r3, [r7, #2]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	8093      	strh	r3, [r2, #4]
	canvas->height = height;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	883a      	ldrh	r2, [r7, #0]
 800302c:	80da      	strh	r2, [r3, #6]

	return CANVAS_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000f88 	.word	0x20000f88

0800303c <canvas_DrawFilters>:

// Responsible for taking the software filter set model and updating the EPD
void canvas_DrawFilters(Canvas* canvas, EPD_HandleTypeDef* epd, filterSection_t *currentFilters, uint8_t invPosition) {
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	f6ad 1da4 	subw	sp, sp, #2468	; 0x9a4
 8003042:	af02      	add	r7, sp, #8
 8003044:	f107 040c 	add.w	r4, r7, #12
 8003048:	6020      	str	r0, [r4, #0]
 800304a:	f107 0008 	add.w	r0, r7, #8
 800304e:	6001      	str	r1, [r0, #0]
 8003050:	1d39      	adds	r1, r7, #4
 8003052:	600a      	str	r2, [r1, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	1cfb      	adds	r3, r7, #3
 8003058:	701a      	strb	r2, [r3, #0]
	// If it has been refreshed 5+ times, perform a full refresh
// invPosition inverts the color/filter name on a specific position. 0 = no invert, >0 = position is inverted

// TODO - Find out how many filter slots are installed and draw the canvas correctly

	uint8_t tmpName[10] = {0};
 800305a:	f607 1384 	addw	r3, r7, #2436	; 0x984
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	811a      	strh	r2, [r3, #8]

	uint8_t prevImage[2400];
	static uint8_t refreshCount = 0;	// Keep track of how many times the screen has been updated

	// Store the current image so that a partial update can be compared
	memcpy(prevImage, canvas->image, 2400);
 8003066:	f107 030c 	add.w	r3, r7, #12
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f44f 6316 	mov.w	r3, #2400	; 0x960
 800307a:	461a      	mov	r2, r3
 800307c:	f013 fe89 	bl	8016d92 <memcpy>

	//Start with a clear BG
	canvas_setBGImage(canvas, image_background);
 8003080:	f107 030c 	add.w	r3, r7, #12
 8003084:	497f      	ldr	r1, [pc, #508]	; (8003284 <canvas_DrawFilters+0x248>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	f000 fba7 	bl	80037da <canvas_setBGImage>
	canvas_DrawStringAt(canvas, 10, 3, "FILTERS", &Font16, 1);
 800308c:	f107 000c 	add.w	r0, r7, #12
 8003090:	2301      	movs	r3, #1
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	4b7c      	ldr	r3, [pc, #496]	; (8003288 <canvas_DrawFilters+0x24c>)
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	4b7c      	ldr	r3, [pc, #496]	; (800328c <canvas_DrawFilters+0x250>)
 800309a:	2203      	movs	r2, #3
 800309c:	210a      	movs	r1, #10
 800309e:	6800      	ldr	r0, [r0, #0]
 80030a0:	f000 fb55 	bl	800374e <canvas_DrawStringAt>

	// If a position is inverted, draw a filled rectangle in that position
	if (invPosition > 0) {
 80030a4:	1cfb      	adds	r3, r7, #3
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d02e      	beq.n	800310a <canvas_DrawFilters+0xce>
		switch (invPosition) {
 80030ac:	1cfb      	adds	r3, r7, #3
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d010      	beq.n	80030d6 <canvas_DrawFilters+0x9a>
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d01b      	beq.n	80030f0 <canvas_DrawFilters+0xb4>
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d126      	bne.n	800310a <canvas_DrawFilters+0xce>
			case 1:
				canvas_DrawFilledRectangle(canvas, 2, 19, 93, 75, false);
 80030bc:	f107 000c 	add.w	r0, r7, #12
 80030c0:	2300      	movs	r3, #0
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	234b      	movs	r3, #75	; 0x4b
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	235d      	movs	r3, #93	; 0x5d
 80030ca:	2213      	movs	r2, #19
 80030cc:	2102      	movs	r1, #2
 80030ce:	6800      	ldr	r0, [r0, #0]
 80030d0:	f000 fbb1 	bl	8003836 <canvas_DrawFilledRectangle>
				break;
 80030d4:	e019      	b.n	800310a <canvas_DrawFilters+0xce>
			case 2:
				canvas_DrawFilledRectangle(canvas, 2, 82, 93, 137, false);
 80030d6:	f107 000c 	add.w	r0, r7, #12
 80030da:	2300      	movs	r3, #0
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	2389      	movs	r3, #137	; 0x89
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	235d      	movs	r3, #93	; 0x5d
 80030e4:	2252      	movs	r2, #82	; 0x52
 80030e6:	2102      	movs	r1, #2
 80030e8:	6800      	ldr	r0, [r0, #0]
 80030ea:	f000 fba4 	bl	8003836 <canvas_DrawFilledRectangle>
				break;
 80030ee:	e00c      	b.n	800310a <canvas_DrawFilters+0xce>
			case 3:
				canvas_DrawFilledRectangle(canvas, 2, 144, 93, 198, false);
 80030f0:	f107 000c 	add.w	r0, r7, #12
 80030f4:	2300      	movs	r3, #0
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	23c6      	movs	r3, #198	; 0xc6
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	235d      	movs	r3, #93	; 0x5d
 80030fe:	2290      	movs	r2, #144	; 0x90
 8003100:	2102      	movs	r1, #2
 8003102:	6800      	ldr	r0, [r0, #0]
 8003104:	f000 fb97 	bl	8003836 <canvas_DrawFilledRectangle>
				break;
 8003108:	bf00      	nop
		}
	}

	// Loop through all filter stages
	for (uint8_t filterStage = 1; filterStage <= FILTER_SECTION_SIZE; filterStage++){
 800310a:	2301      	movs	r3, #1
 800310c:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
 8003110:	e148      	b.n	80033a4 <canvas_DrawFilters+0x368>
		// Try to find a filter in the current position
		for (uint8_t filter = 0; filter < FILTER_SECTION_SIZE; filter++){
 8003112:	2300      	movs	r3, #0
 8003114:	f887 3995 	strb.w	r3, [r7, #2453]	; 0x995
 8003118:	e13a      	b.n	8003390 <canvas_DrawFilters+0x354>
			if (currentFilters->filter[filter].position == filterStage){
 800311a:	f897 2995 	ldrb.w	r2, [r7, #2453]	; 0x995
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	440b      	add	r3, r1
 800312e:	3313      	adds	r3, #19
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 8003136:	429a      	cmp	r2, r3
 8003138:	f040 8125 	bne.w	8003386 <canvas_DrawFilters+0x34a>
				// Found a filter loaded in the current position
				// Store the name into tmpName
				memcpy(tmpName, currentFilters->filter[filter].filterName, 10);
 800313c:	f897 2995 	ldrb.w	r2, [r7, #2453]	; 0x995
 8003140:	1d39      	adds	r1, r7, #4
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	680a      	ldr	r2, [r1, #0]
 800314e:	4413      	add	r3, r2
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	f607 1384 	addw	r3, r7, #2436	; 0x984
 8003156:	6810      	ldr	r0, [r2, #0]
 8003158:	6851      	ldr	r1, [r2, #4]
 800315a:	c303      	stmia	r3!, {r0, r1}
 800315c:	8912      	ldrh	r2, [r2, #8]
 800315e:	801a      	strh	r2, [r3, #0]

				// "0x00" is a signal that there isn't any more data
				for (nameLen = 0; nameLen < 10; nameLen++){
 8003160:	2300      	movs	r3, #0
 8003162:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
 8003166:	e00d      	b.n	8003184 <canvas_DrawFilters+0x148>
					if (tmpName[nameLen] == 0x00){
 8003168:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 800316c:	f607 1298 	addw	r2, r7, #2456	; 0x998
 8003170:	4413      	add	r3, r2
 8003172:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <canvas_DrawFilters+0x152>
				for (nameLen = 0; nameLen < 10; nameLen++){
 800317a:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 800317e:	3301      	adds	r3, #1
 8003180:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
 8003184:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8003188:	2b09      	cmp	r3, #9
 800318a:	d9ed      	bls.n	8003168 <canvas_DrawFilters+0x12c>
 800318c:	e000      	b.n	8003190 <canvas_DrawFilters+0x154>
						break;
 800318e:	bf00      	nop
					}
				}

				// At this point, nameIndex has the length of the Name
				if (nameLen <= 5){
 8003190:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8003194:	2b05      	cmp	r3, #5
 8003196:	d85f      	bhi.n	8003258 <canvas_DrawFilters+0x21c>
					// Only 1 row needed
					// Find the starting Y pixel
					uint8_t sectionHeight;
					sectionHeight = epd->dots_per_line - 15;			// Account for the header
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	3b0f      	subs	r3, #15
 80031a4:	f887 3991 	strb.w	r3, [r7, #2449]	; 0x991
					sectionHeight /= FILTER_SECTION_SIZE;					// Account for the number of filters
 80031a8:	f897 3991 	ldrb.w	r3, [r7, #2449]	; 0x991
 80031ac:	4a38      	ldr	r2, [pc, #224]	; (8003290 <canvas_DrawFilters+0x254>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	f887 3991 	strb.w	r3, [r7, #2449]	; 0x991
					startPixelY = sectionHeight * (filterStage - 1);  	// Get the correct section
 80031b8:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 80031bc:	3b01      	subs	r3, #1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f897 2991 	ldrb.w	r2, [r7, #2449]	; 0x991
 80031c4:	fb12 f303 	smulbb	r3, r2, r3
 80031c8:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += sectionHeight / 2;					// Get to the center of the section
 80031cc:	f897 3991 	ldrb.w	r3, [r7, #2449]	; 0x991
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80031d8:	4413      	add	r3, r2
 80031da:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY -= 12;									// Account for the text height (assuming font24)
 80031de:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80031e2:	3b0c      	subs	r3, #12
 80031e4:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += 15;									// Re-incorporate the header length
 80031e8:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80031ec:	330f      	adds	r3, #15
 80031ee:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992

					// Find the staring X pixel
					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
 80031f2:	f107 0308 	add.w	r3, r7, #8
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f887 3990 	strb.w	r3, [r7, #2448]	; 0x990
					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line
 8003202:	f897 2997 	ldrb.w	r2, [r7, #2455]	; 0x997
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	4413      	add	r3, r2
 800320c:	0fda      	lsrs	r2, r3, #31
 800320e:	4413      	add	r3, r2
 8003210:	105b      	asrs	r3, r3, #1
 8003212:	425b      	negs	r3, r3
 8003214:	b2da      	uxtb	r2, r3
 8003216:	f897 3990 	ldrb.w	r3, [r7, #2448]	; 0x990
 800321a:	4413      	add	r3, r2
 800321c:	f887 3990 	strb.w	r3, [r7, #2448]	; 0x990

					// Draw Text
					canvas_DrawStringAt(canvas, startPixelX, startPixelY, tmpName, &Font24, filterStage == invPosition ? 1 : 0);
 8003220:	f897 3990 	ldrb.w	r3, [r7, #2448]	; 0x990
 8003224:	b299      	uxth	r1, r3
 8003226:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800322a:	b29c      	uxth	r4, r3
 800322c:	1cfb      	adds	r3, r7, #3
 800322e:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f607 1284 	addw	r2, r7, #2436	; 0x984
 8003242:	f107 000c 	add.w	r0, r7, #12
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <canvas_DrawFilters+0x258>)
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	4622      	mov	r2, r4
 8003250:	6800      	ldr	r0, [r0, #0]
 8003252:	f000 fa7c 	bl	800374e <canvas_DrawStringAt>
 8003256:	e096      	b.n	8003386 <canvas_DrawFilters+0x34a>

				} else {
					// Need to split into 2 rows
					uint8_t topLine[6] = {0};							// Top Line Holder
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	809a      	strh	r2, [r3, #4]
					uint8_t botLine[6] = {0};							// Bottom Line Holder
 8003262:	f107 0314 	add.w	r3, r7, #20
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	809a      	strh	r2, [r3, #4]
					memcpy(topLine, tmpName, 5);
 800326c:	f607 1184 	addw	r1, r7, #2436	; 0x984
 8003270:	f107 031c 	add.w	r3, r7, #28
 8003274:	2205      	movs	r2, #5
 8003276:	4618      	mov	r0, r3
 8003278:	f013 fd8b 	bl	8016d92 <memcpy>

					for (uint8_t i = 5; i < 10; i++){
 800327c:	2305      	movs	r3, #5
 800327e:	f887 3994 	strb.w	r3, [r7, #2452]	; 0x994
 8003282:	e01b      	b.n	80032bc <canvas_DrawFilters+0x280>
 8003284:	08018154 	.word	0x08018154
 8003288:	2000003c 	.word	0x2000003c
 800328c:	0801774c 	.word	0x0801774c
 8003290:	aaaaaaab 	.word	0xaaaaaaab
 8003294:	20000044 	.word	0x20000044
						botLine[i - 5] = tmpName[i];
 8003298:	f897 2994 	ldrb.w	r2, [r7, #2452]	; 0x994
 800329c:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 80032a0:	3b05      	subs	r3, #5
 80032a2:	f607 1198 	addw	r1, r7, #2456	; 0x998
 80032a6:	440a      	add	r2, r1
 80032a8:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80032ac:	f107 0214 	add.w	r2, r7, #20
 80032b0:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 5; i < 10; i++){
 80032b2:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 80032b6:	3301      	adds	r3, #1
 80032b8:	f887 3994 	strb.w	r3, [r7, #2452]	; 0x994
 80032bc:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 80032c0:	2b09      	cmp	r3, #9
 80032c2:	d9e9      	bls.n	8003298 <canvas_DrawFilters+0x25c>
					}

					// Find the starting Y pixel
					uint8_t sectionHeight;
					sectionHeight = epd->dots_per_line - 15;			// Account for the header
 80032c4:	f107 0308 	add.w	r3, r7, #8
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	3b0f      	subs	r3, #15
 80032d0:	f887 3993 	strb.w	r3, [r7, #2451]	; 0x993
					sectionHeight /= FILTER_SECTION_SIZE;					// Account for the number of filters
 80032d4:	f897 3993 	ldrb.w	r3, [r7, #2451]	; 0x993
 80032d8:	4a48      	ldr	r2, [pc, #288]	; (80033fc <canvas_DrawFilters+0x3c0>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	f887 3993 	strb.w	r3, [r7, #2451]	; 0x993
					startPixelY = sectionHeight * (filterStage - 1);  	// Get the correct section
 80032e4:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f897 2993 	ldrb.w	r2, [r7, #2451]	; 0x993
 80032f0:	fb12 f303 	smulbb	r3, r2, r3
 80032f4:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += sectionHeight / 2;					// Get to the center of the section
 80032f8:	f897 3993 	ldrb.w	r3, [r7, #2451]	; 0x993
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003304:	4413      	add	r3, r2
 8003306:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY -= 24;									// Account for the text height (assuming font24)
 800330a:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800330e:	3b18      	subs	r3, #24
 8003310:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += 15;									// Re-incorporate the header length
 8003314:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003318:	330f      	adds	r3, #15
 800331a:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
//					// Find the staring X pixel
//					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
//					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line

					// Draw text
					canvas_DrawStringAt(canvas, 6, startPixelY, topLine, &Font24, filterStage == invPosition ? 1 : 0);
 800331e:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003322:	b299      	uxth	r1, r3
 8003324:	1cfb      	adds	r3, r7, #3
 8003326:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f107 021c 	add.w	r2, r7, #28
 800333a:	f107 000c 	add.w	r0, r7, #12
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <canvas_DrawFilters+0x3c4>)
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	460a      	mov	r2, r1
 8003348:	2106      	movs	r1, #6
 800334a:	6800      	ldr	r0, [r0, #0]
 800334c:	f000 f9ff 	bl	800374e <canvas_DrawStringAt>

//					// Find the staring X pixel
//					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
//					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line

					canvas_DrawStringAt(canvas, 6, startPixelY + 24, botLine, &Font24, filterStage == invPosition ? 1 : 0);
 8003350:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003354:	b29b      	uxth	r3, r3
 8003356:	3318      	adds	r3, #24
 8003358:	b299      	uxth	r1, r3
 800335a:	1cfb      	adds	r3, r7, #3
 800335c:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f107 0214 	add.w	r2, r7, #20
 8003370:	f107 000c 	add.w	r0, r7, #12
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	4b22      	ldr	r3, [pc, #136]	; (8003400 <canvas_DrawFilters+0x3c4>)
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	4613      	mov	r3, r2
 800337c:	460a      	mov	r2, r1
 800337e:	2106      	movs	r1, #6
 8003380:	6800      	ldr	r0, [r0, #0]
 8003382:	f000 f9e4 	bl	800374e <canvas_DrawStringAt>
		for (uint8_t filter = 0; filter < FILTER_SECTION_SIZE; filter++){
 8003386:	f897 3995 	ldrb.w	r3, [r7, #2453]	; 0x995
 800338a:	3301      	adds	r3, #1
 800338c:	f887 3995 	strb.w	r3, [r7, #2453]	; 0x995
 8003390:	f897 3995 	ldrb.w	r3, [r7, #2453]	; 0x995
 8003394:	2b02      	cmp	r3, #2
 8003396:	f67f aec0 	bls.w	800311a <canvas_DrawFilters+0xde>
	for (uint8_t filterStage = 1; filterStage <= FILTER_SECTION_SIZE; filterStage++){
 800339a:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 800339e:	3301      	adds	r3, #1
 80033a0:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
 80033a4:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	f67f aeb2 	bls.w	8003112 <canvas_DrawFilters+0xd6>
	}


	// Right now, it just does a complete refresh - Need to change in the future
	// Print the rendered image
	if (refreshCount < CYCLES_UNTIL_REFRESH){
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <canvas_DrawFilters+0x3c8>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d810      	bhi.n	80033d8 <canvas_DrawFilters+0x39c>
		canvas_UpdateEPD(canvas, epd, prevImage);
 80033b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033ba:	f107 0108 	add.w	r1, r7, #8
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	6809      	ldr	r1, [r1, #0]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	f000 fa1f 	bl	8003808 <canvas_UpdateEPD>
		refreshCount++;
 80033ca:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <canvas_DrawFilters+0x3c8>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <canvas_DrawFilters+0x3c8>)
 80033d4:	701a      	strb	r2, [r3, #0]
		canvas_PrintEPD(canvas, epd);
		refreshCount = 0;
	}


}
 80033d6:	e00c      	b.n	80033f2 <canvas_DrawFilters+0x3b6>
		EPD_set_enable_temperature();
 80033d8:	f7ff f8e2 	bl	80025a0 <EPD_set_enable_temperature>
		canvas_PrintEPD(canvas, epd);
 80033dc:	f107 0208 	add.w	r2, r7, #8
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	6811      	ldr	r1, [r2, #0]
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	f000 f9e2 	bl	80037b0 <canvas_PrintEPD>
		refreshCount = 0;
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <canvas_DrawFilters+0x3c8>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	f607 179c 	addw	r7, r7, #2460	; 0x99c
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	aaaaaaab 	.word	0xaaaaaaab
 8003400:	20000044 	.word	0x20000044
 8003404:	2000025f 	.word	0x2000025f

08003408 <canvas_SetRotate>:

void canvas_SetRotate(Canvas* canvas, uint8_t rotate) {
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
	canvas->rotate = rotate;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	721a      	strb	r2, [r3, #8]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <canvas_DrawAbsolutePixel>:

/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void canvas_DrawAbsolutePixel(Canvas* canvas, uint16_t x, uint16_t y, int colored) {
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	817b      	strh	r3, [r7, #10]
 8003436:	4613      	mov	r3, r2
 8003438:	813b      	strh	r3, [r7, #8]

	// swap x order. 7 to 0, 6 to 1, 5 to 2, etc.
	// 1. Get bit position
	uint8_t bit_pos = x % 8;
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	75fb      	strb	r3, [r7, #23]

	switch (bit_pos){
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b07      	cmp	r3, #7
 8003448:	d82a      	bhi.n	80034a0 <canvas_DrawAbsolutePixel+0x78>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <canvas_DrawAbsolutePixel+0x28>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	08003471 	.word	0x08003471
 8003454:	08003477 	.word	0x08003477
 8003458:	0800347d 	.word	0x0800347d
 800345c:	08003483 	.word	0x08003483
 8003460:	08003489 	.word	0x08003489
 8003464:	0800348f 	.word	0x0800348f
 8003468:	08003495 	.word	0x08003495
 800346c:	0800349b 	.word	0x0800349b
		case 0:
			bit_pos = 7;
 8003470:	2307      	movs	r3, #7
 8003472:	75fb      	strb	r3, [r7, #23]
			break;
 8003474:	e014      	b.n	80034a0 <canvas_DrawAbsolutePixel+0x78>
		case 1:
			bit_pos = 6;
 8003476:	2306      	movs	r3, #6
 8003478:	75fb      	strb	r3, [r7, #23]
			break;
 800347a:	e011      	b.n	80034a0 <canvas_DrawAbsolutePixel+0x78>
		case 2:
			bit_pos = 5;
 800347c:	2305      	movs	r3, #5
 800347e:	75fb      	strb	r3, [r7, #23]
			break;
 8003480:	e00e      	b.n	80034a0 <canvas_DrawAbsolutePixel+0x78>
		case 3:
			bit_pos = 4;
 8003482:	2304      	movs	r3, #4
 8003484:	75fb      	strb	r3, [r7, #23]
			break;
 8003486:	e00b      	b.n	80034a0 <canvas_DrawAbsolutePixel+0x78>
		case 4:
			bit_pos = 3;
 8003488:	2303      	movs	r3, #3
 800348a:	75fb      	strb	r3, [r7, #23]
			break;
 800348c:	e008      	b.n	80034a0 <canvas_DrawAbsolutePixel+0x78>
		case 5:
			bit_pos = 2;
 800348e:	2302      	movs	r3, #2
 8003490:	75fb      	strb	r3, [r7, #23]
			break;
 8003492:	e005      	b.n	80034a0 <canvas_DrawAbsolutePixel+0x78>
		case 6:
			bit_pos = 1;
 8003494:	2301      	movs	r3, #1
 8003496:	75fb      	strb	r3, [r7, #23]
			break;
 8003498:	e002      	b.n	80034a0 <canvas_DrawAbsolutePixel+0x78>
		case 7:
			bit_pos = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]
			break;
 800349e:	bf00      	nop
	}

    if (x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	889b      	ldrh	r3, [r3, #4]
 80034a4:	897a      	ldrh	r2, [r7, #10]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d249      	bcs.n	800353e <canvas_DrawAbsolutePixel+0x116>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	88db      	ldrh	r3, [r3, #6]
 80034ae:	893a      	ldrh	r2, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d244      	bcs.n	800353e <canvas_DrawAbsolutePixel+0x116>
        	canvas->image[(x + y * canvas->width) / 8] |= 0x80 >> (bit_pos);
        } else {
        	canvas->image[(x + y * canvas->width) / 8] &= ~(0x80 >> (bit_pos));
        }
    } else {
        if (colored) {
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d021      	beq.n	80034fe <canvas_DrawAbsolutePixel+0xd6>
        	canvas->image[(x + y * canvas->width) / 8] &= ~(0x80 >> (bit_pos));
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	8979      	ldrh	r1, [r7, #10]
 80034c0:	893b      	ldrh	r3, [r7, #8]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	8880      	ldrh	r0, [r0, #4]
 80034c6:	fb00 f303 	mul.w	r3, r0, r3
 80034ca:	440b      	add	r3, r1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da00      	bge.n	80034d2 <canvas_DrawAbsolutePixel+0xaa>
 80034d0:	3307      	adds	r3, #7
 80034d2:	10db      	asrs	r3, r3, #3
 80034d4:	4618      	mov	r0, r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	4413      	add	r3, r2
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b25a      	sxtb	r2, r3
 80034de:	7dfb      	ldrb	r3, [r7, #23]
 80034e0:	2180      	movs	r1, #128	; 0x80
 80034e2:	fa41 f303 	asr.w	r3, r1, r3
 80034e6:	b25b      	sxtb	r3, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	4013      	ands	r3, r2
 80034ee:	b25a      	sxtb	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4601      	mov	r1, r0
 80034f6:	440b      	add	r3, r1
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	e020      	b.n	8003540 <canvas_DrawAbsolutePixel+0x118>
        } else {
        	canvas->image[(x + y * canvas->width) / 8] |= 0x80 >> (bit_pos);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	8979      	ldrh	r1, [r7, #10]
 8003504:	893b      	ldrh	r3, [r7, #8]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	8880      	ldrh	r0, [r0, #4]
 800350a:	fb00 f303 	mul.w	r3, r0, r3
 800350e:	440b      	add	r3, r1
 8003510:	2b00      	cmp	r3, #0
 8003512:	da00      	bge.n	8003516 <canvas_DrawAbsolutePixel+0xee>
 8003514:	3307      	adds	r3, #7
 8003516:	10db      	asrs	r3, r3, #3
 8003518:	4618      	mov	r0, r3
 800351a:	4603      	mov	r3, r0
 800351c:	4413      	add	r3, r2
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	b25a      	sxtb	r2, r3
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	2180      	movs	r1, #128	; 0x80
 8003526:	fa41 f303 	asr.w	r3, r1, r3
 800352a:	b25b      	sxtb	r3, r3
 800352c:	4313      	orrs	r3, r2
 800352e:	b25a      	sxtb	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4601      	mov	r1, r0
 8003536:	440b      	add	r3, r1
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	e000      	b.n	8003540 <canvas_DrawAbsolutePixel+0x118>
        return;
 800353e:	bf00      	nop
        }
    }
}
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop

0800354c <canvas_DrawPixel>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void canvas_DrawPixel(Canvas* canvas, uint16_t x, uint16_t y, int colored) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	817b      	strh	r3, [r7, #10]
 800355a:	4613      	mov	r3, r2
 800355c:	813b      	strh	r3, [r7, #8]
    int point_temp;
    if (canvas->rotate == ROTATE_0) {
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	7a1b      	ldrb	r3, [r3, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d110      	bne.n	8003588 <canvas_DrawPixel+0x3c>
        if(x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	889b      	ldrh	r3, [r3, #4]
 800356a:	897a      	ldrh	r2, [r7, #10]
 800356c:	429a      	cmp	r2, r3
 800356e:	d267      	bcs.n	8003640 <canvas_DrawPixel+0xf4>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	88db      	ldrh	r3, [r3, #6]
 8003574:	893a      	ldrh	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	d262      	bcs.n	8003640 <canvas_DrawPixel+0xf4>
            return;
        }
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 800357a:	893a      	ldrh	r2, [r7, #8]
 800357c:	8979      	ldrh	r1, [r7, #10]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff ff51 	bl	8003428 <canvas_DrawAbsolutePixel>
 8003586:	e062      	b.n	800364e <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_90) {
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	7a1b      	ldrb	r3, [r3, #8]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d119      	bne.n	80035c4 <canvas_DrawPixel+0x78>
        if(x < 0 || x >= canvas->height || y < 0 || y >= canvas->width) {
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88db      	ldrh	r3, [r3, #6]
 8003594:	897a      	ldrh	r2, [r7, #10]
 8003596:	429a      	cmp	r2, r3
 8003598:	d254      	bcs.n	8003644 <canvas_DrawPixel+0xf8>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	889b      	ldrh	r3, [r3, #4]
 800359e:	893a      	ldrh	r2, [r7, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d24f      	bcs.n	8003644 <canvas_DrawPixel+0xf8>
          return;
        }
        point_temp = x;
 80035a4:	897b      	ldrh	r3, [r7, #10]
 80035a6:	617b      	str	r3, [r7, #20]
        x = canvas->width - y;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	889a      	ldrh	r2, [r3, #4]
 80035ac:	893b      	ldrh	r3, [r7, #8]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	817b      	strh	r3, [r7, #10]
        y = point_temp;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 80035b6:	893a      	ldrh	r2, [r7, #8]
 80035b8:	8979      	ldrh	r1, [r7, #10]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff ff33 	bl	8003428 <canvas_DrawAbsolutePixel>
 80035c2:	e044      	b.n	800364e <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_180) {
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	7a1b      	ldrb	r3, [r3, #8]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d11a      	bne.n	8003602 <canvas_DrawPixel+0xb6>
        if(x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	889b      	ldrh	r3, [r3, #4]
 80035d0:	897a      	ldrh	r2, [r7, #10]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d238      	bcs.n	8003648 <canvas_DrawPixel+0xfc>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	88db      	ldrh	r3, [r3, #6]
 80035da:	893a      	ldrh	r2, [r7, #8]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d233      	bcs.n	8003648 <canvas_DrawPixel+0xfc>
          return;
        }
        x = canvas->width - x;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	889a      	ldrh	r2, [r3, #4]
 80035e4:	897b      	ldrh	r3, [r7, #10]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	817b      	strh	r3, [r7, #10]
        y = canvas->height - y;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	88da      	ldrh	r2, [r3, #6]
 80035ee:	893b      	ldrh	r3, [r7, #8]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 80035f4:	893a      	ldrh	r2, [r7, #8]
 80035f6:	8979      	ldrh	r1, [r7, #10]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f7ff ff14 	bl	8003428 <canvas_DrawAbsolutePixel>
 8003600:	e025      	b.n	800364e <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_270) {
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	7a1b      	ldrb	r3, [r3, #8]
 8003606:	2b03      	cmp	r3, #3
 8003608:	d121      	bne.n	800364e <canvas_DrawPixel+0x102>
        if(x < 0 || x >= canvas->height || y < 0 || y >= canvas->width) {
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	88db      	ldrh	r3, [r3, #6]
 800360e:	897a      	ldrh	r2, [r7, #10]
 8003610:	429a      	cmp	r2, r3
 8003612:	d21b      	bcs.n	800364c <canvas_DrawPixel+0x100>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	889b      	ldrh	r3, [r3, #4]
 8003618:	893a      	ldrh	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	d216      	bcs.n	800364c <canvas_DrawPixel+0x100>
          return;
        }
        point_temp = x;
 800361e:	897b      	ldrh	r3, [r7, #10]
 8003620:	617b      	str	r3, [r7, #20]
        x = y;
 8003622:	893b      	ldrh	r3, [r7, #8]
 8003624:	817b      	strh	r3, [r7, #10]
        y = canvas->height - point_temp;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	88da      	ldrh	r2, [r3, #6]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	b29b      	uxth	r3, r3
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 8003632:	893a      	ldrh	r2, [r7, #8]
 8003634:	8979      	ldrh	r1, [r7, #10]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff fef5 	bl	8003428 <canvas_DrawAbsolutePixel>
 800363e:	e006      	b.n	800364e <canvas_DrawPixel+0x102>
            return;
 8003640:	bf00      	nop
 8003642:	e004      	b.n	800364e <canvas_DrawPixel+0x102>
          return;
 8003644:	bf00      	nop
 8003646:	e002      	b.n	800364e <canvas_DrawPixel+0x102>
          return;
 8003648:	bf00      	nop
 800364a:	e000      	b.n	800364e <canvas_DrawPixel+0x102>
          return;
 800364c:	bf00      	nop
    }
}
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <canvas_DrawCharAt>:

/**
 *  @brief: this draws a character on the frame buffer but not refresh
 */
void canvas_DrawCharAt(Canvas* canvas, uint16_t x, uint16_t y, char ascii_char, sFONT* font, int colored) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	4608      	mov	r0, r1
 800365e:	4611      	mov	r1, r2
 8003660:	461a      	mov	r2, r3
 8003662:	4603      	mov	r3, r0
 8003664:	817b      	strh	r3, [r7, #10]
 8003666:	460b      	mov	r3, r1
 8003668:	813b      	strh	r3, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	71fb      	strb	r3, [r7, #7]
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	3b20      	subs	r3, #32
 8003672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003674:	88d2      	ldrh	r2, [r2, #6]
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800367c:	8892      	ldrh	r2, [r2, #4]
 800367e:	08d2      	lsrs	r2, r2, #3
 8003680:	b292      	uxth	r2, r2
 8003682:	4611      	mov	r1, r2
 8003684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003686:	8892      	ldrh	r2, [r2, #4]
 8003688:	f002 0207 	and.w	r2, r2, #7
 800368c:	b292      	uxth	r2, r2
 800368e:	2a00      	cmp	r2, #0
 8003690:	bf14      	ite	ne
 8003692:	2201      	movne	r2, #1
 8003694:	2200      	moveq	r2, #0
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	440a      	add	r2, r1
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	613b      	str	r3, [r7, #16]
    const unsigned char* ptr = &font->table[char_offset];
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4413      	add	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

    for (j = 0; j < font->Height; j++) {
 80036aa:	2300      	movs	r3, #0
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	e044      	b.n	800373a <canvas_DrawCharAt+0xe6>
        for (i = 0; i < font->Width; i++) {
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	e02e      	b.n	8003714 <canvas_DrawCharAt+0xc0>
            if (*ptr & (0x80 >> (i % 8))) {
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	4619      	mov	r1, r3
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	425a      	negs	r2, r3
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	f002 0207 	and.w	r2, r2, #7
 80036c8:	bf58      	it	pl
 80036ca:	4253      	negpl	r3, r2
 80036cc:	2280      	movs	r2, #128	; 0x80
 80036ce:	fa42 f303 	asr.w	r3, r2, r3
 80036d2:	400b      	ands	r3, r1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <canvas_DrawCharAt+0xa0>
                canvas_DrawPixel(canvas, x + i, y + j, colored);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	897b      	ldrh	r3, [r7, #10]
 80036de:	4413      	add	r3, r2
 80036e0:	b299      	uxth	r1, r3
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	893b      	ldrh	r3, [r7, #8]
 80036e8:	4413      	add	r3, r2
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f7ff ff2c 	bl	800354c <canvas_DrawPixel>
            }
            if (i % 8 == 7) {
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	425a      	negs	r2, r3
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	f002 0207 	and.w	r2, r2, #7
 8003700:	bf58      	it	pl
 8003702:	4253      	negpl	r3, r2
 8003704:	2b07      	cmp	r3, #7
 8003706:	d102      	bne.n	800370e <canvas_DrawCharAt+0xba>
                ptr++;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	3301      	adds	r3, #1
 800370c:	617b      	str	r3, [r7, #20]
        for (i = 0; i < font->Width; i++) {
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3301      	adds	r3, #1
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	889b      	ldrh	r3, [r3, #4]
 8003718:	461a      	mov	r2, r3
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4293      	cmp	r3, r2
 800371e:	dbca      	blt.n	80036b6 <canvas_DrawCharAt+0x62>
            }
        }
        if (font->Width % 8 != 0) {
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	889b      	ldrh	r3, [r3, #4]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <canvas_DrawCharAt+0xe0>
            ptr++;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	3301      	adds	r3, #1
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	88db      	ldrh	r3, [r3, #6]
 800373e:	461a      	mov	r2, r3
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	4293      	cmp	r3, r2
 8003744:	dbb4      	blt.n	80036b0 <canvas_DrawCharAt+0x5c>
        }
    }
}
 8003746:	bf00      	nop
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <canvas_DrawStringAt>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void canvas_DrawStringAt(Canvas* canvas, uint16_t x, uint16_t y, const char* text, sFONT* font, int colored) {
 800374e:	b580      	push	{r7, lr}
 8003750:	b08a      	sub	sp, #40	; 0x28
 8003752:	af02      	add	r7, sp, #8
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	817b      	strh	r3, [r7, #10]
 800375c:	4613      	mov	r3, r2
 800375e:	813b      	strh	r3, [r7, #8]
    const char* p_text = text;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	61fb      	str	r3, [r7, #28]
    unsigned int counter = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]
    int refcolumn = x;
 8003768:	897b      	ldrh	r3, [r7, #10]
 800376a:	617b      	str	r3, [r7, #20]

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 800376c:	e018      	b.n	80037a0 <canvas_DrawStringAt+0x52>
        /* Display one character on EPD */
        canvas_DrawCharAt(canvas, refcolumn, y, *p_text, font, colored);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	b299      	uxth	r1, r3
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	7818      	ldrb	r0, [r3, #0]
 8003776:	893a      	ldrh	r2, [r7, #8]
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377a:	9301      	str	r3, [sp, #4]
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	4603      	mov	r3, r0
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff ff66 	bl	8003654 <canvas_DrawCharAt>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	889b      	ldrh	r3, [r3, #4]
 800378c:	461a      	mov	r2, r3
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	4413      	add	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
        /* Point on the next character */
        p_text++;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	3301      	adds	r3, #1
 8003798:	61fb      	str	r3, [r7, #28]
        counter++;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	3301      	adds	r3, #1
 800379e:	61bb      	str	r3, [r7, #24]
    while (*p_text != 0) {
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e2      	bne.n	800376e <canvas_DrawStringAt+0x20>
    }
}
 80037a8:	bf00      	nop
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <canvas_PrintEPD>:

/**
*  @brief:
*/
void canvas_PrintEPD(Canvas* canvas, EPD_HandleTypeDef* epd){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]

	EPD_begin(epd);
 80037ba:	6838      	ldr	r0, [r7, #0]
 80037bc:	f7fe fb70 	bl	8001ea0 <EPD_begin>
	EPD_image_0(epd, canvas->image);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4619      	mov	r1, r3
 80037c6:	6838      	ldr	r0, [r7, #0]
 80037c8:	f7fe ff12 	bl	80025f0 <EPD_image_0>
	EPD_end(epd);
 80037cc:	6838      	ldr	r0, [r7, #0]
 80037ce:	f7fe fdd7 	bl	8002380 <EPD_end>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <canvas_setBGImage>:

/**
*  @brief: This updates the canvas background image
*/
void canvas_setBGImage(Canvas* canvas, const uint8_t* bg_image){
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
	uint16_t size = canvas->width * canvas->height;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	889a      	ldrh	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	88db      	ldrh	r3, [r3, #6]
 80037ec:	fb12 f303 	smulbb	r3, r2, r3
 80037f0:	81fb      	strh	r3, [r7, #14]
	memcpy(canvas->image, bg_image, size);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	89fa      	ldrh	r2, [r7, #14]
 80037f8:	6839      	ldr	r1, [r7, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f013 fac9 	bl	8016d92 <memcpy>
}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <canvas_UpdateEPD>:

void canvas_UpdateEPD(Canvas* canvas, EPD_HandleTypeDef* epd, uint8_t* old_img){
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]

	EPD_begin(epd);
 8003814:	68b8      	ldr	r0, [r7, #8]
 8003816:	f7fe fb43 	bl	8001ea0 <EPD_begin>
	EPD_partial_image(epd, old_img, canvas->image);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	68b8      	ldr	r0, [r7, #8]
 8003824:	f7fe ff03 	bl	800262e <EPD_partial_image>
	EPD_end(epd);
 8003828:	68b8      	ldr	r0, [r7, #8]
 800382a:	f7fe fda9 	bl	8002380 <EPD_end>
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <canvas_DrawFilledRectangle>:
 ***********************************************************************************************/

/**
*  @brief: this draws a filled rectangle
*/
void canvas_DrawFilledRectangle(Canvas* canvas, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t colored) {
 8003836:	b580      	push	{r7, lr}
 8003838:	b08a      	sub	sp, #40	; 0x28
 800383a:	af02      	add	r7, sp, #8
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	4608      	mov	r0, r1
 8003840:	4611      	mov	r1, r2
 8003842:	461a      	mov	r2, r3
 8003844:	4603      	mov	r3, r0
 8003846:	70fb      	strb	r3, [r7, #3]
 8003848:	460b      	mov	r3, r1
 800384a:	70bb      	strb	r3, [r7, #2]
 800384c:	4613      	mov	r3, r2
 800384e:	707b      	strb	r3, [r7, #1]
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
 8003850:	787a      	ldrb	r2, [r7, #1]
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	429a      	cmp	r2, r3
 8003856:	d901      	bls.n	800385c <canvas_DrawFilledRectangle+0x26>
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	e000      	b.n	800385e <canvas_DrawFilledRectangle+0x28>
 800385c:	787b      	ldrb	r3, [r7, #1]
 800385e:	61bb      	str	r3, [r7, #24]
    max_x = x1 > x0 ? x1 : x0;
 8003860:	787a      	ldrb	r2, [r7, #1]
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	429a      	cmp	r2, r3
 8003866:	d901      	bls.n	800386c <canvas_DrawFilledRectangle+0x36>
 8003868:	787b      	ldrb	r3, [r7, #1]
 800386a:	e000      	b.n	800386e <canvas_DrawFilledRectangle+0x38>
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	617b      	str	r3, [r7, #20]
    min_y = y1 > y0 ? y0 : y1;
 8003870:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003874:	78bb      	ldrb	r3, [r7, #2]
 8003876:	429a      	cmp	r2, r3
 8003878:	d901      	bls.n	800387e <canvas_DrawFilledRectangle+0x48>
 800387a:	78bb      	ldrb	r3, [r7, #2]
 800387c:	e001      	b.n	8003882 <canvas_DrawFilledRectangle+0x4c>
 800387e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003882:	613b      	str	r3, [r7, #16]
    max_y = y1 > y0 ? y1 : y0;
 8003884:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003888:	78bb      	ldrb	r3, [r7, #2]
 800388a:	429a      	cmp	r2, r3
 800388c:	d902      	bls.n	8003894 <canvas_DrawFilledRectangle+0x5e>
 800388e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003892:	e000      	b.n	8003896 <canvas_DrawFilledRectangle+0x60>
 8003894:	78bb      	ldrb	r3, [r7, #2]
 8003896:	60fb      	str	r3, [r7, #12]

    for (i = min_x; i <= max_x; i++) {
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	e016      	b.n	80038cc <canvas_DrawFilledRectangle+0x96>
      canvas_DrawVerticalLine(canvas, i, min_y, max_y - min_y + 1, colored);
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	b2d9      	uxtb	r1, r3
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	b2d8      	uxtb	r0, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	4602      	mov	r2, r0
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f80b 	bl	80038dc <canvas_DrawVerticalLine>
    for (i = min_x; i <= max_x; i++) {
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3301      	adds	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	dde4      	ble.n	800389e <canvas_DrawFilledRectangle+0x68>
    }
}
 80038d4:	bf00      	nop
 80038d6:	3720      	adds	r7, #32
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <canvas_DrawVerticalLine>:


/**
*  @brief: this draws a vertical line on the frame buffer
*/
void canvas_DrawVerticalLine(Canvas* canvas, uint8_t x, uint8_t y, uint8_t line_height, uint8_t colored) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	4608      	mov	r0, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	461a      	mov	r2, r3
 80038ea:	4603      	mov	r3, r0
 80038ec:	70fb      	strb	r3, [r7, #3]
 80038ee:	460b      	mov	r3, r1
 80038f0:	70bb      	strb	r3, [r7, #2]
 80038f2:	4613      	mov	r3, r2
 80038f4:	707b      	strb	r3, [r7, #1]
    int i;
    for (i = y; i < y + line_height; i++) {
 80038f6:	78bb      	ldrb	r3, [r7, #2]
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e00a      	b.n	8003912 <canvas_DrawVerticalLine+0x36>
        canvas_DrawPixel(canvas, x, i, colored);
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	b299      	uxth	r1, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	b29a      	uxth	r2, r3
 8003904:	7e3b      	ldrb	r3, [r7, #24]
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fe20 	bl	800354c <canvas_DrawPixel>
    for (i = y; i < y + line_height; i++) {
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3301      	adds	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	78ba      	ldrb	r2, [r7, #2]
 8003914:	787b      	ldrb	r3, [r7, #1]
 8003916:	4413      	add	r3, r2
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	429a      	cmp	r2, r3
 800391c:	dbee      	blt.n	80038fc <canvas_DrawVerticalLine+0x20>
    }
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <LM75B_Init>:
LM75B_error LM75B_i2cWriteBytes(uint8_t subAddr, uint8_t *src, uint8_t Size);

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/
LM75B_error LM75B_Init(I2C_HandleTypeDef *hi2c, GPIO_TypeDef *Power_Port, uint16_t Power_Pin) {
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
	// Setup the Power and Comms
	pi2c = hi2c;
 8003936:	4a1a      	ldr	r2, [pc, #104]	; (80039a0 <LM75B_Init+0x78>)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6013      	str	r3, [r2, #0]
	LM75BPowerPort = Power_Port;
 800393c:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <LM75B_Init+0x7c>)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	6013      	str	r3, [r2, #0]
	LM75BPowerPin = Power_Pin;
 8003942:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <LM75B_Init+0x80>)
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_SET);
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <LM75B_Init+0x7c>)
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <LM75B_Init+0x80>)
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	2201      	movs	r2, #1
 8003952:	4619      	mov	r1, r3
 8003954:	f002 f8a0 	bl	8005a98 <HAL_GPIO_WritePin>
	HAL_Delay(1); // Small delay to ensure stable power
 8003958:	2001      	movs	r0, #1
 800395a:	f001 fdad 	bl	80054b8 <HAL_Delay>

	// Read the configuration register and see if I2C Returns an issue
	uint8_t tempConfig;
	LM75B_error status = readConfigReg(&tempConfig);
 800395e:	f107 0316 	add.w	r3, r7, #22
 8003962:	4618      	mov	r0, r3
 8003964:	f000 f88a 	bl	8003a7c <readConfigReg>
 8003968:	4603      	mov	r3, r0
 800396a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_RESET);
 800396c:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <LM75B_Init+0x7c>)
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <LM75B_Init+0x80>)
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	2200      	movs	r2, #0
 8003976:	4619      	mov	r1, r3
 8003978:	f002 f88e 	bl	8005a98 <HAL_GPIO_WritePin>

	if (status != LM75B_OK) {
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d001      	beq.n	8003986 <LM75B_Init+0x5e>
		return LM75B_ERR;
 8003982:	2300      	movs	r3, #0
 8003984:	e008      	b.n	8003998 <LM75B_Init+0x70>
	}

	if (tempConfig == 0x00){
 8003986:	7dbb      	ldrb	r3, [r7, #22]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <LM75B_Init+0x6e>
		LM75BInitialized = true;
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <LM75B_Init+0x84>)
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
		return LM75B_OK;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <LM75B_Init+0x70>
	}

	return LM75B_ERR;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20000260 	.word	0x20000260
 80039a4:	20000f90 	.word	0x20000f90
 80039a8:	20000f8c 	.word	0x20000f8c
 80039ac:	20000264 	.word	0x20000264

080039b0 <LM75B_ReadTemp>:

LM75B_error LM75B_ReadTemp(int8_t *temp) {
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	if (!LM75BInitialized) {
 80039b8:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <LM75B_ReadTemp+0xc0>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	f083 0301 	eor.w	r3, r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <LM75B_ReadTemp+0x1a>
		return LM75B_ERR;
 80039c6:	2300      	movs	r3, #0
 80039c8:	e04d      	b.n	8003a66 <LM75B_ReadTemp+0xb6>
	}

	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_SET);
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <LM75B_ReadTemp+0xc4>)
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <LM75B_ReadTemp+0xc8>)
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	2201      	movs	r2, #1
 80039d4:	4619      	mov	r1, r3
 80039d6:	f002 f85f 	bl	8005a98 <HAL_GPIO_WritePin>
	HAL_Delay(10); // Small delay to ensure stable power
 80039da:	200a      	movs	r0, #10
 80039dc:	f001 fd6c 	bl	80054b8 <HAL_Delay>

	// Read the temperature register
	uint8_t tempReg[2] = {0};
 80039e0:	2300      	movs	r3, #0
 80039e2:	813b      	strh	r3, [r7, #8]
	LM75B_i2cReadBytes(TEMP_REG, tempReg, 2);
 80039e4:	f107 0308 	add.w	r3, r7, #8
 80039e8:	2202      	movs	r2, #2
 80039ea:	4619      	mov	r1, r3
 80039ec:	2000      	movs	r0, #0
 80039ee:	f000 f853 	bl	8003a98 <LM75B_i2cReadBytes>

	// Shutdown to conserve power
	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_RESET);
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <LM75B_ReadTemp+0xc4>)
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <LM75B_ReadTemp+0xc8>)
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	2200      	movs	r2, #0
 80039fc:	4619      	mov	r1, r3
 80039fe:	f002 f84b 	bl	8005a98 <HAL_GPIO_WritePin>

	// Convert Array into signed integer
	int16_t temperature = (tempReg[0] << 8) | tempReg[1];
 8003a02:	7a3b      	ldrb	r3, [r7, #8]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	b21a      	sxth	r2, r3
 8003a08:	7a7b      	ldrb	r3, [r7, #9]
 8003a0a:	b21b      	sxth	r3, r3
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	81fb      	strh	r3, [r7, #14]

	temperature = temperature >> 5;		// The temperature only uses the 11 most significant bits.
 8003a10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a14:	115b      	asrs	r3, r3, #5
 8003a16:	81fb      	strh	r3, [r7, #14]
	temperature *= 0.125;				// 0.125 deg C Resolution
 8003a18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fc fd89 	bl	8000534 <__aeabi_i2d>
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003a2a:	f7fc fded 	bl	8000608 <__aeabi_dmul>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	460c      	mov	r4, r1
 8003a32:	4618      	mov	r0, r3
 8003a34:	4621      	mov	r1, r4
 8003a36:	f7fc fff9 	bl	8000a2c <__aeabi_d2iz>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	81fb      	strh	r3, [r7, #14]

	// Check to see if temp is Negative
	int8_t checktemp = (uint8_t) temperature;
 8003a3e:	89fb      	ldrh	r3, [r7, #14]
 8003a40:	737b      	strb	r3, [r7, #13]

	if (checktemp & (1 << 7)) {
 8003a42:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	da09      	bge.n	8003a5e <LM75B_ReadTemp+0xae>
		// We are negative, Strip the negative qualifier and send result
		*temp = (checktemp & (0x7F)) * -1;
 8003a4a:	7b7b      	ldrb	r3, [r7, #13]
 8003a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	425b      	negs	r3, r3
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	b25a      	sxtb	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e002      	b.n	8003a64 <LM75B_ReadTemp+0xb4>
	} else {
		*temp = checktemp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	7b7a      	ldrb	r2, [r7, #13]
 8003a62:	701a      	strb	r2, [r3, #0]
	}

	return LM75B_OK;
 8003a64:	2301      	movs	r3, #1
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd90      	pop	{r4, r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000264 	.word	0x20000264
 8003a74:	20000f90 	.word	0x20000f90
 8003a78:	20000f8c 	.word	0x20000f8c

08003a7c <readConfigReg>:

/********************************************************************************
 * PRIVATE FUNCTIONS
 *******************************************************************************/
LM75B_error readConfigReg(uint8_t *confReg) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	// Reads and returns the configuration register
	return LM75B_i2cReadBytes(CONFIG_REG, confReg, 1);
 8003a84:	2201      	movs	r2, #1
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	2001      	movs	r0, #1
 8003a8a:	f000 f805 	bl	8003a98 <LM75B_i2cReadBytes>
 8003a8e:	4603      	mov	r3, r0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <LM75B_i2cReadBytes>:

/********************************************************************************
 * I2C READ AND WRITE ROUTINES
 *******************************************************************************/

LM75B_error LM75B_i2cReadBytes(uint8_t subAddr, uint8_t *dest, uint8_t Size) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af04      	add	r7, sp, #16
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	6039      	str	r1, [r7, #0]
 8003aa2:	71fb      	strb	r3, [r7, #7]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(pi2c, LM75B_I2C_ADDR, subAddr, I2C_MEMADD_SIZE_8BIT, dest, Size, LM75B_I2C_TIMEOUT);
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <LM75B_i2cReadBytes+0x4c>)
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	b299      	uxth	r1, r3
 8003ab0:	79bb      	ldrb	r3, [r7, #6]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ab8:	9202      	str	r2, [sp, #8]
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	460a      	mov	r2, r1
 8003ac4:	2190      	movs	r1, #144	; 0x90
 8003ac6:	f002 f95d 	bl	8005d84 <HAL_I2C_Mem_Read>
 8003aca:	4603      	mov	r3, r0
 8003acc:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <LM75B_i2cReadBytes+0x40>
		return LM75B_ERR;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e000      	b.n	8003ada <LM75B_i2cReadBytes+0x42>
	}
	return LM75B_OK;
 8003ad8:	2301      	movs	r3, #1
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000260 	.word	0x20000260

08003ae8 <iso15693Initialize>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693Initialize( bool useSlowTX, bool useFastRX )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	460a      	mov	r2, r1
 8003af2:	71fb      	strb	r3, [r7, #7]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71bb      	strb	r3, [r7, #6]
    ReturnCode err;

    err = rfalSetMode( RFAL_MODE_POLL_NFCV, useSlowTX?(RFAL_BR_1p66):(RFAL_BR_26p48), useFastRX?(RFAL_BR_52p97):(RFAL_BR_26p48) );
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <iso15693Initialize+0x1a>
 8003afe:	21ed      	movs	r1, #237	; 0xed
 8003b00:	e000      	b.n	8003b04 <iso15693Initialize+0x1c>
 8003b02:	21ec      	movs	r1, #236	; 0xec
 8003b04:	79bb      	ldrb	r3, [r7, #6]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <iso15693Initialize+0x26>
 8003b0a:	23eb      	movs	r3, #235	; 0xeb
 8003b0c:	e000      	b.n	8003b10 <iso15693Initialize+0x28>
 8003b0e:	23ec      	movs	r3, #236	; 0xec
 8003b10:	461a      	mov	r2, r3
 8003b12:	2007      	movs	r0, #7
 8003b14:	f009 fe66 	bl	800d7e4 <rfalSetMode>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	81fb      	strh	r3, [r7, #14]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	f00a fa8d 	bl	800e03c <rfalSetErrorHandling>

    rfalSetGT( RFAL_GT_NFCV );
 8003b22:	4809      	ldr	r0, [pc, #36]	; (8003b48 <iso15693Initialize+0x60>)
 8003b24:	f00a fad6 	bl	800e0d4 <rfalSetGT>
    rfalSetFDTListen( rfalConv64fcTo1fc(ISO15693_MASK_FDT_LISTEN) );
 8003b28:	f44f 5082 	mov.w	r0, #4160	; 0x1040
 8003b2c:	f00a fabe 	bl	800e0ac <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8003b30:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 8003b34:	f00a faa4 	bl	800e080 <rfalSetFDTPoll>

    rfalFieldOnAndStartGT();
 8003b38:	f00a fafa 	bl	800e130 <rfalFieldOnAndStartGT>

    return err;
 8003b3c:	89fb      	ldrh	r3, [r7, #14]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	000108d8 	.word	0x000108d8

08003b4c <iso15693Deinitialize>:

ReturnCode iso15693Deinitialize(uint8_t keep_on)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
    if (!keep_on)
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d103      	bne.n	8003b64 <iso15693Deinitialize+0x18>
    {
        return rfalFieldOff();
 8003b5c:	f00a fb50 	bl	800e200 <rfalFieldOff>
 8003b60:	4603      	mov	r3, r0
 8003b62:	e000      	b.n	8003b66 <iso15693Deinitialize+0x1a>
    }
    return ERR_NONE;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <iso15693Inventory>:
                    uint8_t maskLength,
                    uint8_t* mask,
                    iso15693ProximityCard_t* cards,
                    uint8_t maxCards,
                    uint8_t* cardsFound)
{
 8003b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b74:	b091      	sub	sp, #68	; 0x44
 8003b76:	af02      	add	r7, sp, #8
 8003b78:	60ba      	str	r2, [r7, #8]
 8003b7a:	607b      	str	r3, [r7, #4]
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	73fb      	strb	r3, [r7, #15]
 8003b80:	460b      	mov	r3, r1
 8003b82:	73bb      	strb	r3, [r7, #14]
    int8_t slot; /* number of the slot currently being processed */
    uint8_t slotNumPos; /* gives the position of the slot number within the mask */
    int8_t currColSlot; /* index of the slot whose collision is currently processed */
    uint16_t colSlots; /* 16 bit long marker holding all slots with collisions (indicated by set bit */
    uint64_t collisions; /* 64 bit long marker holding all unresolved collisions within 64bit UID */
    iso15693ProximityCard_t* crdptr = cards; /* pointer to the card currently used */
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	61fb      	str	r3, [r7, #28]
    uint8_t crdidx = 0; /* index of the card currently used */
 8003b88:	2300      	movs	r3, #0
 8003b8a:	76fb      	strb	r3, [r7, #27]

    if (maxCards == 0)
 8003b8c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <iso15693Inventory+0x2a>
    {
        err = ERR_NOMEM;
 8003b94:	2301      	movs	r3, #1
 8003b96:	86fb      	strh	r3, [r7, #54]	; 0x36
        goto out;
 8003b98:	e2f8      	b.n	800418c <iso15693Inventory+0x61c>
    }

    ST_MEMSET(iso15693DirMarker, 0, ISO15693_NUM_UID_BITS);
 8003b9a:	2240      	movs	r2, #64	; 0x40
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	48aa      	ldr	r0, [pc, #680]	; (8003e48 <iso15693Inventory+0x2d8>)
 8003ba0:	f013 f902 	bl	8016da8 <memset>

    /* set inventory flag */
    iso15693Buffer[0] = ISO15693_REQ_FLAG_INVENTORY;
 8003ba4:	4ba9      	ldr	r3, [pc, #676]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	701a      	strb	r2, [r3, #0]

    /* if number of slot is 1 then set the appropriate flag */
    if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d106      	bne.n	8003bbe <iso15693Inventory+0x4e>
    {
        iso15693Buffer[0] |= ISO15693_REQ_FLAG_1_SLOT;
 8003bb0:	4ba6      	ldr	r3, [pc, #664]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	f043 0320 	orr.w	r3, r3, #32
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	4ba4      	ldr	r3, [pc, #656]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003bbc:	701a      	strb	r2, [r3, #0]
    }
    iso15693Buffer[1] = ISO15693_CMD_INVENTORY;
 8003bbe:	4ba3      	ldr	r3, [pc, #652]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	705a      	strb	r2, [r3, #1]
    iso15693Buffer[2] = maskLength;
 8003bc4:	4aa1      	ldr	r2, [pc, #644]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003bc6:	7bbb      	ldrb	r3, [r7, #14]
 8003bc8:	7093      	strb	r3, [r2, #2]

    /* convert maskLength from number of bits to bytes */
    maskLengthBytes = (maskLength >> 3) + (((maskLength & 7) > 0) ? 1 : 0);
 8003bca:	7bbb      	ldrb	r3, [r7, #14]
 8003bcc:	08db      	lsrs	r3, r3, #3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	7bba      	ldrb	r2, [r7, #14]
 8003bd2:	f002 0207 	and.w	r2, r2, #7
 8003bd6:	2a00      	cmp	r2, #0
 8003bd8:	bfcc      	ite	gt
 8003bda:	2201      	movgt	r2, #1
 8003bdc:	2200      	movle	r2, #0
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	4413      	add	r3, r2
 8003be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if ((maskLengthBytes + 3) > ISO15693_BUFFER_SIZE)
 8003be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bea:	3303      	adds	r3, #3
 8003bec:	2b48      	cmp	r3, #72	; 0x48
 8003bee:	dd02      	ble.n	8003bf6 <iso15693Inventory+0x86>
    {
        err = ERR_NOMEM;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	86fb      	strh	r3, [r7, #54]	; 0x36
        goto out;
 8003bf4:	e2ca      	b.n	800418c <iso15693Inventory+0x61c>
    }

    /* mask out unneeded bits */
    if (maskLength & 7)
 8003bf6:	7bbb      	ldrb	r3, [r7, #14]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d017      	beq.n	8003c30 <iso15693Inventory+0xc0>
    {
        bitmask = (1 << (maskLength & 7)) - 1;
 8003c00:	7bbb      	ldrb	r3, [r7, #14]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	2201      	movs	r2, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	76bb      	strb	r3, [r7, #26]
        mask[maskLengthBytes-1] &= bitmask;
 8003c12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c16:	3b01      	subs	r3, #1
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	7819      	ldrb	r1, [r3, #0]
 8003c1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c22:	3b01      	subs	r3, #1
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	4413      	add	r3, r2
 8003c28:	7eba      	ldrb	r2, [r7, #26]
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	701a      	strb	r2, [r3, #0]
    }
    ST_MEMCPY(&iso15693Buffer[3], mask, maskLengthBytes);
 8003c30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c34:	461a      	mov	r2, r3
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	4885      	ldr	r0, [pc, #532]	; (8003e50 <iso15693Inventory+0x2e0>)
 8003c3a:	f013 f8aa 	bl	8016d92 <memcpy>

    slotNumPos = maskLength & 7;
 8003c3e:	7bbb      	ldrb	r3, [r7, #14]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	767b      	strb	r3, [r7, #25]
    currColPos = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    collisions = 0;
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9c7 2308 	strd	r2, r3, [r7, #32]
    colSlots = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    currColSlot = -1;
 8003c5c:	23ff      	movs	r3, #255	; 0xff
 8003c5e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    slot = (slotcnt == ISO15693_NUM_SLOTS_1) ? -1 : 15;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <iso15693Inventory+0xfe>
 8003c68:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6c:	e000      	b.n	8003c70 <iso15693Inventory+0x100>
 8003c6e:	230f      	movs	r3, #15
 8003c70:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            /* inner loop iterates once over all slots (in case of slot count 16)
               or only one iteration in case of slot count 1.
               After first 16 slot iterations (slot count 16) slot count is
               changed to 1 */

            if ((slotcnt == ISO15693_NUM_SLOTS_1) || (slot == 15))
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <iso15693Inventory+0x112>
 8003c7a:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003c7e:	2b0f      	cmp	r3, #15
 8003c80:	d10e      	bne.n	8003ca0 <iso15693Inventory+0x130>
            {
                /* send the request. Note: CRC is appended by physical layer.
                   Add 3 to mask for flag field, command field and mask length */
                err = rfalISO15693TransceiveAnticollisionFrame(iso15693Buffer, (3 + maskLengthBytes),
 8003c82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c86:	3303      	adds	r3, #3
 8003c88:	b2d9      	uxtb	r1, r3
 8003c8a:	f107 0316 	add.w	r3, r7, #22
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	230c      	movs	r3, #12
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	486d      	ldr	r0, [pc, #436]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003c96:	f00b fc5b 	bl	800f550 <rfalISO15693TransceiveAnticollisionFrame>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c9e:	e00b      	b.n	8003cb8 <iso15693Inventory+0x148>
                            (uint8_t*)crdptr, sizeof(iso15693ProximityCard_t), &actlength);
            }
            else
            {
                HAL_Delay(5); /* this is a worst case delay for sending EOF. t3min depends on modulation depth and data rate */
 8003ca0:	2005      	movs	r0, #5
 8003ca2:	f001 fc09 	bl	80054b8 <HAL_Delay>
                /* in case if slot count 16 slot is incremented by just sending EOF */
                err = rfalISO15693TransceiveEOFAnticollision(
 8003ca6:	f107 0316 	add.w	r3, r7, #22
 8003caa:	461a      	mov	r2, r3
 8003cac:	210c      	movs	r1, #12
 8003cae:	69f8      	ldr	r0, [r7, #28]
 8003cb0:	f00b fd06 	bl	800f6c0 <rfalISO15693TransceiveEOFAnticollision>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	86fb      	strh	r3, [r7, #54]	; 0x36
                            (uint8_t*)crdptr, sizeof(iso15693ProximityCard_t), &actlength);
            }

            bitsBeforeCol = actlength%8;
 8003cb8:	8afb      	ldrh	r3, [r7, #22]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	763b      	strb	r3, [r7, #24]
            actlength /= 8;
 8003cc2:	8afb      	ldrh	r3, [r7, #22]
 8003cc4:	08db      	lsrs	r3, r3, #3
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	82fb      	strh	r3, [r7, #22]

            if (ERR_RF_COLLISION == err) do
 8003cca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ccc:	2b1d      	cmp	r3, #29
 8003cce:	f040 80a1 	bne.w	8003e14 <iso15693Inventory+0x2a4>
            {
                if (actlength < 2)
 8003cd2:	8afb      	ldrh	r3, [r7, #22]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d802      	bhi.n	8003cde <iso15693Inventory+0x16e>
                {
                    /* collision before actually receiving UID!!! This should
                    not happen since we ignored collisions in these bytes. */
                    err = ERR_RF_COLLISION;
 8003cd8:	231d      	movs	r3, #29
 8003cda:	86fb      	strh	r3, [r7, #54]	; 0x36
                    goto out;
 8003cdc:	e256      	b.n	800418c <iso15693Inventory+0x61c>
                }
                if ((actlength - 2 + (bitsBeforeCol ? 1 : 0)) < maskLengthBytes)
 8003cde:	8afb      	ldrh	r3, [r7, #22]
 8003ce0:	3b02      	subs	r3, #2
 8003ce2:	7e3a      	ldrb	r2, [r7, #24]
 8003ce4:	2a00      	cmp	r2, #0
 8003ce6:	bf14      	ite	ne
 8003ce8:	2201      	movne	r2, #1
 8003cea:	2200      	moveq	r2, #0
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	441a      	add	r2, r3
 8003cf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	da02      	bge.n	8003cfe <iso15693Inventory+0x18e>
                {
                    /* we provided a mask but received fewer bytes which
                     * should not happen. Treat this as timeout and continue. */
                    err = ERR_TIMEOUT;
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	86fb      	strh	r3, [r7, #54]	; 0x36
                    break;
 8003cfc:	e08a      	b.n	8003e14 <iso15693Inventory+0x2a4>
                }

                if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d17a      	bne.n	8003dfa <iso15693Inventory+0x28a>
                {
                    /* in case slot count is 1 collision needs to be resolved */
                    /* find position of collision within received UID and
                       update mask and mask length appropriately */
                    iso15693Buffer[2] = ((actlength - 2) << 3) + bitsBeforeCol + 1;
 8003d04:	8afb      	ldrh	r3, [r7, #22]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3b02      	subs	r3, #2
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	7e3b      	ldrb	r3, [r7, #24]
 8003d12:	4413      	add	r3, r2
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	3301      	adds	r3, #1
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	4b4c      	ldr	r3, [pc, #304]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003d1c:	709a      	strb	r2, [r3, #2]
                    if (iso15693Buffer[2] > ISO15693_NUM_UID_BITS)
 8003d1e:	4b4b      	ldr	r3, [pc, #300]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003d20:	789b      	ldrb	r3, [r3, #2]
 8003d22:	2b40      	cmp	r3, #64	; 0x40
 8003d24:	d902      	bls.n	8003d2c <iso15693Inventory+0x1bc>
                    { /* The collision is inside the CRC: This should not happen,
                         treat this as a timeout and continue */
                        err = ERR_TIMEOUT;
 8003d26:	2304      	movs	r3, #4
 8003d28:	86fb      	strh	r3, [r7, #54]	; 0x36
                        break;
 8003d2a:	e073      	b.n	8003e14 <iso15693Inventory+0x2a4>
                    }
                    currColPos = iso15693Buffer[2] - 1;
 8003d2c:	4b47      	ldr	r3, [pc, #284]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003d2e:	789b      	ldrb	r3, [r3, #2]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                    collisions |= ((uint64_t)1 << (uint64_t)currColPos);
 8003d36:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8003d3a:	f04f 0201 	mov.w	r2, #1
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	f1a1 0620 	sub.w	r6, r1, #32
 8003d46:	f1c1 0020 	rsb	r0, r1, #32
 8003d4a:	fa03 f501 	lsl.w	r5, r3, r1
 8003d4e:	fa02 f606 	lsl.w	r6, r2, r6
 8003d52:	4335      	orrs	r5, r6
 8003d54:	fa22 f000 	lsr.w	r0, r2, r0
 8003d58:	4305      	orrs	r5, r0
 8003d5a:	fa02 f401 	lsl.w	r4, r2, r1
 8003d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d62:	ea42 0004 	orr.w	r0, r2, r4
 8003d66:	ea43 0105 	orr.w	r1, r3, r5
 8003d6a:	e9c7 0108 	strd	r0, r1, [r7, #32]
                    maskLengthBytes = actlength - 1;
 8003d6e:	8afb      	ldrh	r3, [r7, #22]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                    /* copy received UID to mask */
                    ST_MEMCPY(&iso15693Buffer[3], crdptr->uid, maskLengthBytes);
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003d80:	4619      	mov	r1, r3
 8003d82:	4833      	ldr	r0, [pc, #204]	; (8003e50 <iso15693Inventory+0x2e0>)
 8003d84:	f013 f805 	bl	8016d92 <memcpy>
                    bitmask = (1 << bitsBeforeCol) - 1;
 8003d88:	7e3b      	ldrb	r3, [r7, #24]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	76bb      	strb	r3, [r7, #26]

                    /* clear bit where collision happened which means try
                       left branch of the tree first */
                    iso15693Buffer[2+maskLengthBytes] &= bitmask;
 8003d96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d9a:	3302      	adds	r3, #2
 8003d9c:	4a2b      	ldr	r2, [pc, #172]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003d9e:	5cd1      	ldrb	r1, [r2, r3]
 8003da0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003da4:	3302      	adds	r3, #2
 8003da6:	7eba      	ldrb	r2, [r7, #26]
 8003da8:	400a      	ands	r2, r1
 8003daa:	b2d1      	uxtb	r1, r2
 8003dac:	4a27      	ldr	r2, [pc, #156]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003dae:	54d1      	strb	r1, [r2, r3]

                    if (1 == iso15693DirMarker[currColPos])
 8003db0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003db4:	4a24      	ldr	r2, [pc, #144]	; (8003e48 <iso15693Inventory+0x2d8>)
 8003db6:	5cd3      	ldrb	r3, [r2, r3]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d115      	bne.n	8003de8 <iso15693Inventory+0x278>
                    {
                        /* if left branch has been tried out before (dirMarker set to 1)
                           the set the bit where collision happened to 1, i.e.
                           try right branch */
                        iso15693Buffer[2+maskLengthBytes] |= (1 << (currColPos & 7));
 8003dbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003dc4:	5cd3      	ldrb	r3, [r2, r3]
 8003dc6:	b25a      	sxtb	r2, r3
 8003dc8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	b25b      	sxtb	r3, r3
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	b25a      	sxtb	r2, r3
 8003ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003de0:	3302      	adds	r3, #2
 8003de2:	b2d1      	uxtb	r1, r2
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <iso15693Inventory+0x2dc>)
 8003de6:	54d1      	strb	r1, [r2, r3]
                    }
                    /* in any case increment dirMarker to indicate the way we chose */
                    iso15693DirMarker[currColPos]++;
 8003de8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003dec:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <iso15693Inventory+0x2d8>)
 8003dee:	5cd2      	ldrb	r2, [r2, r3]
 8003df0:	3201      	adds	r2, #1
 8003df2:	b2d1      	uxtb	r1, r2
 8003df4:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <iso15693Inventory+0x2d8>)
 8003df6:	54d1      	strb	r1, [r2, r3]
 8003df8:	e00c      	b.n	8003e14 <iso15693Inventory+0x2a4>
                }
                else
                {
                    /* in case of slot count 16 just mark that there is a collision
                    within this slot. Resolve it later when switching back to slot count 1 */
                    colSlots |= 1 << (15 - slot);
 8003dfa:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003dfe:	f1c3 030f 	rsb	r3, r3, #15
 8003e02:	2201      	movs	r2, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	b21a      	sxth	r2, r3
 8003e0a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b21b      	sxth	r3, r3
 8003e12:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
            } while(0);
            if (ERR_RF_COLLISION != err)
 8003e14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e16:	2b1d      	cmp	r3, #29
 8003e18:	f000 80c8 	beq.w	8003fac <iso15693Inventory+0x43c>
            {
                if (ERR_NONE == err)
 8003e1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10b      	bne.n	8003e3a <iso15693Inventory+0x2ca>
                {
                    /* received all bytes without collision - store UID */
                    crdidx++;
 8003e22:	7efb      	ldrb	r3, [r7, #27]
 8003e24:	3301      	adds	r3, #1
 8003e26:	76fb      	strb	r3, [r7, #27]
                    if (crdidx >= maxCards)
 8003e28:	7efa      	ldrb	r2, [r7, #27]
 8003e2a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	f080 81a9 	bcs.w	8004186 <iso15693Inventory+0x616>
                    {
                        goto out_max_cards;
                    }
                    crdptr++;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	330c      	adds	r3, #12
 8003e38:	61fb      	str	r3, [r7, #28]
                }

                if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 80b5 	bne.w	8003fac <iso15693Inventory+0x43c>
                {

                    i = ISO15693_NUM_UID_BITS;
 8003e42:	2340      	movs	r3, #64	; 0x40
 8003e44:	86bb      	strh	r3, [r7, #52]	; 0x34
                    /* a collisions has been resolved. Go back in the tree to find
                     next collision */
                    while (i--)
 8003e46:	e091      	b.n	8003f6c <iso15693Inventory+0x3fc>
 8003e48:	200002b4 	.word	0x200002b4
 8003e4c:	20000268 	.word	0x20000268
 8003e50:	2000026b 	.word	0x2000026b
                    {
                        if (collisions & ((uint64_t)1 << (uint64_t)i))
 8003e54:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e5a:	f1c1 0620 	rsb	r6, r1, #32
 8003e5e:	f1a1 0020 	sub.w	r0, r1, #32
 8003e62:	fa22 f801 	lsr.w	r8, r2, r1
 8003e66:	fa03 f606 	lsl.w	r6, r3, r6
 8003e6a:	ea48 0806 	orr.w	r8, r8, r6
 8003e6e:	fa23 f000 	lsr.w	r0, r3, r0
 8003e72:	ea48 0800 	orr.w	r8, r8, r0
 8003e76:	fa23 f901 	lsr.w	r9, r3, r1
 8003e7a:	f04f 0201 	mov.w	r2, #1
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	ea02 0008 	and.w	r0, r2, r8
 8003e86:	ea03 0109 	and.w	r1, r3, r9
 8003e8a:	ea50 0301 	orrs.w	r3, r0, r1
 8003e8e:	d06d      	beq.n	8003f6c <iso15693Inventory+0x3fc>
                        {
                            if (iso15693DirMarker[i] > 1)
 8003e90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e92:	4ab2      	ldr	r2, [pc, #712]	; (800415c <iso15693Inventory+0x5ec>)
 8003e94:	5cd3      	ldrb	r3, [r2, r3]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d939      	bls.n	8003f0e <iso15693Inventory+0x39e>
                            {
                                /* dirMarker 2 means that both paths (left 'n right)
                                   have been tried (=resolved). Remove this collision */
                                collisions &= ~((uint64_t)((uint64_t)1 << (uint64_t)i));
 8003e9a:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003e9c:	f04f 0201 	mov.w	r2, #1
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	f1a1 0620 	sub.w	r6, r1, #32
 8003ea8:	f1c1 0020 	rsb	r0, r1, #32
 8003eac:	fa03 fb01 	lsl.w	fp, r3, r1
 8003eb0:	fa02 f606 	lsl.w	r6, r2, r6
 8003eb4:	ea4b 0b06 	orr.w	fp, fp, r6
 8003eb8:	fa22 f000 	lsr.w	r0, r2, r0
 8003ebc:	ea4b 0b00 	orr.w	fp, fp, r0
 8003ec0:	fa02 fa01 	lsl.w	sl, r2, r1
 8003ec4:	ea6f 020a 	mvn.w	r2, sl
 8003ec8:	ea6f 030b 	mvn.w	r3, fp
 8003ecc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003ed0:	ea02 0200 	and.w	r2, r2, r0
 8003ed4:	ea03 0301 	and.w	r3, r3, r1
 8003ed8:	e9c7 2308 	strd	r2, r3, [r7, #32]
                                iso15693DirMarker[i] = 0;
 8003edc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ede:	4a9f      	ldr	r2, [pc, #636]	; (800415c <iso15693Inventory+0x5ec>)
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	54d1      	strb	r1, [r2, r3]
                                if (currColSlot >= 0)
 8003ee4:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	db3f      	blt.n	8003f6c <iso15693Inventory+0x3fc>
                                {
                                    /* if this collision was within a slot unmark
                                       also this slot */
                                    colSlots &= ~(1 << currColSlot);
 8003eec:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	b21b      	sxth	r3, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	b21a      	sxth	r2, r3
 8003efc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003f00:	4013      	ands	r3, r2
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	85fb      	strh	r3, [r7, #46]	; 0x2e
                                    currColSlot = -1;
 8003f06:	23ff      	movs	r3, #255	; 0xff
 8003f08:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8003f0c:	e02e      	b.n	8003f6c <iso15693Inventory+0x3fc>
                            else
                            {
                                /* update collision position. dirMarker 1
                                also means that left branch was tried before.
                                Switch to right branch now */
                                currColPos = i;
 8003f0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                                iso15693Buffer[2] = currColPos + 1;
 8003f14:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003f18:	3301      	adds	r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	4b90      	ldr	r3, [pc, #576]	; (8004160 <iso15693Inventory+0x5f0>)
 8003f1e:	709a      	strb	r2, [r3, #2]
                                maskLengthBytes = (currColPos >> 3) + 1;
 8003f20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003f24:	08db      	lsrs	r3, r3, #3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                                iso15693Buffer[2+maskLengthBytes] |= (1 << (currColPos & 7));
 8003f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f32:	3302      	adds	r3, #2
 8003f34:	4a8a      	ldr	r2, [pc, #552]	; (8004160 <iso15693Inventory+0x5f0>)
 8003f36:	5cd3      	ldrb	r3, [r2, r3]
 8003f38:	b25a      	sxtb	r2, r3
 8003f3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	2101      	movs	r1, #1
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	b25a      	sxtb	r2, r3
 8003f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f52:	3302      	adds	r3, #2
 8003f54:	b2d1      	uxtb	r1, r2
 8003f56:	4a82      	ldr	r2, [pc, #520]	; (8004160 <iso15693Inventory+0x5f0>)
 8003f58:	54d1      	strb	r1, [r2, r3]
                                iso15693DirMarker[currColPos]++;
 8003f5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003f5e:	4a7f      	ldr	r2, [pc, #508]	; (800415c <iso15693Inventory+0x5ec>)
 8003f60:	5cd2      	ldrb	r2, [r2, r3]
 8003f62:	3201      	adds	r2, #1
 8003f64:	b2d1      	uxtb	r1, r2
 8003f66:	4a7d      	ldr	r2, [pc, #500]	; (800415c <iso15693Inventory+0x5ec>)
 8003f68:	54d1      	strb	r1, [r2, r3]
                                break;
 8003f6a:	e005      	b.n	8003f78 <iso15693Inventory+0x408>
                    while (i--)
 8003f6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f6e:	1e5a      	subs	r2, r3, #1
 8003f70:	86ba      	strh	r2, [r7, #52]	; 0x34
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f47f af6e 	bne.w	8003e54 <iso15693Inventory+0x2e4>
                            }
                        }
                    }

                    if ((currColSlot >= 0) && (iso15693DirMarker[currColPos] == 0))
 8003f78:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	db15      	blt.n	8003fac <iso15693Inventory+0x43c>
 8003f80:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003f84:	4a75      	ldr	r2, [pc, #468]	; (800415c <iso15693Inventory+0x5ec>)
 8003f86:	5cd3      	ldrb	r3, [r2, r3]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10f      	bne.n	8003fac <iso15693Inventory+0x43c>
                    {
                        /* a slot where a collision was found before has been processed
                           with no collision. So unmark this slot */
                        colSlots &= ~(1 << currColSlot);
 8003f8c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003f90:	2201      	movs	r2, #1
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	b21b      	sxth	r3, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	b21a      	sxth	r2, r3
 8003f9c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	b21b      	sxth	r3, r3
 8003fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        currColSlot = -1;
 8003fa6:	23ff      	movs	r3, #255	; 0xff
 8003fa8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    }
                }
            }

            if (slot >= 0)
 8003fac:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	db06      	blt.n	8003fc2 <iso15693Inventory+0x452>
            {
                slot--;
 8003fb4:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            }
        } while (slot >= 0);
 8003fc2:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f6bf ae54 	bge.w	8003c74 <iso15693Inventory+0x104>

        /* after 16 iterations switch back to slot count 0 which means
         a normal binary tree search */
        if (ISO15693_NUM_SLOTS_16 == slotcnt)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d108      	bne.n	8003fe4 <iso15693Inventory+0x474>
        {
            slotcnt = ISO15693_NUM_SLOTS_1;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
            iso15693Buffer[0] |= ISO15693_REQ_FLAG_1_SLOT;
 8003fd6:	4b62      	ldr	r3, [pc, #392]	; (8004160 <iso15693Inventory+0x5f0>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	f043 0320 	orr.w	r3, r3, #32
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	4b5f      	ldr	r3, [pc, #380]	; (8004160 <iso15693Inventory+0x5f0>)
 8003fe2:	701a      	strb	r2, [r3, #0]
        }
        if (!collisions && (ISO15693_NUM_SLOTS_1 == slotcnt))
 8003fe4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f040 80c2 	bne.w	8004172 <iso15693Inventory+0x602>
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f040 80be 	bne.w	8004172 <iso15693Inventory+0x602>
        {
            /* if all collisions are resolved check the slots for open collisions */
            for (i = 0; i < 16; i++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003ffa:	e0b6      	b.n	800416a <iso15693Inventory+0x5fa>
            {
                if ((1 << i) & colSlots)
 8003ffc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003ffe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004000:	fa42 f303 	asr.w	r3, r2, r3
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80ab 	beq.w	8004164 <iso15693Inventory+0x5f4>
                {
                    /* found a slot with unresolved collision.
                       Reset mask length to original value and append slot number to mask */
                    maskLengthBytes = (maskLength >> 3) + (((maskLength & 7) > 0) ? 1 : 0);
 800400e:	7bbb      	ldrb	r3, [r7, #14]
 8004010:	08db      	lsrs	r3, r3, #3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	7bba      	ldrb	r2, [r7, #14]
 8004016:	f002 0207 	and.w	r2, r2, #7
 800401a:	2a00      	cmp	r2, #0
 800401c:	bfcc      	ite	gt
 800401e:	2201      	movgt	r2, #1
 8004020:	2200      	movle	r2, #0
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	4413      	add	r3, r2
 8004026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    if (slotNumPos == 0)
 800402a:	7e7b      	ldrb	r3, [r7, #25]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d104      	bne.n	800403a <iso15693Inventory+0x4ca>
                    {
                        /* add an additional byte in case slot number starts at LSB */
                        maskLengthBytes++;
 8004030:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004034:	3301      	adds	r3, #1
 8004036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    }
                    if (slotNumPos > 4)
 800403a:	7e7b      	ldrb	r3, [r7, #25]
 800403c:	2b04      	cmp	r3, #4
 800403e:	d95b      	bls.n	80040f8 <iso15693Inventory+0x588>
                    {
                        /* also if slot number would overlap add an additional byte */
                        maskLengthBytes++;
 8004040:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004044:	3301      	adds	r3, #1
 8004046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                        /* add slot number to mask */
                        iso15693Buffer[2+maskLengthBytes] &= ~((1 << (8 - slotNumPos)) - 1);
 800404a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800404e:	3302      	adds	r3, #2
 8004050:	4a43      	ldr	r2, [pc, #268]	; (8004160 <iso15693Inventory+0x5f0>)
 8004052:	5cd3      	ldrb	r3, [r2, r3]
 8004054:	b25a      	sxtb	r2, r3
 8004056:	7e7b      	ldrb	r3, [r7, #25]
 8004058:	f1c3 0308 	rsb	r3, r3, #8
 800405c:	2101      	movs	r1, #1
 800405e:	fa01 f303 	lsl.w	r3, r1, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	425b      	negs	r3, r3
 8004066:	b2db      	uxtb	r3, r3
 8004068:	b25b      	sxtb	r3, r3
 800406a:	4013      	ands	r3, r2
 800406c:	b25a      	sxtb	r2, r3
 800406e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004072:	3302      	adds	r3, #2
 8004074:	b2d1      	uxtb	r1, r2
 8004076:	4a3a      	ldr	r2, [pc, #232]	; (8004160 <iso15693Inventory+0x5f0>)
 8004078:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[2+maskLengthBytes] |= i >> (8 - slotNumPos);
 800407a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800407e:	3302      	adds	r3, #2
 8004080:	4a37      	ldr	r2, [pc, #220]	; (8004160 <iso15693Inventory+0x5f0>)
 8004082:	5cd3      	ldrb	r3, [r2, r3]
 8004084:	b25a      	sxtb	r2, r3
 8004086:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004088:	7e7b      	ldrb	r3, [r7, #25]
 800408a:	f1c3 0308 	rsb	r3, r3, #8
 800408e:	fa41 f303 	asr.w	r3, r1, r3
 8004092:	b25b      	sxtb	r3, r3
 8004094:	4313      	orrs	r3, r2
 8004096:	b25a      	sxtb	r2, r3
 8004098:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800409c:	3302      	adds	r3, #2
 800409e:	b2d1      	uxtb	r1, r2
 80040a0:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <iso15693Inventory+0x5f0>)
 80040a2:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[1+maskLengthBytes] &= (1 << slotNumPos) - 1;
 80040a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040a8:	3301      	adds	r3, #1
 80040aa:	4a2d      	ldr	r2, [pc, #180]	; (8004160 <iso15693Inventory+0x5f0>)
 80040ac:	5cd3      	ldrb	r3, [r2, r3]
 80040ae:	b25a      	sxtb	r2, r3
 80040b0:	7e7b      	ldrb	r3, [r7, #25]
 80040b2:	2101      	movs	r1, #1
 80040b4:	fa01 f303 	lsl.w	r3, r1, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	b25b      	sxtb	r3, r3
 80040c0:	4013      	ands	r3, r2
 80040c2:	b25a      	sxtb	r2, r3
 80040c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040c8:	3301      	adds	r3, #1
 80040ca:	b2d1      	uxtb	r1, r2
 80040cc:	4a24      	ldr	r2, [pc, #144]	; (8004160 <iso15693Inventory+0x5f0>)
 80040ce:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[1+maskLengthBytes] |= (i << slotNumPos);
 80040d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040d4:	3301      	adds	r3, #1
 80040d6:	4a22      	ldr	r2, [pc, #136]	; (8004160 <iso15693Inventory+0x5f0>)
 80040d8:	5cd3      	ldrb	r3, [r2, r3]
 80040da:	b25a      	sxtb	r2, r3
 80040dc:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80040de:	7e7b      	ldrb	r3, [r7, #25]
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	b25b      	sxtb	r3, r3
 80040e6:	4313      	orrs	r3, r2
 80040e8:	b25a      	sxtb	r2, r3
 80040ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040ee:	3301      	adds	r3, #1
 80040f0:	b2d1      	uxtb	r1, r2
 80040f2:	4a1b      	ldr	r2, [pc, #108]	; (8004160 <iso15693Inventory+0x5f0>)
 80040f4:	54d1      	strb	r1, [r2, r3]
 80040f6:	e028      	b.n	800414a <iso15693Inventory+0x5da>
                    }
                    else
                    {
                        /* add slot number to mask */
                        iso15693Buffer[2+maskLengthBytes] &= (1 << slotNumPos) - 1;
 80040f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040fc:	3302      	adds	r3, #2
 80040fe:	4a18      	ldr	r2, [pc, #96]	; (8004160 <iso15693Inventory+0x5f0>)
 8004100:	5cd3      	ldrb	r3, [r2, r3]
 8004102:	b25a      	sxtb	r2, r3
 8004104:	7e7b      	ldrb	r3, [r7, #25]
 8004106:	2101      	movs	r1, #1
 8004108:	fa01 f303 	lsl.w	r3, r1, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b2db      	uxtb	r3, r3
 8004112:	b25b      	sxtb	r3, r3
 8004114:	4013      	ands	r3, r2
 8004116:	b25a      	sxtb	r2, r3
 8004118:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800411c:	3302      	adds	r3, #2
 800411e:	b2d1      	uxtb	r1, r2
 8004120:	4a0f      	ldr	r2, [pc, #60]	; (8004160 <iso15693Inventory+0x5f0>)
 8004122:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[2+maskLengthBytes] |= (i << slotNumPos);
 8004124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004128:	3302      	adds	r3, #2
 800412a:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <iso15693Inventory+0x5f0>)
 800412c:	5cd3      	ldrb	r3, [r2, r3]
 800412e:	b25a      	sxtb	r2, r3
 8004130:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004132:	7e7b      	ldrb	r3, [r7, #25]
 8004134:	fa01 f303 	lsl.w	r3, r1, r3
 8004138:	b25b      	sxtb	r3, r3
 800413a:	4313      	orrs	r3, r2
 800413c:	b25a      	sxtb	r2, r3
 800413e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004142:	3302      	adds	r3, #2
 8004144:	b2d1      	uxtb	r1, r2
 8004146:	4a06      	ldr	r2, [pc, #24]	; (8004160 <iso15693Inventory+0x5f0>)
 8004148:	54d1      	strb	r1, [r2, r3]
                    }
                    /* in any case number of mask bits needs to be incremented by 4 */
                    iso15693Buffer[2] = maskLength + 4;
 800414a:	7bbb      	ldrb	r3, [r7, #14]
 800414c:	3304      	adds	r3, #4
 800414e:	b2da      	uxtb	r2, r3
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <iso15693Inventory+0x5f0>)
 8004152:	709a      	strb	r2, [r3, #2]
                    currColSlot = i;
 8004154:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004156:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    break;
 800415a:	e00a      	b.n	8004172 <iso15693Inventory+0x602>
 800415c:	200002b4 	.word	0x200002b4
 8004160:	20000268 	.word	0x20000268
            for (i = 0; i < 16; i++)
 8004164:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004166:	3301      	adds	r3, #1
 8004168:	86bb      	strh	r3, [r7, #52]	; 0x34
 800416a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800416c:	2b0f      	cmp	r3, #15
 800416e:	f67f af45 	bls.w	8003ffc <iso15693Inventory+0x48c>
            }

        }

        /* do not stop before all collisions in all slots are resolved */
    } while (collisions || colSlots);
 8004172:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004176:	4313      	orrs	r3, r2
 8004178:	f47f ad7c 	bne.w	8003c74 <iso15693Inventory+0x104>
 800417c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800417e:	2b00      	cmp	r3, #0
 8004180:	f47f ad78 	bne.w	8003c74 <iso15693Inventory+0x104>

out_max_cards:
 8004184:	e000      	b.n	8004188 <iso15693Inventory+0x618>
                        goto out_max_cards;
 8004186:	bf00      	nop
    err = ERR_NONE;
 8004188:	2300      	movs	r3, #0
 800418a:	86fb      	strh	r3, [r7, #54]	; 0x36
out:
    *cardsFound = crdidx;
 800418c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800418e:	7efa      	ldrb	r2, [r7, #27]
 8004190:	701a      	strb	r2, [r3, #0]

    if (*cardsFound == 0)
 8004192:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <iso15693Inventory+0x62e>
    {
        err = ERR_NOTFOUND;
 800419a:	2316      	movs	r3, #22
 800419c:	86fb      	strh	r3, [r7, #54]	; 0x36
    }

    return err;
 800419e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	373c      	adds	r7, #60	; 0x3c
 80041a4:	46bd      	mov	sp, r7
 80041a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041aa:	bf00      	nop

080041ac <iso15693SelectPicc>:
            0,
            ISO15693_FWT);
}

ReturnCode iso15693SelectPicc(const iso15693ProximityCard_t* card)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	; 0x28
 80041b0:	af06      	add	r7, sp, #24
 80041b2:	6078      	str	r0, [r7, #4]
    uint16_t actlength;
    ReturnCode err;

    err = iso15693SendRequest(ISO15693_CMD_SELECT,
 80041b4:	4b12      	ldr	r3, [pc, #72]	; (8004200 <iso15693SelectPicc+0x54>)
 80041b6:	7819      	ldrb	r1, [r3, #0]
 80041b8:	2351      	movs	r3, #81	; 0x51
 80041ba:	9304      	str	r3, [sp, #16]
 80041bc:	2300      	movs	r3, #0
 80041be:	9303      	str	r3, [sp, #12]
 80041c0:	2300      	movs	r3, #0
 80041c2:	9302      	str	r3, [sp, #8]
 80041c4:	f107 030c 	add.w	r3, r7, #12
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	2304      	movs	r3, #4
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <iso15693SelectPicc+0x58>)
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	2025      	movs	r0, #37	; 0x25
 80041d4:	f000 f876 	bl	80042c4 <iso15693SendRequest>
 80041d8:	4603      	mov	r3, r0
 80041da:	81fb      	strh	r3, [r7, #14]
            4,
            &actlength,
            NULL,
            0,
            ISO15693_FWT);
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 80041dc:	89fb      	ldrh	r3, [r7, #14]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <iso15693SelectPicc+0x44>

    if (iso15693Buffer[0] != 0)
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <iso15693SelectPicc+0x58>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <iso15693SelectPicc+0x48>
    {
        err = ERR_NOMSG;
 80041ea:	2306      	movs	r3, #6
 80041ec:	81fb      	strh	r3, [r7, #14]
 80041ee:	e002      	b.n	80041f6 <iso15693SelectPicc+0x4a>
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 80041f0:	bf00      	nop
 80041f2:	e000      	b.n	80041f6 <iso15693SelectPicc+0x4a>
    }

out:
 80041f4:	bf00      	nop
    return err;
 80041f6:	89fb      	ldrh	r3, [r7, #14]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	200002f4 	.word	0x200002f4
 8004204:	20000268 	.word	0x20000268

08004208 <iso15693ReadMultipleBlocks>:



ReturnCode iso15693ReadMultipleBlocks(const iso15693ProximityCard_t* card, uint8_t startblock, uint8_t numBlocks,
                                        uint8_t* res_flags, uint8_t* data, uint16_t dataLen, uint16_t *actLen )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08c      	sub	sp, #48	; 0x30
 800420c:	af06      	add	r7, sp, #24
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	72fb      	strb	r3, [r7, #11]
 8004216:	4613      	mov	r3, r2
 8004218:	72bb      	strb	r3, [r7, #10]
    ReturnCode err;
    uint16_t actlength;
    uint8_t addData[2];

    addData[0] = startblock;
 800421a:	7afb      	ldrb	r3, [r7, #11]
 800421c:	743b      	strb	r3, [r7, #16]
    addData[1] = numBlocks - 1;
 800421e:	7abb      	ldrb	r3, [r7, #10]
 8004220:	3b01      	subs	r3, #1
 8004222:	b2db      	uxtb	r3, r3
 8004224:	747b      	strb	r3, [r7, #17]

    err = iso15693SendRequest(ISO15693_CMD_READ_MULTIPLE_BLOCKS,
 8004226:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <iso15693ReadMultipleBlocks+0xb0>)
 8004228:	7819      	ldrb	r1, [r3, #0]
 800422a:	2351      	movs	r3, #81	; 0x51
 800422c:	9304      	str	r3, [sp, #16]
 800422e:	2302      	movs	r3, #2
 8004230:	9303      	str	r3, [sp, #12]
 8004232:	f107 0310 	add.w	r3, r7, #16
 8004236:	9302      	str	r3, [sp, #8]
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	9301      	str	r3, [sp, #4]
 800423e:	2348      	movs	r3, #72	; 0x48
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <iso15693ReadMultipleBlocks+0xb4>)
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	2023      	movs	r0, #35	; 0x23
 8004248:	f000 f83c 	bl	80042c4 <iso15693SendRequest>
 800424c:	4603      	mov	r3, r0
 800424e:	82fb      	strh	r3, [r7, #22]
            ISO15693_BUFFER_SIZE,
            &actlength,
            addData,
            2,
            ISO15693_FWT);
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8004250:	8afb      	ldrh	r3, [r7, #22]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d128      	bne.n	80042a8 <iso15693ReadMultipleBlocks+0xa0>

    if (actlength >= 2)
 8004256:	8abb      	ldrh	r3, [r7, #20]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d927      	bls.n	80042ac <iso15693ReadMultipleBlocks+0xa4>
    {
        *res_flags = iso15693Buffer[0];
 800425c:	4b17      	ldr	r3, [pc, #92]	; (80042bc <iso15693ReadMultipleBlocks+0xb4>)
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	701a      	strb	r2, [r3, #0]
        if (*res_flags & ISO15693_RESP_FLAG_ERROR)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d006      	beq.n	800427e <iso15693ReadMultipleBlocks+0x76>
        {
            *actLen = 0;
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	2200      	movs	r2, #0
 8004274:	801a      	strh	r2, [r3, #0]
            err = iso15693Buffer[1];
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <iso15693ReadMultipleBlocks+0xb4>)
 8004278:	785b      	ldrb	r3, [r3, #1]
 800427a:	82fb      	strh	r3, [r7, #22]
 800427c:	e017      	b.n	80042ae <iso15693ReadMultipleBlocks+0xa6>
        }
        else
        {
            *actLen = ((( actlength > dataLen ) ? dataLen : actlength) - 1);
 800427e:	8abb      	ldrh	r3, [r7, #20]
 8004280:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004282:	429a      	cmp	r2, r3
 8004284:	d203      	bcs.n	800428e <iso15693ReadMultipleBlocks+0x86>
 8004286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004288:	3b01      	subs	r3, #1
 800428a:	b29b      	uxth	r3, r3
 800428c:	e002      	b.n	8004294 <iso15693ReadMultipleBlocks+0x8c>
 800428e:	8abb      	ldrh	r3, [r7, #20]
 8004290:	3b01      	subs	r3, #1
 8004292:	b29b      	uxth	r3, r3
 8004294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004296:	8013      	strh	r3, [r2, #0]
            ST_MEMCPY( data, &iso15693Buffer[1], *actLen );
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	4908      	ldr	r1, [pc, #32]	; (80042c0 <iso15693ReadMultipleBlocks+0xb8>)
 80042a0:	6a38      	ldr	r0, [r7, #32]
 80042a2:	f012 fd76 	bl	8016d92 <memcpy>
 80042a6:	e002      	b.n	80042ae <iso15693ReadMultipleBlocks+0xa6>
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 80042a8:	bf00      	nop
 80042aa:	e000      	b.n	80042ae <iso15693ReadMultipleBlocks+0xa6>
        }
    }

out:
 80042ac:	bf00      	nop
    return err;
 80042ae:	8afb      	ldrh	r3, [r7, #22]

}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	200002f4 	.word	0x200002f4
 80042bc:	20000268 	.word	0x20000268
 80042c0:	20000269 	.word	0x20000269

080042c4 <iso15693SendRequest>:
                uint16_t rcvbuffer_len,
                uint16_t* actlength,
                uint8_t* addSendData,
                uint8_t addSendDataLength,
                uint32_t no_response_time_64fcs)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af04      	add	r7, sp, #16
 80042ca:	60ba      	str	r2, [r7, #8]
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	4603      	mov	r3, r0
 80042d0:	73fb      	strb	r3, [r7, #15]
 80042d2:	460b      	mov	r3, r1
 80042d4:	73bb      	strb	r3, [r7, #14]
    uint8_t length;


    /* sanity checks first */
    if ((ISO15693_UID_LENGTH + addSendDataLength + 2) > ISO15693_BUFFER_SIZE)
 80042d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042da:	330a      	adds	r3, #10
 80042dc:	2b48      	cmp	r3, #72	; 0x48
 80042de:	dd01      	ble.n	80042e4 <iso15693SendRequest+0x20>
    {
        return ERR_NOMEM;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e03f      	b.n	8004364 <iso15693SendRequest+0xa0>
    }

    /* FLAG_SELECT and FLAG_ADDRESS will be added as required below */
    flags &= (~(ISO15693_REQ_FLAG_SELECT|ISO15693_REQ_FLAG_ADDRESS));
 80042e4:	7bbb      	ldrb	r3, [r7, #14]
 80042e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80042ea:	73bb      	strb	r3, [r7, #14]
    if (card == NULL)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <iso15693SendRequest+0x40>
    {
        /* uid is NULL which means that selected PICC (using #iso15693SelectPicc)
           is used */
        /* set select flag */
        iso15693Buffer[0] = flags | ISO15693_REQ_FLAG_SELECT;
 80042f2:	7bbb      	ldrb	r3, [r7, #14]
 80042f4:	f043 0310 	orr.w	r3, r3, #16
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4b1c      	ldr	r3, [pc, #112]	; (800436c <iso15693SendRequest+0xa8>)
 80042fc:	701a      	strb	r2, [r3, #0]
        length = 2;
 80042fe:	2302      	movs	r3, #2
 8004300:	75fb      	strb	r3, [r7, #23]
 8004302:	e00e      	b.n	8004322 <iso15693SendRequest+0x5e>
    }
    else
    {
        /* set address flag */
        iso15693Buffer[0] = flags | ISO15693_REQ_FLAG_ADDRESS;
 8004304:	7bbb      	ldrb	r3, [r7, #14]
 8004306:	f043 0320 	orr.w	r3, r3, #32
 800430a:	b2da      	uxtb	r2, r3
 800430c:	4b17      	ldr	r3, [pc, #92]	; (800436c <iso15693SendRequest+0xa8>)
 800430e:	701a      	strb	r2, [r3, #0]
        /* copy UID */
        ST_MEMCPY((void*)&iso15693Buffer[2], (void*)card->uid, ISO15693_UID_LENGTH);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	3302      	adds	r3, #2
 8004314:	2208      	movs	r2, #8
 8004316:	4619      	mov	r1, r3
 8004318:	4815      	ldr	r0, [pc, #84]	; (8004370 <iso15693SendRequest+0xac>)
 800431a:	f012 fd3a 	bl	8016d92 <memcpy>
        length = 2 + ISO15693_UID_LENGTH;
 800431e:	230a      	movs	r3, #10
 8004320:	75fb      	strb	r3, [r7, #23]
    }

    iso15693Buffer[1] = cmd;
 8004322:	4a12      	ldr	r2, [pc, #72]	; (800436c <iso15693SendRequest+0xa8>)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	7053      	strb	r3, [r2, #1]

    /* append additional data to be sent */
    ST_MEMCPY(&iso15693Buffer[length], addSendData, addSendDataLength);
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	4a10      	ldr	r2, [pc, #64]	; (800436c <iso15693SendRequest+0xa8>)
 800432c:	4413      	add	r3, r2
 800432e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004332:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004334:	4618      	mov	r0, r3
 8004336:	f012 fd2c 	bl	8016d92 <memcpy>
    length += addSendDataLength;
 800433a:	7dfa      	ldrb	r2, [r7, #23]
 800433c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004340:	4413      	add	r3, r2
 8004342:	75fb      	strb	r3, [r7, #23]

    return rfalTransceiveBlockingTxRx( iso15693Buffer, length, rcvbuffer, rcvbuffer_len, actlength,
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	b299      	uxth	r1, r3
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	8c3a      	ldrh	r2, [r7, #32]
 800434e:	9302      	str	r3, [sp, #8]
 8004350:	2300      	movs	r3, #0
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	4803      	ldr	r0, [pc, #12]	; (800436c <iso15693SendRequest+0xa8>)
 800435e:	f00a f92d 	bl	800e5bc <rfalTransceiveBlockingTxRx>
 8004362:	4603      	mov	r3, r0
                                     (RFAL_TXRX_FLAGS_CRC_TX_AUTO | RFAL_TXRX_FLAGS_CRC_RX_REMV | RFAL_TXRX_FLAGS_NFCIP1_OFF | RFAL_TXRX_FLAGS_AGC_ON | RFAL_TXRX_FLAGS_PAR_RX_REMV),
                                      rfalConv64fcTo1fc( no_response_time_64fcs * 4 ) );

}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000268 	.word	0x20000268
 8004370:	2000026a 	.word	0x2000026a

08004374 <rfidControllerInit>:
 *******************************************************************************/

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/
ReturnCode rfidControllerInit(void) {
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
	ReturnCode err = ERR_NONE;
 800437a:	2300      	movs	r3, #0
 800437c:	80fb      	strh	r3, [r7, #6]
	struct st25r3916AatTuneResult tuningStatus;

	rfalAnalogConfigInitialize();                                                     /* Initialize RFAL's Analog Configs */
 800437e:	f008 fcd9 	bl	800cd34 <rfalAnalogConfigInitialize>

	if ((err = rfalInitialize()) == ERR_NONE) {
 8004382:	f009 f9b9 	bl	800d6f8 <rfalInitialize>
 8004386:	4603      	mov	r3, r0
 8004388:	80fb      	strh	r3, [r7, #6]
 800438a:	88fb      	ldrh	r3, [r7, #6]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <rfidControllerInit+0x22>
		rfidInitialized = true;
 8004390:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <rfidControllerInit+0x3c>)
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
	}

	err = st25r3916AatTune(NULL, &tuningStatus);
 8004396:	463b      	mov	r3, r7
 8004398:	4619      	mov	r1, r3
 800439a:	2000      	movs	r0, #0
 800439c:	f00b fe78 	bl	8010090 <st25r3916AatTune>
 80043a0:	4603      	mov	r3, r0
 80043a2:	80fb      	strh	r3, [r7, #6]

	return err;
 80043a4:	88fb      	ldrh	r3, [r7, #6]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	200002f5 	.word	0x200002f5

080043b4 <checkFilterTags>:

ReturnCode checkFilterTags(detectedTags_t *dTags) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08e      	sub	sp, #56	; 0x38
 80043b8:	af04      	add	r7, sp, #16
 80043ba:	6078      	str	r0, [r7, #4]
	ReturnCode err = ERR_NONE;
 80043bc:	2300      	movs	r3, #0
 80043be:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t  resFlags;
	uint16_t actLen;

	uint8_t rxNameBuffer[16];

	if (!rfidInitialized) return ERR_PARAM;
 80043c0:	4b5f      	ldr	r3, [pc, #380]	; (8004540 <checkFilterTags+0x18c>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	f083 0301 	eor.w	r3, r3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <checkFilterTags+0x1e>
 80043ce:	2307      	movs	r3, #7
 80043d0:	e0b1      	b.n	8004536 <checkFilterTags+0x182>

	// Reset dTags
	dTags->tagCount = 0;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80043d8:	2300      	movs	r3, #0
 80043da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80043de:	e021      	b.n	8004424 <checkFilterTags+0x70>
		memset(dTags->filterTags[i].tagUID, 0, ISO15693_UID_LENGTH);
 80043e0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4413      	add	r3, r2
 80043f0:	3301      	adds	r3, #1
 80043f2:	2208      	movs	r2, #8
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f012 fcd6 	bl	8016da8 <memset>
		memset(dTags->filterTags[i].tagName, 0, FILTER_NAME_LEN);
 80043fc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	3308      	adds	r3, #8
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	3301      	adds	r3, #1
 8004410:	220a      	movs	r2, #10
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f012 fcc7 	bl	8016da8 <memset>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800441a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800441e:	3301      	adds	r3, #1
 8004420:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004424:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004428:	2b02      	cmp	r3, #2
 800442a:	d9d9      	bls.n	80043e0 <checkFilterTags+0x2c>
	}

	crdptr = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	623b      	str	r3, [r7, #32]

	// Initialize the Reader. Turn the field on and get ready to detect cards.
	if ((err = iso15693Initialize(false, false)) != ERR_NONE) goto deinitReader;
 8004430:	2100      	movs	r1, #0
 8004432:	2000      	movs	r0, #0
 8004434:	f7ff fb58 	bl	8003ae8 <iso15693Initialize>
 8004438:	4603      	mov	r3, r0
 800443a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800443c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800443e:	2b00      	cmp	r3, #0
 8004440:	d16e      	bne.n	8004520 <checkFilterTags+0x16c>

	// Get the card inventory. This will load the [cards] variable with UIDs and update the [crdcnt] variable
	if ((err = iso15693Inventory(ISO15693_NUM_SLOTS_1, 0, NULL, cards, FILTER_SECTION_SIZE, &crdcnt)) != ERR_NONE) goto deinitReader;
 8004442:	4b40      	ldr	r3, [pc, #256]	; (8004544 <checkFilterTags+0x190>)
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	2303      	movs	r3, #3
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	4b3f      	ldr	r3, [pc, #252]	; (8004548 <checkFilterTags+0x194>)
 800444c:	2200      	movs	r2, #0
 800444e:	2100      	movs	r1, #0
 8004450:	2000      	movs	r0, #0
 8004452:	f7ff fb8d 	bl	8003b70 <iso15693Inventory>
 8004456:	4603      	mov	r3, r0
 8004458:	84fb      	strh	r3, [r7, #38]	; 0x26
 800445a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800445c:	2b00      	cmp	r3, #0
 800445e:	d161      	bne.n	8004524 <checkFilterTags+0x170>

	// Get the Filter names stored on each tag
	for (uint8_t i = 0; i < crdcnt; i++) {
 8004460:	2300      	movs	r3, #0
 8004462:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8004466:	e050      	b.n	800450a <checkFilterTags+0x156>
		// Loop through each card by updating the UID pointer, selecting the card, read the mem block, and update the filter section name.
		// Select the next card
		crdptr = &cards[i];
 8004468:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800446c:	4613      	mov	r3, r2
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4a34      	ldr	r2, [pc, #208]	; (8004548 <checkFilterTags+0x194>)
 8004476:	4413      	add	r3, r2
 8004478:	623b      	str	r3, [r7, #32]
		if ((err = iso15693SelectPicc(crdptr)) != ERR_NONE) goto deinitReader;
 800447a:	6a38      	ldr	r0, [r7, #32]
 800447c:	f7ff fe96 	bl	80041ac <iso15693SelectPicc>
 8004480:	4603      	mov	r3, r0
 8004482:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004484:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004486:	2b00      	cmp	r3, #0
 8004488:	d14e      	bne.n	8004528 <checkFilterTags+0x174>

		// Read the Memory Block
		if ((err = iso15693ReadMultipleBlocks(crdptr, 0, 4, &resFlags, rxNameBuffer, sizeof(rxNameBuffer) + 1, &actLen)) != ERR_NONE) goto deinitReader;
 800448a:	f107 021f 	add.w	r2, r7, #31
 800448e:	f107 031c 	add.w	r3, r7, #28
 8004492:	9302      	str	r3, [sp, #8]
 8004494:	2311      	movs	r3, #17
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	f107 030c 	add.w	r3, r7, #12
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	2204      	movs	r2, #4
 80044a2:	2100      	movs	r1, #0
 80044a4:	6a38      	ldr	r0, [r7, #32]
 80044a6:	f7ff feaf 	bl	8004208 <iso15693ReadMultipleBlocks>
 80044aa:	4603      	mov	r3, r0
 80044ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80044ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d13b      	bne.n	800452c <checkFilterTags+0x178>

		// Copy the UID and Filter Name into the filterSection
		memcpy(dTags->filterTags[i].tagUID, cards[i].uid, ISO15693_UID_LENGTH);
 80044b4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	1c58      	adds	r0, r3, #1
 80044c6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80044ca:	4613      	mov	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <checkFilterTags+0x194>)
 80044d4:	4413      	add	r3, r2
 80044d6:	3302      	adds	r3, #2
 80044d8:	2208      	movs	r2, #8
 80044da:	4619      	mov	r1, r3
 80044dc:	f012 fc59 	bl	8016d92 <memcpy>
		memcpy(dTags->filterTags[i].tagName, rxNameBuffer, FILTER_NAME_LEN);
 80044e0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80044e4:	4613      	mov	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4413      	add	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	3308      	adds	r3, #8
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4413      	add	r3, r2
 80044f2:	3301      	adds	r3, #1
 80044f4:	f107 010c 	add.w	r1, r7, #12
 80044f8:	220a      	movs	r2, #10
 80044fa:	4618      	mov	r0, r3
 80044fc:	f012 fc49 	bl	8016d92 <memcpy>
	for (uint8_t i = 0; i < crdcnt; i++) {
 8004500:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004504:	3301      	adds	r3, #1
 8004506:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <checkFilterTags+0x190>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004512:	429a      	cmp	r2, r3
 8004514:	d3a8      	bcc.n	8004468 <checkFilterTags+0xb4>
	}

	dTags->tagCount = crdcnt;
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <checkFilterTags+0x190>)
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e006      	b.n	800452e <checkFilterTags+0x17a>
	if ((err = iso15693Initialize(false, false)) != ERR_NONE) goto deinitReader;
 8004520:	bf00      	nop
 8004522:	e004      	b.n	800452e <checkFilterTags+0x17a>
	if ((err = iso15693Inventory(ISO15693_NUM_SLOTS_1, 0, NULL, cards, FILTER_SECTION_SIZE, &crdcnt)) != ERR_NONE) goto deinitReader;
 8004524:	bf00      	nop
 8004526:	e002      	b.n	800452e <checkFilterTags+0x17a>
		if ((err = iso15693SelectPicc(crdptr)) != ERR_NONE) goto deinitReader;
 8004528:	bf00      	nop
 800452a:	e000      	b.n	800452e <checkFilterTags+0x17a>
		if ((err = iso15693ReadMultipleBlocks(crdptr, 0, 4, &resFlags, rxNameBuffer, sizeof(rxNameBuffer) + 1, &actLen)) != ERR_NONE) goto deinitReader;
 800452c:	bf00      	nop

	// Deinitialize the Reader
	deinitReader:
		iso15693Deinitialize(false);
 800452e:	2000      	movs	r0, #0
 8004530:	f7ff fb0c 	bl	8003b4c <iso15693Deinitialize>

	return err;
 8004534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8004536:	4618      	mov	r0, r3
 8004538:	3728      	adds	r7, #40	; 0x28
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	200002f5 	.word	0x200002f5
 8004544:	200002f6 	.word	0x200002f6
 8004548:	200002f8 	.word	0x200002f8

0800454c <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 8004554:	4a08      	ldr	r2, [pc, #32]	; (8004578 <spiInit+0x2c>)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004568:	601a      	str	r2, [r3, #0]
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	2000071c 	.word	0x2000071c

0800457c <spiSelect>:

void spiSelect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_RESET);
 8004588:	887b      	ldrh	r3, [r7, #2]
 800458a:	2200      	movs	r2, #0
 800458c:	4619      	mov	r1, r3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f001 fa82 	bl	8005a98 <HAL_GPIO_WritePin>
}     
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <spiDeselect>:

void spiDeselect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	807b      	strh	r3, [r7, #2]
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
 80045a8:	887b      	ldrh	r3, [r7, #2]
 80045aa:	2201      	movs	r2, #1
 80045ac:	4619      	mov	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f001 fa72 	bl	8005a98 <HAL_GPIO_WritePin>
}
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <spiTxRx>:

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 80045ca:	4b18      	ldr	r3, [pc, #96]	; (800462c <spiTxRx+0x70>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <spiTxRx+0x1a>
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e026      	b.n	8004624 <spiTxRx+0x68>
  
  if(length > SPI_BUF_LEN)
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045dc:	d901      	bls.n	80045e2 <spiTxRx+0x26>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e020      	b.n	8004624 <spiTxRx+0x68>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d006      	beq.n	80045f6 <spiTxRx+0x3a>
  {
    memcpy(txBuf, txData, length );
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	461a      	mov	r2, r3
 80045ec:	68f9      	ldr	r1, [r7, #12]
 80045ee:	4810      	ldr	r0, [pc, #64]	; (8004630 <spiTxRx+0x74>)
 80045f0:	f012 fbcf 	bl	8016d92 <memcpy>
 80045f4:	e005      	b.n	8004602 <spiTxRx+0x46>
  }
  else
  {
    memset(txBuf, 0x00, length );
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	461a      	mov	r2, r3
 80045fa:	2100      	movs	r1, #0
 80045fc:	480c      	ldr	r0, [pc, #48]	; (8004630 <spiTxRx+0x74>)
 80045fe:	f012 fbd3 	bl	8016da8 <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <spiTxRx+0x70>)
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <spiTxRx+0x54>
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	e000      	b.n	8004612 <spiTxRx+0x56>
 8004610:	4a08      	ldr	r2, [pc, #32]	; (8004634 <spiTxRx+0x78>)
 8004612:	88f9      	ldrh	r1, [r7, #6]
 8004614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	460b      	mov	r3, r1
 800461c:	4904      	ldr	r1, [pc, #16]	; (8004630 <spiTxRx+0x74>)
 800461e:	f005 fe2f 	bl	800a280 <HAL_SPI_TransmitReceive>
 8004622:	4603      	mov	r3, r0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	2000071c 	.word	0x2000071c
 8004630:	2000031c 	.word	0x2000031c
 8004634:	2000051c 	.word	0x2000051c

08004638 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 8004642:	f000 ff2d 	bl	80054a0 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	4413      	add	r3, r2
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 800465c:	f000 ff20 	bl	80054a0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	da01      	bge.n	8004676 <timerIsExpired+0x22>
  {
    return true;
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <timerIsExpired+0x24>
  }
  
  return false;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <rtcModuleInit>:
 *******************************************************************************/

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/
void rtcModuleInit(RTC_HandleTypeDef *hrtc) {
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	// Register the Handle
	pRtcHandle = hrtc;
 8004688:	4a05      	ldr	r2, [pc, #20]	; (80046a0 <rtcModuleInit+0x20>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6013      	str	r3, [r2, #0]
	rtcModInit = true;
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <rtcModuleInit+0x24>)
 8004690:	2201      	movs	r2, #1
 8004692:	701a      	strb	r2, [r3, #0]
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	20000720 	.word	0x20000720
 80046a4:	20000724 	.word	0x20000724

080046a8 <rtcModuleIsInit>:

bool rtcModuleIsInit( void ) {
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
	return rtcModInit;
 80046ac:	4b03      	ldr	r3, [pc, #12]	; (80046bc <rtcModuleIsInit+0x14>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20000724 	.word	0x20000724

080046c0 <rtcGetDateTime>:
	}

	return RTC_OK;
}

RTC_error rtcGetDateTime(RTC_DateTypeDef* dateRet, RTC_TimeTypeDef* timeRet) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
	// Check If Module is Initialized
	if (!rtcModInit) {
 80046ca:	4b13      	ldr	r3, [pc, #76]	; (8004718 <rtcGetDateTime+0x58>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	f083 0301 	eor.w	r3, r3, #1
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <rtcGetDateTime+0x1c>
		return RTC_ERR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e018      	b.n	800470e <rtcGetDateTime+0x4e>
	}

	// Get the Time
	if (HAL_RTC_GetTime(pRtcHandle, timeRet, RTC_FORMAT_BIN) != HAL_OK) {
 80046dc:	4b0f      	ldr	r3, [pc, #60]	; (800471c <rtcGetDateTime+0x5c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2200      	movs	r2, #0
 80046e2:	6839      	ldr	r1, [r7, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f004 f80b 	bl	8008700 <HAL_RTC_GetTime>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <rtcGetDateTime+0x34>
		// There was an issue communicating with the RTC
		return RTC_ERR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e00c      	b.n	800470e <rtcGetDateTime+0x4e>
	}

	// Get the Date
	if (HAL_RTC_GetDate(pRtcHandle, dateRet, RTC_FORMAT_BIN) != HAL_OK) {
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <rtcGetDateTime+0x5c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2200      	movs	r2, #0
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f004 f904 	bl	800890a <HAL_RTC_GetDate>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <rtcGetDateTime+0x4c>
		// There was an issue communicating with the RTC
		return RTC_ERR;
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <rtcGetDateTime+0x4e>
	}

	return RTC_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000724 	.word	0x20000724
 800471c:	20000720 	.word	0x20000720

08004720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004724:	f000 fe56 	bl	80053d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004728:	f000 f814 	bl	8004754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800472c:	f000 f9a8 	bl	8004a80 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004730:	f000 f892 	bl	8004858 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8004734:	f000 f918 	bl	8004968 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8004738:	f000 f936 	bl	80049a8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800473c:	f000 f96a 	bl	8004a14 <MX_SPI2_Init>
//  MX_FATFS_Init();
  MX_USB_DEVICE_Init();
 8004740:	f011 fdc6 	bl	80162d0 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8004744:	f000 f8b6 	bl	80048b4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  setupIOs();						/* Main Setup 			*/
 8004748:	f7fc fcba 	bl	80010c0 <setupIOs>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  processIOs();					/* Main Process 		*/
 800474c:	f7fc fd16 	bl	800117c <processIOs>
 8004750:	e7fc      	b.n	800474c <main+0x2c>
	...

08004754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b09a      	sub	sp, #104	; 0x68
 8004758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800475a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800475e:	2230      	movs	r2, #48	; 0x30
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f012 fb20 	bl	8016da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	60da      	str	r2, [r3, #12]
 8004776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004778:	f107 030c 	add.w	r3, r7, #12
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	60da      	str	r2, [r3, #12]
 8004786:	611a      	str	r2, [r3, #16]
 8004788:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	4b30      	ldr	r3, [pc, #192]	; (8004850 <SystemClock_Config+0xfc>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a2f      	ldr	r2, [pc, #188]	; (8004850 <SystemClock_Config+0xfc>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <SystemClock_Config+0xfc>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047a6:	2300      	movs	r3, #0
 80047a8:	607b      	str	r3, [r7, #4]
 80047aa:	4b2a      	ldr	r3, [pc, #168]	; (8004854 <SystemClock_Config+0x100>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a29      	ldr	r2, [pc, #164]	; (8004854 <SystemClock_Config+0x100>)
 80047b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	4b27      	ldr	r3, [pc, #156]	; (8004854 <SystemClock_Config+0x100>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047be:	607b      	str	r3, [r7, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80047c2:	230a      	movs	r3, #10
 80047c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047c6:	2301      	movs	r3, #1
 80047c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80047ca:	2310      	movs	r3, #16
 80047cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80047ce:	2301      	movs	r3, #1
 80047d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047d2:	2302      	movs	r3, #2
 80047d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80047d6:	2300      	movs	r3, #0
 80047d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 80047da:	2308      	movs	r3, #8
 80047dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 80047de:	2348      	movs	r3, #72	; 0x48
 80047e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047e2:	2302      	movs	r3, #2
 80047e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80047e6:	2303      	movs	r3, #3
 80047e8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80047ee:	4618      	mov	r0, r3
 80047f0:	f003 f8fa 	bl	80079e8 <HAL_RCC_OscConfig>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80047fa:	f000 fa31 	bl	8004c60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047fe:	230f      	movs	r3, #15
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004802:	2302      	movs	r3, #2
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004806:	2300      	movs	r3, #0
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800480a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800480e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004810:	2300      	movs	r3, #0
 8004812:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004818:	2102      	movs	r1, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f003 fb54 	bl	8007ec8 <HAL_RCC_ClockConfig>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8004826:	f000 fa1b 	bl	8004c60 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800482a:	2302      	movs	r3, #2
 800482c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800482e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004832:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004834:	f107 030c 	add.w	r3, r7, #12
 8004838:	4618      	mov	r0, r3
 800483a:	f003 fd23 	bl	8008284 <HAL_RCCEx_PeriphCLKConfig>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004844:	f000 fa0c 	bl	8004c60 <Error_Handler>
  }
}
 8004848:	bf00      	nop
 800484a:	3768      	adds	r7, #104	; 0x68
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40023800 	.word	0x40023800
 8004854:	40007000 	.word	0x40007000

08004858 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <MX_I2C1_Init+0x50>)
 800485e:	4a13      	ldr	r2, [pc, #76]	; (80048ac <MX_I2C1_Init+0x54>)
 8004860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <MX_I2C1_Init+0x50>)
 8004864:	4a12      	ldr	r2, [pc, #72]	; (80048b0 <MX_I2C1_Init+0x58>)
 8004866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004868:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <MX_I2C1_Init+0x50>)
 800486a:	2200      	movs	r2, #0
 800486c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800486e:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <MX_I2C1_Init+0x50>)
 8004870:	2200      	movs	r2, #0
 8004872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <MX_I2C1_Init+0x50>)
 8004876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800487a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <MX_I2C1_Init+0x50>)
 800487e:	2200      	movs	r2, #0
 8004880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004882:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <MX_I2C1_Init+0x50>)
 8004884:	2200      	movs	r2, #0
 8004886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004888:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <MX_I2C1_Init+0x50>)
 800488a:	2200      	movs	r2, #0
 800488c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <MX_I2C1_Init+0x50>)
 8004890:	2200      	movs	r2, #0
 8004892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004894:	4804      	ldr	r0, [pc, #16]	; (80048a8 <MX_I2C1_Init+0x50>)
 8004896:	f001 f93d 	bl	8005b14 <HAL_I2C_Init>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80048a0:	f000 f9de 	bl	8004c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000fec 	.word	0x20000fec
 80048ac:	40005400 	.word	0x40005400
 80048b0:	00061a80 	.word	0x00061a80

080048b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80048ba:	1d3b      	adds	r3, r7, #4
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80048c8:	2300      	movs	r3, #0
 80048ca:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <MX_RTC_Init+0xac>)
 80048ce:	4a25      	ldr	r2, [pc, #148]	; (8004964 <MX_RTC_Init+0xb0>)
 80048d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <MX_RTC_Init+0xac>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80048d8:	4b21      	ldr	r3, [pc, #132]	; (8004960 <MX_RTC_Init+0xac>)
 80048da:	227f      	movs	r2, #127	; 0x7f
 80048dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <MX_RTC_Init+0xac>)
 80048e0:	22ff      	movs	r2, #255	; 0xff
 80048e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80048e4:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <MX_RTC_Init+0xac>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80048ea:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <MX_RTC_Init+0xac>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <MX_RTC_Init+0xac>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80048f6:	481a      	ldr	r0, [pc, #104]	; (8004960 <MX_RTC_Init+0xac>)
 80048f8:	f003 fdb4 	bl	8008464 <HAL_RTC_Init>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8004902:	f000 f9ad 	bl	8004c60 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8004906:	2300      	movs	r3, #0
 8004908:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800490a:	2300      	movs	r3, #0
 800490c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800490e:	2300      	movs	r3, #0
 8004910:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004912:	2300      	movs	r3, #0
 8004914:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800491a:	1d3b      	adds	r3, r7, #4
 800491c:	2201      	movs	r2, #1
 800491e:	4619      	mov	r1, r3
 8004920:	480f      	ldr	r0, [pc, #60]	; (8004960 <MX_RTC_Init+0xac>)
 8004922:	f003 fe30 	bl	8008586 <HAL_RTC_SetTime>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800492c:	f000 f998 	bl	8004c60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004930:	2301      	movs	r3, #1
 8004932:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004934:	2301      	movs	r3, #1
 8004936:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8004938:	2301      	movs	r3, #1
 800493a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800493c:	2300      	movs	r3, #0
 800493e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004940:	463b      	mov	r3, r7
 8004942:	2201      	movs	r2, #1
 8004944:	4619      	mov	r1, r3
 8004946:	4806      	ldr	r0, [pc, #24]	; (8004960 <MX_RTC_Init+0xac>)
 8004948:	f003 ff38 	bl	80087bc <HAL_RTC_SetDate>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8004952:	f000 f985 	bl	8004c60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004956:	bf00      	nop
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20001040 	.word	0x20001040
 8004964:	40002800 	.word	0x40002800

08004968 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <MX_SDIO_SD_Init+0x38>)
 800496e:	4a0d      	ldr	r2, [pc, #52]	; (80049a4 <MX_SDIO_SD_Init+0x3c>)
 8004970:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <MX_SDIO_SD_Init+0x38>)
 8004974:	2200      	movs	r2, #0
 8004976:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <MX_SDIO_SD_Init+0x38>)
 800497a:	2200      	movs	r2, #0
 800497c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800497e:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <MX_SDIO_SD_Init+0x38>)
 8004980:	2200      	movs	r2, #0
 8004982:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <MX_SDIO_SD_Init+0x38>)
 8004986:	2200      	movs	r2, #0
 8004988:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <MX_SDIO_SD_Init+0x38>)
 800498c:	2200      	movs	r2, #0
 800498e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8004990:	4b03      	ldr	r3, [pc, #12]	; (80049a0 <MX_SDIO_SD_Init+0x38>)
 8004992:	2202      	movs	r2, #2
 8004994:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004996:	bf00      	nop
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	20001060 	.word	0x20001060
 80049a4:	40012c00 	.word	0x40012c00

080049a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80049ac:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049ae:	4a18      	ldr	r2, [pc, #96]	; (8004a10 <MX_SPI1_Init+0x68>)
 80049b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80049b2:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80049b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80049ba:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049bc:	2200      	movs	r2, #0
 80049be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80049c0:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80049c6:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80049d2:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80049da:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049dc:	2210      	movs	r2, #16
 80049de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80049e6:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049ec:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80049f2:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049f4:	220a      	movs	r2, #10
 80049f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80049f8:	4804      	ldr	r0, [pc, #16]	; (8004a0c <MX_SPI1_Init+0x64>)
 80049fa:	f005 faa9 	bl	8009f50 <HAL_SPI_Init>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004a04:	f000 f92c 	bl	8004c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004a08:	bf00      	nop
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	200010e4 	.word	0x200010e4
 8004a10:	40013000 	.word	0x40013000

08004a14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004a18:	4b17      	ldr	r3, [pc, #92]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a1a:	4a18      	ldr	r2, [pc, #96]	; (8004a7c <MX_SPI2_Init+0x68>)
 8004a1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004a1e:	4b16      	ldr	r3, [pc, #88]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a32:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004a3e:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a48:	2208      	movs	r2, #8
 8004a4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a52:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a58:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a60:	220a      	movs	r2, #10
 8004a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a64:	4804      	ldr	r0, [pc, #16]	; (8004a78 <MX_SPI2_Init+0x64>)
 8004a66:	f005 fa73 	bl	8009f50 <HAL_SPI_Init>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004a70:	f000 f8f6 	bl	8004c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004a74:	bf00      	nop
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20000f94 	.word	0x20000f94
 8004a7c:	40003800 	.word	0x40003800

08004a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	; 0x28
 8004a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a86:	f107 0314 	add.w	r3, r7, #20
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	605a      	str	r2, [r3, #4]
 8004a90:	609a      	str	r2, [r3, #8]
 8004a92:	60da      	str	r2, [r3, #12]
 8004a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	4b6b      	ldr	r3, [pc, #428]	; (8004c48 <MX_GPIO_Init+0x1c8>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	4a6a      	ldr	r2, [pc, #424]	; (8004c48 <MX_GPIO_Init+0x1c8>)
 8004aa0:	f043 0304 	orr.w	r3, r3, #4
 8004aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004aa6:	4b68      	ldr	r3, [pc, #416]	; (8004c48 <MX_GPIO_Init+0x1c8>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	4b64      	ldr	r3, [pc, #400]	; (8004c48 <MX_GPIO_Init+0x1c8>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	4a63      	ldr	r2, [pc, #396]	; (8004c48 <MX_GPIO_Init+0x1c8>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ac2:	4b61      	ldr	r3, [pc, #388]	; (8004c48 <MX_GPIO_Init+0x1c8>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	4b5d      	ldr	r3, [pc, #372]	; (8004c48 <MX_GPIO_Init+0x1c8>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	4a5c      	ldr	r2, [pc, #368]	; (8004c48 <MX_GPIO_Init+0x1c8>)
 8004ad8:	f043 0302 	orr.w	r3, r3, #2
 8004adc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ade:	4b5a      	ldr	r3, [pc, #360]	; (8004c48 <MX_GPIO_Init+0x1c8>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	60bb      	str	r3, [r7, #8]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	4b56      	ldr	r3, [pc, #344]	; (8004c48 <MX_GPIO_Init+0x1c8>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	4a55      	ldr	r2, [pc, #340]	; (8004c48 <MX_GPIO_Init+0x1c8>)
 8004af4:	f043 0308 	orr.w	r3, r3, #8
 8004af8:	6313      	str	r3, [r2, #48]	; 0x30
 8004afa:	4b53      	ldr	r3, [pc, #332]	; (8004c48 <MX_GPIO_Init+0x1c8>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin, GPIO_PIN_RESET);
 8004b06:	2200      	movs	r2, #0
 8004b08:	2143      	movs	r1, #67	; 0x43
 8004b0a:	4850      	ldr	r0, [pc, #320]	; (8004c4c <MX_GPIO_Init+0x1cc>)
 8004b0c:	f000 ffc4 	bl	8005a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 8004b10:	2200      	movs	r2, #0
 8004b12:	f240 711b 	movw	r1, #1819	; 0x71b
 8004b16:	484e      	ldr	r0, [pc, #312]	; (8004c50 <MX_GPIO_Init+0x1d0>)
 8004b18:	f000 ffbe 	bl	8005a98 <HAL_GPIO_WritePin>
                          |USB_RENUM_Pin|DBG_OUT_TX_Pin|DBG_OUT_RX_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|AUX_POWER_Pin, GPIO_PIN_RESET);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2123      	movs	r1, #35	; 0x23
 8004b20:	484c      	ldr	r0, [pc, #304]	; (8004c54 <MX_GPIO_Init+0x1d4>)
 8004b22:	f000 ffb9 	bl	8005a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_POWER_Pin EPD_SPI_CS_Pin SDIO_POWER_Pin */
  GPIO_InitStruct.Pin = EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin;
 8004b26:	2343      	movs	r3, #67	; 0x43
 8004b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b32:	2300      	movs	r3, #0
 8004b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b36:	f107 0314 	add.w	r3, r7, #20
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4843      	ldr	r0, [pc, #268]	; (8004c4c <MX_GPIO_Init+0x1cc>)
 8004b3e:	f000 fe11 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DISCHARGE_Pin EPD_NRST_Pin RFID_POWER_Pin RF_SPI_BSS_Pin 
                           USB_RENUM_Pin DBG_OUT_TX_Pin DBG_OUT_RX_Pin */
  GPIO_InitStruct.Pin = EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 8004b42:	f240 731b 	movw	r3, #1819	; 0x71b
 8004b46:	617b      	str	r3, [r7, #20]
                          |USB_RENUM_Pin|DBG_OUT_TX_Pin|DBG_OUT_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b50:	2300      	movs	r3, #0
 8004b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b54:	f107 0314 	add.w	r3, r7, #20
 8004b58:	4619      	mov	r1, r3
 8004b5a:	483d      	ldr	r0, [pc, #244]	; (8004c50 <MX_GPIO_Init+0x1d0>)
 8004b5c:	f000 fe02 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8004b60:	2304      	movs	r3, #4
 8004b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8004b6c:	f107 0314 	add.w	r3, r7, #20
 8004b70:	4619      	mov	r1, r3
 8004b72:	4837      	ldr	r0, [pc, #220]	; (8004c50 <MX_GPIO_Init+0x1d0>)
 8004b74:	f000 fdf6 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 8004b78:	2310      	movs	r3, #16
 8004b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b7c:	4b36      	ldr	r3, [pc, #216]	; (8004c58 <MX_GPIO_Init+0x1d8>)
 8004b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4830      	ldr	r0, [pc, #192]	; (8004c4c <MX_GPIO_Init+0x1cc>)
 8004b8c:	f000 fdea 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin AUX_POWER_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|AUX_POWER_Pin;
 8004b90:	2323      	movs	r3, #35	; 0x23
 8004b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b94:	2301      	movs	r3, #1
 8004b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	482b      	ldr	r0, [pc, #172]	; (8004c54 <MX_GPIO_Init+0x1d4>)
 8004ba8:	f000 fddc 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_INPUT1_Pin B_INPUT2_Pin B_INPUT3_Pin */
  GPIO_InitStruct.Pin = B_INPUT1_Pin|B_INPUT2_Pin|B_INPUT3_Pin;
 8004bac:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004bb2:	4b2a      	ldr	r3, [pc, #168]	; (8004c5c <MX_GPIO_Init+0x1dc>)
 8004bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bba:	f107 0314 	add.w	r3, r7, #20
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4824      	ldr	r0, [pc, #144]	; (8004c54 <MX_GPIO_Init+0x1d4>)
 8004bc2:	f000 fdcf 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004bca:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <MX_GPIO_Init+0x1dc>)
 8004bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8004bd2:	f107 0314 	add.w	r3, r7, #20
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	481c      	ldr	r0, [pc, #112]	; (8004c4c <MX_GPIO_Init+0x1cc>)
 8004bda:	f000 fdc3 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : TC_SIGNAL_Pin */
  GPIO_InitStruct.Pin = TC_SIGNAL_Pin;
 8004bde:	2310      	movs	r3, #16
 8004be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TC_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8004bea:	f107 0314 	add.w	r3, r7, #20
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4818      	ldr	r0, [pc, #96]	; (8004c54 <MX_GPIO_Init+0x1d4>)
 8004bf2:	f000 fdb7 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP_IRQ_Pin LOW_BAT_IRQ_Pin */
  GPIO_InitStruct.Pin = TEMP_IRQ_Pin|LOW_BAT_IRQ_Pin;
 8004bf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004bfc:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <MX_GPIO_Init+0x1d8>)
 8004bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c04:	f107 0314 	add.w	r3, r7, #20
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4812      	ldr	r0, [pc, #72]	; (8004c54 <MX_GPIO_Init+0x1d4>)
 8004c0c:	f000 fdaa 	bl	8005764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004c10:	2200      	movs	r2, #0
 8004c12:	2100      	movs	r1, #0
 8004c14:	200a      	movs	r0, #10
 8004c16:	f000 fd4c 	bl	80056b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004c1a:	200a      	movs	r0, #10
 8004c1c:	f000 fd65 	bl	80056ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004c20:	2200      	movs	r2, #0
 8004c22:	2100      	movs	r1, #0
 8004c24:	2017      	movs	r0, #23
 8004c26:	f000 fd44 	bl	80056b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004c2a:	2017      	movs	r0, #23
 8004c2c:	f000 fd5d 	bl	80056ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004c30:	2200      	movs	r2, #0
 8004c32:	2100      	movs	r1, #0
 8004c34:	2028      	movs	r0, #40	; 0x28
 8004c36:	f000 fd3c 	bl	80056b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004c3a:	2028      	movs	r0, #40	; 0x28
 8004c3c:	f000 fd55 	bl	80056ea <HAL_NVIC_EnableIRQ>

}
 8004c40:	bf00      	nop
 8004c42:	3728      	adds	r7, #40	; 0x28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	40020800 	.word	0x40020800
 8004c50:	40020000 	.word	0x40020000
 8004c54:	40020400 	.word	0x40020400
 8004c58:	10110000 	.word	0x10110000
 8004c5c:	10310000 	.word	0x10310000

08004c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c64:	bf00      	nop
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <HAL_MspInit+0x4c>)
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	4a0f      	ldr	r2, [pc, #60]	; (8004cbc <HAL_MspInit+0x4c>)
 8004c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c84:	6453      	str	r3, [r2, #68]	; 0x44
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <HAL_MspInit+0x4c>)
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	603b      	str	r3, [r7, #0]
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <HAL_MspInit+0x4c>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a08      	ldr	r2, [pc, #32]	; (8004cbc <HAL_MspInit+0x4c>)
 8004c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_MspInit+0x4c>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40023800 	.word	0x40023800

08004cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	; 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc8:	f107 0314 	add.w	r3, r7, #20
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	60da      	str	r2, [r3, #12]
 8004cd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a19      	ldr	r2, [pc, #100]	; (8004d44 <HAL_I2C_MspInit+0x84>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d12b      	bne.n	8004d3a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	4b18      	ldr	r3, [pc, #96]	; (8004d48 <HAL_I2C_MspInit+0x88>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <HAL_I2C_MspInit+0x88>)
 8004cec:	f043 0302 	orr.w	r3, r3, #2
 8004cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <HAL_I2C_MspInit+0x88>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = AUX_I2C_SCL_Pin|AUX_I2C_SDA_Pin;
 8004cfe:	23c0      	movs	r3, #192	; 0xc0
 8004d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d02:	2312      	movs	r3, #18
 8004d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d06:	2301      	movs	r3, #1
 8004d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d0e:	2304      	movs	r3, #4
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d12:	f107 0314 	add.w	r3, r7, #20
 8004d16:	4619      	mov	r1, r3
 8004d18:	480c      	ldr	r0, [pc, #48]	; (8004d4c <HAL_I2C_MspInit+0x8c>)
 8004d1a:	f000 fd23 	bl	8005764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <HAL_I2C_MspInit+0x88>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	4a08      	ldr	r2, [pc, #32]	; (8004d48 <HAL_I2C_MspInit+0x88>)
 8004d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2e:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <HAL_I2C_MspInit+0x88>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004d3a:	bf00      	nop
 8004d3c:	3728      	adds	r7, #40	; 0x28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40005400 	.word	0x40005400
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	40020400 	.word	0x40020400

08004d50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a05      	ldr	r2, [pc, #20]	; (8004d74 <HAL_RTC_MspInit+0x24>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d102      	bne.n	8004d68 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_RTC_MspInit+0x28>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40002800 	.word	0x40002800
 8004d78:	42470e3c 	.word	0x42470e3c

08004d7c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	; 0x30
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d84:	f107 031c 	add.w	r3, r7, #28
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a3c      	ldr	r2, [pc, #240]	; (8004e8c <HAL_SD_MspInit+0x110>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d171      	bne.n	8004e82 <HAL_SD_MspInit+0x106>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	4b3b      	ldr	r3, [pc, #236]	; (8004e90 <HAL_SD_MspInit+0x114>)
 8004da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da6:	4a3a      	ldr	r2, [pc, #232]	; (8004e90 <HAL_SD_MspInit+0x114>)
 8004da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dac:	6453      	str	r3, [r2, #68]	; 0x44
 8004dae:	4b38      	ldr	r3, [pc, #224]	; (8004e90 <HAL_SD_MspInit+0x114>)
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	4b34      	ldr	r3, [pc, #208]	; (8004e90 <HAL_SD_MspInit+0x114>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	4a33      	ldr	r2, [pc, #204]	; (8004e90 <HAL_SD_MspInit+0x114>)
 8004dc4:	f043 0302 	orr.w	r3, r3, #2
 8004dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dca:	4b31      	ldr	r3, [pc, #196]	; (8004e90 <HAL_SD_MspInit+0x114>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	4b2d      	ldr	r3, [pc, #180]	; (8004e90 <HAL_SD_MspInit+0x114>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	4a2c      	ldr	r2, [pc, #176]	; (8004e90 <HAL_SD_MspInit+0x114>)
 8004de0:	f043 0304 	orr.w	r3, r3, #4
 8004de4:	6313      	str	r3, [r2, #48]	; 0x30
 8004de6:	4b2a      	ldr	r3, [pc, #168]	; (8004e90 <HAL_SD_MspInit+0x114>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <HAL_SD_MspInit+0x114>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	4a25      	ldr	r2, [pc, #148]	; (8004e90 <HAL_SD_MspInit+0x114>)
 8004dfc:	f043 0308 	orr.w	r3, r3, #8
 8004e00:	6313      	str	r3, [r2, #48]	; 0x30
 8004e02:	4b23      	ldr	r3, [pc, #140]	; (8004e90 <HAL_SD_MspInit+0x114>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e14:	2302      	movs	r3, #2
 8004e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004e20:	230c      	movs	r3, #12
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e24:	f107 031c 	add.w	r3, r7, #28
 8004e28:	4619      	mov	r1, r3
 8004e2a:	481a      	ldr	r0, [pc, #104]	; (8004e94 <HAL_SD_MspInit+0x118>)
 8004e2c:	f000 fc9a 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8004e30:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e36:	2302      	movs	r3, #2
 8004e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004e42:	230c      	movs	r3, #12
 8004e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e46:	f107 031c 	add.w	r3, r7, #28
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4812      	ldr	r0, [pc, #72]	; (8004e98 <HAL_SD_MspInit+0x11c>)
 8004e4e:	f000 fc89 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e52:	2304      	movs	r3, #4
 8004e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e56:	2302      	movs	r3, #2
 8004e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004e62:	230c      	movs	r3, #12
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e66:	f107 031c 	add.w	r3, r7, #28
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	480b      	ldr	r0, [pc, #44]	; (8004e9c <HAL_SD_MspInit+0x120>)
 8004e6e:	f000 fc79 	bl	8005764 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004e72:	2200      	movs	r2, #0
 8004e74:	2100      	movs	r1, #0
 8004e76:	2031      	movs	r0, #49	; 0x31
 8004e78:	f000 fc1b 	bl	80056b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004e7c:	2031      	movs	r0, #49	; 0x31
 8004e7e:	f000 fc34 	bl	80056ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004e82:	bf00      	nop
 8004e84:	3730      	adds	r7, #48	; 0x30
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40012c00 	.word	0x40012c00
 8004e90:	40023800 	.word	0x40023800
 8004e94:	40020400 	.word	0x40020400
 8004e98:	40020800 	.word	0x40020800
 8004e9c:	40020c00 	.word	0x40020c00

08004ea0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	; 0x30
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea8:	f107 031c 	add.w	r3, r7, #28
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
 8004eb4:	60da      	str	r2, [r3, #12]
 8004eb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a45      	ldr	r2, [pc, #276]	; (8004fd4 <HAL_SPI_MspInit+0x134>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d134      	bne.n	8004f2c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	4b44      	ldr	r3, [pc, #272]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	4a43      	ldr	r2, [pc, #268]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004ecc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ed2:	4b41      	ldr	r3, [pc, #260]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	4b3d      	ldr	r3, [pc, #244]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	4a3c      	ldr	r2, [pc, #240]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	6313      	str	r3, [r2, #48]	; 0x30
 8004eee:	4b3a      	ldr	r3, [pc, #232]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SPI_SCLK_Pin|RF_SPI_MISO_Pin|RF_SPI_MOSI_Pin;
 8004efa:	23e0      	movs	r3, #224	; 0xe0
 8004efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efe:	2302      	movs	r3, #2
 8004f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f06:	2303      	movs	r3, #3
 8004f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f0a:	2305      	movs	r3, #5
 8004f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f0e:	f107 031c 	add.w	r3, r7, #28
 8004f12:	4619      	mov	r1, r3
 8004f14:	4831      	ldr	r0, [pc, #196]	; (8004fdc <HAL_SPI_MspInit+0x13c>)
 8004f16:	f000 fc25 	bl	8005764 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	2023      	movs	r0, #35	; 0x23
 8004f20:	f000 fbc7 	bl	80056b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004f24:	2023      	movs	r0, #35	; 0x23
 8004f26:	f000 fbe0 	bl	80056ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004f2a:	e04f      	b.n	8004fcc <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <HAL_SPI_MspInit+0x140>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d14a      	bne.n	8004fcc <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	4b27      	ldr	r3, [pc, #156]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f44:	6413      	str	r3, [r2, #64]	; 0x40
 8004f46:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	4a1f      	ldr	r2, [pc, #124]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004f5c:	f043 0304 	orr.w	r3, r3, #4
 8004f60:	6313      	str	r3, [r2, #48]	; 0x30
 8004f62:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	4a18      	ldr	r2, [pc, #96]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004f78:	f043 0302 	orr.w	r3, r3, #2
 8004f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f7e:	4b16      	ldr	r3, [pc, #88]	; (8004fd8 <HAL_SPI_MspInit+0x138>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	60bb      	str	r3, [r7, #8]
 8004f88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EPD_SPI_MISO_Pin|EPD_SPI_MOSI_Pin;
 8004f8a:	230c      	movs	r3, #12
 8004f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f8e:	2302      	movs	r3, #2
 8004f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f96:	2303      	movs	r3, #3
 8004f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f9a:	2305      	movs	r3, #5
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f9e:	f107 031c 	add.w	r3, r7, #28
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	480f      	ldr	r0, [pc, #60]	; (8004fe4 <HAL_SPI_MspInit+0x144>)
 8004fa6:	f000 fbdd 	bl	8005764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004fbc:	2305      	movs	r3, #5
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fc0:	f107 031c 	add.w	r3, r7, #28
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4808      	ldr	r0, [pc, #32]	; (8004fe8 <HAL_SPI_MspInit+0x148>)
 8004fc8:	f000 fbcc 	bl	8005764 <HAL_GPIO_Init>
}
 8004fcc:	bf00      	nop
 8004fce:	3730      	adds	r7, #48	; 0x30
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40013000 	.word	0x40013000
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	40020000 	.word	0x40020000
 8004fe0:	40003800 	.word	0x40003800
 8004fe4:	40020800 	.word	0x40020800
 8004fe8:	40020400 	.word	0x40020400

08004fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ffe:	e7fe      	b.n	8004ffe <HardFault_Handler+0x4>

08005000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005004:	e7fe      	b.n	8005004 <MemManage_Handler+0x4>

08005006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005006:	b480      	push	{r7}
 8005008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800500a:	e7fe      	b.n	800500a <BusFault_Handler+0x4>

0800500c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005010:	e7fe      	b.n	8005010 <UsageFault_Handler+0x4>

08005012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005012:	b480      	push	{r7}
 8005014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005016:	bf00      	nop
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005024:	bf00      	nop
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800502e:	b480      	push	{r7}
 8005030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005040:	f000 fa1a 	bl	8005478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005044:	bf00      	nop
 8005046:	bd80      	pop	{r7, pc}

08005048 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800504c:	2010      	movs	r0, #16
 800504e:	f000 fd3d 	bl	8005acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  st25r3916Isr();
 8005052:	f00b fe4f 	bl	8010cf4 <st25r3916Isr>
  /* USER CODE END EXTI4_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint32_t irq5tickCnt;
	static uint32_t irq5tickOffset = 0;
	// Software Debounce
	irq5tickCnt = HAL_GetTick();
 8005062:	f000 fa1d 	bl	80054a0 <HAL_GetTick>
 8005066:	6078      	str	r0, [r7, #4]

	if ((irq5tickCnt - irq5tickOffset) > 10) {
 8005068:	4b16      	ldr	r3, [pc, #88]	; (80050c4 <EXTI9_5_IRQHandler+0x68>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b0a      	cmp	r3, #10
 8005072:	d918      	bls.n	80050a6 <EXTI9_5_IRQHandler+0x4a>
		irq5tickOffset = irq5tickCnt;
 8005074:	4a13      	ldr	r2, [pc, #76]	; (80050c4 <EXTI9_5_IRQHandler+0x68>)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6013      	str	r3, [r2, #0]
		// Service the SD Card Insert/Remove
		if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_RESET) {
 800507a:	2180      	movs	r1, #128	; 0x80
 800507c:	4812      	ldr	r0, [pc, #72]	; (80050c8 <EXTI9_5_IRQHandler+0x6c>)
 800507e:	f000 fcf3 	bl	8005a68 <HAL_GPIO_ReadPin>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d107      	bne.n	8005098 <EXTI9_5_IRQHandler+0x3c>
			// The card has been inserted. Init FatFs/Logger.
			isr_flags |= (isr_flags_t) INIT_FAT_FS;
 8005088:	4b10      	ldr	r3, [pc, #64]	; (80050cc <EXTI9_5_IRQHandler+0x70>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <EXTI9_5_IRQHandler+0x70>)
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	e006      	b.n	80050a6 <EXTI9_5_IRQHandler+0x4a>
		} else {
			// The card has been removed.  Deinit FatFs/Logger.
			isr_flags |= (isr_flags_t) DEINIT_FAT_FS;
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <EXTI9_5_IRQHandler+0x70>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <EXTI9_5_IRQHandler+0x70>)
 80050a4:	701a      	strb	r2, [r3, #0]
		}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80050a6:	2080      	movs	r0, #128	; 0x80
 80050a8:	f000 fd10 	bl	8005acc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80050ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80050b0:	f000 fd0c 	bl	8005acc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80050b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80050b8:	f000 fd08 	bl	8005acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80050bc:	bf00      	nop
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20000728 	.word	0x20000728
 80050c8:	40020800 	.word	0x40020800
 80050cc:	20000eb0 	.word	0x20000eb0

080050d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80050d4:	4802      	ldr	r0, [pc, #8]	; (80050e0 <SPI1_IRQHandler+0x10>)
 80050d6:	f005 fa75 	bl	800a5c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80050da:	bf00      	nop
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	200010e4 	.word	0x200010e4

080050e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	static uint32_t tickStart, tickEnd = 0; // Interval Tracking
	static uint8_t btn1flag, btn2flag, btn3flag = 0;

	// Check Pin States
	if (HAL_GPIO_ReadPin(B_INPUT1_GPIO_Port, B_INPUT1_Pin) == GPIO_PIN_SET) {
 80050e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050ec:	4872      	ldr	r0, [pc, #456]	; (80052b8 <EXTI15_10_IRQHandler+0x1d4>)
 80050ee:	f000 fcbb 	bl	8005a68 <HAL_GPIO_ReadPin>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d10b      	bne.n	8005110 <EXTI15_10_IRQHandler+0x2c>
		// Button 1 Initial Press
		btn1flag = 1;
 80050f8:	4b70      	ldr	r3, [pc, #448]	; (80052bc <EXTI15_10_IRQHandler+0x1d8>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 80050fe:	f000 f9cf 	bl	80054a0 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	4b6e      	ldr	r3, [pc, #440]	; (80052c0 <EXTI15_10_IRQHandler+0x1dc>)
 8005106:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 8005108:	4b6d      	ldr	r3, [pc, #436]	; (80052c0 <EXTI15_10_IRQHandler+0x1dc>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a6d      	ldr	r2, [pc, #436]	; (80052c4 <EXTI15_10_IRQHandler+0x1e0>)
 800510e:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(B_INPUT2_GPIO_Port, B_INPUT2_Pin) == GPIO_PIN_SET) {
 8005110:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005114:	4868      	ldr	r0, [pc, #416]	; (80052b8 <EXTI15_10_IRQHandler+0x1d4>)
 8005116:	f000 fca7 	bl	8005a68 <HAL_GPIO_ReadPin>
 800511a:	4603      	mov	r3, r0
 800511c:	2b01      	cmp	r3, #1
 800511e:	d10b      	bne.n	8005138 <EXTI15_10_IRQHandler+0x54>
		// Button 2 Initial Press
		btn2flag = 1;
 8005120:	4b69      	ldr	r3, [pc, #420]	; (80052c8 <EXTI15_10_IRQHandler+0x1e4>)
 8005122:	2201      	movs	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 8005126:	f000 f9bb 	bl	80054a0 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	4b64      	ldr	r3, [pc, #400]	; (80052c0 <EXTI15_10_IRQHandler+0x1dc>)
 800512e:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 8005130:	4b63      	ldr	r3, [pc, #396]	; (80052c0 <EXTI15_10_IRQHandler+0x1dc>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a63      	ldr	r2, [pc, #396]	; (80052c4 <EXTI15_10_IRQHandler+0x1e0>)
 8005136:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(B_INPUT3_GPIO_Port, B_INPUT3_Pin) == GPIO_PIN_SET) {
 8005138:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800513c:	485e      	ldr	r0, [pc, #376]	; (80052b8 <EXTI15_10_IRQHandler+0x1d4>)
 800513e:	f000 fc93 	bl	8005a68 <HAL_GPIO_ReadPin>
 8005142:	4603      	mov	r3, r0
 8005144:	2b01      	cmp	r3, #1
 8005146:	d10b      	bne.n	8005160 <EXTI15_10_IRQHandler+0x7c>
		// Button 3 Initial Press
		btn3flag = 1;
 8005148:	4b60      	ldr	r3, [pc, #384]	; (80052cc <EXTI15_10_IRQHandler+0x1e8>)
 800514a:	2201      	movs	r2, #1
 800514c:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 800514e:	f000 f9a7 	bl	80054a0 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	4b5a      	ldr	r3, [pc, #360]	; (80052c0 <EXTI15_10_IRQHandler+0x1dc>)
 8005156:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 8005158:	4b59      	ldr	r3, [pc, #356]	; (80052c0 <EXTI15_10_IRQHandler+0x1dc>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a59      	ldr	r2, [pc, #356]	; (80052c4 <EXTI15_10_IRQHandler+0x1e0>)
 800515e:	6013      	str	r3, [r2, #0]
	}

	if (btn1flag) {
 8005160:	4b56      	ldr	r3, [pc, #344]	; (80052bc <EXTI15_10_IRQHandler+0x1d8>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00c      	beq.n	8005182 <EXTI15_10_IRQHandler+0x9e>
		if (HAL_GPIO_ReadPin(B_INPUT1_GPIO_Port, B_INPUT1_Pin) == GPIO_PIN_RESET) {
 8005168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800516c:	4852      	ldr	r0, [pc, #328]	; (80052b8 <EXTI15_10_IRQHandler+0x1d4>)
 800516e:	f000 fc7b 	bl	8005a68 <HAL_GPIO_ReadPin>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <EXTI15_10_IRQHandler+0x9e>
			// Button 1 was released
			tickEnd = HAL_GetTick();
 8005178:	f000 f992 	bl	80054a0 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	4b51      	ldr	r3, [pc, #324]	; (80052c4 <EXTI15_10_IRQHandler+0x1e0>)
 8005180:	601a      	str	r2, [r3, #0]
		}
	}
	if (btn2flag) {
 8005182:	4b51      	ldr	r3, [pc, #324]	; (80052c8 <EXTI15_10_IRQHandler+0x1e4>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <EXTI15_10_IRQHandler+0xc0>
		if (HAL_GPIO_ReadPin(B_INPUT2_GPIO_Port, B_INPUT2_Pin) == GPIO_PIN_RESET) {
 800518a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800518e:	484a      	ldr	r0, [pc, #296]	; (80052b8 <EXTI15_10_IRQHandler+0x1d4>)
 8005190:	f000 fc6a 	bl	8005a68 <HAL_GPIO_ReadPin>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d104      	bne.n	80051a4 <EXTI15_10_IRQHandler+0xc0>
			// Button 2 was released
			tickEnd = HAL_GetTick();
 800519a:	f000 f981 	bl	80054a0 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	4b48      	ldr	r3, [pc, #288]	; (80052c4 <EXTI15_10_IRQHandler+0x1e0>)
 80051a2:	601a      	str	r2, [r3, #0]
		}
	}
	if (btn3flag) {
 80051a4:	4b49      	ldr	r3, [pc, #292]	; (80052cc <EXTI15_10_IRQHandler+0x1e8>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00c      	beq.n	80051c6 <EXTI15_10_IRQHandler+0xe2>
		if (HAL_GPIO_ReadPin(B_INPUT3_GPIO_Port, B_INPUT3_Pin) == GPIO_PIN_RESET) {
 80051ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051b0:	4841      	ldr	r0, [pc, #260]	; (80052b8 <EXTI15_10_IRQHandler+0x1d4>)
 80051b2:	f000 fc59 	bl	8005a68 <HAL_GPIO_ReadPin>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <EXTI15_10_IRQHandler+0xe2>
			// Button 3 was released
			tickEnd = HAL_GetTick();
 80051bc:	f000 f970 	bl	80054a0 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b40      	ldr	r3, [pc, #256]	; (80052c4 <EXTI15_10_IRQHandler+0x1e0>)
 80051c4:	601a      	str	r2, [r3, #0]
		}
	}

	// Evaluate Results
	if (tickEnd - tickStart > 0) {
 80051c6:	4b3f      	ldr	r3, [pc, #252]	; (80052c4 <EXTI15_10_IRQHandler+0x1e0>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4b3d      	ldr	r3, [pc, #244]	; (80052c0 <EXTI15_10_IRQHandler+0x1dc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d064      	beq.n	800529c <EXTI15_10_IRQHandler+0x1b8>
		// Avoid 1st event
		if (tickEnd - tickStart <= 1000) {
 80051d2:	4b3c      	ldr	r3, [pc, #240]	; (80052c4 <EXTI15_10_IRQHandler+0x1e0>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4b3a      	ldr	r3, [pc, #232]	; (80052c0 <EXTI15_10_IRQHandler+0x1dc>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051e0:	d829      	bhi.n	8005236 <EXTI15_10_IRQHandler+0x152>
			// Short press
			if (btn1flag) {
 80051e2:	4b36      	ldr	r3, [pc, #216]	; (80052bc <EXTI15_10_IRQHandler+0x1d8>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <EXTI15_10_IRQHandler+0x11a>
				isr_flags |= (isr_flags_t) BTN_1_SH_PRESS;
 80051ea:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <EXTI15_10_IRQHandler+0x1ec>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	f043 0304 	orr.w	r3, r3, #4
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	4b36      	ldr	r3, [pc, #216]	; (80052d0 <EXTI15_10_IRQHandler+0x1ec>)
 80051f6:	701a      	strb	r2, [r3, #0]
				btn1flag = 0;
 80051f8:	4b30      	ldr	r3, [pc, #192]	; (80052bc <EXTI15_10_IRQHandler+0x1d8>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]
			}
			if (btn2flag) {
 80051fe:	4b32      	ldr	r3, [pc, #200]	; (80052c8 <EXTI15_10_IRQHandler+0x1e4>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <EXTI15_10_IRQHandler+0x136>
				isr_flags |= (isr_flags_t) BTN_2_SH_PRESS;
 8005206:	4b32      	ldr	r3, [pc, #200]	; (80052d0 <EXTI15_10_IRQHandler+0x1ec>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	f043 0310 	orr.w	r3, r3, #16
 800520e:	b2da      	uxtb	r2, r3
 8005210:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <EXTI15_10_IRQHandler+0x1ec>)
 8005212:	701a      	strb	r2, [r3, #0]
				btn2flag = 0;
 8005214:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <EXTI15_10_IRQHandler+0x1e4>)
 8005216:	2200      	movs	r2, #0
 8005218:	701a      	strb	r2, [r3, #0]
			}
			if (btn3flag) {
 800521a:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <EXTI15_10_IRQHandler+0x1e8>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <EXTI15_10_IRQHandler+0x152>
				isr_flags |= (isr_flags_t) BTN_3_SH_PRESS;
 8005222:	4b2b      	ldr	r3, [pc, #172]	; (80052d0 <EXTI15_10_IRQHandler+0x1ec>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800522a:	b2da      	uxtb	r2, r3
 800522c:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <EXTI15_10_IRQHandler+0x1ec>)
 800522e:	701a      	strb	r2, [r3, #0]
				btn3flag = 0;
 8005230:	4b26      	ldr	r3, [pc, #152]	; (80052cc <EXTI15_10_IRQHandler+0x1e8>)
 8005232:	2200      	movs	r2, #0
 8005234:	701a      	strb	r2, [r3, #0]
			}
		}

		if (HAL_GetTick() - tickStart > 1000) {
 8005236:	f000 f933 	bl	80054a0 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	4b20      	ldr	r3, [pc, #128]	; (80052c0 <EXTI15_10_IRQHandler+0x1dc>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005246:	d929      	bls.n	800529c <EXTI15_10_IRQHandler+0x1b8>
			// Long press
			if (btn1flag) {
 8005248:	4b1c      	ldr	r3, [pc, #112]	; (80052bc <EXTI15_10_IRQHandler+0x1d8>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d009      	beq.n	8005264 <EXTI15_10_IRQHandler+0x180>
				isr_flags |= (isr_flags_t) BTN_1_LG_PRESS;
 8005250:	4b1f      	ldr	r3, [pc, #124]	; (80052d0 <EXTI15_10_IRQHandler+0x1ec>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	f043 0308 	orr.w	r3, r3, #8
 8005258:	b2da      	uxtb	r2, r3
 800525a:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <EXTI15_10_IRQHandler+0x1ec>)
 800525c:	701a      	strb	r2, [r3, #0]
				btn1flag = 0;
 800525e:	4b17      	ldr	r3, [pc, #92]	; (80052bc <EXTI15_10_IRQHandler+0x1d8>)
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
			}
			if (btn2flag) {
 8005264:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <EXTI15_10_IRQHandler+0x1e4>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <EXTI15_10_IRQHandler+0x19c>
				isr_flags |= (isr_flags_t) BTN_2_LG_PRESS;
 800526c:	4b18      	ldr	r3, [pc, #96]	; (80052d0 <EXTI15_10_IRQHandler+0x1ec>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	f043 0320 	orr.w	r3, r3, #32
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4b16      	ldr	r3, [pc, #88]	; (80052d0 <EXTI15_10_IRQHandler+0x1ec>)
 8005278:	701a      	strb	r2, [r3, #0]
				btn2flag = 0;
 800527a:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <EXTI15_10_IRQHandler+0x1e4>)
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
			}
			if (btn3flag) {
 8005280:	4b12      	ldr	r3, [pc, #72]	; (80052cc <EXTI15_10_IRQHandler+0x1e8>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <EXTI15_10_IRQHandler+0x1b8>
				isr_flags |= (isr_flags_t) BTN_3_LG_PRESS;
 8005288:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <EXTI15_10_IRQHandler+0x1ec>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <EXTI15_10_IRQHandler+0x1ec>)
 8005294:	701a      	strb	r2, [r3, #0]
				btn3flag = 0;
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <EXTI15_10_IRQHandler+0x1e8>)
 8005298:	2200      	movs	r2, #0
 800529a:	701a      	strb	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800529c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80052a0:	f000 fc14 	bl	8005acc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80052a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80052a8:	f000 fc10 	bl	8005acc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80052ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80052b0:	f000 fc0c 	bl	8005acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80052b4:	bf00      	nop
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40020400 	.word	0x40020400
 80052bc:	2000072c 	.word	0x2000072c
 80052c0:	20000730 	.word	0x20000730
 80052c4:	20000734 	.word	0x20000734
 80052c8:	20000738 	.word	0x20000738
 80052cc:	20000739 	.word	0x20000739
 80052d0:	20000eb0 	.word	0x20000eb0

080052d4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80052d8:	4802      	ldr	r0, [pc, #8]	; (80052e4 <SDIO_IRQHandler+0x10>)
 80052da:	f004 f821 	bl	8009320 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80052de:	bf00      	nop
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20001060 	.word	0x20001060

080052e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80052ec:	4802      	ldr	r0, [pc, #8]	; (80052f8 <OTG_FS_IRQHandler+0x10>)
 80052ee:	f001 fb41 	bl	8006974 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80052f2:	bf00      	nop
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	2000244c 	.word	0x2000244c

080052fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005304:	4b11      	ldr	r3, [pc, #68]	; (800534c <_sbrk+0x50>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <_sbrk+0x16>
		heap_end = &end;
 800530c:	4b0f      	ldr	r3, [pc, #60]	; (800534c <_sbrk+0x50>)
 800530e:	4a10      	ldr	r2, [pc, #64]	; (8005350 <_sbrk+0x54>)
 8005310:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005312:	4b0e      	ldr	r3, [pc, #56]	; (800534c <_sbrk+0x50>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005318:	4b0c      	ldr	r3, [pc, #48]	; (800534c <_sbrk+0x50>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4413      	add	r3, r2
 8005320:	466a      	mov	r2, sp
 8005322:	4293      	cmp	r3, r2
 8005324:	d907      	bls.n	8005336 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005326:	f011 fceb 	bl	8016d00 <__errno>
 800532a:	4602      	mov	r2, r0
 800532c:	230c      	movs	r3, #12
 800532e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005330:	f04f 33ff 	mov.w	r3, #4294967295
 8005334:	e006      	b.n	8005344 <_sbrk+0x48>
	}

	heap_end += incr;
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <_sbrk+0x50>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4413      	add	r3, r2
 800533e:	4a03      	ldr	r2, [pc, #12]	; (800534c <_sbrk+0x50>)
 8005340:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005342:	68fb      	ldr	r3, [r7, #12]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	2000073c 	.word	0x2000073c
 8005350:	20002858 	.word	0x20002858

08005354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <SystemInit+0x28>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	4a07      	ldr	r2, [pc, #28]	; (800537c <SystemInit+0x28>)
 8005360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <SystemInit+0x28>)
 800536a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800536e:	609a      	str	r2, [r3, #8]
#endif
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <Reset_Handler>:
 8005380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053b8 <LoopFillZerobss+0x14>
 8005384:	2100      	movs	r1, #0
 8005386:	e003      	b.n	8005390 <LoopCopyDataInit>

08005388 <CopyDataInit>:
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <LoopFillZerobss+0x18>)
 800538a:	585b      	ldr	r3, [r3, r1]
 800538c:	5043      	str	r3, [r0, r1]
 800538e:	3104      	adds	r1, #4

08005390 <LoopCopyDataInit>:
 8005390:	480b      	ldr	r0, [pc, #44]	; (80053c0 <LoopFillZerobss+0x1c>)
 8005392:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <LoopFillZerobss+0x20>)
 8005394:	1842      	adds	r2, r0, r1
 8005396:	429a      	cmp	r2, r3
 8005398:	d3f6      	bcc.n	8005388 <CopyDataInit>
 800539a:	4a0b      	ldr	r2, [pc, #44]	; (80053c8 <LoopFillZerobss+0x24>)
 800539c:	e002      	b.n	80053a4 <LoopFillZerobss>

0800539e <FillZerobss>:
 800539e:	2300      	movs	r3, #0
 80053a0:	f842 3b04 	str.w	r3, [r2], #4

080053a4 <LoopFillZerobss>:
 80053a4:	4b09      	ldr	r3, [pc, #36]	; (80053cc <LoopFillZerobss+0x28>)
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d3f9      	bcc.n	800539e <FillZerobss>
 80053aa:	f7ff ffd3 	bl	8005354 <SystemInit>
 80053ae:	f011 fcad 	bl	8016d0c <__libc_init_array>
 80053b2:	f7ff f9b5 	bl	8004720 <main>
 80053b6:	4770      	bx	lr
 80053b8:	20020000 	.word	0x20020000
 80053bc:	0801b8d8 	.word	0x0801b8d8
 80053c0:	20000000 	.word	0x20000000
 80053c4:	20000238 	.word	0x20000238
 80053c8:	20000238 	.word	0x20000238
 80053cc:	20002858 	.word	0x20002858

080053d0 <ADC_IRQHandler>:
 80053d0:	e7fe      	b.n	80053d0 <ADC_IRQHandler>
	...

080053d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <HAL_Init+0x40>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a0d      	ldr	r2, [pc, #52]	; (8005414 <HAL_Init+0x40>)
 80053de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <HAL_Init+0x40>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <HAL_Init+0x40>)
 80053ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053f0:	4b08      	ldr	r3, [pc, #32]	; (8005414 <HAL_Init+0x40>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a07      	ldr	r2, [pc, #28]	; (8005414 <HAL_Init+0x40>)
 80053f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053fc:	2003      	movs	r0, #3
 80053fe:	f000 f94d 	bl	800569c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005402:	2000      	movs	r0, #0
 8005404:	f000 f808 	bl	8005418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005408:	f7ff fc32 	bl	8004c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40023c00 	.word	0x40023c00

08005418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005420:	4b12      	ldr	r3, [pc, #72]	; (800546c <HAL_InitTick+0x54>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	4b12      	ldr	r3, [pc, #72]	; (8005470 <HAL_InitTick+0x58>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	4619      	mov	r1, r3
 800542a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800542e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005432:	fbb2 f3f3 	udiv	r3, r2, r3
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f965 	bl	8005706 <HAL_SYSTICK_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e00e      	b.n	8005464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b0f      	cmp	r3, #15
 800544a:	d80a      	bhi.n	8005462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800544c:	2200      	movs	r2, #0
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	f000 f92d 	bl	80056b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005458:	4a06      	ldr	r2, [pc, #24]	; (8005474 <HAL_InitTick+0x5c>)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	e000      	b.n	8005464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	2000004c 	.word	0x2000004c
 8005470:	20000054 	.word	0x20000054
 8005474:	20000050 	.word	0x20000050

08005478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800547c:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_IncTick+0x20>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	4b06      	ldr	r3, [pc, #24]	; (800549c <HAL_IncTick+0x24>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4413      	add	r3, r2
 8005488:	4a04      	ldr	r2, [pc, #16]	; (800549c <HAL_IncTick+0x24>)
 800548a:	6013      	str	r3, [r2, #0]
}
 800548c:	bf00      	nop
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000054 	.word	0x20000054
 800549c:	2000113c 	.word	0x2000113c

080054a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  return uwTick;
 80054a4:	4b03      	ldr	r3, [pc, #12]	; (80054b4 <HAL_GetTick+0x14>)
 80054a6:	681b      	ldr	r3, [r3, #0]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	2000113c 	.word	0x2000113c

080054b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054c0:	f7ff ffee 	bl	80054a0 <HAL_GetTick>
 80054c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d005      	beq.n	80054de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054d2:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <HAL_Delay+0x40>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054de:	bf00      	nop
 80054e0:	f7ff ffde 	bl	80054a0 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d8f7      	bhi.n	80054e0 <HAL_Delay+0x28>
  {
  }
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20000054 	.word	0x20000054

080054fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <__NVIC_SetPriorityGrouping+0x44>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005518:	4013      	ands	r3, r2
 800551a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800552e:	4a04      	ldr	r2, [pc, #16]	; (8005540 <__NVIC_SetPriorityGrouping+0x44>)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	60d3      	str	r3, [r2, #12]
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	e000ed00 	.word	0xe000ed00

08005544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005548:	4b04      	ldr	r3, [pc, #16]	; (800555c <__NVIC_GetPriorityGrouping+0x18>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	0a1b      	lsrs	r3, r3, #8
 800554e:	f003 0307 	and.w	r3, r3, #7
}
 8005552:	4618      	mov	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	e000ed00 	.word	0xe000ed00

08005560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800556a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556e:	2b00      	cmp	r3, #0
 8005570:	db0b      	blt.n	800558a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	f003 021f 	and.w	r2, r3, #31
 8005578:	4907      	ldr	r1, [pc, #28]	; (8005598 <__NVIC_EnableIRQ+0x38>)
 800557a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	2001      	movs	r0, #1
 8005582:	fa00 f202 	lsl.w	r2, r0, r2
 8005586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	e000e100 	.word	0xe000e100

0800559c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	6039      	str	r1, [r7, #0]
 80055a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	db0a      	blt.n	80055c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	490c      	ldr	r1, [pc, #48]	; (80055e8 <__NVIC_SetPriority+0x4c>)
 80055b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ba:	0112      	lsls	r2, r2, #4
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	440b      	add	r3, r1
 80055c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055c4:	e00a      	b.n	80055dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	4908      	ldr	r1, [pc, #32]	; (80055ec <__NVIC_SetPriority+0x50>)
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	3b04      	subs	r3, #4
 80055d4:	0112      	lsls	r2, r2, #4
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	440b      	add	r3, r1
 80055da:	761a      	strb	r2, [r3, #24]
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	e000e100 	.word	0xe000e100
 80055ec:	e000ed00 	.word	0xe000ed00

080055f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b089      	sub	sp, #36	; 0x24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f1c3 0307 	rsb	r3, r3, #7
 800560a:	2b04      	cmp	r3, #4
 800560c:	bf28      	it	cs
 800560e:	2304      	movcs	r3, #4
 8005610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	3304      	adds	r3, #4
 8005616:	2b06      	cmp	r3, #6
 8005618:	d902      	bls.n	8005620 <NVIC_EncodePriority+0x30>
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	3b03      	subs	r3, #3
 800561e:	e000      	b.n	8005622 <NVIC_EncodePriority+0x32>
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005624:	f04f 32ff 	mov.w	r2, #4294967295
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	43da      	mvns	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	401a      	ands	r2, r3
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005638:	f04f 31ff 	mov.w	r1, #4294967295
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	fa01 f303 	lsl.w	r3, r1, r3
 8005642:	43d9      	mvns	r1, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005648:	4313      	orrs	r3, r2
         );
}
 800564a:	4618      	mov	r0, r3
 800564c:	3724      	adds	r7, #36	; 0x24
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3b01      	subs	r3, #1
 8005664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005668:	d301      	bcc.n	800566e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800566a:	2301      	movs	r3, #1
 800566c:	e00f      	b.n	800568e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800566e:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <SysTick_Config+0x40>)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3b01      	subs	r3, #1
 8005674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005676:	210f      	movs	r1, #15
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	f7ff ff8e 	bl	800559c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <SysTick_Config+0x40>)
 8005682:	2200      	movs	r2, #0
 8005684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005686:	4b04      	ldr	r3, [pc, #16]	; (8005698 <SysTick_Config+0x40>)
 8005688:	2207      	movs	r2, #7
 800568a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	e000e010 	.word	0xe000e010

0800569c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff ff29 	bl	80054fc <__NVIC_SetPriorityGrouping>
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b086      	sub	sp, #24
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	4603      	mov	r3, r0
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056c4:	f7ff ff3e 	bl	8005544 <__NVIC_GetPriorityGrouping>
 80056c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	6978      	ldr	r0, [r7, #20]
 80056d0:	f7ff ff8e 	bl	80055f0 <NVIC_EncodePriority>
 80056d4:	4602      	mov	r2, r0
 80056d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056da:	4611      	mov	r1, r2
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff ff5d 	bl	800559c <__NVIC_SetPriority>
}
 80056e2:	bf00      	nop
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	4603      	mov	r3, r0
 80056f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff ff31 	bl	8005560 <__NVIC_EnableIRQ>
}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff ffa2 	bl	8005658 <SysTick_Config>
 8005714:	4603      	mov	r3, r0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d004      	beq.n	800573c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2280      	movs	r2, #128	; 0x80
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e00c      	b.n	8005756 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2205      	movs	r2, #5
 8005740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
	...

08005764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	; 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005776:	2300      	movs	r3, #0
 8005778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e159      	b.n	8005a34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005780:	2201      	movs	r2, #1
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4013      	ands	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	429a      	cmp	r2, r3
 800579a:	f040 8148 	bne.w	8005a2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d00b      	beq.n	80057be <HAL_GPIO_Init+0x5a>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d007      	beq.n	80057be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057b2:	2b11      	cmp	r3, #17
 80057b4:	d003      	beq.n	80057be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b12      	cmp	r3, #18
 80057bc:	d130      	bne.n	8005820 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	2203      	movs	r2, #3
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	43db      	mvns	r3, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	4013      	ands	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057f4:	2201      	movs	r2, #1
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	43db      	mvns	r3, r3
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	4013      	ands	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	091b      	lsrs	r3, r3, #4
 800580a:	f003 0201 	and.w	r2, r3, #1
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4313      	orrs	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	2203      	movs	r2, #3
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	4013      	ands	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4313      	orrs	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d003      	beq.n	8005860 <HAL_GPIO_Init+0xfc>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b12      	cmp	r3, #18
 800585e:	d123      	bne.n	80058a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	08da      	lsrs	r2, r3, #3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3208      	adds	r2, #8
 8005868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	220f      	movs	r2, #15
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	08da      	lsrs	r2, r3, #3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3208      	adds	r2, #8
 80058a2:	69b9      	ldr	r1, [r7, #24]
 80058a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	2203      	movs	r2, #3
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f003 0203 	and.w	r2, r3, #3
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80a2 	beq.w	8005a2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	4b56      	ldr	r3, [pc, #344]	; (8005a48 <HAL_GPIO_Init+0x2e4>)
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	4a55      	ldr	r2, [pc, #340]	; (8005a48 <HAL_GPIO_Init+0x2e4>)
 80058f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058f8:	6453      	str	r3, [r2, #68]	; 0x44
 80058fa:	4b53      	ldr	r3, [pc, #332]	; (8005a48 <HAL_GPIO_Init+0x2e4>)
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005906:	4a51      	ldr	r2, [pc, #324]	; (8005a4c <HAL_GPIO_Init+0x2e8>)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	089b      	lsrs	r3, r3, #2
 800590c:	3302      	adds	r3, #2
 800590e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	220f      	movs	r2, #15
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4013      	ands	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a48      	ldr	r2, [pc, #288]	; (8005a50 <HAL_GPIO_Init+0x2ec>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d019      	beq.n	8005966 <HAL_GPIO_Init+0x202>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a47      	ldr	r2, [pc, #284]	; (8005a54 <HAL_GPIO_Init+0x2f0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_GPIO_Init+0x1fe>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a46      	ldr	r2, [pc, #280]	; (8005a58 <HAL_GPIO_Init+0x2f4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00d      	beq.n	800595e <HAL_GPIO_Init+0x1fa>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a45      	ldr	r2, [pc, #276]	; (8005a5c <HAL_GPIO_Init+0x2f8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <HAL_GPIO_Init+0x1f6>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a44      	ldr	r2, [pc, #272]	; (8005a60 <HAL_GPIO_Init+0x2fc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d101      	bne.n	8005956 <HAL_GPIO_Init+0x1f2>
 8005952:	2304      	movs	r3, #4
 8005954:	e008      	b.n	8005968 <HAL_GPIO_Init+0x204>
 8005956:	2307      	movs	r3, #7
 8005958:	e006      	b.n	8005968 <HAL_GPIO_Init+0x204>
 800595a:	2303      	movs	r3, #3
 800595c:	e004      	b.n	8005968 <HAL_GPIO_Init+0x204>
 800595e:	2302      	movs	r3, #2
 8005960:	e002      	b.n	8005968 <HAL_GPIO_Init+0x204>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <HAL_GPIO_Init+0x204>
 8005966:	2300      	movs	r3, #0
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	f002 0203 	and.w	r2, r2, #3
 800596e:	0092      	lsls	r2, r2, #2
 8005970:	4093      	lsls	r3, r2
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4313      	orrs	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005978:	4934      	ldr	r1, [pc, #208]	; (8005a4c <HAL_GPIO_Init+0x2e8>)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	089b      	lsrs	r3, r3, #2
 800597e:	3302      	adds	r3, #2
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005986:	4b37      	ldr	r3, [pc, #220]	; (8005a64 <HAL_GPIO_Init+0x300>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	43db      	mvns	r3, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4013      	ands	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059aa:	4a2e      	ldr	r2, [pc, #184]	; (8005a64 <HAL_GPIO_Init+0x300>)
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80059b0:	4b2c      	ldr	r3, [pc, #176]	; (8005a64 <HAL_GPIO_Init+0x300>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	43db      	mvns	r3, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4013      	ands	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059d4:	4a23      	ldr	r2, [pc, #140]	; (8005a64 <HAL_GPIO_Init+0x300>)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059da:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <HAL_GPIO_Init+0x300>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	43db      	mvns	r3, r3
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	4013      	ands	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059fe:	4a19      	ldr	r2, [pc, #100]	; (8005a64 <HAL_GPIO_Init+0x300>)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a04:	4b17      	ldr	r3, [pc, #92]	; (8005a64 <HAL_GPIO_Init+0x300>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a28:	4a0e      	ldr	r2, [pc, #56]	; (8005a64 <HAL_GPIO_Init+0x300>)
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3301      	adds	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	f67f aea2 	bls.w	8005780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	3724      	adds	r7, #36	; 0x24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	40013800 	.word	0x40013800
 8005a50:	40020000 	.word	0x40020000
 8005a54:	40020400 	.word	0x40020400
 8005a58:	40020800 	.word	0x40020800
 8005a5c:	40020c00 	.word	0x40020c00
 8005a60:	40021000 	.word	0x40021000
 8005a64:	40013c00 	.word	0x40013c00

08005a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	887b      	ldrh	r3, [r7, #2]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a80:	2301      	movs	r3, #1
 8005a82:	73fb      	strb	r3, [r7, #15]
 8005a84:	e001      	b.n	8005a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	807b      	strh	r3, [r7, #2]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005aa8:	787b      	ldrb	r3, [r7, #1]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005aae:	887a      	ldrh	r2, [r7, #2]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ab4:	e003      	b.n	8005abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ab6:	887b      	ldrh	r3, [r7, #2]
 8005ab8:	041a      	lsls	r2, r3, #16
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	619a      	str	r2, [r3, #24]
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
	...

08005acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ad6:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d006      	beq.n	8005af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ae2:	4a05      	ldr	r2, [pc, #20]	; (8005af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ae4:	88fb      	ldrh	r3, [r7, #6]
 8005ae6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ae8:	88fb      	ldrh	r3, [r7, #6]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f806 	bl	8005afc <HAL_GPIO_EXTI_Callback>
  }
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40013c00 	.word	0x40013c00

08005afc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e11f      	b.n	8005d66 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff f8c0 	bl	8004cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2224      	movs	r2, #36	; 0x24
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0201 	bic.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b78:	f002 fb70 	bl	800825c <HAL_RCC_GetPCLK1Freq>
 8005b7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4a7b      	ldr	r2, [pc, #492]	; (8005d70 <HAL_I2C_Init+0x25c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d807      	bhi.n	8005b98 <HAL_I2C_Init+0x84>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4a7a      	ldr	r2, [pc, #488]	; (8005d74 <HAL_I2C_Init+0x260>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	bf94      	ite	ls
 8005b90:	2301      	movls	r3, #1
 8005b92:	2300      	movhi	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	e006      	b.n	8005ba6 <HAL_I2C_Init+0x92>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4a77      	ldr	r2, [pc, #476]	; (8005d78 <HAL_I2C_Init+0x264>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	bf94      	ite	ls
 8005ba0:	2301      	movls	r3, #1
 8005ba2:	2300      	movhi	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e0db      	b.n	8005d66 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4a72      	ldr	r2, [pc, #456]	; (8005d7c <HAL_I2C_Init+0x268>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	0c9b      	lsrs	r3, r3, #18
 8005bb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	4a64      	ldr	r2, [pc, #400]	; (8005d70 <HAL_I2C_Init+0x25c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d802      	bhi.n	8005be8 <HAL_I2C_Init+0xd4>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	3301      	adds	r3, #1
 8005be6:	e009      	b.n	8005bfc <HAL_I2C_Init+0xe8>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	4a63      	ldr	r2, [pc, #396]	; (8005d80 <HAL_I2C_Init+0x26c>)
 8005bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf8:	099b      	lsrs	r3, r3, #6
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	430b      	orrs	r3, r1
 8005c02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4956      	ldr	r1, [pc, #344]	; (8005d70 <HAL_I2C_Init+0x25c>)
 8005c18:	428b      	cmp	r3, r1
 8005c1a:	d80d      	bhi.n	8005c38 <HAL_I2C_Init+0x124>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1e59      	subs	r1, r3, #1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	bf38      	it	cc
 8005c34:	2304      	movcc	r3, #4
 8005c36:	e04f      	b.n	8005cd8 <HAL_I2C_Init+0x1c4>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d111      	bne.n	8005c64 <HAL_I2C_Init+0x150>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	1e58      	subs	r0, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6859      	ldr	r1, [r3, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	440b      	add	r3, r1
 8005c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c52:	3301      	adds	r3, #1
 8005c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	e012      	b.n	8005c8a <HAL_I2C_Init+0x176>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	1e58      	subs	r0, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6859      	ldr	r1, [r3, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	0099      	lsls	r1, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_I2C_Init+0x17e>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e022      	b.n	8005cd8 <HAL_I2C_Init+0x1c4>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10e      	bne.n	8005cb8 <HAL_I2C_Init+0x1a4>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1e58      	subs	r0, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6859      	ldr	r1, [r3, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	440b      	add	r3, r1
 8005ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cac:	3301      	adds	r3, #1
 8005cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb6:	e00f      	b.n	8005cd8 <HAL_I2C_Init+0x1c4>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1e58      	subs	r0, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6859      	ldr	r1, [r3, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	0099      	lsls	r1, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	6809      	ldr	r1, [r1, #0]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69da      	ldr	r2, [r3, #28]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6911      	ldr	r1, [r2, #16]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	68d2      	ldr	r2, [r2, #12]
 8005d12:	4311      	orrs	r1, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	000186a0 	.word	0x000186a0
 8005d74:	001e847f 	.word	0x001e847f
 8005d78:	003d08ff 	.word	0x003d08ff
 8005d7c:	431bde83 	.word	0x431bde83
 8005d80:	10624dd3 	.word	0x10624dd3

08005d84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08c      	sub	sp, #48	; 0x30
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	461a      	mov	r2, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	817b      	strh	r3, [r7, #10]
 8005d96:	460b      	mov	r3, r1
 8005d98:	813b      	strh	r3, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d9e:	f7ff fb7f 	bl	80054a0 <HAL_GetTick>
 8005da2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	f040 8208 	bne.w	80061c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	2319      	movs	r3, #25
 8005db8:	2201      	movs	r2, #1
 8005dba:	497b      	ldr	r1, [pc, #492]	; (8005fa8 <HAL_I2C_Mem_Read+0x224>)
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 faed 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e1fb      	b.n	80061c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_I2C_Mem_Read+0x56>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e1f4      	b.n	80061c4 <HAL_I2C_Mem_Read+0x440>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d007      	beq.n	8005e00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2222      	movs	r2, #34	; 0x22
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2240      	movs	r2, #64	; 0x40
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4a5b      	ldr	r2, [pc, #364]	; (8005fac <HAL_I2C_Mem_Read+0x228>)
 8005e40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e42:	88f8      	ldrh	r0, [r7, #6]
 8005e44:	893a      	ldrh	r2, [r7, #8]
 8005e46:	8979      	ldrh	r1, [r7, #10]
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	4603      	mov	r3, r0
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f9bc 	bl	80061d0 <I2C_RequestMemoryRead>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e1b0      	b.n	80061c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d113      	bne.n	8005e92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	623b      	str	r3, [r7, #32]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	623b      	str	r3, [r7, #32]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	623b      	str	r3, [r7, #32]
 8005e7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e184      	b.n	800619c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d11b      	bne.n	8005ed2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ea8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	e164      	b.n	800619c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d11b      	bne.n	8005f12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ef8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005efa:	2300      	movs	r3, #0
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	61bb      	str	r3, [r7, #24]
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	e144      	b.n	800619c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f12:	2300      	movs	r3, #0
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f28:	e138      	b.n	800619c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	f200 80f1 	bhi.w	8006116 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d123      	bne.n	8005f84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 fb42 	bl	80065ca <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e139      	b.n	80061c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f82:	e10b      	b.n	800619c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d14e      	bne.n	800602a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	2200      	movs	r2, #0
 8005f94:	4906      	ldr	r1, [pc, #24]	; (8005fb0 <HAL_I2C_Mem_Read+0x22c>)
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fa00 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e10e      	b.n	80061c4 <HAL_I2C_Mem_Read+0x440>
 8005fa6:	bf00      	nop
 8005fa8:	00100002 	.word	0x00100002
 8005fac:	ffff0000 	.word	0xffff0000
 8005fb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006028:	e0b8      	b.n	800619c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	2200      	movs	r2, #0
 8006032:	4966      	ldr	r1, [pc, #408]	; (80061cc <HAL_I2C_Mem_Read+0x448>)
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f9b1 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e0bf      	b.n	80061c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607c:	b29b      	uxth	r3, r3
 800607e:	3b01      	subs	r3, #1
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	2200      	movs	r2, #0
 800608e:	494f      	ldr	r1, [pc, #316]	; (80061cc <HAL_I2C_Mem_Read+0x448>)
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f983 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e091      	b.n	80061c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006114:	e042      	b.n	800619c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006118:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 fa55 	bl	80065ca <I2C_WaitOnRXNEFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e04c      	b.n	80061c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b04      	cmp	r3, #4
 8006168:	d118      	bne.n	800619c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f47f aec2 	bne.w	8005f2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e000      	b.n	80061c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80061c2:	2302      	movs	r3, #2
  }
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3728      	adds	r7, #40	; 0x28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	00010004 	.word	0x00010004

080061d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	4608      	mov	r0, r1
 80061da:	4611      	mov	r1, r2
 80061dc:	461a      	mov	r2, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	817b      	strh	r3, [r7, #10]
 80061e2:	460b      	mov	r3, r1
 80061e4:	813b      	strh	r3, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006208:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	2200      	movs	r2, #0
 8006212:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 f8c0 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00c      	beq.n	800623c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006236:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e0a9      	b.n	8006390 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800623c:	897b      	ldrh	r3, [r7, #10]
 800623e:	b2db      	uxtb	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800624a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	6a3a      	ldr	r2, [r7, #32]
 8006250:	4951      	ldr	r1, [pc, #324]	; (8006398 <I2C_RequestMemoryRead+0x1c8>)
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f8f9 	bl	800644a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e096      	b.n	8006390 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627a:	6a39      	ldr	r1, [r7, #32]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f963 	bl	8006548 <I2C_WaitOnTXEFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00d      	beq.n	80062a4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	2b04      	cmp	r3, #4
 800628e:	d107      	bne.n	80062a0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e075      	b.n	8006390 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d105      	bne.n	80062b6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062aa:	893b      	ldrh	r3, [r7, #8]
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	611a      	str	r2, [r3, #16]
 80062b4:	e021      	b.n	80062fa <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062b6:	893b      	ldrh	r3, [r7, #8]
 80062b8:	0a1b      	lsrs	r3, r3, #8
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c6:	6a39      	ldr	r1, [r7, #32]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f93d 	bl	8006548 <I2C_WaitOnTXEFlagUntilTimeout>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00d      	beq.n	80062f0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d107      	bne.n	80062ec <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e04f      	b.n	8006390 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062f0:	893b      	ldrh	r3, [r7, #8]
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fc:	6a39      	ldr	r1, [r7, #32]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f922 	bl	8006548 <I2C_WaitOnTXEFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00d      	beq.n	8006326 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	2b04      	cmp	r3, #4
 8006310:	d107      	bne.n	8006322 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006320:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e034      	b.n	8006390 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006334:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	2200      	movs	r2, #0
 800633e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f82a 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00c      	beq.n	8006368 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006362:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e013      	b.n	8006390 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006368:	897b      	ldrh	r3, [r7, #10]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f043 0301 	orr.w	r3, r3, #1
 8006370:	b2da      	uxtb	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	6a3a      	ldr	r2, [r7, #32]
 800637c:	4906      	ldr	r1, [pc, #24]	; (8006398 <I2C_RequestMemoryRead+0x1c8>)
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 f863 	bl	800644a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	00010002 	.word	0x00010002

0800639c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063ac:	e025      	b.n	80063fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d021      	beq.n	80063fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b6:	f7ff f873 	bl	80054a0 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d302      	bcc.n	80063cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d116      	bne.n	80063fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	f043 0220 	orr.w	r2, r3, #32
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e023      	b.n	8006442 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	0c1b      	lsrs	r3, r3, #16
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	d10d      	bne.n	8006420 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	43da      	mvns	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4013      	ands	r3, r2
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	bf0c      	ite	eq
 8006416:	2301      	moveq	r3, #1
 8006418:	2300      	movne	r3, #0
 800641a:	b2db      	uxtb	r3, r3
 800641c:	461a      	mov	r2, r3
 800641e:	e00c      	b.n	800643a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	43da      	mvns	r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4013      	ands	r3, r2
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	bf0c      	ite	eq
 8006432:	2301      	moveq	r3, #1
 8006434:	2300      	movne	r3, #0
 8006436:	b2db      	uxtb	r3, r3
 8006438:	461a      	mov	r2, r3
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	429a      	cmp	r2, r3
 800643e:	d0b6      	beq.n	80063ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	60f8      	str	r0, [r7, #12]
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	607a      	str	r2, [r7, #4]
 8006456:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006458:	e051      	b.n	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006468:	d123      	bne.n	80064b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006478:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006482:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	f043 0204 	orr.w	r2, r3, #4
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e046      	b.n	8006540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d021      	beq.n	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ba:	f7fe fff1 	bl	80054a0 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d302      	bcc.n	80064d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d116      	bne.n	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2220      	movs	r2, #32
 80064da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	f043 0220 	orr.w	r2, r3, #32
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e020      	b.n	8006540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	d10c      	bne.n	8006522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	43da      	mvns	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4013      	ands	r3, r2
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	bf14      	ite	ne
 800651a:	2301      	movne	r3, #1
 800651c:	2300      	moveq	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	e00b      	b.n	800653a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	43da      	mvns	r2, r3
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4013      	ands	r3, r2
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	bf14      	ite	ne
 8006534:	2301      	movne	r3, #1
 8006536:	2300      	moveq	r3, #0
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d18d      	bne.n	800645a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006554:	e02d      	b.n	80065b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 f88d 	bl	8006676 <I2C_IsAcknowledgeFailed>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e02d      	b.n	80065c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656c:	d021      	beq.n	80065b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800656e:	f7fe ff97 	bl	80054a0 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	429a      	cmp	r2, r3
 800657c:	d302      	bcc.n	8006584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d116      	bne.n	80065b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f043 0220 	orr.w	r2, r3, #32
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e007      	b.n	80065c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065bc:	2b80      	cmp	r3, #128	; 0x80
 80065be:	d1ca      	bne.n	8006556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065d6:	e042      	b.n	800665e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	f003 0310 	and.w	r3, r3, #16
 80065e2:	2b10      	cmp	r3, #16
 80065e4:	d119      	bne.n	800661a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f06f 0210 	mvn.w	r2, #16
 80065ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e029      	b.n	800666e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661a:	f7fe ff41 	bl	80054a0 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	429a      	cmp	r2, r3
 8006628:	d302      	bcc.n	8006630 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d116      	bne.n	800665e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	f043 0220 	orr.w	r2, r3, #32
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e007      	b.n	800666e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	d1b5      	bne.n	80065d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668c:	d11b      	bne.n	80066c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006696:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	f043 0204 	orr.w	r2, r3, #4
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80066d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066d6:	b08f      	sub	sp, #60	; 0x3c
 80066d8:	af0a      	add	r7, sp, #40	; 0x28
 80066da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e10f      	b.n	8006906 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d106      	bne.n	8006706 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f00f ffef 	bl	80166e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2203      	movs	r2, #3
 800670a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4618      	mov	r0, r3
 8006726:	f004 ff4e 	bl	800b5c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	687e      	ldr	r6, [r7, #4]
 8006732:	466d      	mov	r5, sp
 8006734:	f106 0410 	add.w	r4, r6, #16
 8006738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800673a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800673c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800673e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006740:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006744:	e885 0003 	stmia.w	r5, {r0, r1}
 8006748:	1d33      	adds	r3, r6, #4
 800674a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800674c:	6838      	ldr	r0, [r7, #0]
 800674e:	f004 fe25 	bl	800b39c <USB_CoreInit>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e0d0      	b.n	8006906 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2100      	movs	r1, #0
 800676a:	4618      	mov	r0, r3
 800676c:	f004 ff3c 	bl	800b5e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006770:	2300      	movs	r3, #0
 8006772:	73fb      	strb	r3, [r7, #15]
 8006774:	e04a      	b.n	800680c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006776:	7bfa      	ldrb	r2, [r7, #15]
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	1a9b      	subs	r3, r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	333d      	adds	r3, #61	; 0x3d
 8006786:	2201      	movs	r2, #1
 8006788:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800678a:	7bfa      	ldrb	r2, [r7, #15]
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4613      	mov	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	1a9b      	subs	r3, r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	333c      	adds	r3, #60	; 0x3c
 800679a:	7bfa      	ldrb	r2, [r7, #15]
 800679c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800679e:	7bfa      	ldrb	r2, [r7, #15]
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	b298      	uxth	r0, r3
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	3342      	adds	r3, #66	; 0x42
 80067b2:	4602      	mov	r2, r0
 80067b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80067b6:	7bfa      	ldrb	r2, [r7, #15]
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	1a9b      	subs	r3, r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	333f      	adds	r3, #63	; 0x3f
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80067ca:	7bfa      	ldrb	r2, [r7, #15]
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	4613      	mov	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	440b      	add	r3, r1
 80067d8:	3344      	adds	r3, #68	; 0x44
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80067de:	7bfa      	ldrb	r2, [r7, #15]
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	1a9b      	subs	r3, r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	440b      	add	r3, r1
 80067ec:	3348      	adds	r3, #72	; 0x48
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067f2:	7bfa      	ldrb	r2, [r7, #15]
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	4613      	mov	r3, r2
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	440b      	add	r3, r1
 8006800:	3350      	adds	r3, #80	; 0x50
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	3301      	adds	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
 800680c:	7bfa      	ldrb	r2, [r7, #15]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	429a      	cmp	r2, r3
 8006814:	d3af      	bcc.n	8006776 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]
 800681a:	e044      	b.n	80068a6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800681c:	7bfa      	ldrb	r2, [r7, #15]
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800682e:	2200      	movs	r2, #0
 8006830:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006832:	7bfa      	ldrb	r2, [r7, #15]
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006844:	7bfa      	ldrb	r2, [r7, #15]
 8006846:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006848:	7bfa      	ldrb	r2, [r7, #15]
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800685e:	7bfa      	ldrb	r2, [r7, #15]
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006874:	7bfa      	ldrb	r2, [r7, #15]
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800688a:	7bfa      	ldrb	r2, [r7, #15]
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	00db      	lsls	r3, r3, #3
 8006892:	1a9b      	subs	r3, r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	440b      	add	r3, r1
 8006898:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	3301      	adds	r3, #1
 80068a4:	73fb      	strb	r3, [r7, #15]
 80068a6:	7bfa      	ldrb	r2, [r7, #15]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d3b5      	bcc.n	800681c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	687e      	ldr	r6, [r7, #4]
 80068b8:	466d      	mov	r5, sp
 80068ba:	f106 0410 	add.w	r4, r6, #16
 80068be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80068ce:	1d33      	adds	r3, r6, #4
 80068d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068d2:	6838      	ldr	r0, [r7, #0]
 80068d4:	f004 feb2 	bl	800b63c <USB_DevInit>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e00d      	b.n	8006906 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f005 fea7 	bl	800c652 <USB_DevDisconnect>

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800690e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_PCD_Start+0x1c>
 8006926:	2302      	movs	r3, #2
 8006928:	e020      	b.n	800696c <HAL_PCD_Start+0x5e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	2b01      	cmp	r3, #1
 8006938:	d109      	bne.n	800694e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800693e:	2b01      	cmp	r3, #1
 8006940:	d005      	beq.n	800694e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f005 fe65 	bl	800c622 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4618      	mov	r0, r3
 800695e:	f004 fe21 	bl	800b5a4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006974:	b590      	push	{r4, r7, lr}
 8006976:	b08d      	sub	sp, #52	; 0x34
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f005 ff0c 	bl	800c7a8 <USB_GetMode>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	f040 838e 	bne.w	80070b4 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4618      	mov	r0, r3
 800699e:	f005 fe70 	bl	800c682 <USB_ReadInterrupts>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8384 	beq.w	80070b2 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f005 fe67 	bl	800c682 <USB_ReadInterrupts>
 80069b4:	4603      	mov	r3, r0
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d107      	bne.n	80069ce <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	695a      	ldr	r2, [r3, #20]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f002 0202 	and.w	r2, r2, #2
 80069cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f005 fe55 	bl	800c682 <USB_ReadInterrupts>
 80069d8:	4603      	mov	r3, r0
 80069da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069e2:	d17b      	bne.n	8006adc <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f005 fe5b 	bl	800c6a8 <USB_ReadDevAllOutEpInterrupt>
 80069f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80069f4:	e06f      	b.n	8006ad6 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d064      	beq.n	8006aca <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	4611      	mov	r1, r2
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f005 fe80 	bl	800c710 <USB_ReadDevOutEPInterrupt>
 8006a10:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00c      	beq.n	8006a36 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a28:	461a      	mov	r2, r3
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006a2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fe0d 	bl	8007650 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	f003 0308 	and.w	r3, r3, #8
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00c      	beq.n	8006a5a <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 ff0c 	bl	8007860 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a54:	461a      	mov	r2, r3
 8006a56:	2308      	movs	r3, #8
 8006a58:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a70:	461a      	mov	r2, r3
 8006a72:	2310      	movs	r3, #16
 8006a74:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d015      	beq.n	8006aac <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d108      	bne.n	8006a9a <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a92:	461a      	mov	r2, r3
 8006a94:	2101      	movs	r1, #1
 8006a96:	f005 fecb 	bl	800c830 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	2320      	movs	r3, #32
 8006aaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d009      	beq.n	8006aca <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ac8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	3301      	adds	r3, #1
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	085b      	lsrs	r3, r3, #1
 8006ad4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d18c      	bne.n	80069f6 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f005 fdce 	bl	800c682 <USB_ReadInterrupts>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006af0:	f040 80c4 	bne.w	8006c7c <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f005 fdef 	bl	800c6dc <USB_ReadDevAllInEpInterrupt>
 8006afe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006b04:	e0b6      	b.n	8006c74 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80ab 	beq.w	8006c68 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f005 fe15 	bl	800c74c <USB_ReadDevInEPInterrupt>
 8006b22:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d05b      	beq.n	8006be6 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	f003 030f 	and.w	r3, r3, #15
 8006b34:	2201      	movs	r2, #1
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	43db      	mvns	r3, r3
 8006b48:	69f9      	ldr	r1, [r7, #28]
 8006b4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b4e:	4013      	ands	r3, r2
 8006b50:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5e:	461a      	mov	r2, r3
 8006b60:	2301      	movs	r3, #1
 8006b62:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d11b      	bne.n	8006ba4 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b70:	4613      	mov	r3, r2
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	1a9b      	subs	r3, r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	440b      	add	r3, r1
 8006b7a:	3348      	adds	r3, #72	; 0x48
 8006b7c:	6819      	ldr	r1, [r3, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b82:	4613      	mov	r3, r2
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	1a9b      	subs	r3, r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4403      	add	r3, r0
 8006b8c:	3344      	adds	r3, #68	; 0x44
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4419      	add	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b96:	4613      	mov	r3, r2
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4403      	add	r3, r0
 8006ba0:	3348      	adds	r3, #72	; 0x48
 8006ba2:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f00f fe33 	bl	8016816 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d116      	bne.n	8006be6 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d113      	bne.n	8006be6 <HAL_PCD_IRQHandler+0x272>
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	3350      	adds	r3, #80	; 0x50
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d108      	bne.n	8006be6 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6818      	ldr	r0, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006bde:	461a      	mov	r2, r3
 8006be0:	2101      	movs	r1, #1
 8006be2:	f005 fe25 	bl	800c830 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	f003 0308 	and.w	r3, r3, #8
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	2308      	movs	r3, #8
 8006c00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	f003 0310 	and.w	r3, r3, #16
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d008      	beq.n	8006c1e <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c18:	461a      	mov	r2, r3
 8006c1a:	2310      	movs	r3, #16
 8006c1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	461a      	mov	r2, r3
 8006c36:	2340      	movs	r3, #64	; 0x40
 8006c38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d008      	beq.n	8006c56 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	461a      	mov	r2, r3
 8006c52:	2302      	movs	r3, #2
 8006c54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006c60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fc67 	bl	8007536 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f47f af45 	bne.w	8006b06 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f005 fcfe 	bl	800c682 <USB_ReadInterrupts>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c90:	d122      	bne.n	8006cd8 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ca0:	f023 0301 	bic.w	r3, r3, #1
 8006ca4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d108      	bne.n	8006cc2 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006cb8:	2100      	movs	r1, #0
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fe88 	bl	80079d0 <HAL_PCDEx_LPM_Callback>
 8006cc0:	e002      	b.n	8006cc8 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f00f fe14 	bl	80168f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695a      	ldr	r2, [r3, #20]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f005 fcd0 	bl	800c682 <USB_ReadInterrupts>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cec:	d112      	bne.n	8006d14 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d102      	bne.n	8006d04 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f00f fdd0 	bl	80168a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695a      	ldr	r2, [r3, #20]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006d12:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f005 fcb2 	bl	800c682 <USB_ReadInterrupts>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d28:	f040 80a7 	bne.w	8006e7a <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2110      	movs	r1, #16
 8006d46:	4618      	mov	r0, r3
 8006d48:	f004 fdea 	bl	800b920 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d50:	e036      	b.n	8006dc0 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d64:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	69fa      	ldr	r2, [r7, #28]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d92:	461a      	mov	r2, r3
 8006d94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d98:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006db8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d3c3      	bcc.n	8006d52 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dd8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006ddc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d016      	beq.n	8006e14 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df6:	f043 030b 	orr.w	r3, r3, #11
 8006dfa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e0c:	f043 030b 	orr.w	r3, r3, #11
 8006e10:	6453      	str	r3, [r2, #68]	; 0x44
 8006e12:	e015      	b.n	8006e40 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e26:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006e2a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e3a:	f043 030b 	orr.w	r3, r3, #11
 8006e3e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e52:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e64:	461a      	mov	r2, r3
 8006e66:	f005 fce3 	bl	800c830 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695a      	ldr	r2, [r3, #20]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f005 fbff 	bl	800c682 <USB_ReadInterrupts>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e8e:	d124      	bne.n	8006eda <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f005 fc95 	bl	800c7c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f004 fd9f 	bl	800b9e2 <USB_GetDevSpeed>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681c      	ldr	r4, [r3, #0]
 8006eb0:	f001 f9c8 	bl	8008244 <HAL_RCC_GetHCLKFreq>
 8006eb4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f004 face 	bl	800b460 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f00f fcce 	bl	8016866 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	695a      	ldr	r2, [r3, #20]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f005 fbcf 	bl	800c682 <USB_ReadInterrupts>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f003 0310 	and.w	r3, r3, #16
 8006eea:	2b10      	cmp	r3, #16
 8006eec:	d161      	bne.n	8006fb2 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0210 	bic.w	r2, r2, #16
 8006efc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f003 020f 	and.w	r2, r3, #15
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	1a9b      	subs	r3, r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4413      	add	r3, r2
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	0c5b      	lsrs	r3, r3, #17
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d124      	bne.n	8006f74 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006f30:	4013      	ands	r3, r2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d035      	beq.n	8006fa2 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	091b      	lsrs	r3, r3, #4
 8006f3e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	461a      	mov	r2, r3
 8006f48:	6a38      	ldr	r0, [r7, #32]
 8006f4a:	f005 fa47 	bl	800c3dc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	091b      	lsrs	r3, r3, #4
 8006f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f5a:	441a      	add	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	699a      	ldr	r2, [r3, #24]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	091b      	lsrs	r3, r3, #4
 8006f68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f6c:	441a      	add	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	619a      	str	r2, [r3, #24]
 8006f72:	e016      	b.n	8006fa2 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	0c5b      	lsrs	r3, r3, #17
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	2b06      	cmp	r3, #6
 8006f7e:	d110      	bne.n	8006fa2 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f86:	2208      	movs	r2, #8
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6a38      	ldr	r0, [r7, #32]
 8006f8c:	f005 fa26 	bl	800c3dc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	091b      	lsrs	r3, r3, #4
 8006f98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f9c:	441a      	add	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	699a      	ldr	r2, [r3, #24]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0210 	orr.w	r2, r2, #16
 8006fb0:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f005 fb63 	bl	800c682 <USB_ReadInterrupts>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d10a      	bne.n	8006fdc <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f00f fc3f 	bl	801684a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f002 0208 	and.w	r2, r2, #8
 8006fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f005 fb4e 	bl	800c682 <USB_ReadInterrupts>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff0:	d10f      	bne.n	8007012 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f00f fc97 	bl	8016930 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695a      	ldr	r2, [r3, #20]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f005 fb33 	bl	800c682 <USB_ReadInterrupts>
 800701c:	4603      	mov	r3, r0
 800701e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007022:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007026:	d10f      	bne.n	8007048 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	b2db      	uxtb	r3, r3
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f00f fc6a 	bl	801690c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695a      	ldr	r2, [r3, #20]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f005 fb18 	bl	800c682 <USB_ReadInterrupts>
 8007052:	4603      	mov	r3, r0
 8007054:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705c:	d10a      	bne.n	8007074 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f00f fc78 	bl	8016954 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695a      	ldr	r2, [r3, #20]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4618      	mov	r0, r3
 800707a:	f005 fb02 	bl	800c682 <USB_ReadInterrupts>
 800707e:	4603      	mov	r3, r0
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b04      	cmp	r3, #4
 8007086:	d115      	bne.n	80070b4 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f00f fc68 	bl	8016970 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6859      	ldr	r1, [r3, #4]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	605a      	str	r2, [r3, #4]
 80070b0:	e000      	b.n	80070b4 <HAL_PCD_IRQHandler+0x740>
      return;
 80070b2:	bf00      	nop
    }
  }
}
 80070b4:	3734      	adds	r7, #52	; 0x34
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd90      	pop	{r4, r7, pc}

080070ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_PCD_SetAddress+0x1a>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e013      	b.n	80070fc <HAL_PCD_SetAddress+0x42>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	78fa      	ldrb	r2, [r7, #3]
 80070e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	78fa      	ldrb	r2, [r7, #3]
 80070ea:	4611      	mov	r1, r2
 80070ec:	4618      	mov	r0, r3
 80070ee:	f005 fa72 	bl	800c5d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	4608      	mov	r0, r1
 800710e:	4611      	mov	r1, r2
 8007110:	461a      	mov	r2, r3
 8007112:	4603      	mov	r3, r0
 8007114:	70fb      	strb	r3, [r7, #3]
 8007116:	460b      	mov	r3, r1
 8007118:	803b      	strh	r3, [r7, #0]
 800711a:	4613      	mov	r3, r2
 800711c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007126:	2b00      	cmp	r3, #0
 8007128:	da0f      	bge.n	800714a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	f003 020f 	and.w	r2, r3, #15
 8007130:	4613      	mov	r3, r2
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	3338      	adds	r3, #56	; 0x38
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	4413      	add	r3, r2
 800713e:	3304      	adds	r3, #4
 8007140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	705a      	strb	r2, [r3, #1]
 8007148:	e00f      	b.n	800716a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	f003 020f 	and.w	r2, r3, #15
 8007150:	4613      	mov	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	1a9b      	subs	r3, r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	4413      	add	r3, r2
 8007160:	3304      	adds	r3, #4
 8007162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800716a:	78fb      	ldrb	r3, [r7, #3]
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	b2da      	uxtb	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007176:	883a      	ldrh	r2, [r7, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	78ba      	ldrb	r2, [r7, #2]
 8007180:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007194:	78bb      	ldrb	r3, [r7, #2]
 8007196:	2b02      	cmp	r3, #2
 8007198:	d102      	bne.n	80071a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d101      	bne.n	80071ae <HAL_PCD_EP_Open+0xaa>
 80071aa:	2302      	movs	r3, #2
 80071ac:	e00e      	b.n	80071cc <HAL_PCD_EP_Open+0xc8>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68f9      	ldr	r1, [r7, #12]
 80071bc:	4618      	mov	r0, r3
 80071be:	f004 fc35 	bl	800ba2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80071ca:	7afb      	ldrb	r3, [r7, #11]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80071e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	da0f      	bge.n	8007208 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	f003 020f 	and.w	r2, r3, #15
 80071ee:	4613      	mov	r3, r2
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	1a9b      	subs	r3, r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	3338      	adds	r3, #56	; 0x38
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	4413      	add	r3, r2
 80071fc:	3304      	adds	r3, #4
 80071fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2201      	movs	r2, #1
 8007204:	705a      	strb	r2, [r3, #1]
 8007206:	e00f      	b.n	8007228 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007208:	78fb      	ldrb	r3, [r7, #3]
 800720a:	f003 020f 	and.w	r2, r3, #15
 800720e:	4613      	mov	r3, r2
 8007210:	00db      	lsls	r3, r3, #3
 8007212:	1a9b      	subs	r3, r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	3304      	adds	r3, #4
 8007220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	f003 030f 	and.w	r3, r3, #15
 800722e:	b2da      	uxtb	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800723a:	2b01      	cmp	r3, #1
 800723c:	d101      	bne.n	8007242 <HAL_PCD_EP_Close+0x6e>
 800723e:	2302      	movs	r3, #2
 8007240:	e00e      	b.n	8007260 <HAL_PCD_EP_Close+0x8c>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68f9      	ldr	r1, [r7, #12]
 8007250:	4618      	mov	r0, r3
 8007252:	f004 fc73 	bl	800bb3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	607a      	str	r2, [r7, #4]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	460b      	mov	r3, r1
 8007276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007278:	7afb      	ldrb	r3, [r7, #11]
 800727a:	f003 020f 	and.w	r2, r3, #15
 800727e:	4613      	mov	r3, r2
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	1a9b      	subs	r3, r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	4413      	add	r3, r2
 800728e:	3304      	adds	r3, #4
 8007290:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2200      	movs	r2, #0
 80072a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	2200      	movs	r2, #0
 80072a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072aa:	7afb      	ldrb	r3, [r7, #11]
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d102      	bne.n	80072c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80072c4:	7afb      	ldrb	r3, [r7, #11]
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d109      	bne.n	80072e2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	461a      	mov	r2, r3
 80072da:	6979      	ldr	r1, [r7, #20]
 80072dc:	f004 fef6 	bl	800c0cc <USB_EP0StartXfer>
 80072e0:	e008      	b.n	80072f4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	6979      	ldr	r1, [r7, #20]
 80072f0:	f004 fca8 	bl	800bc44 <USB_EPStartXfer>
  }

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800730a:	78fb      	ldrb	r3, [r7, #3]
 800730c:	f003 020f 	and.w	r2, r3, #15
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	1a9b      	subs	r3, r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007320:	681b      	ldr	r3, [r3, #0]
}
 8007322:	4618      	mov	r0, r3
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b086      	sub	sp, #24
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
 800733a:	460b      	mov	r3, r1
 800733c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	f003 020f 	and.w	r2, r3, #15
 8007344:	4613      	mov	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	1a9b      	subs	r3, r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	3338      	adds	r3, #56	; 0x38
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4413      	add	r3, r2
 8007352:	3304      	adds	r3, #4
 8007354:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2200      	movs	r2, #0
 8007366:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2201      	movs	r2, #1
 800736c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	f003 030f 	and.w	r3, r3, #15
 8007374:	b2da      	uxtb	r2, r3
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d102      	bne.n	8007388 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007388:	7afb      	ldrb	r3, [r7, #11]
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	461a      	mov	r2, r3
 800739e:	6979      	ldr	r1, [r7, #20]
 80073a0:	f004 fe94 	bl	800c0cc <USB_EP0StartXfer>
 80073a4:	e008      	b.n	80073b8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	6979      	ldr	r1, [r7, #20]
 80073b4:	f004 fc46 	bl	800bc44 <USB_EPStartXfer>
  }

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	460b      	mov	r3, r1
 80073cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	f003 020f 	and.w	r2, r3, #15
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d901      	bls.n	80073e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e050      	b.n	8007482 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80073e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	da0f      	bge.n	8007408 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	f003 020f 	and.w	r2, r3, #15
 80073ee:	4613      	mov	r3, r2
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	1a9b      	subs	r3, r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	3338      	adds	r3, #56	; 0x38
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	4413      	add	r3, r2
 80073fc:	3304      	adds	r3, #4
 80073fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	705a      	strb	r2, [r3, #1]
 8007406:	e00d      	b.n	8007424 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007408:	78fa      	ldrb	r2, [r7, #3]
 800740a:	4613      	mov	r3, r2
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	1a9b      	subs	r3, r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	4413      	add	r3, r2
 800741a:	3304      	adds	r3, #4
 800741c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2201      	movs	r2, #1
 8007428:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800742a:	78fb      	ldrb	r3, [r7, #3]
 800742c:	f003 030f 	and.w	r3, r3, #15
 8007430:	b2da      	uxtb	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_PCD_EP_SetStall+0x82>
 8007440:	2302      	movs	r3, #2
 8007442:	e01e      	b.n	8007482 <HAL_PCD_EP_SetStall+0xc0>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68f9      	ldr	r1, [r7, #12]
 8007452:	4618      	mov	r0, r3
 8007454:	f004 ffeb 	bl	800c42e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	b2d9      	uxtb	r1, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007472:	461a      	mov	r2, r3
 8007474:	f005 f9dc 	bl	800c830 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	f003 020f 	and.w	r2, r3, #15
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d901      	bls.n	80074a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e042      	b.n	800752e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80074a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	da0f      	bge.n	80074d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	f003 020f 	and.w	r2, r3, #15
 80074b6:	4613      	mov	r3, r2
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	1a9b      	subs	r3, r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	3338      	adds	r3, #56	; 0x38
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	4413      	add	r3, r2
 80074c4:	3304      	adds	r3, #4
 80074c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2201      	movs	r2, #1
 80074cc:	705a      	strb	r2, [r3, #1]
 80074ce:	e00f      	b.n	80074f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	f003 020f 	and.w	r2, r3, #15
 80074d6:	4613      	mov	r3, r2
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	1a9b      	subs	r3, r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	4413      	add	r3, r2
 80074e6:	3304      	adds	r3, #4
 80074e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_PCD_EP_ClrStall+0x86>
 800750c:	2302      	movs	r3, #2
 800750e:	e00e      	b.n	800752e <HAL_PCD_EP_ClrStall+0xa4>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68f9      	ldr	r1, [r7, #12]
 800751e:	4618      	mov	r0, r3
 8007520:	f004 fff3 	bl	800c50a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b08a      	sub	sp, #40	; 0x28
 800753a:	af02      	add	r7, sp, #8
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	4613      	mov	r3, r2
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	1a9b      	subs	r3, r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	3338      	adds	r3, #56	; 0x38
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	4413      	add	r3, r2
 800755a:	3304      	adds	r3, #4
 800755c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	429a      	cmp	r2, r3
 8007568:	d901      	bls.n	800756e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e06c      	b.n	8007648 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	695a      	ldr	r2, [r3, #20]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	429a      	cmp	r2, r3
 8007582:	d902      	bls.n	800758a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	3303      	adds	r3, #3
 800758e:	089b      	lsrs	r3, r3, #2
 8007590:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007592:	e02b      	b.n	80075ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	695a      	ldr	r2, [r3, #20]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d902      	bls.n	80075b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	3303      	adds	r3, #3
 80075b4:	089b      	lsrs	r3, r3, #2
 80075b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	68d9      	ldr	r1, [r3, #12]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	4603      	mov	r3, r0
 80075ce:	6978      	ldr	r0, [r7, #20]
 80075d0:	f004 fecf 	bl	800c372 <USB_WritePacket>

    ep->xfer_buff  += len;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	441a      	add	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	699a      	ldr	r2, [r3, #24]
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	441a      	add	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d809      	bhi.n	8007616 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800760a:	429a      	cmp	r2, r3
 800760c:	d203      	bcs.n	8007616 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1be      	bne.n	8007594 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	695a      	ldr	r2, [r3, #20]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	429a      	cmp	r2, r3
 8007620:	d811      	bhi.n	8007646 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	2201      	movs	r2, #1
 800762a:	fa02 f303 	lsl.w	r3, r2, r3
 800762e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	43db      	mvns	r3, r3
 800763c:	6939      	ldr	r1, [r7, #16]
 800763e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007642:	4013      	ands	r3, r2
 8007644:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3720      	adds	r7, #32
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	333c      	adds	r3, #60	; 0x3c
 8007668:	3304      	adds	r3, #4
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	2b01      	cmp	r3, #1
 8007684:	f040 80b3 	bne.w	80077ee <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f003 0308 	and.w	r3, r3, #8
 800768e:	2b00      	cmp	r3, #0
 8007690:	d028      	beq.n	80076e4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4a70      	ldr	r2, [pc, #448]	; (8007858 <PCD_EP_OutXfrComplete_int+0x208>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d90e      	bls.n	80076b8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d009      	beq.n	80076b8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b0:	461a      	mov	r2, r3
 80076b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076b6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f00f f87f 	bl	80167bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076c8:	461a      	mov	r2, r3
 80076ca:	2101      	movs	r1, #1
 80076cc:	f005 f8b0 	bl	800c830 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076dc:	461a      	mov	r2, r3
 80076de:	2308      	movs	r3, #8
 80076e0:	6093      	str	r3, [r2, #8]
 80076e2:	e0b3      	b.n	800784c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d009      	beq.n	8007702 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fa:	461a      	mov	r2, r3
 80076fc:	2320      	movs	r3, #32
 80076fe:	6093      	str	r3, [r2, #8]
 8007700:	e0a4      	b.n	800784c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007708:	2b00      	cmp	r3, #0
 800770a:	f040 809f 	bne.w	800784c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a51      	ldr	r2, [pc, #324]	; (8007858 <PCD_EP_OutXfrComplete_int+0x208>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d90f      	bls.n	8007736 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00a      	beq.n	8007736 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772c:	461a      	mov	r2, r3
 800772e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007732:	6093      	str	r3, [r2, #8]
 8007734:	e08a      	b.n	800784c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	4613      	mov	r3, r2
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	1a9b      	subs	r3, r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007748:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	0159      	lsls	r1, r3, #5
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	440b      	add	r3, r1
 8007752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800775c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	4613      	mov	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	1a9b      	subs	r3, r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4403      	add	r3, r0
 800776c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007770:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	4613      	mov	r3, r2
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007784:	6819      	ldr	r1, [r3, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	4613      	mov	r3, r2
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4403      	add	r3, r0
 8007794:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4419      	add	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	4613      	mov	r3, r2
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	1a9b      	subs	r3, r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4403      	add	r3, r0
 80077aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80077ae:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f00f f812 	bl	80167e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d144      	bne.n	800784c <PCD_EP_OutXfrComplete_int+0x1fc>
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	4613      	mov	r3, r2
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	440b      	add	r3, r1
 80077d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d138      	bne.n	800784c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077e4:	461a      	mov	r2, r3
 80077e6:	2101      	movs	r1, #1
 80077e8:	f005 f822 	bl	800c830 <USB_EP0_OutStart>
 80077ec:	e02e      	b.n	800784c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4a1a      	ldr	r2, [pc, #104]	; (800785c <PCD_EP_OutXfrComplete_int+0x20c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d124      	bne.n	8007840 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780c:	461a      	mov	r2, r3
 800780e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007812:	6093      	str	r3, [r2, #8]
 8007814:	e01a      	b.n	800784c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f003 0320 	and.w	r3, r3, #32
 800781c:	2b00      	cmp	r3, #0
 800781e:	d008      	beq.n	8007832 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782c:	461a      	mov	r2, r3
 800782e:	2320      	movs	r3, #32
 8007830:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f00e ffd1 	bl	80167e0 <HAL_PCD_DataOutStageCallback>
 800783e:	e005      	b.n	800784c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	b2db      	uxtb	r3, r3
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f00e ffca 	bl	80167e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	4f54300a 	.word	0x4f54300a
 800785c:	4f54310a 	.word	0x4f54310a

08007860 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	333c      	adds	r3, #60	; 0x3c
 8007878:	3304      	adds	r3, #4
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d113      	bne.n	80078be <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4a1f      	ldr	r2, [pc, #124]	; (8007918 <PCD_EP_OutSetupPacket_int+0xb8>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d922      	bls.n	80078e4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01d      	beq.n	80078e4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b4:	461a      	mov	r2, r3
 80078b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ba:	6093      	str	r3, [r2, #8]
 80078bc:	e012      	b.n	80078e4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4a16      	ldr	r2, [pc, #88]	; (800791c <PCD_EP_OutSetupPacket_int+0xbc>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d10e      	bne.n	80078e4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d009      	beq.n	80078e4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078dc:	461a      	mov	r2, r3
 80078de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f00e ff69 	bl	80167bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4a0a      	ldr	r2, [pc, #40]	; (8007918 <PCD_EP_OutSetupPacket_int+0xb8>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d90c      	bls.n	800790c <PCD_EP_OutSetupPacket_int+0xac>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d108      	bne.n	800790c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6818      	ldr	r0, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007904:	461a      	mov	r2, r3
 8007906:	2101      	movs	r1, #1
 8007908:	f004 ff92 	bl	800c830 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	4f54300a 	.word	0x4f54300a
 800791c:	4f54310a 	.word	0x4f54310a

08007920 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	70fb      	strb	r3, [r7, #3]
 800792c:	4613      	mov	r3, r2
 800792e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d107      	bne.n	800794e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800793e:	883b      	ldrh	r3, [r7, #0]
 8007940:	0419      	lsls	r1, r3, #16
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	430a      	orrs	r2, r1
 800794a:	629a      	str	r2, [r3, #40]	; 0x28
 800794c:	e028      	b.n	80079a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007954:	0c1b      	lsrs	r3, r3, #16
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	4413      	add	r3, r2
 800795a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800795c:	2300      	movs	r3, #0
 800795e:	73fb      	strb	r3, [r7, #15]
 8007960:	e00d      	b.n	800797e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	3340      	adds	r3, #64	; 0x40
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	0c1b      	lsrs	r3, r3, #16
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	4413      	add	r3, r2
 8007976:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	3301      	adds	r3, #1
 800797c:	73fb      	strb	r3, [r7, #15]
 800797e:	7bfa      	ldrb	r2, [r7, #15]
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	3b01      	subs	r3, #1
 8007984:	429a      	cmp	r2, r3
 8007986:	d3ec      	bcc.n	8007962 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007988:	883b      	ldrh	r3, [r7, #0]
 800798a:	0418      	lsls	r0, r3, #16
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6819      	ldr	r1, [r3, #0]
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	3b01      	subs	r3, #1
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	4302      	orrs	r2, r0
 8007998:	3340      	adds	r3, #64	; 0x40
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	440b      	add	r3, r1
 800799e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	887a      	ldrh	r2, [r7, #2]
 80079c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e25b      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d075      	beq.n	8007af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a06:	4ba3      	ldr	r3, [pc, #652]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 030c 	and.w	r3, r3, #12
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	d00c      	beq.n	8007a2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a12:	4ba0      	ldr	r3, [pc, #640]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a1a:	2b08      	cmp	r3, #8
 8007a1c:	d112      	bne.n	8007a44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a1e:	4b9d      	ldr	r3, [pc, #628]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a2a:	d10b      	bne.n	8007a44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a2c:	4b99      	ldr	r3, [pc, #612]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d05b      	beq.n	8007af0 <HAL_RCC_OscConfig+0x108>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d157      	bne.n	8007af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e236      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a4c:	d106      	bne.n	8007a5c <HAL_RCC_OscConfig+0x74>
 8007a4e:	4b91      	ldr	r3, [pc, #580]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a90      	ldr	r2, [pc, #576]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	e01d      	b.n	8007a98 <HAL_RCC_OscConfig+0xb0>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a64:	d10c      	bne.n	8007a80 <HAL_RCC_OscConfig+0x98>
 8007a66:	4b8b      	ldr	r3, [pc, #556]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a8a      	ldr	r2, [pc, #552]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	4b88      	ldr	r3, [pc, #544]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a87      	ldr	r2, [pc, #540]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	e00b      	b.n	8007a98 <HAL_RCC_OscConfig+0xb0>
 8007a80:	4b84      	ldr	r3, [pc, #528]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a83      	ldr	r2, [pc, #524]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	4b81      	ldr	r3, [pc, #516]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a80      	ldr	r2, [pc, #512]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d013      	beq.n	8007ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa0:	f7fd fcfe 	bl	80054a0 <HAL_GetTick>
 8007aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aa6:	e008      	b.n	8007aba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aa8:	f7fd fcfa 	bl	80054a0 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b64      	cmp	r3, #100	; 0x64
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e1fb      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aba:	4b76      	ldr	r3, [pc, #472]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0f0      	beq.n	8007aa8 <HAL_RCC_OscConfig+0xc0>
 8007ac6:	e014      	b.n	8007af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac8:	f7fd fcea 	bl	80054a0 <HAL_GetTick>
 8007acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ad0:	f7fd fce6 	bl	80054a0 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b64      	cmp	r3, #100	; 0x64
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e1e7      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ae2:	4b6c      	ldr	r3, [pc, #432]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1f0      	bne.n	8007ad0 <HAL_RCC_OscConfig+0xe8>
 8007aee:	e000      	b.n	8007af2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d063      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007afe:	4b65      	ldr	r3, [pc, #404]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 030c 	and.w	r3, r3, #12
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00b      	beq.n	8007b22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b0a:	4b62      	ldr	r3, [pc, #392]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b12:	2b08      	cmp	r3, #8
 8007b14:	d11c      	bne.n	8007b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b16:	4b5f      	ldr	r3, [pc, #380]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d116      	bne.n	8007b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b22:	4b5c      	ldr	r3, [pc, #368]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d005      	beq.n	8007b3a <HAL_RCC_OscConfig+0x152>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d001      	beq.n	8007b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e1bb      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b3a:	4b56      	ldr	r3, [pc, #344]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	4952      	ldr	r1, [pc, #328]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b4e:	e03a      	b.n	8007bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d020      	beq.n	8007b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b58:	4b4f      	ldr	r3, [pc, #316]	; (8007c98 <HAL_RCC_OscConfig+0x2b0>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b5e:	f7fd fc9f 	bl	80054a0 <HAL_GetTick>
 8007b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b64:	e008      	b.n	8007b78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b66:	f7fd fc9b 	bl	80054a0 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e19c      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b78:	4b46      	ldr	r3, [pc, #280]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0f0      	beq.n	8007b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b84:	4b43      	ldr	r3, [pc, #268]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	00db      	lsls	r3, r3, #3
 8007b92:	4940      	ldr	r1, [pc, #256]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	600b      	str	r3, [r1, #0]
 8007b98:	e015      	b.n	8007bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b9a:	4b3f      	ldr	r3, [pc, #252]	; (8007c98 <HAL_RCC_OscConfig+0x2b0>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba0:	f7fd fc7e 	bl	80054a0 <HAL_GetTick>
 8007ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ba6:	e008      	b.n	8007bba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ba8:	f7fd fc7a 	bl	80054a0 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e17b      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bba:	4b36      	ldr	r3, [pc, #216]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1f0      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d030      	beq.n	8007c34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d016      	beq.n	8007c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bda:	4b30      	ldr	r3, [pc, #192]	; (8007c9c <HAL_RCC_OscConfig+0x2b4>)
 8007bdc:	2201      	movs	r2, #1
 8007bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be0:	f7fd fc5e 	bl	80054a0 <HAL_GetTick>
 8007be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007be8:	f7fd fc5a 	bl	80054a0 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e15b      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bfa:	4b26      	ldr	r3, [pc, #152]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0f0      	beq.n	8007be8 <HAL_RCC_OscConfig+0x200>
 8007c06:	e015      	b.n	8007c34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c08:	4b24      	ldr	r3, [pc, #144]	; (8007c9c <HAL_RCC_OscConfig+0x2b4>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c0e:	f7fd fc47 	bl	80054a0 <HAL_GetTick>
 8007c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c14:	e008      	b.n	8007c28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c16:	f7fd fc43 	bl	80054a0 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e144      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c28:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1f0      	bne.n	8007c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 80a0 	beq.w	8007d82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c42:	2300      	movs	r3, #0
 8007c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c46:	4b13      	ldr	r3, [pc, #76]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10f      	bne.n	8007c72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c52:	2300      	movs	r3, #0
 8007c54:	60bb      	str	r3, [r7, #8]
 8007c56:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	4a0e      	ldr	r2, [pc, #56]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c60:	6413      	str	r3, [r2, #64]	; 0x40
 8007c62:	4b0c      	ldr	r3, [pc, #48]	; (8007c94 <HAL_RCC_OscConfig+0x2ac>)
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c6a:	60bb      	str	r3, [r7, #8]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c72:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <HAL_RCC_OscConfig+0x2b8>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d121      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c7e:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <HAL_RCC_OscConfig+0x2b8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a07      	ldr	r2, [pc, #28]	; (8007ca0 <HAL_RCC_OscConfig+0x2b8>)
 8007c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c8a:	f7fd fc09 	bl	80054a0 <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c90:	e011      	b.n	8007cb6 <HAL_RCC_OscConfig+0x2ce>
 8007c92:	bf00      	nop
 8007c94:	40023800 	.word	0x40023800
 8007c98:	42470000 	.word	0x42470000
 8007c9c:	42470e80 	.word	0x42470e80
 8007ca0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ca4:	f7fd fbfc 	bl	80054a0 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e0fd      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cb6:	4b81      	ldr	r3, [pc, #516]	; (8007ebc <HAL_RCC_OscConfig+0x4d4>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0f0      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d106      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x2f0>
 8007cca:	4b7d      	ldr	r3, [pc, #500]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cce:	4a7c      	ldr	r2, [pc, #496]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007cd0:	f043 0301 	orr.w	r3, r3, #1
 8007cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd6:	e01c      	b.n	8007d12 <HAL_RCC_OscConfig+0x32a>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	2b05      	cmp	r3, #5
 8007cde:	d10c      	bne.n	8007cfa <HAL_RCC_OscConfig+0x312>
 8007ce0:	4b77      	ldr	r3, [pc, #476]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce4:	4a76      	ldr	r2, [pc, #472]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007ce6:	f043 0304 	orr.w	r3, r3, #4
 8007cea:	6713      	str	r3, [r2, #112]	; 0x70
 8007cec:	4b74      	ldr	r3, [pc, #464]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf0:	4a73      	ldr	r2, [pc, #460]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007cf2:	f043 0301 	orr.w	r3, r3, #1
 8007cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8007cf8:	e00b      	b.n	8007d12 <HAL_RCC_OscConfig+0x32a>
 8007cfa:	4b71      	ldr	r3, [pc, #452]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfe:	4a70      	ldr	r2, [pc, #448]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007d00:	f023 0301 	bic.w	r3, r3, #1
 8007d04:	6713      	str	r3, [r2, #112]	; 0x70
 8007d06:	4b6e      	ldr	r3, [pc, #440]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0a:	4a6d      	ldr	r2, [pc, #436]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007d0c:	f023 0304 	bic.w	r3, r3, #4
 8007d10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d015      	beq.n	8007d46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d1a:	f7fd fbc1 	bl	80054a0 <HAL_GetTick>
 8007d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d20:	e00a      	b.n	8007d38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d22:	f7fd fbbd 	bl	80054a0 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d901      	bls.n	8007d38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e0bc      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d38:	4b61      	ldr	r3, [pc, #388]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0ee      	beq.n	8007d22 <HAL_RCC_OscConfig+0x33a>
 8007d44:	e014      	b.n	8007d70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d46:	f7fd fbab 	bl	80054a0 <HAL_GetTick>
 8007d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d4c:	e00a      	b.n	8007d64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d4e:	f7fd fba7 	bl	80054a0 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d901      	bls.n	8007d64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e0a6      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d64:	4b56      	ldr	r3, [pc, #344]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1ee      	bne.n	8007d4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d70:	7dfb      	ldrb	r3, [r7, #23]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d105      	bne.n	8007d82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d76:	4b52      	ldr	r3, [pc, #328]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	4a51      	ldr	r2, [pc, #324]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 8092 	beq.w	8007eb0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d8c:	4b4c      	ldr	r3, [pc, #304]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f003 030c 	and.w	r3, r3, #12
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d05c      	beq.n	8007e52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d141      	bne.n	8007e24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007da0:	4b48      	ldr	r3, [pc, #288]	; (8007ec4 <HAL_RCC_OscConfig+0x4dc>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da6:	f7fd fb7b 	bl	80054a0 <HAL_GetTick>
 8007daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dac:	e008      	b.n	8007dc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dae:	f7fd fb77 	bl	80054a0 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e078      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dc0:	4b3f      	ldr	r3, [pc, #252]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f0      	bne.n	8007dae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	69da      	ldr	r2, [r3, #28]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	019b      	lsls	r3, r3, #6
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	085b      	lsrs	r3, r3, #1
 8007de4:	3b01      	subs	r3, #1
 8007de6:	041b      	lsls	r3, r3, #16
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	061b      	lsls	r3, r3, #24
 8007df0:	4933      	ldr	r1, [pc, #204]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007df6:	4b33      	ldr	r3, [pc, #204]	; (8007ec4 <HAL_RCC_OscConfig+0x4dc>)
 8007df8:	2201      	movs	r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dfc:	f7fd fb50 	bl	80054a0 <HAL_GetTick>
 8007e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e02:	e008      	b.n	8007e16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e04:	f7fd fb4c 	bl	80054a0 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e04d      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e16:	4b2a      	ldr	r3, [pc, #168]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0f0      	beq.n	8007e04 <HAL_RCC_OscConfig+0x41c>
 8007e22:	e045      	b.n	8007eb0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e24:	4b27      	ldr	r3, [pc, #156]	; (8007ec4 <HAL_RCC_OscConfig+0x4dc>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e2a:	f7fd fb39 	bl	80054a0 <HAL_GetTick>
 8007e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e30:	e008      	b.n	8007e44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e32:	f7fd fb35 	bl	80054a0 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d901      	bls.n	8007e44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e036      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e44:	4b1e      	ldr	r3, [pc, #120]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1f0      	bne.n	8007e32 <HAL_RCC_OscConfig+0x44a>
 8007e50:	e02e      	b.n	8007eb0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d101      	bne.n	8007e5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e029      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007e5e:	4b18      	ldr	r3, [pc, #96]	; (8007ec0 <HAL_RCC_OscConfig+0x4d8>)
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d11c      	bne.n	8007eac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d115      	bne.n	8007eac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e86:	4013      	ands	r3, r2
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d10d      	bne.n	8007eac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d106      	bne.n	8007eac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d001      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e000      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	40007000 	.word	0x40007000
 8007ec0:	40023800 	.word	0x40023800
 8007ec4:	42470060 	.word	0x42470060

08007ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e0cc      	b.n	8008076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007edc:	4b68      	ldr	r3, [pc, #416]	; (8008080 <HAL_RCC_ClockConfig+0x1b8>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 030f 	and.w	r3, r3, #15
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d90c      	bls.n	8007f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eea:	4b65      	ldr	r3, [pc, #404]	; (8008080 <HAL_RCC_ClockConfig+0x1b8>)
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	b2d2      	uxtb	r2, r2
 8007ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ef2:	4b63      	ldr	r3, [pc, #396]	; (8008080 <HAL_RCC_ClockConfig+0x1b8>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 030f 	and.w	r3, r3, #15
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d001      	beq.n	8007f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e0b8      	b.n	8008076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0302 	and.w	r3, r3, #2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d020      	beq.n	8007f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d005      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f1c:	4b59      	ldr	r3, [pc, #356]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	4a58      	ldr	r2, [pc, #352]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8007f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0308 	and.w	r3, r3, #8
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d005      	beq.n	8007f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f34:	4b53      	ldr	r3, [pc, #332]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	4a52      	ldr	r2, [pc, #328]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8007f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f40:	4b50      	ldr	r3, [pc, #320]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	494d      	ldr	r1, [pc, #308]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d044      	beq.n	8007fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d107      	bne.n	8007f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f66:	4b47      	ldr	r3, [pc, #284]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d119      	bne.n	8007fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e07f      	b.n	8008076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d003      	beq.n	8007f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d107      	bne.n	8007f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f86:	4b3f      	ldr	r3, [pc, #252]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d109      	bne.n	8007fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e06f      	b.n	8008076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f96:	4b3b      	ldr	r3, [pc, #236]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e067      	b.n	8008076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fa6:	4b37      	ldr	r3, [pc, #220]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f023 0203 	bic.w	r2, r3, #3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	4934      	ldr	r1, [pc, #208]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fb8:	f7fd fa72 	bl	80054a0 <HAL_GetTick>
 8007fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fbe:	e00a      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fc0:	f7fd fa6e 	bl	80054a0 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e04f      	b.n	8008076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fd6:	4b2b      	ldr	r3, [pc, #172]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f003 020c 	and.w	r2, r3, #12
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d1eb      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fe8:	4b25      	ldr	r3, [pc, #148]	; (8008080 <HAL_RCC_ClockConfig+0x1b8>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d20c      	bcs.n	8008010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff6:	4b22      	ldr	r3, [pc, #136]	; (8008080 <HAL_RCC_ClockConfig+0x1b8>)
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	b2d2      	uxtb	r2, r2
 8007ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ffe:	4b20      	ldr	r3, [pc, #128]	; (8008080 <HAL_RCC_ClockConfig+0x1b8>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	429a      	cmp	r2, r3
 800800a:	d001      	beq.n	8008010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e032      	b.n	8008076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d008      	beq.n	800802e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800801c:	4b19      	ldr	r3, [pc, #100]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	4916      	ldr	r1, [pc, #88]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 800802a:	4313      	orrs	r3, r2
 800802c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800803a:	4b12      	ldr	r3, [pc, #72]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	490e      	ldr	r1, [pc, #56]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 800804a:	4313      	orrs	r3, r2
 800804c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800804e:	f000 f821 	bl	8008094 <HAL_RCC_GetSysClockFreq>
 8008052:	4601      	mov	r1, r0
 8008054:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <HAL_RCC_ClockConfig+0x1bc>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	091b      	lsrs	r3, r3, #4
 800805a:	f003 030f 	and.w	r3, r3, #15
 800805e:	4a0a      	ldr	r2, [pc, #40]	; (8008088 <HAL_RCC_ClockConfig+0x1c0>)
 8008060:	5cd3      	ldrb	r3, [r2, r3]
 8008062:	fa21 f303 	lsr.w	r3, r1, r3
 8008066:	4a09      	ldr	r2, [pc, #36]	; (800808c <HAL_RCC_ClockConfig+0x1c4>)
 8008068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800806a:	4b09      	ldr	r3, [pc, #36]	; (8008090 <HAL_RCC_ClockConfig+0x1c8>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f7fd f9d2 	bl	8005418 <HAL_InitTick>

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	40023c00 	.word	0x40023c00
 8008084:	40023800 	.word	0x40023800
 8008088:	0801b14c 	.word	0x0801b14c
 800808c:	2000004c 	.word	0x2000004c
 8008090:	20000050 	.word	0x20000050

08008094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	607b      	str	r3, [r7, #4]
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	2300      	movs	r3, #0
 80080a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080aa:	4b63      	ldr	r3, [pc, #396]	; (8008238 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f003 030c 	and.w	r3, r3, #12
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	d007      	beq.n	80080c6 <HAL_RCC_GetSysClockFreq+0x32>
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d008      	beq.n	80080cc <HAL_RCC_GetSysClockFreq+0x38>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f040 80b4 	bne.w	8008228 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080c0:	4b5e      	ldr	r3, [pc, #376]	; (800823c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80080c2:	60bb      	str	r3, [r7, #8]
       break;
 80080c4:	e0b3      	b.n	800822e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080c6:	4b5e      	ldr	r3, [pc, #376]	; (8008240 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80080c8:	60bb      	str	r3, [r7, #8]
      break;
 80080ca:	e0b0      	b.n	800822e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080cc:	4b5a      	ldr	r3, [pc, #360]	; (8008238 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080d6:	4b58      	ldr	r3, [pc, #352]	; (8008238 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d04a      	beq.n	8008178 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080e2:	4b55      	ldr	r3, [pc, #340]	; (8008238 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	099b      	lsrs	r3, r3, #6
 80080e8:	f04f 0400 	mov.w	r4, #0
 80080ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80080f0:	f04f 0200 	mov.w	r2, #0
 80080f4:	ea03 0501 	and.w	r5, r3, r1
 80080f8:	ea04 0602 	and.w	r6, r4, r2
 80080fc:	4629      	mov	r1, r5
 80080fe:	4632      	mov	r2, r6
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	f04f 0400 	mov.w	r4, #0
 8008108:	0154      	lsls	r4, r2, #5
 800810a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800810e:	014b      	lsls	r3, r1, #5
 8008110:	4619      	mov	r1, r3
 8008112:	4622      	mov	r2, r4
 8008114:	1b49      	subs	r1, r1, r5
 8008116:	eb62 0206 	sbc.w	r2, r2, r6
 800811a:	f04f 0300 	mov.w	r3, #0
 800811e:	f04f 0400 	mov.w	r4, #0
 8008122:	0194      	lsls	r4, r2, #6
 8008124:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008128:	018b      	lsls	r3, r1, #6
 800812a:	1a5b      	subs	r3, r3, r1
 800812c:	eb64 0402 	sbc.w	r4, r4, r2
 8008130:	f04f 0100 	mov.w	r1, #0
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	00e2      	lsls	r2, r4, #3
 800813a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800813e:	00d9      	lsls	r1, r3, #3
 8008140:	460b      	mov	r3, r1
 8008142:	4614      	mov	r4, r2
 8008144:	195b      	adds	r3, r3, r5
 8008146:	eb44 0406 	adc.w	r4, r4, r6
 800814a:	f04f 0100 	mov.w	r1, #0
 800814e:	f04f 0200 	mov.w	r2, #0
 8008152:	0262      	lsls	r2, r4, #9
 8008154:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008158:	0259      	lsls	r1, r3, #9
 800815a:	460b      	mov	r3, r1
 800815c:	4614      	mov	r4, r2
 800815e:	4618      	mov	r0, r3
 8008160:	4621      	mov	r1, r4
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f04f 0400 	mov.w	r4, #0
 8008168:	461a      	mov	r2, r3
 800816a:	4623      	mov	r3, r4
 800816c:	f7f8 fc86 	bl	8000a7c <__aeabi_uldivmod>
 8008170:	4603      	mov	r3, r0
 8008172:	460c      	mov	r4, r1
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	e049      	b.n	800820c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008178:	4b2f      	ldr	r3, [pc, #188]	; (8008238 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	099b      	lsrs	r3, r3, #6
 800817e:	f04f 0400 	mov.w	r4, #0
 8008182:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	ea03 0501 	and.w	r5, r3, r1
 800818e:	ea04 0602 	and.w	r6, r4, r2
 8008192:	4629      	mov	r1, r5
 8008194:	4632      	mov	r2, r6
 8008196:	f04f 0300 	mov.w	r3, #0
 800819a:	f04f 0400 	mov.w	r4, #0
 800819e:	0154      	lsls	r4, r2, #5
 80081a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80081a4:	014b      	lsls	r3, r1, #5
 80081a6:	4619      	mov	r1, r3
 80081a8:	4622      	mov	r2, r4
 80081aa:	1b49      	subs	r1, r1, r5
 80081ac:	eb62 0206 	sbc.w	r2, r2, r6
 80081b0:	f04f 0300 	mov.w	r3, #0
 80081b4:	f04f 0400 	mov.w	r4, #0
 80081b8:	0194      	lsls	r4, r2, #6
 80081ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80081be:	018b      	lsls	r3, r1, #6
 80081c0:	1a5b      	subs	r3, r3, r1
 80081c2:	eb64 0402 	sbc.w	r4, r4, r2
 80081c6:	f04f 0100 	mov.w	r1, #0
 80081ca:	f04f 0200 	mov.w	r2, #0
 80081ce:	00e2      	lsls	r2, r4, #3
 80081d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80081d4:	00d9      	lsls	r1, r3, #3
 80081d6:	460b      	mov	r3, r1
 80081d8:	4614      	mov	r4, r2
 80081da:	195b      	adds	r3, r3, r5
 80081dc:	eb44 0406 	adc.w	r4, r4, r6
 80081e0:	f04f 0100 	mov.w	r1, #0
 80081e4:	f04f 0200 	mov.w	r2, #0
 80081e8:	02a2      	lsls	r2, r4, #10
 80081ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80081ee:	0299      	lsls	r1, r3, #10
 80081f0:	460b      	mov	r3, r1
 80081f2:	4614      	mov	r4, r2
 80081f4:	4618      	mov	r0, r3
 80081f6:	4621      	mov	r1, r4
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f04f 0400 	mov.w	r4, #0
 80081fe:	461a      	mov	r2, r3
 8008200:	4623      	mov	r3, r4
 8008202:	f7f8 fc3b 	bl	8000a7c <__aeabi_uldivmod>
 8008206:	4603      	mov	r3, r0
 8008208:	460c      	mov	r4, r1
 800820a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	0c1b      	lsrs	r3, r3, #16
 8008212:	f003 0303 	and.w	r3, r3, #3
 8008216:	3301      	adds	r3, #1
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	fbb2 f3f3 	udiv	r3, r2, r3
 8008224:	60bb      	str	r3, [r7, #8]
      break;
 8008226:	e002      	b.n	800822e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800822a:	60bb      	str	r3, [r7, #8]
      break;
 800822c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800822e:	68bb      	ldr	r3, [r7, #8]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008238:	40023800 	.word	0x40023800
 800823c:	00f42400 	.word	0x00f42400
 8008240:	007a1200 	.word	0x007a1200

08008244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008248:	4b03      	ldr	r3, [pc, #12]	; (8008258 <HAL_RCC_GetHCLKFreq+0x14>)
 800824a:	681b      	ldr	r3, [r3, #0]
}
 800824c:	4618      	mov	r0, r3
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	2000004c 	.word	0x2000004c

0800825c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008260:	f7ff fff0 	bl	8008244 <HAL_RCC_GetHCLKFreq>
 8008264:	4601      	mov	r1, r0
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	0a9b      	lsrs	r3, r3, #10
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	4a03      	ldr	r2, [pc, #12]	; (8008280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008272:	5cd3      	ldrb	r3, [r2, r3]
 8008274:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008278:	4618      	mov	r0, r3
 800827a:	bd80      	pop	{r7, pc}
 800827c:	40023800 	.word	0x40023800
 8008280:	0801b15c 	.word	0x0801b15c

08008284 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d105      	bne.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d038      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80082ac:	4b68      	ldr	r3, [pc, #416]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082b2:	f7fd f8f5 	bl	80054a0 <HAL_GetTick>
 80082b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082b8:	e008      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80082ba:	f7fd f8f1 	bl	80054a0 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d901      	bls.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e0bd      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082cc:	4b61      	ldr	r3, [pc, #388]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1f0      	bne.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	019b      	lsls	r3, r3, #6
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	071b      	lsls	r3, r3, #28
 80082ea:	495a      	ldr	r1, [pc, #360]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80082f2:	4b57      	ldr	r3, [pc, #348]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80082f4:	2201      	movs	r2, #1
 80082f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082f8:	f7fd f8d2 	bl	80054a0 <HAL_GetTick>
 80082fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082fe:	e008      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008300:	f7fd f8ce 	bl	80054a0 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	2b02      	cmp	r3, #2
 800830c:	d901      	bls.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e09a      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008312:	4b50      	ldr	r3, [pc, #320]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d0f0      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	f000 8083 	beq.w	8008432 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800832c:	2300      	movs	r3, #0
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	4b48      	ldr	r3, [pc, #288]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	4a47      	ldr	r2, [pc, #284]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800833a:	6413      	str	r3, [r2, #64]	; 0x40
 800833c:	4b45      	ldr	r3, [pc, #276]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800833e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008344:	60fb      	str	r3, [r7, #12]
 8008346:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008348:	4b43      	ldr	r3, [pc, #268]	; (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a42      	ldr	r2, [pc, #264]	; (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800834e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008352:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008354:	f7fd f8a4 	bl	80054a0 <HAL_GetTick>
 8008358:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800835a:	e008      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800835c:	f7fd f8a0 	bl	80054a0 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b02      	cmp	r3, #2
 8008368:	d901      	bls.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e06c      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800836e:	4b3a      	ldr	r3, [pc, #232]	; (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008376:	2b00      	cmp	r3, #0
 8008378:	d0f0      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800837a:	4b36      	ldr	r3, [pc, #216]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800837c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008382:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d02f      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	429a      	cmp	r2, r3
 8008396:	d028      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008398:	4b2e      	ldr	r3, [pc, #184]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800839a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800839c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083a2:	4b2e      	ldr	r3, [pc, #184]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80083a4:	2201      	movs	r2, #1
 80083a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083a8:	4b2c      	ldr	r3, [pc, #176]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80083ae:	4a29      	ldr	r2, [pc, #164]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083b4:	4b27      	ldr	r3, [pc, #156]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d114      	bne.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80083c0:	f7fd f86e 	bl	80054a0 <HAL_GetTick>
 80083c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083c6:	e00a      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083c8:	f7fd f86a 	bl	80054a0 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d901      	bls.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e034      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083de:	4b1d      	ldr	r3, [pc, #116]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0ee      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083f6:	d10d      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80083f8:	4b16      	ldr	r3, [pc, #88]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800840c:	4911      	ldr	r1, [pc, #68]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840e:	4313      	orrs	r3, r2
 8008410:	608b      	str	r3, [r1, #8]
 8008412:	e005      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008414:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	4a0e      	ldr	r2, [pc, #56]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800841e:	6093      	str	r3, [r2, #8]
 8008420:	4b0c      	ldr	r3, [pc, #48]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008422:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800842c:	4909      	ldr	r1, [pc, #36]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800842e:	4313      	orrs	r3, r2
 8008430:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	7d1a      	ldrb	r2, [r3, #20]
 8008442:	4b07      	ldr	r3, [pc, #28]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008444:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3718      	adds	r7, #24
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	42470068 	.word	0x42470068
 8008454:	40023800 	.word	0x40023800
 8008458:	40007000 	.word	0x40007000
 800845c:	42470e40 	.word	0x42470e40
 8008460:	424711e0 	.word	0x424711e0

08008464 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e083      	b.n	800857e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	7f5b      	ldrb	r3, [r3, #29]
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d105      	bne.n	800848c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7fc fc62 	bl	8004d50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	22ca      	movs	r2, #202	; 0xca
 8008498:	625a      	str	r2, [r3, #36]	; 0x24
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2253      	movs	r2, #83	; 0x53
 80084a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 faa8 	bl	80089f8 <RTC_EnterInitMode>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d008      	beq.n	80084c0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	22ff      	movs	r2, #255	; 0xff
 80084b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2204      	movs	r2, #4
 80084ba:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e05e      	b.n	800857e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	6812      	ldr	r2, [r2, #0]
 80084ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80084ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084d2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6899      	ldr	r1, [r3, #8]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	68d2      	ldr	r2, [r2, #12]
 80084fa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6919      	ldr	r1, [r3, #16]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	041a      	lsls	r2, r3, #16
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800851e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f003 0320 	and.w	r3, r3, #32
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10e      	bne.n	800854c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fa3a 	bl	80089a8 <HAL_RTC_WaitForSynchro>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d008      	beq.n	800854c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	22ff      	movs	r2, #255	; 0xff
 8008540:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2204      	movs	r2, #4
 8008546:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e018      	b.n	800857e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800855a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	22ff      	movs	r2, #255	; 0xff
 8008574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800857c:	2300      	movs	r3, #0
  }
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008586:	b590      	push	{r4, r7, lr}
 8008588:	b087      	sub	sp, #28
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	7f1b      	ldrb	r3, [r3, #28]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d101      	bne.n	80085a2 <HAL_RTC_SetTime+0x1c>
 800859e:	2302      	movs	r3, #2
 80085a0:	e0aa      	b.n	80086f8 <HAL_RTC_SetTime+0x172>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2202      	movs	r2, #2
 80085ac:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d126      	bne.n	8008602 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d102      	bne.n	80085c8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2200      	movs	r2, #0
 80085c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 fa3f 	bl	8008a50 <RTC_ByteToBcd2>
 80085d2:	4603      	mov	r3, r0
 80085d4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	785b      	ldrb	r3, [r3, #1]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fa38 	bl	8008a50 <RTC_ByteToBcd2>
 80085e0:	4603      	mov	r3, r0
 80085e2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80085e4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	789b      	ldrb	r3, [r3, #2]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 fa30 	bl	8008a50 <RTC_ByteToBcd2>
 80085f0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80085f2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	78db      	ldrb	r3, [r3, #3]
 80085fa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80085fc:	4313      	orrs	r3, r2
 80085fe:	617b      	str	r3, [r7, #20]
 8008600:	e018      	b.n	8008634 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860c:	2b00      	cmp	r3, #0
 800860e:	d102      	bne.n	8008616 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2200      	movs	r2, #0
 8008614:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008622:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008628:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	78db      	ldrb	r3, [r3, #3]
 800862e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008630:	4313      	orrs	r3, r2
 8008632:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	22ca      	movs	r2, #202	; 0xca
 800863a:	625a      	str	r2, [r3, #36]	; 0x24
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2253      	movs	r2, #83	; 0x53
 8008642:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 f9d7 	bl	80089f8 <RTC_EnterInitMode>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00b      	beq.n	8008668 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	22ff      	movs	r2, #255	; 0xff
 8008656:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2204      	movs	r2, #4
 800865c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e047      	b.n	80086f8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008672:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008676:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689a      	ldr	r2, [r3, #8]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008686:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6899      	ldr	r1, [r3, #8]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	431a      	orrs	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	430a      	orrs	r2, r1
 800869e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68da      	ldr	r2, [r3, #12]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086ae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d111      	bne.n	80086e2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 f972 	bl	80089a8 <HAL_RTC_WaitForSynchro>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00b      	beq.n	80086e2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	22ff      	movs	r2, #255	; 0xff
 80086d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2204      	movs	r2, #4
 80086d6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e00a      	b.n	80086f8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	22ff      	movs	r2, #255	; 0xff
 80086e8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2201      	movs	r2, #1
 80086ee:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80086f6:	2300      	movs	r3, #0
  }
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	371c      	adds	r7, #28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd90      	pop	{r4, r7, pc}

08008700 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008732:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008736:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	0c1b      	lsrs	r3, r3, #16
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008742:	b2da      	uxtb	r2, r3
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	0a1b      	lsrs	r3, r3, #8
 800874c:	b2db      	uxtb	r3, r3
 800874e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008752:	b2da      	uxtb	r2, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008760:	b2da      	uxtb	r2, r3
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	0c1b      	lsrs	r3, r3, #16
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008770:	b2da      	uxtb	r2, r3
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d11a      	bne.n	80087b2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	4618      	mov	r0, r3
 8008782:	f000 f983 	bl	8008a8c <RTC_Bcd2ToByte>
 8008786:	4603      	mov	r3, r0
 8008788:	461a      	mov	r2, r3
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	785b      	ldrb	r3, [r3, #1]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 f97a 	bl	8008a8c <RTC_Bcd2ToByte>
 8008798:	4603      	mov	r3, r0
 800879a:	461a      	mov	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	789b      	ldrb	r3, [r3, #2]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 f971 	bl	8008a8c <RTC_Bcd2ToByte>
 80087aa:	4603      	mov	r3, r0
 80087ac:	461a      	mov	r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3718      	adds	r7, #24
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80087bc:	b590      	push	{r4, r7, lr}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	7f1b      	ldrb	r3, [r3, #28]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d101      	bne.n	80087d8 <HAL_RTC_SetDate+0x1c>
 80087d4:	2302      	movs	r3, #2
 80087d6:	e094      	b.n	8008902 <HAL_RTC_SetDate+0x146>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2201      	movs	r2, #1
 80087dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2202      	movs	r2, #2
 80087e2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10e      	bne.n	8008808 <HAL_RTC_SetDate+0x4c>
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d008      	beq.n	8008808 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	785b      	ldrb	r3, [r3, #1]
 80087fa:	f023 0310 	bic.w	r3, r3, #16
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	330a      	adds	r3, #10
 8008802:	b2da      	uxtb	r2, r3
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d11c      	bne.n	8008848 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	78db      	ldrb	r3, [r3, #3]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f91c 	bl	8008a50 <RTC_ByteToBcd2>
 8008818:	4603      	mov	r3, r0
 800881a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	785b      	ldrb	r3, [r3, #1]
 8008820:	4618      	mov	r0, r3
 8008822:	f000 f915 	bl	8008a50 <RTC_ByteToBcd2>
 8008826:	4603      	mov	r3, r0
 8008828:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800882a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	789b      	ldrb	r3, [r3, #2]
 8008830:	4618      	mov	r0, r3
 8008832:	f000 f90d 	bl	8008a50 <RTC_ByteToBcd2>
 8008836:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008838:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008842:	4313      	orrs	r3, r2
 8008844:	617b      	str	r3, [r7, #20]
 8008846:	e00e      	b.n	8008866 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	78db      	ldrb	r3, [r3, #3]
 800884c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008854:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800885a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008862:	4313      	orrs	r3, r2
 8008864:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	22ca      	movs	r2, #202	; 0xca
 800886c:	625a      	str	r2, [r3, #36]	; 0x24
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2253      	movs	r2, #83	; 0x53
 8008874:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 f8be 	bl	80089f8 <RTC_EnterInitMode>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00b      	beq.n	800889a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	22ff      	movs	r2, #255	; 0xff
 8008888:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2204      	movs	r2, #4
 800888e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e033      	b.n	8008902 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80088a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80088a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088b8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f003 0320 	and.w	r3, r3, #32
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d111      	bne.n	80088ec <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f86d 	bl	80089a8 <HAL_RTC_WaitForSynchro>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	22ff      	movs	r2, #255	; 0xff
 80088da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2204      	movs	r2, #4
 80088e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e00a      	b.n	8008902 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	22ff      	movs	r2, #255	; 0xff
 80088f2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2201      	movs	r2, #1
 80088f8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008900:	2300      	movs	r3, #0
  }
}
 8008902:	4618      	mov	r0, r3
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	bd90      	pop	{r4, r7, pc}

0800890a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b086      	sub	sp, #24
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008924:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008928:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	0c1b      	lsrs	r3, r3, #16
 800892e:	b2da      	uxtb	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	0a1b      	lsrs	r3, r3, #8
 8008938:	b2db      	uxtb	r3, r3
 800893a:	f003 031f 	and.w	r3, r3, #31
 800893e:	b2da      	uxtb	r2, r3
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800894c:	b2da      	uxtb	r2, r3
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	0b5b      	lsrs	r3, r3, #13
 8008956:	b2db      	uxtb	r3, r3
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	b2da      	uxtb	r2, r3
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d11a      	bne.n	800899e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	78db      	ldrb	r3, [r3, #3]
 800896c:	4618      	mov	r0, r3
 800896e:	f000 f88d 	bl	8008a8c <RTC_Bcd2ToByte>
 8008972:	4603      	mov	r3, r0
 8008974:	461a      	mov	r2, r3
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	785b      	ldrb	r3, [r3, #1]
 800897e:	4618      	mov	r0, r3
 8008980:	f000 f884 	bl	8008a8c <RTC_Bcd2ToByte>
 8008984:	4603      	mov	r3, r0
 8008986:	461a      	mov	r2, r3
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	789b      	ldrb	r3, [r3, #2]
 8008990:	4618      	mov	r0, r3
 8008992:	f000 f87b 	bl	8008a8c <RTC_Bcd2ToByte>
 8008996:	4603      	mov	r3, r0
 8008998:	461a      	mov	r2, r3
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80089c2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80089c4:	f7fc fd6c 	bl	80054a0 <HAL_GetTick>
 80089c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80089ca:	e009      	b.n	80089e0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80089cc:	f7fc fd68 	bl	80054a0 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089da:	d901      	bls.n	80089e0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e007      	b.n	80089f0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	f003 0320 	and.w	r3, r3, #32
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0ee      	beq.n	80089cc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d119      	bne.n	8008a46 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a1c:	f7fc fd40 	bl	80054a0 <HAL_GetTick>
 8008a20:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008a22:	e009      	b.n	8008a38 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008a24:	f7fc fd3c 	bl	80054a0 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a32:	d901      	bls.n	8008a38 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e007      	b.n	8008a48 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0ee      	beq.n	8008a24 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	4603      	mov	r3, r0
 8008a58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008a5e:	e005      	b.n	8008a6c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	3301      	adds	r3, #1
 8008a64:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008a66:	79fb      	ldrb	r3, [r7, #7]
 8008a68:	3b0a      	subs	r3, #10
 8008a6a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	2b09      	cmp	r3, #9
 8008a70:	d8f6      	bhi.n	8008a60 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	011b      	lsls	r3, r3, #4
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	b2db      	uxtb	r3, r3
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4603      	mov	r3, r0
 8008a94:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008a9a:	79fb      	ldrb	r3, [r7, #7]
 8008a9c:	091b      	lsrs	r3, r3, #4
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	f003 030f 	and.w	r3, r3, #15
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	4413      	add	r3, r2
 8008aba:	b2db      	uxtb	r3, r3
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e022      	b.n	8008b20 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d105      	bne.n	8008af2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7fc f945 	bl	8004d7c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2203      	movs	r2, #3
 8008af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f814 	bl	8008b28 <HAL_SD_InitCard>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e00a      	b.n	8008b20 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b28:	b5b0      	push	{r4, r5, r7, lr}
 8008b2a:	b08e      	sub	sp, #56	; 0x38
 8008b2c:	af04      	add	r7, sp, #16
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008b34:	2300      	movs	r3, #0
 8008b36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008b44:	2376      	movs	r3, #118	; 0x76
 8008b46:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681d      	ldr	r5, [r3, #0]
 8008b4c:	466c      	mov	r4, sp
 8008b4e:	f107 0314 	add.w	r3, r7, #20
 8008b52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b5a:	f107 0308 	add.w	r3, r7, #8
 8008b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b60:	4628      	mov	r0, r5
 8008b62:	f001 fef9 	bl	800a958 <SDIO_Init>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e031      	b.n	8008bdc <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008b78:	4b1a      	ldr	r3, [pc, #104]	; (8008be4 <HAL_SD_InitCard+0xbc>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 ff31 	bl	800a9ea <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008b88:	4b16      	ldr	r3, [pc, #88]	; (8008be4 <HAL_SD_InitCard+0xbc>)
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f001 f882 	bl	8009c98 <SD_PowerON>
 8008b94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	431a      	orrs	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e013      	b.n	8008bdc <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 ffa1 	bl	8009afc <SD_InitCard>
 8008bba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00b      	beq.n	8008bda <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e000      	b.n	8008bdc <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3728      	adds	r7, #40	; 0x28
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bdb0      	pop	{r4, r5, r7, pc}
 8008be4:	422580a0 	.word	0x422580a0

08008be8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b092      	sub	sp, #72	; 0x48
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bf6:	f7fc fc53 	bl	80054a0 <HAL_GetTick>
 8008bfa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d107      	bne.n	8008c1a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e1d9      	b.n	8008fce <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	f040 81cc 	bne.w	8008fc0 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	441a      	add	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d907      	bls.n	8008c4c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e1c0      	b.n	8008fce <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2203      	movs	r2, #3
 8008c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d002      	beq.n	8008c6a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c66:	025b      	lsls	r3, r3, #9
 8008c68:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c72:	4618      	mov	r0, r3
 8008c74:	f001 ff4c 	bl	800ab10 <SDMMC_CmdBlockLength>
 8008c78:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00f      	beq.n	8008ca0 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a9b      	ldr	r2, [pc, #620]	; (8008ef4 <HAL_SD_ReadBlocks+0x30c>)
 8008c86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e196      	b.n	8008fce <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca4:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	025b      	lsls	r3, r3, #9
 8008caa:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008cac:	2390      	movs	r3, #144	; 0x90
 8008cae:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f107 0214 	add.w	r2, r7, #20
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 fef6 	bl	800aab8 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d90a      	bls.n	8008ce8 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f001 ff5a 	bl	800ab98 <SDMMC_CmdReadMultiBlock>
 8008ce4:	6478      	str	r0, [r7, #68]	; 0x44
 8008ce6:	e009      	b.n	8008cfc <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2201      	movs	r2, #1
 8008cec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f001 ff2d 	bl	800ab54 <SDMMC_CmdReadSingleBlock>
 8008cfa:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d012      	beq.n	8008d28 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a7b      	ldr	r2, [pc, #492]	; (8008ef4 <HAL_SD_ReadBlocks+0x30c>)
 8008d08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d10:	431a      	orrs	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e152      	b.n	8008fce <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008d2c:	e061      	b.n	8008df2 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d03c      	beq.n	8008db6 <HAL_SD_ReadBlocks+0x1ce>
 8008d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d039      	beq.n	8008db6 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008d42:	2300      	movs	r3, #0
 8008d44:	643b      	str	r3, [r7, #64]	; 0x40
 8008d46:	e033      	b.n	8008db0 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f001 fe2e 	bl	800a9ae <SDIO_ReadFIFO>
 8008d52:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5e:	3301      	adds	r3, #1
 8008d60:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d64:	3b01      	subs	r3, #1
 8008d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	0a1b      	lsrs	r3, r3, #8
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d74:	3301      	adds	r3, #1
 8008d76:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d80:	0c1b      	lsrs	r3, r3, #16
 8008d82:	b2da      	uxtb	r2, r3
 8008d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d86:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d90:	3b01      	subs	r3, #1
 8008d92:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	0e1b      	lsrs	r3, r3, #24
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da0:	3301      	adds	r3, #1
 8008da2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da6:	3b01      	subs	r3, #1
 8008da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dac:	3301      	adds	r3, #1
 8008dae:	643b      	str	r3, [r7, #64]	; 0x40
 8008db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db2:	2b07      	cmp	r3, #7
 8008db4:	d9c8      	bls.n	8008d48 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008db6:	f7fc fb73 	bl	80054a0 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d902      	bls.n	8008dcc <HAL_SD_ReadBlocks+0x1e4>
 8008dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d112      	bne.n	8008df2 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a48      	ldr	r2, [pc, #288]	; (8008ef4 <HAL_SD_ReadBlocks+0x30c>)
 8008dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e0ed      	b.n	8008fce <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008df8:	f240 332a 	movw	r3, #810	; 0x32a
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d095      	beq.n	8008d2e <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d022      	beq.n	8008e56 <HAL_SD_ReadBlocks+0x26e>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d91f      	bls.n	8008e56 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d01b      	beq.n	8008e56 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f001 ff1e 	bl	800ac64 <SDMMC_CmdStopTransfer>
 8008e28:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d012      	beq.n	8008e56 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a2f      	ldr	r2, [pc, #188]	; (8008ef4 <HAL_SD_ReadBlocks+0x30c>)
 8008e36:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e3e:	431a      	orrs	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e0bb      	b.n	8008fce <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5c:	f003 0308 	and.w	r3, r3, #8
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d012      	beq.n	8008e8a <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a22      	ldr	r2, [pc, #136]	; (8008ef4 <HAL_SD_ReadBlocks+0x30c>)
 8008e6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e70:	f043 0208 	orr.w	r2, r3, #8
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e0a1      	b.n	8008fce <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e90:	f003 0302 	and.w	r3, r3, #2
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d012      	beq.n	8008ebe <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a15      	ldr	r2, [pc, #84]	; (8008ef4 <HAL_SD_ReadBlocks+0x30c>)
 8008e9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea4:	f043 0202 	orr.w	r2, r3, #2
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e087      	b.n	8008fce <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec4:	f003 0320 	and.w	r3, r3, #32
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d064      	beq.n	8008f96 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a08      	ldr	r2, [pc, #32]	; (8008ef4 <HAL_SD_ReadBlocks+0x30c>)
 8008ed2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed8:	f043 0220 	orr.w	r2, r3, #32
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e06d      	b.n	8008fce <HAL_SD_ReadBlocks+0x3e6>
 8008ef2:	bf00      	nop
 8008ef4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 fd56 	bl	800a9ae <SDIO_ReadFIFO>
 8008f02:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f0a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f0e:	3301      	adds	r3, #1
 8008f10:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f14:	3b01      	subs	r3, #1
 8008f16:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	0a1b      	lsrs	r3, r3, #8
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f20:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f24:	3301      	adds	r3, #1
 8008f26:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	0c1b      	lsrs	r3, r3, #16
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f36:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f40:	3b01      	subs	r3, #1
 8008f42:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	0e1b      	lsrs	r3, r3, #24
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f50:	3301      	adds	r3, #1
 8008f52:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f56:	3b01      	subs	r3, #1
 8008f58:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008f5a:	f7fc faa1 	bl	80054a0 <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d902      	bls.n	8008f70 <HAL_SD_ReadBlocks+0x388>
 8008f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d112      	bne.n	8008f96 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a18      	ldr	r2, [pc, #96]	; (8008fd8 <HAL_SD_ReadBlocks+0x3f0>)
 8008f76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e01b      	b.n	8008fce <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <HAL_SD_ReadBlocks+0x3c2>
 8008fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1a6      	bne.n	8008ef8 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f240 523a 	movw	r2, #1338	; 0x53a
 8008fb2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e006      	b.n	8008fce <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
  }
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3748      	adds	r7, #72	; 0x48
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	004005ff 	.word	0x004005ff

08008fdc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b092      	sub	sp, #72	; 0x48
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008fea:	f7fc fa59 	bl	80054a0 <HAL_GetTick>
 8008fee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d107      	bne.n	800900e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009002:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e184      	b.n	8009318 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b01      	cmp	r3, #1
 8009018:	f040 8177 	bne.w	800930a <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	441a      	add	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800902c:	429a      	cmp	r2, r3
 800902e:	d907      	bls.n	8009040 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009034:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e16b      	b.n	8009318 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2203      	movs	r2, #3
 8009044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2200      	movs	r2, #0
 800904e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009054:	2b01      	cmp	r3, #1
 8009056:	d002      	beq.n	800905e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905a:	025b      	lsls	r3, r3, #9
 800905c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009066:	4618      	mov	r0, r3
 8009068:	f001 fd52 	bl	800ab10 <SDMMC_CmdBlockLength>
 800906c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800906e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00f      	beq.n	8009094 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a9d      	ldr	r2, [pc, #628]	; (80092f0 <HAL_SD_WriteBlocks+0x314>)
 800907a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009082:	431a      	orrs	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e141      	b.n	8009318 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009094:	f04f 33ff 	mov.w	r3, #4294967295
 8009098:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	025b      	lsls	r3, r3, #9
 800909e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80090a0:	2390      	movs	r3, #144	; 0x90
 80090a2:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80090a4:	2300      	movs	r3, #0
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80090ac:	2301      	movs	r3, #1
 80090ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f107 0218 	add.w	r2, r7, #24
 80090b8:	4611      	mov	r1, r2
 80090ba:	4618      	mov	r0, r3
 80090bc:	f001 fcfc 	bl	800aab8 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d90a      	bls.n	80090dc <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2220      	movs	r2, #32
 80090ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090d2:	4618      	mov	r0, r3
 80090d4:	f001 fda4 	bl	800ac20 <SDMMC_CmdWriteMultiBlock>
 80090d8:	6478      	str	r0, [r7, #68]	; 0x44
 80090da:	e009      	b.n	80090f0 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2210      	movs	r2, #16
 80090e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090e8:	4618      	mov	r0, r3
 80090ea:	f001 fd77 	bl	800abdc <SDMMC_CmdWriteSingleBlock>
 80090ee:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80090f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d012      	beq.n	800911c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a7d      	ldr	r2, [pc, #500]	; (80092f0 <HAL_SD_WriteBlocks+0x314>)
 80090fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009104:	431a      	orrs	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e0fd      	b.n	8009318 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009120:	e065      	b.n	80091ee <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d040      	beq.n	80091b2 <HAL_SD_WriteBlocks+0x1d6>
 8009130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009132:	2b00      	cmp	r3, #0
 8009134:	d03d      	beq.n	80091b2 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009136:	2300      	movs	r3, #0
 8009138:	643b      	str	r3, [r7, #64]	; 0x40
 800913a:	e037      	b.n	80091ac <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800913c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009144:	3301      	adds	r3, #1
 8009146:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914a:	3b01      	subs	r3, #1
 800914c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800914e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	021a      	lsls	r2, r3, #8
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	4313      	orrs	r3, r2
 8009158:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800915a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915c:	3301      	adds	r3, #1
 800915e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009162:	3b01      	subs	r3, #1
 8009164:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	041a      	lsls	r2, r3, #16
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	4313      	orrs	r3, r2
 8009170:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009174:	3301      	adds	r3, #1
 8009176:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917a:	3b01      	subs	r3, #1
 800917c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800917e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	061a      	lsls	r2, r3, #24
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	4313      	orrs	r3, r2
 8009188:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800918a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918c:	3301      	adds	r3, #1
 800918e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009192:	3b01      	subs	r3, #1
 8009194:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f107 0214 	add.w	r2, r7, #20
 800919e:	4611      	mov	r1, r2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f001 fc11 	bl	800a9c8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80091a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a8:	3301      	adds	r3, #1
 80091aa:	643b      	str	r3, [r7, #64]	; 0x40
 80091ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ae:	2b07      	cmp	r3, #7
 80091b0:	d9c4      	bls.n	800913c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80091b2:	f7fc f975 	bl	80054a0 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091be:	429a      	cmp	r2, r3
 80091c0:	d902      	bls.n	80091c8 <HAL_SD_WriteBlocks+0x1ec>
 80091c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d112      	bne.n	80091ee <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a48      	ldr	r2, [pc, #288]	; (80092f0 <HAL_SD_WriteBlocks+0x314>)
 80091ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091d6:	431a      	orrs	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e094      	b.n	8009318 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091f4:	f240 331a 	movw	r3, #794	; 0x31a
 80091f8:	4013      	ands	r3, r2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d091      	beq.n	8009122 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009208:	2b00      	cmp	r3, #0
 800920a:	d022      	beq.n	8009252 <HAL_SD_WriteBlocks+0x276>
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d91f      	bls.n	8009252 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009216:	2b03      	cmp	r3, #3
 8009218:	d01b      	beq.n	8009252 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4618      	mov	r0, r3
 8009220:	f001 fd20 	bl	800ac64 <SDMMC_CmdStopTransfer>
 8009224:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009228:	2b00      	cmp	r3, #0
 800922a:	d012      	beq.n	8009252 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a2f      	ldr	r2, [pc, #188]	; (80092f0 <HAL_SD_WriteBlocks+0x314>)
 8009232:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800923a:	431a      	orrs	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e062      	b.n	8009318 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009258:	f003 0308 	and.w	r3, r3, #8
 800925c:	2b00      	cmp	r3, #0
 800925e:	d012      	beq.n	8009286 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a22      	ldr	r2, [pc, #136]	; (80092f0 <HAL_SD_WriteBlocks+0x314>)
 8009266:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926c:	f043 0208 	orr.w	r2, r3, #8
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e048      	b.n	8009318 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d012      	beq.n	80092ba <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a15      	ldr	r2, [pc, #84]	; (80092f0 <HAL_SD_WriteBlocks+0x314>)
 800929a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a0:	f043 0202 	orr.w	r2, r3, #2
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e02e      	b.n	8009318 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c0:	f003 0310 	and.w	r3, r3, #16
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d015      	beq.n	80092f4 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a08      	ldr	r2, [pc, #32]	; (80092f0 <HAL_SD_WriteBlocks+0x314>)
 80092ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	f043 0210 	orr.w	r2, r3, #16
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e014      	b.n	8009318 <HAL_SD_WriteBlocks+0x33c>
 80092ee:	bf00      	nop
 80092f0:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f240 523a 	movw	r2, #1338	; 0x53a
 80092fc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2201      	movs	r2, #1
 8009302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	e006      	b.n	8009318 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
  }
}
 8009318:	4618      	mov	r0, r3
 800931a:	3748      	adds	r7, #72	; 0x48
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d008      	beq.n	800934e <HAL_SD_IRQHandler+0x2e>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fd5c 	bl	8009e04 <SD_Read_IT>
 800934c:	e165      	b.n	800961a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 808f 	beq.w	800947c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009366:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	6812      	ldr	r2, [r2, #0]
 8009372:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8009376:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800937a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 0201 	bic.w	r2, r2, #1
 800938a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f003 0308 	and.w	r3, r3, #8
 8009392:	2b00      	cmp	r3, #0
 8009394:	d039      	beq.n	800940a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d104      	bne.n	80093aa <HAL_SD_IRQHandler+0x8a>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f003 0320 	and.w	r3, r3, #32
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d011      	beq.n	80093ce <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f001 fc58 	bl	800ac64 <SDMMC_CmdStopTransfer>
 80093b4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d008      	beq.n	80093ce <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f92f 	bl	800962c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80093d6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d104      	bne.n	80093fa <HAL_SD_IRQHandler+0xda>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d003      	beq.n	8009402 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f003 fb8a 	bl	800cb14 <HAL_SD_RxCpltCallback>
 8009400:	e10b      	b.n	800961a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f003 fb7c 	bl	800cb00 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009408:	e107      	b.n	800961a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 8102 	beq.w	800961a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f003 0320 	and.w	r3, r3, #32
 800941c:	2b00      	cmp	r3, #0
 800941e:	d011      	beq.n	8009444 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4618      	mov	r0, r3
 8009426:	f001 fc1d 	bl	800ac64 <SDMMC_CmdStopTransfer>
 800942a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d008      	beq.n	8009444 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	431a      	orrs	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f8f4 	bl	800962c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b00      	cmp	r3, #0
 800944c:	f040 80e5 	bne.w	800961a <HAL_SD_IRQHandler+0x2fa>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f003 0302 	and.w	r3, r3, #2
 8009456:	2b00      	cmp	r3, #0
 8009458:	f040 80df 	bne.w	800961a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f022 0208 	bic.w	r2, r2, #8
 800946a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f003 fb43 	bl	800cb00 <HAL_SD_TxCpltCallback>
}
 800947a:	e0ce      	b.n	800961a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d008      	beq.n	800949c <HAL_SD_IRQHandler+0x17c>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f003 0308 	and.w	r3, r3, #8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d003      	beq.n	800949c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fd06 	bl	8009ea6 <SD_Write_IT>
 800949a:	e0be      	b.n	800961a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094a2:	f240 233a 	movw	r3, #570	; 0x23a
 80094a6:	4013      	ands	r3, r2
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 80b6 	beq.w	800961a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b4:	f003 0302 	and.w	r3, r3, #2
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d005      	beq.n	80094c8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c0:	f043 0202 	orr.w	r2, r3, #2
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ce:	f003 0308 	and.w	r3, r3, #8
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d005      	beq.n	80094e2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094da:	f043 0208 	orr.w	r2, r3, #8
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	f043 0220 	orr.w	r2, r3, #32
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009502:	f003 0310 	and.w	r3, r3, #16
 8009506:	2b00      	cmp	r3, #0
 8009508:	d005      	beq.n	8009516 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950e:	f043 0210 	orr.w	r2, r3, #16
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800951c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009520:	2b00      	cmp	r3, #0
 8009522:	d005      	beq.n	8009530 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	f043 0208 	orr.w	r2, r3, #8
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f240 723a 	movw	r2, #1850	; 0x73a
 8009538:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6812      	ldr	r2, [r2, #0]
 8009544:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8009548:	f023 0302 	bic.w	r3, r3, #2
 800954c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4618      	mov	r0, r3
 8009554:	f001 fb86 	bl	800ac64 <SDMMC_CmdStopTransfer>
 8009558:	4602      	mov	r2, r0
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f003 0308 	and.w	r3, r3, #8
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f855 	bl	800962c <HAL_SD_ErrorCallback>
}
 8009582:	e04a      	b.n	800961a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958a:	2b00      	cmp	r3, #0
 800958c:	d045      	beq.n	800961a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f003 0310 	and.w	r3, r3, #16
 8009594:	2b00      	cmp	r3, #0
 8009596:	d104      	bne.n	80095a2 <HAL_SD_IRQHandler+0x282>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f003 0320 	and.w	r3, r3, #32
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d011      	beq.n	80095c6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a6:	4a1f      	ldr	r2, [pc, #124]	; (8009624 <HAL_SD_IRQHandler+0x304>)
 80095a8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fc f8b5 	bl	800571e <HAL_DMA_Abort_IT>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d02f      	beq.n	800961a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fa2e 	bl	8009a20 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80095c4:	e029      	b.n	800961a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d104      	bne.n	80095da <HAL_SD_IRQHandler+0x2ba>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d011      	beq.n	80095fe <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095de:	4a12      	ldr	r2, [pc, #72]	; (8009628 <HAL_SD_IRQHandler+0x308>)
 80095e0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fc f899 	bl	800571e <HAL_DMA_Abort_IT>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d013      	beq.n	800961a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 fa49 	bl	8009a8e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80095fc:	e00d      	b.n	800961a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f003 fa6a 	bl	800caec <HAL_SD_AbortCallback>
}
 8009618:	e7ff      	b.n	800961a <HAL_SD_IRQHandler+0x2fa>
 800961a:	bf00      	nop
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	08009a21 	.word	0x08009a21
 8009628:	08009a8f 	.word	0x08009a8f

0800962c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800964e:	0f9b      	lsrs	r3, r3, #30
 8009650:	b2da      	uxtb	r2, r3
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800965a:	0e9b      	lsrs	r3, r3, #26
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	b2da      	uxtb	r2, r3
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800966c:	0e1b      	lsrs	r3, r3, #24
 800966e:	b2db      	uxtb	r3, r3
 8009670:	f003 0303 	and.w	r3, r3, #3
 8009674:	b2da      	uxtb	r2, r3
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800967e:	0c1b      	lsrs	r3, r3, #16
 8009680:	b2da      	uxtb	r2, r3
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800968a:	0a1b      	lsrs	r3, r3, #8
 800968c:	b2da      	uxtb	r2, r3
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009696:	b2da      	uxtb	r2, r3
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096a0:	0d1b      	lsrs	r3, r3, #20
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ac:	0c1b      	lsrs	r3, r3, #16
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	f003 030f 	and.w	r3, r3, #15
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096be:	0bdb      	lsrs	r3, r3, #15
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096d0:	0b9b      	lsrs	r3, r3, #14
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096e2:	0b5b      	lsrs	r3, r3, #13
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096f4:	0b1b      	lsrs	r3, r3, #12
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2200      	movs	r2, #0
 8009706:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970c:	2b00      	cmp	r3, #0
 800970e:	d163      	bne.n	80097d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009714:	009a      	lsls	r2, r3, #2
 8009716:	f640 73fc 	movw	r3, #4092	; 0xffc
 800971a:	4013      	ands	r3, r2
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009720:	0f92      	lsrs	r2, r2, #30
 8009722:	431a      	orrs	r2, r3
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800972c:	0edb      	lsrs	r3, r3, #27
 800972e:	b2db      	uxtb	r3, r3
 8009730:	f003 0307 	and.w	r3, r3, #7
 8009734:	b2da      	uxtb	r2, r3
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800973e:	0e1b      	lsrs	r3, r3, #24
 8009740:	b2db      	uxtb	r3, r3
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	b2da      	uxtb	r2, r3
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009750:	0d5b      	lsrs	r3, r3, #21
 8009752:	b2db      	uxtb	r3, r3
 8009754:	f003 0307 	and.w	r3, r3, #7
 8009758:	b2da      	uxtb	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009762:	0c9b      	lsrs	r3, r3, #18
 8009764:	b2db      	uxtb	r3, r3
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	b2da      	uxtb	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009774:	0bdb      	lsrs	r3, r3, #15
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f003 0307 	and.w	r3, r3, #7
 800977c:	b2da      	uxtb	r2, r3
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	1c5a      	adds	r2, r3, #1
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	7e1b      	ldrb	r3, [r3, #24]
 8009790:	b2db      	uxtb	r3, r3
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	3302      	adds	r3, #2
 8009798:	2201      	movs	r2, #1
 800979a:	fa02 f303 	lsl.w	r3, r2, r3
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80097a2:	fb02 f203 	mul.w	r2, r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	7a1b      	ldrb	r3, [r3, #8]
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	f003 030f 	and.w	r3, r3, #15
 80097b4:	2201      	movs	r2, #1
 80097b6:	409a      	lsls	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80097c4:	0a52      	lsrs	r2, r2, #9
 80097c6:	fb02 f203 	mul.w	r2, r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097d4:	661a      	str	r2, [r3, #96]	; 0x60
 80097d6:	e031      	b.n	800983c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d11d      	bne.n	800981c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097e4:	041b      	lsls	r3, r3, #16
 80097e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ee:	0c1b      	lsrs	r3, r3, #16
 80097f0:	431a      	orrs	r2, r3
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	3301      	adds	r3, #1
 80097fc:	029a      	lsls	r2, r3, #10
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009810:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	661a      	str	r2, [r3, #96]	; 0x60
 800981a:	e00f      	b.n	800983c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a58      	ldr	r2, [pc, #352]	; (8009984 <HAL_SD_GetCardCSD+0x344>)
 8009822:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009828:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e09d      	b.n	8009978 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009840:	0b9b      	lsrs	r3, r3, #14
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	b2da      	uxtb	r2, r3
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009852:	09db      	lsrs	r3, r3, #7
 8009854:	b2db      	uxtb	r3, r3
 8009856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800985a:	b2da      	uxtb	r2, r3
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009864:	b2db      	uxtb	r3, r3
 8009866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800986a:	b2da      	uxtb	r2, r3
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009874:	0fdb      	lsrs	r3, r3, #31
 8009876:	b2da      	uxtb	r2, r3
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009880:	0f5b      	lsrs	r3, r3, #29
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0303 	and.w	r3, r3, #3
 8009888:	b2da      	uxtb	r2, r3
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009892:	0e9b      	lsrs	r3, r3, #26
 8009894:	b2db      	uxtb	r3, r3
 8009896:	f003 0307 	and.w	r3, r3, #7
 800989a:	b2da      	uxtb	r2, r3
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a4:	0d9b      	lsrs	r3, r3, #22
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	f003 030f 	and.w	r3, r3, #15
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b6:	0d5b      	lsrs	r3, r3, #21
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d2:	0c1b      	lsrs	r3, r3, #16
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e6:	0bdb      	lsrs	r3, r3, #15
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fa:	0b9b      	lsrs	r3, r3, #14
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	b2da      	uxtb	r2, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800990e:	0b5b      	lsrs	r3, r3, #13
 8009910:	b2db      	uxtb	r3, r3
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	b2da      	uxtb	r2, r3
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009922:	0b1b      	lsrs	r3, r3, #12
 8009924:	b2db      	uxtb	r3, r3
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	b2da      	uxtb	r2, r3
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009936:	0a9b      	lsrs	r3, r3, #10
 8009938:	b2db      	uxtb	r3, r3
 800993a:	f003 0303 	and.w	r3, r3, #3
 800993e:	b2da      	uxtb	r2, r3
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994a:	0a1b      	lsrs	r3, r3, #8
 800994c:	b2db      	uxtb	r3, r3
 800994e:	f003 0303 	and.w	r3, r3, #3
 8009952:	b2da      	uxtb	r2, r3
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	b2db      	uxtb	r3, r3
 8009962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009966:	b2da      	uxtb	r2, r3
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	004005ff 	.word	0x004005ff

08009988 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80099ec:	f107 030c 	add.w	r3, r7, #12
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f9de 	bl	8009db4 <SD_SendStatus>
 80099f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d005      	beq.n	8009a0c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	431a      	orrs	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	0a5b      	lsrs	r3, r3, #9
 8009a10:	f003 030f 	and.w	r3, r3, #15
 8009a14:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009a16:	693b      	ldr	r3, [r7, #16]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a36:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f7ff ffd1 	bl	80099e0 <HAL_SD_GetCardState>
 8009a3e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2b06      	cmp	r3, #6
 8009a52:	d002      	beq.n	8009a5a <SD_DMATxAbort+0x3a>
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2b05      	cmp	r3, #5
 8009a58:	d10a      	bne.n	8009a70 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f001 f900 	bl	800ac64 <SDMMC_CmdStopTransfer>
 8009a64:	4602      	mov	r2, r0
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d103      	bne.n	8009a80 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f003 f837 	bl	800caec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009a7e:	e002      	b.n	8009a86 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f7ff fdd3 	bl	800962c <HAL_SD_ErrorCallback>
}
 8009a86:	bf00      	nop
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f240 523a 	movw	r2, #1338	; 0x53a
 8009aa4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f7ff ff9a 	bl	80099e0 <HAL_SD_GetCardState>
 8009aac:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b06      	cmp	r3, #6
 8009ac0:	d002      	beq.n	8009ac8 <SD_DMARxAbort+0x3a>
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	2b05      	cmp	r3, #5
 8009ac6:	d10a      	bne.n	8009ade <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f001 f8c9 	bl	800ac64 <SDMMC_CmdStopTransfer>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad8:	431a      	orrs	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d103      	bne.n	8009aee <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f003 f800 	bl	800caec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009aec:	e002      	b.n	8009af4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f7ff fd9c 	bl	800962c <HAL_SD_ErrorCallback>
}
 8009af4:	bf00      	nop
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009afc:	b5b0      	push	{r4, r5, r7, lr}
 8009afe:	b094      	sub	sp, #80	; 0x50
 8009b00:	af04      	add	r7, sp, #16
 8009b02:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009b04:	2301      	movs	r3, #1
 8009b06:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 ff7b 	bl	800aa08 <SDIO_GetPowerState>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d102      	bne.n	8009b1e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009b1c:	e0b7      	b.n	8009c8e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b22:	2b03      	cmp	r3, #3
 8009b24:	d02f      	beq.n	8009b86 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f001 f961 	bl	800adf2 <SDMMC_CmdSendCID>
 8009b30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <SD_InitCard+0x40>
    {
      return errorstate;
 8009b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b3a:	e0a8      	b.n	8009c8e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2100      	movs	r1, #0
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 ffa5 	bl	800aa92 <SDIO_GetResponse>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2104      	movs	r1, #4
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 ff9c 	bl	800aa92 <SDIO_GetResponse>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2108      	movs	r1, #8
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 ff93 	bl	800aa92 <SDIO_GetResponse>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	210c      	movs	r1, #12
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 ff8a 	bl	800aa92 <SDIO_GetResponse>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d00d      	beq.n	8009baa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f107 020e 	add.w	r2, r7, #14
 8009b96:	4611      	mov	r1, r2
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f001 f967 	bl	800ae6c <SDMMC_CmdSetRelAdd>
 8009b9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <SD_InitCard+0xae>
    {
      return errorstate;
 8009ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba8:	e071      	b.n	8009c8e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d036      	beq.n	8009c20 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009bb2:	89fb      	ldrh	r3, [r7, #14]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bc2:	041b      	lsls	r3, r3, #16
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	f001 f931 	bl	800ae2e <SDMMC_CmdSendCSD>
 8009bcc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd6:	e05a      	b.n	8009c8e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 ff57 	bl	800aa92 <SDIO_GetResponse>
 8009be4:	4602      	mov	r2, r0
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2104      	movs	r1, #4
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 ff4e 	bl	800aa92 <SDIO_GetResponse>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2108      	movs	r1, #8
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 ff45 	bl	800aa92 <SDIO_GetResponse>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	210c      	movs	r1, #12
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 ff3c 	bl	800aa92 <SDIO_GetResponse>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2104      	movs	r1, #4
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 ff33 	bl	800aa92 <SDIO_GetResponse>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	0d1a      	lsrs	r2, r3, #20
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c34:	f107 0310 	add.w	r3, r7, #16
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7ff fd00 	bl	8009640 <HAL_SD_GetCardCSD>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c4a:	e020      	b.n	8009c8e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6819      	ldr	r1, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c54:	041b      	lsls	r3, r3, #16
 8009c56:	f04f 0400 	mov.w	r4, #0
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	4623      	mov	r3, r4
 8009c5e:	4608      	mov	r0, r1
 8009c60:	f001 f822 	bl	800aca8 <SDMMC_CmdSelDesel>
 8009c64:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d001      	beq.n	8009c70 <SD_InitCard+0x174>
  {
    return errorstate;
 8009c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c6e:	e00e      	b.n	8009c8e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681d      	ldr	r5, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	466c      	mov	r4, sp
 8009c78:	f103 0210 	add.w	r2, r3, #16
 8009c7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c82:	3304      	adds	r3, #4
 8009c84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c86:	4628      	mov	r0, r5
 8009c88:	f000 fe66 	bl	800a958 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3740      	adds	r7, #64	; 0x40
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009c98 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	617b      	str	r3, [r7, #20]
 8009ca8:	2300      	movs	r3, #0
 8009caa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 f81c 	bl	800acee <SDMMC_CmdGoIdleState>
 8009cb6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d001      	beq.n	8009cc2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	e072      	b.n	8009da8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f001 f82f 	bl	800ad2a <SDMMC_CmdOperCond>
 8009ccc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00d      	beq.n	8009cf0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f001 f805 	bl	800acee <SDMMC_CmdGoIdleState>
 8009ce4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d004      	beq.n	8009cf6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	e05b      	b.n	8009da8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d137      	bne.n	8009d6e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2100      	movs	r1, #0
 8009d04:	4618      	mov	r0, r3
 8009d06:	f001 f82f 	bl	800ad68 <SDMMC_CmdAppCommand>
 8009d0a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d02d      	beq.n	8009d6e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d16:	e047      	b.n	8009da8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f001 f822 	bl	800ad68 <SDMMC_CmdAppCommand>
 8009d24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <SD_PowerON+0x98>
    {
      return errorstate;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	e03b      	b.n	8009da8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	491e      	ldr	r1, [pc, #120]	; (8009db0 <SD_PowerON+0x118>)
 8009d36:	4618      	mov	r0, r3
 8009d38:	f001 f838 	bl	800adac <SDMMC_CmdAppOperCommand>
 8009d3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d48:	e02e      	b.n	8009da8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2100      	movs	r1, #0
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fe9e 	bl	800aa92 <SDIO_GetResponse>
 8009d56:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	0fdb      	lsrs	r3, r3, #31
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d101      	bne.n	8009d64 <SD_PowerON+0xcc>
 8009d60:	2301      	movs	r3, #1
 8009d62:	e000      	b.n	8009d66 <SD_PowerON+0xce>
 8009d64:	2300      	movs	r3, #0
 8009d66:	613b      	str	r3, [r7, #16]

    count++;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d802      	bhi.n	8009d7e <SD_PowerON+0xe6>
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d0cc      	beq.n	8009d18 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d902      	bls.n	8009d8e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d8c:	e00c      	b.n	8009da8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	645a      	str	r2, [r3, #68]	; 0x44
 8009d9e:	e002      	b.n	8009da6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3718      	adds	r7, #24
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	c1100000 	.word	0xc1100000

08009db4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d102      	bne.n	8009dca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009dc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009dc8:	e018      	b.n	8009dfc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd2:	041b      	lsls	r3, r3, #16
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	f001 f869 	bl	800aeae <SDMMC_CmdSendStatus>
 8009ddc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	e009      	b.n	8009dfc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2100      	movs	r1, #0
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 fe4f 	bl	800aa92 <SDIO_GetResponse>
 8009df4:	4602      	mov	r2, r0
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e10:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e16:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d03f      	beq.n	8009e9e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009e1e:	2300      	movs	r3, #0
 8009e20:	617b      	str	r3, [r7, #20]
 8009e22:	e033      	b.n	8009e8c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 fdc0 	bl	800a9ae <SDIO_ReadFIFO>
 8009e2e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	3b01      	subs	r3, #1
 8009e42:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	0a1b      	lsrs	r3, r3, #8
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3301      	adds	r3, #1
 8009e52:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	3b01      	subs	r3, #1
 8009e58:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	0c1b      	lsrs	r3, r3, #16
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	3301      	adds	r3, #1
 8009e68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	0e1b      	lsrs	r3, r3, #24
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	3b01      	subs	r3, #1
 8009e84:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	617b      	str	r3, [r7, #20]
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	2b07      	cmp	r3, #7
 8009e90:	d9c8      	bls.n	8009e24 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009e9e:	bf00      	nop
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b086      	sub	sp, #24
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
 8009eb2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d043      	beq.n	8009f48 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	e037      	b.n	8009f36 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	021a      	lsls	r2, r3, #8
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	3b01      	subs	r3, #1
 8009eee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	041a      	lsls	r2, r3, #16
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	3301      	adds	r3, #1
 8009f00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	3b01      	subs	r3, #1
 8009f06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	061a      	lsls	r2, r3, #24
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	3301      	adds	r3, #1
 8009f18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f107 0208 	add.w	r2, r7, #8
 8009f28:	4611      	mov	r1, r2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 fd4c 	bl	800a9c8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	3301      	adds	r3, #1
 8009f34:	617b      	str	r3, [r7, #20]
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b07      	cmp	r3, #7
 8009f3a:	d9c4      	bls.n	8009ec6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009f48:	bf00      	nop
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e056      	b.n	800a010 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d106      	bne.n	8009f82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7fa ff8f 	bl	8004ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2202      	movs	r2, #2
 8009f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	431a      	orrs	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	431a      	orrs	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	431a      	orrs	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	431a      	orrs	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	ea42 0103 	orr.w	r1, r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	0c1b      	lsrs	r3, r3, #16
 8009fe0:	f003 0104 	and.w	r1, r3, #4
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	430a      	orrs	r2, r1
 8009fee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	69da      	ldr	r2, [r3, #28]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ffe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	4613      	mov	r3, r2
 800a026:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a032:	2b01      	cmp	r3, #1
 800a034:	d101      	bne.n	800a03a <HAL_SPI_Transmit+0x22>
 800a036:	2302      	movs	r3, #2
 800a038:	e11e      	b.n	800a278 <HAL_SPI_Transmit+0x260>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a042:	f7fb fa2d 	bl	80054a0 <HAL_GetTick>
 800a046:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a048:	88fb      	ldrh	r3, [r7, #6]
 800a04a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b01      	cmp	r3, #1
 800a056:	d002      	beq.n	800a05e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a058:	2302      	movs	r3, #2
 800a05a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a05c:	e103      	b.n	800a266 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <HAL_SPI_Transmit+0x52>
 800a064:	88fb      	ldrh	r3, [r7, #6]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d102      	bne.n	800a070 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a06e:	e0fa      	b.n	800a266 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2203      	movs	r2, #3
 800a074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	88fa      	ldrh	r2, [r7, #6]
 800a088:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	88fa      	ldrh	r2, [r7, #6]
 800a08e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0b6:	d107      	bne.n	800a0c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d2:	2b40      	cmp	r3, #64	; 0x40
 800a0d4:	d007      	beq.n	800a0e6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0ee:	d14b      	bne.n	800a188 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <HAL_SPI_Transmit+0xe6>
 800a0f8:	8afb      	ldrh	r3, [r7, #22]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d13e      	bne.n	800a17c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a102:	881a      	ldrh	r2, [r3, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10e:	1c9a      	adds	r2, r3, #2
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a118:	b29b      	uxth	r3, r3
 800a11a:	3b01      	subs	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a122:	e02b      	b.n	800a17c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f003 0302 	and.w	r3, r3, #2
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d112      	bne.n	800a158 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a136:	881a      	ldrh	r2, [r3, #0]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a142:	1c9a      	adds	r2, r3, #2
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	3b01      	subs	r3, #1
 800a150:	b29a      	uxth	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	86da      	strh	r2, [r3, #54]	; 0x36
 800a156:	e011      	b.n	800a17c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a158:	f7fb f9a2 	bl	80054a0 <HAL_GetTick>
 800a15c:	4602      	mov	r2, r0
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	429a      	cmp	r2, r3
 800a166:	d803      	bhi.n	800a170 <HAL_SPI_Transmit+0x158>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16e:	d102      	bne.n	800a176 <HAL_SPI_Transmit+0x15e>
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d102      	bne.n	800a17c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a17a:	e074      	b.n	800a266 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a180:	b29b      	uxth	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1ce      	bne.n	800a124 <HAL_SPI_Transmit+0x10c>
 800a186:	e04c      	b.n	800a222 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <HAL_SPI_Transmit+0x17e>
 800a190:	8afb      	ldrh	r3, [r7, #22]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d140      	bne.n	800a218 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	330c      	adds	r3, #12
 800a1a0:	7812      	ldrb	r2, [r2, #0]
 800a1a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a8:	1c5a      	adds	r2, r3, #1
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a1bc:	e02c      	b.n	800a218 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	f003 0302 	and.w	r3, r3, #2
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d113      	bne.n	800a1f4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	330c      	adds	r3, #12
 800a1d6:	7812      	ldrb	r2, [r2, #0]
 800a1d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	86da      	strh	r2, [r3, #54]	; 0x36
 800a1f2:	e011      	b.n	800a218 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1f4:	f7fb f954 	bl	80054a0 <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d803      	bhi.n	800a20c <HAL_SPI_Transmit+0x1f4>
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20a:	d102      	bne.n	800a212 <HAL_SPI_Transmit+0x1fa>
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d102      	bne.n	800a218 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a216:	e026      	b.n	800a266 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1cd      	bne.n	800a1be <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a222:	69ba      	ldr	r2, [r7, #24]
 800a224:	6839      	ldr	r1, [r7, #0]
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f000 fb54 	bl	800a8d4 <SPI_EndRxTxTransaction>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d002      	beq.n	800a238 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2220      	movs	r2, #32
 800a236:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10a      	bne.n	800a256 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a240:	2300      	movs	r3, #0
 800a242:	613b      	str	r3, [r7, #16]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	613b      	str	r3, [r7, #16]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	613b      	str	r3, [r7, #16]
 800a254:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	77fb      	strb	r3, [r7, #31]
 800a262:	e000      	b.n	800a266 <HAL_SPI_Transmit+0x24e>
  }

error:
 800a264:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a276:	7ffb      	ldrb	r3, [r7, #31]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3720      	adds	r7, #32
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08c      	sub	sp, #48	; 0x30
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a28e:	2301      	movs	r3, #1
 800a290:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d101      	bne.n	800a2a6 <HAL_SPI_TransmitReceive+0x26>
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	e18a      	b.n	800a5bc <HAL_SPI_TransmitReceive+0x33c>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2ae:	f7fb f8f7 	bl	80054a0 <HAL_GetTick>
 800a2b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a2c4:	887b      	ldrh	r3, [r7, #2]
 800a2c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a2c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d00f      	beq.n	800a2f0 <HAL_SPI_TransmitReceive+0x70>
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2d6:	d107      	bne.n	800a2e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d103      	bne.n	800a2e8 <HAL_SPI_TransmitReceive+0x68>
 800a2e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2e4:	2b04      	cmp	r3, #4
 800a2e6:	d003      	beq.n	800a2f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a2ee:	e15b      	b.n	800a5a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <HAL_SPI_TransmitReceive+0x82>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <HAL_SPI_TransmitReceive+0x82>
 800a2fc:	887b      	ldrh	r3, [r7, #2]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d103      	bne.n	800a30a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a308:	e14e      	b.n	800a5a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b04      	cmp	r3, #4
 800a314:	d003      	beq.n	800a31e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2205      	movs	r2, #5
 800a31a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	887a      	ldrh	r2, [r7, #2]
 800a32e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	887a      	ldrh	r2, [r7, #2]
 800a334:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	887a      	ldrh	r2, [r7, #2]
 800a340:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	887a      	ldrh	r2, [r7, #2]
 800a346:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a35e:	2b40      	cmp	r3, #64	; 0x40
 800a360:	d007      	beq.n	800a372 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a370:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a37a:	d178      	bne.n	800a46e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <HAL_SPI_TransmitReceive+0x10a>
 800a384:	8b7b      	ldrh	r3, [r7, #26]
 800a386:	2b01      	cmp	r3, #1
 800a388:	d166      	bne.n	800a458 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38e:	881a      	ldrh	r2, [r3, #0]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a39a:	1c9a      	adds	r2, r3, #2
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3ae:	e053      	b.n	800a458 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 0302 	and.w	r3, r3, #2
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d11b      	bne.n	800a3f6 <HAL_SPI_TransmitReceive+0x176>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d016      	beq.n	800a3f6 <HAL_SPI_TransmitReceive+0x176>
 800a3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d113      	bne.n	800a3f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d2:	881a      	ldrh	r2, [r3, #0]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3de:	1c9a      	adds	r2, r3, #2
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b01      	cmp	r3, #1
 800a402:	d119      	bne.n	800a438 <HAL_SPI_TransmitReceive+0x1b8>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a408:	b29b      	uxth	r3, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d014      	beq.n	800a438 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68da      	ldr	r2, [r3, #12]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a418:	b292      	uxth	r2, r2
 800a41a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a420:	1c9a      	adds	r2, r3, #2
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	3b01      	subs	r3, #1
 800a42e:	b29a      	uxth	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a434:	2301      	movs	r3, #1
 800a436:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a438:	f7fb f832 	bl	80054a0 <HAL_GetTick>
 800a43c:	4602      	mov	r2, r0
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a444:	429a      	cmp	r2, r3
 800a446:	d807      	bhi.n	800a458 <HAL_SPI_TransmitReceive+0x1d8>
 800a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44e:	d003      	beq.n	800a458 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a450:	2303      	movs	r3, #3
 800a452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a456:	e0a7      	b.n	800a5a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1a6      	bne.n	800a3b0 <HAL_SPI_TransmitReceive+0x130>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a466:	b29b      	uxth	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1a1      	bne.n	800a3b0 <HAL_SPI_TransmitReceive+0x130>
 800a46c:	e07c      	b.n	800a568 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <HAL_SPI_TransmitReceive+0x1fc>
 800a476:	8b7b      	ldrh	r3, [r7, #26]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d16b      	bne.n	800a554 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	330c      	adds	r3, #12
 800a486:	7812      	ldrb	r2, [r2, #0]
 800a488:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a498:	b29b      	uxth	r3, r3
 800a49a:	3b01      	subs	r3, #1
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4a2:	e057      	b.n	800a554 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f003 0302 	and.w	r3, r3, #2
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d11c      	bne.n	800a4ec <HAL_SPI_TransmitReceive+0x26c>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d017      	beq.n	800a4ec <HAL_SPI_TransmitReceive+0x26c>
 800a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d114      	bne.n	800a4ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	330c      	adds	r3, #12
 800a4cc:	7812      	ldrb	r2, [r2, #0]
 800a4ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d4:	1c5a      	adds	r2, r3, #1
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d119      	bne.n	800a52e <HAL_SPI_TransmitReceive+0x2ae>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	2b00      	cmp	r3, #0
 800a502:	d014      	beq.n	800a52e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68da      	ldr	r2, [r3, #12]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50e:	b2d2      	uxtb	r2, r2
 800a510:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a516:	1c5a      	adds	r2, r3, #1
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a520:	b29b      	uxth	r3, r3
 800a522:	3b01      	subs	r3, #1
 800a524:	b29a      	uxth	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a52a:	2301      	movs	r3, #1
 800a52c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a52e:	f7fa ffb7 	bl	80054a0 <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d803      	bhi.n	800a546 <HAL_SPI_TransmitReceive+0x2c6>
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a544:	d102      	bne.n	800a54c <HAL_SPI_TransmitReceive+0x2cc>
 800a546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d103      	bne.n	800a554 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a552:	e029      	b.n	800a5a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a558:	b29b      	uxth	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1a2      	bne.n	800a4a4 <HAL_SPI_TransmitReceive+0x224>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a562:	b29b      	uxth	r3, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	d19d      	bne.n	800a4a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a56a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f000 f9b1 	bl	800a8d4 <SPI_EndRxTxTransaction>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d006      	beq.n	800a586 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2220      	movs	r2, #32
 800a582:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a584:	e010      	b.n	800a5a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10b      	bne.n	800a5a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a58e:	2300      	movs	r3, #0
 800a590:	617b      	str	r3, [r7, #20]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	617b      	str	r3, [r7, #20]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	617b      	str	r3, [r7, #20]
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	e000      	b.n	800a5a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a5a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a5b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3730      	adds	r7, #48	; 0x30
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b088      	sub	sp, #32
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	099b      	lsrs	r3, r3, #6
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10f      	bne.n	800a608 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00a      	beq.n	800a608 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	099b      	lsrs	r3, r3, #6
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d004      	beq.n	800a608 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	4798      	blx	r3
    return;
 800a606:	e0d8      	b.n	800a7ba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	085b      	lsrs	r3, r3, #1
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00a      	beq.n	800a62a <HAL_SPI_IRQHandler+0x66>
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	09db      	lsrs	r3, r3, #7
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d004      	beq.n	800a62a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	4798      	blx	r3
    return;
 800a628:	e0c7      	b.n	800a7ba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	095b      	lsrs	r3, r3, #5
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10c      	bne.n	800a650 <HAL_SPI_IRQHandler+0x8c>
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	099b      	lsrs	r3, r3, #6
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d106      	bne.n	800a650 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	0a1b      	lsrs	r3, r3, #8
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 80b5 	beq.w	800a7ba <HAL_SPI_IRQHandler+0x1f6>
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	095b      	lsrs	r3, r3, #5
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f000 80ae 	beq.w	800a7ba <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	099b      	lsrs	r3, r3, #6
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	2b00      	cmp	r3, #0
 800a668:	d023      	beq.n	800a6b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b03      	cmp	r3, #3
 800a674:	d011      	beq.n	800a69a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a67a:	f043 0204 	orr.w	r2, r3, #4
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a682:	2300      	movs	r3, #0
 800a684:	617b      	str	r3, [r7, #20]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	617b      	str	r3, [r7, #20]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	617b      	str	r3, [r7, #20]
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	e00b      	b.n	800a6b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a69a:	2300      	movs	r3, #0
 800a69c:	613b      	str	r3, [r7, #16]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	613b      	str	r3, [r7, #16]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	613b      	str	r3, [r7, #16]
 800a6ae:	693b      	ldr	r3, [r7, #16]
        return;
 800a6b0:	e083      	b.n	800a7ba <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	095b      	lsrs	r3, r3, #5
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d014      	beq.n	800a6e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c2:	f043 0201 	orr.w	r2, r3, #1
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	60fb      	str	r3, [r7, #12]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	0a1b      	lsrs	r3, r3, #8
 800a6ec:	f003 0301 	and.w	r3, r3, #1
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00c      	beq.n	800a70e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f8:	f043 0208 	orr.w	r2, r3, #8
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a700:	2300      	movs	r3, #0
 800a702:	60bb      	str	r3, [r7, #8]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	60bb      	str	r3, [r7, #8]
 800a70c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a712:	2b00      	cmp	r3, #0
 800a714:	d050      	beq.n	800a7b8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a724:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	f003 0302 	and.w	r3, r3, #2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d104      	bne.n	800a742 <HAL_SPI_IRQHandler+0x17e>
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d034      	beq.n	800a7ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0203 	bic.w	r2, r2, #3
 800a750:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a756:	2b00      	cmp	r3, #0
 800a758:	d011      	beq.n	800a77e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a75e:	4a18      	ldr	r2, [pc, #96]	; (800a7c0 <HAL_SPI_IRQHandler+0x1fc>)
 800a760:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a766:	4618      	mov	r0, r3
 800a768:	f7fa ffd9 	bl	800571e <HAL_DMA_Abort_IT>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d005      	beq.n	800a77e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a776:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a782:	2b00      	cmp	r3, #0
 800a784:	d016      	beq.n	800a7b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a78a:	4a0d      	ldr	r2, [pc, #52]	; (800a7c0 <HAL_SPI_IRQHandler+0x1fc>)
 800a78c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a792:	4618      	mov	r0, r3
 800a794:	f7fa ffc3 	bl	800571e <HAL_DMA_Abort_IT>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a7aa:	e003      	b.n	800a7b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f809 	bl	800a7c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a7b2:	e000      	b.n	800a7b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a7b4:	bf00      	nop
    return;
 800a7b6:	bf00      	nop
 800a7b8:	bf00      	nop
  }
}
 800a7ba:	3720      	adds	r7, #32
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	0800a7d9 	.word	0x0800a7d9

0800a7c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f7ff ffe6 	bl	800a7c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7f8:	bf00      	nop
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	4613      	mov	r3, r2
 800a80e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a810:	e04c      	b.n	800a8ac <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a818:	d048      	beq.n	800a8ac <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a81a:	f7fa fe41 	bl	80054a0 <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	429a      	cmp	r2, r3
 800a828:	d902      	bls.n	800a830 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d13d      	bne.n	800a8ac <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a83e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a848:	d111      	bne.n	800a86e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a852:	d004      	beq.n	800a85e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a85c:	d107      	bne.n	800a86e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a86c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a876:	d10f      	bne.n	800a898 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a886:	601a      	str	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a896:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e00f      	b.n	800a8cc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689a      	ldr	r2, [r3, #8]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	bf0c      	ite	eq
 800a8bc:	2301      	moveq	r3, #1
 800a8be:	2300      	movne	r3, #0
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	79fb      	ldrb	r3, [r7, #7]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d1a3      	bne.n	800a812 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b088      	sub	sp, #32
 800a8d8:	af02      	add	r7, sp, #8
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a8e0:	4b1b      	ldr	r3, [pc, #108]	; (800a950 <SPI_EndRxTxTransaction+0x7c>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a1b      	ldr	r2, [pc, #108]	; (800a954 <SPI_EndRxTxTransaction+0x80>)
 800a8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ea:	0d5b      	lsrs	r3, r3, #21
 800a8ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a8f0:	fb02 f303 	mul.w	r3, r2, r3
 800a8f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8fe:	d112      	bne.n	800a926 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2200      	movs	r2, #0
 800a908:	2180      	movs	r1, #128	; 0x80
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7ff ff78 	bl	800a800 <SPI_WaitFlagStateUntilTimeout>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d016      	beq.n	800a944 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91a:	f043 0220 	orr.w	r2, r3, #32
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e00f      	b.n	800a946 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00a      	beq.n	800a942 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	3b01      	subs	r3, #1
 800a930:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a93c:	2b80      	cmp	r3, #128	; 0x80
 800a93e:	d0f2      	beq.n	800a926 <SPI_EndRxTxTransaction+0x52>
 800a940:	e000      	b.n	800a944 <SPI_EndRxTxTransaction+0x70>
        break;
 800a942:	bf00      	nop
  }

  return HAL_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3718      	adds	r7, #24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	2000004c 	.word	0x2000004c
 800a954:	165e9f81 	.word	0x165e9f81

0800a958 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a958:	b084      	sub	sp, #16
 800a95a:	b480      	push	{r7}
 800a95c:	b085      	sub	sp, #20
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	f107 001c 	add.w	r0, r7, #28
 800a966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a96e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a970:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a972:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a976:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a978:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a97a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a97e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a982:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	4313      	orrs	r3, r2
 800a988:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a992:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	431a      	orrs	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	b004      	add	sp, #16
 800a9ac:	4770      	bx	lr

0800a9ae <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b083      	sub	sp, #12
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2203      	movs	r2, #3
 800a9f6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a9f8:	2002      	movs	r0, #2
 800a9fa:	f7fa fd5d 	bl	80054b8 <HAL_Delay>
  
  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 0303 	and.w	r3, r3, #3
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa42:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aa48:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aa4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800aa5e:	f023 030f 	bic.w	r3, r3, #15
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	431a      	orrs	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	b2db      	uxtb	r3, r3
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b085      	sub	sp, #20
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	3314      	adds	r3, #20
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
}  
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	685a      	ldr	r2, [r3, #4]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aade:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aae4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aaea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	431a      	orrs	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ab02:	2300      	movs	r3, #0

}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3714      	adds	r7, #20
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ab1e:	2310      	movs	r3, #16
 800ab20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab22:	2340      	movs	r3, #64	; 0x40
 800ab24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab26:	2300      	movs	r3, #0
 800ab28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab30:	f107 0308 	add.w	r3, r7, #8
 800ab34:	4619      	mov	r1, r3
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7ff ff74 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ab3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab40:	2110      	movs	r1, #16
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f9fe 	bl	800af44 <SDMMC_GetCmdResp1>
 800ab48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab4a:	69fb      	ldr	r3, [r7, #28]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3720      	adds	r7, #32
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b088      	sub	sp, #32
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ab62:	2311      	movs	r3, #17
 800ab64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab66:	2340      	movs	r3, #64	; 0x40
 800ab68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab74:	f107 0308 	add.w	r3, r7, #8
 800ab78:	4619      	mov	r1, r3
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7ff ff52 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ab80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab84:	2111      	movs	r1, #17
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f9dc 	bl	800af44 <SDMMC_GetCmdResp1>
 800ab8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab8e:	69fb      	ldr	r3, [r7, #28]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3720      	adds	r7, #32
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b088      	sub	sp, #32
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aba6:	2312      	movs	r3, #18
 800aba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abaa:	2340      	movs	r3, #64	; 0x40
 800abac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abae:	2300      	movs	r3, #0
 800abb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abb8:	f107 0308 	add.w	r3, r7, #8
 800abbc:	4619      	mov	r1, r3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7ff ff30 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800abc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abc8:	2112      	movs	r1, #18
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f9ba 	bl	800af44 <SDMMC_GetCmdResp1>
 800abd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abd2:	69fb      	ldr	r3, [r7, #28]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3720      	adds	r7, #32
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b088      	sub	sp, #32
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800abea:	2318      	movs	r3, #24
 800abec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abee:	2340      	movs	r3, #64	; 0x40
 800abf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abf2:	2300      	movs	r3, #0
 800abf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abfc:	f107 0308 	add.w	r3, r7, #8
 800ac00:	4619      	mov	r1, r3
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f7ff ff0e 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ac08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac0c:	2118      	movs	r1, #24
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f998 	bl	800af44 <SDMMC_GetCmdResp1>
 800ac14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac16:	69fb      	ldr	r3, [r7, #28]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3720      	adds	r7, #32
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ac2e:	2319      	movs	r3, #25
 800ac30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac32:	2340      	movs	r3, #64	; 0x40
 800ac34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac36:	2300      	movs	r3, #0
 800ac38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac40:	f107 0308 	add.w	r3, r7, #8
 800ac44:	4619      	mov	r1, r3
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff feec 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ac4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac50:	2119      	movs	r1, #25
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f976 	bl	800af44 <SDMMC_GetCmdResp1>
 800ac58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac5a:	69fb      	ldr	r3, [r7, #28]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3720      	adds	r7, #32
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ac70:	230c      	movs	r3, #12
 800ac72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac74:	2340      	movs	r3, #64	; 0x40
 800ac76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac82:	f107 0308 	add.w	r3, r7, #8
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff fecb 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ac8e:	4a05      	ldr	r2, [pc, #20]	; (800aca4 <SDMMC_CmdStopTransfer+0x40>)
 800ac90:	210c      	movs	r1, #12
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f956 	bl	800af44 <SDMMC_GetCmdResp1>
 800ac98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3720      	adds	r7, #32
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	05f5e100 	.word	0x05f5e100

0800aca8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b08a      	sub	sp, #40	; 0x28
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800acb8:	2307      	movs	r3, #7
 800acba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acbc:	2340      	movs	r3, #64	; 0x40
 800acbe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acc0:	2300      	movs	r3, #0
 800acc2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acc8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acca:	f107 0310 	add.w	r3, r7, #16
 800acce:	4619      	mov	r1, r3
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f7ff fea7 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800acd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800acda:	2107      	movs	r1, #7
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f000 f931 	bl	800af44 <SDMMC_GetCmdResp1>
 800ace2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3728      	adds	r7, #40	; 0x28
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b088      	sub	sp, #32
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800acfe:	2300      	movs	r3, #0
 800ad00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad0c:	f107 0308 	add.w	r3, r7, #8
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7ff fe86 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f8eb 	bl	800aef4 <SDMMC_GetCmdError>
 800ad1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad20:	69fb      	ldr	r3, [r7, #28]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3720      	adds	r7, #32
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b088      	sub	sp, #32
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ad32:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ad36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ad38:	2308      	movs	r3, #8
 800ad3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad3c:	2340      	movs	r3, #64	; 0x40
 800ad3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad40:	2300      	movs	r3, #0
 800ad42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad4a:	f107 0308 	add.w	r3, r7, #8
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7ff fe67 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fad4 	bl	800b304 <SDMMC_GetCmdResp7>
 800ad5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad5e:	69fb      	ldr	r3, [r7, #28]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3720      	adds	r7, #32
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ad76:	2337      	movs	r3, #55	; 0x37
 800ad78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad7a:	2340      	movs	r3, #64	; 0x40
 800ad7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad88:	f107 0308 	add.w	r3, r7, #8
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7ff fe48 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ad94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad98:	2137      	movs	r1, #55	; 0x37
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f8d2 	bl	800af44 <SDMMC_GetCmdResp1>
 800ada0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ada2:	69fb      	ldr	r3, [r7, #28]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3720      	adds	r7, #32
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800adc2:	2329      	movs	r3, #41	; 0x29
 800adc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800adc6:	2340      	movs	r3, #64	; 0x40
 800adc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800adca:	2300      	movs	r3, #0
 800adcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800add2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800add4:	f107 0308 	add.w	r3, r7, #8
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7ff fe22 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f9e1 	bl	800b1a8 <SDMMC_GetCmdResp3>
 800ade6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ade8:	69fb      	ldr	r3, [r7, #28]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3720      	adds	r7, #32
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b088      	sub	sp, #32
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800adfe:	2302      	movs	r3, #2
 800ae00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ae02:	23c0      	movs	r3, #192	; 0xc0
 800ae04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae06:	2300      	movs	r3, #0
 800ae08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae10:	f107 0308 	add.w	r3, r7, #8
 800ae14:	4619      	mov	r1, r3
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7ff fe04 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 f97d 	bl	800b11c <SDMMC_GetCmdResp2>
 800ae22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae24:	69fb      	ldr	r3, [r7, #28]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3720      	adds	r7, #32
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b088      	sub	sp, #32
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ae3c:	2309      	movs	r3, #9
 800ae3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ae40:	23c0      	movs	r3, #192	; 0xc0
 800ae42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae44:	2300      	movs	r3, #0
 800ae46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae4e:	f107 0308 	add.w	r3, r7, #8
 800ae52:	4619      	mov	r1, r3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7ff fde5 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f95e 	bl	800b11c <SDMMC_GetCmdResp2>
 800ae60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae62:	69fb      	ldr	r3, [r7, #28]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3720      	adds	r7, #32
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b088      	sub	sp, #32
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae76:	2300      	movs	r3, #0
 800ae78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae7e:	2340      	movs	r3, #64	; 0x40
 800ae80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae82:	2300      	movs	r3, #0
 800ae84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae8c:	f107 0308 	add.w	r3, r7, #8
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff fdc6 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	2103      	movs	r1, #3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f9bd 	bl	800b21c <SDMMC_GetCmdResp6>
 800aea2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aea4:	69fb      	ldr	r3, [r7, #28]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3720      	adds	r7, #32
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b088      	sub	sp, #32
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aebc:	230d      	movs	r3, #13
 800aebe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aec0:	2340      	movs	r3, #64	; 0x40
 800aec2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aec4:	2300      	movs	r3, #0
 800aec6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aecc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aece:	f107 0308 	add.w	r3, r7, #8
 800aed2:	4619      	mov	r1, r3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff fda5 	bl	800aa24 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800aeda:	f241 3288 	movw	r2, #5000	; 0x1388
 800aede:	210d      	movs	r1, #13
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f82f 	bl	800af44 <SDMMC_GetCmdResp1>
 800aee6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aee8:	69fb      	ldr	r3, [r7, #28]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3720      	adds	r7, #32
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
	...

0800aef4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800aef4:	b490      	push	{r4, r7}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aefc:	4b0f      	ldr	r3, [pc, #60]	; (800af3c <SDMMC_GetCmdError+0x48>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a0f      	ldr	r2, [pc, #60]	; (800af40 <SDMMC_GetCmdError+0x4c>)
 800af02:	fba2 2303 	umull	r2, r3, r2, r3
 800af06:	0a5b      	lsrs	r3, r3, #9
 800af08:	f241 3288 	movw	r2, #5000	; 0x1388
 800af0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800af10:	4623      	mov	r3, r4
 800af12:	1e5c      	subs	r4, r3, #1
 800af14:	2b00      	cmp	r3, #0
 800af16:	d102      	bne.n	800af1e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af1c:	e009      	b.n	800af32 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0f2      	beq.n	800af10 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	22c5      	movs	r2, #197	; 0xc5
 800af2e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bc90      	pop	{r4, r7}
 800af3a:	4770      	bx	lr
 800af3c:	2000004c 	.word	0x2000004c
 800af40:	10624dd3 	.word	0x10624dd3

0800af44 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800af44:	b590      	push	{r4, r7, lr}
 800af46:	b087      	sub	sp, #28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	460b      	mov	r3, r1
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800af52:	4b6f      	ldr	r3, [pc, #444]	; (800b110 <SDMMC_GetCmdResp1+0x1cc>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a6f      	ldr	r2, [pc, #444]	; (800b114 <SDMMC_GetCmdResp1+0x1d0>)
 800af58:	fba2 2303 	umull	r2, r3, r2, r3
 800af5c:	0a5b      	lsrs	r3, r3, #9
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800af64:	4623      	mov	r3, r4
 800af66:	1e5c      	subs	r4, r3, #1
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d102      	bne.n	800af72 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af70:	e0c9      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af76:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0f0      	beq.n	800af64 <SDMMC_GetCmdResp1+0x20>
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1eb      	bne.n	800af64 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af90:	f003 0304 	and.w	r3, r3, #4
 800af94:	2b00      	cmp	r3, #0
 800af96:	d004      	beq.n	800afa2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2204      	movs	r2, #4
 800af9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af9e:	2304      	movs	r3, #4
 800afa0:	e0b1      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d004      	beq.n	800afb8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2201      	movs	r2, #1
 800afb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e0a6      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	22c5      	movs	r2, #197	; 0xc5
 800afbc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f7ff fd5a 	bl	800aa78 <SDIO_GetCommandResponse>
 800afc4:	4603      	mov	r3, r0
 800afc6:	461a      	mov	r2, r3
 800afc8:	7afb      	ldrb	r3, [r7, #11]
 800afca:	4293      	cmp	r3, r2
 800afcc:	d001      	beq.n	800afd2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afce:	2301      	movs	r3, #1
 800afd0:	e099      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800afd2:	2100      	movs	r1, #0
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7ff fd5c 	bl	800aa92 <SDIO_GetResponse>
 800afda:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	4b4e      	ldr	r3, [pc, #312]	; (800b118 <SDMMC_GetCmdResp1+0x1d4>)
 800afe0:	4013      	ands	r3, r2
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800afe6:	2300      	movs	r3, #0
 800afe8:	e08d      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	da02      	bge.n	800aff6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aff0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aff4:	e087      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b000:	2340      	movs	r3, #64	; 0x40
 800b002:	e080      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b00e:	2380      	movs	r3, #128	; 0x80
 800b010:	e079      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b01c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b020:	e071      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b02c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b030:	e069      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b03c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b040:	e061      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b04c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b050:	e059      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b05c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b060:	e051      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d002      	beq.n	800b072 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b06c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b070:	e049      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b07c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b080:	e041      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b08c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b090:	e039      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b09c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b0a0:	e031      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b0ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b0b0:	e029      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b0bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b0c0:	e021      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b0cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b0d0:	e019      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b0dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0e0:	e011      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b0ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0f0:	e009      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	f003 0308 	and.w	r3, r3, #8
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b0fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b100:	e001      	b.n	800b106 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b106:	4618      	mov	r0, r3
 800b108:	371c      	adds	r7, #28
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd90      	pop	{r4, r7, pc}
 800b10e:	bf00      	nop
 800b110:	2000004c 	.word	0x2000004c
 800b114:	10624dd3 	.word	0x10624dd3
 800b118:	fdffe008 	.word	0xfdffe008

0800b11c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b11c:	b490      	push	{r4, r7}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b124:	4b1e      	ldr	r3, [pc, #120]	; (800b1a0 <SDMMC_GetCmdResp2+0x84>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a1e      	ldr	r2, [pc, #120]	; (800b1a4 <SDMMC_GetCmdResp2+0x88>)
 800b12a:	fba2 2303 	umull	r2, r3, r2, r3
 800b12e:	0a5b      	lsrs	r3, r3, #9
 800b130:	f241 3288 	movw	r2, #5000	; 0x1388
 800b134:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b138:	4623      	mov	r3, r4
 800b13a:	1e5c      	subs	r4, r3, #1
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d102      	bne.n	800b146 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b140:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b144:	e026      	b.n	800b194 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b14a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b152:	2b00      	cmp	r3, #0
 800b154:	d0f0      	beq.n	800b138 <SDMMC_GetCmdResp2+0x1c>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1eb      	bne.n	800b138 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b164:	f003 0304 	and.w	r3, r3, #4
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d004      	beq.n	800b176 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2204      	movs	r2, #4
 800b170:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b172:	2304      	movs	r3, #4
 800b174:	e00e      	b.n	800b194 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b17a:	f003 0301 	and.w	r3, r3, #1
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d004      	beq.n	800b18c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b188:	2301      	movs	r3, #1
 800b18a:	e003      	b.n	800b194 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	22c5      	movs	r2, #197	; 0xc5
 800b190:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bc90      	pop	{r4, r7}
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	2000004c 	.word	0x2000004c
 800b1a4:	10624dd3 	.word	0x10624dd3

0800b1a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b1a8:	b490      	push	{r4, r7}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1b0:	4b18      	ldr	r3, [pc, #96]	; (800b214 <SDMMC_GetCmdResp3+0x6c>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a18      	ldr	r2, [pc, #96]	; (800b218 <SDMMC_GetCmdResp3+0x70>)
 800b1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ba:	0a5b      	lsrs	r3, r3, #9
 800b1bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b1c4:	4623      	mov	r3, r4
 800b1c6:	1e5c      	subs	r4, r3, #1
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d102      	bne.n	800b1d2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1d0:	e01b      	b.n	800b20a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d0f0      	beq.n	800b1c4 <SDMMC_GetCmdResp3+0x1c>
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d1eb      	bne.n	800b1c4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f0:	f003 0304 	and.w	r3, r3, #4
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d004      	beq.n	800b202 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2204      	movs	r2, #4
 800b1fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1fe:	2304      	movs	r3, #4
 800b200:	e003      	b.n	800b20a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	22c5      	movs	r2, #197	; 0xc5
 800b206:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bc90      	pop	{r4, r7}
 800b212:	4770      	bx	lr
 800b214:	2000004c 	.word	0x2000004c
 800b218:	10624dd3 	.word	0x10624dd3

0800b21c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b21c:	b590      	push	{r4, r7, lr}
 800b21e:	b087      	sub	sp, #28
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	460b      	mov	r3, r1
 800b226:	607a      	str	r2, [r7, #4]
 800b228:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b22a:	4b34      	ldr	r3, [pc, #208]	; (800b2fc <SDMMC_GetCmdResp6+0xe0>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a34      	ldr	r2, [pc, #208]	; (800b300 <SDMMC_GetCmdResp6+0xe4>)
 800b230:	fba2 2303 	umull	r2, r3, r2, r3
 800b234:	0a5b      	lsrs	r3, r3, #9
 800b236:	f241 3288 	movw	r2, #5000	; 0x1388
 800b23a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b23e:	4623      	mov	r3, r4
 800b240:	1e5c      	subs	r4, r3, #1
 800b242:	2b00      	cmp	r3, #0
 800b244:	d102      	bne.n	800b24c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b246:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b24a:	e052      	b.n	800b2f2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b250:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d0f0      	beq.n	800b23e <SDMMC_GetCmdResp6+0x22>
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1eb      	bne.n	800b23e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b26a:	f003 0304 	and.w	r3, r3, #4
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d004      	beq.n	800b27c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2204      	movs	r2, #4
 800b276:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b278:	2304      	movs	r3, #4
 800b27a:	e03a      	b.n	800b2f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	2b00      	cmp	r3, #0
 800b286:	d004      	beq.n	800b292 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2201      	movs	r2, #1
 800b28c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b28e:	2301      	movs	r3, #1
 800b290:	e02f      	b.n	800b2f2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f7ff fbf0 	bl	800aa78 <SDIO_GetCommandResponse>
 800b298:	4603      	mov	r3, r0
 800b29a:	461a      	mov	r2, r3
 800b29c:	7afb      	ldrb	r3, [r7, #11]
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d001      	beq.n	800b2a6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e025      	b.n	800b2f2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	22c5      	movs	r2, #197	; 0xc5
 800b2aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f7ff fbef 	bl	800aa92 <SDIO_GetResponse>
 800b2b4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d106      	bne.n	800b2ce <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	0c1b      	lsrs	r3, r3, #16
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e011      	b.n	800b2f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2dc:	e009      	b.n	800b2f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2ec:	e001      	b.n	800b2f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	371c      	adds	r7, #28
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd90      	pop	{r4, r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	2000004c 	.word	0x2000004c
 800b300:	10624dd3 	.word	0x10624dd3

0800b304 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b304:	b490      	push	{r4, r7}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b30c:	4b21      	ldr	r3, [pc, #132]	; (800b394 <SDMMC_GetCmdResp7+0x90>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a21      	ldr	r2, [pc, #132]	; (800b398 <SDMMC_GetCmdResp7+0x94>)
 800b312:	fba2 2303 	umull	r2, r3, r2, r3
 800b316:	0a5b      	lsrs	r3, r3, #9
 800b318:	f241 3288 	movw	r2, #5000	; 0x1388
 800b31c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b320:	4623      	mov	r3, r4
 800b322:	1e5c      	subs	r4, r3, #1
 800b324:	2b00      	cmp	r3, #0
 800b326:	d102      	bne.n	800b32e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b328:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b32c:	e02c      	b.n	800b388 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b332:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0f0      	beq.n	800b320 <SDMMC_GetCmdResp7+0x1c>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1eb      	bne.n	800b320 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b34c:	f003 0304 	and.w	r3, r3, #4
 800b350:	2b00      	cmp	r3, #0
 800b352:	d004      	beq.n	800b35e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2204      	movs	r2, #4
 800b358:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b35a:	2304      	movs	r3, #4
 800b35c:	e014      	b.n	800b388 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b362:	f003 0301 	and.w	r3, r3, #1
 800b366:	2b00      	cmp	r3, #0
 800b368:	d004      	beq.n	800b374 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2201      	movs	r2, #1
 800b36e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b370:	2301      	movs	r3, #1
 800b372:	e009      	b.n	800b388 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d002      	beq.n	800b386 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2240      	movs	r2, #64	; 0x40
 800b384:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b386:	2300      	movs	r3, #0
  
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bc90      	pop	{r4, r7}
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	2000004c 	.word	0x2000004c
 800b398:	10624dd3 	.word	0x10624dd3

0800b39c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b39c:	b084      	sub	sp, #16
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b084      	sub	sp, #16
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	f107 001c 	add.w	r0, r7, #28
 800b3aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d122      	bne.n	800b3fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b3c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b3dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d105      	bne.n	800b3ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f001 fa7c 	bl	800c8ec <USB_CoreReset>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	73fb      	strb	r3, [r7, #15]
 800b3f8:	e01a      	b.n	800b430 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f001 fa70 	bl	800c8ec <USB_CoreReset>
 800b40c:	4603      	mov	r3, r0
 800b40e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b412:	2b00      	cmp	r3, #0
 800b414:	d106      	bne.n	800b424 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b41a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	639a      	str	r2, [r3, #56]	; 0x38
 800b422:	e005      	b.n	800b430 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b428:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b432:	2b01      	cmp	r3, #1
 800b434:	d10b      	bne.n	800b44e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	f043 0206 	orr.w	r2, r3, #6
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	f043 0220 	orr.w	r2, r3, #32
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b45a:	b004      	add	sp, #16
 800b45c:	4770      	bx	lr
	...

0800b460 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b460:	b480      	push	{r7}
 800b462:	b087      	sub	sp, #28
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	4613      	mov	r3, r2
 800b46c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b46e:	79fb      	ldrb	r3, [r7, #7]
 800b470:	2b02      	cmp	r3, #2
 800b472:	d165      	bne.n	800b540 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	4a41      	ldr	r2, [pc, #260]	; (800b57c <USB_SetTurnaroundTime+0x11c>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d906      	bls.n	800b48a <USB_SetTurnaroundTime+0x2a>
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	4a40      	ldr	r2, [pc, #256]	; (800b580 <USB_SetTurnaroundTime+0x120>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d802      	bhi.n	800b48a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b484:	230f      	movs	r3, #15
 800b486:	617b      	str	r3, [r7, #20]
 800b488:	e062      	b.n	800b550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	4a3c      	ldr	r2, [pc, #240]	; (800b580 <USB_SetTurnaroundTime+0x120>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d906      	bls.n	800b4a0 <USB_SetTurnaroundTime+0x40>
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	4a3b      	ldr	r2, [pc, #236]	; (800b584 <USB_SetTurnaroundTime+0x124>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d802      	bhi.n	800b4a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b49a:	230e      	movs	r3, #14
 800b49c:	617b      	str	r3, [r7, #20]
 800b49e:	e057      	b.n	800b550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	4a38      	ldr	r2, [pc, #224]	; (800b584 <USB_SetTurnaroundTime+0x124>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d906      	bls.n	800b4b6 <USB_SetTurnaroundTime+0x56>
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	4a37      	ldr	r2, [pc, #220]	; (800b588 <USB_SetTurnaroundTime+0x128>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d802      	bhi.n	800b4b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b4b0:	230d      	movs	r3, #13
 800b4b2:	617b      	str	r3, [r7, #20]
 800b4b4:	e04c      	b.n	800b550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	4a33      	ldr	r2, [pc, #204]	; (800b588 <USB_SetTurnaroundTime+0x128>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d906      	bls.n	800b4cc <USB_SetTurnaroundTime+0x6c>
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	4a32      	ldr	r2, [pc, #200]	; (800b58c <USB_SetTurnaroundTime+0x12c>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d802      	bhi.n	800b4cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b4c6:	230c      	movs	r3, #12
 800b4c8:	617b      	str	r3, [r7, #20]
 800b4ca:	e041      	b.n	800b550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	4a2f      	ldr	r2, [pc, #188]	; (800b58c <USB_SetTurnaroundTime+0x12c>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d906      	bls.n	800b4e2 <USB_SetTurnaroundTime+0x82>
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	4a2e      	ldr	r2, [pc, #184]	; (800b590 <USB_SetTurnaroundTime+0x130>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d802      	bhi.n	800b4e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b4dc:	230b      	movs	r3, #11
 800b4de:	617b      	str	r3, [r7, #20]
 800b4e0:	e036      	b.n	800b550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	4a2a      	ldr	r2, [pc, #168]	; (800b590 <USB_SetTurnaroundTime+0x130>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d906      	bls.n	800b4f8 <USB_SetTurnaroundTime+0x98>
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	4a29      	ldr	r2, [pc, #164]	; (800b594 <USB_SetTurnaroundTime+0x134>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d802      	bhi.n	800b4f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b4f2:	230a      	movs	r3, #10
 800b4f4:	617b      	str	r3, [r7, #20]
 800b4f6:	e02b      	b.n	800b550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	4a26      	ldr	r2, [pc, #152]	; (800b594 <USB_SetTurnaroundTime+0x134>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d906      	bls.n	800b50e <USB_SetTurnaroundTime+0xae>
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	4a25      	ldr	r2, [pc, #148]	; (800b598 <USB_SetTurnaroundTime+0x138>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d802      	bhi.n	800b50e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b508:	2309      	movs	r3, #9
 800b50a:	617b      	str	r3, [r7, #20]
 800b50c:	e020      	b.n	800b550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	4a21      	ldr	r2, [pc, #132]	; (800b598 <USB_SetTurnaroundTime+0x138>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d906      	bls.n	800b524 <USB_SetTurnaroundTime+0xc4>
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	4a20      	ldr	r2, [pc, #128]	; (800b59c <USB_SetTurnaroundTime+0x13c>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d802      	bhi.n	800b524 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b51e:	2308      	movs	r3, #8
 800b520:	617b      	str	r3, [r7, #20]
 800b522:	e015      	b.n	800b550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	4a1d      	ldr	r2, [pc, #116]	; (800b59c <USB_SetTurnaroundTime+0x13c>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d906      	bls.n	800b53a <USB_SetTurnaroundTime+0xda>
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	4a1c      	ldr	r2, [pc, #112]	; (800b5a0 <USB_SetTurnaroundTime+0x140>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d802      	bhi.n	800b53a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b534:	2307      	movs	r3, #7
 800b536:	617b      	str	r3, [r7, #20]
 800b538:	e00a      	b.n	800b550 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b53a:	2306      	movs	r3, #6
 800b53c:	617b      	str	r3, [r7, #20]
 800b53e:	e007      	b.n	800b550 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b540:	79fb      	ldrb	r3, [r7, #7]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d102      	bne.n	800b54c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b546:	2309      	movs	r3, #9
 800b548:	617b      	str	r3, [r7, #20]
 800b54a:	e001      	b.n	800b550 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b54c:	2309      	movs	r3, #9
 800b54e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	68da      	ldr	r2, [r3, #12]
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	029b      	lsls	r3, r3, #10
 800b564:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b568:	431a      	orrs	r2, r3
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	371c      	adds	r7, #28
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	00d8acbf 	.word	0x00d8acbf
 800b580:	00e4e1bf 	.word	0x00e4e1bf
 800b584:	00f423ff 	.word	0x00f423ff
 800b588:	0106737f 	.word	0x0106737f
 800b58c:	011a499f 	.word	0x011a499f
 800b590:	01312cff 	.word	0x01312cff
 800b594:	014ca43f 	.word	0x014ca43f
 800b598:	016e35ff 	.word	0x016e35ff
 800b59c:	01a6ab1f 	.word	0x01a6ab1f
 800b5a0:	01e847ff 	.word	0x01e847ff

0800b5a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	f043 0201 	orr.w	r2, r3, #1
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	370c      	adds	r7, #12
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b083      	sub	sp, #12
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	f023 0201 	bic.w	r2, r3, #1
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d106      	bne.n	800b614 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	60da      	str	r2, [r3, #12]
 800b612:	e00b      	b.n	800b62c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b614:	78fb      	ldrb	r3, [r7, #3]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d106      	bne.n	800b628 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	60da      	str	r2, [r3, #12]
 800b626:	e001      	b.n	800b62c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	e003      	b.n	800b634 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b62c:	2032      	movs	r0, #50	; 0x32
 800b62e:	f7f9 ff43 	bl	80054b8 <HAL_Delay>

  return HAL_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b63c:	b084      	sub	sp, #16
 800b63e:	b580      	push	{r7, lr}
 800b640:	b086      	sub	sp, #24
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b64a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b64e:	2300      	movs	r3, #0
 800b650:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b656:	2300      	movs	r3, #0
 800b658:	613b      	str	r3, [r7, #16]
 800b65a:	e009      	b.n	800b670 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	3340      	adds	r3, #64	; 0x40
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	2200      	movs	r2, #0
 800b668:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	3301      	adds	r3, #1
 800b66e:	613b      	str	r3, [r7, #16]
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	2b0e      	cmp	r3, #14
 800b674:	d9f2      	bls.n	800b65c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d112      	bne.n	800b6a2 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b680:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b698:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	639a      	str	r2, [r3, #56]	; 0x38
 800b6a0:	e00b      	b.n	800b6ba <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	680b      	ldr	r3, [r1, #0]
 800b6d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d10c      	bne.n	800b6fa <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d104      	bne.n	800b6f0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f961 	bl	800b9b0 <USB_SetDevSpeed>
 800b6ee:	e008      	b.n	800b702 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f95c 	bl	800b9b0 <USB_SetDevSpeed>
 800b6f8:	e003      	b.n	800b702 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b6fa:	2103      	movs	r1, #3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 f957 	bl	800b9b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b702:	2110      	movs	r1, #16
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f90b 	bl	800b920 <USB_FlushTxFifo>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800b710:	2301      	movs	r3, #1
 800b712:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f929 	bl	800b96c <USB_FlushRxFifo>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b72a:	461a      	mov	r2, r3
 800b72c:	2300      	movs	r3, #0
 800b72e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b736:	461a      	mov	r2, r3
 800b738:	2300      	movs	r3, #0
 800b73a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b742:	461a      	mov	r2, r3
 800b744:	2300      	movs	r3, #0
 800b746:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b748:	2300      	movs	r3, #0
 800b74a:	613b      	str	r3, [r7, #16]
 800b74c:	e043      	b.n	800b7d6 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	015a      	lsls	r2, r3, #5
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	4413      	add	r3, r2
 800b756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b764:	d118      	bne.n	800b798 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10a      	bne.n	800b782 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	015a      	lsls	r2, r3, #5
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	4413      	add	r3, r2
 800b774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b778:	461a      	mov	r2, r3
 800b77a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b77e:	6013      	str	r3, [r2, #0]
 800b780:	e013      	b.n	800b7aa <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	015a      	lsls	r2, r3, #5
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	4413      	add	r3, r2
 800b78a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b78e:	461a      	mov	r2, r3
 800b790:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b794:	6013      	str	r3, [r2, #0]
 800b796:	e008      	b.n	800b7aa <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	015a      	lsls	r2, r3, #5
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	4413      	add	r3, r2
 800b7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	015a      	lsls	r2, r3, #5
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	015a      	lsls	r2, r3, #5
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b7ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	613b      	str	r3, [r7, #16]
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d3b7      	bcc.n	800b74e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7de:	2300      	movs	r3, #0
 800b7e0:	613b      	str	r3, [r7, #16]
 800b7e2:	e043      	b.n	800b86c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	015a      	lsls	r2, r3, #5
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7fa:	d118      	bne.n	800b82e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10a      	bne.n	800b818 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	015a      	lsls	r2, r3, #5
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	4413      	add	r3, r2
 800b80a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b80e:	461a      	mov	r2, r3
 800b810:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b814:	6013      	str	r3, [r2, #0]
 800b816:	e013      	b.n	800b840 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	015a      	lsls	r2, r3, #5
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	4413      	add	r3, r2
 800b820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b824:	461a      	mov	r2, r3
 800b826:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b82a:	6013      	str	r3, [r2, #0]
 800b82c:	e008      	b.n	800b840 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	015a      	lsls	r2, r3, #5
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	4413      	add	r3, r2
 800b836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b83a:	461a      	mov	r2, r3
 800b83c:	2300      	movs	r3, #0
 800b83e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	015a      	lsls	r2, r3, #5
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	4413      	add	r3, r2
 800b848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b84c:	461a      	mov	r2, r3
 800b84e:	2300      	movs	r3, #0
 800b850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	015a      	lsls	r2, r3, #5
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	4413      	add	r3, r2
 800b85a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b85e:	461a      	mov	r2, r3
 800b860:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b864:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	3301      	adds	r3, #1
 800b86a:	613b      	str	r3, [r7, #16]
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	693a      	ldr	r2, [r7, #16]
 800b870:	429a      	cmp	r2, r3
 800b872:	d3b7      	bcc.n	800b7e4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b886:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800b888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d111      	bne.n	800b8b2 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b894:	461a      	mov	r2, r3
 800b896:	4b20      	ldr	r3, [pc, #128]	; (800b918 <USB_DevInit+0x2dc>)
 800b898:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8ac:	f043 0303 	orr.w	r3, r3, #3
 800b8b0:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b8be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d105      	bne.n	800b8d2 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	f043 0210 	orr.w	r2, r3, #16
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	699a      	ldr	r2, [r3, #24]
 800b8d6:	4b11      	ldr	r3, [pc, #68]	; (800b91c <USB_DevInit+0x2e0>)
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b8de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d005      	beq.n	800b8f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	f043 0208 	orr.w	r2, r3, #8
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b8f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d107      	bne.n	800b906 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8fe:	f043 0304 	orr.w	r3, r3, #4
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b906:	7dfb      	ldrb	r3, [r7, #23]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3718      	adds	r7, #24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b912:	b004      	add	sp, #16
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	00800100 	.word	0x00800100
 800b91c:	803c3800 	.word	0x803c3800

0800b920 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b92a:	2300      	movs	r3, #0
 800b92c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	019b      	lsls	r3, r3, #6
 800b932:	f043 0220 	orr.w	r2, r3, #32
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3301      	adds	r3, #1
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	4a09      	ldr	r2, [pc, #36]	; (800b968 <USB_FlushTxFifo+0x48>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d901      	bls.n	800b94c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b948:	2303      	movs	r3, #3
 800b94a:	e006      	b.n	800b95a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	f003 0320 	and.w	r3, r3, #32
 800b954:	2b20      	cmp	r3, #32
 800b956:	d0f0      	beq.n	800b93a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3714      	adds	r7, #20
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	00030d40 	.word	0x00030d40

0800b96c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b974:	2300      	movs	r3, #0
 800b976:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2210      	movs	r2, #16
 800b97c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	3301      	adds	r3, #1
 800b982:	60fb      	str	r3, [r7, #12]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	4a09      	ldr	r2, [pc, #36]	; (800b9ac <USB_FlushRxFifo+0x40>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d901      	bls.n	800b990 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e006      	b.n	800b99e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	f003 0310 	and.w	r3, r3, #16
 800b998:	2b10      	cmp	r3, #16
 800b99a:	d0f0      	beq.n	800b97e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	00030d40 	.word	0x00030d40

0800b9b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	68f9      	ldr	r1, [r7, #12]
 800b9cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b087      	sub	sp, #28
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	f003 0306 	and.w	r3, r3, #6
 800b9fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d102      	bne.n	800ba08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ba02:	2300      	movs	r3, #0
 800ba04:	75fb      	strb	r3, [r7, #23]
 800ba06:	e00a      	b.n	800ba1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d002      	beq.n	800ba14 <USB_GetDevSpeed+0x32>
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2b06      	cmp	r3, #6
 800ba12:	d102      	bne.n	800ba1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ba14:	2302      	movs	r3, #2
 800ba16:	75fb      	strb	r3, [r7, #23]
 800ba18:	e001      	b.n	800ba1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ba1a:	230f      	movs	r3, #15
 800ba1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ba1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	371c      	adds	r7, #28
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	785b      	ldrb	r3, [r3, #1]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d13a      	bne.n	800babe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba4e:	69da      	ldr	r2, [r3, #28]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	f003 030f 	and.w	r3, r3, #15
 800ba58:	2101      	movs	r1, #1
 800ba5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	68f9      	ldr	r1, [r7, #12]
 800ba62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba66:	4313      	orrs	r3, r2
 800ba68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	015a      	lsls	r2, r3, #5
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	4413      	add	r3, r2
 800ba72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d155      	bne.n	800bb2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	015a      	lsls	r2, r3, #5
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	4413      	add	r3, r2
 800ba88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	78db      	ldrb	r3, [r3, #3]
 800ba9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	059b      	lsls	r3, r3, #22
 800baa2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800baa4:	4313      	orrs	r3, r2
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	0151      	lsls	r1, r2, #5
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	440a      	add	r2, r1
 800baae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800baba:	6013      	str	r3, [r2, #0]
 800babc:	e036      	b.n	800bb2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bac4:	69da      	ldr	r2, [r3, #28]
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	f003 030f 	and.w	r3, r3, #15
 800bace:	2101      	movs	r1, #1
 800bad0:	fa01 f303 	lsl.w	r3, r1, r3
 800bad4:	041b      	lsls	r3, r3, #16
 800bad6:	68f9      	ldr	r1, [r7, #12]
 800bad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800badc:	4313      	orrs	r3, r2
 800bade:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	015a      	lsls	r2, r3, #5
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	4413      	add	r3, r2
 800bae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d11a      	bne.n	800bb2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	78db      	ldrb	r3, [r3, #3]
 800bb10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bb12:	430b      	orrs	r3, r1
 800bb14:	4313      	orrs	r3, r2
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	0151      	lsls	r1, r2, #5
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	440a      	add	r2, r1
 800bb1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
	...

0800bb3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	785b      	ldrb	r3, [r3, #1]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d135      	bne.n	800bbc4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	f003 030f 	and.w	r3, r3, #15
 800bb68:	2101      	movs	r1, #1
 800bb6a:	fa01 f303 	lsl.w	r3, r1, r3
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	43db      	mvns	r3, r3
 800bb72:	68f9      	ldr	r1, [r7, #12]
 800bb74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb78:	4013      	ands	r3, r2
 800bb7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb82:	69da      	ldr	r2, [r3, #28]
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	f003 030f 	and.w	r3, r3, #15
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	fa01 f303 	lsl.w	r3, r1, r3
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	43db      	mvns	r3, r3
 800bb96:	68f9      	ldr	r1, [r7, #12]
 800bb98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	015a      	lsls	r2, r3, #5
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4413      	add	r3, r2
 800bba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	0159      	lsls	r1, r3, #5
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	440b      	add	r3, r1
 800bbb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbba:	4619      	mov	r1, r3
 800bbbc:	4b1f      	ldr	r3, [pc, #124]	; (800bc3c <USB_DeactivateEndpoint+0x100>)
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	600b      	str	r3, [r1, #0]
 800bbc2:	e034      	b.n	800bc2e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	f003 030f 	and.w	r3, r3, #15
 800bbd4:	2101      	movs	r1, #1
 800bbd6:	fa01 f303 	lsl.w	r3, r1, r3
 800bbda:	041b      	lsls	r3, r3, #16
 800bbdc:	43db      	mvns	r3, r3
 800bbde:	68f9      	ldr	r1, [r7, #12]
 800bbe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbee:	69da      	ldr	r2, [r3, #28]
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	f003 030f 	and.w	r3, r3, #15
 800bbf8:	2101      	movs	r1, #1
 800bbfa:	fa01 f303 	lsl.w	r3, r1, r3
 800bbfe:	041b      	lsls	r3, r3, #16
 800bc00:	43db      	mvns	r3, r3
 800bc02:	68f9      	ldr	r1, [r7, #12]
 800bc04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc08:	4013      	ands	r3, r2
 800bc0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	015a      	lsls	r2, r3, #5
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	4413      	add	r3, r2
 800bc14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	0159      	lsls	r1, r3, #5
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	440b      	add	r3, r1
 800bc22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc26:	4619      	mov	r1, r3
 800bc28:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <USB_DeactivateEndpoint+0x104>)
 800bc2a:	4013      	ands	r3, r2
 800bc2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	ec337800 	.word	0xec337800
 800bc40:	eff37800 	.word	0xeff37800

0800bc44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b08a      	sub	sp, #40	; 0x28
 800bc48:	af02      	add	r7, sp, #8
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	785b      	ldrb	r3, [r3, #1]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	f040 815c 	bne.w	800bf1e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	695b      	ldr	r3, [r3, #20]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d132      	bne.n	800bcd4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	015a      	lsls	r2, r3, #5
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	4413      	add	r3, r2
 800bc76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	69ba      	ldr	r2, [r7, #24]
 800bc7e:	0151      	lsls	r1, r2, #5
 800bc80:	69fa      	ldr	r2, [r7, #28]
 800bc82:	440a      	add	r2, r1
 800bc84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	015a      	lsls	r2, r3, #5
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	4413      	add	r3, r2
 800bc9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	69ba      	ldr	r2, [r7, #24]
 800bca2:	0151      	lsls	r1, r2, #5
 800bca4:	69fa      	ldr	r2, [r7, #28]
 800bca6:	440a      	add	r2, r1
 800bca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	015a      	lsls	r2, r3, #5
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	4413      	add	r3, r2
 800bcba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	69ba      	ldr	r2, [r7, #24]
 800bcc2:	0151      	lsls	r1, r2, #5
 800bcc4:	69fa      	ldr	r2, [r7, #28]
 800bcc6:	440a      	add	r2, r1
 800bcc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bccc:	0cdb      	lsrs	r3, r3, #19
 800bcce:	04db      	lsls	r3, r3, #19
 800bcd0:	6113      	str	r3, [r2, #16]
 800bcd2:	e074      	b.n	800bdbe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	015a      	lsls	r2, r3, #5
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	4413      	add	r3, r2
 800bcdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	69ba      	ldr	r2, [r7, #24]
 800bce4:	0151      	lsls	r1, r2, #5
 800bce6:	69fa      	ldr	r2, [r7, #28]
 800bce8:	440a      	add	r2, r1
 800bcea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcee:	0cdb      	lsrs	r3, r3, #19
 800bcf0:	04db      	lsls	r3, r3, #19
 800bcf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	015a      	lsls	r2, r3, #5
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	69ba      	ldr	r2, [r7, #24]
 800bd04:	0151      	lsls	r1, r2, #5
 800bd06:	69fa      	ldr	r2, [r7, #28]
 800bd08:	440a      	add	r2, r1
 800bd0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bd16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd24:	691a      	ldr	r2, [r3, #16]
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	6959      	ldr	r1, [r3, #20]
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	440b      	add	r3, r1
 800bd30:	1e59      	subs	r1, r3, #1
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd3a:	04d9      	lsls	r1, r3, #19
 800bd3c:	4b9d      	ldr	r3, [pc, #628]	; (800bfb4 <USB_EPStartXfer+0x370>)
 800bd3e:	400b      	ands	r3, r1
 800bd40:	69b9      	ldr	r1, [r7, #24]
 800bd42:	0148      	lsls	r0, r1, #5
 800bd44:	69f9      	ldr	r1, [r7, #28]
 800bd46:	4401      	add	r1, r0
 800bd48:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	015a      	lsls	r2, r3, #5
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd5c:	691a      	ldr	r2, [r3, #16]
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd66:	69b9      	ldr	r1, [r7, #24]
 800bd68:	0148      	lsls	r0, r1, #5
 800bd6a:	69f9      	ldr	r1, [r7, #28]
 800bd6c:	4401      	add	r1, r0
 800bd6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd72:	4313      	orrs	r3, r2
 800bd74:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	78db      	ldrb	r3, [r3, #3]
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d11f      	bne.n	800bdbe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	015a      	lsls	r2, r3, #5
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	4413      	add	r3, r2
 800bd86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	69ba      	ldr	r2, [r7, #24]
 800bd8e:	0151      	lsls	r1, r2, #5
 800bd90:	69fa      	ldr	r2, [r7, #28]
 800bd92:	440a      	add	r2, r1
 800bd94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd98:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bd9c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	015a      	lsls	r2, r3, #5
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	4413      	add	r3, r2
 800bda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	69ba      	ldr	r2, [r7, #24]
 800bdae:	0151      	lsls	r1, r2, #5
 800bdb0:	69fa      	ldr	r2, [r7, #28]
 800bdb2:	440a      	add	r2, r1
 800bdb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bdbc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bdbe:	79fb      	ldrb	r3, [r7, #7]
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d14b      	bne.n	800be5c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d009      	beq.n	800bde0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	015a      	lsls	r2, r3, #5
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdd8:	461a      	mov	r2, r3
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	78db      	ldrb	r3, [r3, #3]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d128      	bne.n	800be3a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d110      	bne.n	800be1a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	015a      	lsls	r2, r3, #5
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	4413      	add	r3, r2
 800be00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	69ba      	ldr	r2, [r7, #24]
 800be08:	0151      	lsls	r1, r2, #5
 800be0a:	69fa      	ldr	r2, [r7, #28]
 800be0c:	440a      	add	r2, r1
 800be0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be16:	6013      	str	r3, [r2, #0]
 800be18:	e00f      	b.n	800be3a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	015a      	lsls	r2, r3, #5
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	4413      	add	r3, r2
 800be22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	69ba      	ldr	r2, [r7, #24]
 800be2a:	0151      	lsls	r1, r2, #5
 800be2c:	69fa      	ldr	r2, [r7, #28]
 800be2e:	440a      	add	r2, r1
 800be30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be38:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	015a      	lsls	r2, r3, #5
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	4413      	add	r3, r2
 800be42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	69ba      	ldr	r2, [r7, #24]
 800be4a:	0151      	lsls	r1, r2, #5
 800be4c:	69fa      	ldr	r2, [r7, #28]
 800be4e:	440a      	add	r2, r1
 800be50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be58:	6013      	str	r3, [r2, #0]
 800be5a:	e12f      	b.n	800c0bc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	015a      	lsls	r2, r3, #5
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	4413      	add	r3, r2
 800be64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	69ba      	ldr	r2, [r7, #24]
 800be6c:	0151      	lsls	r1, r2, #5
 800be6e:	69fa      	ldr	r2, [r7, #28]
 800be70:	440a      	add	r2, r1
 800be72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be7a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	78db      	ldrb	r3, [r3, #3]
 800be80:	2b01      	cmp	r3, #1
 800be82:	d015      	beq.n	800beb0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 8117 	beq.w	800c0bc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	f003 030f 	and.w	r3, r3, #15
 800be9e:	2101      	movs	r1, #1
 800bea0:	fa01 f303 	lsl.w	r3, r1, r3
 800bea4:	69f9      	ldr	r1, [r7, #28]
 800bea6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800beaa:	4313      	orrs	r3, r2
 800beac:	634b      	str	r3, [r1, #52]	; 0x34
 800beae:	e105      	b.n	800c0bc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d110      	bne.n	800bee2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	015a      	lsls	r2, r3, #5
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	4413      	add	r3, r2
 800bec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	69ba      	ldr	r2, [r7, #24]
 800bed0:	0151      	lsls	r1, r2, #5
 800bed2:	69fa      	ldr	r2, [r7, #28]
 800bed4:	440a      	add	r2, r1
 800bed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bede:	6013      	str	r3, [r2, #0]
 800bee0:	e00f      	b.n	800bf02 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	0151      	lsls	r1, r2, #5
 800bef4:	69fa      	ldr	r2, [r7, #28]
 800bef6:	440a      	add	r2, r1
 800bef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800befc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf00:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	68d9      	ldr	r1, [r3, #12]
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	781a      	ldrb	r2, [r3, #0]
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	695b      	ldr	r3, [r3, #20]
 800bf0e:	b298      	uxth	r0, r3
 800bf10:	79fb      	ldrb	r3, [r7, #7]
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	4603      	mov	r3, r0
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f000 fa2b 	bl	800c372 <USB_WritePacket>
 800bf1c:	e0ce      	b.n	800c0bc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	015a      	lsls	r2, r3, #5
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	4413      	add	r3, r2
 800bf26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	69ba      	ldr	r2, [r7, #24]
 800bf2e:	0151      	lsls	r1, r2, #5
 800bf30:	69fa      	ldr	r2, [r7, #28]
 800bf32:	440a      	add	r2, r1
 800bf34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf38:	0cdb      	lsrs	r3, r3, #19
 800bf3a:	04db      	lsls	r3, r3, #19
 800bf3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	015a      	lsls	r2, r3, #5
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	4413      	add	r3, r2
 800bf46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf4a:	691b      	ldr	r3, [r3, #16]
 800bf4c:	69ba      	ldr	r2, [r7, #24]
 800bf4e:	0151      	lsls	r1, r2, #5
 800bf50:	69fa      	ldr	r2, [r7, #28]
 800bf52:	440a      	add	r2, r1
 800bf54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	695b      	ldr	r3, [r3, #20]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d126      	bne.n	800bfb8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	015a      	lsls	r2, r3, #5
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	4413      	add	r3, r2
 800bf72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf76:	691a      	ldr	r2, [r3, #16]
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf80:	69b9      	ldr	r1, [r7, #24]
 800bf82:	0148      	lsls	r0, r1, #5
 800bf84:	69f9      	ldr	r1, [r7, #28]
 800bf86:	4401      	add	r1, r0
 800bf88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	0151      	lsls	r1, r2, #5
 800bfa2:	69fa      	ldr	r2, [r7, #28]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bfae:	6113      	str	r3, [r2, #16]
 800bfb0:	e036      	b.n	800c020 <USB_EPStartXfer+0x3dc>
 800bfb2:	bf00      	nop
 800bfb4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	695a      	ldr	r2, [r3, #20]
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	1e5a      	subs	r2, r3, #1
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfcc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	015a      	lsls	r2, r3, #5
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfda:	691a      	ldr	r2, [r3, #16]
 800bfdc:	8afb      	ldrh	r3, [r7, #22]
 800bfde:	04d9      	lsls	r1, r3, #19
 800bfe0:	4b39      	ldr	r3, [pc, #228]	; (800c0c8 <USB_EPStartXfer+0x484>)
 800bfe2:	400b      	ands	r3, r1
 800bfe4:	69b9      	ldr	r1, [r7, #24]
 800bfe6:	0148      	lsls	r0, r1, #5
 800bfe8:	69f9      	ldr	r1, [r7, #28]
 800bfea:	4401      	add	r1, r0
 800bfec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bff0:	4313      	orrs	r3, r2
 800bff2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	015a      	lsls	r2, r3, #5
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	4413      	add	r3, r2
 800bffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c000:	691a      	ldr	r2, [r3, #16]
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	8af9      	ldrh	r1, [r7, #22]
 800c008:	fb01 f303 	mul.w	r3, r1, r3
 800c00c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c010:	69b9      	ldr	r1, [r7, #24]
 800c012:	0148      	lsls	r0, r1, #5
 800c014:	69f9      	ldr	r1, [r7, #28]
 800c016:	4401      	add	r1, r0
 800c018:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c01c:	4313      	orrs	r3, r2
 800c01e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c020:	79fb      	ldrb	r3, [r7, #7]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d10d      	bne.n	800c042 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d009      	beq.n	800c042 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	68d9      	ldr	r1, [r3, #12]
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	015a      	lsls	r2, r3, #5
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	4413      	add	r3, r2
 800c03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c03e:	460a      	mov	r2, r1
 800c040:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	78db      	ldrb	r3, [r3, #3]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d128      	bne.n	800c09c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c056:	2b00      	cmp	r3, #0
 800c058:	d110      	bne.n	800c07c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	015a      	lsls	r2, r3, #5
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	4413      	add	r3, r2
 800c062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	69ba      	ldr	r2, [r7, #24]
 800c06a:	0151      	lsls	r1, r2, #5
 800c06c:	69fa      	ldr	r2, [r7, #28]
 800c06e:	440a      	add	r2, r1
 800c070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c074:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c078:	6013      	str	r3, [r2, #0]
 800c07a:	e00f      	b.n	800c09c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	015a      	lsls	r2, r3, #5
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	4413      	add	r3, r2
 800c084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	69ba      	ldr	r2, [r7, #24]
 800c08c:	0151      	lsls	r1, r2, #5
 800c08e:	69fa      	ldr	r2, [r7, #28]
 800c090:	440a      	add	r2, r1
 800c092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c09a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	015a      	lsls	r2, r3, #5
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	69ba      	ldr	r2, [r7, #24]
 800c0ac:	0151      	lsls	r1, r2, #5
 800c0ae:	69fa      	ldr	r2, [r7, #28]
 800c0b0:	440a      	add	r2, r1
 800c0b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c0ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3720      	adds	r7, #32
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	1ff80000 	.word	0x1ff80000

0800c0cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b087      	sub	sp, #28
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	785b      	ldrb	r3, [r3, #1]
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	f040 80cd 	bne.w	800c288 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	695b      	ldr	r3, [r3, #20]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d132      	bne.n	800c15c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	015a      	lsls	r2, r3, #5
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	0151      	lsls	r1, r2, #5
 800c108:	697a      	ldr	r2, [r7, #20]
 800c10a:	440a      	add	r2, r1
 800c10c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c110:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c114:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c118:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	015a      	lsls	r2, r3, #5
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	4413      	add	r3, r2
 800c122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	693a      	ldr	r2, [r7, #16]
 800c12a:	0151      	lsls	r1, r2, #5
 800c12c:	697a      	ldr	r2, [r7, #20]
 800c12e:	440a      	add	r2, r1
 800c130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c134:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c138:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	015a      	lsls	r2, r3, #5
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	4413      	add	r3, r2
 800c142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c146:	691b      	ldr	r3, [r3, #16]
 800c148:	693a      	ldr	r2, [r7, #16]
 800c14a:	0151      	lsls	r1, r2, #5
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	440a      	add	r2, r1
 800c150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c154:	0cdb      	lsrs	r3, r3, #19
 800c156:	04db      	lsls	r3, r3, #19
 800c158:	6113      	str	r3, [r2, #16]
 800c15a:	e04e      	b.n	800c1fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	015a      	lsls	r2, r3, #5
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	4413      	add	r3, r2
 800c164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	693a      	ldr	r2, [r7, #16]
 800c16c:	0151      	lsls	r1, r2, #5
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	440a      	add	r2, r1
 800c172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c176:	0cdb      	lsrs	r3, r3, #19
 800c178:	04db      	lsls	r3, r3, #19
 800c17a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	015a      	lsls	r2, r3, #5
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	4413      	add	r3, r2
 800c184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	0151      	lsls	r1, r2, #5
 800c18e:	697a      	ldr	r2, [r7, #20]
 800c190:	440a      	add	r2, r1
 800c192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c196:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c19a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c19e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	695a      	ldr	r2, [r3, #20]
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d903      	bls.n	800c1b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	015a      	lsls	r2, r3, #5
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c0:	691b      	ldr	r3, [r3, #16]
 800c1c2:	693a      	ldr	r2, [r7, #16]
 800c1c4:	0151      	lsls	r1, r2, #5
 800c1c6:	697a      	ldr	r2, [r7, #20]
 800c1c8:	440a      	add	r2, r1
 800c1ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	015a      	lsls	r2, r3, #5
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	4413      	add	r3, r2
 800c1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e0:	691a      	ldr	r2, [r3, #16]
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	695b      	ldr	r3, [r3, #20]
 800c1e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1ea:	6939      	ldr	r1, [r7, #16]
 800c1ec:	0148      	lsls	r0, r1, #5
 800c1ee:	6979      	ldr	r1, [r7, #20]
 800c1f0:	4401      	add	r1, r0
 800c1f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c1fa:	79fb      	ldrb	r3, [r7, #7]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d11e      	bne.n	800c23e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d009      	beq.n	800c21c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	015a      	lsls	r2, r3, #5
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	4413      	add	r3, r2
 800c210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c214:	461a      	mov	r2, r3
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	4413      	add	r3, r2
 800c224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	693a      	ldr	r2, [r7, #16]
 800c22c:	0151      	lsls	r1, r2, #5
 800c22e:	697a      	ldr	r2, [r7, #20]
 800c230:	440a      	add	r2, r1
 800c232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c236:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c23a:	6013      	str	r3, [r2, #0]
 800c23c:	e092      	b.n	800c364 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	015a      	lsls	r2, r3, #5
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	4413      	add	r3, r2
 800c246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	693a      	ldr	r2, [r7, #16]
 800c24e:	0151      	lsls	r1, r2, #5
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	440a      	add	r2, r1
 800c254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c258:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c25c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	695b      	ldr	r3, [r3, #20]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d07e      	beq.n	800c364 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c26c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	f003 030f 	and.w	r3, r3, #15
 800c276:	2101      	movs	r1, #1
 800c278:	fa01 f303 	lsl.w	r3, r1, r3
 800c27c:	6979      	ldr	r1, [r7, #20]
 800c27e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c282:	4313      	orrs	r3, r2
 800c284:	634b      	str	r3, [r1, #52]	; 0x34
 800c286:	e06d      	b.n	800c364 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	015a      	lsls	r2, r3, #5
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	4413      	add	r3, r2
 800c290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	693a      	ldr	r2, [r7, #16]
 800c298:	0151      	lsls	r1, r2, #5
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	440a      	add	r2, r1
 800c29e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2a2:	0cdb      	lsrs	r3, r3, #19
 800c2a4:	04db      	lsls	r3, r3, #19
 800c2a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	015a      	lsls	r2, r3, #5
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	0151      	lsls	r1, r2, #5
 800c2ba:	697a      	ldr	r2, [r7, #20]
 800c2bc:	440a      	add	r2, r1
 800c2be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c2c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c2ca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	695b      	ldr	r3, [r3, #20]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d003      	beq.n	800c2dc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	689a      	ldr	r2, [r3, #8]
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	015a      	lsls	r2, r3, #5
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	0151      	lsls	r1, r2, #5
 800c2ee:	697a      	ldr	r2, [r7, #20]
 800c2f0:	440a      	add	r2, r1
 800c2f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	015a      	lsls	r2, r3, #5
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	4413      	add	r3, r2
 800c304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c308:	691a      	ldr	r2, [r3, #16]
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c312:	6939      	ldr	r1, [r7, #16]
 800c314:	0148      	lsls	r0, r1, #5
 800c316:	6979      	ldr	r1, [r7, #20]
 800c318:	4401      	add	r1, r0
 800c31a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c31e:	4313      	orrs	r3, r2
 800c320:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c322:	79fb      	ldrb	r3, [r7, #7]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d10d      	bne.n	800c344 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d009      	beq.n	800c344 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	68d9      	ldr	r1, [r3, #12]
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	015a      	lsls	r2, r3, #5
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	4413      	add	r3, r2
 800c33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c340:	460a      	mov	r2, r1
 800c342:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	015a      	lsls	r2, r3, #5
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	4413      	add	r3, r2
 800c34c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	0151      	lsls	r1, r2, #5
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	440a      	add	r2, r1
 800c35a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c35e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c362:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	371c      	adds	r7, #28
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr

0800c372 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c372:	b480      	push	{r7}
 800c374:	b089      	sub	sp, #36	; 0x24
 800c376:	af00      	add	r7, sp, #0
 800c378:	60f8      	str	r0, [r7, #12]
 800c37a:	60b9      	str	r1, [r7, #8]
 800c37c:	4611      	mov	r1, r2
 800c37e:	461a      	mov	r2, r3
 800c380:	460b      	mov	r3, r1
 800c382:	71fb      	strb	r3, [r7, #7]
 800c384:	4613      	mov	r3, r2
 800c386:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c390:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c394:	2b00      	cmp	r3, #0
 800c396:	d11a      	bne.n	800c3ce <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c398:	88bb      	ldrh	r3, [r7, #4]
 800c39a:	3303      	adds	r3, #3
 800c39c:	089b      	lsrs	r3, r3, #2
 800c39e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	61bb      	str	r3, [r7, #24]
 800c3a4:	e00f      	b.n	800c3c6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c3a6:	79fb      	ldrb	r3, [r7, #7]
 800c3a8:	031a      	lsls	r2, r3, #12
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	3304      	adds	r3, #4
 800c3be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	61bb      	str	r3, [r7, #24]
 800c3c6:	69ba      	ldr	r2, [r7, #24]
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d3eb      	bcc.n	800c3a6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3724      	adds	r7, #36	; 0x24
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b089      	sub	sp, #36	; 0x24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c3f2:	88fb      	ldrh	r3, [r7, #6]
 800c3f4:	3303      	adds	r3, #3
 800c3f6:	089b      	lsrs	r3, r3, #2
 800c3f8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	61bb      	str	r3, [r7, #24]
 800c3fe:	e00b      	b.n	800c418 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	601a      	str	r2, [r3, #0]
    pDest++;
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	3304      	adds	r3, #4
 800c410:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	3301      	adds	r3, #1
 800c416:	61bb      	str	r3, [r7, #24]
 800c418:	69ba      	ldr	r2, [r7, #24]
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d3ef      	bcc.n	800c400 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c420:	69fb      	ldr	r3, [r7, #28]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3724      	adds	r7, #36	; 0x24
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c42e:	b480      	push	{r7}
 800c430:	b085      	sub	sp, #20
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	785b      	ldrb	r3, [r3, #1]
 800c446:	2b01      	cmp	r3, #1
 800c448:	d12c      	bne.n	800c4a4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	015a      	lsls	r2, r3, #5
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	4413      	add	r3, r2
 800c452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	db12      	blt.n	800c482 <USB_EPSetStall+0x54>
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00f      	beq.n	800c482 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	015a      	lsls	r2, r3, #5
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	4413      	add	r3, r2
 800c46a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	0151      	lsls	r1, r2, #5
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	440a      	add	r2, r1
 800c478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c47c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c480:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	015a      	lsls	r2, r3, #5
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	4413      	add	r3, r2
 800c48a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	0151      	lsls	r1, r2, #5
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	440a      	add	r2, r1
 800c498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c49c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c4a0:	6013      	str	r3, [r2, #0]
 800c4a2:	e02b      	b.n	800c4fc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	015a      	lsls	r2, r3, #5
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	db12      	blt.n	800c4dc <USB_EPSetStall+0xae>
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00f      	beq.n	800c4dc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	015a      	lsls	r2, r3, #5
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	0151      	lsls	r1, r2, #5
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	440a      	add	r2, r1
 800c4d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c4da:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	015a      	lsls	r2, r3, #5
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	0151      	lsls	r1, r2, #5
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	440a      	add	r2, r1
 800c4f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c4fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3714      	adds	r7, #20
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c50a:	b480      	push	{r7}
 800c50c:	b085      	sub	sp, #20
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
 800c512:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	785b      	ldrb	r3, [r3, #1]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d128      	bne.n	800c578 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	015a      	lsls	r2, r3, #5
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	4413      	add	r3, r2
 800c52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	0151      	lsls	r1, r2, #5
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	440a      	add	r2, r1
 800c53c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c540:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c544:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	78db      	ldrb	r3, [r3, #3]
 800c54a:	2b03      	cmp	r3, #3
 800c54c:	d003      	beq.n	800c556 <USB_EPClearStall+0x4c>
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	78db      	ldrb	r3, [r3, #3]
 800c552:	2b02      	cmp	r3, #2
 800c554:	d138      	bne.n	800c5c8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	015a      	lsls	r2, r3, #5
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	4413      	add	r3, r2
 800c55e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	0151      	lsls	r1, r2, #5
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	440a      	add	r2, r1
 800c56c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c574:	6013      	str	r3, [r2, #0]
 800c576:	e027      	b.n	800c5c8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	015a      	lsls	r2, r3, #5
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	4413      	add	r3, r2
 800c580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	0151      	lsls	r1, r2, #5
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	440a      	add	r2, r1
 800c58e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c592:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c596:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	78db      	ldrb	r3, [r3, #3]
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d003      	beq.n	800c5a8 <USB_EPClearStall+0x9e>
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	78db      	ldrb	r3, [r3, #3]
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d10f      	bne.n	800c5c8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	015a      	lsls	r2, r3, #5
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	0151      	lsls	r1, r2, #5
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	440a      	add	r2, r1
 800c5be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5c6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3714      	adds	r7, #20
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c5d6:	b480      	push	{r7}
 800c5d8:	b085      	sub	sp, #20
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
 800c5de:	460b      	mov	r3, r1
 800c5e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c5f8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	78fb      	ldrb	r3, [r7, #3]
 800c604:	011b      	lsls	r3, r3, #4
 800c606:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c60a:	68f9      	ldr	r1, [r7, #12]
 800c60c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c610:	4313      	orrs	r3, r2
 800c612:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr

0800c622 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c63c:	f023 0302 	bic.w	r3, r3, #2
 800c640:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c642:	2003      	movs	r0, #3
 800c644:	f7f8 ff38 	bl	80054b8 <HAL_Delay>

  return HAL_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b084      	sub	sp, #16
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c66c:	f043 0302 	orr.w	r3, r3, #2
 800c670:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c672:	2003      	movs	r0, #3
 800c674:	f7f8 ff20 	bl	80054b8 <HAL_Delay>

  return HAL_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c682:	b480      	push	{r7}
 800c684:	b085      	sub	sp, #20
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	695b      	ldr	r3, [r3, #20]
 800c68e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	4013      	ands	r3, r2
 800c698:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c69a:	68fb      	ldr	r3, [r7, #12]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3714      	adds	r7, #20
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6ba:	699b      	ldr	r3, [r3, #24]
 800c6bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6c4:	69db      	ldr	r3, [r3, #28]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	4013      	ands	r3, r2
 800c6ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	0c1b      	lsrs	r3, r3, #16
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b085      	sub	sp, #20
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6ee:	699b      	ldr	r3, [r3, #24]
 800c6f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6f8:	69db      	ldr	r3, [r3, #28]
 800c6fa:	68ba      	ldr	r2, [r7, #8]
 800c6fc:	4013      	ands	r3, r2
 800c6fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	b29b      	uxth	r3, r3
}
 800c704:	4618      	mov	r0, r3
 800c706:	3714      	adds	r7, #20
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c710:	b480      	push	{r7}
 800c712:	b085      	sub	sp, #20
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	015a      	lsls	r2, r3, #5
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	4413      	add	r3, r2
 800c728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c736:	695b      	ldr	r3, [r3, #20]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	4013      	ands	r3, r2
 800c73c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c73e:	68bb      	ldr	r3, [r7, #8]
}
 800c740:	4618      	mov	r0, r3
 800c742:	3714      	adds	r7, #20
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b087      	sub	sp, #28
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	460b      	mov	r3, r1
 800c756:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c76e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c770:	78fb      	ldrb	r3, [r7, #3]
 800c772:	f003 030f 	and.w	r3, r3, #15
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	fa22 f303 	lsr.w	r3, r2, r3
 800c77c:	01db      	lsls	r3, r3, #7
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	693a      	ldr	r2, [r7, #16]
 800c782:	4313      	orrs	r3, r2
 800c784:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c786:	78fb      	ldrb	r3, [r7, #3]
 800c788:	015a      	lsls	r2, r3, #5
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	4413      	add	r3, r2
 800c78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	4013      	ands	r3, r2
 800c798:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c79a:	68bb      	ldr	r3, [r7, #8]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	371c      	adds	r7, #28
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	695b      	ldr	r3, [r3, #20]
 800c7b4:	f003 0301 	and.w	r3, r3, #1
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c7e2:	f023 0307 	bic.w	r3, r3, #7
 800c7e6:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	f003 0306 	and.w	r3, r3, #6
 800c7f4:	2b04      	cmp	r3, #4
 800c7f6:	d109      	bne.n	800c80c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c806:	f043 0303 	orr.w	r3, r3, #3
 800c80a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c81a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c81e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3714      	adds	r7, #20
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr
	...

0800c830 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c830:	b480      	push	{r7}
 800c832:	b087      	sub	sp, #28
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	460b      	mov	r3, r1
 800c83a:	607a      	str	r2, [r7, #4]
 800c83c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	333c      	adds	r3, #60	; 0x3c
 800c846:	3304      	adds	r3, #4
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	4a26      	ldr	r2, [pc, #152]	; (800c8e8 <USB_EP0_OutStart+0xb8>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d90a      	bls.n	800c86a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c864:	d101      	bne.n	800c86a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c866:	2300      	movs	r3, #0
 800c868:	e037      	b.n	800c8da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c870:	461a      	mov	r2, r3
 800c872:	2300      	movs	r3, #0
 800c874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c898:	f043 0318 	orr.w	r3, r3, #24
 800c89c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c8b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c8b2:	7afb      	ldrb	r3, [r7, #11]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d10f      	bne.n	800c8d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8be:	461a      	mov	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	697a      	ldr	r2, [r7, #20]
 800c8ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c8d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	371c      	adds	r7, #28
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	4f54300a 	.word	0x4f54300a

0800c8ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b085      	sub	sp, #20
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	60fb      	str	r3, [r7, #12]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	4a13      	ldr	r2, [pc, #76]	; (800c950 <USB_CoreReset+0x64>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d901      	bls.n	800c90a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c906:	2303      	movs	r3, #3
 800c908:	e01b      	b.n	800c942 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	daf2      	bge.n	800c8f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c912:	2300      	movs	r3, #0
 800c914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	f043 0201 	orr.w	r2, r3, #1
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	3301      	adds	r3, #1
 800c926:	60fb      	str	r3, [r7, #12]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	4a09      	ldr	r2, [pc, #36]	; (800c950 <USB_CoreReset+0x64>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d901      	bls.n	800c934 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c930:	2303      	movs	r3, #3
 800c932:	e006      	b.n	800c942 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	f003 0301 	and.w	r3, r3, #1
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d0f0      	beq.n	800c922 <USB_CoreReset+0x36>

  return HAL_OK;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3714      	adds	r7, #20
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	00030d40 	.word	0x00030d40

0800c954 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c954:	b480      	push	{r7}
 800c956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c958:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <FatFsInit>:

/* USER CODE BEGIN Application */
     
SD_error FatFsInit(void) {
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af02      	add	r7, sp, #8
	// Initializing Fat Filesystem
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0) {
 800c96a:	4914      	ldr	r1, [pc, #80]	; (800c9bc <FatFsInit+0x58>)
 800c96c:	4814      	ldr	r0, [pc, #80]	; (800c9c0 <FatFsInit+0x5c>)
 800c96e:	f009 fb73 	bl	8016058 <FATFS_LinkDriver>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d11c      	bne.n	800c9b2 <FatFsInit+0x4e>
		FRESULT res;
		/* Attempt to Mount SD Drive */
		 if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 1) != FR_OK) {
 800c978:	2201      	movs	r2, #1
 800c97a:	4910      	ldr	r1, [pc, #64]	; (800c9bc <FatFsInit+0x58>)
 800c97c:	4811      	ldr	r0, [pc, #68]	; (800c9c4 <FatFsInit+0x60>)
 800c97e:	f008 f83f 	bl	8014a00 <f_mount>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00f      	beq.n	800c9a8 <FatFsInit+0x44>
			 /* Failed to mount drive */
			 res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 800c988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	4b0e      	ldr	r3, [pc, #56]	; (800c9c8 <FatFsInit+0x64>)
 800c990:	2200      	movs	r2, #0
 800c992:	2107      	movs	r1, #7
 800c994:	4809      	ldr	r0, [pc, #36]	; (800c9bc <FatFsInit+0x58>)
 800c996:	f008 fe4b 	bl	8015630 <f_mkfs>
 800c99a:	4603      	mov	r3, r0
 800c99c:	71fb      	strb	r3, [r7, #7]
			 if (res != FR_OK) {
 800c99e:	79fb      	ldrb	r3, [r7, #7]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d001      	beq.n	800c9a8 <FatFsInit+0x44>
				 /* Error, failed to initialize filesystem */
				 return SD_ERR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e005      	b.n	800c9b4 <FatFsInit+0x50>
			 }
		 }
		 fatFsModInit = true;
 800c9a8:	4b08      	ldr	r3, [pc, #32]	; (800c9cc <FatFsInit+0x68>)
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	701a      	strb	r2, [r3, #0]
	} else {
		// Failed to link SD Driver
		return SD_ERR;
	}
	return SD_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	e000      	b.n	800c9b4 <FatFsInit+0x50>
		return SD_ERR;
 800c9b2:	2301      	movs	r3, #1
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	20001344 	.word	0x20001344
 800c9c0:	0801b164 	.word	0x0801b164
 800c9c4:	20001578 	.word	0x20001578
 800c9c8:	20001144 	.word	0x20001144
 800c9cc:	20000740 	.word	0x20000740

0800c9d0 <FatFsDeInit>:

SD_error FatFsDeInit(void) {
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	af00      	add	r7, sp, #0
	fatFsModInit = false;
 800c9d4:	4b04      	ldr	r3, [pc, #16]	; (800c9e8 <FatFsDeInit+0x18>)
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	701a      	strb	r2, [r3, #0]
	return FATFS_UnLinkDriver(SDPath);
 800c9da:	4804      	ldr	r0, [pc, #16]	; (800c9ec <FatFsDeInit+0x1c>)
 800c9dc:	f009 fb84 	bl	80160e8 <FATFS_UnLinkDriver>
 800c9e0:	4603      	mov	r3, r0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20000740 	.word	0x20000740
 800c9ec:	20001344 	.word	0x20001344

0800c9f0 <FatFsIsModuleInit>:

	// Success
	return SD_OK;
}

bool FatFsIsModuleInit(void) {
 800c9f0:	b480      	push	{r7}
 800c9f2:	af00      	add	r7, sp, #0
	return fatFsModInit;
 800c9f4:	4b03      	ldr	r3, [pc, #12]	; (800ca04 <FatFsIsModuleInit+0x14>)
 800c9f6:	781b      	ldrb	r3, [r3, #0]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	20000740 	.word	0x20000740

0800ca08 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ca12:	f000 f89e 	bl	800cb52 <BSP_SD_IsDetected>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d001      	beq.n	800ca20 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e005      	b.n	800ca2c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ca20:	4804      	ldr	r0, [pc, #16]	; (800ca34 <BSP_SD_Init+0x2c>)
 800ca22:	f7fc f851 	bl	8008ac8 <HAL_SD_Init>
 800ca26:	4603      	mov	r3, r0
 800ca28:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ca2a:	79fb      	ldrb	r3, [r7, #7]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	20001060 	.word	0x20001060

0800ca38 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b088      	sub	sp, #32
 800ca3c:	af02      	add	r7, sp, #8
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
 800ca44:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ca46:	2300      	movs	r3, #0
 800ca48:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	68f9      	ldr	r1, [r7, #12]
 800ca54:	4806      	ldr	r0, [pc, #24]	; (800ca70 <BSP_SD_ReadBlocks+0x38>)
 800ca56:	f7fc f8c7 	bl	8008be8 <HAL_SD_ReadBlocks>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d001      	beq.n	800ca64 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ca60:	2301      	movs	r3, #1
 800ca62:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800ca64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3718      	adds	r7, #24
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	20001060 	.word	0x20001060

0800ca74 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b088      	sub	sp, #32
 800ca78:	af02      	add	r7, sp, #8
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	60b9      	str	r1, [r7, #8]
 800ca7e:	607a      	str	r2, [r7, #4]
 800ca80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	68f9      	ldr	r1, [r7, #12]
 800ca90:	4806      	ldr	r0, [pc, #24]	; (800caac <BSP_SD_WriteBlocks+0x38>)
 800ca92:	f7fc faa3 	bl	8008fdc <HAL_SD_WriteBlocks>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800caa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3718      	adds	r7, #24
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	20001060 	.word	0x20001060

0800cab0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cab4:	4805      	ldr	r0, [pc, #20]	; (800cacc <BSP_SD_GetCardState+0x1c>)
 800cab6:	f7fc ff93 	bl	80099e0 <HAL_SD_GetCardState>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b04      	cmp	r3, #4
 800cabe:	bf14      	ite	ne
 800cac0:	2301      	movne	r3, #1
 800cac2:	2300      	moveq	r3, #0
 800cac4:	b2db      	uxtb	r3, r3
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	20001060 	.word	0x20001060

0800cad0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cad8:	6879      	ldr	r1, [r7, #4]
 800cada:	4803      	ldr	r0, [pc, #12]	; (800cae8 <BSP_SD_GetCardInfo+0x18>)
 800cadc:	f7fc ff54 	bl	8009988 <HAL_SD_GetCardInfo>
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	20001060 	.word	0x20001060

0800caec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800caf4:	f000 f818 	bl	800cb28 <BSP_SD_AbortCallback>
}
 800caf8:	bf00      	nop
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cb08:	f000 f815 	bl	800cb36 <BSP_SD_WriteCpltCallback>
}
 800cb0c:	bf00      	nop
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cb1c:	f000 f812 	bl	800cb44 <BSP_SD_ReadCpltCallback>
}
 800cb20:	bf00      	nop
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	af00      	add	r7, sp, #0

}
 800cb2c:	bf00      	nop
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr

0800cb36 <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800cb36:	b480      	push	{r7}
 800cb38:	af00      	add	r7, sp, #0

}
 800cb3a:	bf00      	nop
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800cb44:	b480      	push	{r7}
 800cb46:	af00      	add	r7, sp, #0

}
 800cb48:	bf00      	nop
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr

0800cb52 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800cb52:	b480      	push	{r7}
 800cb54:	b083      	sub	sp, #12
 800cb56:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 800cb5c:	79fb      	ldrb	r3, [r7, #7]
 800cb5e:	b2db      	uxtb	r3, r3
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	4603      	mov	r3, r0
 800cb74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cb76:	4b0b      	ldr	r3, [pc, #44]	; (800cba4 <SD_CheckStatus+0x38>)
 800cb78:	2201      	movs	r2, #1
 800cb7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cb7c:	f7ff ff98 	bl	800cab0 <BSP_SD_GetCardState>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d107      	bne.n	800cb96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cb86:	4b07      	ldr	r3, [pc, #28]	; (800cba4 <SD_CheckStatus+0x38>)
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	f023 0301 	bic.w	r3, r3, #1
 800cb90:	b2da      	uxtb	r2, r3
 800cb92:	4b04      	ldr	r3, [pc, #16]	; (800cba4 <SD_CheckStatus+0x38>)
 800cb94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cb96:	4b03      	ldr	r3, [pc, #12]	; (800cba4 <SD_CheckStatus+0x38>)
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	b2db      	uxtb	r3, r3
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	20000055 	.word	0x20000055

0800cba8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	4603      	mov	r3, r0
 800cbb0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800cbb2:	4b0b      	ldr	r3, [pc, #44]	; (800cbe0 <SD_initialize+0x38>)
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cbb8:	f7ff ff26 	bl	800ca08 <BSP_SD_Init>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d107      	bne.n	800cbd2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cbc2:	79fb      	ldrb	r3, [r7, #7]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7ff ffd1 	bl	800cb6c <SD_CheckStatus>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	461a      	mov	r2, r3
 800cbce:	4b04      	ldr	r3, [pc, #16]	; (800cbe0 <SD_initialize+0x38>)
 800cbd0:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800cbd2:	4b03      	ldr	r3, [pc, #12]	; (800cbe0 <SD_initialize+0x38>)
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	b2db      	uxtb	r3, r3
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	20000055 	.word	0x20000055

0800cbe4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	4603      	mov	r3, r0
 800cbec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cbee:	79fb      	ldrb	r3, [r7, #7]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7ff ffbb 	bl	800cb6c <SD_CheckStatus>
 800cbf6:	4603      	mov	r3, r0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60b9      	str	r1, [r7, #8]
 800cc08:	607a      	str	r2, [r7, #4]
 800cc0a:	603b      	str	r3, [r7, #0]
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc10:	2301      	movs	r3, #1
 800cc12:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cc14:	f04f 33ff 	mov.w	r3, #4294967295
 800cc18:	683a      	ldr	r2, [r7, #0]
 800cc1a:	6879      	ldr	r1, [r7, #4]
 800cc1c:	68b8      	ldr	r0, [r7, #8]
 800cc1e:	f7ff ff0b 	bl	800ca38 <BSP_SD_ReadBlocks>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d107      	bne.n	800cc38 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cc28:	bf00      	nop
 800cc2a:	f7ff ff41 	bl	800cab0 <BSP_SD_GetCardState>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1fa      	bne.n	800cc2a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cc38:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3718      	adds	r7, #24
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b086      	sub	sp, #24
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
 800cc4c:	603b      	str	r3, [r7, #0]
 800cc4e:	4603      	mov	r3, r0
 800cc50:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc52:	2301      	movs	r3, #1
 800cc54:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cc56:	f04f 33ff 	mov.w	r3, #4294967295
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	6879      	ldr	r1, [r7, #4]
 800cc5e:	68b8      	ldr	r0, [r7, #8]
 800cc60:	f7ff ff08 	bl	800ca74 <BSP_SD_WriteBlocks>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d107      	bne.n	800cc7a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cc6a:	bf00      	nop
 800cc6c:	f7ff ff20 	bl	800cab0 <BSP_SD_GetCardState>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1fa      	bne.n	800cc6c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cc7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3718      	adds	r7, #24
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b08c      	sub	sp, #48	; 0x30
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	603a      	str	r2, [r7, #0]
 800cc8e:	71fb      	strb	r3, [r7, #7]
 800cc90:	460b      	mov	r3, r1
 800cc92:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cc9a:	4b25      	ldr	r3, [pc, #148]	; (800cd30 <SD_ioctl+0xac>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	f003 0301 	and.w	r3, r3, #1
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <SD_ioctl+0x28>
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e03c      	b.n	800cd26 <SD_ioctl+0xa2>

  switch (cmd)
 800ccac:	79bb      	ldrb	r3, [r7, #6]
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	d834      	bhi.n	800cd1c <SD_ioctl+0x98>
 800ccb2:	a201      	add	r2, pc, #4	; (adr r2, 800ccb8 <SD_ioctl+0x34>)
 800ccb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb8:	0800ccc9 	.word	0x0800ccc9
 800ccbc:	0800ccd1 	.word	0x0800ccd1
 800ccc0:	0800cce9 	.word	0x0800cce9
 800ccc4:	0800cd03 	.word	0x0800cd03
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ccce:	e028      	b.n	800cd22 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ccd0:	f107 030c 	add.w	r3, r7, #12
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7ff fefb 	bl	800cad0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ccda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cce6:	e01c      	b.n	800cd22 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cce8:	f107 030c 	add.w	r3, r7, #12
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff feef 	bl	800cad0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ccf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd00:	e00f      	b.n	800cd22 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd02:	f107 030c 	add.w	r3, r7, #12
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7ff fee2 	bl	800cad0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0e:	0a5a      	lsrs	r2, r3, #9
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd1a:	e002      	b.n	800cd22 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cd1c:	2304      	movs	r3, #4
 800cd1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cd22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3730      	adds	r7, #48	; 0x30
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	20000055 	.word	0x20000055

0800cd34 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 800cd34:	b480      	push	{r7}
 800cd36:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 800cd38:	4b07      	ldr	r3, [pc, #28]	; (800cd58 <rfalAnalogConfigInitialize+0x24>)
 800cd3a:	4a08      	ldr	r2, [pc, #32]	; (800cd5c <rfalAnalogConfigInitialize+0x28>)
 800cd3c:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 800cd3e:	4b06      	ldr	r3, [pc, #24]	; (800cd58 <rfalAnalogConfigInitialize+0x24>)
 800cd40:	f240 22bb 	movw	r2, #699	; 0x2bb
 800cd44:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800cd46:	4b04      	ldr	r3, [pc, #16]	; (800cd58 <rfalAnalogConfigInitialize+0x24>)
 800cd48:	2201      	movs	r2, #1
 800cd4a:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 800cd4c:	bf00      	nop
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	20000744 	.word	0x20000744
 800cd5c:	0801b178 	.word	0x0801b178

0800cd60 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	4603      	mov	r3, r0
 800cd68:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 800cd72:	4b4b      	ldr	r3, [pc, #300]	; (800cea0 <rfalSetAnalogConfig+0x140>)
 800cd74:	799b      	ldrb	r3, [r3, #6]
 800cd76:	f083 0301 	eor.w	r3, r3, #1
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d001      	beq.n	800cd84 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 800cd80:	2305      	movs	r3, #5
 800cd82:	e089      	b.n	800ce98 <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800cd84:	f107 020e 	add.w	r2, r7, #14
 800cd88:	88fb      	ldrh	r3, [r7, #6]
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f000 f889 	bl	800cea4 <rfalAnalogConfigSearch>
 800cd92:	4603      	mov	r3, r0
 800cd94:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800cd96:	7d3b      	ldrb	r3, [r7, #20]
 800cd98:	2bff      	cmp	r3, #255	; 0xff
 800cd9a:	d07b      	beq.n	800ce94 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800cd9c:	4b40      	ldr	r3, [pc, #256]	; (800cea0 <rfalSetAnalogConfig+0x140>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	461a      	mov	r2, r3
 800cda2:	89fb      	ldrh	r3, [r7, #14]
 800cda4:	4413      	add	r3, r2
 800cda6:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800cda8:	7d3b      	ldrb	r3, [r7, #20]
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	89fb      	ldrh	r3, [r7, #14]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800cdb8:	4b39      	ldr	r3, [pc, #228]	; (800cea0 <rfalSetAnalogConfig+0x140>)
 800cdba:	889b      	ldrh	r3, [r3, #4]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	89fa      	ldrh	r2, [r7, #14]
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d201      	bcs.n	800cdc8 <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e067      	b.n	800ce98 <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 800cdc8:	2300      	movs	r3, #0
 800cdca:	757b      	strb	r3, [r7, #21]
 800cdcc:	e05d      	b.n	800ce8a <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800cdce:	7d7b      	ldrb	r3, [r7, #21]
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	693a      	ldr	r2, [r7, #16]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	021b      	lsls	r3, r3, #8
 800cdda:	7d7a      	ldrb	r2, [r7, #21]
 800cddc:	0092      	lsls	r2, r2, #2
 800cdde:	6939      	ldr	r1, [r7, #16]
 800cde0:	440a      	add	r2, r1
 800cde2:	7852      	ldrb	r2, [r2, #1]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d026      	beq.n	800ce3c <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800cdee:	7d7b      	ldrb	r3, [r7, #21]
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	021b      	lsls	r3, r3, #8
 800cdfa:	b21a      	sxth	r2, r3
 800cdfc:	7d7b      	ldrb	r3, [r7, #21]
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	6939      	ldr	r1, [r7, #16]
 800ce02:	440b      	add	r3, r1
 800ce04:	785b      	ldrb	r3, [r3, #1]
 800ce06:	b21b      	sxth	r3, r3
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	b21b      	sxth	r3, r3
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce12:	b298      	uxth	r0, r3
 800ce14:	7d7b      	ldrb	r3, [r7, #21]
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	7899      	ldrb	r1, [r3, #2]
 800ce1e:	7d7b      	ldrb	r3, [r7, #21]
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	693a      	ldr	r2, [r7, #16]
 800ce24:	4413      	add	r3, r2
 800ce26:	78db      	ldrb	r3, [r3, #3]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	f002 fd9b 	bl	800f964 <rfalChipChangeTestRegBits>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	82fb      	strh	r3, [r7, #22]
 800ce32:	8afb      	ldrh	r3, [r7, #22]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d025      	beq.n	800ce84 <rfalSetAnalogConfig+0x124>
 800ce38:	8afb      	ldrh	r3, [r7, #22]
 800ce3a:	e02d      	b.n	800ce98 <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800ce3c:	7d7b      	ldrb	r3, [r7, #21]
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	693a      	ldr	r2, [r7, #16]
 800ce42:	4413      	add	r3, r2
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	021b      	lsls	r3, r3, #8
 800ce48:	b21a      	sxth	r2, r3
 800ce4a:	7d7b      	ldrb	r3, [r7, #21]
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	6939      	ldr	r1, [r7, #16]
 800ce50:	440b      	add	r3, r1
 800ce52:	785b      	ldrb	r3, [r3, #1]
 800ce54:	b21b      	sxth	r3, r3
 800ce56:	4313      	orrs	r3, r2
 800ce58:	b21b      	sxth	r3, r3
 800ce5a:	b298      	uxth	r0, r3
 800ce5c:	7d7b      	ldrb	r3, [r7, #21]
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	693a      	ldr	r2, [r7, #16]
 800ce62:	4413      	add	r3, r2
 800ce64:	7899      	ldrb	r1, [r3, #2]
 800ce66:	7d7b      	ldrb	r3, [r7, #21]
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	78db      	ldrb	r3, [r3, #3]
 800ce70:	461a      	mov	r2, r3
 800ce72:	f002 fd55 	bl	800f920 <rfalChipChangeRegBits>
 800ce76:	4603      	mov	r3, r0
 800ce78:	82fb      	strh	r3, [r7, #22]
 800ce7a:	8afb      	ldrh	r3, [r7, #22]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d001      	beq.n	800ce84 <rfalSetAnalogConfig+0x124>
 800ce80:	8afb      	ldrh	r3, [r7, #22]
 800ce82:	e009      	b.n	800ce98 <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 800ce84:	7d7b      	ldrb	r3, [r7, #21]
 800ce86:	3301      	adds	r3, #1
 800ce88:	757b      	strb	r3, [r7, #21]
 800ce8a:	7d7a      	ldrb	r2, [r7, #21]
 800ce8c:	7d3b      	ldrb	r3, [r7, #20]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d39d      	bcc.n	800cdce <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800ce92:	e777      	b.n	800cd84 <rfalSetAnalogConfig+0x24>
            break;
 800ce94:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800ce96:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3718      	adds	r7, #24
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	20000744 	.word	0x20000744

0800cea4 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 800cea4:	b480      	push	{r7}
 800cea6:	b087      	sub	sp, #28
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	6039      	str	r1, [r7, #0]
 800ceae:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800ceb0:	4b31      	ldr	r3, [pc, #196]	; (800cf78 <rfalAnalogConfigSearch+0xd4>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	613b      	str	r3, [r7, #16]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 800ceb6:	88fb      	ldrh	r3, [r7, #6]
 800ceb8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800cebc:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00a      	beq.n	800ced8 <rfalAnalogConfigSearch+0x34>
 800cec2:	88fb      	ldrh	r3, [r7, #6]
 800cec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ced0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	e001      	b.n	800cedc <rfalAnalogConfigSearch+0x38>
 800ced8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cedc:	88fb      	ldrh	r3, [r7, #6]
 800cede:	f003 030f 	and.w	r3, r3, #15
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d001      	beq.n	800ceec <rfalAnalogConfigSearch+0x48>
 800cee8:	88fb      	ldrh	r3, [r7, #6]
 800ceea:	e000      	b.n	800ceee <rfalAnalogConfigSearch+0x4a>
 800ceec:	230f      	movs	r3, #15
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800ceee:	4313      	orrs	r3, r2
 800cef0:	82fb      	strh	r3, [r7, #22]
                       );
    
    
    /* When specific ConfigIDs are to be used, override search mask */
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 800cef2:	88fb      	ldrh	r3, [r7, #6]
 800cef4:	f003 030f 	and.w	r3, r3, #15
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	2b04      	cmp	r3, #4
 800cefc:	d102      	bne.n	800cf04 <rfalAnalogConfigSearch+0x60>
    {
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
 800cefe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf02:	82fb      	strh	r3, [r7, #22]
    }
    
    
    i = *configOffset;
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	881b      	ldrh	r3, [r3, #0]
 800cf08:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800cf0a:	e029      	b.n	800cf60 <rfalAnalogConfigSearch+0xbc>
    {
        configTbl = &currentConfigTbl[i];
 800cf0c:	8abb      	ldrh	r3, [r7, #20]
 800cf0e:	693a      	ldr	r2, [r7, #16]
 800cf10:	4413      	add	r3, r2
 800cf12:	60fb      	str	r3, [r7, #12]
        foundConfigId = GETU16(configTbl);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	021b      	lsls	r3, r3, #8
 800cf1a:	b21a      	sxth	r2, r3
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	b21b      	sxth	r3, r3
 800cf24:	4313      	orrs	r3, r2
 800cf26:	b21b      	sxth	r3, r3
 800cf28:	817b      	strh	r3, [r7, #10]
        if (configId == (foundConfigId & configIdMaskVal))
 800cf2a:	897a      	ldrh	r2, [r7, #10]
 800cf2c:	8afb      	ldrh	r3, [r7, #22]
 800cf2e:	4013      	ands	r3, r2
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	88fa      	ldrh	r2, [r7, #6]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d108      	bne.n	800cf4a <rfalAnalogConfigSearch+0xa6>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800cf38:	8abb      	ldrh	r3, [r7, #20]
 800cf3a:	3303      	adds	r3, #3
 800cf3c:	b29a      	uxth	r2, r3
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	3302      	adds	r3, #2
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	e010      	b.n	800cf6c <rfalAnalogConfigSearch+0xc8>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3302      	adds	r3, #2
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800cf56:	8abb      	ldrh	r3, [r7, #20]
 800cf58:	4413      	add	r3, r2
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	3303      	adds	r3, #3
 800cf5e:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800cf60:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <rfalAnalogConfigSearch+0xd4>)
 800cf62:	889b      	ldrh	r3, [r3, #4]
 800cf64:	8aba      	ldrh	r2, [r7, #20]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d3d0      	bcc.n	800cf0c <rfalAnalogConfigSearch+0x68>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 800cf6a:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	371c      	adds	r7, #28
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr
 800cf78:	20000744 	.word	0x20000744

0800cf7c <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	4603      	mov	r3, r0
 800cf84:	6039      	str	r1, [r7, #0]
 800cf86:	80fb      	strh	r3, [r7, #6]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 800cf8c:	88fb      	ldrh	r3, [r7, #6]
 800cf8e:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 800cf90:	2300      	movs	r3, #0
 800cf92:	81bb      	strh	r3, [r7, #12]
 800cf94:	e00d      	b.n	800cfb2 <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 800cf96:	89bb      	ldrh	r3, [r7, #12]
 800cf98:	683a      	ldr	r2, [r7, #0]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	781a      	ldrb	r2, [r3, #0]
 800cf9e:	89fb      	ldrh	r3, [r7, #14]
 800cfa0:	4611      	mov	r1, r2
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f000 f80e 	bl	800cfc4 <rfalCrcUpdateCcitt>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 800cfac:	89bb      	ldrh	r3, [r7, #12]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	81bb      	strh	r3, [r7, #12]
 800cfb2:	89ba      	ldrh	r2, [r7, #12]
 800cfb4:	88bb      	ldrh	r3, [r7, #4]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d3ed      	bcc.n	800cf96 <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 800cfba:	89fb      	ldrh	r3, [r7, #14]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3710      	adds	r7, #16
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b085      	sub	sp, #20
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	4603      	mov	r3, r0
 800cfcc:	460a      	mov	r2, r1
 800cfce:	80fb      	strh	r3, [r7, #6]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 800cfd4:	88fb      	ldrh	r3, [r7, #6]
 800cfd6:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 800cfd8:	797b      	ldrb	r3, [r7, #5]
 800cfda:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800cfdc:	89fb      	ldrh	r3, [r7, #14]
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	7b7b      	ldrb	r3, [r7, #13]
 800cfe2:	4053      	eors	r3, r2
 800cfe4:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 800cfe6:	7b7b      	ldrb	r3, [r7, #13]
 800cfe8:	011b      	lsls	r3, r3, #4
 800cfea:	b25a      	sxtb	r2, r3
 800cfec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800cff0:	4053      	eors	r3, r2
 800cff2:	b25b      	sxtb	r3, r3
 800cff4:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800cff6:	89fb      	ldrh	r3, [r7, #14]
 800cff8:	0a1b      	lsrs	r3, r3, #8
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	b21a      	sxth	r2, r3
 800cffe:	7b7b      	ldrb	r3, [r7, #13]
 800d000:	021b      	lsls	r3, r3, #8
 800d002:	b21b      	sxth	r3, r3
 800d004:	4053      	eors	r3, r2
 800d006:	b21a      	sxth	r2, r3
 800d008:	7b7b      	ldrb	r3, [r7, #13]
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	b21b      	sxth	r3, r3
 800d00e:	4053      	eors	r3, r2
 800d010:	b21a      	sxth	r2, r3
 800d012:	7b7b      	ldrb	r3, [r7, #13]
 800d014:	091b      	lsrs	r3, r3, #4
 800d016:	b2db      	uxtb	r3, r3
 800d018:	b21b      	sxth	r3, r3
 800d01a:	4053      	eors	r3, r2
 800d01c:	b21b      	sxth	r3, r3
 800d01e:	81fb      	strh	r3, [r7, #14]

    return crc;
 800d020:	89fb      	ldrh	r3, [r7, #14]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
	...

0800d030 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800d03a:	2208      	movs	r2, #8
 800d03c:	6879      	ldr	r1, [r7, #4]
 800d03e:	480d      	ldr	r0, [pc, #52]	; (800d074 <iso15693PhyConfigure+0x44>)
 800d040:	f009 fea7 	bl	8016d92 <memcpy>
    
    if ( config->speedMode <= 3U)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	2b03      	cmp	r3, #3
 800d04a:	d808      	bhi.n	800d05e <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	b2db      	uxtb	r3, r3
 800d052:	f1c3 0303 	rsb	r3, r3, #3
 800d056:	b2da      	uxtb	r2, r3
 800d058:	4b07      	ldr	r3, [pc, #28]	; (800d078 <iso15693PhyConfigure+0x48>)
 800d05a:	70da      	strb	r2, [r3, #3]
 800d05c:	e002      	b.n	800d064 <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 800d05e:	4b06      	ldr	r3, [pc, #24]	; (800d078 <iso15693PhyConfigure+0x48>)
 800d060:	2203      	movs	r2, #3
 800d062:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	4a04      	ldr	r2, [pc, #16]	; (800d078 <iso15693PhyConfigure+0x48>)
 800d068:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 800d06a:	2300      	movs	r3, #0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	2000074c 	.word	0x2000074c
 800d078:	20000058 	.word	0x20000058

0800d07c <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 800d07c:	b590      	push	{r4, r7, lr}
 800d07e:	b08b      	sub	sp, #44	; 0x2c
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	4608      	mov	r0, r1
 800d086:	4611      	mov	r1, r2
 800d088:	461a      	mov	r2, r3
 800d08a:	4603      	mov	r3, r0
 800d08c:	807b      	strh	r3, [r7, #2]
 800d08e:	460b      	mov	r3, r1
 800d090:	707b      	strb	r3, [r7, #1]
 800d092:	4613      	mov	r3, r2
 800d094:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 800d096:	2300      	movs	r3, #0
 800d098:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 800d09a:	2300      	movs	r3, #0
 800d09c:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 800d09e:	787b      	ldrb	r3, [r7, #1]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <iso15693VCDCode+0x2c>
 800d0a4:	2302      	movs	r3, #2
 800d0a6:	e000      	b.n	800d0aa <iso15693VCDCode+0x2e>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 800d0ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 800d0b2:	4b94      	ldr	r3, [pc, #592]	; (800d304 <iso15693VCDCode+0x288>)
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d117      	bne.n	800d0ea <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 800d0ba:	2321      	movs	r3, #33	; 0x21
 800d0bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 800d0c0:	2304      	movs	r3, #4
 800d0c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 800d0c6:	4b90      	ldr	r3, [pc, #576]	; (800d308 <iso15693VCDCode+0x28c>)
 800d0c8:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 800d0ca:	887a      	ldrh	r2, [r7, #2]
 800d0cc:	7d7b      	ldrb	r3, [r7, #21]
 800d0ce:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	3302      	adds	r3, #2
 800d0d8:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800d0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0dc:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800d0de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d0e2:	2b04      	cmp	r3, #4
 800d0e4:	d823      	bhi.n	800d12e <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e13a      	b.n	800d360 <iso15693VCDCode+0x2e4>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 800d0ea:	2381      	movs	r3, #129	; 0x81
 800d0ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 800d0f0:	2304      	movs	r3, #4
 800d0f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 800d0f6:	4b85      	ldr	r3, [pc, #532]	; (800d30c <iso15693VCDCode+0x290>)
 800d0f8:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 800d0fa:	887a      	ldrh	r2, [r7, #2]
 800d0fc:	7d7b      	ldrb	r3, [r7, #21]
 800d0fe:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800d100:	b29b      	uxth	r3, r3
 800d102:	019b      	lsls	r3, r3, #6
 800d104:	b29b      	uxth	r3, r3
 800d106:	3302      	adds	r3, #2
 800d108:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800d10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d10c:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 800d10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d110:	881b      	ldrh	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d005      	beq.n	800d122 <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800d116:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d11a:	2b3f      	cmp	r3, #63	; 0x3f
 800d11c:	d807      	bhi.n	800d12e <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800d11e:	2301      	movs	r3, #1
 800d120:	e11e      	b.n	800d360 <iso15693VCDCode+0x2e4>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800d122:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d126:	2b40      	cmp	r3, #64	; 0x40
 800d128:	d801      	bhi.n	800d12e <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e118      	b.n	800d360 <iso15693VCDCode+0x2e4>
            }
        }
    }

    if (length == 0U)
 800d12e:	887b      	ldrh	r3, [r7, #2]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d102      	bne.n	800d13a <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 800d134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d136:	2201      	movs	r2, #1
 800d138:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800d13a:	887b      	ldrh	r3, [r7, #2]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d01b      	beq.n	800d178 <iso15693VCDCode+0xfc>
 800d140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d117      	bne.n	800d178 <iso15693VCDCode+0xfc>
 800d148:	783b      	ldrb	r3, [r7, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d014      	beq.n	800d178 <iso15693VCDCode+0xfc>
 800d14e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d152:	f083 0301 	eor.w	r3, r3, #1
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00d      	beq.n	800d178 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	f043 0302 	orr.w	r3, r3, #2
 800d164:	b2da      	uxtb	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	f023 0301 	bic.w	r3, r3, #1
 800d172:	b2da      	uxtb	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 800d178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d17a:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 800d17c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d180:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 800d182:	887b      	ldrh	r3, [r7, #2]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d03b      	beq.n	800d200 <iso15693VCDCode+0x184>
 800d188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d18a:	881b      	ldrh	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d137      	bne.n	800d200 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d196:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800d198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d19a:	881b      	ldrh	r3, [r3, #0]
 800d19c:	3301      	adds	r3, #1
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1a2:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800d1a4:	8afb      	ldrh	r3, [r7, #22]
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 800d1b0:	e026      	b.n	800d200 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800d1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	7818      	ldrb	r0, [r3, #0]
 800d1be:	f107 030e 	add.w	r3, r7, #14
 800d1c2:	8afa      	ldrh	r2, [r7, #22]
 800d1c4:	69fc      	ldr	r4, [r7, #28]
 800d1c6:	69b9      	ldr	r1, [r7, #24]
 800d1c8:	47a0      	blx	r4
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800d1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d0:	881a      	ldrh	r2, [r3, #0]
 800d1d2:	89fb      	ldrh	r3, [r7, #14]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1da:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800d1dc:	89fb      	ldrh	r3, [r7, #14]
 800d1de:	461a      	mov	r2, r3
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800d1e6:	89fb      	ldrh	r3, [r7, #14]
 800d1e8:	8afa      	ldrh	r2, [r7, #22]
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800d1ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d105      	bne.n	800d200 <iso15693VCDCode+0x184>
            (*offset)++;
 800d1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1f6:	881b      	ldrh	r3, [r3, #0]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1fe:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 800d200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d202:	881b      	ldrh	r3, [r3, #0]
 800d204:	887a      	ldrh	r2, [r7, #2]
 800d206:	429a      	cmp	r2, r3
 800d208:	d902      	bls.n	800d210 <iso15693VCDCode+0x194>
 800d20a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d0d0      	beq.n	800d1b2 <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 800d210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d212:	2b00      	cmp	r3, #0
 800d214:	d063      	beq.n	800d2de <iso15693VCDCode+0x262>
        return ERR_AGAIN;
 800d216:	230d      	movs	r3, #13
 800d218:	e0a2      	b.n	800d360 <iso15693VCDCode+0x2e4>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800d21a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d12b      	bne.n	800d278 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800d220:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <iso15693VCDCode+0x1b2>
 800d228:	f24e 0012 	movw	r0, #57362	; 0xe012
 800d22c:	e001      	b.n	800d232 <iso15693VCDCode+0x1b6>
 800d22e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d232:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d236:	2b00      	cmp	r3, #0
 800d238:	d002      	beq.n	800d240 <iso15693VCDCode+0x1c4>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	3301      	adds	r3, #1
 800d23e:	e000      	b.n	800d242 <iso15693VCDCode+0x1c6>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d246:	2a00      	cmp	r2, #0
 800d248:	d003      	beq.n	800d252 <iso15693VCDCode+0x1d6>
 800d24a:	887a      	ldrh	r2, [r7, #2]
 800d24c:	3a01      	subs	r2, #1
 800d24e:	b292      	uxth	r2, r2
 800d250:	e000      	b.n	800d254 <iso15693VCDCode+0x1d8>
 800d252:	887a      	ldrh	r2, [r7, #2]
 800d254:	4619      	mov	r1, r3
 800d256:	f7ff fe91 	bl	800cf7c <rfalCrcCalculateCcitt>
 800d25a:	4603      	mov	r3, r0
 800d25c:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800d25e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d262:	f083 0301 	eor.w	r3, r3, #1
 800d266:	b2db      	uxtb	r3, r3
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <iso15693VCDCode+0x1f8>
 800d26c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d26e:	43db      	mvns	r3, r3
 800d270:	b29b      	uxth	r3, r3
 800d272:	e000      	b.n	800d276 <iso15693VCDCode+0x1fa>
 800d274:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d276:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800d278:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 800d27e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d280:	0a1b      	lsrs	r3, r3, #8
 800d282:	b29b      	uxth	r3, r3
 800d284:	b2db      	uxtb	r3, r3
 800d286:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800d288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d28a:	881b      	ldrh	r3, [r3, #0]
 800d28c:	461a      	mov	r2, r3
 800d28e:	887b      	ldrh	r3, [r7, #2]
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d296:	4413      	add	r3, r2
 800d298:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 800d29c:	f107 030c 	add.w	r3, r7, #12
 800d2a0:	8afa      	ldrh	r2, [r7, #22]
 800d2a2:	69fc      	ldr	r4, [r7, #28]
 800d2a4:	69b9      	ldr	r1, [r7, #24]
 800d2a6:	47a0      	blx	r4
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800d2ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2ae:	881a      	ldrh	r2, [r3, #0]
 800d2b0:	89bb      	ldrh	r3, [r7, #12]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2b8:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800d2ba:	89bb      	ldrh	r3, [r7, #12]
 800d2bc:	461a      	mov	r2, r3
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800d2c4:	89bb      	ldrh	r3, [r7, #12]
 800d2c6:	8afa      	ldrh	r2, [r7, #22]
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800d2cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d105      	bne.n	800d2de <iso15693VCDCode+0x262>
            (*offset)++;
 800d2d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2d4:	881b      	ldrh	r3, [r3, #0]
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2dc:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800d2de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d109      	bne.n	800d2f8 <iso15693VCDCode+0x27c>
 800d2e4:	787b      	ldrb	r3, [r7, #1]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d006      	beq.n	800d2f8 <iso15693VCDCode+0x27c>
 800d2ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	887b      	ldrh	r3, [r7, #2]
 800d2f2:	3302      	adds	r3, #2
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d390      	bcc.n	800d21a <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 800d2f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d008      	beq.n	800d310 <iso15693VCDCode+0x294>
        return ERR_AGAIN;
 800d2fe:	230d      	movs	r3, #13
 800d300:	e02e      	b.n	800d360 <iso15693VCDCode+0x2e4>
 800d302:	bf00      	nop
 800d304:	2000074c 	.word	0x2000074c
 800d308:	0800d5a5 	.word	0x0800d5a5
 800d30c:	0800d64d 	.word	0x0800d64d
    }

    if ((!sendCrc && (*offset == length))
 800d310:	787b      	ldrb	r3, [r7, #1]
 800d312:	f083 0301 	eor.w	r3, r3, #1
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d004      	beq.n	800d326 <iso15693VCDCode+0x2aa>
 800d31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d31e:	881b      	ldrh	r3, [r3, #0]
 800d320:	887a      	ldrh	r2, [r7, #2]
 800d322:	429a      	cmp	r2, r3
 800d324:	d009      	beq.n	800d33a <iso15693VCDCode+0x2be>
            || (sendCrc && (*offset == (length + 2U))))
 800d326:	787b      	ldrb	r3, [r7, #1]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d018      	beq.n	800d35e <iso15693VCDCode+0x2e2>
 800d32c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	461a      	mov	r2, r3
 800d332:	887b      	ldrh	r3, [r7, #2]
 800d334:	3302      	adds	r3, #2
 800d336:	429a      	cmp	r2, r3
 800d338:	d111      	bne.n	800d35e <iso15693VCDCode+0x2e2>
    {
        *outputBuf = eof; 
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800d340:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800d342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d344:	881b      	ldrh	r3, [r3, #0]
 800d346:	3301      	adds	r3, #1
 800d348:	b29a      	uxth	r2, r3
 800d34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d34c:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800d34e:	8afb      	ldrh	r3, [r7, #22]
 800d350:	3b01      	subs	r3, #1
 800d352:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	3301      	adds	r3, #1
 800d358:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 800d35a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d35c:	e000      	b.n	800d360 <iso15693VCDCode+0x2e4>
        return ERR_AGAIN;
 800d35e:	230d      	movs	r3, #13
}
 800d360:	4618      	mov	r0, r3
 800d362:	372c      	adds	r7, #44	; 0x2c
 800d364:	46bd      	mov	sp, r7
 800d366:	bd90      	pop	{r4, r7, pc}

0800d368 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b088      	sub	sp, #32
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	607a      	str	r2, [r7, #4]
 800d372:	461a      	mov	r2, r3
 800d374:	460b      	mov	r3, r1
 800d376:	817b      	strh	r3, [r7, #10]
 800d378:	4613      	mov	r3, r2
 800d37a:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 800d37c:	2300      	movs	r3, #0
 800d37e:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 800d380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d382:	2200      	movs	r2, #0
 800d384:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 800d386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d388:	2200      	movs	r2, #0
 800d38a:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	f003 031f 	and.w	r3, r3, #31
 800d394:	2b17      	cmp	r3, #23
 800d396:	d001      	beq.n	800d39c <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 800d398:	2309      	movs	r3, #9
 800d39a:	e0ff      	b.n	800d59c <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 800d39c:	893b      	ldrh	r3, [r7, #8]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d101      	bne.n	800d3a6 <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	e0fa      	b.n	800d59c <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800d3a6:	2305      	movs	r3, #5
 800d3a8:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 800d3ae:	893b      	ldrh	r3, [r7, #8]
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f009 fcf7 	bl	8016da8 <memset>

    if (inBufLen == 0U)
 800d3ba:	897b      	ldrh	r3, [r7, #10]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f040 808e 	bne.w	800d4de <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 800d3c2:	2315      	movs	r3, #21
 800d3c4:	e0ea      	b.n	800d59c <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800d3ca:	8bbb      	ldrh	r3, [r7, #28]
 800d3cc:	08db      	lsrs	r3, r3, #3
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	8bbb      	ldrh	r3, [r7, #28]
 800d3dc:	f003 0307 	and.w	r3, r3, #7
 800d3e0:	fa42 f303 	asr.w	r3, r2, r3
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	f003 0301 	and.w	r3, r3, #1
 800d3ea:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800d3ec:	8bbb      	ldrh	r3, [r7, #28]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	08db      	lsrs	r3, r3, #3
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	4413      	add	r3, r2
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	8bbb      	ldrh	r3, [r7, #28]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	f003 0307 	and.w	r3, r3, #7
 800d402:	fa42 f303 	asr.w	r3, r2, r3
 800d406:	b2db      	uxtb	r3, r3
 800d408:	005b      	lsls	r3, r3, #1
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	f003 0302 	and.w	r3, r3, #2
 800d410:	b2da      	uxtb	r2, r3
 800d412:	7e3b      	ldrb	r3, [r7, #24]
 800d414:	4313      	orrs	r3, r2
 800d416:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 800d418:	7e3b      	ldrb	r3, [r7, #24]
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d102      	bne.n	800d424 <iso15693VICCDecode+0xbc>
        {
            bp++;
 800d41e:	8b7b      	ldrh	r3, [r7, #26]
 800d420:	3301      	adds	r3, #1
 800d422:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 800d424:	7e3b      	ldrb	r3, [r7, #24]
 800d426:	2b02      	cmp	r3, #2
 800d428:	d119      	bne.n	800d45e <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800d42a:	8b7b      	ldrh	r3, [r7, #26]
 800d42c:	08db      	lsrs	r3, r3, #3
 800d42e:	b29b      	uxth	r3, r3
 800d430:	461a      	mov	r2, r3
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4413      	add	r3, r2
 800d436:	7819      	ldrb	r1, [r3, #0]
 800d438:	8b7b      	ldrh	r3, [r7, #26]
 800d43a:	f003 0307 	and.w	r3, r3, #7
 800d43e:	2201      	movs	r2, #1
 800d440:	fa02 f303 	lsl.w	r3, r2, r3
 800d444:	b2da      	uxtb	r2, r3
 800d446:	8b7b      	ldrh	r3, [r7, #26]
 800d448:	08db      	lsrs	r3, r3, #3
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	4618      	mov	r0, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4403      	add	r3, r0
 800d452:	430a      	orrs	r2, r1
 800d454:	b2d2      	uxtb	r2, r2
 800d456:	701a      	strb	r2, [r3, #0]
            bp++;
 800d458:	8b7b      	ldrh	r3, [r7, #26]
 800d45a:	3301      	adds	r3, #1
 800d45c:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800d45e:	8b7b      	ldrh	r3, [r7, #26]
 800d460:	f003 0307 	and.w	r3, r3, #7
 800d464:	b29b      	uxth	r3, r3
 800d466:	2b00      	cmp	r3, #0
 800d468:	d115      	bne.n	800d496 <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 800d46a:	8bbb      	ldrh	r3, [r7, #28]
 800d46c:	08db      	lsrs	r3, r3, #3
 800d46e:	b29b      	uxth	r3, r3
 800d470:	461a      	mov	r2, r3
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	4413      	add	r3, r2
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d47c:	2ba0      	cmp	r3, #160	; 0xa0
 800d47e:	d10a      	bne.n	800d496 <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800d480:	8bbb      	ldrh	r3, [r7, #28]
 800d482:	08db      	lsrs	r3, r3, #3
 800d484:	b29b      	uxth	r3, r3
 800d486:	3301      	adds	r3, #1
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	4413      	add	r3, r2
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	2b03      	cmp	r3, #3
 800d490:	d101      	bne.n	800d496 <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 800d492:	2301      	movs	r3, #1
 800d494:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 800d496:	7e3b      	ldrb	r3, [r7, #24]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d002      	beq.n	800d4a2 <iso15693VICCDecode+0x13a>
 800d49c:	7e3b      	ldrb	r3, [r7, #24]
 800d49e:	2b03      	cmp	r3, #3
 800d4a0:	d10f      	bne.n	800d4c2 <iso15693VICCDecode+0x15a>
 800d4a2:	7e7b      	ldrb	r3, [r7, #25]
 800d4a4:	f083 0301 	eor.w	r3, r3, #1
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d009      	beq.n	800d4c2 <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 800d4ae:	8b7a      	ldrh	r2, [r7, #26]
 800d4b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d302      	bcc.n	800d4bc <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 800d4b6:	231d      	movs	r3, #29
 800d4b8:	83fb      	strh	r3, [r7, #30]
 800d4ba:	e002      	b.n	800d4c2 <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 800d4bc:	8b7b      	ldrh	r3, [r7, #26]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800d4c2:	8b7a      	ldrh	r2, [r7, #26]
 800d4c4:	893b      	ldrh	r3, [r7, #8]
 800d4c6:	00db      	lsls	r3, r3, #3
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d20f      	bcs.n	800d4ec <iso15693VICCDecode+0x184>
 800d4cc:	8bfb      	ldrh	r3, [r7, #30]
 800d4ce:	2b1d      	cmp	r3, #29
 800d4d0:	d00c      	beq.n	800d4ec <iso15693VICCDecode+0x184>
 800d4d2:	7e7b      	ldrb	r3, [r7, #25]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d109      	bne.n	800d4ec <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800d4d8:	8bbb      	ldrh	r3, [r7, #28]
 800d4da:	3302      	adds	r3, #2
 800d4dc:	83bb      	strh	r3, [r7, #28]
 800d4de:	8bba      	ldrh	r2, [r7, #28]
 800d4e0:	897b      	ldrh	r3, [r7, #10]
 800d4e2:	00db      	lsls	r3, r3, #3
 800d4e4:	3b02      	subs	r3, #2
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	f4ff af6d 	bcc.w	800d3c6 <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 800d4ec:	8b7b      	ldrh	r3, [r7, #26]
 800d4ee:	08db      	lsrs	r3, r3, #3
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f4:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 800d4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f8:	8b7a      	ldrh	r2, [r7, #26]
 800d4fa:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 800d4fc:	8bfb      	ldrh	r3, [r7, #30]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <iso15693VICCDecode+0x19e>
    {
        return err;
 800d502:	8bfb      	ldrh	r3, [r7, #30]
 800d504:	e04a      	b.n	800d59c <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 800d506:	8b7b      	ldrh	r3, [r7, #26]
 800d508:	f003 0307 	and.w	r3, r3, #7
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d001      	beq.n	800d516 <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 800d512:	2315      	movs	r3, #21
 800d514:	e042      	b.n	800d59c <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 800d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d518:	881b      	ldrh	r3, [r3, #0]
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	d93b      	bls.n	800d596 <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800d51e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <iso15693VICCDecode+0x1c4>
 800d526:	f24e 0012 	movw	r0, #57362	; 0xe012
 800d52a:	e001      	b.n	800d530 <iso15693VICCDecode+0x1c8>
 800d52c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d532:	881b      	ldrh	r3, [r3, #0]
 800d534:	3b02      	subs	r3, #2
 800d536:	b29b      	uxth	r3, r3
 800d538:	461a      	mov	r2, r3
 800d53a:	6879      	ldr	r1, [r7, #4]
 800d53c:	f7ff fd1e 	bl	800cf7c <rfalCrcCalculateCcitt>
 800d540:	4603      	mov	r3, r0
 800d542:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800d544:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d548:	f083 0301 	eor.w	r3, r3, #1
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d003      	beq.n	800d55a <iso15693VICCDecode+0x1f2>
 800d552:	8afb      	ldrh	r3, [r7, #22]
 800d554:	43db      	mvns	r3, r3
 800d556:	b29b      	uxth	r3, r3
 800d558:	e000      	b.n	800d55c <iso15693VICCDecode+0x1f4>
 800d55a:	8afb      	ldrh	r3, [r7, #22]
 800d55c:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800d55e:	8afb      	ldrh	r3, [r7, #22]
 800d560:	b2db      	uxtb	r3, r3
 800d562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d564:	8812      	ldrh	r2, [r2, #0]
 800d566:	3a02      	subs	r2, #2
 800d568:	6879      	ldr	r1, [r7, #4]
 800d56a:	440a      	add	r2, r1
 800d56c:	7812      	ldrb	r2, [r2, #0]
 800d56e:	4293      	cmp	r3, r2
 800d570:	d10e      	bne.n	800d590 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 800d572:	8afb      	ldrh	r3, [r7, #22]
 800d574:	0a1b      	lsrs	r3, r3, #8
 800d576:	b29b      	uxth	r3, r3
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d57c:	8812      	ldrh	r2, [r2, #0]
 800d57e:	3a01      	subs	r2, #1
 800d580:	6879      	ldr	r1, [r7, #4]
 800d582:	440a      	add	r2, r1
 800d584:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800d586:	4293      	cmp	r3, r2
 800d588:	d102      	bne.n	800d590 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 800d58a:	2300      	movs	r3, #0
 800d58c:	83fb      	strh	r3, [r7, #30]
 800d58e:	e004      	b.n	800d59a <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 800d590:	2315      	movs	r3, #21
 800d592:	83fb      	strh	r3, [r7, #30]
 800d594:	e001      	b.n	800d59a <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 800d596:	2315      	movs	r3, #21
 800d598:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 800d59a:	8bfb      	ldrh	r3, [r7, #30]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3720      	adds	r7, #32
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b089      	sub	sp, #36	; 0x24
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60b9      	str	r1, [r7, #8]
 800d5ac:	607b      	str	r3, [r7, #4]
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	73fb      	strb	r3, [r7, #15]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 800d5c4:	89bb      	ldrh	r3, [r7, #12]
 800d5c6:	2b03      	cmp	r3, #3
 800d5c8:	d801      	bhi.n	800d5ce <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e038      	b.n	800d640 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 800d5ce:	7bfb      	ldrb	r3, [r7, #15]
 800d5d0:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	83bb      	strh	r3, [r7, #28]
 800d5d6:	e02f      	b.n	800d638 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 800d5d8:	7ffb      	ldrb	r3, [r7, #31]
 800d5da:	f003 0303 	and.w	r3, r3, #3
 800d5de:	2b03      	cmp	r3, #3
 800d5e0:	d81a      	bhi.n	800d618 <iso15693PhyVCDCode1Of4+0x74>
 800d5e2:	a201      	add	r2, pc, #4	; (adr r2, 800d5e8 <iso15693PhyVCDCode1Of4+0x44>)
 800d5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5e8:	0800d5f9 	.word	0x0800d5f9
 800d5ec:	0800d601 	.word	0x0800d601
 800d5f0:	0800d609 	.word	0x0800d609
 800d5f4:	0800d611 	.word	0x0800d611
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	701a      	strb	r2, [r3, #0]
                break;
 800d5fe:	e00c      	b.n	800d61a <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	2208      	movs	r2, #8
 800d604:	701a      	strb	r2, [r3, #0]
                break;
 800d606:	e008      	b.n	800d61a <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	2220      	movs	r2, #32
 800d60c:	701a      	strb	r2, [r3, #0]
                break;
 800d60e:	e004      	b.n	800d61a <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	2280      	movs	r2, #128	; 0x80
 800d614:	701a      	strb	r2, [r3, #0]
                break;
 800d616:	e000      	b.n	800d61a <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 800d618:	bf00      	nop
        }
        outbuf++;
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	3301      	adds	r3, #1
 800d61e:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	881b      	ldrh	r3, [r3, #0]
 800d624:	3301      	adds	r3, #1
 800d626:	b29a      	uxth	r2, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 800d62c:	7ffb      	ldrb	r3, [r7, #31]
 800d62e:	089b      	lsrs	r3, r3, #2
 800d630:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800d632:	8bbb      	ldrh	r3, [r7, #28]
 800d634:	3301      	adds	r3, #1
 800d636:	83bb      	strh	r3, [r7, #28]
 800d638:	8bbb      	ldrh	r3, [r7, #28]
 800d63a:	2b03      	cmp	r3, #3
 800d63c:	d9cc      	bls.n	800d5d8 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 800d63e:	8afb      	ldrh	r3, [r7, #22]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3724      	adds	r7, #36	; 0x24
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr

0800d64c <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b089      	sub	sp, #36	; 0x24
 800d650:	af00      	add	r7, sp, #0
 800d652:	60b9      	str	r1, [r7, #8]
 800d654:	607b      	str	r3, [r7, #4]
 800d656:	4603      	mov	r3, r0
 800d658:	73fb      	strb	r3, [r7, #15]
 800d65a:	4613      	mov	r3, r2
 800d65c:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d65e:	2300      	movs	r3, #0
 800d660:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 800d66c:	89bb      	ldrh	r3, [r7, #12]
 800d66e:	2b3f      	cmp	r3, #63	; 0x3f
 800d670:	d801      	bhi.n	800d676 <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 800d672:	2301      	movs	r3, #1
 800d674:	e039      	b.n	800d6ea <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 800d676:	7bfb      	ldrb	r3, [r7, #15]
 800d678:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d67a:	2300      	movs	r3, #0
 800d67c:	83bb      	strh	r3, [r7, #28]
 800d67e:	e030      	b.n	800d6e2 <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 800d680:	7ffb      	ldrb	r3, [r7, #31]
 800d682:	2b03      	cmp	r3, #3
 800d684:	d81a      	bhi.n	800d6bc <iso15693PhyVCDCode1Of256+0x70>
 800d686:	a201      	add	r2, pc, #4	; (adr r2, 800d68c <iso15693PhyVCDCode1Of256+0x40>)
 800d688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68c:	0800d69d 	.word	0x0800d69d
 800d690:	0800d6a5 	.word	0x0800d6a5
 800d694:	0800d6ad 	.word	0x0800d6ad
 800d698:	0800d6b5 	.word	0x0800d6b5
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	2202      	movs	r2, #2
 800d6a0:	701a      	strb	r2, [r3, #0]
                break;
 800d6a2:	e00f      	b.n	800d6c4 <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	2208      	movs	r2, #8
 800d6a8:	701a      	strb	r2, [r3, #0]
                break;
 800d6aa:	e00b      	b.n	800d6c4 <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	2220      	movs	r2, #32
 800d6b0:	701a      	strb	r2, [r3, #0]
                break;
 800d6b2:	e007      	b.n	800d6c4 <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	2280      	movs	r2, #128	; 0x80
 800d6b8:	701a      	strb	r2, [r3, #0]
                break;
 800d6ba:	e003      	b.n	800d6c4 <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	701a      	strb	r2, [r3, #0]
                break;               
 800d6c2:	bf00      	nop
        }
        outbuf++;
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	881b      	ldrh	r3, [r3, #0]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 800d6d6:	7ffb      	ldrb	r3, [r7, #31]
 800d6d8:	3b04      	subs	r3, #4
 800d6da:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d6dc:	8bbb      	ldrh	r3, [r7, #28]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	83bb      	strh	r3, [r7, #28]
 800d6e2:	8bbb      	ldrh	r3, [r7, #28]
 800d6e4:	2b3f      	cmp	r3, #63	; 0x3f
 800d6e6:	d9cb      	bls.n	800d680 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 800d6e8:	8afb      	ldrh	r3, [r7, #22]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3724      	adds	r7, #36	; 0x24
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop

0800d6f8 <rfalInitialize>:
*/


/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    EXIT_ON_ERR( err, st25r3916Initialize() );
 800d6fe:	f002 f9d3 	bl	800faa8 <st25r3916Initialize>
 800d702:	4603      	mov	r3, r0
 800d704:	80fb      	strh	r3, [r7, #6]
 800d706:	88fb      	ldrh	r3, [r7, #6]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <rfalInitialize+0x18>
 800d70c:	88fb      	ldrh	r3, [r7, #6]
 800d70e:	e047      	b.n	800d7a0 <rfalInitialize+0xa8>
    
    st25r3916ClearInterrupts();
 800d710:	f003 fc42 	bl	8010f98 <st25r3916ClearInterrupts>
    
    /* Disable any previous observation mode */
    rfalST25R3916ObsModeDisable();
 800d714:	2140      	movs	r1, #64	; 0x40
 800d716:	2001      	movs	r0, #1
 800d718:	f003 f957 	bl	80109ca <st25r3916WriteTestRegister>
    
    /*******************************************************************************/    
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 800d71c:	2000      	movs	r0, #0
 800d71e:	f7ff fb1f 	bl	800cd60 <rfalSetAnalogConfig>
    

    /*******************************************************************************/
    /* Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 800d722:	2203      	movs	r2, #3
 800d724:	2103      	movs	r1, #3
 800d726:	2002      	movs	r0, #2
 800d728:	f003 f9d8 	bl	8010adc <st25r3916ChangeRegisterBits>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800d72c:	f001 feb2 	bl	800f494 <rfalFIFOStatusClear>
    
    
    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 800d730:	4b1d      	ldr	r3, [pc, #116]	; (800d7a8 <rfalInitialize+0xb0>)
 800d732:	2201      	movs	r2, #1
 800d734:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 800d736:	4b1c      	ldr	r3, [pc, #112]	; (800d7a8 <rfalInitialize+0xb0>)
 800d738:	2200      	movs	r2, #0
 800d73a:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 800d73c:	4b1a      	ldr	r3, [pc, #104]	; (800d7a8 <rfalInitialize+0xb0>)
 800d73e:	2200      	movs	r2, #0
 800d740:	711a      	strb	r2, [r3, #4]
    
    /* Set RFAL default configs */
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 800d742:	4b19      	ldr	r3, [pc, #100]	; (800d7a8 <rfalInitialize+0xb0>)
 800d744:	2200      	movs	r2, #0
 800d746:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 800d748:	4b17      	ldr	r3, [pc, #92]	; (800d7a8 <rfalInitialize+0xb0>)
 800d74a:	2200      	movs	r2, #0
 800d74c:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 800d74e:	4b16      	ldr	r3, [pc, #88]	; (800d7a8 <rfalInitialize+0xb0>)
 800d750:	2200      	movs	r2, #0
 800d752:	71da      	strb	r2, [r3, #7]
    
    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 800d754:	4b14      	ldr	r3, [pc, #80]	; (800d7a8 <rfalInitialize+0xb0>)
 800d756:	2200      	movs	r2, #0
 800d758:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 800d75a:	4b13      	ldr	r3, [pc, #76]	; (800d7a8 <rfalInitialize+0xb0>)
 800d75c:	2200      	movs	r2, #0
 800d75e:	751a      	strb	r2, [r3, #20]
    
    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 800d760:	4b11      	ldr	r3, [pc, #68]	; (800d7a8 <rfalInitialize+0xb0>)
 800d762:	2200      	movs	r2, #0
 800d764:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 800d766:	4b10      	ldr	r3, [pc, #64]	; (800d7a8 <rfalInitialize+0xb0>)
 800d768:	2200      	movs	r2, #0
 800d76a:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 800d76c:	4b0e      	ldr	r3, [pc, #56]	; (800d7a8 <rfalInitialize+0xb0>)
 800d76e:	2200      	movs	r2, #0
 800d770:	609a      	str	r2, [r3, #8]
    
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 800d772:	4b0d      	ldr	r3, [pc, #52]	; (800d7a8 <rfalInitialize+0xb0>)
 800d774:	2200      	movs	r2, #0
 800d776:	63da      	str	r2, [r3, #60]	; 0x3c
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800d778:	4b0b      	ldr	r3, [pc, #44]	; (800d7a8 <rfalInitialize+0xb0>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	645a      	str	r2, [r3, #68]	; 0x44
    
    gRFAL.callbacks.preTxRx  = NULL;
 800d77e:	4b0a      	ldr	r3, [pc, #40]	; (800d7a8 <rfalInitialize+0xb0>)
 800d780:	2200      	movs	r2, #0
 800d782:	649a      	str	r2, [r3, #72]	; 0x48
    gRFAL.callbacks.postTxRx = NULL;
 800d784:	4b08      	ldr	r3, [pc, #32]	; (800d7a8 <rfalInitialize+0xb0>)
 800d786:	2200      	movs	r2, #0
 800d788:	64da      	str	r2, [r3, #76]	; 0x4c
    
#if RFAL_FEATURE_NFCV    
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 800d78a:	4b07      	ldr	r3, [pc, #28]	; (800d7a8 <rfalInitialize+0xb0>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
    gRFAL.Lm.iniFlag         = false;
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800d792:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <rfalInitialize+0xb0>)
 800d794:	2200      	movs	r2, #0
 800d796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    
    /*******************************************************************************/    
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 800d79a:	f000 f807 	bl	800d7ac <rfalCalibrate>
    
    return ERR_NONE;
 800d79e:	2300      	movs	r3, #0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	20000754 	.word	0x20000754

0800d7ac <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d7b2:	4b0b      	ldr	r3, [pc, #44]	; (800d7e0 <rfalCalibrate+0x34>)
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d101      	bne.n	800d7be <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 800d7ba:	2321      	movs	r3, #33	; 0x21
 800d7bc:	e00c      	b.n	800d7d8 <rfalCalibrate+0x2c>
    /*******************************************************************************/
    /* Perform ST25R3916 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3916CheckReg( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 800d7be:	2200      	movs	r2, #0
 800d7c0:	2180      	movs	r1, #128	; 0x80
 800d7c2:	202c      	movs	r0, #44	; 0x2c
 800d7c4:	f003 fa0e 	bl	8010be4 <st25r3916CheckReg>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d003      	beq.n	800d7d6 <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3916AdjustRegulators( &resValue );
 800d7ce:	1dbb      	adds	r3, r7, #6
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f002 fa0d 	bl	800fbf0 <st25r3916AdjustRegulators>
    }
    
    return ERR_NONE;
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	20000754 	.word	0x20000754

0800d7e4 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	71fb      	strb	r3, [r7, #7]
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	71bb      	strb	r3, [r7, #6]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d7f6:	4b99      	ldr	r3, [pc, #612]	; (800da5c <rfalSetMode+0x278>)
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d101      	bne.n	800d802 <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 800d7fe:	2321      	movs	r3, #33	; 0x21
 800d800:	e127      	b.n	800da52 <rfalSetMode+0x26e>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 800d802:	79bb      	ldrb	r3, [r7, #6]
 800d804:	2bff      	cmp	r3, #255	; 0xff
 800d806:	d002      	beq.n	800d80e <rfalSetMode+0x2a>
 800d808:	797b      	ldrb	r3, [r7, #5]
 800d80a:	2bff      	cmp	r3, #255	; 0xff
 800d80c:	d101      	bne.n	800d812 <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 800d80e:	2307      	movs	r3, #7
 800d810:	e11f      	b.n	800da52 <rfalSetMode+0x26e>
    }
   
    switch( mode )
 800d812:	79fb      	ldrb	r3, [r7, #7]
 800d814:	3b01      	subs	r3, #1
 800d816:	2b0c      	cmp	r3, #12
 800d818:	f200 8107 	bhi.w	800da2a <rfalSetMode+0x246>
 800d81c:	a201      	add	r2, pc, #4	; (adr r2, 800d824 <rfalSetMode+0x40>)
 800d81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d822:	bf00      	nop
 800d824:	0800d859 	.word	0x0800d859
 800d828:	0800d87b 	.word	0x0800d87b
 800d82c:	0800d89d 	.word	0x0800d89d
 800d830:	0800d8d3 	.word	0x0800d8d3
 800d834:	0800d909 	.word	0x0800d909
 800d838:	0800d93f 	.word	0x0800d93f
 800d83c:	0800d961 	.word	0x0800d961
 800d840:	0800d961 	.word	0x0800d961
 800d844:	0800d97b 	.word	0x0800d97b
 800d848:	0800d9e3 	.word	0x0800d9e3
 800d84c:	0800da27 	.word	0x0800da27
 800d850:	0800da05 	.word	0x0800da05
 800d854:	0800d9af 	.word	0x0800d9af
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d858:	2104      	movs	r1, #4
 800d85a:	2002      	movs	r0, #2
 800d85c:	f003 f8da 	bl	8010a14 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a );
 800d860:	2108      	movs	r1, #8
 800d862:	2003      	movs	r0, #3
 800d864:	f002 ffec 	bl	8010840 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d868:	f240 1001 	movw	r0, #257	; 0x101
 800d86c:	f7ff fa78 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d870:	f44f 7081 	mov.w	r0, #258	; 0x102
 800d874:	f7ff fa74 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800d878:	e0d9      	b.n	800da2e <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d87a:	2104      	movs	r1, #4
 800d87c:	2002      	movs	r0, #2
 800d87e:	f003 f8c9 	bl	8010a14 <st25r3916ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 800d882:	2120      	movs	r1, #32
 800d884:	2003      	movs	r0, #3
 800d886:	f002 ffdb 	bl	8010840 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d88a:	f240 1001 	movw	r0, #257	; 0x101
 800d88e:	f7ff fa67 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d892:	f44f 7081 	mov.w	r0, #258	; 0x102
 800d896:	f7ff fa63 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800d89a:	e0c8      	b.n	800da2e <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d89c:	2104      	movs	r1, #4
 800d89e:	2002      	movs	r0, #2
 800d8a0:	f003 f8b8 	bl	8010a14 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d8a4:	2110      	movs	r1, #16
 800d8a6:	2003      	movs	r0, #3
 800d8a8:	f002 ffca 	bl	8010840 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	21fc      	movs	r1, #252	; 0xfc
 800d8b0:	2006      	movs	r0, #6
 800d8b2:	f003 f913 	bl	8010adc <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	21f0      	movs	r1, #240	; 0xf0
 800d8ba:	2007      	movs	r0, #7
 800d8bc:	f003 f90e 	bl	8010adc <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d8c0:	f240 2001 	movw	r0, #513	; 0x201
 800d8c4:	f7ff fa4c 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d8c8:	f240 2002 	movw	r0, #514	; 0x202
 800d8cc:	f7ff fa48 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800d8d0:	e0ad      	b.n	800da2e <rfalSetMode+0x24a>
            
        /*******************************************************************************/    
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d8d2:	2104      	movs	r1, #4
 800d8d4:	2002      	movs	r0, #2
 800d8d6:	f003 f89d 	bl	8010a14 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d8da:	2110      	movs	r1, #16
 800d8dc:	2003      	movs	r0, #3
 800d8de:	f002 ffaf 	bl	8010840 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	21fc      	movs	r1, #252	; 0xfc
 800d8e6:	2006      	movs	r0, #6
 800d8e8:	f003 f8f8 	bl	8010adc <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d8ec:	2220      	movs	r2, #32
 800d8ee:	21f0      	movs	r1, #240	; 0xf0
 800d8f0:	2007      	movs	r0, #7
 800d8f2:	f003 f8f3 	bl	8010adc <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof  ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d8f6:	f240 2001 	movw	r0, #513	; 0x201
 800d8fa:	f7ff fa31 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d8fe:	f240 2002 	movw	r0, #514	; 0x202
 800d902:	f7ff fa2d 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800d906:	e092      	b.n	800da2e <rfalSetMode+0x24a>
            
            /*******************************************************************************/    
            case RFAL_MODE_POLL_B_CTS:
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d908:	2104      	movs	r1, #4
 800d90a:	2002      	movs	r0, #2
 800d90c:	f003 f882 	bl	8010a14 <st25r3916ClrRegisterBits>
                
                /* Enable ISO14443B mode */
                st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d910:	2110      	movs	r1, #16
 800d912:	2003      	movs	r0, #3
 800d914:	f002 ff94 	bl	8010840 <st25r3916WriteRegister>
                
                /* Set the EGT, SOF, EOF and EOF */
                st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d918:	2200      	movs	r2, #0
 800d91a:	21fc      	movs	r1, #252	; 0xfc
 800d91c:	2006      	movs	r0, #6
 800d91e:	f003 f8dd 	bl	8010adc <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                          ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                            
                /* Set the minimum TR1, clear SOF, EOF and EOF12 */
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d922:	2230      	movs	r2, #48	; 0x30
 800d924:	21f0      	movs	r1, #240	; 0xf0
 800d926:	2007      	movs	r0, #7
 800d928:	f003 f8d8 	bl	8010adc <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                          (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof ) );


                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d92c:	f240 2001 	movw	r0, #513	; 0x201
 800d930:	f7ff fa16 	bl	800cd60 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d934:	f240 2002 	movw	r0, #514	; 0x202
 800d938:	f7ff fa12 	bl	800cd60 <rfalSetAnalogConfig>
                break;
 800d93c:	e077      	b.n	800da2e <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d93e:	2104      	movs	r1, #4
 800d940:	2002      	movs	r0, #2
 800d942:	f003 f867 	bl	8010a14 <st25r3916ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_felica );
 800d946:	2118      	movs	r1, #24
 800d948:	2003      	movs	r0, #3
 800d94a:	f002 ff79 	bl	8010840 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d94e:	f240 4001 	movw	r0, #1025	; 0x401
 800d952:	f7ff fa05 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d956:	f240 4002 	movw	r0, #1026	; 0x402
 800d95a:	f7ff fa01 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800d95e:	e066      	b.n	800da2e <rfalSetMode+0x24a>
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d960:	2104      	movs	r1, #4
 800d962:	2002      	movs	r0, #2
 800d964:	f003 f856 	bl	8010a14 <st25r3916ClrRegisterBits>
                
                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d968:	f241 0001 	movw	r0, #4097	; 0x1001
 800d96c:	f7ff f9f8 	bl	800cd60 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d970:	f241 0002 	movw	r0, #4098	; 0x1002
 800d974:	f7ff f9f4 	bl	800cd60 <rfalSetAnalogConfig>
                break;
 800d978:	e059      	b.n	800da2e <rfalSetMode+0x24a>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication Initiator mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_eof) );
 800d97a:	2102      	movs	r1, #2
 800d97c:	2003      	movs	r0, #3
 800d97e:	f002 ff5f 	bl	8010840 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */ 
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800d982:	2200      	movs	r2, #0
 800d984:	2104      	movs	r1, #4
 800d986:	2012      	movs	r0, #18
 800d988:	f003 f8a8 	bl	8010adc <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800d98c:	2160      	movs	r1, #96	; 0x60
 800d98e:	2040      	movs	r0, #64	; 0x40
 800d990:	f002 fad1 	bl	800ff36 <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800d994:	2180      	movs	r1, #128	; 0x80
 800d996:	2015      	movs	r0, #21
 800d998:	f002 ff52 	bl	8010840 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d99c:	f640 0001 	movw	r0, #2049	; 0x801
 800d9a0:	f7ff f9de 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d9a4:	f640 0002 	movw	r0, #2050	; 0x802
 800d9a8:	f7ff f9da 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800d9ac:	e03f      	b.n	800da2e <rfalSetMode+0x24a>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication Target mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 800d9ae:	21ba      	movs	r1, #186	; 0xba
 800d9b0:	2003      	movs	r0, #3
 800d9b2:	f002 ff45 	bl	8010840 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	2104      	movs	r1, #4
 800d9ba:	2012      	movs	r0, #18
 800d9bc:	f003 f88e 	bl	8010adc <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800d9c0:	2160      	movs	r1, #96	; 0x60
 800d9c2:	2040      	movs	r0, #64	; 0x40
 800d9c4:	f002 fab7 	bl	800ff36 <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800d9c8:	2180      	movs	r1, #128	; 0x80
 800d9ca:	2015      	movs	r0, #21
 800d9cc:	f002 ff38 	bl	8010840 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d9d0:	f648 0001 	movw	r0, #34817	; 0x8801
 800d9d4:	f7ff f9c4 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d9d8:	f648 0002 	movw	r0, #34818	; 0x8802
 800d9dc:	f7ff f9c0 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800d9e0:	e025      	b.n	800da2e <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:

            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d9e2:	2104      	movs	r1, #4
 800d9e4:	2002      	movs	r0, #2
 800d9e6:	f003 f815 	bl	8010a14 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-A mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfca | ST25R3916_REG_MODE_nfc_ar_off) );
 800d9ea:	2188      	movs	r1, #136	; 0x88
 800d9ec:	2003      	movs	r0, #3
 800d9ee:	f002 ff27 	bl	8010840 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d9f2:	f248 1001 	movw	r0, #33025	; 0x8101
 800d9f6:	f7ff f9b3 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d9fa:	f248 1002 	movw	r0, #33026	; 0x8102
 800d9fe:	f7ff f9af 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800da02:	e014      	b.n	800da2e <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800da04:	2104      	movs	r1, #4
 800da06:	2002      	movs	r0, #2
 800da08:	f003 f804 	bl	8010a14 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-F mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfcf | ST25R3916_REG_MODE_nfc_ar_off) );
 800da0c:	21a0      	movs	r1, #160	; 0xa0
 800da0e:	2003      	movs	r0, #3
 800da10:	f002 ff16 	bl	8010840 <st25r3916WriteRegister>
            
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800da14:	f248 4001 	movw	r0, #33793	; 0x8401
 800da18:	f7ff f9a2 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800da1c:	f248 4002 	movw	r0, #33794	; 0x8402
 800da20:	f7ff f99e 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800da24:	e003      	b.n	800da2e <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
            return ERR_NOTSUPP;
 800da26:	2318      	movs	r3, #24
 800da28:	e013      	b.n	800da52 <rfalSetMode+0x26e>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800da2a:	230f      	movs	r3, #15
 800da2c:	e011      	b.n	800da52 <rfalSetMode+0x26e>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800da2e:	4b0b      	ldr	r3, [pc, #44]	; (800da5c <rfalSetMode+0x278>)
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	2b02      	cmp	r3, #2
 800da34:	bf38      	it	cc
 800da36:	2302      	movcc	r3, #2
 800da38:	b2da      	uxtb	r2, r3
 800da3a:	4b08      	ldr	r3, [pc, #32]	; (800da5c <rfalSetMode+0x278>)
 800da3c:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 800da3e:	4a07      	ldr	r2, [pc, #28]	; (800da5c <rfalSetMode+0x278>)
 800da40:	79fb      	ldrb	r3, [r7, #7]
 800da42:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 800da44:	797a      	ldrb	r2, [r7, #5]
 800da46:	79bb      	ldrb	r3, [r7, #6]
 800da48:	4611      	mov	r1, r2
 800da4a:	4618      	mov	r0, r3
 800da4c:	f000 f808 	bl	800da60 <rfalSetBitRate>
 800da50:	4603      	mov	r3, r0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	20000754 	.word	0x20000754

0800da60 <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b088      	sub	sp, #32
 800da64:	af00      	add	r7, sp, #0
 800da66:	4603      	mov	r3, r0
 800da68:	460a      	mov	r2, r1
 800da6a:	71fb      	strb	r3, [r7, #7]
 800da6c:	4613      	mov	r3, r2
 800da6e:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800da70:	4ba0      	ldr	r3, [pc, #640]	; (800dcf4 <rfalSetBitRate+0x294>)
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d101      	bne.n	800da7c <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 800da78:	2321      	movs	r3, #33	; 0x21
 800da7a:	e2d2      	b.n	800e022 <rfalSetBitRate+0x5c2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800da7c:	79fb      	ldrb	r3, [r7, #7]
 800da7e:	2bff      	cmp	r3, #255	; 0xff
 800da80:	d102      	bne.n	800da88 <rfalSetBitRate+0x28>
 800da82:	4b9c      	ldr	r3, [pc, #624]	; (800dcf4 <rfalSetBitRate+0x294>)
 800da84:	789b      	ldrb	r3, [r3, #2]
 800da86:	e000      	b.n	800da8a <rfalSetBitRate+0x2a>
 800da88:	79fb      	ldrb	r3, [r7, #7]
 800da8a:	4a9a      	ldr	r2, [pc, #616]	; (800dcf4 <rfalSetBitRate+0x294>)
 800da8c:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800da8e:	79bb      	ldrb	r3, [r7, #6]
 800da90:	2bff      	cmp	r3, #255	; 0xff
 800da92:	d102      	bne.n	800da9a <rfalSetBitRate+0x3a>
 800da94:	4b97      	ldr	r3, [pc, #604]	; (800dcf4 <rfalSetBitRate+0x294>)
 800da96:	78db      	ldrb	r3, [r3, #3]
 800da98:	e000      	b.n	800da9c <rfalSetBitRate+0x3c>
 800da9a:	79bb      	ldrb	r3, [r7, #6]
 800da9c:	4a95      	ldr	r2, [pc, #596]	; (800dcf4 <rfalSetBitRate+0x294>)
 800da9e:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 800daa0:	4b94      	ldr	r3, [pc, #592]	; (800dcf4 <rfalSetBitRate+0x294>)
 800daa2:	785b      	ldrb	r3, [r3, #1]
 800daa4:	2b07      	cmp	r3, #7
 800daa6:	d012      	beq.n	800dace <rfalSetBitRate+0x6e>
 800daa8:	4b92      	ldr	r3, [pc, #584]	; (800dcf4 <rfalSetBitRate+0x294>)
 800daaa:	785b      	ldrb	r3, [r3, #1]
 800daac:	2b08      	cmp	r3, #8
 800daae:	d00e      	beq.n	800dace <rfalSetBitRate+0x6e>
    {
        /* Set bit rate register */
        EXIT_ON_ERR( ret, st25r3916SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800dab0:	4b90      	ldr	r3, [pc, #576]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dab2:	789a      	ldrb	r2, [r3, #2]
 800dab4:	4b8f      	ldr	r3, [pc, #572]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dab6:	78db      	ldrb	r3, [r3, #3]
 800dab8:	4619      	mov	r1, r3
 800daba:	4610      	mov	r0, r2
 800dabc:	f002 f910 	bl	800fce0 <st25r3916SetBitrate>
 800dac0:	4603      	mov	r3, r0
 800dac2:	83fb      	strh	r3, [r7, #30]
 800dac4:	8bfb      	ldrh	r3, [r7, #30]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d001      	beq.n	800dace <rfalSetBitRate+0x6e>
 800daca:	8bfb      	ldrh	r3, [r7, #30]
 800dacc:	e2a9      	b.n	800e022 <rfalSetBitRate+0x5c2>
    }
    
    
    switch( gRFAL.mode )
 800dace:	4b89      	ldr	r3, [pc, #548]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dad0:	785b      	ldrb	r3, [r3, #1]
 800dad2:	2b0d      	cmp	r3, #13
 800dad4:	f200 82a2 	bhi.w	800e01c <rfalSetBitRate+0x5bc>
 800dad8:	a201      	add	r2, pc, #4	; (adr r2, 800dae0 <rfalSetBitRate+0x80>)
 800dada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dade:	bf00      	nop
 800dae0:	0800e019 	.word	0x0800e019
 800dae4:	0800db19 	.word	0x0800db19
 800dae8:	0800db19 	.word	0x0800db19
 800daec:	0800dba1 	.word	0x0800dba1
 800daf0:	0800dba1 	.word	0x0800dba1
 800daf4:	0800dba1 	.word	0x0800dba1
 800daf8:	0800dc31 	.word	0x0800dc31
 800dafc:	0800dcc1 	.word	0x0800dcc1
 800db00:	0800dcc1 	.word	0x0800dcc1
 800db04:	0800ddf5 	.word	0x0800ddf5
 800db08:	0800df05 	.word	0x0800df05
 800db0c:	0800e019 	.word	0x0800e019
 800db10:	0800df99 	.word	0x0800df99
 800db14:	0800de85 	.word	0x0800de85
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800db18:	2008      	movs	r0, #8
 800db1a:	f7ff f921 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800db1e:	4b75      	ldr	r3, [pc, #468]	; (800dcf4 <rfalSetBitRate+0x294>)
 800db20:	789b      	ldrb	r3, [r3, #2]
 800db22:	2bea      	cmp	r3, #234	; 0xea
 800db24:	d90c      	bls.n	800db40 <rfalSetBitRate+0xe0>
 800db26:	4b73      	ldr	r3, [pc, #460]	; (800dcf4 <rfalSetBitRate+0x294>)
 800db28:	789b      	ldrb	r3, [r3, #2]
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	011b      	lsls	r3, r3, #4
 800db2e:	b29b      	uxth	r3, r3
 800db30:	b2db      	uxtb	r3, r3
 800db32:	b29b      	uxth	r3, r3
 800db34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db38:	f043 0301 	orr.w	r3, r3, #1
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	e00d      	b.n	800db5c <rfalSetBitRate+0xfc>
 800db40:	4b6c      	ldr	r3, [pc, #432]	; (800dcf4 <rfalSetBitRate+0x294>)
 800db42:	789b      	ldrb	r3, [r3, #2]
 800db44:	b29b      	uxth	r3, r3
 800db46:	3301      	adds	r3, #1
 800db48:	b29b      	uxth	r3, r3
 800db4a:	011b      	lsls	r3, r3, #4
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	b29b      	uxth	r3, r3
 800db52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db56:	f043 0301 	orr.w	r3, r3, #1
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7ff f8ff 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800db62:	4b64      	ldr	r3, [pc, #400]	; (800dcf4 <rfalSetBitRate+0x294>)
 800db64:	78db      	ldrb	r3, [r3, #3]
 800db66:	2bea      	cmp	r3, #234	; 0xea
 800db68:	d90a      	bls.n	800db80 <rfalSetBitRate+0x120>
 800db6a:	4b62      	ldr	r3, [pc, #392]	; (800dcf4 <rfalSetBitRate+0x294>)
 800db6c:	78db      	ldrb	r3, [r3, #3]
 800db6e:	b29b      	uxth	r3, r3
 800db70:	011b      	lsls	r3, r3, #4
 800db72:	b29b      	uxth	r3, r3
 800db74:	b2db      	uxtb	r3, r3
 800db76:	b29b      	uxth	r3, r3
 800db78:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	e00b      	b.n	800db98 <rfalSetBitRate+0x138>
 800db80:	4b5c      	ldr	r3, [pc, #368]	; (800dcf4 <rfalSetBitRate+0x294>)
 800db82:	78db      	ldrb	r3, [r3, #3]
 800db84:	b29b      	uxth	r3, r3
 800db86:	3301      	adds	r3, #1
 800db88:	b29b      	uxth	r3, r3
 800db8a:	011b      	lsls	r3, r3, #4
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	b29b      	uxth	r3, r3
 800db92:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800db96:	b29b      	uxth	r3, r3
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff f8e1 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800db9e:	e23f      	b.n	800e020 <rfalSetBitRate+0x5c0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800dba0:	2008      	movs	r0, #8
 800dba2:	f7ff f8dd 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dba6:	4b53      	ldr	r3, [pc, #332]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dba8:	789b      	ldrb	r3, [r3, #2]
 800dbaa:	2bea      	cmp	r3, #234	; 0xea
 800dbac:	d90c      	bls.n	800dbc8 <rfalSetBitRate+0x168>
 800dbae:	4b51      	ldr	r3, [pc, #324]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dbb0:	789b      	ldrb	r3, [r3, #2]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	011b      	lsls	r3, r3, #4
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dbc0:	f043 0301 	orr.w	r3, r3, #1
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	e00d      	b.n	800dbe4 <rfalSetBitRate+0x184>
 800dbc8:	4b4a      	ldr	r3, [pc, #296]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dbca:	789b      	ldrb	r3, [r3, #2]
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	3301      	adds	r3, #1
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	011b      	lsls	r3, r3, #4
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dbde:	f043 0301 	orr.w	r3, r3, #1
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7ff f8bb 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dbea:	4b42      	ldr	r3, [pc, #264]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dbec:	78db      	ldrb	r3, [r3, #3]
 800dbee:	2bea      	cmp	r3, #234	; 0xea
 800dbf0:	d90c      	bls.n	800dc0c <rfalSetBitRate+0x1ac>
 800dbf2:	4b40      	ldr	r3, [pc, #256]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dbf4:	78db      	ldrb	r3, [r3, #3]
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	011b      	lsls	r3, r3, #4
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc04:	f043 0302 	orr.w	r3, r3, #2
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	e00d      	b.n	800dc28 <rfalSetBitRate+0x1c8>
 800dc0c:	4b39      	ldr	r3, [pc, #228]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dc0e:	78db      	ldrb	r3, [r3, #3]
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	3301      	adds	r3, #1
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	011b      	lsls	r3, r3, #4
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc22:	f043 0302 	orr.w	r3, r3, #2
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7ff f899 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800dc2e:	e1f7      	b.n	800e020 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800dc30:	2008      	movs	r0, #8
 800dc32:	f7ff f895 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dc36:	4b2f      	ldr	r3, [pc, #188]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dc38:	789b      	ldrb	r3, [r3, #2]
 800dc3a:	2bea      	cmp	r3, #234	; 0xea
 800dc3c:	d90c      	bls.n	800dc58 <rfalSetBitRate+0x1f8>
 800dc3e:	4b2d      	ldr	r3, [pc, #180]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dc40:	789b      	ldrb	r3, [r3, #2]
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	011b      	lsls	r3, r3, #4
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dc50:	f043 0301 	orr.w	r3, r3, #1
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	e00d      	b.n	800dc74 <rfalSetBitRate+0x214>
 800dc58:	4b26      	ldr	r3, [pc, #152]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dc5a:	789b      	ldrb	r3, [r3, #2]
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	3301      	adds	r3, #1
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	011b      	lsls	r3, r3, #4
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dc6e:	f043 0301 	orr.w	r3, r3, #1
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7ff f873 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dc7a:	4b1e      	ldr	r3, [pc, #120]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dc7c:	78db      	ldrb	r3, [r3, #3]
 800dc7e:	2bea      	cmp	r3, #234	; 0xea
 800dc80:	d90c      	bls.n	800dc9c <rfalSetBitRate+0x23c>
 800dc82:	4b1c      	ldr	r3, [pc, #112]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dc84:	78db      	ldrb	r3, [r3, #3]
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	011b      	lsls	r3, r3, #4
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dc94:	f043 0302 	orr.w	r3, r3, #2
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	e00d      	b.n	800dcb8 <rfalSetBitRate+0x258>
 800dc9c:	4b15      	ldr	r3, [pc, #84]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dc9e:	78db      	ldrb	r3, [r3, #3]
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	3301      	adds	r3, #1
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	011b      	lsls	r3, r3, #4
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dcb2:	f043 0302 	orr.w	r3, r3, #2
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7ff f851 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800dcbe:	e1af      	b.n	800e020 <rfalSetBitRate+0x5c0>
            
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
            
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 800dcc0:	4b0c      	ldr	r3, [pc, #48]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dcc2:	78db      	ldrb	r3, [r3, #3]
 800dcc4:	2bec      	cmp	r3, #236	; 0xec
 800dcc6:	d00b      	beq.n	800dce0 <rfalSetBitRate+0x280>
 800dcc8:	4b0a      	ldr	r3, [pc, #40]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dcca:	78db      	ldrb	r3, [r3, #3]
 800dccc:	2beb      	cmp	r3, #235	; 0xeb
 800dcce:	d007      	beq.n	800dce0 <rfalSetBitRate+0x280>
 800dcd0:	4b08      	ldr	r3, [pc, #32]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dcd2:	78db      	ldrb	r3, [r3, #3]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d003      	beq.n	800dce0 <rfalSetBitRate+0x280>
 800dcd8:	4b06      	ldr	r3, [pc, #24]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dcda:	78db      	ldrb	r3, [r3, #3]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d107      	bne.n	800dcf0 <rfalSetBitRate+0x290>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 800dce0:	4b04      	ldr	r3, [pc, #16]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dce2:	789b      	ldrb	r3, [r3, #2]
 800dce4:	2bed      	cmp	r3, #237	; 0xed
 800dce6:	d007      	beq.n	800dcf8 <rfalSetBitRate+0x298>
 800dce8:	4b02      	ldr	r3, [pc, #8]	; (800dcf4 <rfalSetBitRate+0x294>)
 800dcea:	789b      	ldrb	r3, [r3, #2]
 800dcec:	2bec      	cmp	r3, #236	; 0xec
 800dcee:	d003      	beq.n	800dcf8 <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 800dcf0:	2307      	movs	r3, #7
 800dcf2:	e196      	b.n	800e022 <rfalSetBitRate+0x5c2>
 800dcf4:	20000754 	.word	0x20000754
                {
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3916StreamConfig      streamConf;
                    iso15693PhyConfig_t                config;
                    
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 800dcf8:	4b9a      	ldr	r3, [pc, #616]	; (800df64 <rfalSetBitRate+0x504>)
 800dcfa:	789b      	ldrb	r3, [r3, #2]
 800dcfc:	2bed      	cmp	r3, #237	; 0xed
 800dcfe:	bf0c      	ite	eq
 800dd00:	2301      	moveq	r3, #1
 800dd02:	2300      	movne	r3, #0
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 800dd08:	4b96      	ldr	r3, [pc, #600]	; (800df64 <rfalSetBitRate+0x504>)
 800dd0a:	78db      	ldrb	r3, [r3, #3]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d00a      	beq.n	800dd26 <rfalSetBitRate+0x2c6>
 800dd10:	2beb      	cmp	r3, #235	; 0xeb
 800dd12:	d002      	beq.n	800dd1a <rfalSetBitRate+0x2ba>
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d003      	beq.n	800dd20 <rfalSetBitRate+0x2c0>
 800dd18:	e008      	b.n	800dd2c <rfalSetBitRate+0x2cc>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	613b      	str	r3, [r7, #16]
                            break;
 800dd1e:	e008      	b.n	800dd32 <rfalSetBitRate+0x2d2>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 800dd20:	2302      	movs	r3, #2
 800dd22:	613b      	str	r3, [r7, #16]
                            break;
 800dd24:	e005      	b.n	800dd32 <rfalSetBitRate+0x2d2>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 800dd26:	2303      	movs	r3, #3
 800dd28:	613b      	str	r3, [r7, #16]
                            break;
 800dd2a:	e002      	b.n	800dd32 <rfalSetBitRate+0x2d2>
                        default:
                            config.speedMode = 0;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	613b      	str	r3, [r7, #16]
                            break;
 800dd30:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);
 800dd32:	f107 0218 	add.w	r2, r7, #24
 800dd36:	f107 030c 	add.w	r3, r7, #12
 800dd3a:	4611      	mov	r1, r2
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7ff f977 	bl	800d030 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	785b      	ldrb	r3, [r3, #1]
 800dd46:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	789b      	ldrb	r3, [r3, #2]
 800dd4c:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	78db      	ldrb	r3, [r3, #3]
 800dd52:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	753b      	strb	r3, [r7, #20]
                    st25r3916StreamConfigure(&streamConf);
 800dd5a:	f107 0314 	add.w	r3, r7, #20
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f002 f927 	bl	800ffb2 <st25r3916StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800dd64:	2008      	movs	r0, #8
 800dd66:	f7fe fffb 	bl	800cd60 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dd6a:	4b7e      	ldr	r3, [pc, #504]	; (800df64 <rfalSetBitRate+0x504>)
 800dd6c:	789b      	ldrb	r3, [r3, #2]
 800dd6e:	2bea      	cmp	r3, #234	; 0xea
 800dd70:	d90c      	bls.n	800dd8c <rfalSetBitRate+0x32c>
 800dd72:	4b7c      	ldr	r3, [pc, #496]	; (800df64 <rfalSetBitRate+0x504>)
 800dd74:	789b      	ldrb	r3, [r3, #2]
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	011b      	lsls	r3, r3, #4
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dd84:	f043 0301 	orr.w	r3, r3, #1
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	e00d      	b.n	800dda8 <rfalSetBitRate+0x348>
 800dd8c:	4b75      	ldr	r3, [pc, #468]	; (800df64 <rfalSetBitRate+0x504>)
 800dd8e:	789b      	ldrb	r3, [r3, #2]
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	3301      	adds	r3, #1
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	011b      	lsls	r3, r3, #4
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dda2:	f043 0301 	orr.w	r3, r3, #1
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7fe ffd9 	bl	800cd60 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800ddae:	4b6d      	ldr	r3, [pc, #436]	; (800df64 <rfalSetBitRate+0x504>)
 800ddb0:	78db      	ldrb	r3, [r3, #3]
 800ddb2:	2bea      	cmp	r3, #234	; 0xea
 800ddb4:	d90c      	bls.n	800ddd0 <rfalSetBitRate+0x370>
 800ddb6:	4b6b      	ldr	r3, [pc, #428]	; (800df64 <rfalSetBitRate+0x504>)
 800ddb8:	78db      	ldrb	r3, [r3, #3]
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	011b      	lsls	r3, r3, #4
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ddc8:	f043 0302 	orr.w	r3, r3, #2
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	e00d      	b.n	800ddec <rfalSetBitRate+0x38c>
 800ddd0:	4b64      	ldr	r3, [pc, #400]	; (800df64 <rfalSetBitRate+0x504>)
 800ddd2:	78db      	ldrb	r3, [r3, #3]
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	011b      	lsls	r3, r3, #4
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dde6:	f043 0302 	orr.w	r3, r3, #2
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7fe ffb7 	bl	800cd60 <rfalSetAnalogConfig>
                break;
 800ddf2:	e115      	b.n	800e020 <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800ddf4:	2008      	movs	r0, #8
 800ddf6:	f7fe ffb3 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800ddfa:	4b5a      	ldr	r3, [pc, #360]	; (800df64 <rfalSetBitRate+0x504>)
 800ddfc:	789b      	ldrb	r3, [r3, #2]
 800ddfe:	2bea      	cmp	r3, #234	; 0xea
 800de00:	d90c      	bls.n	800de1c <rfalSetBitRate+0x3bc>
 800de02:	4b58      	ldr	r3, [pc, #352]	; (800df64 <rfalSetBitRate+0x504>)
 800de04:	789b      	ldrb	r3, [r3, #2]
 800de06:	b29b      	uxth	r3, r3
 800de08:	011b      	lsls	r3, r3, #4
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	b29b      	uxth	r3, r3
 800de10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800de14:	f043 0301 	orr.w	r3, r3, #1
 800de18:	b29b      	uxth	r3, r3
 800de1a:	e00d      	b.n	800de38 <rfalSetBitRate+0x3d8>
 800de1c:	4b51      	ldr	r3, [pc, #324]	; (800df64 <rfalSetBitRate+0x504>)
 800de1e:	789b      	ldrb	r3, [r3, #2]
 800de20:	b29b      	uxth	r3, r3
 800de22:	3301      	adds	r3, #1
 800de24:	b29b      	uxth	r3, r3
 800de26:	011b      	lsls	r3, r3, #4
 800de28:	b29b      	uxth	r3, r3
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800de32:	f043 0301 	orr.w	r3, r3, #1
 800de36:	b29b      	uxth	r3, r3
 800de38:	4618      	mov	r0, r3
 800de3a:	f7fe ff91 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800de3e:	4b49      	ldr	r3, [pc, #292]	; (800df64 <rfalSetBitRate+0x504>)
 800de40:	78db      	ldrb	r3, [r3, #3]
 800de42:	2bea      	cmp	r3, #234	; 0xea
 800de44:	d90c      	bls.n	800de60 <rfalSetBitRate+0x400>
 800de46:	4b47      	ldr	r3, [pc, #284]	; (800df64 <rfalSetBitRate+0x504>)
 800de48:	78db      	ldrb	r3, [r3, #3]
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	011b      	lsls	r3, r3, #4
 800de4e:	b29b      	uxth	r3, r3
 800de50:	b2db      	uxtb	r3, r3
 800de52:	b29b      	uxth	r3, r3
 800de54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800de58:	f043 0302 	orr.w	r3, r3, #2
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	e00d      	b.n	800de7c <rfalSetBitRate+0x41c>
 800de60:	4b40      	ldr	r3, [pc, #256]	; (800df64 <rfalSetBitRate+0x504>)
 800de62:	78db      	ldrb	r3, [r3, #3]
 800de64:	b29b      	uxth	r3, r3
 800de66:	3301      	adds	r3, #1
 800de68:	b29b      	uxth	r3, r3
 800de6a:	011b      	lsls	r3, r3, #4
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	b29b      	uxth	r3, r3
 800de72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800de76:	f043 0302 	orr.w	r3, r3, #2
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7fe ff6f 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800de82:	e0cd      	b.n	800e020 <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800de84:	2009      	movs	r0, #9
 800de86:	f7fe ff6b 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800de8a:	4b36      	ldr	r3, [pc, #216]	; (800df64 <rfalSetBitRate+0x504>)
 800de8c:	789b      	ldrb	r3, [r3, #2]
 800de8e:	2bea      	cmp	r3, #234	; 0xea
 800de90:	d90a      	bls.n	800dea8 <rfalSetBitRate+0x448>
 800de92:	4b34      	ldr	r3, [pc, #208]	; (800df64 <rfalSetBitRate+0x504>)
 800de94:	789b      	ldrb	r3, [r3, #2]
 800de96:	b29b      	uxth	r3, r3
 800de98:	011b      	lsls	r3, r3, #4
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	4b31      	ldr	r3, [pc, #196]	; (800df68 <rfalSetBitRate+0x508>)
 800dea2:	4313      	orrs	r3, r2
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	e00b      	b.n	800dec0 <rfalSetBitRate+0x460>
 800dea8:	4b2e      	ldr	r3, [pc, #184]	; (800df64 <rfalSetBitRate+0x504>)
 800deaa:	789b      	ldrb	r3, [r3, #2]
 800deac:	b29b      	uxth	r3, r3
 800deae:	3301      	adds	r3, #1
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	011b      	lsls	r3, r3, #4
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	b29a      	uxth	r2, r3
 800deba:	4b2b      	ldr	r3, [pc, #172]	; (800df68 <rfalSetBitRate+0x508>)
 800debc:	4313      	orrs	r3, r2
 800debe:	b29b      	uxth	r3, r3
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7fe ff4d 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dec6:	4b27      	ldr	r3, [pc, #156]	; (800df64 <rfalSetBitRate+0x504>)
 800dec8:	78db      	ldrb	r3, [r3, #3]
 800deca:	2bea      	cmp	r3, #234	; 0xea
 800decc:	d90a      	bls.n	800dee4 <rfalSetBitRate+0x484>
 800dece:	4b25      	ldr	r3, [pc, #148]	; (800df64 <rfalSetBitRate+0x504>)
 800ded0:	78db      	ldrb	r3, [r3, #3]
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	011b      	lsls	r3, r3, #4
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	b29a      	uxth	r2, r3
 800dedc:	4b23      	ldr	r3, [pc, #140]	; (800df6c <rfalSetBitRate+0x50c>)
 800dede:	4313      	orrs	r3, r2
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	e00b      	b.n	800defc <rfalSetBitRate+0x49c>
 800dee4:	4b1f      	ldr	r3, [pc, #124]	; (800df64 <rfalSetBitRate+0x504>)
 800dee6:	78db      	ldrb	r3, [r3, #3]
 800dee8:	b29b      	uxth	r3, r3
 800deea:	3301      	adds	r3, #1
 800deec:	b29b      	uxth	r3, r3
 800deee:	011b      	lsls	r3, r3, #4
 800def0:	b29b      	uxth	r3, r3
 800def2:	b2db      	uxtb	r3, r3
 800def4:	b29a      	uxth	r2, r3
 800def6:	4b1d      	ldr	r3, [pc, #116]	; (800df6c <rfalSetBitRate+0x50c>)
 800def8:	4313      	orrs	r3, r2
 800defa:	b29b      	uxth	r3, r3
 800defc:	4618      	mov	r0, r3
 800defe:	f7fe ff2f 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800df02:	e08d      	b.n	800e020 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800df04:	2009      	movs	r0, #9
 800df06:	f7fe ff2b 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800df0a:	4b16      	ldr	r3, [pc, #88]	; (800df64 <rfalSetBitRate+0x504>)
 800df0c:	789b      	ldrb	r3, [r3, #2]
 800df0e:	2bea      	cmp	r3, #234	; 0xea
 800df10:	d90a      	bls.n	800df28 <rfalSetBitRate+0x4c8>
 800df12:	4b14      	ldr	r3, [pc, #80]	; (800df64 <rfalSetBitRate+0x504>)
 800df14:	789b      	ldrb	r3, [r3, #2]
 800df16:	b29b      	uxth	r3, r3
 800df18:	011b      	lsls	r3, r3, #4
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	b29a      	uxth	r2, r3
 800df20:	4b13      	ldr	r3, [pc, #76]	; (800df70 <rfalSetBitRate+0x510>)
 800df22:	4313      	orrs	r3, r2
 800df24:	b29b      	uxth	r3, r3
 800df26:	e00b      	b.n	800df40 <rfalSetBitRate+0x4e0>
 800df28:	4b0e      	ldr	r3, [pc, #56]	; (800df64 <rfalSetBitRate+0x504>)
 800df2a:	789b      	ldrb	r3, [r3, #2]
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	3301      	adds	r3, #1
 800df30:	b29b      	uxth	r3, r3
 800df32:	011b      	lsls	r3, r3, #4
 800df34:	b29b      	uxth	r3, r3
 800df36:	b2db      	uxtb	r3, r3
 800df38:	b29a      	uxth	r2, r3
 800df3a:	4b0d      	ldr	r3, [pc, #52]	; (800df70 <rfalSetBitRate+0x510>)
 800df3c:	4313      	orrs	r3, r2
 800df3e:	b29b      	uxth	r3, r3
 800df40:	4618      	mov	r0, r3
 800df42:	f7fe ff0d 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800df46:	4b07      	ldr	r3, [pc, #28]	; (800df64 <rfalSetBitRate+0x504>)
 800df48:	78db      	ldrb	r3, [r3, #3]
 800df4a:	2bea      	cmp	r3, #234	; 0xea
 800df4c:	d914      	bls.n	800df78 <rfalSetBitRate+0x518>
 800df4e:	4b05      	ldr	r3, [pc, #20]	; (800df64 <rfalSetBitRate+0x504>)
 800df50:	78db      	ldrb	r3, [r3, #3]
 800df52:	b29b      	uxth	r3, r3
 800df54:	011b      	lsls	r3, r3, #4
 800df56:	b29b      	uxth	r3, r3
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	b29a      	uxth	r2, r3
 800df5c:	4b05      	ldr	r3, [pc, #20]	; (800df74 <rfalSetBitRate+0x514>)
 800df5e:	4313      	orrs	r3, r2
 800df60:	b29b      	uxth	r3, r3
 800df62:	e015      	b.n	800df90 <rfalSetBitRate+0x530>
 800df64:	20000754 	.word	0x20000754
 800df68:	ffff8801 	.word	0xffff8801
 800df6c:	ffff8802 	.word	0xffff8802
 800df70:	ffff8101 	.word	0xffff8101
 800df74:	ffff8102 	.word	0xffff8102
 800df78:	4b2c      	ldr	r3, [pc, #176]	; (800e02c <rfalSetBitRate+0x5cc>)
 800df7a:	78db      	ldrb	r3, [r3, #3]
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	3301      	adds	r3, #1
 800df80:	b29b      	uxth	r3, r3
 800df82:	011b      	lsls	r3, r3, #4
 800df84:	b29b      	uxth	r3, r3
 800df86:	b2db      	uxtb	r3, r3
 800df88:	b29a      	uxth	r2, r3
 800df8a:	4b29      	ldr	r3, [pc, #164]	; (800e030 <rfalSetBitRate+0x5d0>)
 800df8c:	4313      	orrs	r3, r2
 800df8e:	b29b      	uxth	r3, r3
 800df90:	4618      	mov	r0, r3
 800df92:	f7fe fee5 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800df96:	e043      	b.n	800e020 <rfalSetBitRate+0x5c0>
                
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
                        
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800df98:	2009      	movs	r0, #9
 800df9a:	f7fe fee1 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800df9e:	4b23      	ldr	r3, [pc, #140]	; (800e02c <rfalSetBitRate+0x5cc>)
 800dfa0:	789b      	ldrb	r3, [r3, #2]
 800dfa2:	2bea      	cmp	r3, #234	; 0xea
 800dfa4:	d90a      	bls.n	800dfbc <rfalSetBitRate+0x55c>
 800dfa6:	4b21      	ldr	r3, [pc, #132]	; (800e02c <rfalSetBitRate+0x5cc>)
 800dfa8:	789b      	ldrb	r3, [r3, #2]
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	011b      	lsls	r3, r3, #4
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	4b1f      	ldr	r3, [pc, #124]	; (800e034 <rfalSetBitRate+0x5d4>)
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	e00b      	b.n	800dfd4 <rfalSetBitRate+0x574>
 800dfbc:	4b1b      	ldr	r3, [pc, #108]	; (800e02c <rfalSetBitRate+0x5cc>)
 800dfbe:	789b      	ldrb	r3, [r3, #2]
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	011b      	lsls	r3, r3, #4
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	b29a      	uxth	r2, r3
 800dfce:	4b19      	ldr	r3, [pc, #100]	; (800e034 <rfalSetBitRate+0x5d4>)
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7fe fec3 	bl	800cd60 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dfda:	4b14      	ldr	r3, [pc, #80]	; (800e02c <rfalSetBitRate+0x5cc>)
 800dfdc:	78db      	ldrb	r3, [r3, #3]
 800dfde:	2bea      	cmp	r3, #234	; 0xea
 800dfe0:	d90a      	bls.n	800dff8 <rfalSetBitRate+0x598>
 800dfe2:	4b12      	ldr	r3, [pc, #72]	; (800e02c <rfalSetBitRate+0x5cc>)
 800dfe4:	78db      	ldrb	r3, [r3, #3]
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	011b      	lsls	r3, r3, #4
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	b29a      	uxth	r2, r3
 800dff0:	4b11      	ldr	r3, [pc, #68]	; (800e038 <rfalSetBitRate+0x5d8>)
 800dff2:	4313      	orrs	r3, r2
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	e00b      	b.n	800e010 <rfalSetBitRate+0x5b0>
 800dff8:	4b0c      	ldr	r3, [pc, #48]	; (800e02c <rfalSetBitRate+0x5cc>)
 800dffa:	78db      	ldrb	r3, [r3, #3]
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	3301      	adds	r3, #1
 800e000:	b29b      	uxth	r3, r3
 800e002:	011b      	lsls	r3, r3, #4
 800e004:	b29b      	uxth	r3, r3
 800e006:	b2db      	uxtb	r3, r3
 800e008:	b29a      	uxth	r2, r3
 800e00a:	4b0b      	ldr	r3, [pc, #44]	; (800e038 <rfalSetBitRate+0x5d8>)
 800e00c:	4313      	orrs	r3, r2
 800e00e:	b29b      	uxth	r3, r3
 800e010:	4618      	mov	r0, r3
 800e012:	f7fe fea5 	bl	800cd60 <rfalSetAnalogConfig>
            break;
 800e016:	e003      	b.n	800e020 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 800e018:	2321      	movs	r3, #33	; 0x21
 800e01a:	e002      	b.n	800e022 <rfalSetBitRate+0x5c2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800e01c:	230f      	movs	r3, #15
 800e01e:	e000      	b.n	800e022 <rfalSetBitRate+0x5c2>
    }
    
    return ERR_NONE;
 800e020:	2300      	movs	r3, #0
}
 800e022:	4618      	mov	r0, r3
 800e024:	3720      	adds	r7, #32
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20000754 	.word	0x20000754
 800e030:	ffff8102 	.word	0xffff8102
 800e034:	ffff8401 	.word	0xffff8401
 800e038:	ffff8402 	.word	0xffff8402

0800e03c <rfalSetErrorHandling>:
}


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	4603      	mov	r3, r0
 800e044:	71fb      	strb	r3, [r7, #7]
    switch(eHandling)
 800e046:	79fb      	ldrb	r3, [r7, #7]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	db0f      	blt.n	800e06c <rfalSetErrorHandling+0x30>
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	dd02      	ble.n	800e056 <rfalSetErrorHandling+0x1a>
 800e050:	2b02      	cmp	r3, #2
 800e052:	d005      	beq.n	800e060 <rfalSetErrorHandling+0x24>
                                 (ST25R3916_REG_EMD_SUP_CONF_emd_emv_on | ST25R3916_REG_EMD_SUP_CONF_emd_crc_prot_off | ST25R3916_REG_EMD_SUP_CONF_emd_res_bits_off | RFAL_EMVCO_RX_MAXLEN) );
#endif /* RFAL_SW_EMD */
            break;
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800e054:	e00a      	b.n	800e06c <rfalSetErrorHandling+0x30>
            st25r3916ClrRegisterBits( ST25R3916_REG_EMD_SUP_CONF, ST25R3916_REG_EMD_SUP_CONF_emd_emv );
 800e056:	2180      	movs	r1, #128	; 0x80
 800e058:	2045      	movs	r0, #69	; 0x45
 800e05a:	f002 fcdb 	bl	8010a14 <st25r3916ClrRegisterBits>
            break;
 800e05e:	e006      	b.n	800e06e <rfalSetErrorHandling+0x32>
            st25r3916ModifyRegister( ST25R3916_REG_EMD_SUP_CONF, 
 800e060:	2284      	movs	r2, #132	; 0x84
 800e062:	21bf      	movs	r1, #191	; 0xbf
 800e064:	2045      	movs	r0, #69	; 0x45
 800e066:	f002 fd50 	bl	8010b0a <st25r3916ModifyRegister>
            break;
 800e06a:	e000      	b.n	800e06e <rfalSetErrorHandling+0x32>
            break;
 800e06c:	bf00      	nop
    }

    gRFAL.conf.eHandling = eHandling;
 800e06e:	4a03      	ldr	r2, [pc, #12]	; (800e07c <rfalSetErrorHandling+0x40>)
 800e070:	79fb      	ldrb	r3, [r7, #7]
 800e072:	71d3      	strb	r3, [r2, #7]
}
 800e074:	bf00      	nop
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	20000754 	.word	0x20000754

0800e080 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3916_GPT_MAX_1FC );
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4a06      	ldr	r2, [pc, #24]	; (800e0a4 <rfalSetFDTPoll+0x24>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	bf28      	it	cs
 800e090:	4613      	movcs	r3, r2
 800e092:	4a05      	ldr	r2, [pc, #20]	; (800e0a8 <rfalSetFDTPoll+0x28>)
 800e094:	6113      	str	r3, [r2, #16]
}
 800e096:	bf00      	nop
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop
 800e0a4:	0007fff8 	.word	0x0007fff8
 800e0a8:	20000754 	.word	0x20000754

0800e0ac <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3916_MRT_MAX_1FC );
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 800e0ba:	bf28      	it	cs
 800e0bc:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 800e0c0:	4a03      	ldr	r2, [pc, #12]	; (800e0d0 <rfalSetFDTListen+0x24>)
 800e0c2:	60d3      	str	r3, [r2, #12]
}
 800e0c4:	bf00      	nop
 800e0c6:	370c      	adds	r7, #12
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr
 800e0d0:	20000754 	.word	0x20000754

0800e0d4 <rfalSetGT>:
}


/*******************************************************************************/
void rfalSetGT( uint32_t GT )
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3916_GT_MAX_1FC );
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	4a06      	ldr	r2, [pc, #24]	; (800e0f8 <rfalSetGT+0x24>)
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	bf28      	it	cs
 800e0e4:	4613      	movcs	r3, r2
 800e0e6:	4a05      	ldr	r2, [pc, #20]	; (800e0fc <rfalSetGT+0x28>)
 800e0e8:	6093      	str	r3, [r2, #8]
}
 800e0ea:	bf00      	nop
 800e0ec:	370c      	adds	r7, #12
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	040a8bc0 	.word	0x040a8bc0
 800e0fc:	20000754 	.word	0x20000754

0800e100 <rfalIsGTExpired>:
}


/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 800e104:	4b09      	ldr	r3, [pc, #36]	; (800e12c <rfalIsGTExpired+0x2c>)
 800e106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00c      	beq.n	800e126 <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 800e10c:	4b07      	ldr	r3, [pc, #28]	; (800e12c <rfalIsGTExpired+0x2c>)
 800e10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e110:	4618      	mov	r0, r3
 800e112:	f7f6 fa9f 	bl	8004654 <timerIsExpired>
 800e116:	4603      	mov	r3, r0
 800e118:	f083 0301 	eor.w	r3, r3, #1
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d001      	beq.n	800e126 <rfalIsGTExpired+0x26>
        {
            return false;
 800e122:	2300      	movs	r3, #0
 800e124:	e000      	b.n	800e128 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 800e126:	2301      	movs	r3, #1
}
 800e128:	4618      	mov	r0, r3
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	20000754 	.word	0x20000754

0800e130 <rfalFieldOnAndStartGT>:


/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3916IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 800e136:	2280      	movs	r2, #128	; 0x80
 800e138:	2180      	movs	r1, #128	; 0x80
 800e13a:	2002      	movs	r0, #2
 800e13c:	f002 fd52 	bl	8010be4 <st25r3916CheckReg>
 800e140:	4603      	mov	r3, r0
 800e142:	f083 0301 	eor.w	r3, r3, #1
 800e146:	b2db      	uxtb	r3, r3
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d103      	bne.n	800e154 <rfalFieldOnAndStartGT+0x24>
 800e14c:	4b2a      	ldr	r3, [pc, #168]	; (800e1f8 <rfalFieldOnAndStartGT+0xc8>)
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d101      	bne.n	800e158 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 800e154:	2321      	movs	r3, #33	; 0x21
 800e156:	e04a      	b.n	800e1ee <rfalFieldOnAndStartGT+0xbe>
    }
    
    ret = ERR_NONE;
 800e158:	2300      	movs	r3, #0
 800e15a:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 800e15c:	2002      	movs	r0, #2
 800e15e:	f7fe fdff 	bl	800cd60 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3916IsTxEnabled() || !gRFAL.field )
 800e162:	2208      	movs	r2, #8
 800e164:	2108      	movs	r1, #8
 800e166:	2002      	movs	r0, #2
 800e168:	f002 fd3c 	bl	8010be4 <st25r3916CheckReg>
 800e16c:	4603      	mov	r3, r0
 800e16e:	f083 0301 	eor.w	r3, r3, #1
 800e172:	b2db      	uxtb	r3, r3
 800e174:	2b00      	cmp	r3, #0
 800e176:	d106      	bne.n	800e186 <rfalFieldOnAndStartGT+0x56>
 800e178:	4b1f      	ldr	r3, [pc, #124]	; (800e1f8 <rfalFieldOnAndStartGT+0xc8>)
 800e17a:	791b      	ldrb	r3, [r3, #4]
 800e17c:	f083 0301 	eor.w	r3, r3, #1
 800e180:	b2db      	uxtb	r3, r3
 800e182:	2b00      	cmp	r3, #0
 800e184:	d01c      	beq.n	800e1c0 <rfalFieldOnAndStartGT+0x90>
    {
        
        /* Set TARFG: 0 (75us+0ms=75us), GT is fulfilled using a SW timer */
        st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 800e186:	2100      	movs	r1, #0
 800e188:	2055      	movs	r0, #85	; 0x55
 800e18a:	f002 fb59 	bl	8010840 <st25r3916WriteRegister>
        
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, 0 );
 800e18e:	2300      	movs	r3, #0
 800e190:	22ff      	movs	r2, #255	; 0xff
 800e192:	21ff      	movs	r1, #255	; 0xff
 800e194:	20c8      	movs	r0, #200	; 0xc8
 800e196:	f001 fde3 	bl	800fd60 <st25r3916PerformCollisionAvoidance>
 800e19a:	4603      	mov	r3, r0
 800e19c:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3916IsTxEnabled(); //(ret == ERR_NONE);
 800e19e:	2208      	movs	r2, #8
 800e1a0:	2108      	movs	r1, #8
 800e1a2:	2002      	movs	r0, #2
 800e1a4:	f002 fd1e 	bl	8010be4 <st25r3916CheckReg>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	4b12      	ldr	r3, [pc, #72]	; (800e1f8 <rfalFieldOnAndStartGT+0xc8>)
 800e1ae:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 800e1b0:	4b11      	ldr	r3, [pc, #68]	; (800e1f8 <rfalFieldOnAndStartGT+0xc8>)
 800e1b2:	791b      	ldrb	r3, [r3, #4]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d003      	beq.n	800e1c0 <rfalFieldOnAndStartGT+0x90>
        {            
            st25r3916TxRxOn(); /* Enable Tx and Rx (Tx is already On)*/
 800e1b8:	2148      	movs	r1, #72	; 0x48
 800e1ba:	2002      	movs	r0, #2
 800e1bc:	f002 fc61 	bl	8010a82 <st25r3916SetRegisterBits>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800e1c0:	4b0d      	ldr	r3, [pc, #52]	; (800e1f8 <rfalFieldOnAndStartGT+0xc8>)
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d011      	beq.n	800e1ec <rfalFieldOnAndStartGT+0xbc>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3916_GT_MIN_1FC) ) );
 800e1c8:	4b0b      	ldr	r3, [pc, #44]	; (800e1f8 <rfalFieldOnAndStartGT+0xc8>)
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	bf38      	it	cc
 800e1d4:	4613      	movcc	r3, r2
 800e1d6:	4a09      	ldr	r2, [pc, #36]	; (800e1fc <rfalFieldOnAndStartGT+0xcc>)
 800e1d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e1dc:	0b1b      	lsrs	r3, r3, #12
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7f6 fa29 	bl	8004638 <timerCalculateTimer>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	4b03      	ldr	r3, [pc, #12]	; (800e1f8 <rfalFieldOnAndStartGT+0xc8>)
 800e1ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    return ret;
 800e1ec:	88fb      	ldrh	r3, [r7, #6]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3708      	adds	r7, #8
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	20000754 	.word	0x20000754
 800e1fc:	4d542005 	.word	0x4d542005

0800e200 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 800e204:	4b09      	ldr	r3, [pc, #36]	; (800e22c <rfalFieldOff+0x2c>)
 800e206:	7d1b      	ldrb	r3, [r3, #20]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d001      	beq.n	800e210 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 800e20c:	f000 fa9a 	bl	800e744 <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3916TxRxOff();
 800e210:	2148      	movs	r1, #72	; 0x48
 800e212:	2002      	movs	r0, #2
 800e214:	f002 fbfe 	bl	8010a14 <st25r3916ClrRegisterBits>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 800e218:	2003      	movs	r0, #3
 800e21a:	f7fe fda1 	bl	800cd60 <rfalSetAnalogConfig>
    gRFAL.field = false;
 800e21e:	4b03      	ldr	r3, [pc, #12]	; (800e22c <rfalFieldOff+0x2c>)
 800e220:	2200      	movs	r2, #0
 800e222:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	20000754 	.word	0x20000754

0800e230 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 800e230:	b5b0      	push	{r4, r5, r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d101      	bne.n	800e242 <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 800e23e:	2307      	movs	r3, #7
 800e240:	e127      	b.n	800e492 <rfalStartTransceive+0x262>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800e242:	4b96      	ldr	r3, [pc, #600]	; (800e49c <rfalStartTransceive+0x26c>)
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	2b01      	cmp	r3, #1
 800e248:	f240 8122 	bls.w	800e490 <rfalStartTransceive+0x260>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3916IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800e24c:	2208      	movs	r2, #8
 800e24e:	2108      	movs	r1, #8
 800e250:	2002      	movs	r0, #2
 800e252:	f002 fcc7 	bl	8010be4 <st25r3916CheckReg>
 800e256:	4603      	mov	r3, r0
 800e258:	f083 0301 	eor.w	r3, r3, #1
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d011      	beq.n	800e286 <rfalStartTransceive+0x56>
 800e262:	4b8e      	ldr	r3, [pc, #568]	; (800e49c <rfalStartTransceive+0x26c>)
 800e264:	785b      	ldrb	r3, [r3, #1]
 800e266:	2b0a      	cmp	r3, #10
 800e268:	d00d      	beq.n	800e286 <rfalStartTransceive+0x56>
 800e26a:	4b8c      	ldr	r3, [pc, #560]	; (800e49c <rfalStartTransceive+0x26c>)
 800e26c:	785b      	ldrb	r3, [r3, #1]
 800e26e:	2b0b      	cmp	r3, #11
 800e270:	d009      	beq.n	800e286 <rfalStartTransceive+0x56>
 800e272:	4b8a      	ldr	r3, [pc, #552]	; (800e49c <rfalStartTransceive+0x26c>)
 800e274:	785b      	ldrb	r3, [r3, #1]
 800e276:	2b0c      	cmp	r3, #12
 800e278:	d005      	beq.n	800e286 <rfalStartTransceive+0x56>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d001      	beq.n	800e286 <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 800e282:	2321      	movs	r3, #33	; 0x21
 800e284:	e105      	b.n	800e492 <rfalStartTransceive+0x262>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 800e286:	4b85      	ldr	r3, [pc, #532]	; (800e49c <rfalStartTransceive+0x26c>)
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	f103 0418 	add.w	r4, r3, #24
 800e28e:	4615      	mov	r5, r2
 800e290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e294:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800e29c:	4b7f      	ldr	r3, [pc, #508]	; (800e49c <rfalStartTransceive+0x26c>)
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d04b      	beq.n	800e33c <rfalStartTransceive+0x10c>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 800e2a4:	2340      	movs	r3, #64	; 0x40
 800e2a6:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800e2a8:	4b7c      	ldr	r3, [pc, #496]	; (800e49c <rfalStartTransceive+0x26c>)
 800e2aa:	785b      	ldrb	r3, [r3, #1]
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d102      	bne.n	800e2b6 <rfalStartTransceive+0x86>
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	33d4      	adds	r3, #212	; 0xd4
 800e2b4:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800e2b6:	4b79      	ldr	r3, [pc, #484]	; (800e49c <rfalStartTransceive+0x26c>)
 800e2b8:	785b      	ldrb	r3, [r3, #1]
 800e2ba:	2b02      	cmp	r3, #2
 800e2bc:	d102      	bne.n	800e2c4 <rfalStartTransceive+0x94>
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	33d4      	adds	r3, #212	; 0xd4
 800e2c2:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 800e2c4:	4b75      	ldr	r3, [pc, #468]	; (800e49c <rfalStartTransceive+0x26c>)
 800e2c6:	785b      	ldrb	r3, [r3, #1]
 800e2c8:	2b03      	cmp	r3, #3
 800e2ca:	d103      	bne.n	800e2d4 <rfalStartTransceive+0xa4>
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e2d2:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 800e2d4:	4b71      	ldr	r3, [pc, #452]	; (800e49c <rfalStartTransceive+0x26c>)
 800e2d6:	785b      	ldrb	r3, [r3, #1]
 800e2d8:	2b07      	cmp	r3, #7
 800e2da:	d102      	bne.n	800e2e2 <rfalStartTransceive+0xb2>
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	3340      	adds	r3, #64	; 0x40
 800e2e0:	60fb      	str	r3, [r7, #12]
            
            /* Ensure that MRT is using 64/fc steps */
            st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 800e2e2:	2108      	movs	r1, #8
 800e2e4:	2012      	movs	r0, #18
 800e2e6:	f002 fb95 	bl	8010a14 <st25r3916ClrRegisterBits>
            
            
            /* If Correlator is being used further adjustment is required for NFCB */
            if( (st25r3916CheckReg(ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, 0x00U)) && (gRFAL.mode == RFAL_MODE_POLL_NFCB) )
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	2104      	movs	r1, #4
 800e2ee:	200a      	movs	r0, #10
 800e2f0:	f002 fc78 	bl	8010be4 <st25r3916CheckReg>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00f      	beq.n	800e31a <rfalStartTransceive+0xea>
 800e2fa:	4b68      	ldr	r3, [pc, #416]	; (800e49c <rfalStartTransceive+0x26c>)
 800e2fc:	785b      	ldrb	r3, [r3, #1]
 800e2fe:	2b03      	cmp	r3, #3
 800e300:	d10b      	bne.n	800e31a <rfalStartTransceive+0xea>
            {
                FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJT_CORR;                                                                                        /* Reduce FDT(Listen)                   */
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	3380      	adds	r3, #128	; 0x80
 800e306:	60fb      	str	r3, [r7, #12]
                st25r3916SetRegisterBits( ST25R3916_REG_CORR_CONF1, ST25R3916_REG_CORR_CONF1_corr_s3 );                                                 /* Ensure BPSK start to 33 pilot pulses */
 800e308:	2108      	movs	r1, #8
 800e30a:	204c      	movs	r0, #76	; 0x4c
 800e30c:	f002 fbb9 	bl	8010a82 <st25r3916SetRegisterBits>
                st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 800e310:	2214      	movs	r2, #20
 800e312:	211f      	movs	r1, #31
 800e314:	2046      	movs	r0, #70	; 0x46
 800e316:	f002 fbe1 	bl	8010adc <st25r3916ChangeRegisterBits>
            }
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 800e31a:	4b60      	ldr	r3, [pc, #384]	; (800e49c <rfalStartTransceive+0x26c>)
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	429a      	cmp	r2, r3
 800e322:	d806      	bhi.n	800e332 <rfalStartTransceive+0x102>
 800e324:	4b5d      	ldr	r3, [pc, #372]	; (800e49c <rfalStartTransceive+0x26c>)
 800e326:	68da      	ldr	r2, [r3, #12]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	099b      	lsrs	r3, r3, #6
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	e000      	b.n	800e334 <rfalStartTransceive+0x104>
 800e332:	2304      	movs	r3, #4
 800e334:	4619      	mov	r1, r3
 800e336:	200f      	movs	r0, #15
 800e338:	f002 fa82 	bl	8010840 <st25r3916WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800e33c:	4b57      	ldr	r3, [pc, #348]	; (800e49c <rfalStartTransceive+0x26c>)
 800e33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e344:	d046      	beq.n	800e3d4 <rfalStartTransceive+0x1a4>
 800e346:	4b55      	ldr	r3, [pc, #340]	; (800e49c <rfalStartTransceive+0x26c>)
 800e348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d042      	beq.n	800e3d4 <rfalStartTransceive+0x1a4>
        {
            /* Ensure proper timing configuration */
            if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 800e34e:	4b53      	ldr	r3, [pc, #332]	; (800e49c <rfalStartTransceive+0x26c>)
 800e350:	68da      	ldr	r2, [r3, #12]
 800e352:	4b52      	ldr	r3, [pc, #328]	; (800e49c <rfalStartTransceive+0x26c>)
 800e354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e356:	429a      	cmp	r2, r3
 800e358:	d301      	bcc.n	800e35e <rfalStartTransceive+0x12e>
            {
                return ERR_PARAM;
 800e35a:	2307      	movs	r3, #7
 800e35c:	e099      	b.n	800e492 <rfalStartTransceive+0x262>
            }
            
            FxTAdj = RFAL_FWT_ADJUSTMENT;
 800e35e:	2340      	movs	r3, #64	; 0x40
 800e360:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800e362:	4b4e      	ldr	r3, [pc, #312]	; (800e49c <rfalStartTransceive+0x26c>)
 800e364:	785b      	ldrb	r3, [r3, #1]
 800e366:	2b01      	cmp	r3, #1
 800e368:	d103      	bne.n	800e372 <rfalStartTransceive+0x142>
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800e370:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800e372:	4b4a      	ldr	r3, [pc, #296]	; (800e49c <rfalStartTransceive+0x26c>)
 800e374:	785b      	ldrb	r3, [r3, #1]
 800e376:	2b02      	cmp	r3, #2
 800e378:	d103      	bne.n	800e382 <rfalStartTransceive+0x152>
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800e380:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 800e382:	4b46      	ldr	r3, [pc, #280]	; (800e49c <rfalStartTransceive+0x26c>)
 800e384:	785b      	ldrb	r3, [r3, #1]
 800e386:	2b03      	cmp	r3, #3
 800e388:	d103      	bne.n	800e392 <rfalStartTransceive+0x162>
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e390:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 800e392:	4b42      	ldr	r3, [pc, #264]	; (800e49c <rfalStartTransceive+0x26c>)
 800e394:	785b      	ldrb	r3, [r3, #1]
 800e396:	2b06      	cmp	r3, #6
 800e398:	d10b      	bne.n	800e3b2 <rfalStartTransceive+0x182>
            {
                FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 800e39a:	4b40      	ldr	r3, [pc, #256]	; (800e49c <rfalStartTransceive+0x26c>)
 800e39c:	789b      	ldrb	r3, [r3, #2]
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d102      	bne.n	800e3a8 <rfalStartTransceive+0x178>
 800e3a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3a6:	e001      	b.n	800e3ac <rfalStartTransceive+0x17c>
 800e3a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	4413      	add	r3, r2
 800e3b0:	60fb      	str	r3, [r7, #12]
            }
            
            /* Ensure that the given FWT doesn't exceed NRT maximum */
            gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3916_NRT_MAX_1FC );
 800e3b2:	4b3a      	ldr	r3, [pc, #232]	; (800e49c <rfalStartTransceive+0x26c>)
 800e3b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	4a39      	ldr	r2, [pc, #228]	; (800e4a0 <rfalStartTransceive+0x270>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	bf28      	it	cs
 800e3c0:	4613      	movcs	r3, r2
 800e3c2:	4a36      	ldr	r2, [pc, #216]	; (800e49c <rfalStartTransceive+0x26c>)
 800e3c4:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* Set FWT in the NRT */
            st25r3916SetNoResponseTime( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 800e3c6:	4b35      	ldr	r3, [pc, #212]	; (800e49c <rfalStartTransceive+0x26c>)
 800e3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ca:	099b      	lsrs	r3, r3, #6
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f001 fd5d 	bl	800fe8c <st25r3916SetNoResponseTime>
 800e3d2:	e002      	b.n	800e3da <rfalStartTransceive+0x1aa>
        }
        else
        {
            /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	f001 fd59 	bl	800fe8c <st25r3916SetNoResponseTime>
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 800e3da:	4b30      	ldr	r3, [pc, #192]	; (800e49c <rfalStartTransceive+0x26c>)
 800e3dc:	2203      	movs	r2, #3
 800e3de:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 800e3e0:	4b2e      	ldr	r3, [pc, #184]	; (800e49c <rfalStartTransceive+0x26c>)
 800e3e2:	220b      	movs	r2, #11
 800e3e4:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800e3e6:	4b2d      	ldr	r3, [pc, #180]	; (800e49c <rfalStartTransceive+0x26c>)
 800e3e8:	2202      	movs	r2, #2
 800e3ea:	82da      	strh	r2, [r3, #22]
        
        
    #if RFAL_FEATURE_NFCV
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800e3ec:	4b2b      	ldr	r3, [pc, #172]	; (800e49c <rfalStartTransceive+0x26c>)
 800e3ee:	785b      	ldrb	r3, [r3, #1]
 800e3f0:	2b07      	cmp	r3, #7
 800e3f2:	d003      	beq.n	800e3fc <rfalStartTransceive+0x1cc>
 800e3f4:	4b29      	ldr	r3, [pc, #164]	; (800e49c <rfalStartTransceive+0x26c>)
 800e3f6:	785b      	ldrb	r3, [r3, #1]
 800e3f8:	2b08      	cmp	r3, #8
 800e3fa:	d128      	bne.n	800e44e <rfalStartTransceive+0x21e>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 800e3fc:	4a27      	ldr	r2, [pc, #156]	; (800e49c <rfalStartTransceive+0x26c>)
 800e3fe:	4b27      	ldr	r3, [pc, #156]	; (800e49c <rfalStartTransceive+0x26c>)
 800e400:	f502 741d 	add.w	r4, r2, #628	; 0x274
 800e404:	f103 0518 	add.w	r5, r3, #24
 800e408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e40a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e40c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e410:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 800e414:	4b21      	ldr	r3, [pc, #132]	; (800e49c <rfalStartTransceive+0x26c>)
 800e416:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d001      	beq.n	800e422 <rfalStartTransceive+0x1f2>
 800e41e:	4b21      	ldr	r3, [pc, #132]	; (800e4a4 <rfalStartTransceive+0x274>)
 800e420:	e000      	b.n	800e424 <rfalStartTransceive+0x1f4>
 800e422:	2300      	movs	r3, #0
 800e424:	4a1d      	ldr	r2, [pc, #116]	; (800e49c <rfalStartTransceive+0x26c>)
 800e426:	6213      	str	r3, [r2, #32]
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 800e428:	4b1c      	ldr	r3, [pc, #112]	; (800e49c <rfalStartTransceive+0x26c>)
 800e42a:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 800e42e:	849a      	strh	r2, [r3, #36]	; 0x24
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 800e430:	4b1a      	ldr	r3, [pc, #104]	; (800e49c <rfalStartTransceive+0x26c>)
 800e432:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e436:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800e43a:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 800e43e:	4a17      	ldr	r2, [pc, #92]	; (800e49c <rfalStartTransceive+0x26c>)
 800e440:	62d3      	str	r3, [r2, #44]	; 0x2c
          
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 800e442:	4b16      	ldr	r3, [pc, #88]	; (800e49c <rfalStartTransceive+0x26c>)
 800e444:	699b      	ldr	r3, [r3, #24]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d001      	beq.n	800e44e <rfalStartTransceive+0x21e>
            {
                return  ERR_NONE;
 800e44a:	2300      	movs	r3, #0
 800e44c:	e021      	b.n	800e492 <rfalStartTransceive+0x262>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 800e44e:	4b13      	ldr	r3, [pc, #76]	; (800e49c <rfalStartTransceive+0x26c>)
 800e450:	699b      	ldr	r3, [r3, #24]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d003      	beq.n	800e45e <rfalStartTransceive+0x22e>
 800e456:	4b11      	ldr	r3, [pc, #68]	; (800e49c <rfalStartTransceive+0x26c>)
 800e458:	8b9b      	ldrh	r3, [r3, #28]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d116      	bne.n	800e48c <rfalStartTransceive+0x25c>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800e45e:	f000 f989 	bl	800e774 <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 800e462:	4b0e      	ldr	r3, [pc, #56]	; (800e49c <rfalStartTransceive+0x26c>)
 800e464:	785b      	ldrb	r3, [r3, #1]
 800e466:	2b09      	cmp	r3, #9
 800e468:	d003      	beq.n	800e472 <rfalStartTransceive+0x242>
 800e46a:	4b0c      	ldr	r3, [pc, #48]	; (800e49c <rfalStartTransceive+0x26c>)
 800e46c:	785b      	ldrb	r3, [r3, #1]
 800e46e:	2b0d      	cmp	r3, #13
 800e470:	d103      	bne.n	800e47a <rfalStartTransceive+0x24a>
            {
                st25r3916TxOff();
 800e472:	2108      	movs	r1, #8
 800e474:	2002      	movs	r0, #2
 800e476:	f002 facd 	bl	8010a14 <st25r3916ClrRegisterBits>
            } 
            
            /* No Tx done, enable the Receiver */
            st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800e47a:	20d1      	movs	r0, #209	; 0xd1
 800e47c:	f002 fa69 	bl	8010952 <st25r3916ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3916ExecuteCommand( ST25R3916_CMD_START_NO_RESPONSE_TIMER );
 800e480:	20e3      	movs	r0, #227	; 0xe3
 800e482:	f002 fa66 	bl	8010952 <st25r3916ExecuteCommand>

            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800e486:	4b05      	ldr	r3, [pc, #20]	; (800e49c <rfalStartTransceive+0x26c>)
 800e488:	2251      	movs	r2, #81	; 0x51
 800e48a:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 800e48c:	2300      	movs	r3, #0
 800e48e:	e000      	b.n	800e492 <rfalStartTransceive+0x262>
    }
    
    return ERR_WRONG_STATE;
 800e490:	2321      	movs	r3, #33	; 0x21
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bdb0      	pop	{r4, r5, r7, pc}
 800e49a:	bf00      	nop
 800e49c:	20000754 	.word	0x20000754
 800e4a0:	0ffff000 	.word	0x0ffff000
 800e4a4:	200007bc 	.word	0x200007bc

0800e4a8 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800e4ac:	4b09      	ldr	r3, [pc, #36]	; (800e4d4 <rfalIsTransceiveInTx+0x2c>)
 800e4ae:	7d1b      	ldrb	r3, [r3, #20]
 800e4b0:	2b0a      	cmp	r3, #10
 800e4b2:	d905      	bls.n	800e4c0 <rfalIsTransceiveInTx+0x18>
 800e4b4:	4b07      	ldr	r3, [pc, #28]	; (800e4d4 <rfalIsTransceiveInTx+0x2c>)
 800e4b6:	7d1b      	ldrb	r3, [r3, #20]
 800e4b8:	2b50      	cmp	r3, #80	; 0x50
 800e4ba:	d801      	bhi.n	800e4c0 <rfalIsTransceiveInTx+0x18>
 800e4bc:	2301      	movs	r3, #1
 800e4be:	e000      	b.n	800e4c2 <rfalIsTransceiveInTx+0x1a>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f003 0301 	and.w	r3, r3, #1
 800e4c6:	b2db      	uxtb	r3, r3
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	20000754 	.word	0x20000754

0800e4d8 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 800e4d8:	b480      	push	{r7}
 800e4da:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800e4dc:	4b05      	ldr	r3, [pc, #20]	; (800e4f4 <rfalIsTransceiveInRx+0x1c>)
 800e4de:	7d1b      	ldrb	r3, [r3, #20]
 800e4e0:	2b50      	cmp	r3, #80	; 0x50
 800e4e2:	bf8c      	ite	hi
 800e4e4:	2301      	movhi	r3, #1
 800e4e6:	2300      	movls	r3, #0
 800e4e8:	b2db      	uxtb	r3, r3
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr
 800e4f4:	20000754 	.word	0x20000754

0800e4f8 <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b08c      	sub	sp, #48	; 0x30
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	607a      	str	r2, [r7, #4]
 800e502:	461a      	mov	r2, r3
 800e504:	460b      	mov	r3, r1
 800e506:	817b      	strh	r3, [r7, #10]
 800e508:	4613      	mov	r3, r2
 800e50a:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	613b      	str	r3, [r7, #16]
 800e510:	897b      	ldrh	r3, [r7, #10]
 800e512:	00db      	lsls	r3, r3, #3
 800e514:	b29b      	uxth	r3, r3
 800e516:	82bb      	strh	r3, [r7, #20]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	61bb      	str	r3, [r7, #24]
 800e51c:	893b      	ldrh	r3, [r7, #8]
 800e51e:	00db      	lsls	r3, r3, #3
 800e520:	b29b      	uxth	r3, r3
 800e522:	83bb      	strh	r3, [r7, #28]
 800e524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e526:	623b      	str	r3, [r7, #32]
 800e528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52a:	627b      	str	r3, [r7, #36]	; 0x24
 800e52c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e52e:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800e530:	f107 0310 	add.w	r3, r7, #16
 800e534:	4618      	mov	r0, r3
 800e536:	f7ff fe7b 	bl	800e230 <rfalStartTransceive>
 800e53a:	4603      	mov	r3, r0
 800e53c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e53e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e540:	2b00      	cmp	r3, #0
 800e542:	d001      	beq.n	800e548 <rfalTransceiveBlockingTx+0x50>
 800e544:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e546:	e002      	b.n	800e54e <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 800e548:	f000 f805 	bl	800e556 <rfalTransceiveRunBlockingTx>
 800e54c:	4603      	mov	r3, r0
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3730      	adds	r7, #48	; 0x30
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}

0800e556 <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 800e556:	b580      	push	{r7, lr}
 800e558:	b082      	sub	sp, #8
 800e55a:	af00      	add	r7, sp, #0
    ReturnCode ret;
        
    do{
        rfalWorker();
 800e55c:	f000 f8a6 	bl	800e6ac <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800e560:	f000 f892 	bl	800e688 <rfalGetTransceiveStatus>
 800e564:	4603      	mov	r3, r0
 800e566:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800e568:	f7ff ff9e 	bl	800e4a8 <rfalIsTransceiveInTx>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d002      	beq.n	800e578 <rfalTransceiveRunBlockingTx+0x22>
 800e572:	88fb      	ldrh	r3, [r7, #6]
 800e574:	2b02      	cmp	r3, #2
 800e576:	d0f1      	beq.n	800e55c <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 800e578:	f7ff ffae 	bl	800e4d8 <rfalIsTransceiveInRx>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d001      	beq.n	800e586 <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 800e582:	2300      	movs	r3, #0
 800e584:	e000      	b.n	800e588 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 800e586:	88fb      	ldrh	r3, [r7, #6]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 800e596:	f000 f889 	bl	800e6ac <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800e59a:	f000 f875 	bl	800e688 <rfalGetTransceiveStatus>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );    
 800e5a2:	f7ff ff99 	bl	800e4d8 <rfalIsTransceiveInRx>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <rfalTransceiveBlockingRx+0x22>
 800e5ac:	88fb      	ldrh	r3, [r7, #6]
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	d0f1      	beq.n	800e596 <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 800e5b2:	88fb      	ldrh	r3, [r7, #6]
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b08a      	sub	sp, #40	; 0x28
 800e5c0:	af04      	add	r7, sp, #16
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	607a      	str	r2, [r7, #4]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	817b      	strh	r3, [r7, #10]
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 800e5d0:	893a      	ldrh	r2, [r7, #8]
 800e5d2:	8979      	ldrh	r1, [r7, #10]
 800e5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d6:	9302      	str	r3, [sp, #8]
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5da:	9301      	str	r3, [sp, #4]
 800e5dc:	6a3b      	ldr	r3, [r7, #32]
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	4613      	mov	r3, r2
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f7ff ff87 	bl	800e4f8 <rfalTransceiveBlockingTx>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	82fb      	strh	r3, [r7, #22]
 800e5ee:	8afb      	ldrh	r3, [r7, #22]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <rfalTransceiveBlockingTxRx+0x3c>
 800e5f4:	8afb      	ldrh	r3, [r7, #22]
 800e5f6:	e00e      	b.n	800e616 <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 800e5f8:	f7ff ffca 	bl	800e590 <rfalTransceiveBlockingRx>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 800e600:	6a3b      	ldr	r3, [r7, #32]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d006      	beq.n	800e614 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen = rfalConvBitsToBytes(*actLen);
 800e606:	6a3b      	ldr	r3, [r7, #32]
 800e608:	881b      	ldrh	r3, [r3, #0]
 800e60a:	3307      	adds	r3, #7
 800e60c:	08db      	lsrs	r3, r3, #3
 800e60e:	b29a      	uxth	r2, r3
 800e610:	6a3b      	ldr	r3, [r7, #32]
 800e612:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 800e614:	8afb      	ldrh	r3, [r7, #22]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3718      	adds	r7, #24
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
	...

0800e620 <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 800e624:	4b17      	ldr	r3, [pc, #92]	; (800e684 <rfalRunTransceiveWorker+0x64>)
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2b03      	cmp	r3, #3
 800e62a:	d127      	bne.n	800e67c <rfalRunTransceiveWorker+0x5c>
    {
        /*******************************************************************************/
        /* Check Transceive Sanity Timer has expired */
        if( gRFAL.tmr.txRx != RFAL_TIMING_NONE )
 800e62c:	4b15      	ldr	r3, [pc, #84]	; (800e684 <rfalRunTransceiveWorker+0x64>)
 800e62e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00d      	beq.n	800e650 <rfalRunTransceiveWorker+0x30>
        {
            if( rfalTimerisExpired( gRFAL.tmr.txRx ) )
 800e634:	4b13      	ldr	r3, [pc, #76]	; (800e684 <rfalRunTransceiveWorker+0x64>)
 800e636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e638:	4618      	mov	r0, r3
 800e63a:	f7f6 f80b 	bl	8004654 <timerIsExpired>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d005      	beq.n	800e650 <rfalRunTransceiveWorker+0x30>
            {
                /* If sanity timer has expired abort ongoing transceive and signal error */
                gRFAL.TxRx.status = ERR_IO;
 800e644:	4b0f      	ldr	r3, [pc, #60]	; (800e684 <rfalRunTransceiveWorker+0x64>)
 800e646:	2203      	movs	r2, #3
 800e648:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e64a:	4b0e      	ldr	r3, [pc, #56]	; (800e684 <rfalRunTransceiveWorker+0x64>)
 800e64c:	225a      	movs	r2, #90	; 0x5a
 800e64e:	751a      	strb	r2, [r3, #20]
            }
        }
        
        /*******************************************************************************/
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 800e650:	f7ff ff2a 	bl	800e4a8 <rfalIsTransceiveInTx>
 800e654:	4603      	mov	r3, r0
 800e656:	2b00      	cmp	r3, #0
 800e658:	d005      	beq.n	800e666 <rfalRunTransceiveWorker+0x46>
        {
            rfalTransceiveTx();
 800e65a:	f000 f95d 	bl	800e918 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 800e65e:	f000 f813 	bl	800e688 <rfalGetTransceiveStatus>
 800e662:	4603      	mov	r3, r0
 800e664:	e00b      	b.n	800e67e <rfalRunTransceiveWorker+0x5e>
        }
        if( rfalIsTransceiveInRx() )
 800e666:	f7ff ff37 	bl	800e4d8 <rfalIsTransceiveInRx>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d005      	beq.n	800e67c <rfalRunTransceiveWorker+0x5c>
        {
            rfalTransceiveRx();
 800e670:	f000 fb98 	bl	800eda4 <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 800e674:	f000 f808 	bl	800e688 <rfalGetTransceiveStatus>
 800e678:	4603      	mov	r3, r0
 800e67a:	e000      	b.n	800e67e <rfalRunTransceiveWorker+0x5e>
        }
    }    
    return ERR_WRONG_STATE;
 800e67c:	2321      	movs	r3, #33	; 0x21
}
 800e67e:	4618      	mov	r0, r3
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	20000754 	.word	0x20000754

0800e688 <rfalGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalGetTransceiveStatus( void )
{
 800e688:	b480      	push	{r7}
 800e68a:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800e68c:	4b06      	ldr	r3, [pc, #24]	; (800e6a8 <rfalGetTransceiveStatus+0x20>)
 800e68e:	7d1b      	ldrb	r3, [r3, #20]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d102      	bne.n	800e69a <rfalGetTransceiveStatus+0x12>
 800e694:	4b04      	ldr	r3, [pc, #16]	; (800e6a8 <rfalGetTransceiveStatus+0x20>)
 800e696:	8adb      	ldrh	r3, [r3, #22]
 800e698:	e000      	b.n	800e69c <rfalGetTransceiveStatus+0x14>
 800e69a:	2302      	movs	r3, #2
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop
 800e6a8:	20000754 	.word	0x20000754

0800e6ac <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 800e6b0:	4b07      	ldr	r3, [pc, #28]	; (800e6d0 <rfalWorker+0x24>)
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	2b03      	cmp	r3, #3
 800e6b6:	d002      	beq.n	800e6be <rfalWorker+0x12>
 800e6b8:	2b05      	cmp	r3, #5
 800e6ba:	d003      	beq.n	800e6c4 <rfalWorker+0x18>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800e6bc:	e005      	b.n	800e6ca <rfalWorker+0x1e>
            rfalRunTransceiveWorker();
 800e6be:	f7ff ffaf 	bl	800e620 <rfalRunTransceiveWorker>
            break;
 800e6c2:	e002      	b.n	800e6ca <rfalWorker+0x1e>
            rfalRunWakeUpModeWorker();
 800e6c4:	f001 f82e 	bl	800f724 <rfalRunWakeUpModeWorker>
            break;
 800e6c8:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 800e6ca:	bf00      	nop
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	20000754 	.word	0x20000754

0800e6d4 <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
    uint16_t fifoBytesToRead;
 
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 800e6da:	f000 fee9 	bl	800f4b0 <rfalFIFOStatusGetNumBytes>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	80fb      	strh	r3, [r7, #6]
    

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 800e6e2:	4b17      	ldr	r3, [pc, #92]	; (800e740 <rfalErrorHandling+0x6c>)
 800e6e4:	785b      	ldrb	r3, [r3, #1]
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d125      	bne.n	800e736 <rfalErrorHandling+0x62>
        
        /*******************************************************************************/
        /* If we received a frame with a incomplete byte we`ll raise a specific error  *
         * ( support for T2T 4 bit ACK / NAK, MIFARE and Kovio )                       */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 800e6ea:	4b15      	ldr	r3, [pc, #84]	; (800e740 <rfalErrorHandling+0x6c>)
 800e6ec:	8adb      	ldrh	r3, [r3, #22]
 800e6ee:	2b1b      	cmp	r3, #27
 800e6f0:	d003      	beq.n	800e6fa <rfalErrorHandling+0x26>
 800e6f2:	4b13      	ldr	r3, [pc, #76]	; (800e740 <rfalErrorHandling+0x6c>)
 800e6f4:	8adb      	ldrh	r3, [r3, #22]
 800e6f6:	2b15      	cmp	r3, #21
 800e6f8:	d11d      	bne.n	800e736 <rfalErrorHandling+0x62>
        {
            if( rfalFIFOStatusIsIncompleteByte() )
 800e6fa:	f000 fef5 	bl	800f4e8 <rfalFIFOStatusIsIncompleteByte>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	d018      	beq.n	800e736 <rfalErrorHandling+0x62>
            {
                st25r3916ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 800e704:	4b0e      	ldr	r3, [pc, #56]	; (800e740 <rfalErrorHandling+0x6c>)
 800e706:	6a1b      	ldr	r3, [r3, #32]
 800e708:	88fa      	ldrh	r2, [r7, #6]
 800e70a:	4611      	mov	r1, r2
 800e70c:	4618      	mov	r0, r3
 800e70e:	f002 f904 	bl	801091a <st25r3916ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 800e712:	4b0b      	ldr	r3, [pc, #44]	; (800e740 <rfalErrorHandling+0x6c>)
 800e714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e716:	2b00      	cmp	r3, #0
 800e718:	d007      	beq.n	800e72a <rfalErrorHandling+0x56>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 800e71a:	f000 ff09 	bl	800f530 <rfalFIFOGetNumIncompleteBits>
 800e71e:	4603      	mov	r3, r0
 800e720:	461a      	mov	r2, r3
 800e722:	4b07      	ldr	r3, [pc, #28]	; (800e740 <rfalErrorHandling+0x6c>)
 800e724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e726:	b292      	uxth	r2, r2
 800e728:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800e72a:	4b05      	ldr	r3, [pc, #20]	; (800e740 <rfalErrorHandling+0x6c>)
 800e72c:	2228      	movs	r2, #40	; 0x28
 800e72e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e730:	4b03      	ldr	r3, [pc, #12]	; (800e740 <rfalErrorHandling+0x6c>)
 800e732:	225a      	movs	r2, #90	; 0x5a
 800e734:	751a      	strb	r2, [r3, #20]
            }
        }
    }
    
}
 800e736:	bf00      	nop
 800e738:	3708      	adds	r7, #8
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	20000754 	.word	0x20000754

0800e744 <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 800e744:	b580      	push	{r7, lr}
 800e746:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 800e748:	21e0      	movs	r1, #224	; 0xe0
 800e74a:	2005      	movs	r0, #5
 800e74c:	f002 f962 	bl	8010a14 <st25r3916ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e750:	2108      	movs	r1, #8
 800e752:	200c      	movs	r0, #12
 800e754:	f002 f995 	bl	8010a82 <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Transceive timers                                                           */
    /*******************************************************************************/
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800e758:	4b05      	ldr	r3, [pc, #20]	; (800e770 <rfalCleanupTransceive+0x2c>)
 800e75a:	2200      	movs	r2, #0
 800e75c:	645a      	str	r2, [r3, #68]	; 0x44
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 800e75e:	4b04      	ldr	r3, [pc, #16]	; (800e770 <rfalCleanupTransceive+0x2c>)
 800e760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e762:	2b00      	cmp	r3, #0
 800e764:	d002      	beq.n	800e76c <rfalCleanupTransceive+0x28>
    {
        gRFAL.callbacks.postTxRx();
 800e766:	4b02      	ldr	r3, [pc, #8]	; (800e770 <rfalCleanupTransceive+0x2c>)
 800e768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e76a:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 800e76c:	bf00      	nop
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	20000754 	.word	0x20000754

0800e774 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
    uint32_t maskInterrupts;
    uint8_t  reg;
    
    /* If we are in RW or AP2P mode */
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 800e77a:	4b64      	ldr	r3, [pc, #400]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e77c:	785b      	ldrb	r3, [r3, #1]
 800e77e:	2b0a      	cmp	r3, #10
 800e780:	d00e      	beq.n	800e7a0 <rfalPrepareTransceive+0x2c>
 800e782:	4b62      	ldr	r3, [pc, #392]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e784:	785b      	ldrb	r3, [r3, #1]
 800e786:	2b0b      	cmp	r3, #11
 800e788:	d00a      	beq.n	800e7a0 <rfalPrepareTransceive+0x2c>
 800e78a:	4b60      	ldr	r3, [pc, #384]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e78c:	785b      	ldrb	r3, [r3, #1]
 800e78e:	2b0c      	cmp	r3, #12
 800e790:	d006      	beq.n	800e7a0 <rfalPrepareTransceive+0x2c>
    {
        /* Reset receive logic with STOP command */
        st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 800e792:	20c2      	movs	r0, #194	; 0xc2
 800e794:	f002 f8dd 	bl	8010952 <st25r3916ExecuteCommand>
    
        /* Reset Rx Gain */
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 800e798:	20d5      	movs	r0, #213	; 0xd5
 800e79a:	f002 f8da 	bl	8010952 <st25r3916ExecuteCommand>
 800e79e:	e002      	b.n	800e7a6 <rfalPrepareTransceive+0x32>
    }
    else
    {
        /* In Passive Listen Mode do not use STOP as it stops FDT timer */
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800e7a0:	20db      	movs	r0, #219	; 0xdb
 800e7a2:	f002 f8d6 	bl	8010952 <st25r3916ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800e7a6:	4b59      	ldr	r3, [pc, #356]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e7a8:	785b      	ldrb	r3, [r3, #1]
 800e7aa:	2b09      	cmp	r3, #9
 800e7ac:	d01c      	beq.n	800e7e8 <rfalPrepareTransceive+0x74>
 800e7ae:	4b57      	ldr	r3, [pc, #348]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e7b0:	785b      	ldrb	r3, [r3, #1]
 800e7b2:	2b0d      	cmp	r3, #13
 800e7b4:	d018      	beq.n	800e7e8 <rfalPrepareTransceive+0x74>
    {
        /* In Passive communications General Purpose Timer is used to measure FDT Poll */
        if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800e7b6:	4b55      	ldr	r3, [pc, #340]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e7b8:	691b      	ldr	r3, [r3, #16]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d014      	beq.n	800e7e8 <rfalPrepareTransceive+0x74>
        {
            /* Configure GPT to start at RX end */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 800e7be:	4b53      	ldr	r3, [pc, #332]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e7c0:	691b      	ldr	r3, [r3, #16]
 800e7c2:	f240 423b 	movw	r2, #1083	; 0x43b
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d804      	bhi.n	800e7d4 <rfalPrepareTransceive+0x60>
 800e7ca:	4b50      	ldr	r3, [pc, #320]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e7cc:	691b      	ldr	r3, [r3, #16]
 800e7ce:	08db      	lsrs	r3, r3, #3
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	e005      	b.n	800e7e0 <rfalPrepareTransceive+0x6c>
 800e7d4:	4b4d      	ldr	r3, [pc, #308]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e7d6:	691b      	ldr	r3, [r3, #16]
 800e7d8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800e7dc:	08db      	lsrs	r3, r3, #3
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	2120      	movs	r1, #32
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f001 fba7 	bl	800ff36 <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 800e7e8:	4b48      	ldr	r3, [pc, #288]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e7ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d002      	beq.n	800e7f6 <rfalPrepareTransceive+0x82>
    {
        gRFAL.callbacks.preTxRx();
 800e7f0:	4b46      	ldr	r3, [pc, #280]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e7f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7f4:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    
    maskInterrupts = ( ST25R3916_IRQ_MASK_FWL  | ST25R3916_IRQ_MASK_TXE  |
 800e7f6:	4b46      	ldr	r3, [pc, #280]	; (800e910 <rfalPrepareTransceive+0x19c>)
 800e7f8:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3916_REG_ISO14443A_NFC_no_tx_par_off | ST25R3916_REG_ISO14443A_NFC_no_rx_par_off | ST25R3916_REG_ISO14443A_NFC_nfc_f0_off);
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 800e7fe:	4b43      	ldr	r3, [pc, #268]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e802:	f003 0304 	and.w	r3, r3, #4
 800e806:	2b00      	cmp	r3, #0
 800e808:	d003      	beq.n	800e812 <rfalPrepareTransceive+0x9e>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_nfc_f0;
 800e80a:	78fb      	ldrb	r3, [r7, #3]
 800e80c:	f043 0320 	orr.w	r3, r3, #32
 800e810:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 800e812:	4b3e      	ldr	r3, [pc, #248]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e816:	f003 0310 	and.w	r3, r3, #16
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d003      	beq.n	800e826 <rfalPrepareTransceive+0xb2>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_rx_par;
 800e81e:	78fb      	ldrb	r3, [r7, #3]
 800e820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e824:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 800e826:	4b39      	ldr	r3, [pc, #228]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82a:	f003 0320 	and.w	r3, r3, #32
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d003      	beq.n	800e83a <rfalPrepareTransceive+0xc6>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_tx_par;
 800e832:	78fb      	ldrb	r3, [r7, #3]
 800e834:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e838:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0), reg );
 800e83a:	78fb      	ldrb	r3, [r7, #3]
 800e83c:	461a      	mov	r2, r3
 800e83e:	21e0      	movs	r1, #224	; 0xe0
 800e840:	2005      	movs	r0, #5
 800e842:	f002 f94b 	bl	8010adc <st25r3916ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 800e846:	4b31      	ldr	r3, [pc, #196]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e84a:	f003 0308 	and.w	r3, r3, #8
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d004      	beq.n	800e85c <rfalPrepareTransceive+0xe8>
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e852:	2108      	movs	r1, #8
 800e854:	200c      	movs	r0, #12
 800e856:	f002 f8dd 	bl	8010a14 <st25r3916ClrRegisterBits>
 800e85a:	e003      	b.n	800e864 <rfalPrepareTransceive+0xf0>
    }
    else
    {
        st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e85c:	2108      	movs	r1, #8
 800e85e:	200c      	movs	r0, #12
 800e860:	f002 f90f 	bl	8010a82 <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800e864:	4b29      	ldr	r3, [pc, #164]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e866:	79db      	ldrb	r3, [r3, #7]
 800e868:	2b02      	cmp	r3, #2
 800e86a:	d108      	bne.n	800e87e <rfalPrepareTransceive+0x10a>
    {
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800e86c:	2102      	movs	r1, #2
 800e86e:	2012      	movs	r0, #18
 800e870:	f002 f907 	bl	8010a82 <st25r3916SetRegisterBits>
        maskInterrupts |= ST25R3916_IRQ_MASK_RX_REST;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f043 0302 	orr.w	r3, r3, #2
 800e87a:	607b      	str	r3, [r7, #4]
 800e87c:	e003      	b.n	800e886 <rfalPrepareTransceive+0x112>
    }
    else
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800e87e:	2102      	movs	r1, #2
 800e880:	2012      	movs	r0, #18
 800e882:	f002 f8c7 	bl	8010a14 <st25r3916ClrRegisterBits>
    }
    /*******************************************************************************/
    
    /* In Passive Listen mode additionally enable External Field interrupts  */    
    if( rfalIsModePassiveListen( gRFAL.mode ) )
 800e886:	4b21      	ldr	r3, [pc, #132]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e888:	785b      	ldrb	r3, [r3, #1]
 800e88a:	2b0a      	cmp	r3, #10
 800e88c:	d007      	beq.n	800e89e <rfalPrepareTransceive+0x12a>
 800e88e:	4b1f      	ldr	r3, [pc, #124]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e890:	785b      	ldrb	r3, [r3, #1]
 800e892:	2b0b      	cmp	r3, #11
 800e894:	d003      	beq.n	800e89e <rfalPrepareTransceive+0x12a>
 800e896:	4b1d      	ldr	r3, [pc, #116]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e898:	785b      	ldrb	r3, [r3, #1]
 800e89a:	2b0c      	cmp	r3, #12
 800e89c:	d103      	bne.n	800e8a6 <rfalPrepareTransceive+0x132>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_F );      /* Enable external Field interrupts to detect Link Loss and SENF_REQ auto responses */
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
 800e8a4:	607b      	str	r3, [r7, #4]
    }
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 800e8a6:	4b19      	ldr	r3, [pc, #100]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e8a8:	785b      	ldrb	r3, [r3, #1]
 800e8aa:	2b09      	cmp	r3, #9
 800e8ac:	d003      	beq.n	800e8b6 <rfalPrepareTransceive+0x142>
 800e8ae:	4b17      	ldr	r3, [pc, #92]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e8b0:	785b      	ldrb	r3, [r3, #1]
 800e8b2:	2b0d      	cmp	r3, #13
 800e8b4:	d105      	bne.n	800e8c2 <rfalPrepareTransceive+0x14e>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e8bc:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800e8c0:	607b      	str	r3, [r7, #4]
    }
    
    /*******************************************************************************/
    /* Start transceive Sanity Timer if a FWT is used */
    if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800e8c2:	4b12      	ldr	r3, [pc, #72]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ca:	d013      	beq.n	800e8f4 <rfalPrepareTransceive+0x180>
 800e8cc:	4b0f      	ldr	r3, [pc, #60]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00f      	beq.n	800e8f4 <rfalPrepareTransceive+0x180>
    {
        rfalTimerStart( gRFAL.tmr.txRx, rfalCalcSanityTmr( gRFAL.TxRx.ctx.fwt ) );
 800e8d4:	4b0d      	ldr	r3, [pc, #52]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d8:	4a0e      	ldr	r2, [pc, #56]	; (800e914 <rfalPrepareTransceive+0x1a0>)
 800e8da:	fba2 2303 	umull	r2, r3, r2, r3
 800e8de:	0b1b      	lsrs	r3, r3, #12
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7f5 fea5 	bl	8004638 <timerCalculateTimer>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	4b06      	ldr	r3, [pc, #24]	; (800e90c <rfalPrepareTransceive+0x198>)
 800e8f2:	645a      	str	r2, [r3, #68]	; 0x44
    /*******************************************************************************/
    
    
    /*******************************************************************************/
    /* Clear and enable these interrupts */
    st25r3916GetInterrupt( maskInterrupts );
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f002 faff 	bl	8010ef8 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( maskInterrupts );
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f002 fb34 	bl	8010f68 <st25r3916EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800e900:	f000 fdc8 	bl	800f494 <rfalFIFOStatusClear>
}
 800e904:	bf00      	nop
 800e906:	3708      	adds	r7, #8
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	20000754 	.word	0x20000754
 800e910:	00f04078 	.word	0x00f04078
 800e914:	4d542005 	.word	0x4d542005

0800e918 <rfalTransceiveTx>:


/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 800e918:	b5b0      	push	{r4, r5, r7, lr}
 800e91a:	b08a      	sub	sp, #40	; 0x28
 800e91c:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 800e91e:	2300      	movs	r3, #0
 800e920:	81fb      	strh	r3, [r7, #14]
    NO_WARNING( ret );
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800e922:	2300      	movs	r3, #0
 800e924:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800e926:	4ba1      	ldr	r3, [pc, #644]	; (800ebac <rfalTransceiveTx+0x294>)
 800e928:	7d1a      	ldrb	r2, [r3, #20]
 800e92a:	4ba0      	ldr	r3, [pc, #640]	; (800ebac <rfalTransceiveTx+0x294>)
 800e92c:	7d5b      	ldrb	r3, [r3, #21]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d003      	beq.n	800e93a <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800e932:	4b9e      	ldr	r3, [pc, #632]	; (800ebac <rfalTransceiveTx+0x294>)
 800e934:	7d1a      	ldrb	r2, [r3, #20]
 800e936:	4b9d      	ldr	r3, [pc, #628]	; (800ebac <rfalTransceiveTx+0x294>)
 800e938:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800e93a:	4b9c      	ldr	r3, [pc, #624]	; (800ebac <rfalTransceiveTx+0x294>)
 800e93c:	7d1b      	ldrb	r3, [r3, #20]
 800e93e:	3b0b      	subs	r3, #11
 800e940:	2b08      	cmp	r3, #8
 800e942:	f200 8212 	bhi.w	800ed6a <rfalTransceiveTx+0x452>
 800e946:	a201      	add	r2, pc, #4	; (adr r2, 800e94c <rfalTransceiveTx+0x34>)
 800e948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e94c:	0800e971 	.word	0x0800e971
 800e950:	0800e977 	.word	0x0800e977
 800e954:	0800e995 	.word	0x0800e995
 800e958:	0800e9bd 	.word	0x0800e9bd
 800e95c:	0800eb3d 	.word	0x0800eb3d
 800e960:	0800eb79 	.word	0x0800eb79
 800e964:	0800ecbb 	.word	0x0800ecbb
 800e968:	0800ecf5 	.word	0x0800ecf5
 800e96c:	0800ed41 	.word	0x0800ed41
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 800e970:	4b8e      	ldr	r3, [pc, #568]	; (800ebac <rfalTransceiveTx+0x294>)
 800e972:	220c      	movs	r2, #12
 800e974:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 800e976:	f7ff fbc3 	bl	800e100 <rfalIsGTExpired>
 800e97a:	4603      	mov	r3, r0
 800e97c:	f083 0301 	eor.w	r3, r3, #1
 800e980:	b2db      	uxtb	r3, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	f040 81f8 	bne.w	800ed78 <rfalTransceiveTx+0x460>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800e988:	4b88      	ldr	r3, [pc, #544]	; (800ebac <rfalTransceiveTx+0x294>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	63da      	str	r2, [r3, #60]	; 0x3c
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 800e98e:	4b87      	ldr	r3, [pc, #540]	; (800ebac <rfalTransceiveTx+0x294>)
 800e990:	220d      	movs	r2, #13
 800e992:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 800e994:	4b85      	ldr	r3, [pc, #532]	; (800ebac <rfalTransceiveTx+0x294>)
 800e996:	785b      	ldrb	r3, [r3, #1]
 800e998:	2b09      	cmp	r3, #9
 800e99a:	d00c      	beq.n	800e9b6 <rfalTransceiveTx+0x9e>
 800e99c:	4b83      	ldr	r3, [pc, #524]	; (800ebac <rfalTransceiveTx+0x294>)
 800e99e:	785b      	ldrb	r3, [r3, #1]
 800e9a0:	2b0d      	cmp	r3, #13
 800e9a2:	d008      	beq.n	800e9b6 <rfalTransceiveTx+0x9e>
            {
                if( st25r3916IsGPTRunning() )
 800e9a4:	2204      	movs	r2, #4
 800e9a6:	2104      	movs	r1, #4
 800e9a8:	2024      	movs	r0, #36	; 0x24
 800e9aa:	f002 f91b 	bl	8010be4 <st25r3916CheckReg>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	f040 81e3 	bne.w	800ed7c <rfalTransceiveTx+0x464>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 800e9b6:	4b7d      	ldr	r3, [pc, #500]	; (800ebac <rfalTransceiveTx+0x294>)
 800e9b8:	220e      	movs	r2, #14
 800e9ba:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800e9bc:	f7ff feda 	bl	800e774 <rfalPrepareTransceive>

            /* ST25R3916 has a fixed FIFO water level */
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 800e9c0:	4b7a      	ldr	r3, [pc, #488]	; (800ebac <rfalTransceiveTx+0x294>)
 800e9c2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800e9c6:	869a      	strh	r2, [r3, #52]	; 0x34

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800e9c8:	4b78      	ldr	r3, [pc, #480]	; (800ebac <rfalTransceiveTx+0x294>)
 800e9ca:	785b      	ldrb	r3, [r3, #1]
 800e9cc:	2b07      	cmp	r3, #7
 800e9ce:	d003      	beq.n	800e9d8 <rfalTransceiveTx+0xc0>
 800e9d0:	4b76      	ldr	r3, [pc, #472]	; (800ebac <rfalTransceiveTx+0x294>)
 800e9d2:	785b      	ldrb	r3, [r3, #1]
 800e9d4:	2b08      	cmp	r3, #8
 800e9d6:	d152      	bne.n	800ea7e <rfalTransceiveTx+0x166>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3916WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
#endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 800e9d8:	4b74      	ldr	r3, [pc, #464]	; (800ebac <rfalTransceiveTx+0x294>)
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800e9e0:	4b72      	ldr	r3, [pc, #456]	; (800ebac <rfalTransceiveTx+0x294>)
 800e9e2:	6998      	ldr	r0, [r3, #24]
 800e9e4:	4b71      	ldr	r3, [pc, #452]	; (800ebac <rfalTransceiveTx+0x294>)
 800e9e6:	8b9b      	ldrh	r3, [r3, #28]
 800e9e8:	3307      	adds	r3, #7
 800e9ea:	08db      	lsrs	r3, r3, #3
 800e9ec:	b299      	uxth	r1, r3
 800e9ee:	4b6f      	ldr	r3, [pc, #444]	; (800ebac <rfalTransceiveTx+0x294>)
 800e9f0:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e9f4:	f003 0301 	and.w	r3, r3, #1
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	bf0c      	ite	eq
 800e9fc:	2301      	moveq	r3, #1
 800e9fe:	2300      	movne	r3, #0
 800ea00:	b2dc      	uxtb	r4, r3
 800ea02:	4b6a      	ldr	r3, [pc, #424]	; (800ebac <rfalTransceiveTx+0x294>)
 800ea04:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ea08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	bf0c      	ite	eq
 800ea10:	2301      	moveq	r3, #1
 800ea12:	2300      	movne	r3, #0
 800ea14:	b2dd      	uxtb	r5, r3
 800ea16:	4b65      	ldr	r3, [pc, #404]	; (800ebac <rfalTransceiveTx+0x294>)
 800ea18:	785b      	ldrb	r3, [r3, #1]
 800ea1a:	2b08      	cmp	r3, #8
 800ea1c:	bf0c      	ite	eq
 800ea1e:	2301      	moveq	r3, #1
 800ea20:	2300      	movne	r3, #0
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	4a62      	ldr	r2, [pc, #392]	; (800ebb0 <rfalTransceiveTx+0x298>)
 800ea26:	9205      	str	r2, [sp, #20]
 800ea28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea2c:	9204      	str	r2, [sp, #16]
 800ea2e:	4a61      	ldr	r2, [pc, #388]	; (800ebb4 <rfalTransceiveTx+0x29c>)
 800ea30:	9203      	str	r2, [sp, #12]
 800ea32:	4a61      	ldr	r2, [pc, #388]	; (800ebb8 <rfalTransceiveTx+0x2a0>)
 800ea34:	9202      	str	r2, [sp, #8]
 800ea36:	4a61      	ldr	r2, [pc, #388]	; (800ebbc <rfalTransceiveTx+0x2a4>)
 800ea38:	9201      	str	r2, [sp, #4]
 800ea3a:	9300      	str	r3, [sp, #0]
 800ea3c:	462b      	mov	r3, r5
 800ea3e:	4622      	mov	r2, r4
 800ea40:	f7fe fb1c 	bl	800d07c <iso15693VCDCode>
 800ea44:	4603      	mov	r3, r0
 800ea46:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3916_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800ea48:	89fb      	ldrh	r3, [r7, #14]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d009      	beq.n	800ea62 <rfalTransceiveTx+0x14a>
 800ea4e:	89fb      	ldrh	r3, [r7, #14]
 800ea50:	2b0d      	cmp	r3, #13
 800ea52:	d006      	beq.n	800ea62 <rfalTransceiveTx+0x14a>
                {
                    gRFAL.TxRx.status = ret;
 800ea54:	4a55      	ldr	r2, [pc, #340]	; (800ebac <rfalTransceiveTx+0x294>)
 800ea56:	89fb      	ldrh	r3, [r7, #14]
 800ea58:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ea5a:	4b54      	ldr	r3, [pc, #336]	; (800ebac <rfalTransceiveTx+0x294>)
 800ea5c:	2213      	movs	r2, #19
 800ea5e:	751a      	strb	r2, [r3, #20]
                    break;
 800ea60:	e193      	b.n	800ed8a <rfalTransceiveTx+0x472>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( (uint16_t)rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 800ea62:	4b52      	ldr	r3, [pc, #328]	; (800ebac <rfalTransceiveTx+0x294>)
 800ea64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea66:	00db      	lsls	r3, r3, #3
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f001 f9f6 	bl	800fe5c <st25r3916SetNumTxBits>

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, gRFAL.fifo.bytesWritten );
 800ea70:	4b4e      	ldr	r3, [pc, #312]	; (800ebac <rfalTransceiveTx+0x294>)
 800ea72:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ea74:	4619      	mov	r1, r3
 800ea76:	484f      	ldr	r0, [pc, #316]	; (800ebb4 <rfalTransceiveTx+0x29c>)
 800ea78:	f001 ff2c 	bl	80108d4 <st25r3916WriteFifo>
 800ea7c:	e01d      	b.n	800eaba <rfalTransceiveTx+0x1a2>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 800ea7e:	4b4b      	ldr	r3, [pc, #300]	; (800ebac <rfalTransceiveTx+0x294>)
 800ea80:	8b9b      	ldrh	r3, [r3, #28]
 800ea82:	3307      	adds	r3, #7
 800ea84:	08db      	lsrs	r3, r3, #3
 800ea86:	b29a      	uxth	r2, r3
 800ea88:	4b48      	ldr	r3, [pc, #288]	; (800ebac <rfalTransceiveTx+0x294>)
 800ea8a:	86da      	strh	r2, [r3, #54]	; 0x36
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 800ea8c:	4b47      	ldr	r3, [pc, #284]	; (800ebac <rfalTransceiveTx+0x294>)
 800ea8e:	8b9b      	ldrh	r3, [r3, #28]
 800ea90:	4618      	mov	r0, r3
 800ea92:	f001 f9e3 	bl	800fe5c <st25r3916SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 800ea96:	4b45      	ldr	r3, [pc, #276]	; (800ebac <rfalTransceiveTx+0x294>)
 800ea98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea9e:	bf28      	it	cs
 800eaa0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	4b41      	ldr	r3, [pc, #260]	; (800ebac <rfalTransceiveTx+0x294>)
 800eaa8:	871a      	strh	r2, [r3, #56]	; 0x38
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 800eaaa:	4b40      	ldr	r3, [pc, #256]	; (800ebac <rfalTransceiveTx+0x294>)
 800eaac:	699a      	ldr	r2, [r3, #24]
 800eaae:	4b3f      	ldr	r3, [pc, #252]	; (800ebac <rfalTransceiveTx+0x294>)
 800eab0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800eab2:	4619      	mov	r1, r3
 800eab4:	4610      	mov	r0, r2
 800eab6:	f001 ff0d 	bl	80108d4 <st25r3916WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx();
 800eaba:	4b3c      	ldr	r3, [pc, #240]	; (800ebac <rfalTransceiveTx+0x294>)
 800eabc:	795b      	ldrb	r3, [r3, #5]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d008      	beq.n	800ead4 <rfalTransceiveTx+0x1bc>
 800eac2:	4b3a      	ldr	r3, [pc, #232]	; (800ebac <rfalTransceiveTx+0x294>)
 800eac4:	795b      	ldrb	r3, [r3, #5]
 800eac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	4619      	mov	r1, r3
 800eace:	2001      	movs	r0, #1
 800ead0:	f001 ff7b 	bl	80109ca <st25r3916WriteTestRegister>
            
            
            /*******************************************************************************/
            /* If we're in Passive Listen mode ensure that the external field is still On  */
            if( rfalIsModePassiveListen(gRFAL.mode) )
 800ead4:	4b35      	ldr	r3, [pc, #212]	; (800ebac <rfalTransceiveTx+0x294>)
 800ead6:	785b      	ldrb	r3, [r3, #1]
 800ead8:	2b0a      	cmp	r3, #10
 800eada:	d007      	beq.n	800eaec <rfalTransceiveTx+0x1d4>
 800eadc:	4b33      	ldr	r3, [pc, #204]	; (800ebac <rfalTransceiveTx+0x294>)
 800eade:	785b      	ldrb	r3, [r3, #1]
 800eae0:	2b0b      	cmp	r3, #11
 800eae2:	d003      	beq.n	800eaec <rfalTransceiveTx+0x1d4>
 800eae4:	4b31      	ldr	r3, [pc, #196]	; (800ebac <rfalTransceiveTx+0x294>)
 800eae6:	785b      	ldrb	r3, [r3, #1]
 800eae8:	2b0c      	cmp	r3, #12
 800eaea:	d10e      	bne.n	800eb0a <rfalTransceiveTx+0x1f2>
            {
                if( !rfalIsExtFieldOn() )
 800eaec:	f000 fdfe 	bl	800f6ec <rfalIsExtFieldOn>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	f083 0301 	eor.w	r3, r3, #1
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d006      	beq.n	800eb0a <rfalTransceiveTx+0x1f2>
                {
                    gRFAL.TxRx.status = ERR_LINK_LOSS;
 800eafc:	4b2b      	ldr	r3, [pc, #172]	; (800ebac <rfalTransceiveTx+0x294>)
 800eafe:	2225      	movs	r2, #37	; 0x25
 800eb00:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800eb02:	4b2a      	ldr	r3, [pc, #168]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb04:	2213      	movs	r2, #19
 800eb06:	751a      	strb	r2, [r3, #20]
                    break;
 800eb08:	e13f      	b.n	800ed8a <rfalTransceiveTx+0x472>
                }
            }
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 800eb0a:	4b28      	ldr	r3, [pc, #160]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb0e:	f003 0301 	and.w	r3, r3, #1
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d003      	beq.n	800eb1e <rfalTransceiveTx+0x206>
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITHOUT_CRC );
 800eb16:	20c5      	movs	r0, #197	; 0xc5
 800eb18:	f001 ff1b 	bl	8010952 <st25r3916ExecuteCommand>
 800eb1c:	e002      	b.n	800eb24 <rfalTransceiveTx+0x20c>
            }
            else
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITH_CRC );
 800eb1e:	20c4      	movs	r0, #196	; 0xc4
 800eb20:	f001 ff17 	bl	8010952 <st25r3916ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800eb24:	4b21      	ldr	r3, [pc, #132]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb26:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800eb28:	4b20      	ldr	r3, [pc, #128]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d201      	bcs.n	800eb34 <rfalTransceiveTx+0x21c>
 800eb30:	220f      	movs	r2, #15
 800eb32:	e000      	b.n	800eb36 <rfalTransceiveTx+0x21e>
 800eb34:	2211      	movs	r2, #17
 800eb36:	4b1d      	ldr	r3, [pc, #116]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb38:	751a      	strb	r2, [r3, #20]
            break;
 800eb3a:	e126      	b.n	800ed8a <rfalTransceiveTx+0x472>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800eb3c:	2048      	movs	r0, #72	; 0x48
 800eb3e:	f002 f9db 	bl	8010ef8 <st25r3916GetInterrupt>
 800eb42:	4603      	mov	r3, r0
 800eb44:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f000 8119 	beq.w	800ed80 <rfalTransceiveTx+0x468>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_TXE) == 0U) )
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d008      	beq.n	800eb6a <rfalTransceiveTx+0x252>
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	f003 0308 	and.w	r3, r3, #8
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d103      	bne.n	800eb6a <rfalTransceiveTx+0x252>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 800eb62:	4b12      	ldr	r3, [pc, #72]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb64:	2210      	movs	r2, #16
 800eb66:	751a      	strb	r2, [r3, #20]
 800eb68:	e006      	b.n	800eb78 <rfalTransceiveTx+0x260>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800eb6a:	4b10      	ldr	r3, [pc, #64]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb6c:	2203      	movs	r2, #3
 800eb6e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800eb70:	4b0e      	ldr	r3, [pc, #56]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb72:	2213      	movs	r2, #19
 800eb74:	751a      	strb	r2, [r3, #20]
                break;
 800eb76:	e108      	b.n	800ed8a <rfalTransceiveTx+0x472>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800eb78:	4b0c      	ldr	r3, [pc, #48]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb7a:	785b      	ldrb	r3, [r3, #1]
 800eb7c:	2b07      	cmp	r3, #7
 800eb7e:	d003      	beq.n	800eb88 <rfalTransceiveTx+0x270>
 800eb80:	4b0a      	ldr	r3, [pc, #40]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb82:	785b      	ldrb	r3, [r3, #1]
 800eb84:	2b08      	cmp	r3, #8
 800eb86:	d16d      	bne.n	800ec64 <rfalTransceiveTx+0x34c>
            {
                uint16_t maxLen;
                                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 800eb88:	4b08      	ldr	r3, [pc, #32]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	4b07      	ldr	r3, [pc, #28]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb90:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	4a05      	ldr	r2, [pc, #20]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb96:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	da11      	bge.n	800ebc0 <rfalTransceiveTx+0x2a8>
 800eb9c:	4b03      	ldr	r3, [pc, #12]	; (800ebac <rfalTransceiveTx+0x294>)
 800eb9e:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800eba0:	4b02      	ldr	r3, [pc, #8]	; (800ebac <rfalTransceiveTx+0x294>)
 800eba2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800eba4:	1ad3      	subs	r3, r2, r3
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	e00c      	b.n	800ebc4 <rfalTransceiveTx+0x2ac>
 800ebaa:	bf00      	nop
 800ebac:	20000754 	.word	0x20000754
 800ebb0:	2000078c 	.word	0x2000078c
 800ebb4:	200007bc 	.word	0x200007bc
 800ebb8:	200009c4 	.word	0x200009c4
 800ebbc:	2000078a 	.word	0x2000078a
 800ebc0:	4b74      	ldr	r3, [pc, #464]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ebc2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ebc4:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 800ebc6:	89bb      	ldrh	r3, [r7, #12]
 800ebc8:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800ebcc:	bf28      	it	cs
 800ebce:	f44f 7302 	movcs.w	r3, #520	; 0x208
 800ebd2:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800ebd8:	4b6e      	ldr	r3, [pc, #440]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ebda:	6998      	ldr	r0, [r3, #24]
 800ebdc:	4b6d      	ldr	r3, [pc, #436]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ebde:	8b9b      	ldrh	r3, [r3, #28]
 800ebe0:	3307      	adds	r3, #7
 800ebe2:	08db      	lsrs	r3, r3, #3
 800ebe4:	b299      	uxth	r1, r3
 800ebe6:	4b6b      	ldr	r3, [pc, #428]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ebe8:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ebec:	f003 0301 	and.w	r3, r3, #1
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	bf0c      	ite	eq
 800ebf4:	2301      	moveq	r3, #1
 800ebf6:	2300      	movne	r3, #0
 800ebf8:	b2dc      	uxtb	r4, r3
 800ebfa:	4b66      	ldr	r3, [pc, #408]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ebfc:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	bf0c      	ite	eq
 800ec08:	2301      	moveq	r3, #1
 800ec0a:	2300      	movne	r3, #0
 800ec0c:	b2dd      	uxtb	r5, r3
 800ec0e:	4b61      	ldr	r3, [pc, #388]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ec10:	785b      	ldrb	r3, [r3, #1]
 800ec12:	2b08      	cmp	r3, #8
 800ec14:	bf0c      	ite	eq
 800ec16:	2301      	moveq	r3, #1
 800ec18:	2300      	movne	r3, #0
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	1dba      	adds	r2, r7, #6
 800ec1e:	9205      	str	r2, [sp, #20]
 800ec20:	89ba      	ldrh	r2, [r7, #12]
 800ec22:	9204      	str	r2, [sp, #16]
 800ec24:	4a5c      	ldr	r2, [pc, #368]	; (800ed98 <rfalTransceiveTx+0x480>)
 800ec26:	9203      	str	r2, [sp, #12]
 800ec28:	4a5c      	ldr	r2, [pc, #368]	; (800ed9c <rfalTransceiveTx+0x484>)
 800ec2a:	9202      	str	r2, [sp, #8]
 800ec2c:	4a5c      	ldr	r2, [pc, #368]	; (800eda0 <rfalTransceiveTx+0x488>)
 800ec2e:	9201      	str	r2, [sp, #4]
 800ec30:	9300      	str	r3, [sp, #0]
 800ec32:	462b      	mov	r3, r5
 800ec34:	4622      	mov	r2, r4
 800ec36:	f7fe fa21 	bl	800d07c <iso15693VCDCode>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800ec3e:	89fb      	ldrh	r3, [r7, #14]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d009      	beq.n	800ec58 <rfalTransceiveTx+0x340>
 800ec44:	89fb      	ldrh	r3, [r7, #14]
 800ec46:	2b0d      	cmp	r3, #13
 800ec48:	d006      	beq.n	800ec58 <rfalTransceiveTx+0x340>
                {
                    gRFAL.TxRx.status = ret;
 800ec4a:	4a52      	ldr	r2, [pc, #328]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ec4c:	89fb      	ldrh	r3, [r7, #14]
 800ec4e:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ec50:	4b50      	ldr	r3, [pc, #320]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ec52:	2213      	movs	r2, #19
 800ec54:	751a      	strb	r2, [r3, #20]
                    break;
 800ec56:	e098      	b.n	800ed8a <rfalTransceiveTx+0x472>
                }

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, tmp );
 800ec58:	88fb      	ldrh	r3, [r7, #6]
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	484e      	ldr	r0, [pc, #312]	; (800ed98 <rfalTransceiveTx+0x480>)
 800ec5e:	f001 fe39 	bl	80108d4 <st25r3916WriteFifo>
            {
 800ec62:	e017      	b.n	800ec94 <rfalTransceiveTx+0x37c>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 800ec64:	4b4b      	ldr	r3, [pc, #300]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ec66:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ec68:	461a      	mov	r2, r3
 800ec6a:	4b4a      	ldr	r3, [pc, #296]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ec6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec6e:	4619      	mov	r1, r3
 800ec70:	4b48      	ldr	r3, [pc, #288]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ec72:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ec74:	1acb      	subs	r3, r1, r3
 800ec76:	4293      	cmp	r3, r2
 800ec78:	bfa8      	it	ge
 800ec7a:	4613      	movge	r3, r2
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	80fb      	strh	r3, [r7, #6]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 800ec80:	4b44      	ldr	r3, [pc, #272]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ec82:	699b      	ldr	r3, [r3, #24]
 800ec84:	4a43      	ldr	r2, [pc, #268]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ec86:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800ec88:	4413      	add	r3, r2
 800ec8a:	88fa      	ldrh	r2, [r7, #6]
 800ec8c:	4611      	mov	r1, r2
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f001 fe20 	bl	80108d4 <st25r3916WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 800ec94:	4b3f      	ldr	r3, [pc, #252]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ec96:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800ec98:	88fb      	ldrh	r3, [r7, #6]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	b29a      	uxth	r2, r3
 800ec9e:	4b3d      	ldr	r3, [pc, #244]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800eca0:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800eca2:	4b3c      	ldr	r3, [pc, #240]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800eca4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800eca6:	4b3b      	ldr	r3, [pc, #236]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800eca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d201      	bcs.n	800ecb2 <rfalTransceiveTx+0x39a>
 800ecae:	220f      	movs	r2, #15
 800ecb0:	e000      	b.n	800ecb4 <rfalTransceiveTx+0x39c>
 800ecb2:	2211      	movs	r2, #17
 800ecb4:	4b37      	ldr	r3, [pc, #220]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ecb6:	751a      	strb	r2, [r3, #20]
            break;
 800ecb8:	e067      	b.n	800ed8a <rfalTransceiveTx+0x472>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800ecba:	2048      	movs	r0, #72	; 0x48
 800ecbc:	f002 f91c 	bl	8010ef8 <st25r3916GetInterrupt>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d05c      	beq.n	800ed84 <rfalTransceiveTx+0x46c>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3916_IRQ_MASK_TXE) != 0U )
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	f003 0308 	and.w	r3, r3, #8
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d003      	beq.n	800ecdc <rfalTransceiveTx+0x3c4>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 800ecd4:	4b2f      	ldr	r3, [pc, #188]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ecd6:	2212      	movs	r2, #18
 800ecd8:	751a      	strb	r2, [r3, #20]
 800ecda:	e00b      	b.n	800ecf4 <rfalTransceiveTx+0x3dc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_FWL) != 0U )
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d150      	bne.n	800ed88 <rfalTransceiveTx+0x470>
            {
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800ece6:	4b2b      	ldr	r3, [pc, #172]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ece8:	2203      	movs	r2, #3
 800ecea:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ecec:	4b29      	ldr	r3, [pc, #164]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ecee:	2213      	movs	r2, #19
 800ecf0:	751a      	strb	r2, [r3, #20]
               break;
 800ecf2:	e04a      	b.n	800ed8a <rfalTransceiveTx+0x472>
                           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 800ecf4:	4b27      	ldr	r3, [pc, #156]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ecf6:	6a1b      	ldr	r3, [r3, #32]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d110      	bne.n	800ed1e <rfalTransceiveTx+0x406>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 800ecfc:	4b25      	ldr	r3, [pc, #148]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ecfe:	799b      	ldrb	r3, [r3, #6]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d003      	beq.n	800ed0c <rfalTransceiveTx+0x3f4>
 800ed04:	2140      	movs	r1, #64	; 0x40
 800ed06:	2001      	movs	r0, #1
 800ed08:	f001 fe5f 	bl	80109ca <st25r3916WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 800ed0c:	f7ff fd1a 	bl	800e744 <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 800ed10:	4b20      	ldr	r3, [pc, #128]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 800ed16:	4b1f      	ldr	r3, [pc, #124]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ed18:	2200      	movs	r2, #0
 800ed1a:	751a      	strb	r2, [r3, #20]
                break;
 800ed1c:	e035      	b.n	800ed8a <rfalTransceiveTx+0x472>
            }
            
            rfalCheckEnableObsModeRx();
 800ed1e:	4b1d      	ldr	r3, [pc, #116]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ed20:	799b      	ldrb	r3, [r3, #6]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d008      	beq.n	800ed38 <rfalTransceiveTx+0x420>
 800ed26:	4b1b      	ldr	r3, [pc, #108]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ed28:	799b      	ldrb	r3, [r3, #6]
 800ed2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	4619      	mov	r1, r3
 800ed32:	2001      	movs	r0, #1
 800ed34:	f001 fe49 	bl	80109ca <st25r3916WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 800ed38:	4b16      	ldr	r3, [pc, #88]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ed3a:	2251      	movs	r2, #81	; 0x51
 800ed3c:	751a      	strb	r2, [r3, #20]
            break;
 800ed3e:	e024      	b.n	800ed8a <rfalTransceiveTx+0x472>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800ed40:	4b14      	ldr	r3, [pc, #80]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ed42:	8adb      	ldrh	r3, [r3, #22]
 800ed44:	2b02      	cmp	r3, #2
 800ed46:	d102      	bne.n	800ed4e <rfalTransceiveTx+0x436>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800ed48:	4b12      	ldr	r3, [pc, #72]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ed4a:	2208      	movs	r2, #8
 800ed4c:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800ed4e:	4b11      	ldr	r3, [pc, #68]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ed50:	799b      	ldrb	r3, [r3, #6]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d003      	beq.n	800ed5e <rfalTransceiveTx+0x446>
 800ed56:	2140      	movs	r1, #64	; 0x40
 800ed58:	2001      	movs	r0, #1
 800ed5a:	f001 fe36 	bl	80109ca <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800ed5e:	f7ff fcf1 	bl	800e744 <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800ed62:	4b0c      	ldr	r3, [pc, #48]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ed64:	2200      	movs	r2, #0
 800ed66:	751a      	strb	r2, [r3, #20]
            break;
 800ed68:	e00f      	b.n	800ed8a <rfalTransceiveTx+0x472>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800ed6a:	4b0a      	ldr	r3, [pc, #40]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ed6c:	2208      	movs	r2, #8
 800ed6e:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ed70:	4b08      	ldr	r3, [pc, #32]	; (800ed94 <rfalTransceiveTx+0x47c>)
 800ed72:	2213      	movs	r2, #19
 800ed74:	751a      	strb	r2, [r3, #20]
            break;
 800ed76:	e008      	b.n	800ed8a <rfalTransceiveTx+0x472>
                break;
 800ed78:	bf00      	nop
 800ed7a:	e006      	b.n	800ed8a <rfalTransceiveTx+0x472>
                   break;
 800ed7c:	bf00      	nop
 800ed7e:	e004      	b.n	800ed8a <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800ed80:	bf00      	nop
 800ed82:	e002      	b.n	800ed8a <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800ed84:	bf00      	nop
 800ed86:	e000      	b.n	800ed8a <rfalTransceiveTx+0x472>
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
 800ed88:	bf00      	nop
    }
}
 800ed8a:	bf00      	nop
 800ed8c:	3710      	adds	r7, #16
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bdb0      	pop	{r4, r5, r7, pc}
 800ed92:	bf00      	nop
 800ed94:	20000754 	.word	0x20000754
 800ed98:	200007bc 	.word	0x200007bc
 800ed9c:	200009c4 	.word	0x200009c4
 800eda0:	2000078a 	.word	0x2000078a

0800eda4 <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 800eda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eda6:	b089      	sub	sp, #36	; 0x24
 800eda8:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint16_t          tmp;
    uint16_t          aux;
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800edaa:	2300      	movs	r3, #0
 800edac:	607b      	str	r3, [r7, #4]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800edae:	4baf      	ldr	r3, [pc, #700]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800edb0:	7d1a      	ldrb	r2, [r3, #20]
 800edb2:	4bae      	ldr	r3, [pc, #696]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800edb4:	7d5b      	ldrb	r3, [r3, #21]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d003      	beq.n	800edc2 <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800edba:	4bac      	ldr	r3, [pc, #688]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800edbc:	7d1a      	ldrb	r2, [r3, #20]
 800edbe:	4bab      	ldr	r3, [pc, #684]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800edc0:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800edc2:	4baa      	ldr	r3, [pc, #680]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800edc4:	7d1b      	ldrb	r3, [r3, #20]
 800edc6:	3b51      	subs	r3, #81	; 0x51
 800edc8:	2b09      	cmp	r3, #9
 800edca:	f200 8339 	bhi.w	800f440 <rfalTransceiveRx+0x69c>
 800edce:	a201      	add	r2, pc, #4	; (adr r2, 800edd4 <rfalTransceiveRx+0x30>)
 800edd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd4:	0800edfd 	.word	0x0800edfd
 800edd8:	0800f3ad 	.word	0x0800f3ad
 800eddc:	0800ee35 	.word	0x0800ee35
 800ede0:	0800eed9 	.word	0x0800eed9
 800ede4:	0800f2f1 	.word	0x0800f2f1
 800ede8:	0800efb7 	.word	0x0800efb7
 800edec:	0800f0eb 	.word	0x0800f0eb
 800edf0:	0800f3f7 	.word	0x0800f3f7
 800edf4:	0800f2c9 	.word	0x0800f2c9
 800edf8:	0800f383 	.word	0x0800f383
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 800edfc:	4b9b      	ldr	r3, [pc, #620]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800edfe:	2200      	movs	r2, #0
 800ee00:	871a      	strh	r2, [r3, #56]	; 0x38
            gRFAL.fifo.bytesTotal     = 0;            /* Total bytes in FIFO will now be from Rx */
 800ee02:	4b9a      	ldr	r3, [pc, #616]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ee04:	2200      	movs	r2, #0
 800ee06:	86da      	strh	r2, [r3, #54]	; 0x36
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800ee08:	4b98      	ldr	r3, [pc, #608]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ee0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d003      	beq.n	800ee18 <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 800ee10:	4b96      	ldr	r3, [pc, #600]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ee12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee14:	2200      	movs	r2, #0
 800ee16:	801a      	strh	r2, [r3, #0]
            }
           
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 800ee18:	4b94      	ldr	r3, [pc, #592]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ee1a:	785b      	ldrb	r3, [r3, #1]
 800ee1c:	2b09      	cmp	r3, #9
 800ee1e:	d003      	beq.n	800ee28 <rfalTransceiveRx+0x84>
 800ee20:	4b92      	ldr	r3, [pc, #584]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ee22:	785b      	ldrb	r3, [r3, #1]
 800ee24:	2b0d      	cmp	r3, #13
 800ee26:	d101      	bne.n	800ee2c <rfalTransceiveRx+0x88>
 800ee28:	2252      	movs	r2, #82	; 0x52
 800ee2a:	e000      	b.n	800ee2e <rfalTransceiveRx+0x8a>
 800ee2c:	2253      	movs	r2, #83	; 0x53
 800ee2e:	4b8f      	ldr	r3, [pc, #572]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ee30:	751a      	strb	r2, [r3, #20]
            break;
 800ee32:	e315      	b.n	800f460 <rfalTransceiveRx+0x6bc>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
            
            /*******************************************************************************/
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_EOF) );
 800ee34:	f644 0020 	movw	r0, #18464	; 0x4820
 800ee38:	f002 f85e 	bl	8010ef8 <st25r3916GetInterrupt>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	f000 8303 	beq.w	800f44e <rfalTransceiveRx+0x6aa>
            {
                break;  /* No interrupt to process */
            }
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode) */
            if( ((irqs & ST25R3916_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00b      	beq.n	800ee6a <rfalTransceiveRx+0xc6>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f003 0320 	and.w	r3, r3, #32
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d106      	bne.n	800ee6a <rfalTransceiveRx+0xc6>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800ee5c:	4b83      	ldr	r3, [pc, #524]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ee5e:	2204      	movs	r2, #4
 800ee60:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ee62:	4b82      	ldr	r3, [pc, #520]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ee64:	225a      	movs	r2, #90	; 0x5a
 800ee66:	751a      	strb	r2, [r3, #20]
                break;
 800ee68:	e2fa      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d015      	beq.n	800eea0 <rfalTransceiveRx+0xfc>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f003 0320 	and.w	r3, r3, #32
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d110      	bne.n	800eea0 <rfalTransceiveRx+0xfc>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800ee7e:	4b7b      	ldr	r3, [pc, #492]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ee80:	785b      	ldrb	r3, [r3, #1]
 800ee82:	2b09      	cmp	r3, #9
 800ee84:	d003      	beq.n	800ee8e <rfalTransceiveRx+0xea>
 800ee86:	4b79      	ldr	r3, [pc, #484]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ee88:	785b      	ldrb	r3, [r3, #1]
 800ee8a:	2b0d      	cmp	r3, #13
 800ee8c:	d101      	bne.n	800ee92 <rfalTransceiveRx+0xee>
 800ee8e:	2204      	movs	r2, #4
 800ee90:	e000      	b.n	800ee94 <rfalTransceiveRx+0xf0>
 800ee92:	2225      	movs	r2, #37	; 0x25
 800ee94:	4b75      	ldr	r3, [pc, #468]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ee96:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ee98:	4b74      	ldr	r3, [pc, #464]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ee9a:	225a      	movs	r2, #90	; 0x5a
 800ee9c:	751a      	strb	r2, [r3, #20]
                break;
 800ee9e:	e2df      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RXS) != 0U )
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f003 0320 	and.w	r3, r3, #32
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d00f      	beq.n	800eeca <rfalTransceiveRx+0x126>
            {
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
                /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                /* Use a SW timer to handle an eventual missing RXE                            */
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800eeaa:	2032      	movs	r0, #50	; 0x32
 800eeac:	f7f5 fbc4 	bl	8004638 <timerCalculateTimer>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	4b6e      	ldr	r3, [pc, #440]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800eeb4:	641a      	str	r2, [r3, #64]	; 0x40
                /*******************************************************************************/
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800eeb6:	4b6d      	ldr	r3, [pc, #436]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800eeb8:	2254      	movs	r2, #84	; 0x54
 800eeba:	751a      	strb	r2, [r3, #20]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
                break;
            }
            
            /* remove NRE that might appear together (NRT EMV mode), and remove RXS, but keep EOF if present for next state */
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eec2:	f023 0320 	bic.w	r3, r3, #32
 800eec6:	607b      	str	r3, [r7, #4]
 800eec8:	e006      	b.n	800eed8 <rfalTransceiveRx+0x134>
                gRFAL.TxRx.status = ERR_IO;
 800eeca:	4b68      	ldr	r3, [pc, #416]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800eecc:	2203      	movs	r2, #3
 800eece:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800eed0:	4b66      	ldr	r3, [pc, #408]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800eed2:	225a      	movs	r2, #90	; 0x5a
 800eed4:	751a      	strb	r2, [r3, #20]
                break;
 800eed6:	e2c3      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* ST25R396 may indicate RXS without RXE afterwards, this happens rarely on    */
            /* corrupted frames.                                                           */
            /* SW timer is used to timeout upon a missing RXE                              */
            if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 800eed8:	4b64      	ldr	r3, [pc, #400]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800eeda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eedc:	4618      	mov	r0, r3
 800eede:	f7f5 fbb9 	bl	8004654 <timerIsExpired>
 800eee2:	4603      	mov	r3, r0
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d005      	beq.n	800eef4 <rfalTransceiveRx+0x150>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800eee8:	4b60      	ldr	r3, [pc, #384]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800eeea:	2209      	movs	r2, #9
 800eeec:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800eeee:	4b5f      	ldr	r3, [pc, #380]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800eef0:	225a      	movs	r2, #90	; 0x5a
 800eef2:	751a      	strb	r2, [r3, #20]
            }
            /*******************************************************************************/
            
            irqs |= st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_WU_F ) );
 800eef4:	485e      	ldr	r0, [pc, #376]	; (800f070 <rfalTransceiveRx+0x2cc>)
 800eef6:	f001 ffff 	bl	8010ef8 <st25r3916GetInterrupt>
 800eefa:	4602      	mov	r2, r0
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	4313      	orrs	r3, r2
 800ef00:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f000 82a4 	beq.w	800f452 <rfalTransceiveRx+0x6ae>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RX_REST) != 0U )
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f003 0302 	and.w	r3, r3, #2
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d02f      	beq.n	800ef74 <rfalTransceiveRx+0x1d0>
            {
                /* RX_REST indicates that Receiver has been reseted due to EMD, therefore a RXS + RXE should *
                 * follow if a good reception is followed within the valid initial timeout                   */
                
                /* Check whether NRT has expired already, if so signal a timeout */
                if( st25r3916GetInterrupt( ST25R3916_IRQ_MASK_NRE ) != 0U )
 800ef14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ef18:	f001 ffee 	bl	8010ef8 <st25r3916GetInterrupt>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d006      	beq.n	800ef30 <rfalTransceiveRx+0x18c>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800ef22:	4b52      	ldr	r3, [pc, #328]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ef24:	2204      	movs	r2, #4
 800ef26:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ef28:	4b50      	ldr	r3, [pc, #320]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ef2a:	225a      	movs	r2, #90	; 0x5a
 800ef2c:	751a      	strb	r2, [r3, #20]
                    break;
 800ef2e:	e297      	b.n	800f460 <rfalTransceiveRx+0x6bc>
                }
                if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0 ) )   /* MISRA 13.5 */
 800ef30:	2200      	movs	r2, #0
 800ef32:	2102      	movs	r1, #2
 800ef34:	2024      	movs	r0, #36	; 0x24
 800ef36:	f001 fe55 	bl	8010be4 <st25r3916CheckReg>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d006      	beq.n	800ef4e <rfalTransceiveRx+0x1aa>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800ef40:	4b4a      	ldr	r3, [pc, #296]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ef42:	2204      	movs	r2, #4
 800ef44:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ef46:	4b49      	ldr	r3, [pc, #292]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ef48:	225a      	movs	r2, #90	; 0x5a
 800ef4a:	751a      	strb	r2, [r3, #20]
                    break;
 800ef4c:	e288      	b.n	800f460 <rfalTransceiveRx+0x6bc>
                }
                
                /* Discard any previous RXS */
                st25r3916GetInterrupt( ST25R3916_IRQ_MASK_RXS );
 800ef4e:	2020      	movs	r0, #32
 800ef50:	f001 ffd2 	bl	8010ef8 <st25r3916GetInterrupt>
                
                /* Check whether a following reception has already started */
                if( st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_rx_act, ST25R3916_REG_AUX_DISPLAY_rx_act) )
 800ef54:	2204      	movs	r2, #4
 800ef56:	2104      	movs	r1, #4
 800ef58:	2031      	movs	r0, #49	; 0x31
 800ef5a:	f001 fe43 	bl	8010be4 <st25r3916CheckReg>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d003      	beq.n	800ef6c <rfalTransceiveRx+0x1c8>
                {
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800ef64:	4b41      	ldr	r3, [pc, #260]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ef66:	2254      	movs	r2, #84	; 0x54
 800ef68:	751a      	strb	r2, [r3, #20]
                    break;
 800ef6a:	e279      	b.n	800f460 <rfalTransceiveRx+0x6bc>
                }
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800ef6c:	4b3f      	ldr	r3, [pc, #252]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ef6e:	2253      	movs	r2, #83	; 0x53
 800ef70:	751a      	strb	r2, [r3, #20]
                break;
 800ef72:	e275      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXE) == 0U) )
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d008      	beq.n	800ef90 <rfalTransceiveRx+0x1ec>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f003 0310 	and.w	r3, r3, #16
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d103      	bne.n	800ef90 <rfalTransceiveRx+0x1ec>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 800ef88:	4b38      	ldr	r3, [pc, #224]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ef8a:	2255      	movs	r2, #85	; 0x55
 800ef8c:	751a      	strb	r2, [r3, #20]
                break;
 800ef8e:	e267      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            }
            
            /* Automatic responses allowed during TxRx only for the SENSF_REQ */
            if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d003      	beq.n	800efa2 <rfalTransceiveRx+0x1fe>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800ef9a:	4b34      	ldr	r3, [pc, #208]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800ef9c:	2253      	movs	r2, #83	; 0x53
 800ef9e:	751a      	strb	r2, [r3, #20]
                break;
 800efa0:	e25e      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            }
            
            /* After RXE retrieve and check for any error irqs */
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 800efa2:	4834      	ldr	r0, [pc, #208]	; (800f074 <rfalTransceiveRx+0x2d0>)
 800efa4:	f001 ffa8 	bl	8010ef8 <st25r3916GetInterrupt>
 800efa8:	4602      	mov	r2, r0
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4313      	orrs	r3, r2
 800efae:	607b      	str	r3, [r7, #4]
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800efb0:	4b2e      	ldr	r3, [pc, #184]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800efb2:	2256      	movs	r2, #86	; 0x56
 800efb4:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( (irqs & ST25R3916_IRQ_MASK_ERR1) != 0U )
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d008      	beq.n	800efd2 <rfalTransceiveRx+0x22e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800efc0:	4b2a      	ldr	r3, [pc, #168]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800efc2:	2209      	movs	r2, #9
 800efc4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800efc6:	4b29      	ldr	r3, [pc, #164]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800efc8:	2257      	movs	r2, #87	; 0x57
 800efca:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800efcc:	f7ff fb82 	bl	800e6d4 <rfalErrorHandling>
                break;
 800efd0:	e246      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            }
            /* Discard Soft Framing errors in AP2P and CE */
            else if( rfalIsModePassivePoll( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_ERR2) != 0U) )
 800efd2:	4b26      	ldr	r3, [pc, #152]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800efd4:	785b      	ldrb	r3, [r3, #1]
 800efd6:	2b09      	cmp	r3, #9
 800efd8:	d01d      	beq.n	800f016 <rfalTransceiveRx+0x272>
 800efda:	4b24      	ldr	r3, [pc, #144]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800efdc:	785b      	ldrb	r3, [r3, #1]
 800efde:	2b0d      	cmp	r3, #13
 800efe0:	d019      	beq.n	800f016 <rfalTransceiveRx+0x272>
 800efe2:	4b22      	ldr	r3, [pc, #136]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800efe4:	785b      	ldrb	r3, [r3, #1]
 800efe6:	2b0a      	cmp	r3, #10
 800efe8:	d015      	beq.n	800f016 <rfalTransceiveRx+0x272>
 800efea:	4b20      	ldr	r3, [pc, #128]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800efec:	785b      	ldrb	r3, [r3, #1]
 800efee:	2b0b      	cmp	r3, #11
 800eff0:	d011      	beq.n	800f016 <rfalTransceiveRx+0x272>
 800eff2:	4b1e      	ldr	r3, [pc, #120]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800eff4:	785b      	ldrb	r3, [r3, #1]
 800eff6:	2b0c      	cmp	r3, #12
 800eff8:	d00d      	beq.n	800f016 <rfalTransceiveRx+0x272>
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f000:	2b00      	cmp	r3, #0
 800f002:	d008      	beq.n	800f016 <rfalTransceiveRx+0x272>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800f004:	4b19      	ldr	r3, [pc, #100]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800f006:	2209      	movs	r2, #9
 800f008:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f00a:	4b18      	ldr	r3, [pc, #96]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800f00c:	2257      	movs	r2, #87	; 0x57
 800f00e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f010:	f7ff fb60 	bl	800e6d4 <rfalErrorHandling>
                break;
 800f014:	e224      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_PAR) != 0U )
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d008      	beq.n	800f032 <rfalTransceiveRx+0x28e>
            {
                gRFAL.TxRx.status = ERR_PAR;
 800f020:	4b12      	ldr	r3, [pc, #72]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800f022:	221b      	movs	r2, #27
 800f024:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f026:	4b11      	ldr	r3, [pc, #68]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800f028:	2257      	movs	r2, #87	; 0x57
 800f02a:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f02c:	f7ff fb52 	bl	800e6d4 <rfalErrorHandling>
                break;
 800f030:	e216      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_CRC) != 0U )
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d008      	beq.n	800f04e <rfalTransceiveRx+0x2aa>
            {
                gRFAL.TxRx.status = ERR_CRC;
 800f03c:	4b0b      	ldr	r3, [pc, #44]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800f03e:	2215      	movs	r2, #21
 800f040:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f042:	4b0a      	ldr	r3, [pc, #40]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800f044:	2257      	movs	r2, #87	; 0x57
 800f046:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f048:	f7ff fb44 	bl	800e6d4 <rfalErrorHandling>
                break;
 800f04c:	e208      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_COL) != 0U )
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f003 0304 	and.w	r3, r3, #4
 800f054:	2b00      	cmp	r3, #0
 800f056:	d00f      	beq.n	800f078 <rfalTransceiveRx+0x2d4>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 800f058:	4b04      	ldr	r3, [pc, #16]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800f05a:	221d      	movs	r2, #29
 800f05c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f05e:	4b03      	ldr	r3, [pc, #12]	; (800f06c <rfalTransceiveRx+0x2c8>)
 800f060:	2257      	movs	r2, #87	; 0x57
 800f062:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f064:	f7ff fb36 	bl	800e6d4 <rfalErrorHandling>
                break;
 800f068:	e1fa      	b.n	800f460 <rfalTransceiveRx+0x6bc>
 800f06a:	bf00      	nop
 800f06c:	20000754 	.word	0x20000754
 800f070:	08000852 	.word	0x08000852
 800f074:	00f00004 	.word	0x00f00004
            }
            else if( rfalIsModePassiveListen( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) )
 800f078:	4b9c      	ldr	r3, [pc, #624]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f07a:	785b      	ldrb	r3, [r3, #1]
 800f07c:	2b0a      	cmp	r3, #10
 800f07e:	d007      	beq.n	800f090 <rfalTransceiveRx+0x2ec>
 800f080:	4b9a      	ldr	r3, [pc, #616]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f082:	785b      	ldrb	r3, [r3, #1]
 800f084:	2b0b      	cmp	r3, #11
 800f086:	d003      	beq.n	800f090 <rfalTransceiveRx+0x2ec>
 800f088:	4b98      	ldr	r3, [pc, #608]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f08a:	785b      	ldrb	r3, [r3, #1]
 800f08c:	2b0c      	cmp	r3, #12
 800f08e:	d10b      	bne.n	800f0a8 <rfalTransceiveRx+0x304>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f096:	2b00      	cmp	r3, #0
 800f098:	d006      	beq.n	800f0a8 <rfalTransceiveRx+0x304>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 800f09a:	4b94      	ldr	r3, [pc, #592]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f09c:	2225      	movs	r2, #37	; 0x25
 800f09e:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f0a0:	4b92      	ldr	r3, [pc, #584]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f0a2:	225a      	movs	r2, #90	; 0x5a
 800f0a4:	751a      	strb	r2, [r3, #20]
                 break;
 800f0a6:	e1db      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f003 0310 	and.w	r3, r3, #16
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d014      	beq.n	800f0dc <rfalTransceiveRx+0x338>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 800f0b2:	f000 fa19 	bl	800f4e8 <rfalFIFOStatusIsIncompleteByte>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d003      	beq.n	800f0c4 <rfalTransceiveRx+0x320>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800f0bc:	4b8b      	ldr	r3, [pc, #556]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f0be:	2228      	movs	r2, #40	; 0x28
 800f0c0:	82da      	strh	r2, [r3, #22]
 800f0c2:	e007      	b.n	800f0d4 <rfalTransceiveRx+0x330>
                }
                /* Check if the reception ends missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 800f0c4:	f000 fa22 	bl	800f50c <rfalFIFOStatusIsMissingPar>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d002      	beq.n	800f0d4 <rfalTransceiveRx+0x330>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 800f0ce:	4b87      	ldr	r3, [pc, #540]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f0d0:	2209      	movs	r2, #9
 800f0d2:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 800f0d4:	4b85      	ldr	r3, [pc, #532]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f0d6:	2257      	movs	r2, #87	; 0x57
 800f0d8:	751a      	strb	r2, [r3, #20]
 800f0da:	e006      	b.n	800f0ea <rfalTransceiveRx+0x346>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800f0dc:	4b83      	ldr	r3, [pc, #524]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f0de:	2203      	movs	r2, #3
 800f0e0:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f0e2:	4b82      	ldr	r3, [pc, #520]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f0e4:	225a      	movs	r2, #90	; 0x5a
 800f0e6:	751a      	strb	r2, [r3, #20]
                break;
 800f0e8:	e1ba      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                      
            tmp = rfalFIFOStatusGetNumBytes();
 800f0ea:	f000 f9e1 	bl	800f4b0 <rfalFIFOStatusGetNumBytes>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	81fb      	strh	r3, [r7, #14]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 800f0f2:	4b7e      	ldr	r3, [pc, #504]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f6:	f003 0302 	and.w	r3, r3, #2
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d117      	bne.n	800f12e <rfalTransceiveRx+0x38a>
            {
                /* if received frame was bigger than CRC */
                if( (uint16_t)(gRFAL.fifo.bytesTotal + tmp) > 0U )
 800f0fe:	4b7b      	ldr	r3, [pc, #492]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f100:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f102:	89fb      	ldrh	r3, [r7, #14]
 800f104:	4413      	add	r3, r2
 800f106:	b29b      	uxth	r3, r3
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d010      	beq.n	800f12e <rfalTransceiveRx+0x38a>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > RFAL_CRC_LEN) )  
 800f10c:	89fb      	ldrh	r3, [r7, #14]
 800f10e:	2b02      	cmp	r3, #2
 800f110:	d903      	bls.n	800f11a <rfalTransceiveRx+0x376>
                    {
                        tmp -= RFAL_CRC_LEN;
 800f112:	89fb      	ldrh	r3, [r7, #14]
 800f114:	3b02      	subs	r3, #2
 800f116:	81fb      	strh	r3, [r7, #14]
 800f118:	e009      	b.n	800f12e <rfalTransceiveRx+0x38a>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > RFAL_CRC_LEN)                       
 800f11a:	4b74      	ldr	r3, [pc, #464]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f11c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d905      	bls.n	800f12e <rfalTransceiveRx+0x38a>
                    {                        
                        gRFAL.fifo.bytesTotal -= RFAL_CRC_LEN;
 800f122:	4b72      	ldr	r3, [pc, #456]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f126:	3b02      	subs	r3, #2
 800f128:	b29a      	uxth	r2, r3
 800f12a:	4b70      	ldr	r3, [pc, #448]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f12c:	86da      	strh	r2, [r3, #54]	; 0x36
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 800f12e:	4b6f      	ldr	r3, [pc, #444]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f130:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f132:	89fb      	ldrh	r3, [r7, #14]
 800f134:	4413      	add	r3, r2
 800f136:	b29a      	uxth	r2, r3
 800f138:	4b6c      	ldr	r3, [pc, #432]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f13a:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 800f13c:	4b6b      	ldr	r3, [pc, #428]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f13e:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f140:	4b6a      	ldr	r3, [pc, #424]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f142:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f144:	3307      	adds	r3, #7
 800f146:	08db      	lsrs	r3, r3, #3
 800f148:	b29b      	uxth	r3, r3
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d90f      	bls.n	800f16e <rfalTransceiveRx+0x3ca>
            {
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 800f14e:	4b67      	ldr	r3, [pc, #412]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f150:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f152:	3307      	adds	r3, #7
 800f154:	08db      	lsrs	r3, r3, #3
 800f156:	b29a      	uxth	r2, r3
 800f158:	4b64      	ldr	r3, [pc, #400]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f15a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800f15c:	1ad3      	subs	r3, r2, r3
 800f15e:	81fb      	strh	r3, [r7, #14]
                
                /* Transmission errors have precedence over buffer error */
                if( gRFAL.TxRx.status == ERR_BUSY )
 800f160:	4b62      	ldr	r3, [pc, #392]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f162:	8adb      	ldrh	r3, [r3, #22]
 800f164:	2b02      	cmp	r3, #2
 800f166:	d102      	bne.n	800f16e <rfalTransceiveRx+0x3ca>
                {
                    gRFAL.TxRx.status = ERR_NOMEM;
 800f168:	4b60      	ldr	r3, [pc, #384]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f16a:	2201      	movs	r2, #1
 800f16c:	82da      	strh	r2, [r3, #22]
                }
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 800f16e:	4b5f      	ldr	r3, [pc, #380]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f170:	6a1b      	ldr	r3, [r3, #32]
 800f172:	4a5e      	ldr	r2, [pc, #376]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f174:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800f176:	4413      	add	r3, r2
 800f178:	89fa      	ldrh	r2, [r7, #14]
 800f17a:	4611      	mov	r1, r2
 800f17c:	4618      	mov	r0, r3
 800f17e:	f001 fbcc 	bl	801091a <st25r3916ReadFifo>
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800f182:	4b5a      	ldr	r3, [pc, #360]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f186:	2b00      	cmp	r3, #0
 800f188:	d019      	beq.n	800f1be <rfalTransceiveRx+0x41a>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 800f18a:	4b58      	ldr	r3, [pc, #352]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f18c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f18e:	4b57      	ldr	r3, [pc, #348]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f192:	00d2      	lsls	r2, r2, #3
 800f194:	b292      	uxth	r2, r2
 800f196:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 800f198:	f000 f9a6 	bl	800f4e8 <rfalFIFOStatusIsIncompleteByte>
 800f19c:	4603      	mov	r3, r0
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00d      	beq.n	800f1be <rfalTransceiveRx+0x41a>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 800f1a2:	f000 f9c5 	bl	800f530 <rfalFIFOGetNumIncompleteBits>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	f1c3 0208 	rsb	r2, r3, #8
 800f1ac:	4b4f      	ldr	r3, [pc, #316]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1b0:	8819      	ldrh	r1, [r3, #0]
 800f1b2:	b292      	uxth	r2, r2
 800f1b4:	4b4d      	ldr	r3, [pc, #308]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1b8:	1a8a      	subs	r2, r1, r2
 800f1ba:	b292      	uxth	r2, r2
 800f1bc:	801a      	strh	r2, [r3, #0]
            }

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 800f1be:	4b4b      	ldr	r3, [pc, #300]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f1c0:	785b      	ldrb	r3, [r3, #1]
 800f1c2:	2b07      	cmp	r3, #7
 800f1c4:	d003      	beq.n	800f1ce <rfalTransceiveRx+0x42a>
 800f1c6:	4b49      	ldr	r3, [pc, #292]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f1c8:	785b      	ldrb	r3, [r3, #1]
 800f1ca:	2b08      	cmp	r3, #8
 800f1cc:	d165      	bne.n	800f29a <rfalTransceiveRx+0x4f6>
 800f1ce:	4b47      	ldr	r3, [pc, #284]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f1d0:	8adb      	ldrh	r3, [r3, #22]
 800f1d2:	2b02      	cmp	r3, #2
 800f1d4:	d161      	bne.n	800f29a <rfalTransceiveRx+0x4f6>
            {
                ReturnCode ret;
                uint16_t offset = 0; /* REMARK offset not currently used */
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	807b      	strh	r3, [r7, #2]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800f1da:	4b44      	ldr	r3, [pc, #272]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f1dc:	6a18      	ldr	r0, [r3, #32]
 800f1de:	4b43      	ldr	r3, [pc, #268]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f1e0:	8edc      	ldrh	r4, [r3, #54]	; 0x36
 800f1e2:	4b42      	ldr	r3, [pc, #264]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f1e4:	f8d3 527c 	ldr.w	r5, [r3, #636]	; 0x27c
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800f1e8:	4b40      	ldr	r3, [pc, #256]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f1ea:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 800f1ee:	3307      	adds	r3, #7
 800f1f0:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800f1f2:	b29e      	uxth	r6, r3
 800f1f4:	4b3d      	ldr	r3, [pc, #244]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f1f6:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f1fa:	4a3c      	ldr	r2, [pc, #240]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f1fc:	f8b2 2290 	ldrh.w	r2, [r2, #656]	; 0x290
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800f200:	493a      	ldr	r1, [pc, #232]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f202:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800f204:	2908      	cmp	r1, #8
 800f206:	bf0c      	ite	eq
 800f208:	2101      	moveq	r1, #1
 800f20a:	2100      	movne	r1, #0
 800f20c:	b2c9      	uxtb	r1, r1
 800f20e:	9103      	str	r1, [sp, #12]
 800f210:	9202      	str	r2, [sp, #8]
 800f212:	9301      	str	r3, [sp, #4]
 800f214:	1cbb      	adds	r3, r7, #2
 800f216:	9300      	str	r3, [sp, #0]
 800f218:	4633      	mov	r3, r6
 800f21a:	462a      	mov	r2, r5
 800f21c:	4621      	mov	r1, r4
 800f21e:	f7fe f8a3 	bl	800d368 <iso15693VICCDecode>
 800f222:	4603      	mov	r3, r0
 800f224:	817b      	strh	r3, [r7, #10]
                
                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 800f226:	897b      	ldrh	r3, [r7, #10]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d002      	beq.n	800f232 <rfalTransceiveRx+0x48e>
 800f22c:	897b      	ldrh	r3, [r7, #10]
 800f22e:	2b15      	cmp	r3, #21
 800f230:	d11f      	bne.n	800f272 <rfalTransceiveRx+0x4ce>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800f232:	4b2e      	ldr	r3, [pc, #184]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f234:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f238:	f003 0302 	and.w	r3, r3, #2
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d118      	bne.n	800f272 <rfalTransceiveRx+0x4ce>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 800f240:	4b2a      	ldr	r3, [pc, #168]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f242:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f246:	881b      	ldrh	r3, [r3, #0]
 800f248:	f003 0307 	and.w	r3, r3, #7
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d10f      	bne.n	800f272 <rfalTransceiveRx+0x4ce>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800f252:	4b26      	ldr	r3, [pc, #152]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f254:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f258:	881b      	ldrh	r3, [r3, #0]
 800f25a:	2b0f      	cmp	r3, #15
 800f25c:	d909      	bls.n	800f272 <rfalTransceiveRx+0x4ce>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800f25e:	4b23      	ldr	r3, [pc, #140]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f260:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f264:	881a      	ldrh	r2, [r3, #0]
 800f266:	4b21      	ldr	r3, [pc, #132]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f268:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f26c:	3a10      	subs	r2, #16
 800f26e:	b292      	uxth	r2, r2
 800f270:	801a      	strh	r2, [r3, #0]
                st25r3916WriteFifo(gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes( *gRFAL.nfcvData.origCtx.rxRcvdLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
            #endif
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800f272:	4a1e      	ldr	r2, [pc, #120]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f274:	4b1d      	ldr	r3, [pc, #116]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f276:	f102 0418 	add.w	r4, r2, #24
 800f27a:	f503 751d 	add.w	r5, r3, #628	; 0x274
 800f27e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f282:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800f28a:	897b      	ldrh	r3, [r7, #10]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d001      	beq.n	800f294 <rfalTransceiveRx+0x4f0>
 800f290:	897b      	ldrh	r3, [r7, #10]
 800f292:	e000      	b.n	800f296 <rfalTransceiveRx+0x4f2>
 800f294:	2302      	movs	r3, #2
 800f296:	4a15      	ldr	r2, [pc, #84]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f298:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 800f29a:	4b14      	ldr	r3, [pc, #80]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f29c:	8adb      	ldrh	r3, [r3, #22]
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	d003      	beq.n	800f2aa <rfalTransceiveRx+0x506>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 800f2a2:	4b12      	ldr	r3, [pc, #72]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f2a4:	225a      	movs	r2, #90	; 0x5a
 800f2a6:	751a      	strb	r2, [r3, #20]
                break;
 800f2a8:	e0da      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 800f2aa:	4b10      	ldr	r3, [pc, #64]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f2ac:	785b      	ldrb	r3, [r3, #1]
 800f2ae:	2b09      	cmp	r3, #9
 800f2b0:	d003      	beq.n	800f2ba <rfalTransceiveRx+0x516>
 800f2b2:	4b0e      	ldr	r3, [pc, #56]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f2b4:	785b      	ldrb	r3, [r3, #1]
 800f2b6:	2b0d      	cmp	r3, #13
 800f2b8:	d103      	bne.n	800f2c2 <rfalTransceiveRx+0x51e>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 800f2ba:	4b0c      	ldr	r3, [pc, #48]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f2bc:	2258      	movs	r2, #88	; 0x58
 800f2be:	751a      	strb	r2, [r3, #20]
                break;
 800f2c0:	e0ce      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800f2c2:	4b0a      	ldr	r3, [pc, #40]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f2c4:	2259      	movs	r2, #89	; 0x59
 800f2c6:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800f2c8:	4b08      	ldr	r3, [pc, #32]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f2ca:	799b      	ldrb	r3, [r3, #6]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d003      	beq.n	800f2d8 <rfalTransceiveRx+0x534>
 800f2d0:	2140      	movs	r1, #64	; 0x40
 800f2d2:	2001      	movs	r0, #1
 800f2d4:	f001 fb79 	bl	80109ca <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800f2d8:	f7ff fa34 	bl	800e744 <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 800f2dc:	4b03      	ldr	r3, [pc, #12]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f2de:	2200      	movs	r2, #0
 800f2e0:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 800f2e2:	4b02      	ldr	r3, [pc, #8]	; (800f2ec <rfalTransceiveRx+0x548>)
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	751a      	strb	r2, [r3, #20]
            break;
 800f2e8:	e0ba      	b.n	800f460 <rfalTransceiveRx+0x6bc>
 800f2ea:	bf00      	nop
 800f2ec:	20000754 	.word	0x20000754
            
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
            /* Use a SW timer to handle an eventual missing RXE                            */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800f2f0:	2032      	movs	r0, #50	; 0x32
 800f2f2:	f7f5 f9a1 	bl	8004638 <timerCalculateTimer>
 800f2f6:	4602      	mov	r2, r0
 800f2f8:	4b5b      	ldr	r3, [pc, #364]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f2fa:	641a      	str	r2, [r3, #64]	; 0x40
            /*******************************************************************************/
            
            tmp = rfalFIFOStatusGetNumBytes();
 800f2fc:	f000 f8d8 	bl	800f4b0 <rfalFIFOStatusGetNumBytes>
 800f300:	4603      	mov	r3, r0
 800f302:	81fb      	strh	r3, [r7, #14]
            gRFAL.fifo.bytesTotal += tmp;
 800f304:	4b58      	ldr	r3, [pc, #352]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f306:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f308:	89fb      	ldrh	r3, [r7, #14]
 800f30a:	4413      	add	r3, r2
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	4b56      	ldr	r3, [pc, #344]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f310:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800f312:	4b55      	ldr	r3, [pc, #340]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f314:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f316:	4b54      	ldr	r3, [pc, #336]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f318:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f31a:	3307      	adds	r3, #7
 800f31c:	08db      	lsrs	r3, r3, #3
 800f31e:	b29b      	uxth	r3, r3
 800f320:	429a      	cmp	r2, r3
 800f322:	d909      	bls.n	800f338 <rfalTransceiveRx+0x594>
 800f324:	4b50      	ldr	r3, [pc, #320]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f328:	3307      	adds	r3, #7
 800f32a:	08db      	lsrs	r3, r3, #3
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	4b4e      	ldr	r3, [pc, #312]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f330:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800f332:	1ad3      	subs	r3, r2, r3
 800f334:	b29b      	uxth	r3, r3
 800f336:	e000      	b.n	800f33a <rfalTransceiveRx+0x596>
 800f338:	89fb      	ldrh	r3, [r7, #14]
 800f33a:	81bb      	strh	r3, [r7, #12]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800f33c:	4b4a      	ldr	r3, [pc, #296]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f33e:	6a1b      	ldr	r3, [r3, #32]
 800f340:	4a49      	ldr	r2, [pc, #292]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f342:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800f344:	4413      	add	r3, r2
 800f346:	89ba      	ldrh	r2, [r7, #12]
 800f348:	4611      	mov	r1, r2
 800f34a:	4618      	mov	r0, r3
 800f34c:	f001 fae5 	bl	801091a <st25r3916ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 800f350:	4b45      	ldr	r3, [pc, #276]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f352:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800f354:	89bb      	ldrh	r3, [r7, #12]
 800f356:	4413      	add	r3, r2
 800f358:	b29a      	uxth	r2, r3
 800f35a:	4b43      	ldr	r3, [pc, #268]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f35c:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 800f35e:	89ba      	ldrh	r2, [r7, #12]
 800f360:	89fb      	ldrh	r3, [r7, #14]
 800f362:	429a      	cmp	r2, r3
 800f364:	d207      	bcs.n	800f376 <rfalTransceiveRx+0x5d2>
            {
                st25r3916ReadFifo( NULL, (tmp - aux) );
 800f366:	89fa      	ldrh	r2, [r7, #14]
 800f368:	89bb      	ldrh	r3, [r7, #12]
 800f36a:	1ad3      	subs	r3, r2, r3
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	4619      	mov	r1, r3
 800f370:	2000      	movs	r0, #0
 800f372:	f001 fad2 	bl	801091a <st25r3916ReadFifo>
            }
            
            rfalFIFOStatusClear();
 800f376:	f000 f88d 	bl	800f494 <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800f37a:	4b3b      	ldr	r3, [pc, #236]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f37c:	2254      	movs	r2, #84	; 0x54
 800f37e:	751a      	strb	r2, [r3, #20]
            break;
 800f380:	e06e      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800f382:	4b39      	ldr	r3, [pc, #228]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f384:	799b      	ldrb	r3, [r3, #6]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d003      	beq.n	800f392 <rfalTransceiveRx+0x5ee>
 800f38a:	2140      	movs	r1, #64	; 0x40
 800f38c:	2001      	movs	r0, #1
 800f38e:	f001 fb1c 	bl	80109ca <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800f392:	f7ff f9d7 	bl	800e744 <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800f396:	4b34      	ldr	r3, [pc, #208]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f398:	8adb      	ldrh	r3, [r3, #22]
 800f39a:	2b02      	cmp	r3, #2
 800f39c:	d102      	bne.n	800f3a4 <rfalTransceiveRx+0x600>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800f39e:	4b32      	ldr	r3, [pc, #200]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f3a0:	2208      	movs	r2, #8
 800f3a2:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800f3a4:	4b30      	ldr	r3, [pc, #192]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	751a      	strb	r2, [r3, #20]
            break;
 800f3aa:	e059      	b.n	800f460 <rfalTransceiveRx+0x6bc>
        
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_PPON2) );
 800f3ac:	482f      	ldr	r0, [pc, #188]	; (800f46c <rfalTransceiveRx+0x6c8>)
 800f3ae:	f001 fda3 	bl	8010ef8 <st25r3916GetInterrupt>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d04c      	beq.n	800f456 <rfalTransceiveRx+0x6b2>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d002      	beq.n	800f3cc <rfalTransceiveRx+0x628>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800f3c6:	4b28      	ldr	r3, [pc, #160]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f3c8:	2253      	movs	r2, #83	; 0x53
 800f3ca:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_NRE) != 0U )
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d005      	beq.n	800f3e2 <rfalTransceiveRx+0x63e>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800f3d6:	4b24      	ldr	r3, [pc, #144]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f3d8:	2204      	movs	r2, #4
 800f3da:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f3dc:	4b22      	ldr	r3, [pc, #136]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f3de:	225a      	movs	r2, #90	; 0x5a
 800f3e0:	751a      	strb	r2, [r3, #20]
            }
            if( (irqs & ST25R3916_IRQ_MASK_PPON2) != 0U )
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	da38      	bge.n	800f45a <rfalTransceiveRx+0x6b6>
            {
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 800f3e8:	4b1f      	ldr	r3, [pc, #124]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f3ea:	2225      	movs	r2, #37	; 0x25
 800f3ec:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f3ee:	4b1e      	ldr	r3, [pc, #120]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f3f0:	225a      	movs	r2, #90	; 0x5a
 800f3f2:	751a      	strb	r2, [r3, #20]
            }
            break;
 800f3f4:	e031      	b.n	800f45a <rfalTransceiveRx+0x6b6>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC) );
 800f3f6:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800f3fa:	f001 fd7d 	bl	8010ef8 <st25r3916GetInterrupt>
 800f3fe:	4603      	mov	r3, r0
 800f400:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d02a      	beq.n	800f45e <rfalTransceiveRx+0x6ba>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_CAT) != 0U )
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d003      	beq.n	800f41a <rfalTransceiveRx+0x676>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800f412:	4b15      	ldr	r3, [pc, #84]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f414:	2259      	movs	r2, #89	; 0x59
 800f416:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 800f418:	e022      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            else if( (irqs & ST25R3916_IRQ_MASK_CAC) != 0U )
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f420:	2b00      	cmp	r3, #0
 800f422:	d006      	beq.n	800f432 <rfalTransceiveRx+0x68e>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 800f424:	4b10      	ldr	r3, [pc, #64]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f426:	221d      	movs	r2, #29
 800f428:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f42a:	4b0f      	ldr	r3, [pc, #60]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f42c:	225a      	movs	r2, #90	; 0x5a
 800f42e:	751a      	strb	r2, [r3, #20]
            break;
 800f430:	e016      	b.n	800f460 <rfalTransceiveRx+0x6bc>
               gRFAL.TxRx.status = ERR_IO;
 800f432:	4b0d      	ldr	r3, [pc, #52]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f434:	2203      	movs	r2, #3
 800f436:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f438:	4b0b      	ldr	r3, [pc, #44]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f43a:	225a      	movs	r2, #90	; 0x5a
 800f43c:	751a      	strb	r2, [r3, #20]
            break;
 800f43e:	e00f      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800f440:	4b09      	ldr	r3, [pc, #36]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f442:	2208      	movs	r2, #8
 800f444:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f446:	4b08      	ldr	r3, [pc, #32]	; (800f468 <rfalTransceiveRx+0x6c4>)
 800f448:	225a      	movs	r2, #90	; 0x5a
 800f44a:	751a      	strb	r2, [r3, #20]
            break;           
 800f44c:	e008      	b.n	800f460 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800f44e:	bf00      	nop
 800f450:	e006      	b.n	800f460 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800f452:	bf00      	nop
 800f454:	e004      	b.n	800f460 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800f456:	bf00      	nop
 800f458:	e002      	b.n	800f460 <rfalTransceiveRx+0x6bc>
            break;
 800f45a:	bf00      	nop
 800f45c:	e000      	b.n	800f460 <rfalTransceiveRx+0x6bc>
               break;  /* No interrupt to process */
 800f45e:	bf00      	nop
    }    
}
 800f460:	bf00      	nop
 800f462:	3714      	adds	r7, #20
 800f464:	46bd      	mov	sp, r7
 800f466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f468:	20000754 	.word	0x20000754
 800f46c:	80005000 	.word	0x80005000

0800f470 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 800f470:	b580      	push	{r7, lr}
 800f472:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800f474:	4b05      	ldr	r3, [pc, #20]	; (800f48c <rfalFIFOStatusUpdate+0x1c>)
 800f476:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f47a:	2bff      	cmp	r3, #255	; 0xff
 800f47c:	d104      	bne.n	800f488 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3916ReadMultipleRegisters( ST25R3916_REG_FIFO_STATUS1, gRFAL.fifo.status, ST25R3916_FIFO_STATUS_LEN );
 800f47e:	2202      	movs	r2, #2
 800f480:	4903      	ldr	r1, [pc, #12]	; (800f490 <rfalFIFOStatusUpdate+0x20>)
 800f482:	201e      	movs	r0, #30
 800f484:	f001 f9af 	bl	80107e6 <st25r3916ReadMultipleRegisters>
    }
}
 800f488:	bf00      	nop
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	20000754 	.word	0x20000754
 800f490:	2000078e 	.word	0x2000078e

0800f494 <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 800f494:	b480      	push	{r7}
 800f496:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800f498:	4b04      	ldr	r3, [pc, #16]	; (800f4ac <rfalFIFOStatusClear+0x18>)
 800f49a:	22ff      	movs	r2, #255	; 0xff
 800f49c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 800f4a0:	bf00      	nop
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	20000754 	.word	0x20000754

0800f4b0 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint16_t rfalFIFOStatusGetNumBytes( void )
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
    uint16_t result;
    
    rfalFIFOStatusUpdate();
 800f4b6:	f7ff ffdb 	bl	800f470 <rfalFIFOStatusUpdate>
    
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 800f4ba:	4b0a      	ldr	r3, [pc, #40]	; (800f4e4 <rfalFIFOStatusGetNumBytes+0x34>)
 800f4bc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f4c0:	099b      	lsrs	r3, r3, #6
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	b29b      	uxth	r3, r3
 800f4c6:	021b      	lsls	r3, r3, #8
 800f4c8:	80fb      	strh	r3, [r7, #6]
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 800f4ca:	4b06      	ldr	r3, [pc, #24]	; (800f4e4 <rfalFIFOStatusGetNumBytes+0x34>)
 800f4cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f4d0:	b29a      	uxth	r2, r3
 800f4d2:	88fb      	ldrh	r3, [r7, #6]
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	80fb      	strh	r3, [r7, #6]
    return result;
 800f4d8:	88fb      	ldrh	r3, [r7, #6]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20000754 	.word	0x20000754

0800f4e8 <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f4ec:	f7ff ffc0 	bl	800f470 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 800f4f0:	4b05      	ldr	r3, [pc, #20]	; (800f508 <rfalFIFOStatusIsIncompleteByte+0x20>)
 800f4f2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f4f6:	f003 030e 	and.w	r3, r3, #14
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	bf14      	ite	ne
 800f4fe:	2301      	movne	r3, #1
 800f500:	2300      	moveq	r3, #0
 800f502:	b2db      	uxtb	r3, r3
}
 800f504:	4618      	mov	r0, r3
 800f506:	bd80      	pop	{r7, pc}
 800f508:	20000754 	.word	0x20000754

0800f50c <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f510:	f7ff ffae 	bl	800f470 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_np_lb) != 0U);
 800f514:	4b05      	ldr	r3, [pc, #20]	; (800f52c <rfalFIFOStatusIsMissingPar+0x20>)
 800f516:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f51a:	f003 0301 	and.w	r3, r3, #1
 800f51e:	2b00      	cmp	r3, #0
 800f520:	bf14      	ite	ne
 800f522:	2301      	movne	r3, #1
 800f524:	2300      	moveq	r3, #0
 800f526:	b2db      	uxtb	r3, r3
}
 800f528:	4618      	mov	r0, r3
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	20000754 	.word	0x20000754

0800f530 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 800f530:	b580      	push	{r7, lr}
 800f532:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f534:	f7ff ff9c 	bl	800f470 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 800f538:	4b04      	ldr	r3, [pc, #16]	; (800f54c <rfalFIFOGetNumIncompleteBits+0x1c>)
 800f53a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f53e:	085b      	lsrs	r3, r3, #1
 800f540:	b2db      	uxtb	r3, r3
 800f542:	f003 0307 	and.w	r3, r3, #7
 800f546:	b2db      	uxtb	r3, r3
}
 800f548:	4618      	mov	r0, r3
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	20000754 	.word	0x20000754

0800f550 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b08c      	sub	sp, #48	; 0x30
 800f554:	af00      	add	r7, sp, #0
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	607a      	str	r2, [r7, #4]
 800f55a:	461a      	mov	r2, r3
 800f55c:	460b      	mov	r3, r1
 800f55e:	72fb      	strb	r3, [r7, #11]
 800f560:	4613      	mov	r3, r2
 800f562:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800f564:	4b55      	ldr	r3, [pc, #340]	; (800f6bc <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d903      	bls.n	800f574 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 800f56c:	4b53      	ldr	r3, [pc, #332]	; (800f6bc <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f56e:	785b      	ldrb	r3, [r3, #1]
 800f570:	2b07      	cmp	r3, #7
 800f572:	d001      	beq.n	800f578 <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 800f574:	2321      	movs	r3, #33	; 0x21
 800f576:	e09d      	b.n	800f6b4 <rfalISO15693TransceiveAnticollisionFrame+0x164>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800f578:	f241 0003 	movw	r0, #4099	; 0x1003
 800f57c:	f7fd fbf0 	bl	800cd60 <rfalSetAnalogConfig>
    
    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800f580:	4b4e      	ldr	r3, [pc, #312]	; (800f6bc <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f582:	2210      	movs	r2, #16
 800f584:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800f588:	7afb      	ldrb	r3, [r7, #11]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d101      	bne.n	800f592 <rfalISO15693TransceiveAnticollisionFrame+0x42>
 800f58e:	220b      	movs	r2, #11
 800f590:	e000      	b.n	800f594 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 800f592:	220a      	movs	r2, #10
 800f594:	7afb      	ldrb	r3, [r7, #11]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d101      	bne.n	800f59e <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 800f59a:	2340      	movs	r3, #64	; 0x40
 800f59c:	e000      	b.n	800f5a0 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 800f59e:	2300      	movs	r3, #0
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 800f5a8:	7afb      	ldrb	r3, [r7, #11]
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	00db      	lsls	r3, r3, #3
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 800f5b6:	7abb      	ldrb	r3, [r7, #10]
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	00db      	lsls	r3, r3, #3
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 800f5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c2:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 800f5c4:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800f5c8:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 800f5ca:	f107 0310 	add.w	r3, r7, #16
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fe fe2e 	bl	800e230 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 800f5d4:	f7fe ffbf 	bl	800e556 <rfalTransceiveRunBlockingTx>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 800f5dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d103      	bne.n	800f5ea <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 800f5e2:	f7fe ffd5 	bl	800e590 <rfalTransceiveBlockingRx>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Check if a Transmission error and received data is less then expected */
    if( ((ret == ERR_RF_COLLISION) || (ret == ERR_CRC) || (ret == ERR_FRAMING)) && (rfalConvBitsToBytes(*ctx.rxRcvdLen) < RFAL_ISO15693_INV_RES_LEN) )
 800f5ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5ec:	2b1d      	cmp	r3, #29
 800f5ee:	d005      	beq.n	800f5fc <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800f5f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5f2:	2b15      	cmp	r3, #21
 800f5f4:	d002      	beq.n	800f5fc <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800f5f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5f8:	2b09      	cmp	r3, #9
 800f5fa:	d112      	bne.n	800f622 <rfalISO15693TransceiveAnticollisionFrame+0xd2>
 800f5fc:	6a3b      	ldr	r3, [r7, #32]
 800f5fe:	881b      	ldrh	r3, [r3, #0]
 800f600:	3307      	adds	r3, #7
 800f602:	08db      	lsrs	r3, r3, #3
 800f604:	b29b      	uxth	r3, r3
 800f606:	2b0b      	cmp	r3, #11
 800f608:	d80b      	bhi.n	800f622 <rfalISO15693TransceiveAnticollisionFrame+0xd2>
    {
        /* If INVENTORY_RES is shorter than expected, tag is still modulating *
         * Ensure that response is complete before next frame                 */
        platformDelay( (uint8_t)( (RFAL_ISO15693_INV_RES_LEN - rfalConvBitsToBytes(*ctx.rxRcvdLen)) / ((RFAL_ISO15693_INV_RES_LEN / RFAL_ISO15693_INV_RES_DUR)+1U) ));
 800f60a:	6a3b      	ldr	r3, [r7, #32]
 800f60c:	881b      	ldrh	r3, [r3, #0]
 800f60e:	3307      	adds	r3, #7
 800f610:	08db      	lsrs	r3, r3, #3
 800f612:	b29b      	uxth	r3, r3
 800f614:	f1c3 030c 	rsb	r3, r3, #12
 800f618:	089b      	lsrs	r3, r3, #2
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7f5 ff4b 	bl	80054b8 <HAL_Delay>
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 800f622:	4b26      	ldr	r3, [pc, #152]	; (800f6bc <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f624:	789b      	ldrb	r3, [r3, #2]
 800f626:	2bea      	cmp	r3, #234	; 0xea
 800f628:	d90c      	bls.n	800f644 <rfalISO15693TransceiveAnticollisionFrame+0xf4>
 800f62a:	4b24      	ldr	r3, [pc, #144]	; (800f6bc <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f62c:	789b      	ldrb	r3, [r3, #2]
 800f62e:	b29b      	uxth	r3, r3
 800f630:	011b      	lsls	r3, r3, #4
 800f632:	b29b      	uxth	r3, r3
 800f634:	b2db      	uxtb	r3, r3
 800f636:	b29b      	uxth	r3, r3
 800f638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f63c:	f043 0301 	orr.w	r3, r3, #1
 800f640:	b29b      	uxth	r3, r3
 800f642:	e00d      	b.n	800f660 <rfalISO15693TransceiveAnticollisionFrame+0x110>
 800f644:	4b1d      	ldr	r3, [pc, #116]	; (800f6bc <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f646:	789b      	ldrb	r3, [r3, #2]
 800f648:	b29b      	uxth	r3, r3
 800f64a:	3301      	adds	r3, #1
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	011b      	lsls	r3, r3, #4
 800f650:	b29b      	uxth	r3, r3
 800f652:	b2db      	uxtb	r3, r3
 800f654:	b29b      	uxth	r3, r3
 800f656:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f65a:	f043 0301 	orr.w	r3, r3, #1
 800f65e:	b29b      	uxth	r3, r3
 800f660:	4618      	mov	r0, r3
 800f662:	f7fd fb7d 	bl	800cd60 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 800f666:	4b15      	ldr	r3, [pc, #84]	; (800f6bc <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f668:	78db      	ldrb	r3, [r3, #3]
 800f66a:	2bea      	cmp	r3, #234	; 0xea
 800f66c:	d90c      	bls.n	800f688 <rfalISO15693TransceiveAnticollisionFrame+0x138>
 800f66e:	4b13      	ldr	r3, [pc, #76]	; (800f6bc <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f670:	78db      	ldrb	r3, [r3, #3]
 800f672:	b29b      	uxth	r3, r3
 800f674:	011b      	lsls	r3, r3, #4
 800f676:	b29b      	uxth	r3, r3
 800f678:	b2db      	uxtb	r3, r3
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f680:	f043 0302 	orr.w	r3, r3, #2
 800f684:	b29b      	uxth	r3, r3
 800f686:	e00d      	b.n	800f6a4 <rfalISO15693TransceiveAnticollisionFrame+0x154>
 800f688:	4b0c      	ldr	r3, [pc, #48]	; (800f6bc <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f68a:	78db      	ldrb	r3, [r3, #3]
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	3301      	adds	r3, #1
 800f690:	b29b      	uxth	r3, r3
 800f692:	011b      	lsls	r3, r3, #4
 800f694:	b29b      	uxth	r3, r3
 800f696:	b2db      	uxtb	r3, r3
 800f698:	b29b      	uxth	r3, r3
 800f69a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f69e:	f043 0302 	orr.w	r3, r3, #2
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7fd fb5b 	bl	800cd60 <rfalSetAnalogConfig>
    
    gRFAL.nfcvData.ignoreBits = 0;
 800f6aa:	4b04      	ldr	r3, [pc, #16]	; (800f6bc <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
    return ret;
 800f6b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3730      	adds	r7, #48	; 0x30
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	20000754 	.word	0x20000754

0800f6c0 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b088      	sub	sp, #32
 800f6c4:	af02      	add	r7, sp, #8
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	607a      	str	r2, [r7, #4]
 800f6cc:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 800f6ce:	7afa      	ldrb	r2, [r7, #11]
 800f6d0:	f107 0017 	add.w	r0, r7, #23
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	9300      	str	r3, [sp, #0]
 800f6d8:	4613      	mov	r3, r2
 800f6da:	68fa      	ldr	r2, [r7, #12]
 800f6dc:	2100      	movs	r1, #0
 800f6de:	f7ff ff37 	bl	800f550 <rfalISO15693TransceiveAnticollisionFrame>
 800f6e2:	4603      	mov	r3, r0
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3718      	adds	r7, #24
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	af00      	add	r7, sp, #0
    return st25r3916IsExtFieldOn();
 800f6f0:	2240      	movs	r2, #64	; 0x40
 800f6f2:	2140      	movs	r1, #64	; 0x40
 800f6f4:	2031      	movs	r0, #49	; 0x31
 800f6f6:	f001 fa75 	bl	8010be4 <st25r3916CheckReg>
 800f6fa:	4603      	mov	r3, r0
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <rfalWakeUpModeHasWoke>:
}


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 800f700:	b480      	push	{r7}
 800f702:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 800f704:	4b06      	ldr	r3, [pc, #24]	; (800f720 <rfalWakeUpModeHasWoke+0x20>)
 800f706:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f70a:	2b01      	cmp	r3, #1
 800f70c:	bf8c      	ite	hi
 800f70e:	2301      	movhi	r3, #1
 800f710:	2300      	movls	r3, #0
 800f712:	b2db      	uxtb	r3, r3
}
 800f714:	4618      	mov	r0, r3
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	20000754 	.word	0x20000754

0800f724 <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
    uint32_t irqs;
    uint8_t  reg;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 800f72a:	4b6a      	ldr	r3, [pc, #424]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	2b05      	cmp	r3, #5
 800f730:	f040 80c6 	bne.w	800f8c0 <rfalRunWakeUpModeWorker+0x19c>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 800f734:	4b67      	ldr	r3, [pc, #412]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f736:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f73a:	3b01      	subs	r3, #1
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	f200 80c1 	bhi.w	800f8c4 <rfalRunWakeUpModeWorker+0x1a0>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP ) );
 800f742:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800f746:	f001 fbd7 	bl	8010ef8 <st25r3916GetInterrupt>
 800f74a:	6078      	str	r0, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f000 80ba 	beq.w	800f8c8 <rfalRunWakeUpModeWorker+0x1a4>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3916_IRQ_MASK_WAM) != 0U)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d008      	beq.n	800f770 <rfalRunWakeUpModeWorker+0x4c>
            {
                st25r3916ReadRegister( ST25R3916_REG_AMPLITUDE_MEASURE_RESULT, &reg );
 800f75e:	1cfb      	adds	r3, r7, #3
 800f760:	4619      	mov	r1, r3
 800f762:	2036      	movs	r0, #54	; 0x36
 800f764:	f001 f82e 	bl	80107c4 <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800f768:	4b5a      	ldr	r3, [pc, #360]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f76a:	2202      	movs	r2, #2
 800f76c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WPH) != 0U)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f776:	2b00      	cmp	r3, #0
 800f778:	d008      	beq.n	800f78c <rfalRunWakeUpModeWorker+0x68>
            {
                st25r3916ReadRegister( ST25R3916_REG_PHASE_MEASURE_RESULT, &reg );
 800f77a:	1cfb      	adds	r3, r7, #3
 800f77c:	4619      	mov	r1, r3
 800f77e:	203a      	movs	r0, #58	; 0x3a
 800f780:	f001 f820 	bl	80107c4 <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800f784:	4b53      	ldr	r3, [pc, #332]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f786:	2202      	movs	r2, #2
 800f788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WCAP) != 0U)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f792:	2b00      	cmp	r3, #0
 800f794:	d008      	beq.n	800f7a8 <rfalRunWakeUpModeWorker+0x84>
            {
                st25r3916ReadRegister( ST25R3916_REG_CAPACITANCE_MEASURE_RESULT, &reg );
 800f796:	1cfb      	adds	r3, r7, #3
 800f798:	4619      	mov	r1, r3
 800f79a:	203e      	movs	r0, #62	; 0x3e
 800f79c:	f001 f812 	bl	80107c4 <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;                
 800f7a0:	4b4c      	ldr	r3, [pc, #304]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f7a2:	2202      	movs	r2, #2
 800f7a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WT) != 0U)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	f000 808c 	beq.w	800f8cc <rfalRunWakeUpModeWorker+0x1a8>
            {
                /*******************************************************************************/
                if( gRFAL.wum.cfg.swTagDetect )
 800f7b4:	4b47      	ldr	r3, [pc, #284]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f7b6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f000 8086 	beq.w	800f8cc <rfalRunWakeUpModeWorker+0x1a8>
                {
                    /* Enable Ready mode */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), (ST25R3916_REG_OP_CONTROL_en) );
 800f7c0:	2280      	movs	r2, #128	; 0x80
 800f7c2:	2184      	movs	r1, #132	; 0x84
 800f7c4:	2002      	movs	r0, #2
 800f7c6:	f001 f989 	bl	8010adc <st25r3916ChangeRegisterBits>
                    platformDelay( RFAL_ST25R3916_AAT_SETTLE_ON );
 800f7ca:	2005      	movs	r0, #5
 800f7cc:	f7f5 fe74 	bl	80054b8 <HAL_Delay>
                    
                    
                    if( gRFAL.wum.cfg.indAmp.enabled )
 800f7d0:	4b40      	ldr	r3, [pc, #256]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f7d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d020      	beq.n	800f81c <rfalRunWakeUpModeWorker+0xf8>
                    {
                        st25r3916MeasureAmplitude( &reg );
 800f7da:	1cfb      	adds	r3, r7, #3
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f000 fa52 	bl	800fc86 <st25r3916MeasureAmplitude>
                        if( (reg >= (gRFAL.wum.cfg.indAmp.reference + gRFAL.wum.cfg.indAmp.delta)) || ( reg <= (gRFAL.wum.cfg.indAmp.reference - gRFAL.wum.cfg.indAmp.delta)) )
 800f7e2:	78fb      	ldrb	r3, [r7, #3]
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	4b3b      	ldr	r3, [pc, #236]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f7e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	4b39      	ldr	r3, [pc, #228]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f7f0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f7f4:	440b      	add	r3, r1
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	da0b      	bge.n	800f812 <rfalRunWakeUpModeWorker+0xee>
 800f7fa:	78fb      	ldrb	r3, [r7, #3]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	4b35      	ldr	r3, [pc, #212]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f800:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800f804:	4619      	mov	r1, r3
 800f806:	4b33      	ldr	r3, [pc, #204]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f808:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f80c:	1acb      	subs	r3, r1, r3
 800f80e:	429a      	cmp	r2, r3
 800f810:	dc04      	bgt.n	800f81c <rfalRunWakeUpModeWorker+0xf8>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800f812:	4b30      	ldr	r3, [pc, #192]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f814:	2202      	movs	r2, #2
 800f816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            break;
 800f81a:	e058      	b.n	800f8ce <rfalRunWakeUpModeWorker+0x1aa>
                        }
                    }
                    
                    if( gRFAL.wum.cfg.indPha.enabled )
 800f81c:	4b2d      	ldr	r3, [pc, #180]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f81e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800f822:	2b00      	cmp	r3, #0
 800f824:	d020      	beq.n	800f868 <rfalRunWakeUpModeWorker+0x144>
                    {
                        st25r3916MeasurePhase( &reg );
 800f826:	1cfb      	adds	r3, r7, #3
 800f828:	4618      	mov	r0, r3
 800f82a:	f000 fa3b 	bl	800fca4 <st25r3916MeasurePhase>
                        if( (reg >= (gRFAL.wum.cfg.indPha.reference + gRFAL.wum.cfg.indPha.delta)) || ( reg <= (gRFAL.wum.cfg.indPha.reference - gRFAL.wum.cfg.indPha.delta)) )
 800f82e:	78fb      	ldrb	r3, [r7, #3]
 800f830:	461a      	mov	r2, r3
 800f832:	4b28      	ldr	r3, [pc, #160]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f834:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f838:	4619      	mov	r1, r3
 800f83a:	4b26      	ldr	r3, [pc, #152]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f83c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800f840:	440b      	add	r3, r1
 800f842:	429a      	cmp	r2, r3
 800f844:	da0b      	bge.n	800f85e <rfalRunWakeUpModeWorker+0x13a>
 800f846:	78fb      	ldrb	r3, [r7, #3]
 800f848:	461a      	mov	r2, r3
 800f84a:	4b22      	ldr	r3, [pc, #136]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f84c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f850:	4619      	mov	r1, r3
 800f852:	4b20      	ldr	r3, [pc, #128]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f854:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800f858:	1acb      	subs	r3, r1, r3
 800f85a:	429a      	cmp	r2, r3
 800f85c:	dc04      	bgt.n	800f868 <rfalRunWakeUpModeWorker+0x144>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800f85e:	4b1d      	ldr	r3, [pc, #116]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f860:	2202      	movs	r2, #2
 800f862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            break;
 800f866:	e032      	b.n	800f8ce <rfalRunWakeUpModeWorker+0x1aa>
                        }
                    }
                    
                    if( gRFAL.wum.cfg.cap.enabled )
 800f868:	4b1a      	ldr	r3, [pc, #104]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f86a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d020      	beq.n	800f8b4 <rfalRunWakeUpModeWorker+0x190>
                    {
                        st25r3916MeasureCapacitance( &reg );
 800f872:	1cfb      	adds	r3, r7, #3
 800f874:	4618      	mov	r0, r3
 800f876:	f000 fa24 	bl	800fcc2 <st25r3916MeasureCapacitance>
                        if( (reg >= (gRFAL.wum.cfg.cap.reference + gRFAL.wum.cfg.cap.delta)) || ( reg <= (gRFAL.wum.cfg.cap.reference - gRFAL.wum.cfg.cap.delta)) )
 800f87a:	78fb      	ldrb	r3, [r7, #3]
 800f87c:	461a      	mov	r2, r3
 800f87e:	4b15      	ldr	r3, [pc, #84]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f880:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800f884:	4619      	mov	r1, r3
 800f886:	4b13      	ldr	r3, [pc, #76]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f888:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800f88c:	440b      	add	r3, r1
 800f88e:	429a      	cmp	r2, r3
 800f890:	da0b      	bge.n	800f8aa <rfalRunWakeUpModeWorker+0x186>
 800f892:	78fb      	ldrb	r3, [r7, #3]
 800f894:	461a      	mov	r2, r3
 800f896:	4b0f      	ldr	r3, [pc, #60]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f898:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800f89c:	4619      	mov	r1, r3
 800f89e:	4b0d      	ldr	r3, [pc, #52]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f8a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800f8a4:	1acb      	subs	r3, r1, r3
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	dc04      	bgt.n	800f8b4 <rfalRunWakeUpModeWorker+0x190>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800f8aa:	4b0a      	ldr	r3, [pc, #40]	; (800f8d4 <rfalRunWakeUpModeWorker+0x1b0>)
 800f8ac:	2202      	movs	r2, #2
 800f8ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            break;
 800f8b2:	e00c      	b.n	800f8ce <rfalRunWakeUpModeWorker+0x1aa>
                        }
                    }
                    
                    /* Re-Enable low power Wake-Up mode for wto to trigger another measurement(s) */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), (ST25R3916_REG_OP_CONTROL_wu) );
 800f8b4:	2204      	movs	r2, #4
 800f8b6:	2184      	movs	r1, #132	; 0x84
 800f8b8:	2002      	movs	r0, #2
 800f8ba:	f001 f90f 	bl	8010adc <st25r3916ChangeRegisterBits>
                }
            }
            break;
 800f8be:	e005      	b.n	800f8cc <rfalRunWakeUpModeWorker+0x1a8>
        return;
 800f8c0:	bf00      	nop
 800f8c2:	e004      	b.n	800f8ce <rfalRunWakeUpModeWorker+0x1aa>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800f8c4:	bf00      	nop
 800f8c6:	e002      	b.n	800f8ce <rfalRunWakeUpModeWorker+0x1aa>
               break;  /* No interrupt to process */
 800f8c8:	bf00      	nop
 800f8ca:	e000      	b.n	800f8ce <rfalRunWakeUpModeWorker+0x1aa>
            break;
 800f8cc:	bf00      	nop
    }
}
 800f8ce:	3708      	adds	r7, #8
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	20000754 	.word	0x20000754

0800f8d8 <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	af00      	add	r7, sp, #0
    if( gRFAL.wum.state == RFAL_WUM_STATE_NOT_INIT )
 800f8dc:	4b0f      	ldr	r3, [pc, #60]	; (800f91c <rfalWakeUpModeStop+0x44>)
 800f8de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d101      	bne.n	800f8ea <rfalWakeUpModeStop+0x12>
    {
        return ERR_WRONG_STATE;
 800f8e6:	2321      	movs	r3, #33	; 0x21
 800f8e8:	e016      	b.n	800f918 <rfalWakeUpModeStop+0x40>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800f8ea:	4b0c      	ldr	r3, [pc, #48]	; (800f91c <rfalWakeUpModeStop+0x44>)
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    /* Disable Wake-Up Mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800f8f2:	2104      	movs	r1, #4
 800f8f4:	2002      	movs	r0, #2
 800f8f6:	f001 f88d 	bl	8010a14 <st25r3916ClrRegisterBits>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP) );
 800f8fa:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800f8fe:	f001 fb3f 	bl	8010f80 <st25r3916DisableInterrupts>
    
    /* Re-Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 800f902:	2203      	movs	r2, #3
 800f904:	2103      	movs	r1, #3
 800f906:	2002      	movs	r0, #2
 800f908:	f001 f8e8 	bl	8010adc <st25r3916ChangeRegisterBits>
    
    /* Re-Enable the Oscillator */
    st25r3916OscOn();
 800f90c:	f000 f916 	bl	800fb3c <st25r3916OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 800f910:	2005      	movs	r0, #5
 800f912:	f7fd fa25 	bl	800cd60 <rfalSetAnalogConfig>
      
    return ERR_NONE;
 800f916:	2300      	movs	r3, #0
}
 800f918:	4618      	mov	r0, r3
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	20000754 	.word	0x20000754

0800f920 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	4603      	mov	r3, r0
 800f928:	80fb      	strh	r3, [r7, #6]
 800f92a:	460b      	mov	r3, r1
 800f92c:	717b      	strb	r3, [r7, #5]
 800f92e:	4613      	mov	r3, r2
 800f930:	713b      	strb	r3, [r7, #4]
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 800f932:	88fb      	ldrh	r3, [r7, #6]
 800f934:	b2db      	uxtb	r3, r3
 800f936:	4618      	mov	r0, r3
 800f938:	f001 f974 	bl	8010c24 <st25r3916IsRegValid>
 800f93c:	4603      	mov	r3, r0
 800f93e:	f083 0301 	eor.w	r3, r3, #1
 800f942:	b2db      	uxtb	r3, r3
 800f944:	2b00      	cmp	r3, #0
 800f946:	d001      	beq.n	800f94c <rfalChipChangeRegBits+0x2c>
    {
        return ERR_PARAM;
 800f948:	2307      	movs	r3, #7
 800f94a:	e007      	b.n	800f95c <rfalChipChangeRegBits+0x3c>
    }
    
    return st25r3916ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 800f94c:	88fb      	ldrh	r3, [r7, #6]
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	793a      	ldrb	r2, [r7, #4]
 800f952:	7979      	ldrb	r1, [r7, #5]
 800f954:	4618      	mov	r0, r3
 800f956:	f001 f8c1 	bl	8010adc <st25r3916ChangeRegisterBits>
 800f95a:	4603      	mov	r3, r0
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	4603      	mov	r3, r0
 800f96c:	80fb      	strh	r3, [r7, #6]
 800f96e:	460b      	mov	r3, r1
 800f970:	717b      	strb	r3, [r7, #5]
 800f972:	4613      	mov	r3, r2
 800f974:	713b      	strb	r3, [r7, #4]
    st25r3916ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 800f976:	88fb      	ldrh	r3, [r7, #6]
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	793a      	ldrb	r2, [r7, #4]
 800f97c:	7979      	ldrb	r1, [r7, #5]
 800f97e:	4618      	mov	r0, r3
 800f980:	f001 f8f8 	bl	8010b74 <st25r3916ChangeTestRegisterBits>
    return ERR_NONE;
 800f984:	2300      	movs	r3, #0
}
 800f986:	4618      	mov	r0, r3
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}

0800f98e <rfalChipMeasureAmplitude>:
}


/*******************************************************************************/
ReturnCode rfalChipMeasureAmplitude( uint8_t* result )
{
 800f98e:	b580      	push	{r7, lr}
 800f990:	b084      	sub	sp, #16
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
    ReturnCode err;
    uint8_t reg_opc, reg_mode, reg_conf1, reg_conf2;

    /* Save registers which will be adjusted below */
    st25r3916ReadRegister(ST25R3916_REG_OP_CONTROL, &reg_opc);
 800f996:	f107 030d 	add.w	r3, r7, #13
 800f99a:	4619      	mov	r1, r3
 800f99c:	2002      	movs	r0, #2
 800f99e:	f000 ff11 	bl	80107c4 <st25r3916ReadRegister>
    st25r3916ReadRegister(ST25R3916_REG_MODE, &reg_mode);
 800f9a2:	f107 030c 	add.w	r3, r7, #12
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	2003      	movs	r0, #3
 800f9aa:	f000 ff0b 	bl	80107c4 <st25r3916ReadRegister>
    st25r3916ReadRegister(ST25R3916_REG_RX_CONF1, &reg_conf1);
 800f9ae:	f107 030b 	add.w	r3, r7, #11
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	200b      	movs	r0, #11
 800f9b6:	f000 ff05 	bl	80107c4 <st25r3916ReadRegister>
    st25r3916ReadRegister(ST25R3916_REG_RX_CONF2, &reg_conf2);
 800f9ba:	f107 030a 	add.w	r3, r7, #10
 800f9be:	4619      	mov	r1, r3
 800f9c0:	200c      	movs	r0, #12
 800f9c2:	f000 feff 	bl	80107c4 <st25r3916ReadRegister>

    /* Set values as per defaults of DS. These regs/bits influence receiver chain and change amplitude */
    /* Doing so achieves an amplitude comparable over a complete polling cylce */
    st25r3916WriteRegister(ST25R3916_REG_OP_CONTROL, (reg_opc & ~ST25R3916_REG_OP_CONTROL_rx_chn));
 800f9c6:	7b7b      	ldrb	r3, [r7, #13]
 800f9c8:	f023 0320 	bic.w	r3, r3, #32
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	2002      	movs	r0, #2
 800f9d2:	f000 ff35 	bl	8010840 <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a
 800f9d6:	2108      	movs	r1, #8
 800f9d8:	2003      	movs	r0, #3
 800f9da:	f000 ff31 	bl	8010840 <st25r3916WriteRegister>
                                             | ST25R3916_REG_MODE_targ_init
                                             | ST25R3916_REG_MODE_tr_am_ook
                                             | ST25R3916_REG_MODE_nfc_ar_off);
    st25r3916WriteRegister(ST25R3916_REG_RX_CONF1, (reg_conf1 & ~ST25R3916_REG_RX_CONF1_ch_sel_AM));
 800f9de:	7afb      	ldrb	r3, [r7, #11]
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	200b      	movs	r0, #11
 800f9e4:	f000 ff2c 	bl	8010840 <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_RX_CONF2, ((reg_conf2 & ~(ST25R3916_REG_RX_CONF2_demod_mode | ST25R3916_REG_RX_CONF2_amd_sel))
 800f9e8:	7abb      	ldrb	r3, [r7, #10]
 800f9ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	200c      	movs	r0, #12
 800f9f4:	f000 ff24 	bl	8010840 <st25r3916WriteRegister>
                                                 | ST25R3916_REG_RX_CONF2_amd_sel_peak));

    /* Perform the actual measurement */
    err = st25r3916MeasureAmplitude( result );
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f000 f944 	bl	800fc86 <st25r3916MeasureAmplitude>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	81fb      	strh	r3, [r7, #14]

    /* Restore values */
    st25r3916WriteRegister(ST25R3916_REG_OP_CONTROL, reg_opc);
 800fa02:	7b7b      	ldrb	r3, [r7, #13]
 800fa04:	4619      	mov	r1, r3
 800fa06:	2002      	movs	r0, #2
 800fa08:	f000 ff1a 	bl	8010840 <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_MODE, reg_mode);
 800fa0c:	7b3b      	ldrb	r3, [r7, #12]
 800fa0e:	4619      	mov	r1, r3
 800fa10:	2003      	movs	r0, #3
 800fa12:	f000 ff15 	bl	8010840 <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_RX_CONF1, reg_conf1);
 800fa16:	7afb      	ldrb	r3, [r7, #11]
 800fa18:	4619      	mov	r1, r3
 800fa1a:	200b      	movs	r0, #11
 800fa1c:	f000 ff10 	bl	8010840 <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_RX_CONF2, reg_conf2);
 800fa20:	7abb      	ldrb	r3, [r7, #10]
 800fa22:	4619      	mov	r1, r3
 800fa24:	200c      	movs	r0, #12
 800fa26:	f000 ff0b 	bl	8010840 <st25r3916WriteRegister>

    return err;
 800fa2a:	89fb      	ldrh	r3, [r7, #14]
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3710      	adds	r7, #16
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <rfalChipMeasurePhase>:


/*******************************************************************************/
ReturnCode rfalChipMeasurePhase( uint8_t* result )
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
    st25r3916MeasurePhase( result );
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 f931 	bl	800fca4 <st25r3916MeasurePhase>

    return ERR_NONE;
 800fa42:	2300      	movs	r3, #0
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3708      	adds	r7, #8
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <st25r3916ExecuteCommandAndGetResult>:
 * LOCAL FUNCTION
 ******************************************************************************
 */

ReturnCode st25r3916ExecuteCommandAndGetResult( uint8_t cmd, uint8_t resReg, uint8_t tout, uint8_t* result )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	603b      	str	r3, [r7, #0]
 800fa54:	4603      	mov	r3, r0
 800fa56:	71fb      	strb	r3, [r7, #7]
 800fa58:	460b      	mov	r3, r1
 800fa5a:	71bb      	strb	r3, [r7, #6]
 800fa5c:	4613      	mov	r3, r2
 800fa5e:	717b      	strb	r3, [r7, #5]
    /* Clear and enable Direct Command interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 800fa60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800fa64:	f001 fa48 	bl	8010ef8 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800fa68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800fa6c:	f001 fa7c 	bl	8010f68 <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( cmd );
 800fa70:	79fb      	ldrb	r3, [r7, #7]
 800fa72:	4618      	mov	r0, r3
 800fa74:	f000 ff6d 	bl	8010952 <st25r3916ExecuteCommand>

    st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_DCT, tout );
 800fa78:	797b      	ldrb	r3, [r7, #5]
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800fa82:	f001 f9e9 	bl	8010e58 <st25r3916WaitForInterruptsTimed>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800fa86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800fa8a:	f001 fa79 	bl	8010f80 <st25r3916DisableInterrupts>

    /* After execution read out the result if the pointer is not NULL */
    if( result != NULL )
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d004      	beq.n	800fa9e <st25r3916ExecuteCommandAndGetResult+0x52>
    {
        st25r3916ReadRegister( resReg, result);
 800fa94:	79bb      	ldrb	r3, [r7, #6]
 800fa96:	6839      	ldr	r1, [r7, #0]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f000 fe93 	bl	80107c4 <st25r3916ReadRegister>
    }

    return ERR_NONE;
 800fa9e:	2300      	movs	r3, #0

}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3708      	adds	r7, #8
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <st25r3916Initialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode st25r3916Initialize( void )
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;
    
    /* Set default state on the ST25R3916 */
    st25r3916ExecuteCommand( ST25R3916_CMD_SET_DEFAULT );
 800faae:	20c1      	movs	r0, #193	; 0xc1
 800fab0:	f000 ff4f 	bl	8010952 <st25r3916ExecuteCommand>

#ifndef RFAL_USE_I2C    
    /* Increase MISO driving level as SPI can go up to 10MHz */
    st25r3916WriteRegister(ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_io_18);
 800fab4:	2104      	movs	r1, #4
 800fab6:	2001      	movs	r0, #1
 800fab8:	f000 fec2 	bl	8010840 <st25r3916WriteRegister>
#endif /* RFAL_USE_I2C */
    
    if( !st25r3916CheckChipID( NULL ) )
 800fabc:	2000      	movs	r0, #0
 800fabe:	f000 fa57 	bl	800ff70 <st25r3916CheckChipID>
 800fac2:	4603      	mov	r3, r0
 800fac4:	f083 0301 	eor.w	r3, r3, #1
 800fac8:	b2db      	uxtb	r3, r3
 800faca:	2b00      	cmp	r3, #0
 800facc:	d001      	beq.n	800fad2 <st25r3916Initialize+0x2a>
    {
        return ERR_HW_MISMATCH;
 800face:	2324      	movs	r3, #36	; 0x24
 800fad0:	e02d      	b.n	800fb2e <st25r3916Initialize+0x86>
    }
    
    st25r3916InitInterrupts();
 800fad2:	f001 f8f9 	bl	8010cc8 <st25r3916InitInterrupts>
    st25r3916ledInit();
 800fad6:	f001 fa91 	bl	8010ffc <st25r3916ledInit>
    
    gST25R3916NRT_64fcs = 0;
 800fada:	4b17      	ldr	r3, [pc, #92]	; (800fb38 <st25r3916Initialize+0x90>)
 800fadc:	2200      	movs	r2, #0
 800fade:	601a      	str	r2, [r3, #0]

#ifndef RFAL_USE_I2C
    /* Enable pull downs on MISO line */
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 800fae0:	2118      	movs	r1, #24
 800fae2:	2001      	movs	r0, #1
 800fae4:	f000 ffcd 	bl	8010a82 <st25r3916SetRegisterBits>
#endif /* RFAL_USE_I2C */
    
    /* Disable internal overheat protection */
    st25r3916ChangeTestRegisterBits( 0x04, 0x10, 0x10 );
 800fae8:	2210      	movs	r2, #16
 800faea:	2110      	movs	r1, #16
 800faec:	2004      	movs	r0, #4
 800faee:	f001 f841 	bl	8010b74 <st25r3916ChangeTestRegisterBits>

    /* Enable Oscillator and wait until it gets stable */
    st25r3916OscOn();        
 800faf2:	f000 f823 	bl	800fb3c <st25r3916OscOn>
    
    /* Measure VDD and set sup3V bit according to Power supplied  */
    vdd_mV = st25r3916MeasureVoltage( ST25R3916_REG_REGULATOR_CONTROL_mpsv_vdd );
 800faf6:	2000      	movs	r0, #0
 800faf8:	f000 f854 	bl	800fba4 <st25r3916MeasureVoltage>
 800fafc:	4603      	mov	r3, r0
 800fafe:	80fb      	strh	r3, [r7, #6]
    st25r3916ChangeRegisterBits( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ((vdd_mV < ST25R3916_SUPPLY_THRESHOLD) ? ST25R3916_REG_IO_CONF2_sup3V_3V : ST25R3916_REG_IO_CONF2_sup3V_5V) );
 800fb00:	88fb      	ldrh	r3, [r7, #6]
 800fb02:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800fb06:	d201      	bcs.n	800fb0c <st25r3916Initialize+0x64>
 800fb08:	2380      	movs	r3, #128	; 0x80
 800fb0a:	e000      	b.n	800fb0e <st25r3916Initialize+0x66>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	461a      	mov	r2, r3
 800fb10:	2180      	movs	r1, #128	; 0x80
 800fb12:	2001      	movs	r0, #1
 800fb14:	f000 ffe2 	bl	8010adc <st25r3916ChangeRegisterBits>
            
    /* Make sure Transmitter and Receiver are disabled */
    st25r3916TxRxOff();
 800fb18:	2148      	movs	r1, #72	; 0x48
 800fb1a:	2002      	movs	r0, #2
 800fb1c:	f000 ff7a 	bl	8010a14 <st25r3916ClrRegisterBits>
    
    /* After reset all interrupts are enabled, so disable them at first */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 800fb20:	f04f 30ff 	mov.w	r0, #4294967295
 800fb24:	f001 fa2c 	bl	8010f80 <st25r3916DisableInterrupts>
    
    /* And clear them, just to be sure */
    st25r3916ClearInterrupts();
 800fb28:	f001 fa36 	bl	8010f98 <st25r3916ClearInterrupts>
    
    return ERR_NONE;
 800fb2c:	2300      	movs	r3, #0
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3708      	adds	r7, #8
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop
 800fb38:	200009e8 	.word	0x200009e8

0800fb3c <st25r3916OscOn>:
}


/*******************************************************************************/
void st25r3916OscOn( void )
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3916_REG_OP_CONTROL_en instead of ST25R3916_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 800fb40:	2280      	movs	r2, #128	; 0x80
 800fb42:	2180      	movs	r1, #128	; 0x80
 800fb44:	2002      	movs	r0, #2
 800fb46:	f001 f84d 	bl	8010be4 <st25r3916CheckReg>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	f083 0301 	eor.w	r3, r3, #1
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d00c      	beq.n	800fb70 <st25r3916OscOn+0x34>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3916GetInterrupt( ST25R3916_IRQ_MASK_OSC );
 800fb56:	2080      	movs	r0, #128	; 0x80
 800fb58:	f001 f9ce 	bl	8010ef8 <st25r3916GetInterrupt>
      
        /* Enable oscillator frequency stable interrupt */
        st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_OSC );
 800fb5c:	2080      	movs	r0, #128	; 0x80
 800fb5e:	f001 fa03 	bl	8010f68 <st25r3916EnableInterrupts>

        /* Enable oscillator and regulator output */
        st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 800fb62:	2180      	movs	r1, #128	; 0x80
 800fb64:	2002      	movs	r0, #2
 800fb66:	f000 ff8c 	bl	8010a82 <st25r3916SetRegisterBits>

        /* Wait for the oscillator interrupt */
//        st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE );
        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_OSC );
 800fb6a:	2080      	movs	r0, #128	; 0x80
 800fb6c:	f001 fa08 	bl	8010f80 <st25r3916DisableInterrupts>
    }
}
 800fb70:	bf00      	nop
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <st25r3916MeasurePowerSupply>:


/*******************************************************************************/
uint8_t st25r3916MeasurePowerSupply( uint8_t mpsv )
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3916ChangeRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_mpsv_mask, mpsv );
 800fb7e:	79fb      	ldrb	r3, [r7, #7]
 800fb80:	461a      	mov	r2, r3
 800fb82:	2107      	movs	r1, #7
 800fb84:	202c      	movs	r0, #44	; 0x2c
 800fb86:	f000 ffa9 	bl	8010adc <st25r3916ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_VDD, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_VDD, &result);
 800fb8a:	f107 030f 	add.w	r3, r7, #15
 800fb8e:	2264      	movs	r2, #100	; 0x64
 800fb90:	2125      	movs	r1, #37	; 0x25
 800fb92:	20df      	movs	r0, #223	; 0xdf
 800fb94:	f7ff ff5a 	bl	800fa4c <st25r3916ExecuteCommandAndGetResult>

    return result;
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
	...

0800fba4 <st25r3916MeasureVoltage>:


/*******************************************************************************/
uint16_t st25r3916MeasureVoltage( uint8_t mpsv )
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	4603      	mov	r3, r0
 800fbac:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3916MeasurePowerSupply(mpsv);
 800fbae:	79fb      	ldrb	r3, [r7, #7]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7ff ffdf 	bl	800fb74 <st25r3916MeasurePowerSupply>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	73fb      	strb	r3, [r7, #15]
   
    /* Convert cmd output into mV (each step represents 23.4 mV )*/
    mV  = ((uint16_t)result) * 23U;
 800fbba:	7bfb      	ldrb	r3, [r7, #15]
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	0052      	lsls	r2, r2, #1
 800fbc2:	441a      	add	r2, r3
 800fbc4:	00d2      	lsls	r2, r2, #3
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	81bb      	strh	r3, [r7, #12]
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 800fbca:	7bfb      	ldrb	r3, [r7, #15]
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	3305      	adds	r3, #5
 800fbd0:	4a06      	ldr	r2, [pc, #24]	; (800fbec <st25r3916MeasureVoltage+0x48>)
 800fbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800fbd6:	08db      	lsrs	r3, r3, #3
 800fbd8:	b29a      	uxth	r2, r3
 800fbda:	89bb      	ldrh	r3, [r7, #12]
 800fbdc:	4413      	add	r3, r2
 800fbde:	81bb      	strh	r3, [r7, #12]

    return mV;
 800fbe0:	89bb      	ldrh	r3, [r7, #12]
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3710      	adds	r7, #16
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	cccccccd 	.word	0xcccccccd

0800fbf0 <st25r3916AdjustRegulators>:


/*******************************************************************************/
ReturnCode st25r3916AdjustRegulators( uint16_t* result_mV )
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b084      	sub	sp, #16
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
    uint8_t result;

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 800fbf8:	2180      	movs	r1, #128	; 0x80
 800fbfa:	202c      	movs	r0, #44	; 0x2c
 800fbfc:	f000 ff41 	bl	8010a82 <st25r3916SetRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 800fc00:	2180      	movs	r1, #128	; 0x80
 800fc02:	202c      	movs	r0, #44	; 0x2c
 800fc04:	f000 ff06 	bl	8010a14 <st25r3916ClrRegisterBits>

    /* Execute Adjust regulators cmd and retrieve result */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_ADJUST_REGULATORS, ST25R3916_REG_REGULATOR_RESULT, ST25R3916_TOUT_ADJUST_REGULATORS, &result );
 800fc08:	f107 030f 	add.w	r3, r7, #15
 800fc0c:	2206      	movs	r2, #6
 800fc0e:	216c      	movs	r1, #108	; 0x6c
 800fc10:	20d6      	movs	r0, #214	; 0xd6
 800fc12:	f7ff ff1b 	bl	800fa4c <st25r3916ExecuteCommandAndGetResult>

    /* Calculate result in mV */
    result >>= ST25R3916_REG_REGULATOR_RESULT_reg_shift;
 800fc16:	7bfb      	ldrb	r3, [r7, #15]
 800fc18:	091b      	lsrs	r3, r3, #4
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	73fb      	strb	r3, [r7, #15]
    
    if( result_mV != NULL )
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d02b      	beq.n	800fc7c <st25r3916AdjustRegulators+0x8c>
    {
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ST25R3916_REG_IO_CONF2_sup3V )  )
 800fc24:	2280      	movs	r2, #128	; 0x80
 800fc26:	2180      	movs	r1, #128	; 0x80
 800fc28:	2001      	movs	r0, #1
 800fc2a:	f000 ffdb 	bl	8010be4 <st25r3916CheckReg>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d00d      	beq.n	800fc50 <st25r3916AdjustRegulators+0x60>
        {
            result = MIN( result, (uint8_t)(result-5U) );/* In 3.3V mode [0,4] are not used                       */
 800fc34:	7bfb      	ldrb	r3, [r7, #15]
 800fc36:	2b04      	cmp	r3, #4
 800fc38:	d903      	bls.n	800fc42 <st25r3916AdjustRegulators+0x52>
 800fc3a:	7bfb      	ldrb	r3, [r7, #15]
 800fc3c:	3b05      	subs	r3, #5
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	e000      	b.n	800fc44 <st25r3916AdjustRegulators+0x54>
 800fc42:	7bfb      	ldrb	r3, [r7, #15]
 800fc44:	73fb      	strb	r3, [r7, #15]
            *result_mV = 2400U;                          /* Minimum regulated voltage 2.4V in case of 3.3V supply */
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800fc4c:	801a      	strh	r2, [r3, #0]
 800fc4e:	e003      	b.n	800fc58 <st25r3916AdjustRegulators+0x68>
        }
        else
        {
            *result_mV = 3600U;                          /* Minimum regulated voltage 3.6V in case of 5V supply   */
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800fc56:	801a      	strh	r2, [r3, #0]
        }
        
        *result_mV += (uint16_t)result * 100U;           /* 100mV steps in both 3.3V and 5V supply                */
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	881a      	ldrh	r2, [r3, #0]
 800fc5c:	7bfb      	ldrb	r3, [r7, #15]
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	4619      	mov	r1, r3
 800fc62:	0089      	lsls	r1, r1, #2
 800fc64:	440b      	add	r3, r1
 800fc66:	4619      	mov	r1, r3
 800fc68:	0088      	lsls	r0, r1, #2
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	440b      	add	r3, r1
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	4413      	add	r3, r2
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	801a      	strh	r2, [r3, #0]
    }
    return ERR_NONE;
 800fc7c:	2300      	movs	r3, #0
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3710      	adds	r7, #16
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}

0800fc86 <st25r3916MeasureAmplitude>:


/*******************************************************************************/
ReturnCode st25r3916MeasureAmplitude( uint8_t* result )
{
 800fc86:	b580      	push	{r7, lr}
 800fc88:	b082      	sub	sp, #8
 800fc8a:	af00      	add	r7, sp, #0
 800fc8c:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_AMPLITUDE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_AMPLITUDE, result );
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	220a      	movs	r2, #10
 800fc92:	2125      	movs	r1, #37	; 0x25
 800fc94:	20d3      	movs	r0, #211	; 0xd3
 800fc96:	f7ff fed9 	bl	800fa4c <st25r3916ExecuteCommandAndGetResult>
 800fc9a:	4603      	mov	r3, r0
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3708      	adds	r7, #8
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <st25r3916MeasurePhase>:


/*******************************************************************************/
ReturnCode st25r3916MeasurePhase( uint8_t* result )
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_PHASE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_PHASE, result );
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	220a      	movs	r2, #10
 800fcb0:	2125      	movs	r1, #37	; 0x25
 800fcb2:	20d9      	movs	r0, #217	; 0xd9
 800fcb4:	f7ff feca 	bl	800fa4c <st25r3916ExecuteCommandAndGetResult>
 800fcb8:	4603      	mov	r3, r0
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3708      	adds	r7, #8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <st25r3916MeasureCapacitance>:


/*******************************************************************************/
ReturnCode st25r3916MeasureCapacitance( uint8_t* result )
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b082      	sub	sp, #8
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_CAPACITANCE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_CAPACITANCE, result );
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	220a      	movs	r2, #10
 800fcce:	2125      	movs	r1, #37	; 0x25
 800fcd0:	20de      	movs	r0, #222	; 0xde
 800fcd2:	f7ff febb 	bl	800fa4c <st25r3916ExecuteCommandAndGetResult>
 800fcd6:	4603      	mov	r3, r0
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3708      	adds	r7, #8
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <st25r3916SetBitrate>:
}


/*******************************************************************************/
ReturnCode st25r3916SetBitrate(uint8_t txrate, uint8_t rxrate)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	4603      	mov	r3, r0
 800fce8:	460a      	mov	r2, r1
 800fcea:	71fb      	strb	r3, [r7, #7]
 800fcec:	4613      	mov	r3, r2
 800fcee:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 800fcf0:	f107 030f 	add.w	r3, r7, #15
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	2004      	movs	r0, #4
 800fcf8:	f000 fd64 	bl	80107c4 <st25r3916ReadRegister>
    if( rxrate != ST25R3916_BR_DO_NOT_SET )
 800fcfc:	79bb      	ldrb	r3, [r7, #6]
 800fcfe:	2bff      	cmp	r3, #255	; 0xff
 800fd00:	d00e      	beq.n	800fd20 <st25r3916SetBitrate+0x40>
    {
        if(rxrate > ST25R3916_BR_848)
 800fd02:	79bb      	ldrb	r3, [r7, #6]
 800fd04:	2b03      	cmp	r3, #3
 800fd06:	d901      	bls.n	800fd0c <st25r3916SetBitrate+0x2c>
        {
            return ERR_PARAM;
 800fd08:	2307      	movs	r3, #7
 800fd0a:	e025      	b.n	800fd58 <st25r3916SetBitrate+0x78>
        }

        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_rxrate_mask);     /* MISRA 10.3 */
 800fd0c:	7bfb      	ldrb	r3, [r7, #15]
 800fd0e:	f023 030f 	bic.w	r3, r3, #15
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	73fb      	strb	r3, [r7, #15]
        reg |= rxrate << ST25R3916_REG_BIT_RATE_rxrate_shift;
 800fd16:	7bfa      	ldrb	r2, [r7, #15]
 800fd18:	79bb      	ldrb	r3, [r7, #6]
 800fd1a:	4313      	orrs	r3, r2
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	73fb      	strb	r3, [r7, #15]
    }
    if( txrate != ST25R3916_BR_DO_NOT_SET )
 800fd20:	79fb      	ldrb	r3, [r7, #7]
 800fd22:	2bff      	cmp	r3, #255	; 0xff
 800fd24:	d012      	beq.n	800fd4c <st25r3916SetBitrate+0x6c>
    {
        if(txrate > ST25R3916_BR_6780)
 800fd26:	79fb      	ldrb	r3, [r7, #7]
 800fd28:	2b07      	cmp	r3, #7
 800fd2a:	d901      	bls.n	800fd30 <st25r3916SetBitrate+0x50>
        {
            return ERR_PARAM;
 800fd2c:	2307      	movs	r3, #7
 800fd2e:	e013      	b.n	800fd58 <st25r3916SetBitrate+0x78>
        }
        
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 800fd30:	7bfb      	ldrb	r3, [r7, #15]
 800fd32:	f003 030f 	and.w	r3, r3, #15
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	73fb      	strb	r3, [r7, #15]
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 800fd3a:	79fb      	ldrb	r3, [r7, #7]
 800fd3c:	011b      	lsls	r3, r3, #4
 800fd3e:	b25a      	sxtb	r2, r3
 800fd40:	7bfb      	ldrb	r3, [r7, #15]
 800fd42:	b25b      	sxtb	r3, r3
 800fd44:	4313      	orrs	r3, r2
 800fd46:	b25b      	sxtb	r3, r3
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	73fb      	strb	r3, [r7, #15]

    }
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );    
 800fd4c:	7bfb      	ldrb	r3, [r7, #15]
 800fd4e:	4619      	mov	r1, r3
 800fd50:	2004      	movs	r0, #4
 800fd52:	f000 fd75 	bl	8010840 <st25r3916WriteRegister>
 800fd56:	4603      	mov	r3, r0
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3710      	adds	r7, #16
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <st25r3916PerformCollisionAvoidance>:


/*******************************************************************************/
ReturnCode st25r3916PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 800fd60:	b590      	push	{r4, r7, lr}
 800fd62:	b085      	sub	sp, #20
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	4604      	mov	r4, r0
 800fd68:	4608      	mov	r0, r1
 800fd6a:	4611      	mov	r1, r2
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	4623      	mov	r3, r4
 800fd70:	71fb      	strb	r3, [r7, #7]
 800fd72:	4603      	mov	r3, r0
 800fd74:	71bb      	strb	r3, [r7, #6]
 800fd76:	460b      	mov	r3, r1
 800fd78:	717b      	strb	r3, [r7, #5]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	713b      	strb	r3, [r7, #4]
    uint8_t    treMask;
    uint32_t   irqs;
    ReturnCode err;
    
    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 800fd7e:	79fb      	ldrb	r3, [r7, #7]
 800fd80:	2bc8      	cmp	r3, #200	; 0xc8
 800fd82:	d004      	beq.n	800fd8e <st25r3916PerformCollisionAvoidance+0x2e>
 800fd84:	79fb      	ldrb	r3, [r7, #7]
 800fd86:	2bc9      	cmp	r3, #201	; 0xc9
 800fd88:	d001      	beq.n	800fd8e <st25r3916PerformCollisionAvoidance+0x2e>
    {
        return ERR_PARAM;
 800fd8a:	2307      	movs	r3, #7
 800fd8c:	e05d      	b.n	800fe4a <st25r3916PerformCollisionAvoidance+0xea>
    }
    
    err = ERR_INTERNAL;
 800fd8e:	230c      	movs	r3, #12
 800fd90:	81bb      	strh	r3, [r7, #12]
    
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 800fd92:	79bb      	ldrb	r3, [r7, #6]
 800fd94:	2bff      	cmp	r3, #255	; 0xff
 800fd96:	d102      	bne.n	800fd9e <st25r3916PerformCollisionAvoidance+0x3e>
 800fd98:	797b      	ldrb	r3, [r7, #5]
 800fd9a:	2bff      	cmp	r3, #255	; 0xff
 800fd9c:	d01e      	beq.n	800fddc <st25r3916PerformCollisionAvoidance+0x7c>
    {
        treMask = 0;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 800fda2:	79bb      	ldrb	r3, [r7, #6]
 800fda4:	2bff      	cmp	r3, #255	; 0xff
 800fda6:	d003      	beq.n	800fdb0 <st25r3916PerformCollisionAvoidance+0x50>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask;
 800fda8:	7bfb      	ldrb	r3, [r7, #15]
 800fdaa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800fdae:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 800fdb0:	797b      	ldrb	r3, [r7, #5]
 800fdb2:	2bff      	cmp	r3, #255	; 0xff
 800fdb4:	d003      	beq.n	800fdbe <st25r3916PerformCollisionAvoidance+0x5e>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask;
 800fdb6:	7bfb      	ldrb	r3, [r7, #15]
 800fdb8:	f043 030f 	orr.w	r3, r3, #15
 800fdbc:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
 800fdbe:	79bb      	ldrb	r3, [r7, #6]
 800fdc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fdc4:	b2da      	uxtb	r2, r3
 800fdc6:	797b      	ldrb	r3, [r7, #5]
 800fdc8:	f003 030f 	and.w	r3, r3, #15
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	4313      	orrs	r3, r2
 800fdd0:	b2da      	uxtb	r2, r3
 800fdd2:	7bfb      	ldrb	r3, [r7, #15]
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	202a      	movs	r0, #42	; 0x2a
 800fdd8:	f000 fe80 	bl	8010adc <st25r3916ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, nTRFW );
 800fddc:	793b      	ldrb	r3, [r7, #4]
 800fdde:	461a      	mov	r2, r3
 800fde0:	2103      	movs	r1, #3
 800fde2:	200a      	movs	r0, #10
 800fde4:	f000 fe7a 	bl	8010adc <st25r3916ChangeRegisterBits>
        
    /*******************************************************************************/
    /* Enable and clear CA specific interrupts and execute command */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800fde8:	481a      	ldr	r0, [pc, #104]	; (800fe54 <st25r3916PerformCollisionAvoidance+0xf4>)
 800fdea:	f001 f885 	bl	8010ef8 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800fdee:	4819      	ldr	r0, [pc, #100]	; (800fe54 <st25r3916PerformCollisionAvoidance+0xf4>)
 800fdf0:	f001 f8ba 	bl	8010f68 <st25r3916EnableInterrupts>
    
    st25r3916ExecuteCommand( FieldONCmd );
 800fdf4:	79fb      	ldrb	r3, [r7, #7]
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f000 fdab 	bl	8010952 <st25r3916ExecuteCommand>
    
    /*******************************************************************************/
    /* Wait for initial APON interrupt, indicating anticollision avoidance done and ST25R3916's 
     * field is now on, or a CAC indicating a collision */   
    irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_APON ), ST25R3916_TOUT_CA );    
 800fdfc:	210a      	movs	r1, #10
 800fdfe:	4816      	ldr	r0, [pc, #88]	; (800fe58 <st25r3916PerformCollisionAvoidance+0xf8>)
 800fe00:	f001 f82a 	bl	8010e58 <st25r3916WaitForInterruptsTimed>
 800fe04:	60b8      	str	r0, [r7, #8]
   
    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d002      	beq.n	800fe16 <st25r3916PerformCollisionAvoidance+0xb6>
    {        
        err = ERR_RF_COLLISION;
 800fe10:	231d      	movs	r3, #29
 800fe12:	81bb      	strh	r3, [r7, #12]
 800fe14:	e011      	b.n	800fe3a <st25r3916PerformCollisionAvoidance+0xda>
    }
    else if( (ST25R3916_IRQ_MASK_APON & irqs) != 0U )
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d00c      	beq.n	800fe3a <st25r3916PerformCollisionAvoidance+0xda>
    {
        /* After APON wait for CAT interrupt, indication field was switched on minimum guard time has been fulfilled */            
        irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAT ), ST25R3916_TOUT_CA );        
 800fe20:	210a      	movs	r1, #10
 800fe22:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fe26:	f001 f817 	bl	8010e58 <st25r3916WaitForInterruptsTimed>
 800fe2a:	60b8      	str	r0, [r7, #8]
                
        if( (ST25R3916_IRQ_MASK_CAT & irqs) != 0U )                             /* No Collision detected, Field On */
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d001      	beq.n	800fe3a <st25r3916PerformCollisionAvoidance+0xda>
        {
            err = ERR_NONE;
 800fe36:	2300      	movs	r3, #0
 800fe38:	81bb      	strh	r3, [r7, #12]
    {
        /* MISRA 15.7 - Empty else */
    }

    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_EON) );
 800fe3a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800fe3e:	f001 f85b 	bl	8010ef8 <st25r3916GetInterrupt>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800fe42:	4804      	ldr	r0, [pc, #16]	; (800fe54 <st25r3916PerformCollisionAvoidance+0xf4>)
 800fe44:	f001 f89c 	bl	8010f80 <st25r3916DisableInterrupts>
    
    return err;
 800fe48:	89bb      	ldrh	r3, [r7, #12]
}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	3714      	adds	r7, #20
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd90      	pop	{r4, r7, pc}
 800fe52:	bf00      	nop
 800fe54:	20000600 	.word	0x20000600
 800fe58:	20000400 	.word	0x20000400

0800fe5c <st25r3916SetNumTxBits>:


/*******************************************************************************/
void st25r3916SetNumTxBits( uint16_t nBits )
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	4603      	mov	r3, r0
 800fe64:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xFFU) );
 800fe66:	88fb      	ldrh	r3, [r7, #6]
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	2023      	movs	r0, #35	; 0x23
 800fe6e:	f000 fce7 	bl	8010840 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xFFU) );
 800fe72:	88fb      	ldrh	r3, [r7, #6]
 800fe74:	0a1b      	lsrs	r3, r3, #8
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	b2db      	uxtb	r3, r3
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	2022      	movs	r0, #34	; 0x22
 800fe7e:	f000 fcdf 	bl	8010840 <st25r3916WriteRegister>
}
 800fe82:	bf00      	nop
 800fe84:	3708      	adds	r7, #8
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
	...

0800fe8c <st25r3916SetNoResponseTime>:
}


/*******************************************************************************/
ReturnCode st25r3916SetNoResponseTime( uint32_t nrt_64fcs )
{    
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
    ReturnCode err;
    uint8_t    nrt_step;    
    uint32_t   tmpNRT;

    tmpNRT = nrt_64fcs;       /* MISRA 17.8 */
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	60bb      	str	r3, [r7, #8]
    err    = ERR_NONE;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	81fb      	strh	r3, [r7, #14]
    
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 800fe9c:	4a19      	ldr	r2, [pc, #100]	; (800ff04 <st25r3916SetNoResponseTime+0x78>)
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	6013      	str	r3, [r2, #0]
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
 800fea2:	2300      	movs	r3, #0
 800fea4:	737b      	strb	r3, [r7, #13]
    
    
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800feac:	d312      	bcc.n	800fed4 <st25r3916SetNoResponseTime+0x48>
    {
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
 800feae:	2301      	movs	r3, #1
 800feb0:	737b      	strb	r3, [r7, #13]
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	333f      	adds	r3, #63	; 0x3f
 800feb6:	099b      	lsrs	r3, r3, #6
 800feb8:	60bb      	str	r3, [r7, #8]
        
        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fec0:	d304      	bcc.n	800fecc <st25r3916SetNoResponseTime+0x40>
        {
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
 800fec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fec6:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;                                           /* Signal parameter error                              */
 800fec8:	2307      	movs	r3, #7
 800feca:	81fb      	strh	r3, [r7, #14]
        }
        gST25R3916NRT_64fcs = (64U * tmpNRT);
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	019b      	lsls	r3, r3, #6
 800fed0:	4a0c      	ldr	r2, [pc, #48]	; (800ff04 <st25r3916SetNoResponseTime+0x78>)
 800fed2:	6013      	str	r3, [r2, #0]
    }

    /* Set the ST25R3916 NRT step units and the value */
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 800fed4:	7b7b      	ldrb	r3, [r7, #13]
 800fed6:	461a      	mov	r2, r3
 800fed8:	2101      	movs	r1, #1
 800feda:	2012      	movs	r0, #18
 800fedc:	f000 fdfe 	bl	8010adc <st25r3916ChangeRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER1, (uint8_t)(tmpNRT >> 8U) );
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	0a1b      	lsrs	r3, r3, #8
 800fee4:	b2db      	uxtb	r3, r3
 800fee6:	4619      	mov	r1, r3
 800fee8:	2010      	movs	r0, #16
 800feea:	f000 fca9 	bl	8010840 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER2, (uint8_t)(tmpNRT & 0xFFU) );
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	b2db      	uxtb	r3, r3
 800fef2:	4619      	mov	r1, r3
 800fef4:	2011      	movs	r0, #17
 800fef6:	f000 fca3 	bl	8010840 <st25r3916WriteRegister>

    return err;
 800fefa:	89fb      	ldrh	r3, [r7, #14]
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3710      	adds	r7, #16
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}
 800ff04:	200009e8 	.word	0x200009e8

0800ff08 <st25r3916SetGPTime>:
}


/*******************************************************************************/
void st25r3916SetGPTime( uint16_t gpt_8fcs )
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	4603      	mov	r3, r0
 800ff10:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_GPT1, (uint8_t)(gpt_8fcs >> 8) );
 800ff12:	88fb      	ldrh	r3, [r7, #6]
 800ff14:	0a1b      	lsrs	r3, r3, #8
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	2013      	movs	r0, #19
 800ff1e:	f000 fc8f 	bl	8010840 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_GPT2, (uint8_t)(gpt_8fcs & 0xFFU) );
 800ff22:	88fb      	ldrh	r3, [r7, #6]
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	4619      	mov	r1, r3
 800ff28:	2014      	movs	r0, #20
 800ff2a:	f000 fc89 	bl	8010840 <st25r3916WriteRegister>
}
 800ff2e:	bf00      	nop
 800ff30:	3708      	adds	r7, #8
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <st25r3916SetStartGPTimer>:


/*******************************************************************************/
ReturnCode st25r3916SetStartGPTimer( uint16_t gpt_8fcs, uint8_t trigger_source )
{
 800ff36:	b580      	push	{r7, lr}
 800ff38:	b082      	sub	sp, #8
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	460a      	mov	r2, r1
 800ff40:	80fb      	strh	r3, [r7, #6]
 800ff42:	4613      	mov	r3, r2
 800ff44:	717b      	strb	r3, [r7, #5]
    st25r3916SetGPTime( gpt_8fcs );
 800ff46:	88fb      	ldrh	r3, [r7, #6]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7ff ffdd 	bl	800ff08 <st25r3916SetGPTime>
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, trigger_source );
 800ff4e:	797b      	ldrb	r3, [r7, #5]
 800ff50:	461a      	mov	r2, r3
 800ff52:	21e0      	movs	r1, #224	; 0xe0
 800ff54:	2012      	movs	r0, #18
 800ff56:	f000 fdc1 	bl	8010adc <st25r3916ChangeRegisterBits>
    
    /* If there's no trigger source, start GPT immediately */
    if( trigger_source == ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger )
 800ff5a:	797b      	ldrb	r3, [r7, #5]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d102      	bne.n	800ff66 <st25r3916SetStartGPTimer+0x30>
    {
        st25r3916ExecuteCommand( ST25R3916_CMD_START_GP_TIMER );
 800ff60:	20e0      	movs	r0, #224	; 0xe0
 800ff62:	f000 fcf6 	bl	8010952 <st25r3916ExecuteCommand>
    }

    return ERR_NONE;
 800ff66:	2300      	movs	r3, #0
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <st25r3916CheckChipID>:


/*******************************************************************************/
bool st25r3916CheckChipID( uint8_t *rev )
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 800ff78:	2300      	movs	r3, #0
 800ff7a:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 800ff7c:	f107 030f 	add.w	r3, r7, #15
 800ff80:	4619      	mov	r1, r3
 800ff82:	203f      	movs	r0, #63	; 0x3f
 800ff84:	f000 fc1e 	bl	80107c4 <st25r3916ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3916's IC type code */
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 800ff88:	7bfb      	ldrb	r3, [r7, #15]
 800ff8a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800ff8e:	2b28      	cmp	r3, #40	; 0x28
 800ff90:	d001      	beq.n	800ff96 <st25r3916CheckChipID+0x26>
    {
        return false;
 800ff92:	2300      	movs	r3, #0
 800ff94:	e009      	b.n	800ffaa <st25r3916CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d005      	beq.n	800ffa8 <st25r3916CheckChipID+0x38>
    {
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
 800ff9c:	7bfb      	ldrb	r3, [r7, #15]
 800ff9e:	f003 0307 	and.w	r3, r3, #7
 800ffa2:	b2da      	uxtb	r2, r3
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 800ffa8:	2301      	movs	r3, #1
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3710      	adds	r7, #16
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}

0800ffb2 <st25r3916StreamConfigure>:
}


/*******************************************************************************/
ReturnCode st25r3916StreamConfigure(const struct st25r3916StreamConfig *config)
{
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b084      	sub	sp, #16
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
    uint8_t smd;
    uint8_t mode;

    smd = 0;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	73fb      	strb	r3, [r7, #15]
    
    if( config->useBPSK != 0U )
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d016      	beq.n	800fff4 <st25r3916StreamConfigure+0x42>
    {
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
 800ffc6:	2378      	movs	r3, #120	; 0x78
 800ffc8:	73bb      	strb	r3, [r7, #14]
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	785b      	ldrb	r3, [r3, #1]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d903      	bls.n	800ffda <st25r3916StreamConfigure+0x28>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	785b      	ldrb	r3, [r3, #1]
 800ffd6:	2b04      	cmp	r3, #4
 800ffd8:	d901      	bls.n	800ffde <st25r3916StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 800ffda:	2307      	movs	r3, #7
 800ffdc:	e053      	b.n	8010086 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	785b      	ldrb	r3, [r3, #1]
 800ffe2:	f1c3 0304 	rsb	r3, r3, #4
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	015b      	lsls	r3, r3, #5
 800ffea:	b2da      	uxtb	r2, r3
 800ffec:	7bfb      	ldrb	r3, [r7, #15]
 800ffee:	4313      	orrs	r3, r2
 800fff0:	73fb      	strb	r3, [r7, #15]
 800fff2:	e01b      	b.n	801002c <st25r3916StreamConfigure+0x7a>
    }
    else
    {
        mode = ST25R3916_REG_MODE_om_subcarrier_stream;
 800fff4:	2370      	movs	r3, #112	; 0x70
 800fff6:	73bb      	strb	r3, [r7, #14]
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	785b      	ldrb	r3, [r3, #1]
 800fffc:	2b02      	cmp	r3, #2
 800fffe:	d903      	bls.n	8010008 <st25r3916StreamConfigure+0x56>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	785b      	ldrb	r3, [r3, #1]
 8010004:	2b06      	cmp	r3, #6
 8010006:	d901      	bls.n	801000c <st25r3916StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 8010008:	2307      	movs	r3, #7
 801000a:	e03c      	b.n	8010086 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	785b      	ldrb	r3, [r3, #1]
 8010010:	f1c3 0306 	rsb	r3, r3, #6
 8010014:	b2db      	uxtb	r3, r3
 8010016:	015b      	lsls	r3, r3, #5
 8010018:	b2da      	uxtb	r2, r3
 801001a:	7bfb      	ldrb	r3, [r7, #15]
 801001c:	4313      	orrs	r3, r2
 801001e:	73fb      	strb	r3, [r7, #15]
        if( config->report_period_length == 0U )
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	78db      	ldrb	r3, [r3, #3]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d101      	bne.n	801002c <st25r3916StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 8010028:	2307      	movs	r3, #7
 801002a:	e02c      	b.n	8010086 <st25r3916StreamConfigure+0xd4>
        }
    }

    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	789b      	ldrb	r3, [r3, #2]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d003      	beq.n	801003c <st25r3916StreamConfigure+0x8a>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	789b      	ldrb	r3, [r3, #2]
 8010038:	2b07      	cmp	r3, #7
 801003a:	d901      	bls.n	8010040 <st25r3916StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 801003c:	2307      	movs	r3, #7
 801003e:	e022      	b.n	8010086 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	789b      	ldrb	r3, [r3, #2]
 8010044:	f1c3 0307 	rsb	r3, r3, #7
 8010048:	b2da      	uxtb	r2, r3
 801004a:	7bfb      	ldrb	r3, [r7, #15]
 801004c:	4313      	orrs	r3, r2
 801004e:	73fb      	strb	r3, [r7, #15]

    if( config->report_period_length > 3U )
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	78db      	ldrb	r3, [r3, #3]
 8010054:	2b03      	cmp	r3, #3
 8010056:	d901      	bls.n	801005c <st25r3916StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 8010058:	2307      	movs	r3, #7
 801005a:	e014      	b.n	8010086 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	78db      	ldrb	r3, [r3, #3]
 8010060:	00db      	lsls	r3, r3, #3
 8010062:	b25a      	sxtb	r2, r3
 8010064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010068:	4313      	orrs	r3, r2
 801006a:	b25b      	sxtb	r3, r3
 801006c:	73fb      	strb	r3, [r7, #15]

    st25r3916WriteRegister(ST25R3916_REG_STREAM_MODE, smd);
 801006e:	7bfb      	ldrb	r3, [r7, #15]
 8010070:	4619      	mov	r1, r3
 8010072:	2009      	movs	r0, #9
 8010074:	f000 fbe4 	bl	8010840 <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_mask, mode);
 8010078:	7bbb      	ldrb	r3, [r7, #14]
 801007a:	461a      	mov	r2, r3
 801007c:	2178      	movs	r1, #120	; 0x78
 801007e:	2003      	movs	r0, #3
 8010080:	f000 fd2c 	bl	8010adc <st25r3916ChangeRegisterBits>

    return ERR_NONE;
 8010084:	2300      	movs	r3, #0
}
 8010086:	4618      	mov	r0, r3
 8010088:	3710      	adds	r7, #16
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
	...

08010090 <st25r3916AatTune>:

 

/*******************************************************************************/
ReturnCode st25r3916AatTune(const struct st25r3916AatTuneParams *tuningParams, struct st25r3916AatTuneResult *tuningStatus)
{
 8010090:	b590      	push	{r4, r7, lr}
 8010092:	b08b      	sub	sp, #44	; 0x2c
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    const struct st25r3916AatTuneParams *tp = tuningParams;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	627b      	str	r3, [r7, #36]	; 0x24
    struct st25r3916AatTuneResult *ts = tuningStatus;
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	623b      	str	r3, [r7, #32]
    struct st25r3916AatTuneParams defaultTuningParams = 
 80100a2:	4b2b      	ldr	r3, [pc, #172]	; (8010150 <st25r3916AatTune+0xc0>)
 80100a4:	f107 0410 	add.w	r4, r7, #16
 80100a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100aa:	c407      	stmia	r4!, {r0, r1, r2}
 80100ac:	8023      	strh	r3, [r4, #0]
        .doDynamicSteps=true,
        .measureLimit=50,
    };
    struct st25r3916AatTuneResult defaultTuneResult;
    
    if ((NULL != tp) && (
 80100ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d025      	beq.n	8010100 <st25r3916AatTune+0x70>
          (tp->aat_a_min > tp->aat_a_max   )
 80100b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b6:	781a      	ldrb	r2, [r3, #0]
 80100b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ba:	785b      	ldrb	r3, [r3, #1]
    if ((NULL != tp) && (
 80100bc:	429a      	cmp	r2, r3
 80100be:	d81d      	bhi.n	80100fc <st25r3916AatTune+0x6c>
       || (tp->aat_a_start < tp->aat_a_min )
 80100c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c2:	789a      	ldrb	r2, [r3, #2]
 80100c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d317      	bcc.n	80100fc <st25r3916AatTune+0x6c>
       || (tp->aat_a_start > tp->aat_a_max )
 80100cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ce:	789a      	ldrb	r2, [r3, #2]
 80100d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d2:	785b      	ldrb	r3, [r3, #1]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d811      	bhi.n	80100fc <st25r3916AatTune+0x6c>
       || (tp->aat_b_min > tp->aat_b_max   )
 80100d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100da:	791a      	ldrb	r2, [r3, #4]
 80100dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100de:	795b      	ldrb	r3, [r3, #5]
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d80b      	bhi.n	80100fc <st25r3916AatTune+0x6c>
       || (tp->aat_b_start < tp->aat_b_min )
 80100e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e6:	799a      	ldrb	r2, [r3, #6]
 80100e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ea:	791b      	ldrb	r3, [r3, #4]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d305      	bcc.n	80100fc <st25r3916AatTune+0x6c>
       || (tp->aat_b_start > tp->aat_b_max )
 80100f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f2:	799a      	ldrb	r2, [r3, #6]
 80100f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f6:	795b      	ldrb	r3, [r3, #5]
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d901      	bls.n	8010100 <st25r3916AatTune+0x70>
       ))
    {
        return ERR_PARAM;
 80100fc:	2307      	movs	r3, #7
 80100fe:	e023      	b.n	8010148 <st25r3916AatTune+0xb8>
    }

    if (NULL == tp)
 8010100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010102:	2b00      	cmp	r3, #0
 8010104:	d110      	bne.n	8010128 <st25r3916AatTune+0x98>
    { /* Start from current caps with default params */
        st25r3916ReadRegister(ST25R3916_REG_ANT_TUNE_A, &defaultTuningParams.aat_a_start);
 8010106:	f107 0310 	add.w	r3, r7, #16
 801010a:	3302      	adds	r3, #2
 801010c:	4619      	mov	r1, r3
 801010e:	2026      	movs	r0, #38	; 0x26
 8010110:	f000 fb58 	bl	80107c4 <st25r3916ReadRegister>
        st25r3916ReadRegister(ST25R3916_REG_ANT_TUNE_B, &defaultTuningParams.aat_b_start);
 8010114:	f107 0310 	add.w	r3, r7, #16
 8010118:	3306      	adds	r3, #6
 801011a:	4619      	mov	r1, r3
 801011c:	2027      	movs	r0, #39	; 0x27
 801011e:	f000 fb51 	bl	80107c4 <st25r3916ReadRegister>
        tp = &defaultTuningParams;
 8010122:	f107 0310 	add.w	r3, r7, #16
 8010126:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (NULL == ts){ts = &defaultTuneResult;}
 8010128:	6a3b      	ldr	r3, [r7, #32]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d102      	bne.n	8010134 <st25r3916AatTune+0xa4>
 801012e:	f107 0308 	add.w	r3, r7, #8
 8010132:	623b      	str	r3, [r7, #32]

    ts->measureCnt = 0; /* Clear current measure count */
 8010134:	6a3b      	ldr	r3, [r7, #32]
 8010136:	2200      	movs	r2, #0
 8010138:	809a      	strh	r2, [r3, #4]
 
    err = aatHillClimb(tp, ts);
 801013a:	6a39      	ldr	r1, [r7, #32]
 801013c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801013e:	f000 f809 	bl	8010154 <aatHillClimb>
 8010142:	4603      	mov	r3, r0
 8010144:	83fb      	strh	r3, [r7, #30]

    return err;
 8010146:	8bfb      	ldrh	r3, [r7, #30]
}
 8010148:	4618      	mov	r0, r3
 801014a:	372c      	adds	r7, #44	; 0x2c
 801014c:	46bd      	mov	sp, r7
 801014e:	bd90      	pop	{r4, r7, pc}
 8010150:	08017754 	.word	0x08017754

08010154 <aatHillClimb>:

/*******************************************************************************/
static ReturnCode aatHillClimb(const struct st25r3916AatTuneParams *tuningParams, struct st25r3916AatTuneResult *tuningStatus)
{
 8010154:	b590      	push	{r4, r7, lr}
 8010156:	b08d      	sub	sp, #52	; 0x34
 8010158:	af02      	add	r7, sp, #8
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
    ReturnCode  err = ERR_NONE;
 801015e:	2300      	movs	r3, #0
 8010160:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t f_min;
    int32_t direction, gdirection;
    uint8_t amp,phs;
    struct st25r3916AatTuneParams tp = *tuningParams; // local copy to obey const
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	f107 0308 	add.w	r3, r7, #8
 8010168:	4614      	mov	r4, r2
 801016a:	6820      	ldr	r0, [r4, #0]
 801016c:	6861      	ldr	r1, [r4, #4]
 801016e:	68a2      	ldr	r2, [r4, #8]
 8010170:	c307      	stmia	r3!, {r0, r1, r2}
 8010172:	89a2      	ldrh	r2, [r4, #12]
 8010174:	801a      	strh	r2, [r3, #0]

    tuningStatus->aat_a = tuningParams->aat_a_start;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	789a      	ldrb	r2, [r3, #2]
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	701a      	strb	r2, [r3, #0]
    tuningStatus->aat_b = tuningParams->aat_b_start;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	799a      	ldrb	r2, [r3, #6]
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	705a      	strb	r2, [r3, #1]

    /* Get a proper start value */
    aatMeasure(tuningStatus->aat_a,tuningStatus->aat_b,&amp,&phs,&tuningStatus->measureCnt);
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	7818      	ldrb	r0, [r3, #0]
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	7859      	ldrb	r1, [r3, #1]
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	3304      	adds	r3, #4
 8010192:	f107 0416 	add.w	r4, r7, #22
 8010196:	f107 0217 	add.w	r2, r7, #23
 801019a:	9300      	str	r3, [sp, #0]
 801019c:	4623      	mov	r3, r4
 801019e:	f000 f9bc 	bl	801051a <aatMeasure>
    f_min = aatCalcF(&tp, amp, phs);
 80101a2:	7df9      	ldrb	r1, [r7, #23]
 80101a4:	7dba      	ldrb	r2, [r7, #22]
 80101a6:	f107 0308 	add.w	r3, r7, #8
 80101aa:	4618      	mov	r0, r3
 80101ac:	f000 f8ec 	bl	8010388 <aatCalcF>
 80101b0:	4603      	mov	r3, r0
 80101b2:	61bb      	str	r3, [r7, #24]
    direction = 0;
 80101b4:	2300      	movs	r3, #0
 80101b6:	623b      	str	r3, [r7, #32]

    st25r3916AatLog("%d %d: %d***\n",tuningStatus->aat_a,tuningStatus->aat_b,f_min);

    do {
        direction = 0; /* Initially and after reducing step sizes we don't have a previous direction */
 80101b8:	2300      	movs	r3, #0
 80101ba:	623b      	str	r3, [r7, #32]
        do {
            /* With the greedy step below always executed aftwards the -direction does never need to be investigated */
            direction = aatSteepestDescent(&f_min, &tp, tuningStatus, direction, -direction);
 80101bc:	6a3b      	ldr	r3, [r7, #32]
 80101be:	425b      	negs	r3, r3
 80101c0:	f107 0108 	add.w	r1, r7, #8
 80101c4:	f107 0018 	add.w	r0, r7, #24
 80101c8:	9300      	str	r3, [sp, #0]
 80101ca:	6a3b      	ldr	r3, [r7, #32]
 80101cc:	683a      	ldr	r2, [r7, #0]
 80101ce:	f000 f838 	bl	8010242 <aatSteepestDescent>
 80101d2:	6238      	str	r0, [r7, #32]
            if (tuningStatus->measureCnt > tp.measureLimit)
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	889a      	ldrh	r2, [r3, #4]
 80101d8:	7d7b      	ldrb	r3, [r7, #21]
 80101da:	b29b      	uxth	r3, r3
 80101dc:	429a      	cmp	r2, r3
 80101de:	d902      	bls.n	80101e6 <aatHillClimb+0x92>
            {
                err = ERR_OVERRUN;
 80101e0:	230a      	movs	r3, #10
 80101e2:	84fb      	strh	r3, [r7, #38]	; 0x26
                break;
 80101e4:	e017      	b.n	8010216 <aatHillClimb+0xc2>
            }
            do
            {
                gdirection = aatGreedyDescent(&f_min, &tp, tuningStatus, direction);
 80101e6:	f107 0108 	add.w	r1, r7, #8
 80101ea:	f107 0018 	add.w	r0, r7, #24
 80101ee:	6a3b      	ldr	r3, [r7, #32]
 80101f0:	683a      	ldr	r2, [r7, #0]
 80101f2:	f000 f887 	bl	8010304 <aatGreedyDescent>
 80101f6:	61f8      	str	r0, [r7, #28]
                if (tuningStatus->measureCnt > tp.measureLimit) {
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	889a      	ldrh	r2, [r3, #4]
 80101fc:	7d7b      	ldrb	r3, [r7, #21]
 80101fe:	b29b      	uxth	r3, r3
 8010200:	429a      	cmp	r2, r3
 8010202:	d902      	bls.n	801020a <aatHillClimb+0xb6>
                    err = ERR_OVERRUN;
 8010204:	230a      	movs	r3, #10
 8010206:	84fb      	strh	r3, [r7, #38]	; 0x26
                    break;
 8010208:	e002      	b.n	8010210 <aatHillClimb+0xbc>
                }
            } while (0 != gdirection);
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d1ea      	bne.n	80101e6 <aatHillClimb+0x92>
        } while (0 != direction);
 8010210:	6a3b      	ldr	r3, [r7, #32]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d1d2      	bne.n	80101bc <aatHillClimb+0x68>
        tp.aat_a_stepWidth /= 2U; /* Reduce step sizes */
 8010216:	7afb      	ldrb	r3, [r7, #11]
 8010218:	085b      	lsrs	r3, r3, #1
 801021a:	b2db      	uxtb	r3, r3
 801021c:	72fb      	strb	r3, [r7, #11]
        tp.aat_b_stepWidth /= 2U;
 801021e:	7bfb      	ldrb	r3, [r7, #15]
 8010220:	085b      	lsrs	r3, r3, #1
 8010222:	b2db      	uxtb	r3, r3
 8010224:	73fb      	strb	r3, [r7, #15]
    } while (tp.doDynamicSteps && ((tp.aat_a_stepWidth>0U) || (tp.aat_b_stepWidth>0U)));
 8010226:	7d3b      	ldrb	r3, [r7, #20]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d005      	beq.n	8010238 <aatHillClimb+0xe4>
 801022c:	7afb      	ldrb	r3, [r7, #11]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1c2      	bne.n	80101b8 <aatHillClimb+0x64>
 8010232:	7bfb      	ldrb	r3, [r7, #15]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d1bf      	bne.n	80101b8 <aatHillClimb+0x64>
    
    return err;
 8010238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801023a:	4618      	mov	r0, r3
 801023c:	372c      	adds	r7, #44	; 0x2c
 801023e:	46bd      	mov	sp, r7
 8010240:	bd90      	pop	{r4, r7, pc}

08010242 <aatSteepestDescent>:

/*******************************************************************************/
static int32_t aatSteepestDescent(uint32_t *f_min, const struct st25r3916AatTuneParams *tuningParams, struct st25r3916AatTuneResult *tuningStatus, int32_t previousDir, int32_t previousDir2)
{
 8010242:	b590      	push	{r4, r7, lr}
 8010244:	b08b      	sub	sp, #44	; 0x2c
 8010246:	af02      	add	r7, sp, #8
 8010248:	60f8      	str	r0, [r7, #12]
 801024a:	60b9      	str	r1, [r7, #8]
 801024c:	607a      	str	r2, [r7, #4]
 801024e:	603b      	str	r3, [r7, #0]
    int32_t i;
    uint8_t amp,phs;
    uint32_t f;
    int32_t bestdir = 0; /* Negative direction: decrease, Positive: increase. (-)1: aat_a, (-)2: aat_b */
 8010250:	2300      	movs	r3, #0
 8010252:	61bb      	str	r3, [r7, #24]

    for (i = -2; i <= 2; i++)
 8010254:	f06f 0301 	mvn.w	r3, #1
 8010258:	61fb      	str	r3, [r7, #28]
 801025a:	e041      	b.n	80102e0 <aatSteepestDescent+0x9e>
    {
        uint8_t a = tuningStatus->aat_a , b = tuningStatus->aat_b;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	747b      	strb	r3, [r7, #17]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	785b      	ldrb	r3, [r3, #1]
 8010266:	743b      	strb	r3, [r7, #16]

        if ((0==i) || (i==-previousDir) || (i==-previousDir2))
 8010268:	69fb      	ldr	r3, [r7, #28]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d032      	beq.n	80102d4 <aatSteepestDescent+0x92>
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	425b      	negs	r3, r3
 8010272:	69fa      	ldr	r2, [r7, #28]
 8010274:	429a      	cmp	r2, r3
 8010276:	d02d      	beq.n	80102d4 <aatSteepestDescent+0x92>
 8010278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027a:	425b      	negs	r3, r3
 801027c:	69fa      	ldr	r2, [r7, #28]
 801027e:	429a      	cmp	r2, r3
 8010280:	d028      	beq.n	80102d4 <aatSteepestDescent+0x92>
        { /* Skip no direction and avoid going backwards */
            continue;
        }
        if (0U!=aatStepDacVals(tuningParams, &a, &b, i))
 8010282:	f107 0210 	add.w	r2, r7, #16
 8010286:	f107 0111 	add.w	r1, r7, #17
 801028a:	69fb      	ldr	r3, [r7, #28]
 801028c:	68b8      	ldr	r0, [r7, #8]
 801028e:	f000 f8be 	bl	801040e <aatStepDacVals>
 8010292:	4603      	mov	r3, r0
 8010294:	2b00      	cmp	r3, #0
 8010296:	d11f      	bne.n	80102d8 <aatSteepestDescent+0x96>
        { /* If stepping did not change the value, omit this direction */
            continue;
        }

        aatMeasure(a,b,&amp,&phs,&tuningStatus->measureCnt);
 8010298:	7c78      	ldrb	r0, [r7, #17]
 801029a:	7c39      	ldrb	r1, [r7, #16]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	3304      	adds	r3, #4
 80102a0:	f107 0412 	add.w	r4, r7, #18
 80102a4:	f107 0213 	add.w	r2, r7, #19
 80102a8:	9300      	str	r3, [sp, #0]
 80102aa:	4623      	mov	r3, r4
 80102ac:	f000 f935 	bl	801051a <aatMeasure>
        f = aatCalcF(tuningParams, amp, phs);
 80102b0:	7cfb      	ldrb	r3, [r7, #19]
 80102b2:	7cba      	ldrb	r2, [r7, #18]
 80102b4:	4619      	mov	r1, r3
 80102b6:	68b8      	ldr	r0, [r7, #8]
 80102b8:	f000 f866 	bl	8010388 <aatCalcF>
 80102bc:	6178      	str	r0, [r7, #20]
        st25r3916AatLog("%d : %d %d: %d",i,a, b, f);
        if (f < *f_min)
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	697a      	ldr	r2, [r7, #20]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d208      	bcs.n	80102da <aatSteepestDescent+0x98>
        { /* Value is better than all previous ones */
            st25r3916AatLog("*");
            *f_min = f;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	697a      	ldr	r2, [r7, #20]
 80102cc:	601a      	str	r2, [r3, #0]
            bestdir = i;
 80102ce:	69fb      	ldr	r3, [r7, #28]
 80102d0:	61bb      	str	r3, [r7, #24]
 80102d2:	e002      	b.n	80102da <aatSteepestDescent+0x98>
            continue;
 80102d4:	bf00      	nop
 80102d6:	e000      	b.n	80102da <aatSteepestDescent+0x98>
            continue;
 80102d8:	bf00      	nop
    for (i = -2; i <= 2; i++)
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	3301      	adds	r3, #1
 80102de:	61fb      	str	r3, [r7, #28]
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	2b02      	cmp	r3, #2
 80102e4:	ddba      	ble.n	801025c <aatSteepestDescent+0x1a>
        }
        st25r3916AatLog("\n");
    }
    if (0!=bestdir) 
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d006      	beq.n	80102fa <aatSteepestDescent+0xb8>
    { /* Walk into the best direction */
        aatStepDacVals(tuningParams, &tuningStatus->aat_a, &tuningStatus->aat_b, bestdir);
 80102ec:	6879      	ldr	r1, [r7, #4]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	1c5a      	adds	r2, r3, #1
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	68b8      	ldr	r0, [r7, #8]
 80102f6:	f000 f88a 	bl	801040e <aatStepDacVals>
    }
    return bestdir;
 80102fa:	69bb      	ldr	r3, [r7, #24]
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3724      	adds	r7, #36	; 0x24
 8010300:	46bd      	mov	sp, r7
 8010302:	bd90      	pop	{r4, r7, pc}

08010304 <aatGreedyDescent>:

/*******************************************************************************/
static int32_t aatGreedyDescent(uint32_t *f_min, const struct st25r3916AatTuneParams *tuningParams, struct st25r3916AatTuneResult *tuningStatus, int32_t previousDir)
{
 8010304:	b590      	push	{r4, r7, lr}
 8010306:	b089      	sub	sp, #36	; 0x24
 8010308:	af02      	add	r7, sp, #8
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	60b9      	str	r1, [r7, #8]
 801030e:	607a      	str	r2, [r7, #4]
 8010310:	603b      	str	r3, [r7, #0]
    uint8_t amp,phs;
    uint32_t f;
    uint8_t a = tuningStatus->aat_a , b = tuningStatus->aat_b;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	747b      	strb	r3, [r7, #17]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	785b      	ldrb	r3, [r3, #1]
 801031c:	743b      	strb	r3, [r7, #16]

    if (0U != aatStepDacVals(tuningParams, &a, &b, previousDir))
 801031e:	f107 0210 	add.w	r2, r7, #16
 8010322:	f107 0111 	add.w	r1, r7, #17
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	68b8      	ldr	r0, [r7, #8]
 801032a:	f000 f870 	bl	801040e <aatStepDacVals>
 801032e:	4603      	mov	r3, r0
 8010330:	2b00      	cmp	r3, #0
 8010332:	d001      	beq.n	8010338 <aatGreedyDescent+0x34>
    { /* If stepping did not change the value, omit this direction */
        return 0;
 8010334:	2300      	movs	r3, #0
 8010336:	e023      	b.n	8010380 <aatGreedyDescent+0x7c>
    }

    aatMeasure(a,b,&amp,&phs,&tuningStatus->measureCnt);
 8010338:	7c78      	ldrb	r0, [r7, #17]
 801033a:	7c39      	ldrb	r1, [r7, #16]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	3304      	adds	r3, #4
 8010340:	f107 0412 	add.w	r4, r7, #18
 8010344:	f107 0213 	add.w	r2, r7, #19
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	4623      	mov	r3, r4
 801034c:	f000 f8e5 	bl	801051a <aatMeasure>
    f = aatCalcF(tuningParams, amp, phs);
 8010350:	7cfb      	ldrb	r3, [r7, #19]
 8010352:	7cba      	ldrb	r2, [r7, #18]
 8010354:	4619      	mov	r1, r3
 8010356:	68b8      	ldr	r0, [r7, #8]
 8010358:	f000 f816 	bl	8010388 <aatCalcF>
 801035c:	6178      	str	r0, [r7, #20]
    st25r3916AatLog("g : %d %d: %d",a, b, f);
    if (f < *f_min)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	697a      	ldr	r2, [r7, #20]
 8010364:	429a      	cmp	r2, r3
 8010366:	d20a      	bcs.n	801037e <aatGreedyDescent+0x7a>
    { /* Value is better than previous one */
        st25r3916AatLog("*\n");
        tuningStatus->aat_a = a;
 8010368:	7c7a      	ldrb	r2, [r7, #17]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	701a      	strb	r2, [r3, #0]
        tuningStatus->aat_b = b;
 801036e:	7c3a      	ldrb	r2, [r7, #16]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	705a      	strb	r2, [r3, #1]
        *f_min = f;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	697a      	ldr	r2, [r7, #20]
 8010378:	601a      	str	r2, [r3, #0]
        return previousDir;
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	e000      	b.n	8010380 <aatGreedyDescent+0x7c>
    }
    
    st25r3916AatLog("\n");
    return 0;
 801037e:	2300      	movs	r3, #0
}
 8010380:	4618      	mov	r0, r3
 8010382:	371c      	adds	r7, #28
 8010384:	46bd      	mov	sp, r7
 8010386:	bd90      	pop	{r4, r7, pc}

08010388 <aatCalcF>:

/*******************************************************************************/
static uint32_t aatCalcF(const struct st25r3916AatTuneParams *tuningParams, uint8_t amplitude, uint8_t phase)
{
 8010388:	b480      	push	{r7}
 801038a:	b089      	sub	sp, #36	; 0x24
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	460b      	mov	r3, r1
 8010392:	70fb      	strb	r3, [r7, #3]
 8010394:	4613      	mov	r3, r2
 8010396:	70bb      	strb	r3, [r7, #2]
    /* f(amp, pha) = (ampWeight * |amp - ampTarget|) + (phaWeight * |pha - phaTarget|) */
    uint8_t ampTarget = tuningParams->ampTarget;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	7a9b      	ldrb	r3, [r3, #10]
 801039c:	77fb      	strb	r3, [r7, #31]
    uint8_t phaTarget = tuningParams->phaTarget;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	7a1b      	ldrb	r3, [r3, #8]
 80103a2:	77bb      	strb	r3, [r7, #30]

    uint32_t ampWeight = tuningParams->ampWeight;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	7adb      	ldrb	r3, [r3, #11]
 80103a8:	61bb      	str	r3, [r7, #24]
    uint32_t phaWeight = tuningParams->phaWeight;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	7a5b      	ldrb	r3, [r3, #9]
 80103ae:	617b      	str	r3, [r7, #20]

    /* Temp variables to avoid MISRA R10.8 (cast on composite expression) */
    uint8_t ad = ((amplitude > ampTarget)  ? (amplitude - ampTarget) : (ampTarget - amplitude));
 80103b0:	78fa      	ldrb	r2, [r7, #3]
 80103b2:	7ffb      	ldrb	r3, [r7, #31]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d904      	bls.n	80103c2 <aatCalcF+0x3a>
 80103b8:	78fa      	ldrb	r2, [r7, #3]
 80103ba:	7ffb      	ldrb	r3, [r7, #31]
 80103bc:	1ad3      	subs	r3, r2, r3
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	e003      	b.n	80103ca <aatCalcF+0x42>
 80103c2:	7ffa      	ldrb	r2, [r7, #31]
 80103c4:	78fb      	ldrb	r3, [r7, #3]
 80103c6:	1ad3      	subs	r3, r2, r3
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	74fb      	strb	r3, [r7, #19]
    uint8_t pd = ((phase > phaTarget)      ? (phase - phaTarget)     : (phaTarget - phase));
 80103cc:	78ba      	ldrb	r2, [r7, #2]
 80103ce:	7fbb      	ldrb	r3, [r7, #30]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d904      	bls.n	80103de <aatCalcF+0x56>
 80103d4:	78ba      	ldrb	r2, [r7, #2]
 80103d6:	7fbb      	ldrb	r3, [r7, #30]
 80103d8:	1ad3      	subs	r3, r2, r3
 80103da:	b2db      	uxtb	r3, r3
 80103dc:	e003      	b.n	80103e6 <aatCalcF+0x5e>
 80103de:	7fba      	ldrb	r2, [r7, #30]
 80103e0:	78bb      	ldrb	r3, [r7, #2]
 80103e2:	1ad3      	subs	r3, r2, r3
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	74bb      	strb	r3, [r7, #18]

    uint32_t ampDelta = (uint32_t)ad;
 80103e8:	7cfb      	ldrb	r3, [r7, #19]
 80103ea:	60fb      	str	r3, [r7, #12]
    uint32_t phaDelta = (uint32_t)pd;
 80103ec:	7cbb      	ldrb	r3, [r7, #18]
 80103ee:	60bb      	str	r3, [r7, #8]

    return ((ampWeight * ampDelta) + (phaWeight * phaDelta));
 80103f0:	69bb      	ldr	r3, [r7, #24]
 80103f2:	68fa      	ldr	r2, [r7, #12]
 80103f4:	fb02 f203 	mul.w	r2, r2, r3
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	68b9      	ldr	r1, [r7, #8]
 80103fc:	fb01 f303 	mul.w	r3, r1, r3
 8010400:	4413      	add	r3, r2
}
 8010402:	4618      	mov	r0, r3
 8010404:	3724      	adds	r7, #36	; 0x24
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr

0801040e <aatStepDacVals>:

/*******************************************************************************/
static ReturnCode aatStepDacVals(const struct st25r3916AatTuneParams *tuningParams,uint8_t *a, uint8_t *b, int32_t dir)
{
 801040e:	b480      	push	{r7}
 8010410:	b087      	sub	sp, #28
 8010412:	af00      	add	r7, sp, #0
 8010414:	60f8      	str	r0, [r7, #12]
 8010416:	60b9      	str	r1, [r7, #8]
 8010418:	607a      	str	r2, [r7, #4]
 801041a:	603b      	str	r3, [r7, #0]
    int16_t aat_a = (int16_t)*a, aat_b = (int16_t)*b;
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	82fb      	strh	r3, [r7, #22]
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	82bb      	strh	r3, [r7, #20]
    
    switch (abs(dir))
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	bfb8      	it	lt
 801042e:	425b      	neglt	r3, r3
 8010430:	2b01      	cmp	r3, #1
 8010432:	d002      	beq.n	801043a <aatStepDacVals+0x2c>
 8010434:	2b02      	cmp	r3, #2
 8010436:	d02e      	beq.n	8010496 <aatStepDacVals+0x88>
 8010438:	e05b      	b.n	80104f2 <aatStepDacVals+0xe4>
    { /* Advance by steps size in requested direction */
        case 1:
            aat_a = (dir<0)?(aat_a - (int16_t)tuningParams->aat_a_stepWidth):(aat_a + (int16_t)tuningParams->aat_a_stepWidth);
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	da07      	bge.n	8010450 <aatStepDacVals+0x42>
 8010440:	8afa      	ldrh	r2, [r7, #22]
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	78db      	ldrb	r3, [r3, #3]
 8010446:	b29b      	uxth	r3, r3
 8010448:	1ad3      	subs	r3, r2, r3
 801044a:	b29b      	uxth	r3, r3
 801044c:	b21b      	sxth	r3, r3
 801044e:	e006      	b.n	801045e <aatStepDacVals+0x50>
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	78db      	ldrb	r3, [r3, #3]
 8010454:	b29a      	uxth	r2, r3
 8010456:	8afb      	ldrh	r3, [r7, #22]
 8010458:	4413      	add	r3, r2
 801045a:	b29b      	uxth	r3, r3
 801045c:	b21b      	sxth	r3, r3
 801045e:	82fb      	strh	r3, [r7, #22]
            if(aat_a < (int16_t)tuningParams->aat_a_min){ aat_a = (int16_t)tuningParams->aat_a_min; }
 8010460:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010464:	68fa      	ldr	r2, [r7, #12]
 8010466:	7812      	ldrb	r2, [r2, #0]
 8010468:	4293      	cmp	r3, r2
 801046a:	da02      	bge.n	8010472 <aatStepDacVals+0x64>
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	82fb      	strh	r3, [r7, #22]
            if(aat_a > (int16_t)tuningParams->aat_a_max){ aat_a = (int16_t)tuningParams->aat_a_max; }
 8010472:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010476:	68fa      	ldr	r2, [r7, #12]
 8010478:	7852      	ldrb	r2, [r2, #1]
 801047a:	4293      	cmp	r3, r2
 801047c:	dd02      	ble.n	8010484 <aatStepDacVals+0x76>
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	785b      	ldrb	r3, [r3, #1]
 8010482:	82fb      	strh	r3, [r7, #22]
            if ((int16_t)*a == aat_a) {return ERR_PARAM;}
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	461a      	mov	r2, r3
 801048a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801048e:	429a      	cmp	r2, r3
 8010490:	d131      	bne.n	80104f6 <aatStepDacVals+0xe8>
 8010492:	2307      	movs	r3, #7
 8010494:	e03b      	b.n	801050e <aatStepDacVals+0x100>
            break;
        case 2:
            aat_b = (dir<0)?(aat_b - (int16_t)tuningParams->aat_b_stepWidth):(aat_b + (int16_t)tuningParams->aat_b_stepWidth);
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	2b00      	cmp	r3, #0
 801049a:	da07      	bge.n	80104ac <aatStepDacVals+0x9e>
 801049c:	8aba      	ldrh	r2, [r7, #20]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	79db      	ldrb	r3, [r3, #7]
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	1ad3      	subs	r3, r2, r3
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	b21b      	sxth	r3, r3
 80104aa:	e006      	b.n	80104ba <aatStepDacVals+0xac>
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	79db      	ldrb	r3, [r3, #7]
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	8abb      	ldrh	r3, [r7, #20]
 80104b4:	4413      	add	r3, r2
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	b21b      	sxth	r3, r3
 80104ba:	82bb      	strh	r3, [r7, #20]
            if(aat_b < (int16_t)tuningParams->aat_b_min){ aat_b = (int16_t)tuningParams->aat_b_min; }
 80104bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80104c0:	68fa      	ldr	r2, [r7, #12]
 80104c2:	7912      	ldrb	r2, [r2, #4]
 80104c4:	4293      	cmp	r3, r2
 80104c6:	da02      	bge.n	80104ce <aatStepDacVals+0xc0>
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	791b      	ldrb	r3, [r3, #4]
 80104cc:	82bb      	strh	r3, [r7, #20]
            if(aat_b > (int16_t)tuningParams->aat_b_max){ aat_b = (int16_t)tuningParams->aat_b_max; }
 80104ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	7952      	ldrb	r2, [r2, #5]
 80104d6:	4293      	cmp	r3, r2
 80104d8:	dd02      	ble.n	80104e0 <aatStepDacVals+0xd2>
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	795b      	ldrb	r3, [r3, #5]
 80104de:	82bb      	strh	r3, [r7, #20]
            if ((int16_t)*b == aat_b) {return ERR_PARAM;}
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	781b      	ldrb	r3, [r3, #0]
 80104e4:	461a      	mov	r2, r3
 80104e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d105      	bne.n	80104fa <aatStepDacVals+0xec>
 80104ee:	2307      	movs	r3, #7
 80104f0:	e00d      	b.n	801050e <aatStepDacVals+0x100>
            break;
        default:
            return ERR_REQUEST;
 80104f2:	2305      	movs	r3, #5
 80104f4:	e00b      	b.n	801050e <aatStepDacVals+0x100>
            break;
 80104f6:	bf00      	nop
 80104f8:	e000      	b.n	80104fc <aatStepDacVals+0xee>
            break;
 80104fa:	bf00      	nop
    }
    /* We only get here if actual values have changed. In all other cases an error is returned */
    *a = (uint8_t)aat_a; 
 80104fc:	8afb      	ldrh	r3, [r7, #22]
 80104fe:	b2da      	uxtb	r2, r3
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	701a      	strb	r2, [r3, #0]
    *b = (uint8_t)aat_b;
 8010504:	8abb      	ldrh	r3, [r7, #20]
 8010506:	b2da      	uxtb	r2, r3
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 801050c:	2300      	movs	r3, #0

}
 801050e:	4618      	mov	r0, r3
 8010510:	371c      	adds	r7, #28
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr

0801051a <aatMeasure>:

/*******************************************************************************/
static ReturnCode aatMeasure(uint8_t serCap, uint8_t parCap, uint8_t *amplitude, uint8_t *phase, uint16_t *measureCnt)
{
 801051a:	b580      	push	{r7, lr}
 801051c:	b086      	sub	sp, #24
 801051e:	af00      	add	r7, sp, #0
 8010520:	60ba      	str	r2, [r7, #8]
 8010522:	607b      	str	r3, [r7, #4]
 8010524:	4603      	mov	r3, r0
 8010526:	73fb      	strb	r3, [r7, #15]
 8010528:	460b      	mov	r3, r1
 801052a:	73bb      	strb	r3, [r7, #14]
    ReturnCode err;

    *amplitude = 0; 
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	2200      	movs	r2, #0
 8010530:	701a      	strb	r2, [r3, #0]
    *phase     = 0;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2200      	movs	r2, #0
 8010536:	701a      	strb	r2, [r3, #0]

    st25r3916WriteRegister(ST25R3916_REG_ANT_TUNE_A, serCap);
 8010538:	7bfb      	ldrb	r3, [r7, #15]
 801053a:	4619      	mov	r1, r3
 801053c:	2026      	movs	r0, #38	; 0x26
 801053e:	f000 f97f 	bl	8010840 <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_ANT_TUNE_B, parCap);
 8010542:	7bbb      	ldrb	r3, [r7, #14]
 8010544:	4619      	mov	r1, r3
 8010546:	2027      	movs	r0, #39	; 0x27
 8010548:	f000 f97a 	bl	8010840 <st25r3916WriteRegister>

    /* Wait till caps have settled.. */
    platformDelay( ST25R3916_AAT_CAP_DELAY_MAX );
 801054c:	200a      	movs	r0, #10
 801054e:	f7f4 ffb3 	bl	80054b8 <HAL_Delay>
    
    /* Get amplitude and phase .. */
    err = rfalChipMeasureAmplitude(amplitude);
 8010552:	68b8      	ldr	r0, [r7, #8]
 8010554:	f7ff fa1b 	bl	800f98e <rfalChipMeasureAmplitude>
 8010558:	4603      	mov	r3, r0
 801055a:	82fb      	strh	r3, [r7, #22]
    if (ERR_NONE == err)
 801055c:	8afb      	ldrh	r3, [r7, #22]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d104      	bne.n	801056c <aatMeasure+0x52>
    {
        err = rfalChipMeasurePhase(phase);
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f7ff fa66 	bl	800fa34 <rfalChipMeasurePhase>
 8010568:	4603      	mov	r3, r0
 801056a:	82fb      	strh	r3, [r7, #22]
    }
      
    if( measureCnt != NULL )
 801056c:	6a3b      	ldr	r3, [r7, #32]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d005      	beq.n	801057e <aatMeasure+0x64>
    {
        (*measureCnt)++;
 8010572:	6a3b      	ldr	r3, [r7, #32]
 8010574:	881b      	ldrh	r3, [r3, #0]
 8010576:	3301      	adds	r3, #1
 8010578:	b29a      	uxth	r2, r3
 801057a:	6a3b      	ldr	r3, [r7, #32]
 801057c:	801a      	strh	r2, [r3, #0]
    }
    return err;
 801057e:	8afb      	ldrh	r3, [r7, #22]
}
 8010580:	4618      	mov	r0, r3
 8010582:	3718      	adds	r7, #24
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <__NVIC_EnableIRQ>:
{
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	4603      	mov	r3, r0
 8010590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010596:	2b00      	cmp	r3, #0
 8010598:	db0b      	blt.n	80105b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801059a:	79fb      	ldrb	r3, [r7, #7]
 801059c:	f003 021f 	and.w	r2, r3, #31
 80105a0:	4907      	ldr	r1, [pc, #28]	; (80105c0 <__NVIC_EnableIRQ+0x38>)
 80105a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105a6:	095b      	lsrs	r3, r3, #5
 80105a8:	2001      	movs	r0, #1
 80105aa:	fa00 f202 	lsl.w	r2, r0, r2
 80105ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80105b2:	bf00      	nop
 80105b4:	370c      	adds	r7, #12
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr
 80105be:	bf00      	nop
 80105c0:	e000e100 	.word	0xe000e100

080105c4 <__NVIC_DisableIRQ>:
{
 80105c4:	b480      	push	{r7}
 80105c6:	b083      	sub	sp, #12
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	4603      	mov	r3, r0
 80105cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80105ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	db10      	blt.n	80105f8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80105d6:	79fb      	ldrb	r3, [r7, #7]
 80105d8:	f003 021f 	and.w	r2, r3, #31
 80105dc:	4909      	ldr	r1, [pc, #36]	; (8010604 <__NVIC_DisableIRQ+0x40>)
 80105de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105e2:	095b      	lsrs	r3, r3, #5
 80105e4:	2001      	movs	r0, #1
 80105e6:	fa00 f202 	lsl.w	r2, r0, r2
 80105ea:	3320      	adds	r3, #32
 80105ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80105f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80105f4:	f3bf 8f6f 	isb	sy
}
 80105f8:	bf00      	nop
 80105fa:	370c      	adds	r7, #12
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr
 8010604:	e000e100 	.word	0xe000e100

08010608 <st25r3916comStart>:
 ******************************************************************************
 * LOCAL FUNCTION
 ******************************************************************************
 */
static void st25r3916comStart( void )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	af00      	add	r7, sp, #0
    /* Make this operation atomic, disabling ST25R3916 interrupt during communications*/
    platformProtectST25R391xComm();
 801060c:	4b0b      	ldr	r3, [pc, #44]	; (801063c <st25r3916comStart+0x34>)
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	3301      	adds	r3, #1
 8010612:	b2da      	uxtb	r2, r3
 8010614:	4b09      	ldr	r3, [pc, #36]	; (801063c <st25r3916comStart+0x34>)
 8010616:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8010618:	f3bf 8f4f 	dsb	sy
 801061c:	200a      	movs	r0, #10
 801061e:	f7ff ffd1 	bl	80105c4 <__NVIC_DisableIRQ>
 8010622:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010626:	f3bf 8f6f 	isb	sy
    /* I2C Start and send Slave Address */
    st25r3916I2CStart();
    st25r3916I2CSlaveAddrWR( ST25R3916_I2C_ADDR );
#else
    /* Perform the chip select */
    platformSpiSelect();
 801062a:	2110      	movs	r1, #16
 801062c:	4804      	ldr	r0, [pc, #16]	; (8010640 <st25r3916comStart+0x38>)
 801062e:	f7f3 ffa5 	bl	800457c <spiSelect>
    
    #if defined(ST25R391X_COM_SINGLETXRX)
        comBufIt = 0;                                  /* reset local buffer position   */
 8010632:	4b04      	ldr	r3, [pc, #16]	; (8010644 <st25r3916comStart+0x3c>)
 8010634:	2200      	movs	r2, #0
 8010636:	801a      	strh	r2, [r3, #0]
    #endif /* ST25R391X_COM_SINGLETXRX */
    
#endif /* RFAL_USE_I2C */
    
}
 8010638:	bf00      	nop
 801063a:	bd80      	pop	{r7, pc}
 801063c:	20000f85 	.word	0x20000f85
 8010640:	40020000 	.word	0x40020000
 8010644:	20000bee 	.word	0x20000bee

08010648 <st25r3916comStop>:


/*******************************************************************************/
static void st25r3916comStop( void )
{
 8010648:	b580      	push	{r7, lr}
 801064a:	af00      	add	r7, sp, #0
#ifdef RFAL_USE_I2C
    /* Generate Stop signal */
    st25r3916I2CStop();
#else
    /* Release the chip select */
    platformSpiDeselect();
 801064c:	2110      	movs	r1, #16
 801064e:	4809      	ldr	r0, [pc, #36]	; (8010674 <st25r3916comStop+0x2c>)
 8010650:	f7f3 ffa4 	bl	800459c <spiDeselect>
#endif /* RFAL_USE_I2C */
    
    /* reEnable the ST25R3916 interrupt */
    platformUnprotectST25R391xComm();
 8010654:	4b08      	ldr	r3, [pc, #32]	; (8010678 <st25r3916comStop+0x30>)
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	3b01      	subs	r3, #1
 801065a:	b2da      	uxtb	r2, r3
 801065c:	4b06      	ldr	r3, [pc, #24]	; (8010678 <st25r3916comStop+0x30>)
 801065e:	701a      	strb	r2, [r3, #0]
 8010660:	4b05      	ldr	r3, [pc, #20]	; (8010678 <st25r3916comStop+0x30>)
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d102      	bne.n	801066e <st25r3916comStop+0x26>
 8010668:	200a      	movs	r0, #10
 801066a:	f7ff ff8d 	bl	8010588 <__NVIC_EnableIRQ>
}
 801066e:	bf00      	nop
 8010670:	bd80      	pop	{r7, pc}
 8010672:	bf00      	nop
 8010674:	40020000 	.word	0x40020000
 8010678:	20000f85 	.word	0x20000f85

0801067c <st25r3916comTx>:
#endif /* RFAL_USE_I2C */


/*******************************************************************************/
static void st25r3916comTx( const uint8_t* txBuf, uint16_t txLen, bool last, bool txOnly )
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	4608      	mov	r0, r1
 8010686:	4611      	mov	r1, r2
 8010688:	461a      	mov	r2, r3
 801068a:	4603      	mov	r3, r0
 801068c:	807b      	strh	r3, [r7, #2]
 801068e:	460b      	mov	r3, r1
 8010690:	707b      	strb	r3, [r7, #1]
 8010692:	4613      	mov	r3, r2
 8010694:	703b      	strb	r3, [r7, #0]
    NO_WARNING(last);
    NO_WARNING(txOnly);
    
    if( txLen > 0U )
 8010696:	887b      	ldrh	r3, [r7, #2]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d02e      	beq.n	80106fa <st25r3916comTx+0x7e>
        platformI2CTx( txBuf, txLen, last, txOnly );
#else /* RFAL_USE_I2C */
    
        #ifdef ST25R391X_COM_SINGLETXRX
            
            ST_MEMCPY( &comBuf[comBufIt], txBuf, MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy tx data to local buffer                      */
 801069c:	4b19      	ldr	r3, [pc, #100]	; (8010704 <st25r3916comTx+0x88>)
 801069e:	881b      	ldrh	r3, [r3, #0]
 80106a0:	461a      	mov	r2, r3
 80106a2:	4b19      	ldr	r3, [pc, #100]	; (8010708 <st25r3916comTx+0x8c>)
 80106a4:	18d0      	adds	r0, r2, r3
 80106a6:	4b17      	ldr	r3, [pc, #92]	; (8010704 <st25r3916comTx+0x88>)
 80106a8:	881b      	ldrh	r3, [r3, #0]
 80106aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80106ae:	3301      	adds	r3, #1
 80106b0:	887a      	ldrh	r2, [r7, #2]
 80106b2:	4293      	cmp	r3, r2
 80106b4:	bf28      	it	cs
 80106b6:	4613      	movcs	r3, r2
 80106b8:	461a      	mov	r2, r3
 80106ba:	6879      	ldr	r1, [r7, #4]
 80106bc:	f006 fb69 	bl	8016d92 <memcpy>
            comBufIt += MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) );                               /* store position on local buffer                    */
 80106c0:	4b10      	ldr	r3, [pc, #64]	; (8010704 <st25r3916comTx+0x88>)
 80106c2:	881b      	ldrh	r3, [r3, #0]
 80106c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80106c8:	3301      	adds	r3, #1
 80106ca:	887a      	ldrh	r2, [r7, #2]
 80106cc:	4293      	cmp	r3, r2
 80106ce:	bf28      	it	cs
 80106d0:	4613      	movcs	r3, r2
 80106d2:	b29a      	uxth	r2, r3
 80106d4:	4b0b      	ldr	r3, [pc, #44]	; (8010704 <st25r3916comTx+0x88>)
 80106d6:	881b      	ldrh	r3, [r3, #0]
 80106d8:	4413      	add	r3, r2
 80106da:	b29a      	uxth	r2, r3
 80106dc:	4b09      	ldr	r3, [pc, #36]	; (8010704 <st25r3916comTx+0x88>)
 80106de:	801a      	strh	r2, [r3, #0]
                
            if( last && txOnly )                                                                 /* only perform SPI transaction if no Rx will follow */
 80106e0:	787b      	ldrb	r3, [r7, #1]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d009      	beq.n	80106fa <st25r3916comTx+0x7e>
 80106e6:	783b      	ldrb	r3, [r7, #0]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d006      	beq.n	80106fa <st25r3916comTx+0x7e>
            {
                platformSpiTxRx( comBuf, NULL, comBufIt );
 80106ec:	4b05      	ldr	r3, [pc, #20]	; (8010704 <st25r3916comTx+0x88>)
 80106ee:	881b      	ldrh	r3, [r3, #0]
 80106f0:	461a      	mov	r2, r3
 80106f2:	2100      	movs	r1, #0
 80106f4:	4804      	ldr	r0, [pc, #16]	; (8010708 <st25r3916comTx+0x8c>)
 80106f6:	f7f3 ff61 	bl	80045bc <spiTxRx>
            platformSpiTxRx( txBuf, NULL, txLen );
        #endif /* ST25R391X_COM_SINGLETXRX */
            
#endif /* RFAL_USE_I2C */
    }
}
 80106fa:	bf00      	nop
 80106fc:	3708      	adds	r7, #8
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}
 8010702:	bf00      	nop
 8010704:	20000bee 	.word	0x20000bee
 8010708:	200009ec 	.word	0x200009ec

0801070c <st25r3916comRx>:


/*******************************************************************************/
static void st25r3916comRx( uint8_t* rxBuf, uint16_t rxLen )
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b082      	sub	sp, #8
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	460b      	mov	r3, r1
 8010716:	807b      	strh	r3, [r7, #2]
    if( rxLen > 0U )
 8010718:	887b      	ldrh	r3, [r7, #2]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d034      	beq.n	8010788 <st25r3916comRx+0x7c>
#ifdef RFAL_USE_I2C
        platformI2CRx( rxBuf, rxLen );
#else /* RFAL_USE_I2C */
        
    #ifdef ST25R391X_COM_SINGLETXRX
        ST_MEMSET( &comBuf[comBufIt], 0x00, MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );     /* clear outgoing buffer                                  */
 801071e:	4b1c      	ldr	r3, [pc, #112]	; (8010790 <st25r3916comRx+0x84>)
 8010720:	881b      	ldrh	r3, [r3, #0]
 8010722:	461a      	mov	r2, r3
 8010724:	4b1b      	ldr	r3, [pc, #108]	; (8010794 <st25r3916comRx+0x88>)
 8010726:	18d0      	adds	r0, r2, r3
 8010728:	4b19      	ldr	r3, [pc, #100]	; (8010790 <st25r3916comRx+0x84>)
 801072a:	881b      	ldrh	r3, [r3, #0]
 801072c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010730:	3301      	adds	r3, #1
 8010732:	887a      	ldrh	r2, [r7, #2]
 8010734:	4293      	cmp	r3, r2
 8010736:	bf28      	it	cs
 8010738:	4613      	movcs	r3, r2
 801073a:	461a      	mov	r2, r3
 801073c:	2100      	movs	r1, #0
 801073e:	f006 fb33 	bl	8016da8 <memset>
        platformSpiTxRx( comBuf, comBuf, MIN( (comBufIt + rxLen), ST25R3916_BUF_LEN ) );        /* transceive as a single SPI call                        */
 8010742:	4b13      	ldr	r3, [pc, #76]	; (8010790 <st25r3916comRx+0x84>)
 8010744:	881b      	ldrh	r3, [r3, #0]
 8010746:	461a      	mov	r2, r3
 8010748:	887b      	ldrh	r3, [r7, #2]
 801074a:	4413      	add	r3, r2
 801074c:	461a      	mov	r2, r3
 801074e:	f240 2301 	movw	r3, #513	; 0x201
 8010752:	4293      	cmp	r3, r2
 8010754:	bf28      	it	cs
 8010756:	4613      	movcs	r3, r2
 8010758:	b29b      	uxth	r3, r3
 801075a:	461a      	mov	r2, r3
 801075c:	490d      	ldr	r1, [pc, #52]	; (8010794 <st25r3916comRx+0x88>)
 801075e:	480d      	ldr	r0, [pc, #52]	; (8010794 <st25r3916comRx+0x88>)
 8010760:	f7f3 ff2c 	bl	80045bc <spiTxRx>
        ST_MEMCPY( rxBuf, &comBuf[comBufIt], MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy from local buf to output buffer and skip cmd byte */
 8010764:	4b0a      	ldr	r3, [pc, #40]	; (8010790 <st25r3916comRx+0x84>)
 8010766:	881b      	ldrh	r3, [r3, #0]
 8010768:	461a      	mov	r2, r3
 801076a:	4b0a      	ldr	r3, [pc, #40]	; (8010794 <st25r3916comRx+0x88>)
 801076c:	18d1      	adds	r1, r2, r3
 801076e:	4b08      	ldr	r3, [pc, #32]	; (8010790 <st25r3916comRx+0x84>)
 8010770:	881b      	ldrh	r3, [r3, #0]
 8010772:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010776:	3301      	adds	r3, #1
 8010778:	887a      	ldrh	r2, [r7, #2]
 801077a:	4293      	cmp	r3, r2
 801077c:	bf28      	it	cs
 801077e:	4613      	movcs	r3, r2
 8010780:	461a      	mov	r2, r3
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f006 fb05 	bl	8016d92 <memcpy>
    #else
        platformSpiTxRx( NULL, rxBuf, rxLen );
    #endif /* ST25R391X_COM_SINGLETXRX */
#endif /* RFAL_USE_I2C */
    }
}
 8010788:	bf00      	nop
 801078a:	3708      	adds	r7, #8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	20000bee 	.word	0x20000bee
 8010794:	200009ec 	.word	0x200009ec

08010798 <st25r3916comTxByte>:


/*******************************************************************************/
static void st25r3916comTxByte( uint8_t txByte, bool last, bool txOnly )
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	4603      	mov	r3, r0
 80107a0:	71fb      	strb	r3, [r7, #7]
 80107a2:	460b      	mov	r3, r1
 80107a4:	71bb      	strb	r3, [r7, #6]
 80107a6:	4613      	mov	r3, r2
 80107a8:	717b      	strb	r3, [r7, #5]
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80107aa:	79fb      	ldrb	r3, [r7, #7]
 80107ac:	73fb      	strb	r3, [r7, #15]
    st25r3916comTx( &val, ST25R3916_REG_LEN, last, txOnly );
 80107ae:	797b      	ldrb	r3, [r7, #5]
 80107b0:	79ba      	ldrb	r2, [r7, #6]
 80107b2:	f107 000f 	add.w	r0, r7, #15
 80107b6:	2101      	movs	r1, #1
 80107b8:	f7ff ff60 	bl	801067c <st25r3916comTx>
}
 80107bc:	bf00      	nop
 80107be:	3710      	adds	r7, #16
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}

080107c4 <st25r3916ReadRegister>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode st25r3916ReadRegister( uint8_t reg, uint8_t* val )
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	4603      	mov	r3, r0
 80107cc:	6039      	str	r1, [r7, #0]
 80107ce:	71fb      	strb	r3, [r7, #7]
    return st25r3916ReadMultipleRegisters( reg, val, ST25R3916_REG_LEN );
 80107d0:	79fb      	ldrb	r3, [r7, #7]
 80107d2:	2201      	movs	r2, #1
 80107d4:	6839      	ldr	r1, [r7, #0]
 80107d6:	4618      	mov	r0, r3
 80107d8:	f000 f805 	bl	80107e6 <st25r3916ReadMultipleRegisters>
 80107dc:	4603      	mov	r3, r0
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3708      	adds	r7, #8
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}

080107e6 <st25r3916ReadMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916ReadMultipleRegisters( uint8_t reg, uint8_t* values, uint8_t length )
{
 80107e6:	b580      	push	{r7, lr}
 80107e8:	b082      	sub	sp, #8
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	4603      	mov	r3, r0
 80107ee:	6039      	str	r1, [r7, #0]
 80107f0:	71fb      	strb	r3, [r7, #7]
 80107f2:	4613      	mov	r3, r2
 80107f4:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 80107f6:	79bb      	ldrb	r3, [r7, #6]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d01c      	beq.n	8010836 <st25r3916ReadMultipleRegisters+0x50>
    {
        st25r3916comStart();
 80107fc:	f7ff ff04 	bl	8010608 <st25r3916comStart>
        
        /* If is a space-B register send a direct command first */
        if( (reg & ST25R3916_SPACE_B) != 0U )
 8010800:	79fb      	ldrb	r3, [r7, #7]
 8010802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010806:	2b00      	cmp	r3, #0
 8010808:	d004      	beq.n	8010814 <st25r3916ReadMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, false );
 801080a:	2200      	movs	r2, #0
 801080c:	2100      	movs	r1, #0
 801080e:	20fb      	movs	r0, #251	; 0xfb
 8010810:	f7ff ffc2 	bl	8010798 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 8010814:	79fb      	ldrb	r3, [r7, #7]
 8010816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801081a:	b2db      	uxtb	r3, r3
 801081c:	2200      	movs	r2, #0
 801081e:	2101      	movs	r1, #1
 8010820:	4618      	mov	r0, r3
 8010822:	f7ff ffb9 	bl	8010798 <st25r3916comTxByte>
        st25r3916comRepeatStart();
        st25r3916comRx( values, length );
 8010826:	79bb      	ldrb	r3, [r7, #6]
 8010828:	b29b      	uxth	r3, r3
 801082a:	4619      	mov	r1, r3
 801082c:	6838      	ldr	r0, [r7, #0]
 801082e:	f7ff ff6d 	bl	801070c <st25r3916comRx>
        st25r3916comStop();
 8010832:	f7ff ff09 	bl	8010648 <st25r3916comStop>
    }
    
    return ERR_NONE;
 8010836:	2300      	movs	r3, #0
}
 8010838:	4618      	mov	r0, r3
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <st25r3916WriteRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteRegister( uint8_t reg, uint8_t val )
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	4603      	mov	r3, r0
 8010848:	460a      	mov	r2, r1
 801084a:	71fb      	strb	r3, [r7, #7]
 801084c:	4613      	mov	r3, r2
 801084e:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 8010850:	79bb      	ldrb	r3, [r7, #6]
 8010852:	73fb      	strb	r3, [r7, #15]
    return st25r3916WriteMultipleRegisters( reg, &value, ST25R3916_REG_LEN );
 8010854:	f107 010f 	add.w	r1, r7, #15
 8010858:	79fb      	ldrb	r3, [r7, #7]
 801085a:	2201      	movs	r2, #1
 801085c:	4618      	mov	r0, r3
 801085e:	f000 f805 	bl	801086c <st25r3916WriteMultipleRegisters>
 8010862:	4603      	mov	r3, r0
}
 8010864:	4618      	mov	r0, r3
 8010866:	3710      	adds	r7, #16
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}

0801086c <st25r3916WriteMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916WriteMultipleRegisters( uint8_t reg, const uint8_t* values, uint8_t length )
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b082      	sub	sp, #8
 8010870:	af00      	add	r7, sp, #0
 8010872:	4603      	mov	r3, r0
 8010874:	6039      	str	r1, [r7, #0]
 8010876:	71fb      	strb	r3, [r7, #7]
 8010878:	4613      	mov	r3, r2
 801087a:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 801087c:	79bb      	ldrb	r3, [r7, #6]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d023      	beq.n	80108ca <st25r3916WriteMultipleRegisters+0x5e>
    {
        st25r3916comStart();
 8010882:	f7ff fec1 	bl	8010608 <st25r3916comStart>
        
        if( (reg & ST25R3916_SPACE_B) != 0U )
 8010886:	79fb      	ldrb	r3, [r7, #7]
 8010888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801088c:	2b00      	cmp	r3, #0
 801088e:	d004      	beq.n	801089a <st25r3916WriteMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, true );
 8010890:	2201      	movs	r2, #1
 8010892:	2100      	movs	r1, #0
 8010894:	20fb      	movs	r0, #251	; 0xfb
 8010896:	f7ff ff7f 	bl	8010798 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_WRITE_MODE), false, true );
 801089a:	79fb      	ldrb	r3, [r7, #7]
 801089c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108a0:	b2db      	uxtb	r3, r3
 80108a2:	2201      	movs	r2, #1
 80108a4:	2100      	movs	r1, #0
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7ff ff76 	bl	8010798 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 80108ac:	79bb      	ldrb	r3, [r7, #6]
 80108ae:	b299      	uxth	r1, r3
 80108b0:	2301      	movs	r3, #1
 80108b2:	2201      	movs	r2, #1
 80108b4:	6838      	ldr	r0, [r7, #0]
 80108b6:	f7ff fee1 	bl	801067c <st25r3916comTx>
        st25r3916comStop();
 80108ba:	f7ff fec5 	bl	8010648 <st25r3916comStop>
        
        /* Send a WriteMultiReg event to LED handling */
        st25r3916ledEvtWrMultiReg( reg, values, length);
 80108be:	79ba      	ldrb	r2, [r7, #6]
 80108c0:	79fb      	ldrb	r3, [r7, #7]
 80108c2:	6839      	ldr	r1, [r7, #0]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f000 fbba 	bl	801103e <st25r3916ledEvtWrMultiReg>
    }
    
    return ERR_NONE;
 80108ca:	2300      	movs	r3, #0
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}

080108d4 <st25r3916WriteFifo>:


/*******************************************************************************/
ReturnCode st25r3916WriteFifo( const uint8_t* values, uint16_t length )
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	460b      	mov	r3, r1
 80108de:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_FIFO_DEPTH )
 80108e0:	887b      	ldrh	r3, [r7, #2]
 80108e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108e6:	d901      	bls.n	80108ec <st25r3916WriteFifo+0x18>
    {
        return ERR_PARAM;
 80108e8:	2307      	movs	r3, #7
 80108ea:	e012      	b.n	8010912 <st25r3916WriteFifo+0x3e>
    }
    
    if( length > 0U )
 80108ec:	887b      	ldrh	r3, [r7, #2]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d00e      	beq.n	8010910 <st25r3916WriteFifo+0x3c>
    {
        st25r3916comStart();
 80108f2:	f7ff fe89 	bl	8010608 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_LOAD, false, true );
 80108f6:	2201      	movs	r2, #1
 80108f8:	2100      	movs	r1, #0
 80108fa:	2080      	movs	r0, #128	; 0x80
 80108fc:	f7ff ff4c 	bl	8010798 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 8010900:	8879      	ldrh	r1, [r7, #2]
 8010902:	2301      	movs	r3, #1
 8010904:	2201      	movs	r2, #1
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f7ff feb8 	bl	801067c <st25r3916comTx>
        st25r3916comStop();
 801090c:	f7ff fe9c 	bl	8010648 <st25r3916comStop>
    }

    return ERR_NONE;
 8010910:	2300      	movs	r3, #0
}
 8010912:	4618      	mov	r0, r3
 8010914:	3708      	adds	r7, #8
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <st25r3916ReadFifo>:


/*******************************************************************************/
ReturnCode st25r3916ReadFifo( uint8_t* buf, uint16_t length )
{
 801091a:	b580      	push	{r7, lr}
 801091c:	b082      	sub	sp, #8
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]
 8010922:	460b      	mov	r3, r1
 8010924:	807b      	strh	r3, [r7, #2]
    if( length > 0U )
 8010926:	887b      	ldrh	r3, [r7, #2]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d00d      	beq.n	8010948 <st25r3916ReadFifo+0x2e>
    {
        st25r3916comStart();
 801092c:	f7ff fe6c 	bl	8010608 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_READ, true, false );
 8010930:	2200      	movs	r2, #0
 8010932:	2101      	movs	r1, #1
 8010934:	209f      	movs	r0, #159	; 0x9f
 8010936:	f7ff ff2f 	bl	8010798 <st25r3916comTxByte>
        
        st25r3916comRepeatStart();
        st25r3916comRx( buf, length );
 801093a:	887b      	ldrh	r3, [r7, #2]
 801093c:	4619      	mov	r1, r3
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f7ff fee4 	bl	801070c <st25r3916comRx>
        st25r3916comStop();
 8010944:	f7ff fe80 	bl	8010648 <st25r3916comStop>
    }

    return ERR_NONE;
 8010948:	2300      	movs	r3, #0
}
 801094a:	4618      	mov	r0, r3
 801094c:	3708      	adds	r7, #8
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <st25r3916ExecuteCommand>:
}


/*******************************************************************************/
ReturnCode st25r3916ExecuteCommand( uint8_t cmd )
{
 8010952:	b580      	push	{r7, lr}
 8010954:	b082      	sub	sp, #8
 8010956:	af00      	add	r7, sp, #0
 8010958:	4603      	mov	r3, r0
 801095a:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 801095c:	f7ff fe54 	bl	8010608 <st25r3916comStart>
    st25r3916comTxByte( (cmd | ST25R3916_CMD_MODE ), true, true );
 8010960:	79fb      	ldrb	r3, [r7, #7]
 8010962:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8010966:	b2db      	uxtb	r3, r3
 8010968:	2201      	movs	r2, #1
 801096a:	2101      	movs	r1, #1
 801096c:	4618      	mov	r0, r3
 801096e:	f7ff ff13 	bl	8010798 <st25r3916comTxByte>
    st25r3916comStop();
 8010972:	f7ff fe69 	bl	8010648 <st25r3916comStop>
    
    /* Send a cmd event to LED handling */
    st25r3916ledEvtCmd(cmd);
 8010976:	79fb      	ldrb	r3, [r7, #7]
 8010978:	4618      	mov	r0, r3
 801097a:	f000 fb81 	bl	8011080 <st25r3916ledEvtCmd>
    
    return ERR_NONE;
 801097e:	2300      	movs	r3, #0
}
 8010980:	4618      	mov	r0, r3
 8010982:	3708      	adds	r7, #8
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <st25r3916ReadTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916ReadTestRegister( uint8_t reg, uint8_t* val )
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	4603      	mov	r3, r0
 8010990:	6039      	str	r1, [r7, #0]
 8010992:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 8010994:	f7ff fe38 	bl	8010608 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, false );
 8010998:	2200      	movs	r2, #0
 801099a:	2100      	movs	r1, #0
 801099c:	20fc      	movs	r0, #252	; 0xfc
 801099e:	f7ff fefb 	bl	8010798 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 80109a2:	79fb      	ldrb	r3, [r7, #7]
 80109a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109a8:	b2db      	uxtb	r3, r3
 80109aa:	2200      	movs	r2, #0
 80109ac:	2101      	movs	r1, #1
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7ff fef2 	bl	8010798 <st25r3916comTxByte>
    st25r3916comRepeatStart();
    st25r3916comRx( val, ST25R3916_REG_LEN );
 80109b4:	2101      	movs	r1, #1
 80109b6:	6838      	ldr	r0, [r7, #0]
 80109b8:	f7ff fea8 	bl	801070c <st25r3916comRx>
    st25r3916comStop();
 80109bc:	f7ff fe44 	bl	8010648 <st25r3916comStop>
    
    return ERR_NONE;
 80109c0:	2300      	movs	r3, #0
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3708      	adds	r7, #8
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}

080109ca <st25r3916WriteTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteTestRegister( uint8_t reg, uint8_t val )
{
 80109ca:	b580      	push	{r7, lr}
 80109cc:	b084      	sub	sp, #16
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	4603      	mov	r3, r0
 80109d2:	460a      	mov	r2, r1
 80109d4:	71fb      	strb	r3, [r7, #7]
 80109d6:	4613      	mov	r3, r2
 80109d8:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 80109da:	79bb      	ldrb	r3, [r7, #6]
 80109dc:	73fb      	strb	r3, [r7, #15]

    st25r3916comStart();
 80109de:	f7ff fe13 	bl	8010608 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, true );
 80109e2:	2201      	movs	r2, #1
 80109e4:	2100      	movs	r1, #0
 80109e6:	20fc      	movs	r0, #252	; 0xfc
 80109e8:	f7ff fed6 	bl	8010798 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_WRITE_MODE), false, true );
 80109ec:	79fb      	ldrb	r3, [r7, #7]
 80109ee:	2201      	movs	r2, #1
 80109f0:	2100      	movs	r1, #0
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7ff fed0 	bl	8010798 <st25r3916comTxByte>
    st25r3916comTx( &value, ST25R3916_REG_LEN, true, true );
 80109f8:	f107 000f 	add.w	r0, r7, #15
 80109fc:	2301      	movs	r3, #1
 80109fe:	2201      	movs	r2, #1
 8010a00:	2101      	movs	r1, #1
 8010a02:	f7ff fe3b 	bl	801067c <st25r3916comTx>
    st25r3916comStop();
 8010a06:	f7ff fe1f 	bl	8010648 <st25r3916comStop>
    
    return ERR_NONE;
 8010a0a:	2300      	movs	r3, #0
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3710      	adds	r7, #16
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}

08010a14 <st25r3916ClrRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b084      	sub	sp, #16
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	460a      	mov	r2, r1
 8010a1e:	71fb      	strb	r3, [r7, #7]
 8010a20:	4613      	mov	r3, r2
 8010a22:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8010a24:	f107 020d 	add.w	r2, r7, #13
 8010a28:	79fb      	ldrb	r3, [r7, #7]
 8010a2a:	4611      	mov	r1, r2
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7ff fec9 	bl	80107c4 <st25r3916ReadRegister>
 8010a32:	4603      	mov	r3, r0
 8010a34:	81fb      	strh	r3, [r7, #14]
 8010a36:	89fb      	ldrh	r3, [r7, #14]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d001      	beq.n	8010a40 <st25r3916ClrRegisterBits+0x2c>
 8010a3c:	89fb      	ldrh	r3, [r7, #14]
 8010a3e:	e01c      	b.n	8010a7a <st25r3916ClrRegisterBits+0x66>
    
    /* Only perform a Write if value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 8010a40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010a44:	43db      	mvns	r3, r3
 8010a46:	b25a      	sxtb	r2, r3
 8010a48:	7b7b      	ldrb	r3, [r7, #13]
 8010a4a:	b25b      	sxtb	r3, r3
 8010a4c:	4013      	ands	r3, r2
 8010a4e:	b25b      	sxtb	r3, r3
 8010a50:	b2da      	uxtb	r2, r3
 8010a52:	7b7b      	ldrb	r3, [r7, #13]
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d101      	bne.n	8010a5c <st25r3916ClrRegisterBits+0x48>
    {
        return ERR_NONE;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	e00e      	b.n	8010a7a <st25r3916ClrRegisterBits+0x66>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (uint8_t)(rdVal & ~clr_mask) );
 8010a5c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010a60:	43db      	mvns	r3, r3
 8010a62:	b25a      	sxtb	r2, r3
 8010a64:	7b7b      	ldrb	r3, [r7, #13]
 8010a66:	b25b      	sxtb	r3, r3
 8010a68:	4013      	ands	r3, r2
 8010a6a:	b25b      	sxtb	r3, r3
 8010a6c:	b2da      	uxtb	r2, r3
 8010a6e:	79fb      	ldrb	r3, [r7, #7]
 8010a70:	4611      	mov	r1, r2
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7ff fee4 	bl	8010840 <st25r3916WriteRegister>
 8010a78:	4603      	mov	r3, r0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}

08010a82 <st25r3916SetRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8010a82:	b580      	push	{r7, lr}
 8010a84:	b084      	sub	sp, #16
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	4603      	mov	r3, r0
 8010a8a:	460a      	mov	r2, r1
 8010a8c:	71fb      	strb	r3, [r7, #7]
 8010a8e:	4613      	mov	r3, r2
 8010a90:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8010a92:	f107 020d 	add.w	r2, r7, #13
 8010a96:	79fb      	ldrb	r3, [r7, #7]
 8010a98:	4611      	mov	r1, r2
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7ff fe92 	bl	80107c4 <st25r3916ReadRegister>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	81fb      	strh	r3, [r7, #14]
 8010aa4:	89fb      	ldrh	r3, [r7, #14]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d001      	beq.n	8010aae <st25r3916SetRegisterBits+0x2c>
 8010aaa:	89fb      	ldrh	r3, [r7, #14]
 8010aac:	e012      	b.n	8010ad4 <st25r3916SetRegisterBits+0x52>
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 8010aae:	7b7a      	ldrb	r2, [r7, #13]
 8010ab0:	79bb      	ldrb	r3, [r7, #6]
 8010ab2:	4313      	orrs	r3, r2
 8010ab4:	b2da      	uxtb	r2, r3
 8010ab6:	7b7b      	ldrb	r3, [r7, #13]
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d101      	bne.n	8010ac0 <st25r3916SetRegisterBits+0x3e>
    {
        return ERR_NONE;
 8010abc:	2300      	movs	r3, #0
 8010abe:	e009      	b.n	8010ad4 <st25r3916SetRegisterBits+0x52>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (rdVal | set_mask) );
 8010ac0:	7b7a      	ldrb	r2, [r7, #13]
 8010ac2:	79bb      	ldrb	r3, [r7, #6]
 8010ac4:	4313      	orrs	r3, r2
 8010ac6:	b2da      	uxtb	r2, r3
 8010ac8:	79fb      	ldrb	r3, [r7, #7]
 8010aca:	4611      	mov	r1, r2
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7ff feb7 	bl	8010840 <st25r3916WriteRegister>
 8010ad2:	4603      	mov	r3, r0
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3710      	adds	r7, #16
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}

08010adc <st25r3916ChangeRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	71fb      	strb	r3, [r7, #7]
 8010ae6:	460b      	mov	r3, r1
 8010ae8:	71bb      	strb	r3, [r7, #6]
 8010aea:	4613      	mov	r3, r2
 8010aec:	717b      	strb	r3, [r7, #5]
    return st25r3916ModifyRegister(reg, valueMask, (valueMask & value) );
 8010aee:	79ba      	ldrb	r2, [r7, #6]
 8010af0:	797b      	ldrb	r3, [r7, #5]
 8010af2:	4013      	ands	r3, r2
 8010af4:	b2da      	uxtb	r2, r3
 8010af6:	79b9      	ldrb	r1, [r7, #6]
 8010af8:	79fb      	ldrb	r3, [r7, #7]
 8010afa:	4618      	mov	r0, r3
 8010afc:	f000 f805 	bl	8010b0a <st25r3916ModifyRegister>
 8010b00:	4603      	mov	r3, r0
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3708      	adds	r7, #8
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}

08010b0a <st25r3916ModifyRegister>:


/*******************************************************************************/
ReturnCode st25r3916ModifyRegister( uint8_t reg, uint8_t clr_mask, uint8_t set_mask )
{
 8010b0a:	b580      	push	{r7, lr}
 8010b0c:	b084      	sub	sp, #16
 8010b0e:	af00      	add	r7, sp, #0
 8010b10:	4603      	mov	r3, r0
 8010b12:	71fb      	strb	r3, [r7, #7]
 8010b14:	460b      	mov	r3, r1
 8010b16:	71bb      	strb	r3, [r7, #6]
 8010b18:	4613      	mov	r3, r2
 8010b1a:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8010b1c:	f107 020c 	add.w	r2, r7, #12
 8010b20:	79fb      	ldrb	r3, [r7, #7]
 8010b22:	4611      	mov	r1, r2
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7ff fe4d 	bl	80107c4 <st25r3916ReadRegister>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	81fb      	strh	r3, [r7, #14]
 8010b2e:	89fb      	ldrh	r3, [r7, #14]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d001      	beq.n	8010b38 <st25r3916ModifyRegister+0x2e>
 8010b34:	89fb      	ldrh	r3, [r7, #14]
 8010b36:	e019      	b.n	8010b6c <st25r3916ModifyRegister+0x62>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 8010b38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010b3c:	43db      	mvns	r3, r3
 8010b3e:	b25a      	sxtb	r2, r3
 8010b40:	7b3b      	ldrb	r3, [r7, #12]
 8010b42:	b25b      	sxtb	r3, r3
 8010b44:	4013      	ands	r3, r2
 8010b46:	b25b      	sxtb	r3, r3
 8010b48:	737b      	strb	r3, [r7, #13]
    wrVal |= set_mask;
 8010b4a:	7b7a      	ldrb	r2, [r7, #13]
 8010b4c:	797b      	ldrb	r3, [r7, #5]
 8010b4e:	4313      	orrs	r3, r2
 8010b50:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 8010b52:	7b3b      	ldrb	r3, [r7, #12]
 8010b54:	7b7a      	ldrb	r2, [r7, #13]
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d101      	bne.n	8010b5e <st25r3916ModifyRegister+0x54>
    {
        return ERR_NONE;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	e006      	b.n	8010b6c <st25r3916ModifyRegister+0x62>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, wrVal );
 8010b5e:	7b7a      	ldrb	r2, [r7, #13]
 8010b60:	79fb      	ldrb	r3, [r7, #7]
 8010b62:	4611      	mov	r1, r2
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7ff fe6b 	bl	8010840 <st25r3916WriteRegister>
 8010b6a:	4603      	mov	r3, r0
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3710      	adds	r7, #16
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <st25r3916ChangeTestRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	71fb      	strb	r3, [r7, #7]
 8010b7e:	460b      	mov	r3, r1
 8010b80:	71bb      	strb	r3, [r7, #6]
 8010b82:	4613      	mov	r3, r2
 8010b84:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 8010b86:	f107 020c 	add.w	r2, r7, #12
 8010b8a:	79fb      	ldrb	r3, [r7, #7]
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7ff fefa 	bl	8010988 <st25r3916ReadTestRegister>
 8010b94:	4603      	mov	r3, r0
 8010b96:	81fb      	strh	r3, [r7, #14]
 8010b98:	89fb      	ldrh	r3, [r7, #14]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d001      	beq.n	8010ba2 <st25r3916ChangeTestRegisterBits+0x2e>
 8010b9e:	89fb      	ldrh	r3, [r7, #14]
 8010ba0:	e01c      	b.n	8010bdc <st25r3916ChangeTestRegisterBits+0x68>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 8010ba2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010ba6:	43db      	mvns	r3, r3
 8010ba8:	b25a      	sxtb	r2, r3
 8010baa:	7b3b      	ldrb	r3, [r7, #12]
 8010bac:	b25b      	sxtb	r3, r3
 8010bae:	4013      	ands	r3, r2
 8010bb0:	b25b      	sxtb	r3, r3
 8010bb2:	737b      	strb	r3, [r7, #13]
    wrVal |= (uint8_t)(value & valueMask);
 8010bb4:	797a      	ldrb	r2, [r7, #5]
 8010bb6:	79bb      	ldrb	r3, [r7, #6]
 8010bb8:	4013      	ands	r3, r2
 8010bba:	b2da      	uxtb	r2, r3
 8010bbc:	7b7b      	ldrb	r3, [r7, #13]
 8010bbe:	4313      	orrs	r3, r2
 8010bc0:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 8010bc2:	7b3b      	ldrb	r3, [r7, #12]
 8010bc4:	7b7a      	ldrb	r2, [r7, #13]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d101      	bne.n	8010bce <st25r3916ChangeTestRegisterBits+0x5a>
    {
        return ERR_NONE;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	e006      	b.n	8010bdc <st25r3916ChangeTestRegisterBits+0x68>
    }
    
    /* Write new reg value */
    return st25r3916WriteTestRegister(reg, wrVal );
 8010bce:	7b7a      	ldrb	r2, [r7, #13]
 8010bd0:	79fb      	ldrb	r3, [r7, #7]
 8010bd2:	4611      	mov	r1, r2
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7ff fef8 	bl	80109ca <st25r3916WriteTestRegister>
 8010bda:	4603      	mov	r3, r0
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3710      	adds	r7, #16
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <st25r3916CheckReg>:


/*******************************************************************************/
bool st25r3916CheckReg( uint8_t reg, uint8_t mask, uint8_t val )
{    
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	4603      	mov	r3, r0
 8010bec:	71fb      	strb	r3, [r7, #7]
 8010bee:	460b      	mov	r3, r1
 8010bf0:	71bb      	strb	r3, [r7, #6]
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( reg, &regVal );
 8010bfa:	f107 020f 	add.w	r2, r7, #15
 8010bfe:	79fb      	ldrb	r3, [r7, #7]
 8010c00:	4611      	mov	r1, r2
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7ff fdde 	bl	80107c4 <st25r3916ReadRegister>
    
    return ( (regVal & mask) == val );
 8010c08:	7bfa      	ldrb	r2, [r7, #15]
 8010c0a:	79bb      	ldrb	r3, [r7, #6]
 8010c0c:	4013      	ands	r3, r2
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	797a      	ldrb	r2, [r7, #5]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	bf0c      	ite	eq
 8010c16:	2301      	moveq	r3, #1
 8010c18:	2300      	movne	r3, #0
 8010c1a:	b2db      	uxtb	r3, r3
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3710      	adds	r7, #16
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <st25r3916IsRegValid>:


/*******************************************************************************/
bool st25r3916IsRegValid( uint8_t reg )
{
 8010c24:	b480      	push	{r7}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	71fb      	strb	r3, [r7, #7]
    if( !(( (int16_t)reg >= (int16_t)ST25R3916_REG_IO_CONF1) && (reg <= (ST25R3916_SPACE_B | ST25R3916_REG_IC_IDENTITY)) ))
 8010c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	da01      	bge.n	8010c3a <st25r3916IsRegValid+0x16>
    {
        return false;
 8010c36:	2300      	movs	r3, #0
 8010c38:	e000      	b.n	8010c3c <st25r3916IsRegValid+0x18>
    }    
    return true;
 8010c3a:	2301      	movs	r3, #1
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	370c      	adds	r7, #12
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <__NVIC_EnableIRQ>:
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	4603      	mov	r3, r0
 8010c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	db0b      	blt.n	8010c72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010c5a:	79fb      	ldrb	r3, [r7, #7]
 8010c5c:	f003 021f 	and.w	r2, r3, #31
 8010c60:	4907      	ldr	r1, [pc, #28]	; (8010c80 <__NVIC_EnableIRQ+0x38>)
 8010c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c66:	095b      	lsrs	r3, r3, #5
 8010c68:	2001      	movs	r0, #1
 8010c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8010c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010c72:	bf00      	nop
 8010c74:	370c      	adds	r7, #12
 8010c76:	46bd      	mov	sp, r7
 8010c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7c:	4770      	bx	lr
 8010c7e:	bf00      	nop
 8010c80:	e000e100 	.word	0xe000e100

08010c84 <__NVIC_DisableIRQ>:
{
 8010c84:	b480      	push	{r7}
 8010c86:	b083      	sub	sp, #12
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	db10      	blt.n	8010cb8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010c96:	79fb      	ldrb	r3, [r7, #7]
 8010c98:	f003 021f 	and.w	r2, r3, #31
 8010c9c:	4909      	ldr	r1, [pc, #36]	; (8010cc4 <__NVIC_DisableIRQ+0x40>)
 8010c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ca2:	095b      	lsrs	r3, r3, #5
 8010ca4:	2001      	movs	r0, #1
 8010ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8010caa:	3320      	adds	r3, #32
 8010cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010cb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010cb4:	f3bf 8f6f 	isb	sy
}
 8010cb8:	bf00      	nop
 8010cba:	370c      	adds	r7, #12
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr
 8010cc4:	e000e100 	.word	0xe000e100

08010cc8 <st25r3916InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3916InitInterrupts( void )
{
 8010cc8:	b480      	push	{r7}
 8010cca:	af00      	add	r7, sp, #0
    platformIrqST25R3916PinInitialize();
    platformIrqST25R3916SetCallback( st25r3916Isr );
    
    
    st25r3916interrupt.callback     = NULL;
 8010ccc:	4b08      	ldr	r3, [pc, #32]	; (8010cf0 <st25r3916InitInterrupts+0x28>)
 8010cce:	2200      	movs	r2, #0
 8010cd0:	605a      	str	r2, [r3, #4]
    st25r3916interrupt.prevCallback = NULL;
 8010cd2:	4b07      	ldr	r3, [pc, #28]	; (8010cf0 <st25r3916InitInterrupts+0x28>)
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	601a      	str	r2, [r3, #0]
    st25r3916interrupt.status       = ST25R3916_IRQ_MASK_NONE;
 8010cd8:	4b05      	ldr	r3, [pc, #20]	; (8010cf0 <st25r3916InitInterrupts+0x28>)
 8010cda:	2200      	movs	r2, #0
 8010cdc:	609a      	str	r2, [r3, #8]
    st25r3916interrupt.mask         = ST25R3916_IRQ_MASK_NONE;
 8010cde:	4b04      	ldr	r3, [pc, #16]	; (8010cf0 <st25r3916InitInterrupts+0x28>)
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	60da      	str	r2, [r3, #12]
}
 8010ce4:	bf00      	nop
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cec:	4770      	bx	lr
 8010cee:	bf00      	nop
 8010cf0:	20000bf0 	.word	0x20000bf0

08010cf4 <st25r3916Isr>:


/*******************************************************************************/
void st25r3916Isr( void )
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	af00      	add	r7, sp, #0
    st25r3916CheckForReceivedInterrupts();
 8010cf8:	f000 f80c 	bl	8010d14 <st25r3916CheckForReceivedInterrupts>
    
    // Check if callback is set and run it
    if( NULL != st25r3916interrupt.callback )
 8010cfc:	4b04      	ldr	r3, [pc, #16]	; (8010d10 <st25r3916Isr+0x1c>)
 8010cfe:	685b      	ldr	r3, [r3, #4]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d002      	beq.n	8010d0a <st25r3916Isr+0x16>
    {
        st25r3916interrupt.callback();
 8010d04:	4b02      	ldr	r3, [pc, #8]	; (8010d10 <st25r3916Isr+0x1c>)
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	4798      	blx	r3
    }
}
 8010d0a:	bf00      	nop
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	20000bf0 	.word	0x20000bf0

08010d14 <st25r3916CheckForReceivedInterrupts>:


/*******************************************************************************/
void st25r3916CheckForReceivedInterrupts( void )
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b082      	sub	sp, #8
 8010d18:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3916_INT_REGS_LEN];
    uint32_t irqStatus;

    /* Initialize iregs */
    irqStatus = ST25R3916_IRQ_MASK_NONE;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 8010d1e:	463b      	mov	r3, r7
 8010d20:	2204      	movs	r2, #4
 8010d22:	21ff      	movs	r1, #255	; 0xff
 8010d24:	4618      	mov	r0, r3
 8010d26:	f006 f83f 	bl	8016da8 <memset>
    
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8010d2a:	e019      	b.n	8010d60 <st25r3916CheckForReceivedInterrupts+0x4c>
   {
       st25r3916ReadMultipleRegisters( ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN );
 8010d2c:	463b      	mov	r3, r7
 8010d2e:	2204      	movs	r2, #4
 8010d30:	4619      	mov	r1, r3
 8010d32:	201a      	movs	r0, #26
 8010d34:	f7ff fd57 	bl	80107e6 <st25r3916ReadMultipleRegisters>

       irqStatus |= (uint32_t)iregs[0];
 8010d38:	783b      	ldrb	r3, [r7, #0]
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[1]<<8;
 8010d42:	787b      	ldrb	r3, [r7, #1]
 8010d44:	021b      	lsls	r3, r3, #8
 8010d46:	687a      	ldr	r2, [r7, #4]
 8010d48:	4313      	orrs	r3, r2
 8010d4a:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[2]<<16;
 8010d4c:	78bb      	ldrb	r3, [r7, #2]
 8010d4e:	041b      	lsls	r3, r3, #16
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	4313      	orrs	r3, r2
 8010d54:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[3]<<24;
 8010d56:	78fb      	ldrb	r3, [r7, #3]
 8010d58:	061b      	lsls	r3, r3, #24
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	4313      	orrs	r3, r2
 8010d5e:	607b      	str	r3, [r7, #4]
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8010d60:	2110      	movs	r1, #16
 8010d62:	4818      	ldr	r0, [pc, #96]	; (8010dc4 <st25r3916CheckForReceivedInterrupts+0xb0>)
 8010d64:	f7f4 fe80 	bl	8005a68 <HAL_GPIO_ReadPin>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	2b01      	cmp	r3, #1
 8010d6c:	d0de      	beq.n	8010d2c <st25r3916CheckForReceivedInterrupts+0x18>
   }
   
   /* Forward all interrupts, even masked ones to application */
   platformProtectST25R391xIrqStatus();
 8010d6e:	4b16      	ldr	r3, [pc, #88]	; (8010dc8 <st25r3916CheckForReceivedInterrupts+0xb4>)
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	3301      	adds	r3, #1
 8010d74:	b2da      	uxtb	r2, r3
 8010d76:	4b14      	ldr	r3, [pc, #80]	; (8010dc8 <st25r3916CheckForReceivedInterrupts+0xb4>)
 8010d78:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8010d7a:	f3bf 8f4f 	dsb	sy
 8010d7e:	200a      	movs	r0, #10
 8010d80:	f7ff ff80 	bl	8010c84 <__NVIC_DisableIRQ>
 8010d84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010d88:	f3bf 8f6f 	isb	sy
   st25r3916interrupt.status |= irqStatus;
 8010d8c:	4b0f      	ldr	r3, [pc, #60]	; (8010dcc <st25r3916CheckForReceivedInterrupts+0xb8>)
 8010d8e:	689a      	ldr	r2, [r3, #8]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4313      	orrs	r3, r2
 8010d94:	4a0d      	ldr	r2, [pc, #52]	; (8010dcc <st25r3916CheckForReceivedInterrupts+0xb8>)
 8010d96:	6093      	str	r3, [r2, #8]
   platformUnprotectST25R391xIrqStatus();
 8010d98:	4b0b      	ldr	r3, [pc, #44]	; (8010dc8 <st25r3916CheckForReceivedInterrupts+0xb4>)
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	3b01      	subs	r3, #1
 8010d9e:	b2da      	uxtb	r2, r3
 8010da0:	4b09      	ldr	r3, [pc, #36]	; (8010dc8 <st25r3916CheckForReceivedInterrupts+0xb4>)
 8010da2:	701a      	strb	r2, [r3, #0]
 8010da4:	4b08      	ldr	r3, [pc, #32]	; (8010dc8 <st25r3916CheckForReceivedInterrupts+0xb4>)
 8010da6:	781b      	ldrb	r3, [r3, #0]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d102      	bne.n	8010db2 <st25r3916CheckForReceivedInterrupts+0x9e>
 8010dac:	200a      	movs	r0, #10
 8010dae:	f7ff ff4b 	bl	8010c48 <__NVIC_EnableIRQ>

   /* Send an IRQ event to LED handling */
   st25r3916ledEvtIrq( st25r3916interrupt.status );
 8010db2:	4b06      	ldr	r3, [pc, #24]	; (8010dcc <st25r3916CheckForReceivedInterrupts+0xb8>)
 8010db4:	689b      	ldr	r3, [r3, #8]
 8010db6:	4618      	mov	r0, r3
 8010db8:	f000 f927 	bl	801100a <st25r3916ledEvtIrq>
}
 8010dbc:	bf00      	nop
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	40020800 	.word	0x40020800
 8010dc8:	20000f85 	.word	0x20000f85
 8010dcc:	20000bf0 	.word	0x20000bf0

08010dd0 <st25r3916ModifyInterrupts>:


/*******************************************************************************/
void st25r3916ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b086      	sub	sp, #24
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
    uint8_t  i;
    uint32_t old_mask;
    uint32_t new_mask;
    

    old_mask = st25r3916interrupt.mask;
 8010dda:	4b1e      	ldr	r3, [pc, #120]	; (8010e54 <st25r3916ModifyInterrupts+0x84>)
 8010ddc:	68db      	ldr	r3, [r3, #12]
 8010dde:	613b      	str	r3, [r7, #16]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	43da      	mvns	r2, r3
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	401a      	ands	r2, r3
 8010de8:	6939      	ldr	r1, [r7, #16]
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	400b      	ands	r3, r1
 8010dee:	4313      	orrs	r3, r2
 8010df0:	60fb      	str	r3, [r7, #12]
    st25r3916interrupt.mask &= ~clr_mask;
 8010df2:	4b18      	ldr	r3, [pc, #96]	; (8010e54 <st25r3916ModifyInterrupts+0x84>)
 8010df4:	68da      	ldr	r2, [r3, #12]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	43db      	mvns	r3, r3
 8010dfa:	4013      	ands	r3, r2
 8010dfc:	4a15      	ldr	r2, [pc, #84]	; (8010e54 <st25r3916ModifyInterrupts+0x84>)
 8010dfe:	60d3      	str	r3, [r2, #12]
    st25r3916interrupt.mask |= set_mask;
 8010e00:	4b14      	ldr	r3, [pc, #80]	; (8010e54 <st25r3916ModifyInterrupts+0x84>)
 8010e02:	68da      	ldr	r2, [r3, #12]
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	4313      	orrs	r3, r2
 8010e08:	4a12      	ldr	r2, [pc, #72]	; (8010e54 <st25r3916ModifyInterrupts+0x84>)
 8010e0a:	60d3      	str	r3, [r2, #12]
    
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	75fb      	strb	r3, [r7, #23]
 8010e10:	e019      	b.n	8010e46 <st25r3916ModifyInterrupts+0x76>
    { 
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 8010e12:	7dfb      	ldrb	r3, [r7, #23]
 8010e14:	00db      	lsls	r3, r3, #3
 8010e16:	68fa      	ldr	r2, [r7, #12]
 8010e18:	fa22 f303 	lsr.w	r3, r2, r3
 8010e1c:	b2db      	uxtb	r3, r3
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d00d      	beq.n	8010e3e <st25r3916ModifyInterrupts+0x6e>
        {
            continue;
        }
        
        st25r3916WriteRegister(ST25R3916_REG_IRQ_MASK_MAIN + i, (uint8_t)((st25r3916interrupt.mask>>(8U*i)) & 0xFFU) );
 8010e22:	7dfb      	ldrb	r3, [r7, #23]
 8010e24:	3316      	adds	r3, #22
 8010e26:	b2d8      	uxtb	r0, r3
 8010e28:	4b0a      	ldr	r3, [pc, #40]	; (8010e54 <st25r3916ModifyInterrupts+0x84>)
 8010e2a:	68da      	ldr	r2, [r3, #12]
 8010e2c:	7dfb      	ldrb	r3, [r7, #23]
 8010e2e:	00db      	lsls	r3, r3, #3
 8010e30:	fa22 f303 	lsr.w	r3, r2, r3
 8010e34:	b2db      	uxtb	r3, r3
 8010e36:	4619      	mov	r1, r3
 8010e38:	f7ff fd02 	bl	8010840 <st25r3916WriteRegister>
 8010e3c:	e000      	b.n	8010e40 <st25r3916ModifyInterrupts+0x70>
            continue;
 8010e3e:	bf00      	nop
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 8010e40:	7dfb      	ldrb	r3, [r7, #23]
 8010e42:	3301      	adds	r3, #1
 8010e44:	75fb      	strb	r3, [r7, #23]
 8010e46:	7dfb      	ldrb	r3, [r7, #23]
 8010e48:	2b03      	cmp	r3, #3
 8010e4a:	d9e2      	bls.n	8010e12 <st25r3916ModifyInterrupts+0x42>
    }
    return;
 8010e4c:	bf00      	nop
}
 8010e4e:	3718      	adds	r7, #24
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}
 8010e54:	20000bf0 	.word	0x20000bf0

08010e58 <st25r3916WaitForInterruptsTimed>:


/*******************************************************************************/
uint32_t st25r3916WaitForInterruptsTimed( uint32_t mask, uint16_t tmo )
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	460b      	mov	r3, r1
 8010e62:	807b      	strh	r3, [r7, #2]
    uint32_t tmrDelay;
    uint32_t status;
    
    tmrDelay = platformTimerCreate( tmo );
 8010e64:	887b      	ldrh	r3, [r7, #2]
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7f3 fbe6 	bl	8004638 <timerCalculateTimer>
 8010e6c:	60f8      	str	r0, [r7, #12]
    
    /* Run until specific interrupt has happen or the timer has expired */
    do 
    {
        status = (st25r3916interrupt.status & mask);
 8010e6e:	4b20      	ldr	r3, [pc, #128]	; (8010ef0 <st25r3916WaitForInterruptsTimed+0x98>)
 8010e70:	689b      	ldr	r3, [r3, #8]
 8010e72:	687a      	ldr	r2, [r7, #4]
 8010e74:	4013      	ands	r3, r2
 8010e76:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmrDelay ) || (tmo == 0U)) && (status == 0U) );
 8010e78:	68f8      	ldr	r0, [r7, #12]
 8010e7a:	f7f3 fbeb 	bl	8004654 <timerIsExpired>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	f083 0301 	eor.w	r3, r3, #1
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d102      	bne.n	8010e90 <st25r3916WaitForInterruptsTimed+0x38>
 8010e8a:	887b      	ldrh	r3, [r7, #2]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d102      	bne.n	8010e96 <st25r3916WaitForInterruptsTimed+0x3e>
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d0eb      	beq.n	8010e6e <st25r3916WaitForInterruptsTimed+0x16>

    status = st25r3916interrupt.status & mask;
 8010e96:	4b16      	ldr	r3, [pc, #88]	; (8010ef0 <st25r3916WaitForInterruptsTimed+0x98>)
 8010e98:	689b      	ldr	r3, [r3, #8]
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	4013      	ands	r3, r2
 8010e9e:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 8010ea0:	4b14      	ldr	r3, [pc, #80]	; (8010ef4 <st25r3916WaitForInterruptsTimed+0x9c>)
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	b2da      	uxtb	r2, r3
 8010ea8:	4b12      	ldr	r3, [pc, #72]	; (8010ef4 <st25r3916WaitForInterruptsTimed+0x9c>)
 8010eaa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8010eac:	f3bf 8f4f 	dsb	sy
 8010eb0:	200a      	movs	r0, #10
 8010eb2:	f7ff fee7 	bl	8010c84 <__NVIC_DisableIRQ>
 8010eb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010eba:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status &= ~status;
 8010ebe:	4b0c      	ldr	r3, [pc, #48]	; (8010ef0 <st25r3916WaitForInterruptsTimed+0x98>)
 8010ec0:	689a      	ldr	r2, [r3, #8]
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	43db      	mvns	r3, r3
 8010ec6:	4013      	ands	r3, r2
 8010ec8:	4a09      	ldr	r2, [pc, #36]	; (8010ef0 <st25r3916WaitForInterruptsTimed+0x98>)
 8010eca:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 8010ecc:	4b09      	ldr	r3, [pc, #36]	; (8010ef4 <st25r3916WaitForInterruptsTimed+0x9c>)
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	3b01      	subs	r3, #1
 8010ed2:	b2da      	uxtb	r2, r3
 8010ed4:	4b07      	ldr	r3, [pc, #28]	; (8010ef4 <st25r3916WaitForInterruptsTimed+0x9c>)
 8010ed6:	701a      	strb	r2, [r3, #0]
 8010ed8:	4b06      	ldr	r3, [pc, #24]	; (8010ef4 <st25r3916WaitForInterruptsTimed+0x9c>)
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d102      	bne.n	8010ee6 <st25r3916WaitForInterruptsTimed+0x8e>
 8010ee0:	200a      	movs	r0, #10
 8010ee2:	f7ff feb1 	bl	8010c48 <__NVIC_EnableIRQ>
    
    return status;
 8010ee6:	68bb      	ldr	r3, [r7, #8]
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3710      	adds	r7, #16
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	20000bf0 	.word	0x20000bf0
 8010ef4:	20000f85 	.word	0x20000f85

08010ef8 <st25r3916GetInterrupt>:


/*******************************************************************************/
uint32_t st25r3916GetInterrupt( uint32_t mask )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3916interrupt.status & mask);
 8010f00:	4b17      	ldr	r3, [pc, #92]	; (8010f60 <st25r3916GetInterrupt+0x68>)
 8010f02:	689b      	ldr	r3, [r3, #8]
 8010f04:	687a      	ldr	r2, [r7, #4]
 8010f06:	4013      	ands	r3, r2
 8010f08:	60fb      	str	r3, [r7, #12]
    if(irqs != ST25R3916_IRQ_MASK_NONE)
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d022      	beq.n	8010f56 <st25r3916GetInterrupt+0x5e>
    {
        platformProtectST25R391xIrqStatus();
 8010f10:	4b14      	ldr	r3, [pc, #80]	; (8010f64 <st25r3916GetInterrupt+0x6c>)
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	3301      	adds	r3, #1
 8010f16:	b2da      	uxtb	r2, r3
 8010f18:	4b12      	ldr	r3, [pc, #72]	; (8010f64 <st25r3916GetInterrupt+0x6c>)
 8010f1a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8010f1c:	f3bf 8f4f 	dsb	sy
 8010f20:	200a      	movs	r0, #10
 8010f22:	f7ff feaf 	bl	8010c84 <__NVIC_DisableIRQ>
 8010f26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010f2a:	f3bf 8f6f 	isb	sy
        st25r3916interrupt.status &= ~irqs;
 8010f2e:	4b0c      	ldr	r3, [pc, #48]	; (8010f60 <st25r3916GetInterrupt+0x68>)
 8010f30:	689a      	ldr	r2, [r3, #8]
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	43db      	mvns	r3, r3
 8010f36:	4013      	ands	r3, r2
 8010f38:	4a09      	ldr	r2, [pc, #36]	; (8010f60 <st25r3916GetInterrupt+0x68>)
 8010f3a:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 8010f3c:	4b09      	ldr	r3, [pc, #36]	; (8010f64 <st25r3916GetInterrupt+0x6c>)
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	3b01      	subs	r3, #1
 8010f42:	b2da      	uxtb	r2, r3
 8010f44:	4b07      	ldr	r3, [pc, #28]	; (8010f64 <st25r3916GetInterrupt+0x6c>)
 8010f46:	701a      	strb	r2, [r3, #0]
 8010f48:	4b06      	ldr	r3, [pc, #24]	; (8010f64 <st25r3916GetInterrupt+0x6c>)
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d102      	bne.n	8010f56 <st25r3916GetInterrupt+0x5e>
 8010f50:	200a      	movs	r0, #10
 8010f52:	f7ff fe79 	bl	8010c48 <__NVIC_EnableIRQ>
    }

    return irqs;
 8010f56:	68fb      	ldr	r3, [r7, #12]
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3710      	adds	r7, #16
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	20000bf0 	.word	0x20000bf0
 8010f64:	20000f85 	.word	0x20000f85

08010f68 <st25r3916EnableInterrupts>:
}


/*******************************************************************************/
void st25r3916EnableInterrupts(uint32_t mask)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(mask, 0);
 8010f70:	2100      	movs	r1, #0
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f7ff ff2c 	bl	8010dd0 <st25r3916ModifyInterrupts>
}
 8010f78:	bf00      	nop
 8010f7a:	3708      	adds	r7, #8
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <st25r3916DisableInterrupts>:


/*******************************************************************************/
void st25r3916DisableInterrupts(uint32_t mask)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(0, mask);
 8010f88:	6879      	ldr	r1, [r7, #4]
 8010f8a:	2000      	movs	r0, #0
 8010f8c:	f7ff ff20 	bl	8010dd0 <st25r3916ModifyInterrupts>
}
 8010f90:	bf00      	nop
 8010f92:	3708      	adds	r7, #8
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}

08010f98 <st25r3916ClearInterrupts>:

/*******************************************************************************/
void st25r3916ClearInterrupts( void )
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
    uint8_t iregs[ST25R3916_INT_REGS_LEN];

    st25r3916ReadMultipleRegisters(ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN);
 8010f9e:	1d3b      	adds	r3, r7, #4
 8010fa0:	2204      	movs	r2, #4
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	201a      	movs	r0, #26
 8010fa6:	f7ff fc1e 	bl	80107e6 <st25r3916ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 8010faa:	4b12      	ldr	r3, [pc, #72]	; (8010ff4 <st25r3916ClearInterrupts+0x5c>)
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	b2da      	uxtb	r2, r3
 8010fb2:	4b10      	ldr	r3, [pc, #64]	; (8010ff4 <st25r3916ClearInterrupts+0x5c>)
 8010fb4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8010fb6:	f3bf 8f4f 	dsb	sy
 8010fba:	200a      	movs	r0, #10
 8010fbc:	f7ff fe62 	bl	8010c84 <__NVIC_DisableIRQ>
 8010fc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010fc4:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status = ST25R3916_IRQ_MASK_NONE;
 8010fc8:	4b0b      	ldr	r3, [pc, #44]	; (8010ff8 <st25r3916ClearInterrupts+0x60>)
 8010fca:	2200      	movs	r2, #0
 8010fcc:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 8010fce:	4b09      	ldr	r3, [pc, #36]	; (8010ff4 <st25r3916ClearInterrupts+0x5c>)
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	b2da      	uxtb	r2, r3
 8010fd6:	4b07      	ldr	r3, [pc, #28]	; (8010ff4 <st25r3916ClearInterrupts+0x5c>)
 8010fd8:	701a      	strb	r2, [r3, #0]
 8010fda:	4b06      	ldr	r3, [pc, #24]	; (8010ff4 <st25r3916ClearInterrupts+0x5c>)
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d103      	bne.n	8010fea <st25r3916ClearInterrupts+0x52>
 8010fe2:	200a      	movs	r0, #10
 8010fe4:	f7ff fe30 	bl	8010c48 <__NVIC_EnableIRQ>
    return;
 8010fe8:	bf00      	nop
 8010fea:	bf00      	nop
}
 8010fec:	3708      	adds	r7, #8
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	20000f85 	.word	0x20000f85
 8010ff8:	20000bf0 	.word	0x20000bf0

08010ffc <st25r3916ledInit>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3916ledInit( void )
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	af00      	add	r7, sp, #0
    /* Initialize LEDs if existing and defined */
    platformLedsInitialize();
    
    st25r3916ledRxOff();
    st25r3916ledFieldOff();
}
 8011000:	bf00      	nop
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr

0801100a <st25r3916ledEvtIrq>:


/*******************************************************************************/
void st25r3916ledEvtIrq( uint32_t irqs )
{
 801100a:	b480      	push	{r7}
 801100c:	b083      	sub	sp, #12
 801100e:	af00      	add	r7, sp, #0
 8011010:	6078      	str	r0, [r7, #4]
    if( (irqs & (ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_NRE    | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_RXE_PTA |                                                 
                 ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_WU_F    | ST25R3916_IRQ_MASK_RFU2)   ) != 0U ) 
    {
        st25r3916ledRxOff();
    }
}
 8011012:	bf00      	nop
 8011014:	370c      	adds	r7, #12
 8011016:	46bd      	mov	sp, r7
 8011018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101c:	4770      	bx	lr

0801101e <st25r3916ledEvtWrReg>:


/*******************************************************************************/
void st25r3916ledEvtWrReg( uint8_t reg, uint8_t val )
{
 801101e:	b480      	push	{r7}
 8011020:	b083      	sub	sp, #12
 8011022:	af00      	add	r7, sp, #0
 8011024:	4603      	mov	r3, r0
 8011026:	460a      	mov	r2, r1
 8011028:	71fb      	strb	r3, [r7, #7]
 801102a:	4613      	mov	r3, r2
 801102c:	71bb      	strb	r3, [r7, #6]
    if( reg == ST25R3916_REG_OP_CONTROL )
 801102e:	79fb      	ldrb	r3, [r7, #7]
 8011030:	2b02      	cmp	r3, #2
        else
        {
            st25r3916ledFieldOff();
        }
    }
}
 8011032:	bf00      	nop
 8011034:	370c      	adds	r7, #12
 8011036:	46bd      	mov	sp, r7
 8011038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103c:	4770      	bx	lr

0801103e <st25r3916ledEvtWrMultiReg>:


/*******************************************************************************/
void st25r3916ledEvtWrMultiReg( uint8_t reg, const uint8_t* vals, uint8_t len )
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b084      	sub	sp, #16
 8011042:	af00      	add	r7, sp, #0
 8011044:	4603      	mov	r3, r0
 8011046:	6039      	str	r1, [r7, #0]
 8011048:	71fb      	strb	r3, [r7, #7]
 801104a:	4613      	mov	r3, r2
 801104c:	71bb      	strb	r3, [r7, #6]
    uint8_t i;
    
    for(i=0; i<(len); i++)
 801104e:	2300      	movs	r3, #0
 8011050:	73fb      	strb	r3, [r7, #15]
 8011052:	e00d      	b.n	8011070 <st25r3916ledEvtWrMultiReg+0x32>
    {
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
 8011054:	79fa      	ldrb	r2, [r7, #7]
 8011056:	7bfb      	ldrb	r3, [r7, #15]
 8011058:	4413      	add	r3, r2
 801105a:	b2d8      	uxtb	r0, r3
 801105c:	7bfb      	ldrb	r3, [r7, #15]
 801105e:	683a      	ldr	r2, [r7, #0]
 8011060:	4413      	add	r3, r2
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	4619      	mov	r1, r3
 8011066:	f7ff ffda 	bl	801101e <st25r3916ledEvtWrReg>
    for(i=0; i<(len); i++)
 801106a:	7bfb      	ldrb	r3, [r7, #15]
 801106c:	3301      	adds	r3, #1
 801106e:	73fb      	strb	r3, [r7, #15]
 8011070:	7bfa      	ldrb	r2, [r7, #15]
 8011072:	79bb      	ldrb	r3, [r7, #6]
 8011074:	429a      	cmp	r2, r3
 8011076:	d3ed      	bcc.n	8011054 <st25r3916ledEvtWrMultiReg+0x16>
    }
}
 8011078:	bf00      	nop
 801107a:	3710      	adds	r7, #16
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <st25r3916ledEvtCmd>:


/*******************************************************************************/
void st25r3916ledEvtCmd( uint8_t cmd )
{
 8011080:	b480      	push	{r7}
 8011082:	b083      	sub	sp, #12
 8011084:	af00      	add	r7, sp, #0
 8011086:	4603      	mov	r3, r0
 8011088:	71fb      	strb	r3, [r7, #7]
    if( cmd == ST25R3916_CMD_SET_DEFAULT )
    {
        st25r3916ledFieldOff();
        st25r3916ledRxOff();
    }
}
 801108a:	bf00      	nop
 801108c:	370c      	adds	r7, #12
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr

08011096 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011096:	b580      	push	{r7, lr}
 8011098:	b084      	sub	sp, #16
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
 801109e:	460b      	mov	r3, r1
 80110a0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80110a2:	2300      	movs	r3, #0
 80110a4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	7c1b      	ldrb	r3, [r3, #16]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d115      	bne.n	80110da <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80110ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110b2:	2202      	movs	r2, #2
 80110b4:	2181      	movs	r1, #129	; 0x81
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f005 fccf 	bl	8016a5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2201      	movs	r2, #1
 80110c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80110c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110c6:	2202      	movs	r2, #2
 80110c8:	2101      	movs	r1, #1
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f005 fcc5 	bl	8016a5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2201      	movs	r2, #1
 80110d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80110d8:	e012      	b.n	8011100 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80110da:	2340      	movs	r3, #64	; 0x40
 80110dc:	2202      	movs	r2, #2
 80110de:	2181      	movs	r1, #129	; 0x81
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f005 fcba 	bl	8016a5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2201      	movs	r2, #1
 80110ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80110ec:	2340      	movs	r3, #64	; 0x40
 80110ee:	2202      	movs	r2, #2
 80110f0:	2101      	movs	r1, #1
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f005 fcb1 	bl	8016a5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2201      	movs	r2, #1
 80110fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011100:	2308      	movs	r3, #8
 8011102:	2203      	movs	r2, #3
 8011104:	2182      	movs	r1, #130	; 0x82
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f005 fca7 	bl	8016a5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2201      	movs	r2, #1
 8011110:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8011112:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011116:	f005 fe1d 	bl	8016d54 <malloc>
 801111a:	4603      	mov	r3, r0
 801111c:	461a      	mov	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801112a:	2b00      	cmp	r3, #0
 801112c:	d102      	bne.n	8011134 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 801112e:	2301      	movs	r3, #1
 8011130:	73fb      	strb	r3, [r7, #15]
 8011132:	e026      	b.n	8011182 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801113a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	2200      	movs	r2, #0
 801114a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	2200      	movs	r2, #0
 8011152:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	7c1b      	ldrb	r3, [r3, #16]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d109      	bne.n	8011172 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011168:	2101      	movs	r1, #1
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f005 fd66 	bl	8016c3c <USBD_LL_PrepareReceive>
 8011170:	e007      	b.n	8011182 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011178:	2340      	movs	r3, #64	; 0x40
 801117a:	2101      	movs	r1, #1
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f005 fd5d 	bl	8016c3c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8011182:	7bfb      	ldrb	r3, [r7, #15]
}
 8011184:	4618      	mov	r0, r3
 8011186:	3710      	adds	r7, #16
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b084      	sub	sp, #16
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	460b      	mov	r3, r1
 8011196:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011198:	2300      	movs	r3, #0
 801119a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801119c:	2181      	movs	r1, #129	; 0x81
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f005 fc81 	bl	8016aa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2200      	movs	r2, #0
 80111a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80111aa:	2101      	movs	r1, #1
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f005 fc7a 	bl	8016aa6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2200      	movs	r2, #0
 80111b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80111ba:	2182      	movs	r1, #130	; 0x82
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f005 fc72 	bl	8016aa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2200      	movs	r2, #0
 80111c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d00e      	beq.n	80111f0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80111e2:	4618      	mov	r0, r3
 80111e4:	f005 fdbe 	bl	8016d64 <free>
    pdev->pClassData = NULL;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80111f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3710      	adds	r7, #16
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}

080111fa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80111fa:	b580      	push	{r7, lr}
 80111fc:	b086      	sub	sp, #24
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
 8011202:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801120a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801120c:	2300      	movs	r3, #0
 801120e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8011210:	2300      	movs	r3, #0
 8011212:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8011214:	2300      	movs	r3, #0
 8011216:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011220:	2b00      	cmp	r3, #0
 8011222:	d039      	beq.n	8011298 <USBD_CDC_Setup+0x9e>
 8011224:	2b20      	cmp	r3, #32
 8011226:	d17c      	bne.n	8011322 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	88db      	ldrh	r3, [r3, #6]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d029      	beq.n	8011284 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	b25b      	sxtb	r3, r3
 8011236:	2b00      	cmp	r3, #0
 8011238:	da11      	bge.n	801125e <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011240:	689b      	ldr	r3, [r3, #8]
 8011242:	683a      	ldr	r2, [r7, #0]
 8011244:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8011246:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011248:	683a      	ldr	r2, [r7, #0]
 801124a:	88d2      	ldrh	r2, [r2, #6]
 801124c:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801124e:	6939      	ldr	r1, [r7, #16]
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	88db      	ldrh	r3, [r3, #6]
 8011254:	461a      	mov	r2, r3
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f001 f9ca 	bl	80125f0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 801125c:	e068      	b.n	8011330 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	785a      	ldrb	r2, [r3, #1]
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	88db      	ldrh	r3, [r3, #6]
 801126c:	b2da      	uxtb	r2, r3
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8011274:	6939      	ldr	r1, [r7, #16]
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	88db      	ldrh	r3, [r3, #6]
 801127a:	461a      	mov	r2, r3
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f001 f9e5 	bl	801264c <USBD_CtlPrepareRx>
    break;
 8011282:	e055      	b.n	8011330 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801128a:	689b      	ldr	r3, [r3, #8]
 801128c:	683a      	ldr	r2, [r7, #0]
 801128e:	7850      	ldrb	r0, [r2, #1]
 8011290:	2200      	movs	r2, #0
 8011292:	6839      	ldr	r1, [r7, #0]
 8011294:	4798      	blx	r3
    break;
 8011296:	e04b      	b.n	8011330 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	785b      	ldrb	r3, [r3, #1]
 801129c:	2b0a      	cmp	r3, #10
 801129e:	d017      	beq.n	80112d0 <USBD_CDC_Setup+0xd6>
 80112a0:	2b0b      	cmp	r3, #11
 80112a2:	d029      	beq.n	80112f8 <USBD_CDC_Setup+0xfe>
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d133      	bne.n	8011310 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80112ae:	2b03      	cmp	r3, #3
 80112b0:	d107      	bne.n	80112c2 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80112b2:	f107 030c 	add.w	r3, r7, #12
 80112b6:	2202      	movs	r2, #2
 80112b8:	4619      	mov	r1, r3
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f001 f998 	bl	80125f0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80112c0:	e02e      	b.n	8011320 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80112c2:	6839      	ldr	r1, [r7, #0]
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f001 f928 	bl	801251a <USBD_CtlError>
			  ret = USBD_FAIL;
 80112ca:	2302      	movs	r3, #2
 80112cc:	75fb      	strb	r3, [r7, #23]
      break;
 80112ce:	e027      	b.n	8011320 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80112d6:	2b03      	cmp	r3, #3
 80112d8:	d107      	bne.n	80112ea <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80112da:	f107 030f 	add.w	r3, r7, #15
 80112de:	2201      	movs	r2, #1
 80112e0:	4619      	mov	r1, r3
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f001 f984 	bl	80125f0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80112e8:	e01a      	b.n	8011320 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80112ea:	6839      	ldr	r1, [r7, #0]
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f001 f914 	bl	801251a <USBD_CtlError>
			  ret = USBD_FAIL;
 80112f2:	2302      	movs	r3, #2
 80112f4:	75fb      	strb	r3, [r7, #23]
      break;
 80112f6:	e013      	b.n	8011320 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80112fe:	2b03      	cmp	r3, #3
 8011300:	d00d      	beq.n	801131e <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8011302:	6839      	ldr	r1, [r7, #0]
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f001 f908 	bl	801251a <USBD_CtlError>
			  ret = USBD_FAIL;
 801130a:	2302      	movs	r3, #2
 801130c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801130e:	e006      	b.n	801131e <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8011310:	6839      	ldr	r1, [r7, #0]
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f001 f901 	bl	801251a <USBD_CtlError>
      ret = USBD_FAIL;
 8011318:	2302      	movs	r3, #2
 801131a:	75fb      	strb	r3, [r7, #23]
      break;
 801131c:	e000      	b.n	8011320 <USBD_CDC_Setup+0x126>
      break;
 801131e:	bf00      	nop
    }
    break;
 8011320:	e006      	b.n	8011330 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8011322:	6839      	ldr	r1, [r7, #0]
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f001 f8f8 	bl	801251a <USBD_CtlError>
    ret = USBD_FAIL;
 801132a:	2302      	movs	r3, #2
 801132c:	75fb      	strb	r3, [r7, #23]
    break;
 801132e:	bf00      	nop
  }

  return ret;
 8011330:	7dfb      	ldrb	r3, [r7, #23]
}
 8011332:	4618      	mov	r0, r3
 8011334:	3718      	adds	r7, #24
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}

0801133a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801133a:	b580      	push	{r7, lr}
 801133c:	b084      	sub	sp, #16
 801133e:	af00      	add	r7, sp, #0
 8011340:	6078      	str	r0, [r7, #4]
 8011342:	460b      	mov	r3, r1
 8011344:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801134c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011354:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801135c:	2b00      	cmp	r3, #0
 801135e:	d03a      	beq.n	80113d6 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011360:	78fa      	ldrb	r2, [r7, #3]
 8011362:	6879      	ldr	r1, [r7, #4]
 8011364:	4613      	mov	r3, r2
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	4413      	add	r3, r2
 801136a:	009b      	lsls	r3, r3, #2
 801136c:	440b      	add	r3, r1
 801136e:	331c      	adds	r3, #28
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d029      	beq.n	80113ca <USBD_CDC_DataIn+0x90>
 8011376:	78fa      	ldrb	r2, [r7, #3]
 8011378:	6879      	ldr	r1, [r7, #4]
 801137a:	4613      	mov	r3, r2
 801137c:	009b      	lsls	r3, r3, #2
 801137e:	4413      	add	r3, r2
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	440b      	add	r3, r1
 8011384:	331c      	adds	r3, #28
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	78f9      	ldrb	r1, [r7, #3]
 801138a:	68b8      	ldr	r0, [r7, #8]
 801138c:	460b      	mov	r3, r1
 801138e:	00db      	lsls	r3, r3, #3
 8011390:	1a5b      	subs	r3, r3, r1
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	4403      	add	r3, r0
 8011396:	3344      	adds	r3, #68	; 0x44
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	fbb2 f1f3 	udiv	r1, r2, r3
 801139e:	fb03 f301 	mul.w	r3, r3, r1
 80113a2:	1ad3      	subs	r3, r2, r3
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d110      	bne.n	80113ca <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80113a8:	78fa      	ldrb	r2, [r7, #3]
 80113aa:	6879      	ldr	r1, [r7, #4]
 80113ac:	4613      	mov	r3, r2
 80113ae:	009b      	lsls	r3, r3, #2
 80113b0:	4413      	add	r3, r2
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	440b      	add	r3, r1
 80113b6:	331c      	adds	r3, #28
 80113b8:	2200      	movs	r2, #0
 80113ba:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80113bc:	78f9      	ldrb	r1, [r7, #3]
 80113be:	2300      	movs	r3, #0
 80113c0:	2200      	movs	r2, #0
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f005 fc17 	bl	8016bf6 <USBD_LL_Transmit>
 80113c8:	e003      	b.n	80113d2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2200      	movs	r2, #0
 80113ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80113d2:	2300      	movs	r3, #0
 80113d4:	e000      	b.n	80113d8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80113d6:	2302      	movs	r3, #2
  }
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3710      	adds	r7, #16
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	460b      	mov	r3, r1
 80113ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80113f2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80113f4:	78fb      	ldrb	r3, [r7, #3]
 80113f6:	4619      	mov	r1, r3
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f005 fc42 	bl	8016c82 <USBD_LL_GetRxDataSize>
 80113fe:	4602      	mov	r2, r0
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00d      	beq.n	801142c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011416:	68db      	ldr	r3, [r3, #12]
 8011418:	68fa      	ldr	r2, [r7, #12]
 801141a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801141e:	68fa      	ldr	r2, [r7, #12]
 8011420:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011424:	4611      	mov	r1, r2
 8011426:	4798      	blx	r3

    return USBD_OK;
 8011428:	2300      	movs	r3, #0
 801142a:	e000      	b.n	801142e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801142c:	2302      	movs	r3, #2
  }
}
 801142e:	4618      	mov	r0, r3
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}

08011436 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8011436:	b580      	push	{r7, lr}
 8011438:	b084      	sub	sp, #16
 801143a:	af00      	add	r7, sp, #0
 801143c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011444:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801144c:	2b00      	cmp	r3, #0
 801144e:	d015      	beq.n	801147c <USBD_CDC_EP0_RxReady+0x46>
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011456:	2bff      	cmp	r3, #255	; 0xff
 8011458:	d010      	beq.n	801147c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011460:	689b      	ldr	r3, [r3, #8]
 8011462:	68fa      	ldr	r2, [r7, #12]
 8011464:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8011468:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801146a:	68fa      	ldr	r2, [r7, #12]
 801146c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011470:	b292      	uxth	r2, r2
 8011472:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	22ff      	movs	r2, #255	; 0xff
 8011478:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 801147c:	2300      	movs	r3, #0
}
 801147e:	4618      	mov	r0, r3
 8011480:	3710      	adds	r7, #16
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
	...

08011488 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2243      	movs	r2, #67	; 0x43
 8011494:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8011496:	4b03      	ldr	r3, [pc, #12]	; (80114a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011498:	4618      	mov	r0, r3
 801149a:	370c      	adds	r7, #12
 801149c:	46bd      	mov	sp, r7
 801149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a2:	4770      	bx	lr
 80114a4:	200000e4 	.word	0x200000e4

080114a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80114a8:	b480      	push	{r7}
 80114aa:	b083      	sub	sp, #12
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2243      	movs	r2, #67	; 0x43
 80114b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80114b6:	4b03      	ldr	r3, [pc, #12]	; (80114c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	370c      	adds	r7, #12
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr
 80114c4:	200000a0 	.word	0x200000a0

080114c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2243      	movs	r2, #67	; 0x43
 80114d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80114d6:	4b03      	ldr	r3, [pc, #12]	; (80114e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80114d8:	4618      	mov	r0, r3
 80114da:	370c      	adds	r7, #12
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr
 80114e4:	20000128 	.word	0x20000128

080114e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80114e8:	b480      	push	{r7}
 80114ea:	b083      	sub	sp, #12
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	220a      	movs	r2, #10
 80114f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80114f6:	4b03      	ldr	r3, [pc, #12]	; (8011504 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	370c      	adds	r7, #12
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr
 8011504:	2000005c 	.word	0x2000005c

08011508 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8011508:	b480      	push	{r7}
 801150a:	b085      	sub	sp, #20
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
 8011510:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8011512:	2302      	movs	r3, #2
 8011514:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d005      	beq.n	8011528 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	683a      	ldr	r2, [r7, #0]
 8011520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8011524:	2300      	movs	r3, #0
 8011526:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011528:	7bfb      	ldrb	r3, [r7, #15]
}
 801152a:	4618      	mov	r0, r3
 801152c:	3714      	adds	r7, #20
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr

08011536 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8011536:	b480      	push	{r7}
 8011538:	b087      	sub	sp, #28
 801153a:	af00      	add	r7, sp, #0
 801153c:	60f8      	str	r0, [r7, #12]
 801153e:	60b9      	str	r1, [r7, #8]
 8011540:	4613      	mov	r3, r2
 8011542:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801154a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	68ba      	ldr	r2, [r7, #8]
 8011550:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011554:	88fa      	ldrh	r2, [r7, #6]
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 801155c:	2300      	movs	r3, #0
}
 801155e:	4618      	mov	r0, r3
 8011560:	371c      	adds	r7, #28
 8011562:	46bd      	mov	sp, r7
 8011564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011568:	4770      	bx	lr

0801156a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 801156a:	b480      	push	{r7}
 801156c:	b085      	sub	sp, #20
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
 8011572:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801157a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	683a      	ldr	r2, [r7, #0]
 8011580:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8011584:	2300      	movs	r3, #0
}
 8011586:	4618      	mov	r0, r3
 8011588:	3714      	adds	r7, #20
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr

08011592 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011592:	b580      	push	{r7, lr}
 8011594:	b084      	sub	sp, #16
 8011596:	af00      	add	r7, sp, #0
 8011598:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80115a0:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d01c      	beq.n	80115e6 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d115      	bne.n	80115e2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	2201      	movs	r2, #1
 80115ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	2181      	movs	r1, #129	; 0x81
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f005 fb0c 	bl	8016bf6 <USBD_LL_Transmit>

      return USBD_OK;
 80115de:	2300      	movs	r3, #0
 80115e0:	e002      	b.n	80115e8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80115e2:	2301      	movs	r3, #1
 80115e4:	e000      	b.n	80115e8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80115e6:	2302      	movs	r3, #2
  }
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80115fe:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011606:	2b00      	cmp	r3, #0
 8011608:	d017      	beq.n	801163a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	7c1b      	ldrb	r3, [r3, #16]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d109      	bne.n	8011626 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011618:	f44f 7300 	mov.w	r3, #512	; 0x200
 801161c:	2101      	movs	r1, #1
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f005 fb0c 	bl	8016c3c <USBD_LL_PrepareReceive>
 8011624:	e007      	b.n	8011636 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801162c:	2340      	movs	r3, #64	; 0x40
 801162e:	2101      	movs	r1, #1
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f005 fb03 	bl	8016c3c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8011636:	2300      	movs	r3, #0
 8011638:	e000      	b.n	801163c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 801163a:	2302      	movs	r3, #2
  }
}
 801163c:	4618      	mov	r0, r3
 801163e:	3710      	adds	r7, #16
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	4613      	mov	r3, r2
 8011650:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d101      	bne.n	801165c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011658:	2302      	movs	r3, #2
 801165a:	e01a      	b.n	8011692 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011662:	2b00      	cmp	r3, #0
 8011664:	d003      	beq.n	801166e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2200      	movs	r2, #0
 801166a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d003      	beq.n	801167c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	68ba      	ldr	r2, [r7, #8]
 8011678:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2201      	movs	r2, #1
 8011680:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	79fa      	ldrb	r2, [r7, #7]
 8011688:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f005 f97e 	bl	801698c <USBD_LL_Init>

  return USBD_OK;
 8011690:	2300      	movs	r3, #0
}
 8011692:	4618      	mov	r0, r3
 8011694:	3710      	adds	r7, #16
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}

0801169a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801169a:	b480      	push	{r7}
 801169c:	b085      	sub	sp, #20
 801169e:	af00      	add	r7, sp, #0
 80116a0:	6078      	str	r0, [r7, #4]
 80116a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80116a4:	2300      	movs	r3, #0
 80116a6:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d006      	beq.n	80116bc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	683a      	ldr	r2, [r7, #0]
 80116b2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80116b6:	2300      	movs	r3, #0
 80116b8:	73fb      	strb	r3, [r7, #15]
 80116ba:	e001      	b.n	80116c0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80116bc:	2302      	movs	r3, #2
 80116be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80116c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3714      	adds	r7, #20
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr

080116ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80116ce:	b580      	push	{r7, lr}
 80116d0:	b082      	sub	sp, #8
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f005 f9a4 	bl	8016a24 <USBD_LL_Start>

  return USBD_OK;
 80116dc:	2300      	movs	r3, #0
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3708      	adds	r7, #8
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80116e6:	b480      	push	{r7}
 80116e8:	b083      	sub	sp, #12
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	370c      	adds	r7, #12
 80116f4:	46bd      	mov	sp, r7
 80116f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fa:	4770      	bx	lr

080116fc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b084      	sub	sp, #16
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
 8011704:	460b      	mov	r3, r1
 8011706:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8011708:	2302      	movs	r3, #2
 801170a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011712:	2b00      	cmp	r3, #0
 8011714:	d00c      	beq.n	8011730 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	78fa      	ldrb	r2, [r7, #3]
 8011720:	4611      	mov	r1, r2
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	4798      	blx	r3
 8011726:	4603      	mov	r3, r0
 8011728:	2b00      	cmp	r3, #0
 801172a:	d101      	bne.n	8011730 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 801172c:	2300      	movs	r3, #0
 801172e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011730:	7bfb      	ldrb	r3, [r7, #15]
}
 8011732:	4618      	mov	r0, r3
 8011734:	3710      	adds	r7, #16
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}

0801173a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801173a:	b580      	push	{r7, lr}
 801173c:	b082      	sub	sp, #8
 801173e:	af00      	add	r7, sp, #0
 8011740:	6078      	str	r0, [r7, #4]
 8011742:	460b      	mov	r3, r1
 8011744:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	78fa      	ldrb	r2, [r7, #3]
 8011750:	4611      	mov	r1, r2
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	4798      	blx	r3
  return USBD_OK;
 8011756:	2300      	movs	r3, #0
}
 8011758:	4618      	mov	r0, r3
 801175a:	3708      	adds	r7, #8
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}

08011760 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011770:	6839      	ldr	r1, [r7, #0]
 8011772:	4618      	mov	r0, r3
 8011774:	f000 fe94 	bl	80124a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2201      	movs	r2, #1
 801177c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8011786:	461a      	mov	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8011794:	f003 031f 	and.w	r3, r3, #31
 8011798:	2b01      	cmp	r3, #1
 801179a:	d00c      	beq.n	80117b6 <USBD_LL_SetupStage+0x56>
 801179c:	2b01      	cmp	r3, #1
 801179e:	d302      	bcc.n	80117a6 <USBD_LL_SetupStage+0x46>
 80117a0:	2b02      	cmp	r3, #2
 80117a2:	d010      	beq.n	80117c6 <USBD_LL_SetupStage+0x66>
 80117a4:	e017      	b.n	80117d6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80117ac:	4619      	mov	r1, r3
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f000 fa04 	bl	8011bbc <USBD_StdDevReq>
    break;
 80117b4:	e01a      	b.n	80117ec <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80117bc:	4619      	mov	r1, r3
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f000 fa66 	bl	8011c90 <USBD_StdItfReq>
    break;
 80117c4:	e012      	b.n	80117ec <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80117cc:	4619      	mov	r1, r3
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f000 faa4 	bl	8011d1c <USBD_StdEPReq>
    break;
 80117d4:	e00a      	b.n	80117ec <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80117dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80117e0:	b2db      	uxtb	r3, r3
 80117e2:	4619      	mov	r1, r3
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f005 f97d 	bl	8016ae4 <USBD_LL_StallEP>
    break;
 80117ea:	bf00      	nop
  }

  return USBD_OK;
 80117ec:	2300      	movs	r3, #0
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3708      	adds	r7, #8
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}

080117f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80117f6:	b580      	push	{r7, lr}
 80117f8:	b086      	sub	sp, #24
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	60f8      	str	r0, [r7, #12]
 80117fe:	460b      	mov	r3, r1
 8011800:	607a      	str	r2, [r7, #4]
 8011802:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8011804:	7afb      	ldrb	r3, [r7, #11]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d14b      	bne.n	80118a2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011810:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8011818:	2b03      	cmp	r3, #3
 801181a:	d134      	bne.n	8011886 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	68da      	ldr	r2, [r3, #12]
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	691b      	ldr	r3, [r3, #16]
 8011824:	429a      	cmp	r2, r3
 8011826:	d919      	bls.n	801185c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	68da      	ldr	r2, [r3, #12]
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	691b      	ldr	r3, [r3, #16]
 8011830:	1ad2      	subs	r2, r2, r3
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	68da      	ldr	r2, [r3, #12]
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 801183e:	429a      	cmp	r2, r3
 8011840:	d203      	bcs.n	801184a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8011846:	b29b      	uxth	r3, r3
 8011848:	e002      	b.n	8011850 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 801184e:	b29b      	uxth	r3, r3
 8011850:	461a      	mov	r2, r3
 8011852:	6879      	ldr	r1, [r7, #4]
 8011854:	68f8      	ldr	r0, [r7, #12]
 8011856:	f000 ff17 	bl	8012688 <USBD_CtlContinueRx>
 801185a:	e038      	b.n	80118ce <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011862:	691b      	ldr	r3, [r3, #16]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d00a      	beq.n	801187e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 801186e:	2b03      	cmp	r3, #3
 8011870:	d105      	bne.n	801187e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011878:	691b      	ldr	r3, [r3, #16]
 801187a:	68f8      	ldr	r0, [r7, #12]
 801187c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	f000 ff14 	bl	80126ac <USBD_CtlSendStatus>
 8011884:	e023      	b.n	80118ce <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 801188c:	2b05      	cmp	r3, #5
 801188e:	d11e      	bne.n	80118ce <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	2200      	movs	r2, #0
 8011894:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8011898:	2100      	movs	r1, #0
 801189a:	68f8      	ldr	r0, [r7, #12]
 801189c:	f005 f922 	bl	8016ae4 <USBD_LL_StallEP>
 80118a0:	e015      	b.n	80118ce <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80118a8:	699b      	ldr	r3, [r3, #24]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d00d      	beq.n	80118ca <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80118b4:	2b03      	cmp	r3, #3
 80118b6:	d108      	bne.n	80118ca <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80118be:	699b      	ldr	r3, [r3, #24]
 80118c0:	7afa      	ldrb	r2, [r7, #11]
 80118c2:	4611      	mov	r1, r2
 80118c4:	68f8      	ldr	r0, [r7, #12]
 80118c6:	4798      	blx	r3
 80118c8:	e001      	b.n	80118ce <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80118ca:	2302      	movs	r3, #2
 80118cc:	e000      	b.n	80118d0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80118ce:	2300      	movs	r3, #0
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3718      	adds	r7, #24
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}

080118d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b086      	sub	sp, #24
 80118dc:	af00      	add	r7, sp, #0
 80118de:	60f8      	str	r0, [r7, #12]
 80118e0:	460b      	mov	r3, r1
 80118e2:	607a      	str	r2, [r7, #4]
 80118e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80118e6:	7afb      	ldrb	r3, [r7, #11]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d17f      	bne.n	80119ec <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	3314      	adds	r3, #20
 80118f0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80118f8:	2b02      	cmp	r3, #2
 80118fa:	d15c      	bne.n	80119b6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	68da      	ldr	r2, [r3, #12]
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	691b      	ldr	r3, [r3, #16]
 8011904:	429a      	cmp	r2, r3
 8011906:	d915      	bls.n	8011934 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	68da      	ldr	r2, [r3, #12]
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	691b      	ldr	r3, [r3, #16]
 8011910:	1ad2      	subs	r2, r2, r3
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	68db      	ldr	r3, [r3, #12]
 801191a:	b29b      	uxth	r3, r3
 801191c:	461a      	mov	r2, r3
 801191e:	6879      	ldr	r1, [r7, #4]
 8011920:	68f8      	ldr	r0, [r7, #12]
 8011922:	f000 fe81 	bl	8012628 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8011926:	2300      	movs	r3, #0
 8011928:	2200      	movs	r2, #0
 801192a:	2100      	movs	r1, #0
 801192c:	68f8      	ldr	r0, [r7, #12]
 801192e:	f005 f985 	bl	8016c3c <USBD_LL_PrepareReceive>
 8011932:	e04e      	b.n	80119d2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8011934:	697b      	ldr	r3, [r7, #20]
 8011936:	689b      	ldr	r3, [r3, #8]
 8011938:	697a      	ldr	r2, [r7, #20]
 801193a:	6912      	ldr	r2, [r2, #16]
 801193c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011940:	fb02 f201 	mul.w	r2, r2, r1
 8011944:	1a9b      	subs	r3, r3, r2
 8011946:	2b00      	cmp	r3, #0
 8011948:	d11c      	bne.n	8011984 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	689a      	ldr	r2, [r3, #8]
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8011952:	429a      	cmp	r2, r3
 8011954:	d316      	bcc.n	8011984 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	689a      	ldr	r2, [r3, #8]
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8011960:	429a      	cmp	r2, r3
 8011962:	d20f      	bcs.n	8011984 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011964:	2200      	movs	r2, #0
 8011966:	2100      	movs	r1, #0
 8011968:	68f8      	ldr	r0, [r7, #12]
 801196a:	f000 fe5d 	bl	8012628 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	2200      	movs	r2, #0
 8011972:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8011976:	2300      	movs	r3, #0
 8011978:	2200      	movs	r2, #0
 801197a:	2100      	movs	r1, #0
 801197c:	68f8      	ldr	r0, [r7, #12]
 801197e:	f005 f95d 	bl	8016c3c <USBD_LL_PrepareReceive>
 8011982:	e026      	b.n	80119d2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801198a:	68db      	ldr	r3, [r3, #12]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d00a      	beq.n	80119a6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8011996:	2b03      	cmp	r3, #3
 8011998:	d105      	bne.n	80119a6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80119a0:	68db      	ldr	r3, [r3, #12]
 80119a2:	68f8      	ldr	r0, [r7, #12]
 80119a4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80119a6:	2180      	movs	r1, #128	; 0x80
 80119a8:	68f8      	ldr	r0, [r7, #12]
 80119aa:	f005 f89b 	bl	8016ae4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80119ae:	68f8      	ldr	r0, [r7, #12]
 80119b0:	f000 fe8f 	bl	80126d2 <USBD_CtlReceiveStatus>
 80119b4:	e00d      	b.n	80119d2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80119bc:	2b04      	cmp	r3, #4
 80119be:	d004      	beq.n	80119ca <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d103      	bne.n	80119d2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80119ca:	2180      	movs	r1, #128	; 0x80
 80119cc:	68f8      	ldr	r0, [r7, #12]
 80119ce:	f005 f889 	bl	8016ae4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d11d      	bne.n	8011a18 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80119dc:	68f8      	ldr	r0, [r7, #12]
 80119de:	f7ff fe82 	bl	80116e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2200      	movs	r2, #0
 80119e6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80119ea:	e015      	b.n	8011a18 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80119f2:	695b      	ldr	r3, [r3, #20]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d00d      	beq.n	8011a14 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80119fe:	2b03      	cmp	r3, #3
 8011a00:	d108      	bne.n	8011a14 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011a08:	695b      	ldr	r3, [r3, #20]
 8011a0a:	7afa      	ldrb	r2, [r7, #11]
 8011a0c:	4611      	mov	r1, r2
 8011a0e:	68f8      	ldr	r0, [r7, #12]
 8011a10:	4798      	blx	r3
 8011a12:	e001      	b.n	8011a18 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011a14:	2302      	movs	r3, #2
 8011a16:	e000      	b.n	8011a1a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8011a18:	2300      	movs	r3, #0
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3718      	adds	r7, #24
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}

08011a22 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b082      	sub	sp, #8
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011a2a:	2340      	movs	r3, #64	; 0x40
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	2100      	movs	r1, #0
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f005 f812 	bl	8016a5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2201      	movs	r2, #1
 8011a3a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2240      	movs	r2, #64	; 0x40
 8011a42:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011a46:	2340      	movs	r3, #64	; 0x40
 8011a48:	2200      	movs	r2, #0
 8011a4a:	2180      	movs	r1, #128	; 0x80
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f005 f804 	bl	8016a5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2201      	movs	r2, #1
 8011a56:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2240      	movs	r2, #64	; 0x40
 8011a5c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2201      	movs	r2, #1
 8011a62:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2200      	movs	r2, #0
 8011a72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2200      	movs	r2, #0
 8011a78:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d009      	beq.n	8011a9a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	6852      	ldr	r2, [r2, #4]
 8011a92:	b2d2      	uxtb	r2, r2
 8011a94:	4611      	mov	r1, r2
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	4798      	blx	r3
  }

  return USBD_OK;
 8011a9a:	2300      	movs	r3, #0
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b083      	sub	sp, #12
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	460b      	mov	r3, r1
 8011aae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	78fa      	ldrb	r2, [r7, #3]
 8011ab4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8011ab6:	2300      	movs	r3, #0
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	370c      	adds	r7, #12
 8011abc:	46bd      	mov	sp, r7
 8011abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac2:	4770      	bx	lr

08011ac4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b083      	sub	sp, #12
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2204      	movs	r2, #4
 8011adc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8011ae0:	2300      	movs	r3, #0
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	370c      	adds	r7, #12
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aec:	4770      	bx	lr

08011aee <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8011aee:	b480      	push	{r7}
 8011af0:	b083      	sub	sp, #12
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8011b02:	2300      	movs	r3, #0
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	370c      	adds	r7, #12
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr

08011b10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011b1e:	2b03      	cmp	r3, #3
 8011b20:	d10b      	bne.n	8011b3a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011b28:	69db      	ldr	r3, [r3, #28]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d005      	beq.n	8011b3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011b34:	69db      	ldr	r3, [r3, #28]
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8011b3a:	2300      	movs	r3, #0
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3708      	adds	r7, #8
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8011b44:	b480      	push	{r7}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011b50:	2300      	movs	r3, #0
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	370c      	adds	r7, #12
 8011b56:	46bd      	mov	sp, r7
 8011b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5c:	4770      	bx	lr

08011b5e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8011b5e:	b480      	push	{r7}
 8011b60:	b083      	sub	sp, #12
 8011b62:	af00      	add	r7, sp, #0
 8011b64:	6078      	str	r0, [r7, #4]
 8011b66:	460b      	mov	r3, r1
 8011b68:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	370c      	adds	r7, #12
 8011b70:	46bd      	mov	sp, r7
 8011b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b76:	4770      	bx	lr

08011b78 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011b80:	2300      	movs	r3, #0
}
 8011b82:	4618      	mov	r0, r3
 8011b84:	370c      	adds	r7, #12
 8011b86:	46bd      	mov	sp, r7
 8011b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8c:	4770      	bx	lr

08011b8e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8011b8e:	b580      	push	{r7, lr}
 8011b90:	b082      	sub	sp, #8
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2201      	movs	r2, #1
 8011b9a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	687a      	ldr	r2, [r7, #4]
 8011ba8:	6852      	ldr	r2, [r2, #4]
 8011baa:	b2d2      	uxtb	r2, r2
 8011bac:	4611      	mov	r1, r2
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	4798      	blx	r3

  return USBD_OK;
 8011bb2:	2300      	movs	r3, #0
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3708      	adds	r7, #8
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}

08011bbc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b084      	sub	sp, #16
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	781b      	ldrb	r3, [r3, #0]
 8011bce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011bd2:	2b20      	cmp	r3, #32
 8011bd4:	d004      	beq.n	8011be0 <USBD_StdDevReq+0x24>
 8011bd6:	2b40      	cmp	r3, #64	; 0x40
 8011bd8:	d002      	beq.n	8011be0 <USBD_StdDevReq+0x24>
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d008      	beq.n	8011bf0 <USBD_StdDevReq+0x34>
 8011bde:	e04c      	b.n	8011c7a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011be6:	689b      	ldr	r3, [r3, #8]
 8011be8:	6839      	ldr	r1, [r7, #0]
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	4798      	blx	r3
    break;
 8011bee:	e049      	b.n	8011c84 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	785b      	ldrb	r3, [r3, #1]
 8011bf4:	2b09      	cmp	r3, #9
 8011bf6:	d83a      	bhi.n	8011c6e <USBD_StdDevReq+0xb2>
 8011bf8:	a201      	add	r2, pc, #4	; (adr r2, 8011c00 <USBD_StdDevReq+0x44>)
 8011bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bfe:	bf00      	nop
 8011c00:	08011c51 	.word	0x08011c51
 8011c04:	08011c65 	.word	0x08011c65
 8011c08:	08011c6f 	.word	0x08011c6f
 8011c0c:	08011c5b 	.word	0x08011c5b
 8011c10:	08011c6f 	.word	0x08011c6f
 8011c14:	08011c33 	.word	0x08011c33
 8011c18:	08011c29 	.word	0x08011c29
 8011c1c:	08011c6f 	.word	0x08011c6f
 8011c20:	08011c47 	.word	0x08011c47
 8011c24:	08011c3d 	.word	0x08011c3d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8011c28:	6839      	ldr	r1, [r7, #0]
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f000 f9d2 	bl	8011fd4 <USBD_GetDescriptor>
      break;
 8011c30:	e022      	b.n	8011c78 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8011c32:	6839      	ldr	r1, [r7, #0]
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f000 fac7 	bl	80121c8 <USBD_SetAddress>
      break;
 8011c3a:	e01d      	b.n	8011c78 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8011c3c:	6839      	ldr	r1, [r7, #0]
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f000 fb04 	bl	801224c <USBD_SetConfig>
      break;
 8011c44:	e018      	b.n	8011c78 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8011c46:	6839      	ldr	r1, [r7, #0]
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f000 fb8d 	bl	8012368 <USBD_GetConfig>
      break;
 8011c4e:	e013      	b.n	8011c78 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8011c50:	6839      	ldr	r1, [r7, #0]
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f000 fbbc 	bl	80123d0 <USBD_GetStatus>
      break;
 8011c58:	e00e      	b.n	8011c78 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8011c5a:	6839      	ldr	r1, [r7, #0]
 8011c5c:	6878      	ldr	r0, [r7, #4]
 8011c5e:	f000 fbea 	bl	8012436 <USBD_SetFeature>
      break;
 8011c62:	e009      	b.n	8011c78 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8011c64:	6839      	ldr	r1, [r7, #0]
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f000 fbf9 	bl	801245e <USBD_ClrFeature>
      break;
 8011c6c:	e004      	b.n	8011c78 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8011c6e:	6839      	ldr	r1, [r7, #0]
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f000 fc52 	bl	801251a <USBD_CtlError>
      break;
 8011c76:	bf00      	nop
    }
    break;
 8011c78:	e004      	b.n	8011c84 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8011c7a:	6839      	ldr	r1, [r7, #0]
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f000 fc4c 	bl	801251a <USBD_CtlError>
    break;
 8011c82:	bf00      	nop
  }

  return ret;
 8011c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3710      	adds	r7, #16
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
 8011c8e:	bf00      	nop

08011c90 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b084      	sub	sp, #16
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ca6:	2b20      	cmp	r3, #32
 8011ca8:	d003      	beq.n	8011cb2 <USBD_StdItfReq+0x22>
 8011caa:	2b40      	cmp	r3, #64	; 0x40
 8011cac:	d001      	beq.n	8011cb2 <USBD_StdItfReq+0x22>
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d12a      	bne.n	8011d08 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011cb8:	3b01      	subs	r3, #1
 8011cba:	2b02      	cmp	r3, #2
 8011cbc:	d81d      	bhi.n	8011cfa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	889b      	ldrh	r3, [r3, #4]
 8011cc2:	b2db      	uxtb	r3, r3
 8011cc4:	2b01      	cmp	r3, #1
 8011cc6:	d813      	bhi.n	8011cf0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011cce:	689b      	ldr	r3, [r3, #8]
 8011cd0:	6839      	ldr	r1, [r7, #0]
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	4798      	blx	r3
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	88db      	ldrh	r3, [r3, #6]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d110      	bne.n	8011d04 <USBD_StdItfReq+0x74>
 8011ce2:	7bfb      	ldrb	r3, [r7, #15]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d10d      	bne.n	8011d04 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f000 fcdf 	bl	80126ac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011cee:	e009      	b.n	8011d04 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8011cf0:	6839      	ldr	r1, [r7, #0]
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f000 fc11 	bl	801251a <USBD_CtlError>
      break;
 8011cf8:	e004      	b.n	8011d04 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8011cfa:	6839      	ldr	r1, [r7, #0]
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f000 fc0c 	bl	801251a <USBD_CtlError>
      break;
 8011d02:	e000      	b.n	8011d06 <USBD_StdItfReq+0x76>
      break;
 8011d04:	bf00      	nop
    }
    break;
 8011d06:	e004      	b.n	8011d12 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8011d08:	6839      	ldr	r1, [r7, #0]
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f000 fc05 	bl	801251a <USBD_CtlError>
    break;
 8011d10:	bf00      	nop
  }

  return USBD_OK;
 8011d12:	2300      	movs	r3, #0
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3710      	adds	r7, #16
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}

08011d1c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011d26:	2300      	movs	r3, #0
 8011d28:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	889b      	ldrh	r3, [r3, #4]
 8011d2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d38:	2b20      	cmp	r3, #32
 8011d3a:	d004      	beq.n	8011d46 <USBD_StdEPReq+0x2a>
 8011d3c:	2b40      	cmp	r3, #64	; 0x40
 8011d3e:	d002      	beq.n	8011d46 <USBD_StdEPReq+0x2a>
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d008      	beq.n	8011d56 <USBD_StdEPReq+0x3a>
 8011d44:	e13b      	b.n	8011fbe <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011d4c:	689b      	ldr	r3, [r3, #8]
 8011d4e:	6839      	ldr	r1, [r7, #0]
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	4798      	blx	r3
    break;
 8011d54:	e138      	b.n	8011fc8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d5e:	2b20      	cmp	r3, #32
 8011d60:	d10a      	bne.n	8011d78 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011d68:	689b      	ldr	r3, [r3, #8]
 8011d6a:	6839      	ldr	r1, [r7, #0]
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	4798      	blx	r3
 8011d70:	4603      	mov	r3, r0
 8011d72:	73fb      	strb	r3, [r7, #15]

      return ret;
 8011d74:	7bfb      	ldrb	r3, [r7, #15]
 8011d76:	e128      	b.n	8011fca <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	785b      	ldrb	r3, [r3, #1]
 8011d7c:	2b01      	cmp	r3, #1
 8011d7e:	d03e      	beq.n	8011dfe <USBD_StdEPReq+0xe2>
 8011d80:	2b03      	cmp	r3, #3
 8011d82:	d002      	beq.n	8011d8a <USBD_StdEPReq+0x6e>
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d070      	beq.n	8011e6a <USBD_StdEPReq+0x14e>
 8011d88:	e113      	b.n	8011fb2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011d90:	2b02      	cmp	r3, #2
 8011d92:	d002      	beq.n	8011d9a <USBD_StdEPReq+0x7e>
 8011d94:	2b03      	cmp	r3, #3
 8011d96:	d015      	beq.n	8011dc4 <USBD_StdEPReq+0xa8>
 8011d98:	e02b      	b.n	8011df2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d9a:	7bbb      	ldrb	r3, [r7, #14]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d00c      	beq.n	8011dba <USBD_StdEPReq+0x9e>
 8011da0:	7bbb      	ldrb	r3, [r7, #14]
 8011da2:	2b80      	cmp	r3, #128	; 0x80
 8011da4:	d009      	beq.n	8011dba <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8011da6:	7bbb      	ldrb	r3, [r7, #14]
 8011da8:	4619      	mov	r1, r3
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f004 fe9a 	bl	8016ae4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8011db0:	2180      	movs	r1, #128	; 0x80
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f004 fe96 	bl	8016ae4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011db8:	e020      	b.n	8011dfc <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8011dba:	6839      	ldr	r1, [r7, #0]
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f000 fbac 	bl	801251a <USBD_CtlError>
        break;
 8011dc2:	e01b      	b.n	8011dfc <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	885b      	ldrh	r3, [r3, #2]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d10e      	bne.n	8011dea <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011dcc:	7bbb      	ldrb	r3, [r7, #14]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d00b      	beq.n	8011dea <USBD_StdEPReq+0xce>
 8011dd2:	7bbb      	ldrb	r3, [r7, #14]
 8011dd4:	2b80      	cmp	r3, #128	; 0x80
 8011dd6:	d008      	beq.n	8011dea <USBD_StdEPReq+0xce>
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	88db      	ldrh	r3, [r3, #6]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d104      	bne.n	8011dea <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8011de0:	7bbb      	ldrb	r3, [r7, #14]
 8011de2:	4619      	mov	r1, r3
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f004 fe7d 	bl	8016ae4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f000 fc5e 	bl	80126ac <USBD_CtlSendStatus>

        break;
 8011df0:	e004      	b.n	8011dfc <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8011df2:	6839      	ldr	r1, [r7, #0]
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f000 fb90 	bl	801251a <USBD_CtlError>
        break;
 8011dfa:	bf00      	nop
      }
      break;
 8011dfc:	e0de      	b.n	8011fbc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011e04:	2b02      	cmp	r3, #2
 8011e06:	d002      	beq.n	8011e0e <USBD_StdEPReq+0xf2>
 8011e08:	2b03      	cmp	r3, #3
 8011e0a:	d015      	beq.n	8011e38 <USBD_StdEPReq+0x11c>
 8011e0c:	e026      	b.n	8011e5c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e0e:	7bbb      	ldrb	r3, [r7, #14]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d00c      	beq.n	8011e2e <USBD_StdEPReq+0x112>
 8011e14:	7bbb      	ldrb	r3, [r7, #14]
 8011e16:	2b80      	cmp	r3, #128	; 0x80
 8011e18:	d009      	beq.n	8011e2e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8011e1a:	7bbb      	ldrb	r3, [r7, #14]
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f004 fe60 	bl	8016ae4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8011e24:	2180      	movs	r1, #128	; 0x80
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f004 fe5c 	bl	8016ae4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011e2c:	e01c      	b.n	8011e68 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8011e2e:	6839      	ldr	r1, [r7, #0]
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f000 fb72 	bl	801251a <USBD_CtlError>
        break;
 8011e36:	e017      	b.n	8011e68 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	885b      	ldrh	r3, [r3, #2]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d112      	bne.n	8011e66 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011e40:	7bbb      	ldrb	r3, [r7, #14]
 8011e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d004      	beq.n	8011e54 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8011e4a:	7bbb      	ldrb	r3, [r7, #14]
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f004 fe67 	bl	8016b22 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f000 fc29 	bl	80126ac <USBD_CtlSendStatus>
        }
        break;
 8011e5a:	e004      	b.n	8011e66 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8011e5c:	6839      	ldr	r1, [r7, #0]
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 fb5b 	bl	801251a <USBD_CtlError>
        break;
 8011e64:	e000      	b.n	8011e68 <USBD_StdEPReq+0x14c>
        break;
 8011e66:	bf00      	nop
      }
      break;
 8011e68:	e0a8      	b.n	8011fbc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011e70:	2b02      	cmp	r3, #2
 8011e72:	d002      	beq.n	8011e7a <USBD_StdEPReq+0x15e>
 8011e74:	2b03      	cmp	r3, #3
 8011e76:	d031      	beq.n	8011edc <USBD_StdEPReq+0x1c0>
 8011e78:	e095      	b.n	8011fa6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e7a:	7bbb      	ldrb	r3, [r7, #14]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d007      	beq.n	8011e90 <USBD_StdEPReq+0x174>
 8011e80:	7bbb      	ldrb	r3, [r7, #14]
 8011e82:	2b80      	cmp	r3, #128	; 0x80
 8011e84:	d004      	beq.n	8011e90 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8011e86:	6839      	ldr	r1, [r7, #0]
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f000 fb46 	bl	801251a <USBD_CtlError>
          break;
 8011e8e:	e08f      	b.n	8011fb0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8011e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	da0b      	bge.n	8011eb0 <USBD_StdEPReq+0x194>
 8011e98:	7bbb      	ldrb	r3, [r7, #14]
 8011e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e9e:	4613      	mov	r3, r2
 8011ea0:	009b      	lsls	r3, r3, #2
 8011ea2:	4413      	add	r3, r2
 8011ea4:	009b      	lsls	r3, r3, #2
 8011ea6:	3310      	adds	r3, #16
 8011ea8:	687a      	ldr	r2, [r7, #4]
 8011eaa:	4413      	add	r3, r2
 8011eac:	3304      	adds	r3, #4
 8011eae:	e00a      	b.n	8011ec6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8011eb0:	7bbb      	ldrb	r3, [r7, #14]
 8011eb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8011eb6:	4613      	mov	r3, r2
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	4413      	add	r3, r2
 8011ebc:	009b      	lsls	r3, r3, #2
 8011ebe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011ec2:	687a      	ldr	r2, [r7, #4]
 8011ec4:	4413      	add	r3, r2
 8011ec6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	2202      	movs	r2, #2
 8011ed2:	4619      	mov	r1, r3
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f000 fb8b 	bl	80125f0 <USBD_CtlSendData>
          break;
 8011eda:	e069      	b.n	8011fb0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8011edc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	da11      	bge.n	8011f08 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011ee4:	7bbb      	ldrb	r3, [r7, #14]
 8011ee6:	f003 020f 	and.w	r2, r3, #15
 8011eea:	6879      	ldr	r1, [r7, #4]
 8011eec:	4613      	mov	r3, r2
 8011eee:	009b      	lsls	r3, r3, #2
 8011ef0:	4413      	add	r3, r2
 8011ef2:	009b      	lsls	r3, r3, #2
 8011ef4:	440b      	add	r3, r1
 8011ef6:	3318      	adds	r3, #24
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d117      	bne.n	8011f2e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8011efe:	6839      	ldr	r1, [r7, #0]
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f000 fb0a 	bl	801251a <USBD_CtlError>
            break;
 8011f06:	e053      	b.n	8011fb0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011f08:	7bbb      	ldrb	r3, [r7, #14]
 8011f0a:	f003 020f 	and.w	r2, r3, #15
 8011f0e:	6879      	ldr	r1, [r7, #4]
 8011f10:	4613      	mov	r3, r2
 8011f12:	009b      	lsls	r3, r3, #2
 8011f14:	4413      	add	r3, r2
 8011f16:	009b      	lsls	r3, r3, #2
 8011f18:	440b      	add	r3, r1
 8011f1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d104      	bne.n	8011f2e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8011f24:	6839      	ldr	r1, [r7, #0]
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f000 faf7 	bl	801251a <USBD_CtlError>
            break;
 8011f2c:	e040      	b.n	8011fb0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8011f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	da0b      	bge.n	8011f4e <USBD_StdEPReq+0x232>
 8011f36:	7bbb      	ldrb	r3, [r7, #14]
 8011f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011f3c:	4613      	mov	r3, r2
 8011f3e:	009b      	lsls	r3, r3, #2
 8011f40:	4413      	add	r3, r2
 8011f42:	009b      	lsls	r3, r3, #2
 8011f44:	3310      	adds	r3, #16
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	4413      	add	r3, r2
 8011f4a:	3304      	adds	r3, #4
 8011f4c:	e00a      	b.n	8011f64 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8011f4e:	7bbb      	ldrb	r3, [r7, #14]
 8011f50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8011f54:	4613      	mov	r3, r2
 8011f56:	009b      	lsls	r3, r3, #2
 8011f58:	4413      	add	r3, r2
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011f60:	687a      	ldr	r2, [r7, #4]
 8011f62:	4413      	add	r3, r2
 8011f64:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011f66:	7bbb      	ldrb	r3, [r7, #14]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d002      	beq.n	8011f72 <USBD_StdEPReq+0x256>
 8011f6c:	7bbb      	ldrb	r3, [r7, #14]
 8011f6e:	2b80      	cmp	r3, #128	; 0x80
 8011f70:	d103      	bne.n	8011f7a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	2200      	movs	r2, #0
 8011f76:	601a      	str	r2, [r3, #0]
 8011f78:	e00e      	b.n	8011f98 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8011f7a:	7bbb      	ldrb	r3, [r7, #14]
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f004 fdee 	bl	8016b60 <USBD_LL_IsStallEP>
 8011f84:	4603      	mov	r3, r0
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d003      	beq.n	8011f92 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	2201      	movs	r2, #1
 8011f8e:	601a      	str	r2, [r3, #0]
 8011f90:	e002      	b.n	8011f98 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	2200      	movs	r2, #0
 8011f96:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	2202      	movs	r2, #2
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f000 fb26 	bl	80125f0 <USBD_CtlSendData>
          break;
 8011fa4:	e004      	b.n	8011fb0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8011fa6:	6839      	ldr	r1, [r7, #0]
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f000 fab6 	bl	801251a <USBD_CtlError>
        break;
 8011fae:	bf00      	nop
      }
      break;
 8011fb0:	e004      	b.n	8011fbc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8011fb2:	6839      	ldr	r1, [r7, #0]
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f000 fab0 	bl	801251a <USBD_CtlError>
      break;
 8011fba:	bf00      	nop
    }
    break;
 8011fbc:	e004      	b.n	8011fc8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8011fbe:	6839      	ldr	r1, [r7, #0]
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f000 faaa 	bl	801251a <USBD_CtlError>
    break;
 8011fc6:	bf00      	nop
  }

  return ret;
 8011fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3710      	adds	r7, #16
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}
	...

08011fd4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b084      	sub	sp, #16
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	885b      	ldrh	r3, [r3, #2]
 8011fe2:	0a1b      	lsrs	r3, r3, #8
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	3b01      	subs	r3, #1
 8011fe8:	2b06      	cmp	r3, #6
 8011fea:	f200 80c9 	bhi.w	8012180 <USBD_GetDescriptor+0x1ac>
 8011fee:	a201      	add	r2, pc, #4	; (adr r2, 8011ff4 <USBD_GetDescriptor+0x20>)
 8011ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ff4:	08012011 	.word	0x08012011
 8011ff8:	08012029 	.word	0x08012029
 8011ffc:	08012069 	.word	0x08012069
 8012000:	08012181 	.word	0x08012181
 8012004:	08012181 	.word	0x08012181
 8012008:	0801212d 	.word	0x0801212d
 801200c:	08012153 	.word	0x08012153
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	687a      	ldr	r2, [r7, #4]
 801201a:	7c12      	ldrb	r2, [r2, #16]
 801201c:	f107 010a 	add.w	r1, r7, #10
 8012020:	4610      	mov	r0, r2
 8012022:	4798      	blx	r3
 8012024:	60f8      	str	r0, [r7, #12]
    break;
 8012026:	e0b0      	b.n	801218a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	7c1b      	ldrb	r3, [r3, #16]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d10d      	bne.n	801204c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8012036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012038:	f107 020a 	add.w	r2, r7, #10
 801203c:	4610      	mov	r0, r2
 801203e:	4798      	blx	r3
 8012040:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	3301      	adds	r3, #1
 8012046:	2202      	movs	r2, #2
 8012048:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 801204a:	e09e      	b.n	801218a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8012052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012054:	f107 020a 	add.w	r2, r7, #10
 8012058:	4610      	mov	r0, r2
 801205a:	4798      	blx	r3
 801205c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	3301      	adds	r3, #1
 8012062:	2202      	movs	r2, #2
 8012064:	701a      	strb	r2, [r3, #0]
    break;
 8012066:	e090      	b.n	801218a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	885b      	ldrh	r3, [r3, #2]
 801206c:	b2db      	uxtb	r3, r3
 801206e:	2b05      	cmp	r3, #5
 8012070:	d856      	bhi.n	8012120 <USBD_GetDescriptor+0x14c>
 8012072:	a201      	add	r2, pc, #4	; (adr r2, 8012078 <USBD_GetDescriptor+0xa4>)
 8012074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012078:	08012091 	.word	0x08012091
 801207c:	080120a9 	.word	0x080120a9
 8012080:	080120c1 	.word	0x080120c1
 8012084:	080120d9 	.word	0x080120d9
 8012088:	080120f1 	.word	0x080120f1
 801208c:	08012109 	.word	0x08012109
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	687a      	ldr	r2, [r7, #4]
 801209a:	7c12      	ldrb	r2, [r2, #16]
 801209c:	f107 010a 	add.w	r1, r7, #10
 80120a0:	4610      	mov	r0, r2
 80120a2:	4798      	blx	r3
 80120a4:	60f8      	str	r0, [r7, #12]
      break;
 80120a6:	e040      	b.n	801212a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80120ae:	689b      	ldr	r3, [r3, #8]
 80120b0:	687a      	ldr	r2, [r7, #4]
 80120b2:	7c12      	ldrb	r2, [r2, #16]
 80120b4:	f107 010a 	add.w	r1, r7, #10
 80120b8:	4610      	mov	r0, r2
 80120ba:	4798      	blx	r3
 80120bc:	60f8      	str	r0, [r7, #12]
      break;
 80120be:	e034      	b.n	801212a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	687a      	ldr	r2, [r7, #4]
 80120ca:	7c12      	ldrb	r2, [r2, #16]
 80120cc:	f107 010a 	add.w	r1, r7, #10
 80120d0:	4610      	mov	r0, r2
 80120d2:	4798      	blx	r3
 80120d4:	60f8      	str	r0, [r7, #12]
      break;
 80120d6:	e028      	b.n	801212a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80120de:	691b      	ldr	r3, [r3, #16]
 80120e0:	687a      	ldr	r2, [r7, #4]
 80120e2:	7c12      	ldrb	r2, [r2, #16]
 80120e4:	f107 010a 	add.w	r1, r7, #10
 80120e8:	4610      	mov	r0, r2
 80120ea:	4798      	blx	r3
 80120ec:	60f8      	str	r0, [r7, #12]
      break;
 80120ee:	e01c      	b.n	801212a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80120f6:	695b      	ldr	r3, [r3, #20]
 80120f8:	687a      	ldr	r2, [r7, #4]
 80120fa:	7c12      	ldrb	r2, [r2, #16]
 80120fc:	f107 010a 	add.w	r1, r7, #10
 8012100:	4610      	mov	r0, r2
 8012102:	4798      	blx	r3
 8012104:	60f8      	str	r0, [r7, #12]
      break;
 8012106:	e010      	b.n	801212a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801210e:	699b      	ldr	r3, [r3, #24]
 8012110:	687a      	ldr	r2, [r7, #4]
 8012112:	7c12      	ldrb	r2, [r2, #16]
 8012114:	f107 010a 	add.w	r1, r7, #10
 8012118:	4610      	mov	r0, r2
 801211a:	4798      	blx	r3
 801211c:	60f8      	str	r0, [r7, #12]
      break;
 801211e:	e004      	b.n	801212a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8012120:	6839      	ldr	r1, [r7, #0]
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f000 f9f9 	bl	801251a <USBD_CtlError>
      return;
 8012128:	e04b      	b.n	80121c2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 801212a:	e02e      	b.n	801218a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	7c1b      	ldrb	r3, [r3, #16]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d109      	bne.n	8012148 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801213c:	f107 020a 	add.w	r2, r7, #10
 8012140:	4610      	mov	r0, r2
 8012142:	4798      	blx	r3
 8012144:	60f8      	str	r0, [r7, #12]
      break;
 8012146:	e020      	b.n	801218a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8012148:	6839      	ldr	r1, [r7, #0]
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 f9e5 	bl	801251a <USBD_CtlError>
      return;
 8012150:	e037      	b.n	80121c2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	7c1b      	ldrb	r3, [r3, #16]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d10d      	bne.n	8012176 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8012160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012162:	f107 020a 	add.w	r2, r7, #10
 8012166:	4610      	mov	r0, r2
 8012168:	4798      	blx	r3
 801216a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	3301      	adds	r3, #1
 8012170:	2207      	movs	r2, #7
 8012172:	701a      	strb	r2, [r3, #0]
      break;
 8012174:	e009      	b.n	801218a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8012176:	6839      	ldr	r1, [r7, #0]
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f000 f9ce 	bl	801251a <USBD_CtlError>
      return;
 801217e:	e020      	b.n	80121c2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8012180:	6839      	ldr	r1, [r7, #0]
 8012182:	6878      	ldr	r0, [r7, #4]
 8012184:	f000 f9c9 	bl	801251a <USBD_CtlError>
    return;
 8012188:	e01b      	b.n	80121c2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 801218a:	897b      	ldrh	r3, [r7, #10]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d011      	beq.n	80121b4 <USBD_GetDescriptor+0x1e0>
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	88db      	ldrh	r3, [r3, #6]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d00d      	beq.n	80121b4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	88da      	ldrh	r2, [r3, #6]
 801219c:	897b      	ldrh	r3, [r7, #10]
 801219e:	4293      	cmp	r3, r2
 80121a0:	bf28      	it	cs
 80121a2:	4613      	movcs	r3, r2
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80121a8:	897b      	ldrh	r3, [r7, #10]
 80121aa:	461a      	mov	r2, r3
 80121ac:	68f9      	ldr	r1, [r7, #12]
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f000 fa1e 	bl	80125f0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	88db      	ldrh	r3, [r3, #6]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d102      	bne.n	80121c2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f000 fa75 	bl	80126ac <USBD_CtlSendStatus>
  }
}
 80121c2:	3710      	adds	r7, #16
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	889b      	ldrh	r3, [r3, #4]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d130      	bne.n	801223c <USBD_SetAddress+0x74>
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	88db      	ldrh	r3, [r3, #6]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d12c      	bne.n	801223c <USBD_SetAddress+0x74>
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	885b      	ldrh	r3, [r3, #2]
 80121e6:	2b7f      	cmp	r3, #127	; 0x7f
 80121e8:	d828      	bhi.n	801223c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	885b      	ldrh	r3, [r3, #2]
 80121ee:	b2db      	uxtb	r3, r3
 80121f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80121fc:	2b03      	cmp	r3, #3
 80121fe:	d104      	bne.n	801220a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8012200:	6839      	ldr	r1, [r7, #0]
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f000 f989 	bl	801251a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012208:	e01c      	b.n	8012244 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	7bfa      	ldrb	r2, [r7, #15]
 801220e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012212:	7bfb      	ldrb	r3, [r7, #15]
 8012214:	4619      	mov	r1, r3
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f004 fcce 	bl	8016bb8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f000 fa45 	bl	80126ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012222:	7bfb      	ldrb	r3, [r7, #15]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d004      	beq.n	8012232 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2202      	movs	r2, #2
 801222c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012230:	e008      	b.n	8012244 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2201      	movs	r2, #1
 8012236:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801223a:	e003      	b.n	8012244 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801223c:	6839      	ldr	r1, [r7, #0]
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f000 f96b 	bl	801251a <USBD_CtlError>
  }
}
 8012244:	bf00      	nop
 8012246:	3710      	adds	r7, #16
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}

0801224c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	885b      	ldrh	r3, [r3, #2]
 801225a:	b2da      	uxtb	r2, r3
 801225c:	4b41      	ldr	r3, [pc, #260]	; (8012364 <USBD_SetConfig+0x118>)
 801225e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012260:	4b40      	ldr	r3, [pc, #256]	; (8012364 <USBD_SetConfig+0x118>)
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	2b01      	cmp	r3, #1
 8012266:	d904      	bls.n	8012272 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8012268:	6839      	ldr	r1, [r7, #0]
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f000 f955 	bl	801251a <USBD_CtlError>
 8012270:	e075      	b.n	801235e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8012278:	2b02      	cmp	r3, #2
 801227a:	d002      	beq.n	8012282 <USBD_SetConfig+0x36>
 801227c:	2b03      	cmp	r3, #3
 801227e:	d023      	beq.n	80122c8 <USBD_SetConfig+0x7c>
 8012280:	e062      	b.n	8012348 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8012282:	4b38      	ldr	r3, [pc, #224]	; (8012364 <USBD_SetConfig+0x118>)
 8012284:	781b      	ldrb	r3, [r3, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d01a      	beq.n	80122c0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 801228a:	4b36      	ldr	r3, [pc, #216]	; (8012364 <USBD_SetConfig+0x118>)
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	461a      	mov	r2, r3
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2203      	movs	r2, #3
 8012298:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801229c:	4b31      	ldr	r3, [pc, #196]	; (8012364 <USBD_SetConfig+0x118>)
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	4619      	mov	r1, r3
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f7ff fa2a 	bl	80116fc <USBD_SetClassConfig>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b02      	cmp	r3, #2
 80122ac:	d104      	bne.n	80122b8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80122ae:	6839      	ldr	r1, [r7, #0]
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 f932 	bl	801251a <USBD_CtlError>
          return;
 80122b6:	e052      	b.n	801235e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 f9f7 	bl	80126ac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80122be:	e04e      	b.n	801235e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f000 f9f3 	bl	80126ac <USBD_CtlSendStatus>
      break;
 80122c6:	e04a      	b.n	801235e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80122c8:	4b26      	ldr	r3, [pc, #152]	; (8012364 <USBD_SetConfig+0x118>)
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d112      	bne.n	80122f6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2202      	movs	r2, #2
 80122d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80122d8:	4b22      	ldr	r3, [pc, #136]	; (8012364 <USBD_SetConfig+0x118>)
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	461a      	mov	r2, r3
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80122e2:	4b20      	ldr	r3, [pc, #128]	; (8012364 <USBD_SetConfig+0x118>)
 80122e4:	781b      	ldrb	r3, [r3, #0]
 80122e6:	4619      	mov	r1, r3
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7ff fa26 	bl	801173a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f000 f9dc 	bl	80126ac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80122f4:	e033      	b.n	801235e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80122f6:	4b1b      	ldr	r3, [pc, #108]	; (8012364 <USBD_SetConfig+0x118>)
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	461a      	mov	r2, r3
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	429a      	cmp	r2, r3
 8012302:	d01d      	beq.n	8012340 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	b2db      	uxtb	r3, r3
 801230a:	4619      	mov	r1, r3
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f7ff fa14 	bl	801173a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012312:	4b14      	ldr	r3, [pc, #80]	; (8012364 <USBD_SetConfig+0x118>)
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	461a      	mov	r2, r3
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801231c:	4b11      	ldr	r3, [pc, #68]	; (8012364 <USBD_SetConfig+0x118>)
 801231e:	781b      	ldrb	r3, [r3, #0]
 8012320:	4619      	mov	r1, r3
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f7ff f9ea 	bl	80116fc <USBD_SetClassConfig>
 8012328:	4603      	mov	r3, r0
 801232a:	2b02      	cmp	r3, #2
 801232c:	d104      	bne.n	8012338 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 801232e:	6839      	ldr	r1, [r7, #0]
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f000 f8f2 	bl	801251a <USBD_CtlError>
          return;
 8012336:	e012      	b.n	801235e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f000 f9b7 	bl	80126ac <USBD_CtlSendStatus>
      break;
 801233e:	e00e      	b.n	801235e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f000 f9b3 	bl	80126ac <USBD_CtlSendStatus>
      break;
 8012346:	e00a      	b.n	801235e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8012348:	6839      	ldr	r1, [r7, #0]
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f000 f8e5 	bl	801251a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8012350:	4b04      	ldr	r3, [pc, #16]	; (8012364 <USBD_SetConfig+0x118>)
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	4619      	mov	r1, r3
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f7ff f9ef 	bl	801173a <USBD_ClrClassConfig>
      break;
 801235c:	bf00      	nop
    }
  }
}
 801235e:	3708      	adds	r7, #8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}
 8012364:	20000c00 	.word	0x20000c00

08012368 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	88db      	ldrh	r3, [r3, #6]
 8012376:	2b01      	cmp	r3, #1
 8012378:	d004      	beq.n	8012384 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 801237a:	6839      	ldr	r1, [r7, #0]
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f000 f8cc 	bl	801251a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8012382:	e021      	b.n	80123c8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801238a:	2b01      	cmp	r3, #1
 801238c:	db17      	blt.n	80123be <USBD_GetConfig+0x56>
 801238e:	2b02      	cmp	r3, #2
 8012390:	dd02      	ble.n	8012398 <USBD_GetConfig+0x30>
 8012392:	2b03      	cmp	r3, #3
 8012394:	d00b      	beq.n	80123ae <USBD_GetConfig+0x46>
 8012396:	e012      	b.n	80123be <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2200      	movs	r2, #0
 801239c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	3308      	adds	r3, #8
 80123a2:	2201      	movs	r2, #1
 80123a4:	4619      	mov	r1, r3
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f000 f922 	bl	80125f0 <USBD_CtlSendData>
      break;
 80123ac:	e00c      	b.n	80123c8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	3304      	adds	r3, #4
 80123b2:	2201      	movs	r2, #1
 80123b4:	4619      	mov	r1, r3
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f000 f91a 	bl	80125f0 <USBD_CtlSendData>
      break;
 80123bc:	e004      	b.n	80123c8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80123be:	6839      	ldr	r1, [r7, #0]
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f000 f8aa 	bl	801251a <USBD_CtlError>
      break;
 80123c6:	bf00      	nop
}
 80123c8:	bf00      	nop
 80123ca:	3708      	adds	r7, #8
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80123e0:	3b01      	subs	r3, #1
 80123e2:	2b02      	cmp	r3, #2
 80123e4:	d81e      	bhi.n	8012424 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	88db      	ldrh	r3, [r3, #6]
 80123ea:	2b02      	cmp	r3, #2
 80123ec:	d004      	beq.n	80123f8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80123ee:	6839      	ldr	r1, [r7, #0]
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f000 f892 	bl	801251a <USBD_CtlError>
      break;
 80123f6:	e01a      	b.n	801242e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2201      	movs	r2, #1
 80123fc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8012404:	2b00      	cmp	r3, #0
 8012406:	d005      	beq.n	8012414 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	f043 0202 	orr.w	r2, r3, #2
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	330c      	adds	r3, #12
 8012418:	2202      	movs	r2, #2
 801241a:	4619      	mov	r1, r3
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f000 f8e7 	bl	80125f0 <USBD_CtlSendData>
    break;
 8012422:	e004      	b.n	801242e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8012424:	6839      	ldr	r1, [r7, #0]
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f000 f877 	bl	801251a <USBD_CtlError>
    break;
 801242c:	bf00      	nop
  }
}
 801242e:	bf00      	nop
 8012430:	3708      	adds	r7, #8
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}

08012436 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8012436:	b580      	push	{r7, lr}
 8012438:	b082      	sub	sp, #8
 801243a:	af00      	add	r7, sp, #0
 801243c:	6078      	str	r0, [r7, #4]
 801243e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	885b      	ldrh	r3, [r3, #2]
 8012444:	2b01      	cmp	r3, #1
 8012446:	d106      	bne.n	8012456 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2201      	movs	r2, #1
 801244c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f000 f92b 	bl	80126ac <USBD_CtlSendStatus>
  }

}
 8012456:	bf00      	nop
 8012458:	3708      	adds	r7, #8
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}

0801245e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801245e:	b580      	push	{r7, lr}
 8012460:	b082      	sub	sp, #8
 8012462:	af00      	add	r7, sp, #0
 8012464:	6078      	str	r0, [r7, #4]
 8012466:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801246e:	3b01      	subs	r3, #1
 8012470:	2b02      	cmp	r3, #2
 8012472:	d80b      	bhi.n	801248c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	885b      	ldrh	r3, [r3, #2]
 8012478:	2b01      	cmp	r3, #1
 801247a:	d10c      	bne.n	8012496 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2200      	movs	r2, #0
 8012480:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f000 f911 	bl	80126ac <USBD_CtlSendStatus>
    }
    break;
 801248a:	e004      	b.n	8012496 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 801248c:	6839      	ldr	r1, [r7, #0]
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f000 f843 	bl	801251a <USBD_CtlError>
    break;
 8012494:	e000      	b.n	8012498 <USBD_ClrFeature+0x3a>
    break;
 8012496:	bf00      	nop
  }
}
 8012498:	bf00      	nop
 801249a:	3708      	adds	r7, #8
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}

080124a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80124a0:	b480      	push	{r7}
 80124a2:	b083      	sub	sp, #12
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
 80124a8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	781a      	ldrb	r2, [r3, #0]
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	785a      	ldrb	r2, [r3, #1]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	3302      	adds	r3, #2
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	b29a      	uxth	r2, r3
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	3303      	adds	r3, #3
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	021b      	lsls	r3, r3, #8
 80124cc:	b29b      	uxth	r3, r3
 80124ce:	4413      	add	r3, r2
 80124d0:	b29a      	uxth	r2, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	3304      	adds	r3, #4
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	b29a      	uxth	r2, r3
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	3305      	adds	r3, #5
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	b29b      	uxth	r3, r3
 80124e6:	021b      	lsls	r3, r3, #8
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	4413      	add	r3, r2
 80124ec:	b29a      	uxth	r2, r3
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	3306      	adds	r3, #6
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	3307      	adds	r3, #7
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	b29b      	uxth	r3, r3
 8012502:	021b      	lsls	r3, r3, #8
 8012504:	b29b      	uxth	r3, r3
 8012506:	4413      	add	r3, r2
 8012508:	b29a      	uxth	r2, r3
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	80da      	strh	r2, [r3, #6]

}
 801250e:	bf00      	nop
 8012510:	370c      	adds	r7, #12
 8012512:	46bd      	mov	sp, r7
 8012514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012518:	4770      	bx	lr

0801251a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801251a:	b580      	push	{r7, lr}
 801251c:	b082      	sub	sp, #8
 801251e:	af00      	add	r7, sp, #0
 8012520:	6078      	str	r0, [r7, #4]
 8012522:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8012524:	2180      	movs	r1, #128	; 0x80
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f004 fadc 	bl	8016ae4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 801252c:	2100      	movs	r1, #0
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f004 fad8 	bl	8016ae4 <USBD_LL_StallEP>
}
 8012534:	bf00      	nop
 8012536:	3708      	adds	r7, #8
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}

0801253c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b086      	sub	sp, #24
 8012540:	af00      	add	r7, sp, #0
 8012542:	60f8      	str	r0, [r7, #12]
 8012544:	60b9      	str	r1, [r7, #8]
 8012546:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012548:	2300      	movs	r3, #0
 801254a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d032      	beq.n	80125b8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8012552:	68f8      	ldr	r0, [r7, #12]
 8012554:	f000 f834 	bl	80125c0 <USBD_GetLen>
 8012558:	4603      	mov	r3, r0
 801255a:	3301      	adds	r3, #1
 801255c:	b29b      	uxth	r3, r3
 801255e:	005b      	lsls	r3, r3, #1
 8012560:	b29a      	uxth	r2, r3
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8012566:	7dfb      	ldrb	r3, [r7, #23]
 8012568:	1c5a      	adds	r2, r3, #1
 801256a:	75fa      	strb	r2, [r7, #23]
 801256c:	461a      	mov	r2, r3
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	4413      	add	r3, r2
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	7812      	ldrb	r2, [r2, #0]
 8012576:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8012578:	7dfb      	ldrb	r3, [r7, #23]
 801257a:	1c5a      	adds	r2, r3, #1
 801257c:	75fa      	strb	r2, [r7, #23]
 801257e:	461a      	mov	r2, r3
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	4413      	add	r3, r2
 8012584:	2203      	movs	r2, #3
 8012586:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8012588:	e012      	b.n	80125b0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	1c5a      	adds	r2, r3, #1
 801258e:	60fa      	str	r2, [r7, #12]
 8012590:	7dfa      	ldrb	r2, [r7, #23]
 8012592:	1c51      	adds	r1, r2, #1
 8012594:	75f9      	strb	r1, [r7, #23]
 8012596:	4611      	mov	r1, r2
 8012598:	68ba      	ldr	r2, [r7, #8]
 801259a:	440a      	add	r2, r1
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80125a0:	7dfb      	ldrb	r3, [r7, #23]
 80125a2:	1c5a      	adds	r2, r3, #1
 80125a4:	75fa      	strb	r2, [r7, #23]
 80125a6:	461a      	mov	r2, r3
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	4413      	add	r3, r2
 80125ac:	2200      	movs	r2, #0
 80125ae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d1e8      	bne.n	801258a <USBD_GetString+0x4e>
    }
  }
}
 80125b8:	bf00      	nop
 80125ba:	3718      	adds	r7, #24
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b085      	sub	sp, #20
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80125c8:	2300      	movs	r3, #0
 80125ca:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80125cc:	e005      	b.n	80125da <USBD_GetLen+0x1a>
    {
        len++;
 80125ce:	7bfb      	ldrb	r3, [r7, #15]
 80125d0:	3301      	adds	r3, #1
 80125d2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	3301      	adds	r3, #1
 80125d8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1f5      	bne.n	80125ce <USBD_GetLen+0xe>
    }

    return len;
 80125e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80125e4:	4618      	mov	r0, r3
 80125e6:	3714      	adds	r7, #20
 80125e8:	46bd      	mov	sp, r7
 80125ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ee:	4770      	bx	lr

080125f0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	60f8      	str	r0, [r7, #12]
 80125f8:	60b9      	str	r1, [r7, #8]
 80125fa:	4613      	mov	r3, r2
 80125fc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	2202      	movs	r2, #2
 8012602:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8012606:	88fa      	ldrh	r2, [r7, #6]
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801260c:	88fa      	ldrh	r2, [r7, #6]
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8012612:	88fb      	ldrh	r3, [r7, #6]
 8012614:	68ba      	ldr	r2, [r7, #8]
 8012616:	2100      	movs	r1, #0
 8012618:	68f8      	ldr	r0, [r7, #12]
 801261a:	f004 faec 	bl	8016bf6 <USBD_LL_Transmit>

  return USBD_OK;
 801261e:	2300      	movs	r3, #0
}
 8012620:	4618      	mov	r0, r3
 8012622:	3710      	adds	r7, #16
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}

08012628 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b084      	sub	sp, #16
 801262c:	af00      	add	r7, sp, #0
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	4613      	mov	r3, r2
 8012634:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8012636:	88fb      	ldrh	r3, [r7, #6]
 8012638:	68ba      	ldr	r2, [r7, #8]
 801263a:	2100      	movs	r1, #0
 801263c:	68f8      	ldr	r0, [r7, #12]
 801263e:	f004 fada 	bl	8016bf6 <USBD_LL_Transmit>

  return USBD_OK;
 8012642:	2300      	movs	r3, #0
}
 8012644:	4618      	mov	r0, r3
 8012646:	3710      	adds	r7, #16
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b084      	sub	sp, #16
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	4613      	mov	r3, r2
 8012658:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	2203      	movs	r2, #3
 801265e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8012662:	88fa      	ldrh	r2, [r7, #6]
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 801266a:	88fa      	ldrh	r2, [r7, #6]
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8012672:	88fb      	ldrh	r3, [r7, #6]
 8012674:	68ba      	ldr	r2, [r7, #8]
 8012676:	2100      	movs	r1, #0
 8012678:	68f8      	ldr	r0, [r7, #12]
 801267a:	f004 fadf 	bl	8016c3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801267e:	2300      	movs	r3, #0
}
 8012680:	4618      	mov	r0, r3
 8012682:	3710      	adds	r7, #16
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}

08012688 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	60f8      	str	r0, [r7, #12]
 8012690:	60b9      	str	r1, [r7, #8]
 8012692:	4613      	mov	r3, r2
 8012694:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012696:	88fb      	ldrh	r3, [r7, #6]
 8012698:	68ba      	ldr	r2, [r7, #8]
 801269a:	2100      	movs	r1, #0
 801269c:	68f8      	ldr	r0, [r7, #12]
 801269e:	f004 facd 	bl	8016c3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80126a2:	2300      	movs	r3, #0
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3710      	adds	r7, #16
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b082      	sub	sp, #8
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2204      	movs	r2, #4
 80126b8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80126bc:	2300      	movs	r3, #0
 80126be:	2200      	movs	r2, #0
 80126c0:	2100      	movs	r1, #0
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f004 fa97 	bl	8016bf6 <USBD_LL_Transmit>

  return USBD_OK;
 80126c8:	2300      	movs	r3, #0
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3708      	adds	r7, #8
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}

080126d2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80126d2:	b580      	push	{r7, lr}
 80126d4:	b082      	sub	sp, #8
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2205      	movs	r2, #5
 80126de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80126e2:	2300      	movs	r3, #0
 80126e4:	2200      	movs	r2, #0
 80126e6:	2100      	movs	r1, #0
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f004 faa7 	bl	8016c3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80126ee:	2300      	movs	r3, #0
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	3708      	adds	r7, #8
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	4603      	mov	r3, r0
 8012700:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012702:	79fb      	ldrb	r3, [r7, #7]
 8012704:	4a08      	ldr	r2, [pc, #32]	; (8012728 <disk_status+0x30>)
 8012706:	009b      	lsls	r3, r3, #2
 8012708:	4413      	add	r3, r2
 801270a:	685b      	ldr	r3, [r3, #4]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	79fa      	ldrb	r2, [r7, #7]
 8012710:	4905      	ldr	r1, [pc, #20]	; (8012728 <disk_status+0x30>)
 8012712:	440a      	add	r2, r1
 8012714:	7a12      	ldrb	r2, [r2, #8]
 8012716:	4610      	mov	r0, r2
 8012718:	4798      	blx	r3
 801271a:	4603      	mov	r3, r0
 801271c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012720:	4618      	mov	r0, r3
 8012722:	3710      	adds	r7, #16
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	20000e2c 	.word	0x20000e2c

0801272c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	4603      	mov	r3, r0
 8012734:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012736:	2300      	movs	r3, #0
 8012738:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801273a:	79fb      	ldrb	r3, [r7, #7]
 801273c:	4a0d      	ldr	r2, [pc, #52]	; (8012774 <disk_initialize+0x48>)
 801273e:	5cd3      	ldrb	r3, [r2, r3]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d111      	bne.n	8012768 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012744:	79fb      	ldrb	r3, [r7, #7]
 8012746:	4a0b      	ldr	r2, [pc, #44]	; (8012774 <disk_initialize+0x48>)
 8012748:	2101      	movs	r1, #1
 801274a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801274c:	79fb      	ldrb	r3, [r7, #7]
 801274e:	4a09      	ldr	r2, [pc, #36]	; (8012774 <disk_initialize+0x48>)
 8012750:	009b      	lsls	r3, r3, #2
 8012752:	4413      	add	r3, r2
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	79fa      	ldrb	r2, [r7, #7]
 801275a:	4906      	ldr	r1, [pc, #24]	; (8012774 <disk_initialize+0x48>)
 801275c:	440a      	add	r2, r1
 801275e:	7a12      	ldrb	r2, [r2, #8]
 8012760:	4610      	mov	r0, r2
 8012762:	4798      	blx	r3
 8012764:	4603      	mov	r3, r0
 8012766:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012768:	7bfb      	ldrb	r3, [r7, #15]
}
 801276a:	4618      	mov	r0, r3
 801276c:	3710      	adds	r7, #16
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}
 8012772:	bf00      	nop
 8012774:	20000e2c 	.word	0x20000e2c

08012778 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012778:	b590      	push	{r4, r7, lr}
 801277a:	b087      	sub	sp, #28
 801277c:	af00      	add	r7, sp, #0
 801277e:	60b9      	str	r1, [r7, #8]
 8012780:	607a      	str	r2, [r7, #4]
 8012782:	603b      	str	r3, [r7, #0]
 8012784:	4603      	mov	r3, r0
 8012786:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012788:	7bfb      	ldrb	r3, [r7, #15]
 801278a:	4a0a      	ldr	r2, [pc, #40]	; (80127b4 <disk_read+0x3c>)
 801278c:	009b      	lsls	r3, r3, #2
 801278e:	4413      	add	r3, r2
 8012790:	685b      	ldr	r3, [r3, #4]
 8012792:	689c      	ldr	r4, [r3, #8]
 8012794:	7bfb      	ldrb	r3, [r7, #15]
 8012796:	4a07      	ldr	r2, [pc, #28]	; (80127b4 <disk_read+0x3c>)
 8012798:	4413      	add	r3, r2
 801279a:	7a18      	ldrb	r0, [r3, #8]
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	687a      	ldr	r2, [r7, #4]
 80127a0:	68b9      	ldr	r1, [r7, #8]
 80127a2:	47a0      	blx	r4
 80127a4:	4603      	mov	r3, r0
 80127a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80127a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	371c      	adds	r7, #28
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd90      	pop	{r4, r7, pc}
 80127b2:	bf00      	nop
 80127b4:	20000e2c 	.word	0x20000e2c

080127b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80127b8:	b590      	push	{r4, r7, lr}
 80127ba:	b087      	sub	sp, #28
 80127bc:	af00      	add	r7, sp, #0
 80127be:	60b9      	str	r1, [r7, #8]
 80127c0:	607a      	str	r2, [r7, #4]
 80127c2:	603b      	str	r3, [r7, #0]
 80127c4:	4603      	mov	r3, r0
 80127c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80127c8:	7bfb      	ldrb	r3, [r7, #15]
 80127ca:	4a0a      	ldr	r2, [pc, #40]	; (80127f4 <disk_write+0x3c>)
 80127cc:	009b      	lsls	r3, r3, #2
 80127ce:	4413      	add	r3, r2
 80127d0:	685b      	ldr	r3, [r3, #4]
 80127d2:	68dc      	ldr	r4, [r3, #12]
 80127d4:	7bfb      	ldrb	r3, [r7, #15]
 80127d6:	4a07      	ldr	r2, [pc, #28]	; (80127f4 <disk_write+0x3c>)
 80127d8:	4413      	add	r3, r2
 80127da:	7a18      	ldrb	r0, [r3, #8]
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	68b9      	ldr	r1, [r7, #8]
 80127e2:	47a0      	blx	r4
 80127e4:	4603      	mov	r3, r0
 80127e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80127e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	371c      	adds	r7, #28
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd90      	pop	{r4, r7, pc}
 80127f2:	bf00      	nop
 80127f4:	20000e2c 	.word	0x20000e2c

080127f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b084      	sub	sp, #16
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	4603      	mov	r3, r0
 8012800:	603a      	str	r2, [r7, #0]
 8012802:	71fb      	strb	r3, [r7, #7]
 8012804:	460b      	mov	r3, r1
 8012806:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012808:	79fb      	ldrb	r3, [r7, #7]
 801280a:	4a09      	ldr	r2, [pc, #36]	; (8012830 <disk_ioctl+0x38>)
 801280c:	009b      	lsls	r3, r3, #2
 801280e:	4413      	add	r3, r2
 8012810:	685b      	ldr	r3, [r3, #4]
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	79fa      	ldrb	r2, [r7, #7]
 8012816:	4906      	ldr	r1, [pc, #24]	; (8012830 <disk_ioctl+0x38>)
 8012818:	440a      	add	r2, r1
 801281a:	7a10      	ldrb	r0, [r2, #8]
 801281c:	79b9      	ldrb	r1, [r7, #6]
 801281e:	683a      	ldr	r2, [r7, #0]
 8012820:	4798      	blx	r3
 8012822:	4603      	mov	r3, r0
 8012824:	73fb      	strb	r3, [r7, #15]
  return res;
 8012826:	7bfb      	ldrb	r3, [r7, #15]
}
 8012828:	4618      	mov	r0, r3
 801282a:	3710      	adds	r7, #16
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	20000e2c 	.word	0x20000e2c

08012834 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012834:	b480      	push	{r7}
 8012836:	b085      	sub	sp, #20
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	3301      	adds	r3, #1
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012844:	89fb      	ldrh	r3, [r7, #14]
 8012846:	021b      	lsls	r3, r3, #8
 8012848:	b21a      	sxth	r2, r3
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	b21b      	sxth	r3, r3
 8012850:	4313      	orrs	r3, r2
 8012852:	b21b      	sxth	r3, r3
 8012854:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012856:	89fb      	ldrh	r3, [r7, #14]
}
 8012858:	4618      	mov	r0, r3
 801285a:	3714      	adds	r7, #20
 801285c:	46bd      	mov	sp, r7
 801285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012862:	4770      	bx	lr

08012864 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012864:	b480      	push	{r7}
 8012866:	b085      	sub	sp, #20
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	3303      	adds	r3, #3
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	021b      	lsls	r3, r3, #8
 8012878:	687a      	ldr	r2, [r7, #4]
 801287a:	3202      	adds	r2, #2
 801287c:	7812      	ldrb	r2, [r2, #0]
 801287e:	4313      	orrs	r3, r2
 8012880:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	021b      	lsls	r3, r3, #8
 8012886:	687a      	ldr	r2, [r7, #4]
 8012888:	3201      	adds	r2, #1
 801288a:	7812      	ldrb	r2, [r2, #0]
 801288c:	4313      	orrs	r3, r2
 801288e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	021b      	lsls	r3, r3, #8
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	7812      	ldrb	r2, [r2, #0]
 8012898:	4313      	orrs	r3, r2
 801289a:	60fb      	str	r3, [r7, #12]
	return rv;
 801289c:	68fb      	ldr	r3, [r7, #12]
}
 801289e:	4618      	mov	r0, r3
 80128a0:	3714      	adds	r7, #20
 80128a2:	46bd      	mov	sp, r7
 80128a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a8:	4770      	bx	lr

080128aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80128aa:	b480      	push	{r7}
 80128ac:	b083      	sub	sp, #12
 80128ae:	af00      	add	r7, sp, #0
 80128b0:	6078      	str	r0, [r7, #4]
 80128b2:	460b      	mov	r3, r1
 80128b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	1c5a      	adds	r2, r3, #1
 80128ba:	607a      	str	r2, [r7, #4]
 80128bc:	887a      	ldrh	r2, [r7, #2]
 80128be:	b2d2      	uxtb	r2, r2
 80128c0:	701a      	strb	r2, [r3, #0]
 80128c2:	887b      	ldrh	r3, [r7, #2]
 80128c4:	0a1b      	lsrs	r3, r3, #8
 80128c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	1c5a      	adds	r2, r3, #1
 80128cc:	607a      	str	r2, [r7, #4]
 80128ce:	887a      	ldrh	r2, [r7, #2]
 80128d0:	b2d2      	uxtb	r2, r2
 80128d2:	701a      	strb	r2, [r3, #0]
}
 80128d4:	bf00      	nop
 80128d6:	370c      	adds	r7, #12
 80128d8:	46bd      	mov	sp, r7
 80128da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128de:	4770      	bx	lr

080128e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80128e0:	b480      	push	{r7}
 80128e2:	b083      	sub	sp, #12
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	1c5a      	adds	r2, r3, #1
 80128ee:	607a      	str	r2, [r7, #4]
 80128f0:	683a      	ldr	r2, [r7, #0]
 80128f2:	b2d2      	uxtb	r2, r2
 80128f4:	701a      	strb	r2, [r3, #0]
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	0a1b      	lsrs	r3, r3, #8
 80128fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	1c5a      	adds	r2, r3, #1
 8012900:	607a      	str	r2, [r7, #4]
 8012902:	683a      	ldr	r2, [r7, #0]
 8012904:	b2d2      	uxtb	r2, r2
 8012906:	701a      	strb	r2, [r3, #0]
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	0a1b      	lsrs	r3, r3, #8
 801290c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	1c5a      	adds	r2, r3, #1
 8012912:	607a      	str	r2, [r7, #4]
 8012914:	683a      	ldr	r2, [r7, #0]
 8012916:	b2d2      	uxtb	r2, r2
 8012918:	701a      	strb	r2, [r3, #0]
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	0a1b      	lsrs	r3, r3, #8
 801291e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	1c5a      	adds	r2, r3, #1
 8012924:	607a      	str	r2, [r7, #4]
 8012926:	683a      	ldr	r2, [r7, #0]
 8012928:	b2d2      	uxtb	r2, r2
 801292a:	701a      	strb	r2, [r3, #0]
}
 801292c:	bf00      	nop
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr

08012938 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012938:	b480      	push	{r7}
 801293a:	b087      	sub	sp, #28
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	60b9      	str	r1, [r7, #8]
 8012942:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d00d      	beq.n	801296e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012952:	693a      	ldr	r2, [r7, #16]
 8012954:	1c53      	adds	r3, r2, #1
 8012956:	613b      	str	r3, [r7, #16]
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	1c59      	adds	r1, r3, #1
 801295c:	6179      	str	r1, [r7, #20]
 801295e:	7812      	ldrb	r2, [r2, #0]
 8012960:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	3b01      	subs	r3, #1
 8012966:	607b      	str	r3, [r7, #4]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d1f1      	bne.n	8012952 <mem_cpy+0x1a>
	}
}
 801296e:	bf00      	nop
 8012970:	371c      	adds	r7, #28
 8012972:	46bd      	mov	sp, r7
 8012974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012978:	4770      	bx	lr

0801297a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801297a:	b480      	push	{r7}
 801297c:	b087      	sub	sp, #28
 801297e:	af00      	add	r7, sp, #0
 8012980:	60f8      	str	r0, [r7, #12]
 8012982:	60b9      	str	r1, [r7, #8]
 8012984:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	1c5a      	adds	r2, r3, #1
 801298e:	617a      	str	r2, [r7, #20]
 8012990:	68ba      	ldr	r2, [r7, #8]
 8012992:	b2d2      	uxtb	r2, r2
 8012994:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3b01      	subs	r3, #1
 801299a:	607b      	str	r3, [r7, #4]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d1f3      	bne.n	801298a <mem_set+0x10>
}
 80129a2:	bf00      	nop
 80129a4:	371c      	adds	r7, #28
 80129a6:	46bd      	mov	sp, r7
 80129a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ac:	4770      	bx	lr

080129ae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80129ae:	b480      	push	{r7}
 80129b0:	b089      	sub	sp, #36	; 0x24
 80129b2:	af00      	add	r7, sp, #0
 80129b4:	60f8      	str	r0, [r7, #12]
 80129b6:	60b9      	str	r1, [r7, #8]
 80129b8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	61fb      	str	r3, [r7, #28]
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80129c2:	2300      	movs	r3, #0
 80129c4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80129c6:	69fb      	ldr	r3, [r7, #28]
 80129c8:	1c5a      	adds	r2, r3, #1
 80129ca:	61fa      	str	r2, [r7, #28]
 80129cc:	781b      	ldrb	r3, [r3, #0]
 80129ce:	4619      	mov	r1, r3
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	1c5a      	adds	r2, r3, #1
 80129d4:	61ba      	str	r2, [r7, #24]
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	1acb      	subs	r3, r1, r3
 80129da:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	3b01      	subs	r3, #1
 80129e0:	607b      	str	r3, [r7, #4]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d002      	beq.n	80129ee <mem_cmp+0x40>
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d0eb      	beq.n	80129c6 <mem_cmp+0x18>

	return r;
 80129ee:	697b      	ldr	r3, [r7, #20]
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	3724      	adds	r7, #36	; 0x24
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr

080129fc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80129fc:	b480      	push	{r7}
 80129fe:	b083      	sub	sp, #12
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012a06:	e002      	b.n	8012a0e <chk_chr+0x12>
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	607b      	str	r3, [r7, #4]
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d005      	beq.n	8012a22 <chk_chr+0x26>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	4293      	cmp	r3, r2
 8012a20:	d1f2      	bne.n	8012a08 <chk_chr+0xc>
	return *str;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	781b      	ldrb	r3, [r3, #0]
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	370c      	adds	r7, #12
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a30:	4770      	bx	lr
	...

08012a34 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012a34:	b480      	push	{r7}
 8012a36:	b085      	sub	sp, #20
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
 8012a3c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012a3e:	2300      	movs	r3, #0
 8012a40:	60bb      	str	r3, [r7, #8]
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	60fb      	str	r3, [r7, #12]
 8012a46:	e029      	b.n	8012a9c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012a48:	4a27      	ldr	r2, [pc, #156]	; (8012ae8 <chk_lock+0xb4>)
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	011b      	lsls	r3, r3, #4
 8012a4e:	4413      	add	r3, r2
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d01d      	beq.n	8012a92 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012a56:	4a24      	ldr	r2, [pc, #144]	; (8012ae8 <chk_lock+0xb4>)
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	011b      	lsls	r3, r3, #4
 8012a5c:	4413      	add	r3, r2
 8012a5e:	681a      	ldr	r2, [r3, #0]
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d116      	bne.n	8012a96 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012a68:	4a1f      	ldr	r2, [pc, #124]	; (8012ae8 <chk_lock+0xb4>)
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	011b      	lsls	r3, r3, #4
 8012a6e:	4413      	add	r3, r2
 8012a70:	3304      	adds	r3, #4
 8012a72:	681a      	ldr	r2, [r3, #0]
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d10c      	bne.n	8012a96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012a7c:	4a1a      	ldr	r2, [pc, #104]	; (8012ae8 <chk_lock+0xb4>)
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	011b      	lsls	r3, r3, #4
 8012a82:	4413      	add	r3, r2
 8012a84:	3308      	adds	r3, #8
 8012a86:	681a      	ldr	r2, [r3, #0]
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d102      	bne.n	8012a96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012a90:	e007      	b.n	8012aa2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012a92:	2301      	movs	r3, #1
 8012a94:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	3301      	adds	r3, #1
 8012a9a:	60fb      	str	r3, [r7, #12]
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	2b01      	cmp	r3, #1
 8012aa0:	d9d2      	bls.n	8012a48 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	2b02      	cmp	r3, #2
 8012aa6:	d109      	bne.n	8012abc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d102      	bne.n	8012ab4 <chk_lock+0x80>
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	2b02      	cmp	r3, #2
 8012ab2:	d101      	bne.n	8012ab8 <chk_lock+0x84>
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	e010      	b.n	8012ada <chk_lock+0xa6>
 8012ab8:	2312      	movs	r3, #18
 8012aba:	e00e      	b.n	8012ada <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d108      	bne.n	8012ad4 <chk_lock+0xa0>
 8012ac2:	4a09      	ldr	r2, [pc, #36]	; (8012ae8 <chk_lock+0xb4>)
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	011b      	lsls	r3, r3, #4
 8012ac8:	4413      	add	r3, r2
 8012aca:	330c      	adds	r3, #12
 8012acc:	881b      	ldrh	r3, [r3, #0]
 8012ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ad2:	d101      	bne.n	8012ad8 <chk_lock+0xa4>
 8012ad4:	2310      	movs	r3, #16
 8012ad6:	e000      	b.n	8012ada <chk_lock+0xa6>
 8012ad8:	2300      	movs	r3, #0
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3714      	adds	r7, #20
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae4:	4770      	bx	lr
 8012ae6:	bf00      	nop
 8012ae8:	20000c0c 	.word	0x20000c0c

08012aec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012aec:	b480      	push	{r7}
 8012aee:	b083      	sub	sp, #12
 8012af0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012af2:	2300      	movs	r3, #0
 8012af4:	607b      	str	r3, [r7, #4]
 8012af6:	e002      	b.n	8012afe <enq_lock+0x12>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	3301      	adds	r3, #1
 8012afc:	607b      	str	r3, [r7, #4]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2b01      	cmp	r3, #1
 8012b02:	d806      	bhi.n	8012b12 <enq_lock+0x26>
 8012b04:	4a09      	ldr	r2, [pc, #36]	; (8012b2c <enq_lock+0x40>)
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	011b      	lsls	r3, r3, #4
 8012b0a:	4413      	add	r3, r2
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1f2      	bne.n	8012af8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2b02      	cmp	r3, #2
 8012b16:	bf14      	ite	ne
 8012b18:	2301      	movne	r3, #1
 8012b1a:	2300      	moveq	r3, #0
 8012b1c:	b2db      	uxtb	r3, r3
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	370c      	adds	r7, #12
 8012b22:	46bd      	mov	sp, r7
 8012b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b28:	4770      	bx	lr
 8012b2a:	bf00      	nop
 8012b2c:	20000c0c 	.word	0x20000c0c

08012b30 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b085      	sub	sp, #20
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	60fb      	str	r3, [r7, #12]
 8012b3e:	e01f      	b.n	8012b80 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012b40:	4a41      	ldr	r2, [pc, #260]	; (8012c48 <inc_lock+0x118>)
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	011b      	lsls	r3, r3, #4
 8012b46:	4413      	add	r3, r2
 8012b48:	681a      	ldr	r2, [r3, #0]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d113      	bne.n	8012b7a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012b52:	4a3d      	ldr	r2, [pc, #244]	; (8012c48 <inc_lock+0x118>)
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	011b      	lsls	r3, r3, #4
 8012b58:	4413      	add	r3, r2
 8012b5a:	3304      	adds	r3, #4
 8012b5c:	681a      	ldr	r2, [r3, #0]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d109      	bne.n	8012b7a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012b66:	4a38      	ldr	r2, [pc, #224]	; (8012c48 <inc_lock+0x118>)
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	011b      	lsls	r3, r3, #4
 8012b6c:	4413      	add	r3, r2
 8012b6e:	3308      	adds	r3, #8
 8012b70:	681a      	ldr	r2, [r3, #0]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012b76:	429a      	cmp	r2, r3
 8012b78:	d006      	beq.n	8012b88 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	60fb      	str	r3, [r7, #12]
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d9dc      	bls.n	8012b40 <inc_lock+0x10>
 8012b86:	e000      	b.n	8012b8a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012b88:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	2b02      	cmp	r3, #2
 8012b8e:	d132      	bne.n	8012bf6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012b90:	2300      	movs	r3, #0
 8012b92:	60fb      	str	r3, [r7, #12]
 8012b94:	e002      	b.n	8012b9c <inc_lock+0x6c>
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	3301      	adds	r3, #1
 8012b9a:	60fb      	str	r3, [r7, #12]
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	2b01      	cmp	r3, #1
 8012ba0:	d806      	bhi.n	8012bb0 <inc_lock+0x80>
 8012ba2:	4a29      	ldr	r2, [pc, #164]	; (8012c48 <inc_lock+0x118>)
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	011b      	lsls	r3, r3, #4
 8012ba8:	4413      	add	r3, r2
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1f2      	bne.n	8012b96 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	2b02      	cmp	r3, #2
 8012bb4:	d101      	bne.n	8012bba <inc_lock+0x8a>
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	e040      	b.n	8012c3c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681a      	ldr	r2, [r3, #0]
 8012bbe:	4922      	ldr	r1, [pc, #136]	; (8012c48 <inc_lock+0x118>)
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	011b      	lsls	r3, r3, #4
 8012bc4:	440b      	add	r3, r1
 8012bc6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	689a      	ldr	r2, [r3, #8]
 8012bcc:	491e      	ldr	r1, [pc, #120]	; (8012c48 <inc_lock+0x118>)
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	011b      	lsls	r3, r3, #4
 8012bd2:	440b      	add	r3, r1
 8012bd4:	3304      	adds	r3, #4
 8012bd6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	695a      	ldr	r2, [r3, #20]
 8012bdc:	491a      	ldr	r1, [pc, #104]	; (8012c48 <inc_lock+0x118>)
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	011b      	lsls	r3, r3, #4
 8012be2:	440b      	add	r3, r1
 8012be4:	3308      	adds	r3, #8
 8012be6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012be8:	4a17      	ldr	r2, [pc, #92]	; (8012c48 <inc_lock+0x118>)
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	011b      	lsls	r3, r3, #4
 8012bee:	4413      	add	r3, r2
 8012bf0:	330c      	adds	r3, #12
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d009      	beq.n	8012c10 <inc_lock+0xe0>
 8012bfc:	4a12      	ldr	r2, [pc, #72]	; (8012c48 <inc_lock+0x118>)
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	011b      	lsls	r3, r3, #4
 8012c02:	4413      	add	r3, r2
 8012c04:	330c      	adds	r3, #12
 8012c06:	881b      	ldrh	r3, [r3, #0]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d001      	beq.n	8012c10 <inc_lock+0xe0>
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	e015      	b.n	8012c3c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d108      	bne.n	8012c28 <inc_lock+0xf8>
 8012c16:	4a0c      	ldr	r2, [pc, #48]	; (8012c48 <inc_lock+0x118>)
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	011b      	lsls	r3, r3, #4
 8012c1c:	4413      	add	r3, r2
 8012c1e:	330c      	adds	r3, #12
 8012c20:	881b      	ldrh	r3, [r3, #0]
 8012c22:	3301      	adds	r3, #1
 8012c24:	b29a      	uxth	r2, r3
 8012c26:	e001      	b.n	8012c2c <inc_lock+0xfc>
 8012c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012c2c:	4906      	ldr	r1, [pc, #24]	; (8012c48 <inc_lock+0x118>)
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	011b      	lsls	r3, r3, #4
 8012c32:	440b      	add	r3, r1
 8012c34:	330c      	adds	r3, #12
 8012c36:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	3301      	adds	r3, #1
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	3714      	adds	r7, #20
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr
 8012c48:	20000c0c 	.word	0x20000c0c

08012c4c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b085      	sub	sp, #20
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	3b01      	subs	r3, #1
 8012c58:	607b      	str	r3, [r7, #4]
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d825      	bhi.n	8012cac <dec_lock+0x60>
		n = Files[i].ctr;
 8012c60:	4a17      	ldr	r2, [pc, #92]	; (8012cc0 <dec_lock+0x74>)
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	011b      	lsls	r3, r3, #4
 8012c66:	4413      	add	r3, r2
 8012c68:	330c      	adds	r3, #12
 8012c6a:	881b      	ldrh	r3, [r3, #0]
 8012c6c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012c6e:	89fb      	ldrh	r3, [r7, #14]
 8012c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c74:	d101      	bne.n	8012c7a <dec_lock+0x2e>
 8012c76:	2300      	movs	r3, #0
 8012c78:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012c7a:	89fb      	ldrh	r3, [r7, #14]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d002      	beq.n	8012c86 <dec_lock+0x3a>
 8012c80:	89fb      	ldrh	r3, [r7, #14]
 8012c82:	3b01      	subs	r3, #1
 8012c84:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012c86:	4a0e      	ldr	r2, [pc, #56]	; (8012cc0 <dec_lock+0x74>)
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	011b      	lsls	r3, r3, #4
 8012c8c:	4413      	add	r3, r2
 8012c8e:	330c      	adds	r3, #12
 8012c90:	89fa      	ldrh	r2, [r7, #14]
 8012c92:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012c94:	89fb      	ldrh	r3, [r7, #14]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d105      	bne.n	8012ca6 <dec_lock+0x5a>
 8012c9a:	4a09      	ldr	r2, [pc, #36]	; (8012cc0 <dec_lock+0x74>)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	011b      	lsls	r3, r3, #4
 8012ca0:	4413      	add	r3, r2
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	737b      	strb	r3, [r7, #13]
 8012caa:	e001      	b.n	8012cb0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012cac:	2302      	movs	r3, #2
 8012cae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012cb0:	7b7b      	ldrb	r3, [r7, #13]
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3714      	adds	r7, #20
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr
 8012cbe:	bf00      	nop
 8012cc0:	20000c0c 	.word	0x20000c0c

08012cc4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b085      	sub	sp, #20
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012ccc:	2300      	movs	r3, #0
 8012cce:	60fb      	str	r3, [r7, #12]
 8012cd0:	e010      	b.n	8012cf4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012cd2:	4a0d      	ldr	r2, [pc, #52]	; (8012d08 <clear_lock+0x44>)
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	011b      	lsls	r3, r3, #4
 8012cd8:	4413      	add	r3, r2
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d105      	bne.n	8012cee <clear_lock+0x2a>
 8012ce2:	4a09      	ldr	r2, [pc, #36]	; (8012d08 <clear_lock+0x44>)
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	011b      	lsls	r3, r3, #4
 8012ce8:	4413      	add	r3, r2
 8012cea:	2200      	movs	r2, #0
 8012cec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	60fb      	str	r3, [r7, #12]
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2b01      	cmp	r3, #1
 8012cf8:	d9eb      	bls.n	8012cd2 <clear_lock+0xe>
	}
}
 8012cfa:	bf00      	nop
 8012cfc:	3714      	adds	r7, #20
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d04:	4770      	bx	lr
 8012d06:	bf00      	nop
 8012d08:	20000c0c 	.word	0x20000c0c

08012d0c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b086      	sub	sp, #24
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012d14:	2300      	movs	r3, #0
 8012d16:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	78db      	ldrb	r3, [r3, #3]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d034      	beq.n	8012d8a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d24:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	7858      	ldrb	r0, [r3, #1]
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012d30:	2301      	movs	r3, #1
 8012d32:	697a      	ldr	r2, [r7, #20]
 8012d34:	f7ff fd40 	bl	80127b8 <disk_write>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d002      	beq.n	8012d44 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012d3e:	2301      	movs	r3, #1
 8012d40:	73fb      	strb	r3, [r7, #15]
 8012d42:	e022      	b.n	8012d8a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2200      	movs	r2, #0
 8012d48:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d4e:	697a      	ldr	r2, [r7, #20]
 8012d50:	1ad2      	subs	r2, r2, r3
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	6a1b      	ldr	r3, [r3, #32]
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d217      	bcs.n	8012d8a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	789b      	ldrb	r3, [r3, #2]
 8012d5e:	613b      	str	r3, [r7, #16]
 8012d60:	e010      	b.n	8012d84 <sync_window+0x78>
					wsect += fs->fsize;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6a1b      	ldr	r3, [r3, #32]
 8012d66:	697a      	ldr	r2, [r7, #20]
 8012d68:	4413      	add	r3, r2
 8012d6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	7858      	ldrb	r0, [r3, #1]
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012d76:	2301      	movs	r3, #1
 8012d78:	697a      	ldr	r2, [r7, #20]
 8012d7a:	f7ff fd1d 	bl	80127b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	3b01      	subs	r3, #1
 8012d82:	613b      	str	r3, [r7, #16]
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	2b01      	cmp	r3, #1
 8012d88:	d8eb      	bhi.n	8012d62 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3718      	adds	r7, #24
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}

08012d94 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b084      	sub	sp, #16
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012da6:	683a      	ldr	r2, [r7, #0]
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d01b      	beq.n	8012de4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f7ff ffad 	bl	8012d0c <sync_window>
 8012db2:	4603      	mov	r3, r0
 8012db4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012db6:	7bfb      	ldrb	r3, [r7, #15]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d113      	bne.n	8012de4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	7858      	ldrb	r0, [r3, #1]
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	683a      	ldr	r2, [r7, #0]
 8012dca:	f7ff fcd5 	bl	8012778 <disk_read>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d004      	beq.n	8012dde <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8012dd8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012dda:	2301      	movs	r3, #1
 8012ddc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	683a      	ldr	r2, [r7, #0]
 8012de2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8012de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3710      	adds	r7, #16
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
	...

08012df0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b084      	sub	sp, #16
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f7ff ff87 	bl	8012d0c <sync_window>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012e02:	7bfb      	ldrb	r3, [r7, #15]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d158      	bne.n	8012eba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	2b03      	cmp	r3, #3
 8012e0e:	d148      	bne.n	8012ea2 <sync_fs+0xb2>
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	791b      	ldrb	r3, [r3, #4]
 8012e14:	2b01      	cmp	r3, #1
 8012e16:	d144      	bne.n	8012ea2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	3338      	adds	r3, #56	; 0x38
 8012e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e20:	2100      	movs	r1, #0
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7ff fda9 	bl	801297a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	3338      	adds	r3, #56	; 0x38
 8012e2c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012e30:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7ff fd38 	bl	80128aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	3338      	adds	r3, #56	; 0x38
 8012e3e:	4921      	ldr	r1, [pc, #132]	; (8012ec4 <sync_fs+0xd4>)
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7ff fd4d 	bl	80128e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	3338      	adds	r3, #56	; 0x38
 8012e4a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012e4e:	491e      	ldr	r1, [pc, #120]	; (8012ec8 <sync_fs+0xd8>)
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7ff fd45 	bl	80128e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	3338      	adds	r3, #56	; 0x38
 8012e5a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	695b      	ldr	r3, [r3, #20]
 8012e62:	4619      	mov	r1, r3
 8012e64:	4610      	mov	r0, r2
 8012e66:	f7ff fd3b 	bl	80128e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	3338      	adds	r3, #56	; 0x38
 8012e6e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	691b      	ldr	r3, [r3, #16]
 8012e76:	4619      	mov	r1, r3
 8012e78:	4610      	mov	r0, r2
 8012e7a:	f7ff fd31 	bl	80128e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e82:	1c5a      	adds	r2, r3, #1
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	7858      	ldrb	r0, [r3, #1]
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012e96:	2301      	movs	r3, #1
 8012e98:	f7ff fc8e 	bl	80127b8 <disk_write>
			fs->fsi_flag = 0;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	785b      	ldrb	r3, [r3, #1]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	2100      	movs	r1, #0
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7ff fca4 	bl	80127f8 <disk_ioctl>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d001      	beq.n	8012eba <sync_fs+0xca>
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3710      	adds	r7, #16
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}
 8012ec4:	41615252 	.word	0x41615252
 8012ec8:	61417272 	.word	0x61417272

08012ecc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012ecc:	b480      	push	{r7}
 8012ece:	b083      	sub	sp, #12
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	3b02      	subs	r3, #2
 8012eda:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	69db      	ldr	r3, [r3, #28]
 8012ee0:	3b02      	subs	r3, #2
 8012ee2:	683a      	ldr	r2, [r7, #0]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d301      	bcc.n	8012eec <clust2sect+0x20>
 8012ee8:	2300      	movs	r3, #0
 8012eea:	e008      	b.n	8012efe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	895b      	ldrh	r3, [r3, #10]
 8012ef0:	461a      	mov	r2, r3
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	fb03 f202 	mul.w	r2, r3, r2
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012efc:	4413      	add	r3, r2
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	370c      	adds	r7, #12
 8012f02:	46bd      	mov	sp, r7
 8012f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f08:	4770      	bx	lr

08012f0a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012f0a:	b580      	push	{r7, lr}
 8012f0c:	b086      	sub	sp, #24
 8012f0e:	af00      	add	r7, sp, #0
 8012f10:	6078      	str	r0, [r7, #4]
 8012f12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	2b01      	cmp	r3, #1
 8012f1e:	d904      	bls.n	8012f2a <get_fat+0x20>
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	69db      	ldr	r3, [r3, #28]
 8012f24:	683a      	ldr	r2, [r7, #0]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d302      	bcc.n	8012f30 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012f2a:	2301      	movs	r3, #1
 8012f2c:	617b      	str	r3, [r7, #20]
 8012f2e:	e08c      	b.n	801304a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012f30:	f04f 33ff 	mov.w	r3, #4294967295
 8012f34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	2b02      	cmp	r3, #2
 8012f3c:	d045      	beq.n	8012fca <get_fat+0xc0>
 8012f3e:	2b03      	cmp	r3, #3
 8012f40:	d05d      	beq.n	8012ffe <get_fat+0xf4>
 8012f42:	2b01      	cmp	r3, #1
 8012f44:	d177      	bne.n	8013036 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	60fb      	str	r3, [r7, #12]
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	085b      	lsrs	r3, r3, #1
 8012f4e:	68fa      	ldr	r2, [r7, #12]
 8012f50:	4413      	add	r3, r2
 8012f52:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	0a5b      	lsrs	r3, r3, #9
 8012f5c:	4413      	add	r3, r2
 8012f5e:	4619      	mov	r1, r3
 8012f60:	6938      	ldr	r0, [r7, #16]
 8012f62:	f7ff ff17 	bl	8012d94 <move_window>
 8012f66:	4603      	mov	r3, r0
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d167      	bne.n	801303c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	1c5a      	adds	r2, r3, #1
 8012f70:	60fa      	str	r2, [r7, #12]
 8012f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f76:	693a      	ldr	r2, [r7, #16]
 8012f78:	4413      	add	r3, r2
 8012f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012f7e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	0a5b      	lsrs	r3, r3, #9
 8012f88:	4413      	add	r3, r2
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	6938      	ldr	r0, [r7, #16]
 8012f8e:	f7ff ff01 	bl	8012d94 <move_window>
 8012f92:	4603      	mov	r3, r0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d153      	bne.n	8013040 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f9e:	693a      	ldr	r2, [r7, #16]
 8012fa0:	4413      	add	r3, r2
 8012fa2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012fa6:	021b      	lsls	r3, r3, #8
 8012fa8:	461a      	mov	r2, r3
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	4313      	orrs	r3, r2
 8012fae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	f003 0301 	and.w	r3, r3, #1
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d002      	beq.n	8012fc0 <get_fat+0xb6>
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	091b      	lsrs	r3, r3, #4
 8012fbe:	e002      	b.n	8012fc6 <get_fat+0xbc>
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012fc6:	617b      	str	r3, [r7, #20]
			break;
 8012fc8:	e03f      	b.n	801304a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	0a1b      	lsrs	r3, r3, #8
 8012fd2:	4413      	add	r3, r2
 8012fd4:	4619      	mov	r1, r3
 8012fd6:	6938      	ldr	r0, [r7, #16]
 8012fd8:	f7ff fedc 	bl	8012d94 <move_window>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d130      	bne.n	8013044 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	005b      	lsls	r3, r3, #1
 8012fec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012ff0:	4413      	add	r3, r2
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7ff fc1e 	bl	8012834 <ld_word>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	617b      	str	r3, [r7, #20]
			break;
 8012ffc:	e025      	b.n	801304a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	09db      	lsrs	r3, r3, #7
 8013006:	4413      	add	r3, r2
 8013008:	4619      	mov	r1, r3
 801300a:	6938      	ldr	r0, [r7, #16]
 801300c:	f7ff fec2 	bl	8012d94 <move_window>
 8013010:	4603      	mov	r3, r0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d118      	bne.n	8013048 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	009b      	lsls	r3, r3, #2
 8013020:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013024:	4413      	add	r3, r2
 8013026:	4618      	mov	r0, r3
 8013028:	f7ff fc1c 	bl	8012864 <ld_dword>
 801302c:	4603      	mov	r3, r0
 801302e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013032:	617b      	str	r3, [r7, #20]
			break;
 8013034:	e009      	b.n	801304a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013036:	2301      	movs	r3, #1
 8013038:	617b      	str	r3, [r7, #20]
 801303a:	e006      	b.n	801304a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801303c:	bf00      	nop
 801303e:	e004      	b.n	801304a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013040:	bf00      	nop
 8013042:	e002      	b.n	801304a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013044:	bf00      	nop
 8013046:	e000      	b.n	801304a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013048:	bf00      	nop
		}
	}

	return val;
 801304a:	697b      	ldr	r3, [r7, #20]
}
 801304c:	4618      	mov	r0, r3
 801304e:	3718      	adds	r7, #24
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013054:	b590      	push	{r4, r7, lr}
 8013056:	b089      	sub	sp, #36	; 0x24
 8013058:	af00      	add	r7, sp, #0
 801305a:	60f8      	str	r0, [r7, #12]
 801305c:	60b9      	str	r1, [r7, #8]
 801305e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013060:	2302      	movs	r3, #2
 8013062:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	2b01      	cmp	r3, #1
 8013068:	f240 80d6 	bls.w	8013218 <put_fat+0x1c4>
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	69db      	ldr	r3, [r3, #28]
 8013070:	68ba      	ldr	r2, [r7, #8]
 8013072:	429a      	cmp	r2, r3
 8013074:	f080 80d0 	bcs.w	8013218 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	781b      	ldrb	r3, [r3, #0]
 801307c:	2b02      	cmp	r3, #2
 801307e:	d073      	beq.n	8013168 <put_fat+0x114>
 8013080:	2b03      	cmp	r3, #3
 8013082:	f000 8091 	beq.w	80131a8 <put_fat+0x154>
 8013086:	2b01      	cmp	r3, #1
 8013088:	f040 80c6 	bne.w	8013218 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	61bb      	str	r3, [r7, #24]
 8013090:	69bb      	ldr	r3, [r7, #24]
 8013092:	085b      	lsrs	r3, r3, #1
 8013094:	69ba      	ldr	r2, [r7, #24]
 8013096:	4413      	add	r3, r2
 8013098:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801309e:	69bb      	ldr	r3, [r7, #24]
 80130a0:	0a5b      	lsrs	r3, r3, #9
 80130a2:	4413      	add	r3, r2
 80130a4:	4619      	mov	r1, r3
 80130a6:	68f8      	ldr	r0, [r7, #12]
 80130a8:	f7ff fe74 	bl	8012d94 <move_window>
 80130ac:	4603      	mov	r3, r0
 80130ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80130b0:	7ffb      	ldrb	r3, [r7, #31]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	f040 80a9 	bne.w	801320a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80130be:	69bb      	ldr	r3, [r7, #24]
 80130c0:	1c59      	adds	r1, r3, #1
 80130c2:	61b9      	str	r1, [r7, #24]
 80130c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130c8:	4413      	add	r3, r2
 80130ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80130cc:	68bb      	ldr	r3, [r7, #8]
 80130ce:	f003 0301 	and.w	r3, r3, #1
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d00d      	beq.n	80130f2 <put_fat+0x9e>
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	781b      	ldrb	r3, [r3, #0]
 80130da:	b25b      	sxtb	r3, r3
 80130dc:	f003 030f 	and.w	r3, r3, #15
 80130e0:	b25a      	sxtb	r2, r3
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	b2db      	uxtb	r3, r3
 80130e6:	011b      	lsls	r3, r3, #4
 80130e8:	b25b      	sxtb	r3, r3
 80130ea:	4313      	orrs	r3, r2
 80130ec:	b25b      	sxtb	r3, r3
 80130ee:	b2db      	uxtb	r3, r3
 80130f0:	e001      	b.n	80130f6 <put_fat+0xa2>
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	b2db      	uxtb	r3, r3
 80130f6:	697a      	ldr	r2, [r7, #20]
 80130f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	2201      	movs	r2, #1
 80130fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013104:	69bb      	ldr	r3, [r7, #24]
 8013106:	0a5b      	lsrs	r3, r3, #9
 8013108:	4413      	add	r3, r2
 801310a:	4619      	mov	r1, r3
 801310c:	68f8      	ldr	r0, [r7, #12]
 801310e:	f7ff fe41 	bl	8012d94 <move_window>
 8013112:	4603      	mov	r3, r0
 8013114:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013116:	7ffb      	ldrb	r3, [r7, #31]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d178      	bne.n	801320e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013122:	69bb      	ldr	r3, [r7, #24]
 8013124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013128:	4413      	add	r3, r2
 801312a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	f003 0301 	and.w	r3, r3, #1
 8013132:	2b00      	cmp	r3, #0
 8013134:	d003      	beq.n	801313e <put_fat+0xea>
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	091b      	lsrs	r3, r3, #4
 801313a:	b2db      	uxtb	r3, r3
 801313c:	e00e      	b.n	801315c <put_fat+0x108>
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	b25b      	sxtb	r3, r3
 8013144:	f023 030f 	bic.w	r3, r3, #15
 8013148:	b25a      	sxtb	r2, r3
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	0a1b      	lsrs	r3, r3, #8
 801314e:	b25b      	sxtb	r3, r3
 8013150:	f003 030f 	and.w	r3, r3, #15
 8013154:	b25b      	sxtb	r3, r3
 8013156:	4313      	orrs	r3, r2
 8013158:	b25b      	sxtb	r3, r3
 801315a:	b2db      	uxtb	r3, r3
 801315c:	697a      	ldr	r2, [r7, #20]
 801315e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	2201      	movs	r2, #1
 8013164:	70da      	strb	r2, [r3, #3]
			break;
 8013166:	e057      	b.n	8013218 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	0a1b      	lsrs	r3, r3, #8
 8013170:	4413      	add	r3, r2
 8013172:	4619      	mov	r1, r3
 8013174:	68f8      	ldr	r0, [r7, #12]
 8013176:	f7ff fe0d 	bl	8012d94 <move_window>
 801317a:	4603      	mov	r3, r0
 801317c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801317e:	7ffb      	ldrb	r3, [r7, #31]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d146      	bne.n	8013212 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	005b      	lsls	r3, r3, #1
 801318e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013192:	4413      	add	r3, r2
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	b292      	uxth	r2, r2
 8013198:	4611      	mov	r1, r2
 801319a:	4618      	mov	r0, r3
 801319c:	f7ff fb85 	bl	80128aa <st_word>
			fs->wflag = 1;
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2201      	movs	r2, #1
 80131a4:	70da      	strb	r2, [r3, #3]
			break;
 80131a6:	e037      	b.n	8013218 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	09db      	lsrs	r3, r3, #7
 80131b0:	4413      	add	r3, r2
 80131b2:	4619      	mov	r1, r3
 80131b4:	68f8      	ldr	r0, [r7, #12]
 80131b6:	f7ff fded 	bl	8012d94 <move_window>
 80131ba:	4603      	mov	r3, r0
 80131bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80131be:	7ffb      	ldrb	r3, [r7, #31]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d128      	bne.n	8013216 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	009b      	lsls	r3, r3, #2
 80131d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80131d8:	4413      	add	r3, r2
 80131da:	4618      	mov	r0, r3
 80131dc:	f7ff fb42 	bl	8012864 <ld_dword>
 80131e0:	4603      	mov	r3, r0
 80131e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80131e6:	4323      	orrs	r3, r4
 80131e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80131f8:	4413      	add	r3, r2
 80131fa:	6879      	ldr	r1, [r7, #4]
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7ff fb6f 	bl	80128e0 <st_dword>
			fs->wflag = 1;
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	2201      	movs	r2, #1
 8013206:	70da      	strb	r2, [r3, #3]
			break;
 8013208:	e006      	b.n	8013218 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801320a:	bf00      	nop
 801320c:	e004      	b.n	8013218 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801320e:	bf00      	nop
 8013210:	e002      	b.n	8013218 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013212:	bf00      	nop
 8013214:	e000      	b.n	8013218 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013216:	bf00      	nop
		}
	}
	return res;
 8013218:	7ffb      	ldrb	r3, [r7, #31]
}
 801321a:	4618      	mov	r0, r3
 801321c:	3724      	adds	r7, #36	; 0x24
 801321e:	46bd      	mov	sp, r7
 8013220:	bd90      	pop	{r4, r7, pc}

08013222 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013222:	b580      	push	{r7, lr}
 8013224:	b088      	sub	sp, #32
 8013226:	af00      	add	r7, sp, #0
 8013228:	60f8      	str	r0, [r7, #12]
 801322a:	60b9      	str	r1, [r7, #8]
 801322c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801322e:	2300      	movs	r3, #0
 8013230:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	2b01      	cmp	r3, #1
 801323c:	d904      	bls.n	8013248 <remove_chain+0x26>
 801323e:	69bb      	ldr	r3, [r7, #24]
 8013240:	69db      	ldr	r3, [r3, #28]
 8013242:	68ba      	ldr	r2, [r7, #8]
 8013244:	429a      	cmp	r2, r3
 8013246:	d301      	bcc.n	801324c <remove_chain+0x2a>
 8013248:	2302      	movs	r3, #2
 801324a:	e04b      	b.n	80132e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d00c      	beq.n	801326c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013252:	f04f 32ff 	mov.w	r2, #4294967295
 8013256:	6879      	ldr	r1, [r7, #4]
 8013258:	69b8      	ldr	r0, [r7, #24]
 801325a:	f7ff fefb 	bl	8013054 <put_fat>
 801325e:	4603      	mov	r3, r0
 8013260:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013262:	7ffb      	ldrb	r3, [r7, #31]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d001      	beq.n	801326c <remove_chain+0x4a>
 8013268:	7ffb      	ldrb	r3, [r7, #31]
 801326a:	e03b      	b.n	80132e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801326c:	68b9      	ldr	r1, [r7, #8]
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f7ff fe4b 	bl	8012f0a <get_fat>
 8013274:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d031      	beq.n	80132e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801327c:	697b      	ldr	r3, [r7, #20]
 801327e:	2b01      	cmp	r3, #1
 8013280:	d101      	bne.n	8013286 <remove_chain+0x64>
 8013282:	2302      	movs	r3, #2
 8013284:	e02e      	b.n	80132e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	f1b3 3fff 	cmp.w	r3, #4294967295
 801328c:	d101      	bne.n	8013292 <remove_chain+0x70>
 801328e:	2301      	movs	r3, #1
 8013290:	e028      	b.n	80132e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013292:	2200      	movs	r2, #0
 8013294:	68b9      	ldr	r1, [r7, #8]
 8013296:	69b8      	ldr	r0, [r7, #24]
 8013298:	f7ff fedc 	bl	8013054 <put_fat>
 801329c:	4603      	mov	r3, r0
 801329e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80132a0:	7ffb      	ldrb	r3, [r7, #31]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d001      	beq.n	80132aa <remove_chain+0x88>
 80132a6:	7ffb      	ldrb	r3, [r7, #31]
 80132a8:	e01c      	b.n	80132e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80132aa:	69bb      	ldr	r3, [r7, #24]
 80132ac:	695a      	ldr	r2, [r3, #20]
 80132ae:	69bb      	ldr	r3, [r7, #24]
 80132b0:	69db      	ldr	r3, [r3, #28]
 80132b2:	3b02      	subs	r3, #2
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d20b      	bcs.n	80132d0 <remove_chain+0xae>
			fs->free_clst++;
 80132b8:	69bb      	ldr	r3, [r7, #24]
 80132ba:	695b      	ldr	r3, [r3, #20]
 80132bc:	1c5a      	adds	r2, r3, #1
 80132be:	69bb      	ldr	r3, [r7, #24]
 80132c0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80132c2:	69bb      	ldr	r3, [r7, #24]
 80132c4:	791b      	ldrb	r3, [r3, #4]
 80132c6:	f043 0301 	orr.w	r3, r3, #1
 80132ca:	b2da      	uxtb	r2, r3
 80132cc:	69bb      	ldr	r3, [r7, #24]
 80132ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80132d4:	69bb      	ldr	r3, [r7, #24]
 80132d6:	69db      	ldr	r3, [r3, #28]
 80132d8:	68ba      	ldr	r2, [r7, #8]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d3c6      	bcc.n	801326c <remove_chain+0x4a>
 80132de:	e000      	b.n	80132e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80132e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80132e2:	2300      	movs	r3, #0
}
 80132e4:	4618      	mov	r0, r3
 80132e6:	3720      	adds	r7, #32
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bd80      	pop	{r7, pc}

080132ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b088      	sub	sp, #32
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
 80132f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d10d      	bne.n	801331e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	691b      	ldr	r3, [r3, #16]
 8013306:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d004      	beq.n	8013318 <create_chain+0x2c>
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	69db      	ldr	r3, [r3, #28]
 8013312:	69ba      	ldr	r2, [r7, #24]
 8013314:	429a      	cmp	r2, r3
 8013316:	d31b      	bcc.n	8013350 <create_chain+0x64>
 8013318:	2301      	movs	r3, #1
 801331a:	61bb      	str	r3, [r7, #24]
 801331c:	e018      	b.n	8013350 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801331e:	6839      	ldr	r1, [r7, #0]
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f7ff fdf2 	bl	8012f0a <get_fat>
 8013326:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	2b01      	cmp	r3, #1
 801332c:	d801      	bhi.n	8013332 <create_chain+0x46>
 801332e:	2301      	movs	r3, #1
 8013330:	e070      	b.n	8013414 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013338:	d101      	bne.n	801333e <create_chain+0x52>
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	e06a      	b.n	8013414 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801333e:	693b      	ldr	r3, [r7, #16]
 8013340:	69db      	ldr	r3, [r3, #28]
 8013342:	68fa      	ldr	r2, [r7, #12]
 8013344:	429a      	cmp	r2, r3
 8013346:	d201      	bcs.n	801334c <create_chain+0x60>
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	e063      	b.n	8013414 <create_chain+0x128>
		scl = clst;
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013350:	69bb      	ldr	r3, [r7, #24]
 8013352:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013354:	69fb      	ldr	r3, [r7, #28]
 8013356:	3301      	adds	r3, #1
 8013358:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	69db      	ldr	r3, [r3, #28]
 801335e:	69fa      	ldr	r2, [r7, #28]
 8013360:	429a      	cmp	r2, r3
 8013362:	d307      	bcc.n	8013374 <create_chain+0x88>
				ncl = 2;
 8013364:	2302      	movs	r3, #2
 8013366:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013368:	69fa      	ldr	r2, [r7, #28]
 801336a:	69bb      	ldr	r3, [r7, #24]
 801336c:	429a      	cmp	r2, r3
 801336e:	d901      	bls.n	8013374 <create_chain+0x88>
 8013370:	2300      	movs	r3, #0
 8013372:	e04f      	b.n	8013414 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013374:	69f9      	ldr	r1, [r7, #28]
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f7ff fdc7 	bl	8012f0a <get_fat>
 801337c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d00e      	beq.n	80133a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	2b01      	cmp	r3, #1
 8013388:	d003      	beq.n	8013392 <create_chain+0xa6>
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013390:	d101      	bne.n	8013396 <create_chain+0xaa>
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	e03e      	b.n	8013414 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013396:	69fa      	ldr	r2, [r7, #28]
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	429a      	cmp	r2, r3
 801339c:	d1da      	bne.n	8013354 <create_chain+0x68>
 801339e:	2300      	movs	r3, #0
 80133a0:	e038      	b.n	8013414 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80133a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80133a4:	f04f 32ff 	mov.w	r2, #4294967295
 80133a8:	69f9      	ldr	r1, [r7, #28]
 80133aa:	6938      	ldr	r0, [r7, #16]
 80133ac:	f7ff fe52 	bl	8013054 <put_fat>
 80133b0:	4603      	mov	r3, r0
 80133b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80133b4:	7dfb      	ldrb	r3, [r7, #23]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d109      	bne.n	80133ce <create_chain+0xe2>
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d006      	beq.n	80133ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80133c0:	69fa      	ldr	r2, [r7, #28]
 80133c2:	6839      	ldr	r1, [r7, #0]
 80133c4:	6938      	ldr	r0, [r7, #16]
 80133c6:	f7ff fe45 	bl	8013054 <put_fat>
 80133ca:	4603      	mov	r3, r0
 80133cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80133ce:	7dfb      	ldrb	r3, [r7, #23]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d116      	bne.n	8013402 <create_chain+0x116>
		fs->last_clst = ncl;
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	69fa      	ldr	r2, [r7, #28]
 80133d8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80133da:	693b      	ldr	r3, [r7, #16]
 80133dc:	695a      	ldr	r2, [r3, #20]
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	69db      	ldr	r3, [r3, #28]
 80133e2:	3b02      	subs	r3, #2
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d804      	bhi.n	80133f2 <create_chain+0x106>
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	695b      	ldr	r3, [r3, #20]
 80133ec:	1e5a      	subs	r2, r3, #1
 80133ee:	693b      	ldr	r3, [r7, #16]
 80133f0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	791b      	ldrb	r3, [r3, #4]
 80133f6:	f043 0301 	orr.w	r3, r3, #1
 80133fa:	b2da      	uxtb	r2, r3
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	711a      	strb	r2, [r3, #4]
 8013400:	e007      	b.n	8013412 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013402:	7dfb      	ldrb	r3, [r7, #23]
 8013404:	2b01      	cmp	r3, #1
 8013406:	d102      	bne.n	801340e <create_chain+0x122>
 8013408:	f04f 33ff 	mov.w	r3, #4294967295
 801340c:	e000      	b.n	8013410 <create_chain+0x124>
 801340e:	2301      	movs	r3, #1
 8013410:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013412:	69fb      	ldr	r3, [r7, #28]
}
 8013414:	4618      	mov	r0, r3
 8013416:	3720      	adds	r7, #32
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}

0801341c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801341c:	b480      	push	{r7}
 801341e:	b087      	sub	sp, #28
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013430:	3304      	adds	r3, #4
 8013432:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	0a5b      	lsrs	r3, r3, #9
 8013438:	68fa      	ldr	r2, [r7, #12]
 801343a:	8952      	ldrh	r2, [r2, #10]
 801343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013440:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	1d1a      	adds	r2, r3, #4
 8013446:	613a      	str	r2, [r7, #16]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d101      	bne.n	8013456 <clmt_clust+0x3a>
 8013452:	2300      	movs	r3, #0
 8013454:	e010      	b.n	8013478 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013456:	697a      	ldr	r2, [r7, #20]
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	429a      	cmp	r2, r3
 801345c:	d307      	bcc.n	801346e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801345e:	697a      	ldr	r2, [r7, #20]
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	1ad3      	subs	r3, r2, r3
 8013464:	617b      	str	r3, [r7, #20]
 8013466:	693b      	ldr	r3, [r7, #16]
 8013468:	3304      	adds	r3, #4
 801346a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801346c:	e7e9      	b.n	8013442 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801346e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	681a      	ldr	r2, [r3, #0]
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	4413      	add	r3, r2
}
 8013478:	4618      	mov	r0, r3
 801347a:	371c      	adds	r7, #28
 801347c:	46bd      	mov	sp, r7
 801347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013482:	4770      	bx	lr

08013484 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b086      	sub	sp, #24
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
 801348c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801349a:	d204      	bcs.n	80134a6 <dir_sdi+0x22>
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	f003 031f 	and.w	r3, r3, #31
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d001      	beq.n	80134aa <dir_sdi+0x26>
		return FR_INT_ERR;
 80134a6:	2302      	movs	r3, #2
 80134a8:	e063      	b.n	8013572 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	683a      	ldr	r2, [r7, #0]
 80134ae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	689b      	ldr	r3, [r3, #8]
 80134b4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80134b6:	697b      	ldr	r3, [r7, #20]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d106      	bne.n	80134ca <dir_sdi+0x46>
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	2b02      	cmp	r3, #2
 80134c2:	d902      	bls.n	80134ca <dir_sdi+0x46>
		clst = fs->dirbase;
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134c8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d10c      	bne.n	80134ea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	095b      	lsrs	r3, r3, #5
 80134d4:	693a      	ldr	r2, [r7, #16]
 80134d6:	8912      	ldrh	r2, [r2, #8]
 80134d8:	4293      	cmp	r3, r2
 80134da:	d301      	bcc.n	80134e0 <dir_sdi+0x5c>
 80134dc:	2302      	movs	r3, #2
 80134de:	e048      	b.n	8013572 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80134e0:	693b      	ldr	r3, [r7, #16]
 80134e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	61da      	str	r2, [r3, #28]
 80134e8:	e029      	b.n	801353e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	895b      	ldrh	r3, [r3, #10]
 80134ee:	025b      	lsls	r3, r3, #9
 80134f0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80134f2:	e019      	b.n	8013528 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6979      	ldr	r1, [r7, #20]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7ff fd06 	bl	8012f0a <get_fat>
 80134fe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013500:	697b      	ldr	r3, [r7, #20]
 8013502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013506:	d101      	bne.n	801350c <dir_sdi+0x88>
 8013508:	2301      	movs	r3, #1
 801350a:	e032      	b.n	8013572 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	2b01      	cmp	r3, #1
 8013510:	d904      	bls.n	801351c <dir_sdi+0x98>
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	69db      	ldr	r3, [r3, #28]
 8013516:	697a      	ldr	r2, [r7, #20]
 8013518:	429a      	cmp	r2, r3
 801351a:	d301      	bcc.n	8013520 <dir_sdi+0x9c>
 801351c:	2302      	movs	r3, #2
 801351e:	e028      	b.n	8013572 <dir_sdi+0xee>
			ofs -= csz;
 8013520:	683a      	ldr	r2, [r7, #0]
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	1ad3      	subs	r3, r2, r3
 8013526:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013528:	683a      	ldr	r2, [r7, #0]
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	429a      	cmp	r2, r3
 801352e:	d2e1      	bcs.n	80134f4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013530:	6979      	ldr	r1, [r7, #20]
 8013532:	6938      	ldr	r0, [r7, #16]
 8013534:	f7ff fcca 	bl	8012ecc <clust2sect>
 8013538:	4602      	mov	r2, r0
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	697a      	ldr	r2, [r7, #20]
 8013542:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	69db      	ldr	r3, [r3, #28]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d101      	bne.n	8013550 <dir_sdi+0xcc>
 801354c:	2302      	movs	r3, #2
 801354e:	e010      	b.n	8013572 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	69da      	ldr	r2, [r3, #28]
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	0a5b      	lsrs	r3, r3, #9
 8013558:	441a      	add	r2, r3
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801356a:	441a      	add	r2, r3
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013570:	2300      	movs	r3, #0
}
 8013572:	4618      	mov	r0, r3
 8013574:	3718      	adds	r7, #24
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}

0801357a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801357a:	b580      	push	{r7, lr}
 801357c:	b086      	sub	sp, #24
 801357e:	af00      	add	r7, sp, #0
 8013580:	6078      	str	r0, [r7, #4]
 8013582:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	695b      	ldr	r3, [r3, #20]
 801358e:	3320      	adds	r3, #32
 8013590:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	69db      	ldr	r3, [r3, #28]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d003      	beq.n	80135a2 <dir_next+0x28>
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80135a0:	d301      	bcc.n	80135a6 <dir_next+0x2c>
 80135a2:	2304      	movs	r3, #4
 80135a4:	e0aa      	b.n	80136fc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	f040 8098 	bne.w	80136e2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	69db      	ldr	r3, [r3, #28]
 80135b6:	1c5a      	adds	r2, r3, #1
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	699b      	ldr	r3, [r3, #24]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d10b      	bne.n	80135dc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	095b      	lsrs	r3, r3, #5
 80135c8:	68fa      	ldr	r2, [r7, #12]
 80135ca:	8912      	ldrh	r2, [r2, #8]
 80135cc:	4293      	cmp	r3, r2
 80135ce:	f0c0 8088 	bcc.w	80136e2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	2200      	movs	r2, #0
 80135d6:	61da      	str	r2, [r3, #28]
 80135d8:	2304      	movs	r3, #4
 80135da:	e08f      	b.n	80136fc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	0a5b      	lsrs	r3, r3, #9
 80135e0:	68fa      	ldr	r2, [r7, #12]
 80135e2:	8952      	ldrh	r2, [r2, #10]
 80135e4:	3a01      	subs	r2, #1
 80135e6:	4013      	ands	r3, r2
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d17a      	bne.n	80136e2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	699b      	ldr	r3, [r3, #24]
 80135f2:	4619      	mov	r1, r3
 80135f4:	4610      	mov	r0, r2
 80135f6:	f7ff fc88 	bl	8012f0a <get_fat>
 80135fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	2b01      	cmp	r3, #1
 8013600:	d801      	bhi.n	8013606 <dir_next+0x8c>
 8013602:	2302      	movs	r3, #2
 8013604:	e07a      	b.n	80136fc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801360c:	d101      	bne.n	8013612 <dir_next+0x98>
 801360e:	2301      	movs	r3, #1
 8013610:	e074      	b.n	80136fc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	69db      	ldr	r3, [r3, #28]
 8013616:	697a      	ldr	r2, [r7, #20]
 8013618:	429a      	cmp	r2, r3
 801361a:	d358      	bcc.n	80136ce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d104      	bne.n	801362c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2200      	movs	r2, #0
 8013626:	61da      	str	r2, [r3, #28]
 8013628:	2304      	movs	r3, #4
 801362a:	e067      	b.n	80136fc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801362c:	687a      	ldr	r2, [r7, #4]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	699b      	ldr	r3, [r3, #24]
 8013632:	4619      	mov	r1, r3
 8013634:	4610      	mov	r0, r2
 8013636:	f7ff fe59 	bl	80132ec <create_chain>
 801363a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d101      	bne.n	8013646 <dir_next+0xcc>
 8013642:	2307      	movs	r3, #7
 8013644:	e05a      	b.n	80136fc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	2b01      	cmp	r3, #1
 801364a:	d101      	bne.n	8013650 <dir_next+0xd6>
 801364c:	2302      	movs	r3, #2
 801364e:	e055      	b.n	80136fc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013656:	d101      	bne.n	801365c <dir_next+0xe2>
 8013658:	2301      	movs	r3, #1
 801365a:	e04f      	b.n	80136fc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801365c:	68f8      	ldr	r0, [r7, #12]
 801365e:	f7ff fb55 	bl	8012d0c <sync_window>
 8013662:	4603      	mov	r3, r0
 8013664:	2b00      	cmp	r3, #0
 8013666:	d001      	beq.n	801366c <dir_next+0xf2>
 8013668:	2301      	movs	r3, #1
 801366a:	e047      	b.n	80136fc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	3338      	adds	r3, #56	; 0x38
 8013670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013674:	2100      	movs	r1, #0
 8013676:	4618      	mov	r0, r3
 8013678:	f7ff f97f 	bl	801297a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801367c:	2300      	movs	r3, #0
 801367e:	613b      	str	r3, [r7, #16]
 8013680:	6979      	ldr	r1, [r7, #20]
 8013682:	68f8      	ldr	r0, [r7, #12]
 8013684:	f7ff fc22 	bl	8012ecc <clust2sect>
 8013688:	4602      	mov	r2, r0
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	635a      	str	r2, [r3, #52]	; 0x34
 801368e:	e012      	b.n	80136b6 <dir_next+0x13c>
						fs->wflag = 1;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	2201      	movs	r2, #1
 8013694:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013696:	68f8      	ldr	r0, [r7, #12]
 8013698:	f7ff fb38 	bl	8012d0c <sync_window>
 801369c:	4603      	mov	r3, r0
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d001      	beq.n	80136a6 <dir_next+0x12c>
 80136a2:	2301      	movs	r3, #1
 80136a4:	e02a      	b.n	80136fc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	3301      	adds	r3, #1
 80136aa:	613b      	str	r3, [r7, #16]
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136b0:	1c5a      	adds	r2, r3, #1
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	635a      	str	r2, [r3, #52]	; 0x34
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	895b      	ldrh	r3, [r3, #10]
 80136ba:	461a      	mov	r2, r3
 80136bc:	693b      	ldr	r3, [r7, #16]
 80136be:	4293      	cmp	r3, r2
 80136c0:	d3e6      	bcc.n	8013690 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	1ad2      	subs	r2, r2, r3
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	697a      	ldr	r2, [r7, #20]
 80136d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80136d4:	6979      	ldr	r1, [r7, #20]
 80136d6:	68f8      	ldr	r0, [r7, #12]
 80136d8:	f7ff fbf8 	bl	8012ecc <clust2sect>
 80136dc:	4602      	mov	r2, r0
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	68ba      	ldr	r2, [r7, #8]
 80136e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136f4:	441a      	add	r2, r3
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80136fa:	2300      	movs	r3, #0
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	3718      	adds	r7, #24
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}

08013704 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b086      	sub	sp, #24
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013714:	2100      	movs	r1, #0
 8013716:	6878      	ldr	r0, [r7, #4]
 8013718:	f7ff feb4 	bl	8013484 <dir_sdi>
 801371c:	4603      	mov	r3, r0
 801371e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013720:	7dfb      	ldrb	r3, [r7, #23]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d12b      	bne.n	801377e <dir_alloc+0x7a>
		n = 0;
 8013726:	2300      	movs	r3, #0
 8013728:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	69db      	ldr	r3, [r3, #28]
 801372e:	4619      	mov	r1, r3
 8013730:	68f8      	ldr	r0, [r7, #12]
 8013732:	f7ff fb2f 	bl	8012d94 <move_window>
 8013736:	4603      	mov	r3, r0
 8013738:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801373a:	7dfb      	ldrb	r3, [r7, #23]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d11d      	bne.n	801377c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	6a1b      	ldr	r3, [r3, #32]
 8013744:	781b      	ldrb	r3, [r3, #0]
 8013746:	2be5      	cmp	r3, #229	; 0xe5
 8013748:	d004      	beq.n	8013754 <dir_alloc+0x50>
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	6a1b      	ldr	r3, [r3, #32]
 801374e:	781b      	ldrb	r3, [r3, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d107      	bne.n	8013764 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	3301      	adds	r3, #1
 8013758:	613b      	str	r3, [r7, #16]
 801375a:	693a      	ldr	r2, [r7, #16]
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	429a      	cmp	r2, r3
 8013760:	d102      	bne.n	8013768 <dir_alloc+0x64>
 8013762:	e00c      	b.n	801377e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013764:	2300      	movs	r3, #0
 8013766:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013768:	2101      	movs	r1, #1
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f7ff ff05 	bl	801357a <dir_next>
 8013770:	4603      	mov	r3, r0
 8013772:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013774:	7dfb      	ldrb	r3, [r7, #23]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d0d7      	beq.n	801372a <dir_alloc+0x26>
 801377a:	e000      	b.n	801377e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801377c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801377e:	7dfb      	ldrb	r3, [r7, #23]
 8013780:	2b04      	cmp	r3, #4
 8013782:	d101      	bne.n	8013788 <dir_alloc+0x84>
 8013784:	2307      	movs	r3, #7
 8013786:	75fb      	strb	r3, [r7, #23]
	return res;
 8013788:	7dfb      	ldrb	r3, [r7, #23]
}
 801378a:	4618      	mov	r0, r3
 801378c:	3718      	adds	r7, #24
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}

08013792 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013792:	b580      	push	{r7, lr}
 8013794:	b084      	sub	sp, #16
 8013796:	af00      	add	r7, sp, #0
 8013798:	6078      	str	r0, [r7, #4]
 801379a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	331a      	adds	r3, #26
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7ff f847 	bl	8012834 <ld_word>
 80137a6:	4603      	mov	r3, r0
 80137a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	2b03      	cmp	r3, #3
 80137b0:	d109      	bne.n	80137c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	3314      	adds	r3, #20
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7ff f83c 	bl	8012834 <ld_word>
 80137bc:	4603      	mov	r3, r0
 80137be:	041b      	lsls	r3, r3, #16
 80137c0:	68fa      	ldr	r2, [r7, #12]
 80137c2:	4313      	orrs	r3, r2
 80137c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80137c6:	68fb      	ldr	r3, [r7, #12]
}
 80137c8:	4618      	mov	r0, r3
 80137ca:	3710      	adds	r7, #16
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}

080137d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b084      	sub	sp, #16
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	60f8      	str	r0, [r7, #12]
 80137d8:	60b9      	str	r1, [r7, #8]
 80137da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	331a      	adds	r3, #26
 80137e0:	687a      	ldr	r2, [r7, #4]
 80137e2:	b292      	uxth	r2, r2
 80137e4:	4611      	mov	r1, r2
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7ff f85f 	bl	80128aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	781b      	ldrb	r3, [r3, #0]
 80137f0:	2b03      	cmp	r3, #3
 80137f2:	d109      	bne.n	8013808 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	f103 0214 	add.w	r2, r3, #20
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	0c1b      	lsrs	r3, r3, #16
 80137fe:	b29b      	uxth	r3, r3
 8013800:	4619      	mov	r1, r3
 8013802:	4610      	mov	r0, r2
 8013804:	f7ff f851 	bl	80128aa <st_word>
	}
}
 8013808:	bf00      	nop
 801380a:	3710      	adds	r7, #16
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}

08013810 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8013810:	b590      	push	{r4, r7, lr}
 8013812:	b087      	sub	sp, #28
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	331a      	adds	r3, #26
 801381e:	4618      	mov	r0, r3
 8013820:	f7ff f808 	bl	8012834 <ld_word>
 8013824:	4603      	mov	r3, r0
 8013826:	2b00      	cmp	r3, #0
 8013828:	d001      	beq.n	801382e <cmp_lfn+0x1e>
 801382a:	2300      	movs	r3, #0
 801382c:	e059      	b.n	80138e2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013836:	1e5a      	subs	r2, r3, #1
 8013838:	4613      	mov	r3, r2
 801383a:	005b      	lsls	r3, r3, #1
 801383c:	4413      	add	r3, r2
 801383e:	009b      	lsls	r3, r3, #2
 8013840:	4413      	add	r3, r2
 8013842:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013844:	2301      	movs	r3, #1
 8013846:	81fb      	strh	r3, [r7, #14]
 8013848:	2300      	movs	r3, #0
 801384a:	613b      	str	r3, [r7, #16]
 801384c:	e033      	b.n	80138b6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801384e:	4a27      	ldr	r2, [pc, #156]	; (80138ec <cmp_lfn+0xdc>)
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	4413      	add	r3, r2
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	461a      	mov	r2, r3
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	4413      	add	r3, r2
 801385c:	4618      	mov	r0, r3
 801385e:	f7fe ffe9 	bl	8012834 <ld_word>
 8013862:	4603      	mov	r3, r0
 8013864:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8013866:	89fb      	ldrh	r3, [r7, #14]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d01a      	beq.n	80138a2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	2bfe      	cmp	r3, #254	; 0xfe
 8013870:	d812      	bhi.n	8013898 <cmp_lfn+0x88>
 8013872:	89bb      	ldrh	r3, [r7, #12]
 8013874:	4618      	mov	r0, r3
 8013876:	f002 fc81 	bl	801617c <ff_wtoupper>
 801387a:	4603      	mov	r3, r0
 801387c:	461c      	mov	r4, r3
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	1c5a      	adds	r2, r3, #1
 8013882:	617a      	str	r2, [r7, #20]
 8013884:	005b      	lsls	r3, r3, #1
 8013886:	687a      	ldr	r2, [r7, #4]
 8013888:	4413      	add	r3, r2
 801388a:	881b      	ldrh	r3, [r3, #0]
 801388c:	4618      	mov	r0, r3
 801388e:	f002 fc75 	bl	801617c <ff_wtoupper>
 8013892:	4603      	mov	r3, r0
 8013894:	429c      	cmp	r4, r3
 8013896:	d001      	beq.n	801389c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8013898:	2300      	movs	r3, #0
 801389a:	e022      	b.n	80138e2 <cmp_lfn+0xd2>
			}
			wc = uc;
 801389c:	89bb      	ldrh	r3, [r7, #12]
 801389e:	81fb      	strh	r3, [r7, #14]
 80138a0:	e006      	b.n	80138b0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80138a2:	89bb      	ldrh	r3, [r7, #12]
 80138a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138a8:	4293      	cmp	r3, r2
 80138aa:	d001      	beq.n	80138b0 <cmp_lfn+0xa0>
 80138ac:	2300      	movs	r3, #0
 80138ae:	e018      	b.n	80138e2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80138b0:	693b      	ldr	r3, [r7, #16]
 80138b2:	3301      	adds	r3, #1
 80138b4:	613b      	str	r3, [r7, #16]
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	2b0c      	cmp	r3, #12
 80138ba:	d9c8      	bls.n	801384e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d00b      	beq.n	80138e0 <cmp_lfn+0xd0>
 80138c8:	89fb      	ldrh	r3, [r7, #14]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d008      	beq.n	80138e0 <cmp_lfn+0xd0>
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	005b      	lsls	r3, r3, #1
 80138d2:	687a      	ldr	r2, [r7, #4]
 80138d4:	4413      	add	r3, r2
 80138d6:	881b      	ldrh	r3, [r3, #0]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d001      	beq.n	80138e0 <cmp_lfn+0xd0>
 80138dc:	2300      	movs	r3, #0
 80138de:	e000      	b.n	80138e2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80138e0:	2301      	movs	r3, #1
}
 80138e2:	4618      	mov	r0, r3
 80138e4:	371c      	adds	r7, #28
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd90      	pop	{r4, r7, pc}
 80138ea:	bf00      	nop
 80138ec:	0801b4b4 	.word	0x0801b4b4

080138f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b088      	sub	sp, #32
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	60b9      	str	r1, [r7, #8]
 80138fa:	4611      	mov	r1, r2
 80138fc:	461a      	mov	r2, r3
 80138fe:	460b      	mov	r3, r1
 8013900:	71fb      	strb	r3, [r7, #7]
 8013902:	4613      	mov	r3, r2
 8013904:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	330d      	adds	r3, #13
 801390a:	79ba      	ldrb	r2, [r7, #6]
 801390c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	330b      	adds	r3, #11
 8013912:	220f      	movs	r2, #15
 8013914:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	330c      	adds	r3, #12
 801391a:	2200      	movs	r2, #0
 801391c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	331a      	adds	r3, #26
 8013922:	2100      	movs	r1, #0
 8013924:	4618      	mov	r0, r3
 8013926:	f7fe ffc0 	bl	80128aa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801392a:	79fb      	ldrb	r3, [r7, #7]
 801392c:	1e5a      	subs	r2, r3, #1
 801392e:	4613      	mov	r3, r2
 8013930:	005b      	lsls	r3, r3, #1
 8013932:	4413      	add	r3, r2
 8013934:	009b      	lsls	r3, r3, #2
 8013936:	4413      	add	r3, r2
 8013938:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801393a:	2300      	movs	r3, #0
 801393c:	82fb      	strh	r3, [r7, #22]
 801393e:	2300      	movs	r3, #0
 8013940:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013942:	8afb      	ldrh	r3, [r7, #22]
 8013944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013948:	4293      	cmp	r3, r2
 801394a:	d007      	beq.n	801395c <put_lfn+0x6c>
 801394c:	69fb      	ldr	r3, [r7, #28]
 801394e:	1c5a      	adds	r2, r3, #1
 8013950:	61fa      	str	r2, [r7, #28]
 8013952:	005b      	lsls	r3, r3, #1
 8013954:	68fa      	ldr	r2, [r7, #12]
 8013956:	4413      	add	r3, r2
 8013958:	881b      	ldrh	r3, [r3, #0]
 801395a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801395c:	4a17      	ldr	r2, [pc, #92]	; (80139bc <put_lfn+0xcc>)
 801395e:	69bb      	ldr	r3, [r7, #24]
 8013960:	4413      	add	r3, r2
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	461a      	mov	r2, r3
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	4413      	add	r3, r2
 801396a:	8afa      	ldrh	r2, [r7, #22]
 801396c:	4611      	mov	r1, r2
 801396e:	4618      	mov	r0, r3
 8013970:	f7fe ff9b 	bl	80128aa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013974:	8afb      	ldrh	r3, [r7, #22]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d102      	bne.n	8013980 <put_lfn+0x90>
 801397a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801397e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8013980:	69bb      	ldr	r3, [r7, #24]
 8013982:	3301      	adds	r3, #1
 8013984:	61bb      	str	r3, [r7, #24]
 8013986:	69bb      	ldr	r3, [r7, #24]
 8013988:	2b0c      	cmp	r3, #12
 801398a:	d9da      	bls.n	8013942 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801398c:	8afb      	ldrh	r3, [r7, #22]
 801398e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013992:	4293      	cmp	r3, r2
 8013994:	d006      	beq.n	80139a4 <put_lfn+0xb4>
 8013996:	69fb      	ldr	r3, [r7, #28]
 8013998:	005b      	lsls	r3, r3, #1
 801399a:	68fa      	ldr	r2, [r7, #12]
 801399c:	4413      	add	r3, r2
 801399e:	881b      	ldrh	r3, [r3, #0]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d103      	bne.n	80139ac <put_lfn+0xbc>
 80139a4:	79fb      	ldrb	r3, [r7, #7]
 80139a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139aa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	79fa      	ldrb	r2, [r7, #7]
 80139b0:	701a      	strb	r2, [r3, #0]
}
 80139b2:	bf00      	nop
 80139b4:	3720      	adds	r7, #32
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}
 80139ba:	bf00      	nop
 80139bc:	0801b4b4 	.word	0x0801b4b4

080139c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b08c      	sub	sp, #48	; 0x30
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	60b9      	str	r1, [r7, #8]
 80139ca:	607a      	str	r2, [r7, #4]
 80139cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80139ce:	220b      	movs	r2, #11
 80139d0:	68b9      	ldr	r1, [r7, #8]
 80139d2:	68f8      	ldr	r0, [r7, #12]
 80139d4:	f7fe ffb0 	bl	8012938 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	2b05      	cmp	r3, #5
 80139dc:	d92b      	bls.n	8013a36 <gen_numname+0x76>
		sr = seq;
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80139e2:	e022      	b.n	8013a2a <gen_numname+0x6a>
			wc = *lfn++;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	1c9a      	adds	r2, r3, #2
 80139e8:	607a      	str	r2, [r7, #4]
 80139ea:	881b      	ldrh	r3, [r3, #0]
 80139ec:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80139ee:	2300      	movs	r3, #0
 80139f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80139f2:	e017      	b.n	8013a24 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80139f4:	69fb      	ldr	r3, [r7, #28]
 80139f6:	005a      	lsls	r2, r3, #1
 80139f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139fa:	f003 0301 	and.w	r3, r3, #1
 80139fe:	4413      	add	r3, r2
 8013a00:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8013a02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a04:	085b      	lsrs	r3, r3, #1
 8013a06:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d005      	beq.n	8013a1e <gen_numname+0x5e>
 8013a12:	69fb      	ldr	r3, [r7, #28]
 8013a14:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8013a18:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8013a1c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8013a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a20:	3301      	adds	r3, #1
 8013a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a26:	2b0f      	cmp	r3, #15
 8013a28:	d9e4      	bls.n	80139f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	881b      	ldrh	r3, [r3, #0]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d1d8      	bne.n	80139e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8013a32:	69fb      	ldr	r3, [r7, #28]
 8013a34:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8013a36:	2307      	movs	r3, #7
 8013a38:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	f003 030f 	and.w	r3, r3, #15
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	3330      	adds	r3, #48	; 0x30
 8013a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8013a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a4e:	2b39      	cmp	r3, #57	; 0x39
 8013a50:	d904      	bls.n	8013a5c <gen_numname+0x9c>
 8013a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a56:	3307      	adds	r3, #7
 8013a58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8013a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5e:	1e5a      	subs	r2, r3, #1
 8013a60:	62ba      	str	r2, [r7, #40]	; 0x28
 8013a62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013a66:	4413      	add	r3, r2
 8013a68:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013a6c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8013a70:	683b      	ldr	r3, [r7, #0]
 8013a72:	091b      	lsrs	r3, r3, #4
 8013a74:	603b      	str	r3, [r7, #0]
	} while (seq);
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d1de      	bne.n	8013a3a <gen_numname+0x7a>
	ns[i] = '~';
 8013a7c:	f107 0214 	add.w	r2, r7, #20
 8013a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a82:	4413      	add	r3, r2
 8013a84:	227e      	movs	r2, #126	; 0x7e
 8013a86:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013a88:	2300      	movs	r3, #0
 8013a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8013a8c:	e002      	b.n	8013a94 <gen_numname+0xd4>
 8013a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a90:	3301      	adds	r3, #1
 8013a92:	627b      	str	r3, [r7, #36]	; 0x24
 8013a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d205      	bcs.n	8013aa8 <gen_numname+0xe8>
 8013a9c:	68fa      	ldr	r2, [r7, #12]
 8013a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa0:	4413      	add	r3, r2
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	2b20      	cmp	r3, #32
 8013aa6:	d1f2      	bne.n	8013a8e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aaa:	2b07      	cmp	r3, #7
 8013aac:	d808      	bhi.n	8013ac0 <gen_numname+0x100>
 8013aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab0:	1c5a      	adds	r2, r3, #1
 8013ab2:	62ba      	str	r2, [r7, #40]	; 0x28
 8013ab4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013ab8:	4413      	add	r3, r2
 8013aba:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8013abe:	e000      	b.n	8013ac2 <gen_numname+0x102>
 8013ac0:	2120      	movs	r1, #32
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac4:	1c5a      	adds	r2, r3, #1
 8013ac6:	627a      	str	r2, [r7, #36]	; 0x24
 8013ac8:	68fa      	ldr	r2, [r7, #12]
 8013aca:	4413      	add	r3, r2
 8013acc:	460a      	mov	r2, r1
 8013ace:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8013ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad2:	2b07      	cmp	r3, #7
 8013ad4:	d9e8      	bls.n	8013aa8 <gen_numname+0xe8>
}
 8013ad6:	bf00      	nop
 8013ad8:	3730      	adds	r7, #48	; 0x30
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}

08013ade <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8013ade:	b480      	push	{r7}
 8013ae0:	b085      	sub	sp, #20
 8013ae2:	af00      	add	r7, sp, #0
 8013ae4:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8013aea:	230b      	movs	r3, #11
 8013aec:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8013aee:	7bfb      	ldrb	r3, [r7, #15]
 8013af0:	b2da      	uxtb	r2, r3
 8013af2:	0852      	lsrs	r2, r2, #1
 8013af4:	01db      	lsls	r3, r3, #7
 8013af6:	4313      	orrs	r3, r2
 8013af8:	b2da      	uxtb	r2, r3
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	1c59      	adds	r1, r3, #1
 8013afe:	6079      	str	r1, [r7, #4]
 8013b00:	781b      	ldrb	r3, [r3, #0]
 8013b02:	4413      	add	r3, r2
 8013b04:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	3b01      	subs	r3, #1
 8013b0a:	60bb      	str	r3, [r7, #8]
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d1ed      	bne.n	8013aee <sum_sfn+0x10>
	return sum;
 8013b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b14:	4618      	mov	r0, r3
 8013b16:	3714      	adds	r7, #20
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1e:	4770      	bx	lr

08013b20 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b086      	sub	sp, #24
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013b2e:	2100      	movs	r1, #0
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f7ff fca7 	bl	8013484 <dir_sdi>
 8013b36:	4603      	mov	r3, r0
 8013b38:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013b3a:	7dfb      	ldrb	r3, [r7, #23]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d001      	beq.n	8013b44 <dir_find+0x24>
 8013b40:	7dfb      	ldrb	r3, [r7, #23]
 8013b42:	e0a9      	b.n	8013c98 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013b44:	23ff      	movs	r3, #255	; 0xff
 8013b46:	753b      	strb	r3, [r7, #20]
 8013b48:	7d3b      	ldrb	r3, [r7, #20]
 8013b4a:	757b      	strb	r3, [r7, #21]
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b52:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	69db      	ldr	r3, [r3, #28]
 8013b58:	4619      	mov	r1, r3
 8013b5a:	6938      	ldr	r0, [r7, #16]
 8013b5c:	f7ff f91a 	bl	8012d94 <move_window>
 8013b60:	4603      	mov	r3, r0
 8013b62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013b64:	7dfb      	ldrb	r3, [r7, #23]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	f040 8090 	bne.w	8013c8c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	6a1b      	ldr	r3, [r3, #32]
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013b74:	7dbb      	ldrb	r3, [r7, #22]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d102      	bne.n	8013b80 <dir_find+0x60>
 8013b7a:	2304      	movs	r3, #4
 8013b7c:	75fb      	strb	r3, [r7, #23]
 8013b7e:	e08a      	b.n	8013c96 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	6a1b      	ldr	r3, [r3, #32]
 8013b84:	330b      	adds	r3, #11
 8013b86:	781b      	ldrb	r3, [r3, #0]
 8013b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013b8c:	73fb      	strb	r3, [r7, #15]
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	7bfa      	ldrb	r2, [r7, #15]
 8013b92:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8013b94:	7dbb      	ldrb	r3, [r7, #22]
 8013b96:	2be5      	cmp	r3, #229	; 0xe5
 8013b98:	d007      	beq.n	8013baa <dir_find+0x8a>
 8013b9a:	7bfb      	ldrb	r3, [r7, #15]
 8013b9c:	f003 0308 	and.w	r3, r3, #8
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d009      	beq.n	8013bb8 <dir_find+0x98>
 8013ba4:	7bfb      	ldrb	r3, [r7, #15]
 8013ba6:	2b0f      	cmp	r3, #15
 8013ba8:	d006      	beq.n	8013bb8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013baa:	23ff      	movs	r3, #255	; 0xff
 8013bac:	757b      	strb	r3, [r7, #21]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8013bb4:	631a      	str	r2, [r3, #48]	; 0x30
 8013bb6:	e05e      	b.n	8013c76 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8013bb8:	7bfb      	ldrb	r3, [r7, #15]
 8013bba:	2b0f      	cmp	r3, #15
 8013bbc:	d136      	bne.n	8013c2c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d154      	bne.n	8013c76 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8013bcc:	7dbb      	ldrb	r3, [r7, #22]
 8013bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d00d      	beq.n	8013bf2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	6a1b      	ldr	r3, [r3, #32]
 8013bda:	7b5b      	ldrb	r3, [r3, #13]
 8013bdc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8013bde:	7dbb      	ldrb	r3, [r7, #22]
 8013be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013be4:	75bb      	strb	r3, [r7, #22]
 8013be6:	7dbb      	ldrb	r3, [r7, #22]
 8013be8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	695a      	ldr	r2, [r3, #20]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8013bf2:	7dba      	ldrb	r2, [r7, #22]
 8013bf4:	7d7b      	ldrb	r3, [r7, #21]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d115      	bne.n	8013c26 <dir_find+0x106>
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	6a1b      	ldr	r3, [r3, #32]
 8013bfe:	330d      	adds	r3, #13
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	7d3a      	ldrb	r2, [r7, #20]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d10e      	bne.n	8013c26 <dir_find+0x106>
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	68da      	ldr	r2, [r3, #12]
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6a1b      	ldr	r3, [r3, #32]
 8013c10:	4619      	mov	r1, r3
 8013c12:	4610      	mov	r0, r2
 8013c14:	f7ff fdfc 	bl	8013810 <cmp_lfn>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d003      	beq.n	8013c26 <dir_find+0x106>
 8013c1e:	7d7b      	ldrb	r3, [r7, #21]
 8013c20:	3b01      	subs	r3, #1
 8013c22:	b2db      	uxtb	r3, r3
 8013c24:	e000      	b.n	8013c28 <dir_find+0x108>
 8013c26:	23ff      	movs	r3, #255	; 0xff
 8013c28:	757b      	strb	r3, [r7, #21]
 8013c2a:	e024      	b.n	8013c76 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013c2c:	7d7b      	ldrb	r3, [r7, #21]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d109      	bne.n	8013c46 <dir_find+0x126>
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	6a1b      	ldr	r3, [r3, #32]
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7ff ff51 	bl	8013ade <sum_sfn>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	461a      	mov	r2, r3
 8013c40:	7d3b      	ldrb	r3, [r7, #20]
 8013c42:	4293      	cmp	r3, r2
 8013c44:	d024      	beq.n	8013c90 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013c4c:	f003 0301 	and.w	r3, r3, #1
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d10a      	bne.n	8013c6a <dir_find+0x14a>
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6a18      	ldr	r0, [r3, #32]
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	3324      	adds	r3, #36	; 0x24
 8013c5c:	220b      	movs	r2, #11
 8013c5e:	4619      	mov	r1, r3
 8013c60:	f7fe fea5 	bl	80129ae <mem_cmp>
 8013c64:	4603      	mov	r3, r0
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d014      	beq.n	8013c94 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013c6a:	23ff      	movs	r3, #255	; 0xff
 8013c6c:	757b      	strb	r3, [r7, #21]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f04f 32ff 	mov.w	r2, #4294967295
 8013c74:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013c76:	2100      	movs	r1, #0
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f7ff fc7e 	bl	801357a <dir_next>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013c82:	7dfb      	ldrb	r3, [r7, #23]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	f43f af65 	beq.w	8013b54 <dir_find+0x34>
 8013c8a:	e004      	b.n	8013c96 <dir_find+0x176>
		if (res != FR_OK) break;
 8013c8c:	bf00      	nop
 8013c8e:	e002      	b.n	8013c96 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013c90:	bf00      	nop
 8013c92:	e000      	b.n	8013c96 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013c94:	bf00      	nop

	return res;
 8013c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	3718      	adds	r7, #24
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b08c      	sub	sp, #48	; 0x30
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013cb4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d001      	beq.n	8013cc0 <dir_register+0x20>
 8013cbc:	2306      	movs	r3, #6
 8013cbe:	e0e0      	b.n	8013e82 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8013cc4:	e002      	b.n	8013ccc <dir_register+0x2c>
 8013cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc8:	3301      	adds	r3, #1
 8013cca:	627b      	str	r3, [r7, #36]	; 0x24
 8013ccc:	69fb      	ldr	r3, [r7, #28]
 8013cce:	68da      	ldr	r2, [r3, #12]
 8013cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd2:	005b      	lsls	r3, r3, #1
 8013cd4:	4413      	add	r3, r2
 8013cd6:	881b      	ldrh	r3, [r3, #0]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d1f4      	bne.n	8013cc6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8013ce2:	f107 030c 	add.w	r3, r7, #12
 8013ce6:	220c      	movs	r2, #12
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7fe fe25 	bl	8012938 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8013cee:	7dfb      	ldrb	r3, [r7, #23]
 8013cf0:	f003 0301 	and.w	r3, r3, #1
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d032      	beq.n	8013d5e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	2240      	movs	r2, #64	; 0x40
 8013cfc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8013d00:	2301      	movs	r3, #1
 8013d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8013d04:	e016      	b.n	8013d34 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8013d0c:	69fb      	ldr	r3, [r7, #28]
 8013d0e:	68da      	ldr	r2, [r3, #12]
 8013d10:	f107 010c 	add.w	r1, r7, #12
 8013d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d16:	f7ff fe53 	bl	80139c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f7ff ff00 	bl	8013b20 <dir_find>
 8013d20:	4603      	mov	r3, r0
 8013d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8013d26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d106      	bne.n	8013d3c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8013d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d30:	3301      	adds	r3, #1
 8013d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8013d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d36:	2b63      	cmp	r3, #99	; 0x63
 8013d38:	d9e5      	bls.n	8013d06 <dir_register+0x66>
 8013d3a:	e000      	b.n	8013d3e <dir_register+0x9e>
			if (res != FR_OK) break;
 8013d3c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d40:	2b64      	cmp	r3, #100	; 0x64
 8013d42:	d101      	bne.n	8013d48 <dir_register+0xa8>
 8013d44:	2307      	movs	r3, #7
 8013d46:	e09c      	b.n	8013e82 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8013d48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d4c:	2b04      	cmp	r3, #4
 8013d4e:	d002      	beq.n	8013d56 <dir_register+0xb6>
 8013d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d54:	e095      	b.n	8013e82 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8013d56:	7dfa      	ldrb	r2, [r7, #23]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013d5e:	7dfb      	ldrb	r3, [r7, #23]
 8013d60:	f003 0302 	and.w	r3, r3, #2
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d007      	beq.n	8013d78 <dir_register+0xd8>
 8013d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6a:	330c      	adds	r3, #12
 8013d6c:	4a47      	ldr	r2, [pc, #284]	; (8013e8c <dir_register+0x1ec>)
 8013d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8013d72:	089b      	lsrs	r3, r3, #2
 8013d74:	3301      	adds	r3, #1
 8013d76:	e000      	b.n	8013d7a <dir_register+0xda>
 8013d78:	2301      	movs	r3, #1
 8013d7a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013d7c:	6a39      	ldr	r1, [r7, #32]
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f7ff fcc0 	bl	8013704 <dir_alloc>
 8013d84:	4603      	mov	r3, r0
 8013d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8013d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d148      	bne.n	8013e24 <dir_register+0x184>
 8013d92:	6a3b      	ldr	r3, [r7, #32]
 8013d94:	3b01      	subs	r3, #1
 8013d96:	623b      	str	r3, [r7, #32]
 8013d98:	6a3b      	ldr	r3, [r7, #32]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d042      	beq.n	8013e24 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	695a      	ldr	r2, [r3, #20]
 8013da2:	6a3b      	ldr	r3, [r7, #32]
 8013da4:	015b      	lsls	r3, r3, #5
 8013da6:	1ad3      	subs	r3, r2, r3
 8013da8:	4619      	mov	r1, r3
 8013daa:	6878      	ldr	r0, [r7, #4]
 8013dac:	f7ff fb6a 	bl	8013484 <dir_sdi>
 8013db0:	4603      	mov	r3, r0
 8013db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8013db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d132      	bne.n	8013e24 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	3324      	adds	r3, #36	; 0x24
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7ff fe8b 	bl	8013ade <sum_sfn>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	69db      	ldr	r3, [r3, #28]
 8013dd0:	4619      	mov	r1, r3
 8013dd2:	69f8      	ldr	r0, [r7, #28]
 8013dd4:	f7fe ffde 	bl	8012d94 <move_window>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8013dde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d11d      	bne.n	8013e22 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8013de6:	69fb      	ldr	r3, [r7, #28]
 8013de8:	68d8      	ldr	r0, [r3, #12]
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	6a19      	ldr	r1, [r3, #32]
 8013dee:	6a3b      	ldr	r3, [r7, #32]
 8013df0:	b2da      	uxtb	r2, r3
 8013df2:	7efb      	ldrb	r3, [r7, #27]
 8013df4:	f7ff fd7c 	bl	80138f0 <put_lfn>
				fs->wflag = 1;
 8013df8:	69fb      	ldr	r3, [r7, #28]
 8013dfa:	2201      	movs	r2, #1
 8013dfc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8013dfe:	2100      	movs	r1, #0
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f7ff fbba 	bl	801357a <dir_next>
 8013e06:	4603      	mov	r3, r0
 8013e08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8013e0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d107      	bne.n	8013e24 <dir_register+0x184>
 8013e14:	6a3b      	ldr	r3, [r7, #32]
 8013e16:	3b01      	subs	r3, #1
 8013e18:	623b      	str	r3, [r7, #32]
 8013e1a:	6a3b      	ldr	r3, [r7, #32]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d1d5      	bne.n	8013dcc <dir_register+0x12c>
 8013e20:	e000      	b.n	8013e24 <dir_register+0x184>
				if (res != FR_OK) break;
 8013e22:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d128      	bne.n	8013e7e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	69db      	ldr	r3, [r3, #28]
 8013e30:	4619      	mov	r1, r3
 8013e32:	69f8      	ldr	r0, [r7, #28]
 8013e34:	f7fe ffae 	bl	8012d94 <move_window>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8013e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d11b      	bne.n	8013e7e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	6a1b      	ldr	r3, [r3, #32]
 8013e4a:	2220      	movs	r2, #32
 8013e4c:	2100      	movs	r1, #0
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f7fe fd93 	bl	801297a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6a18      	ldr	r0, [r3, #32]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	3324      	adds	r3, #36	; 0x24
 8013e5c:	220b      	movs	r2, #11
 8013e5e:	4619      	mov	r1, r3
 8013e60:	f7fe fd6a 	bl	8012938 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	6a1b      	ldr	r3, [r3, #32]
 8013e6e:	330c      	adds	r3, #12
 8013e70:	f002 0218 	and.w	r2, r2, #24
 8013e74:	b2d2      	uxtb	r2, r2
 8013e76:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013e78:	69fb      	ldr	r3, [r7, #28]
 8013e7a:	2201      	movs	r2, #1
 8013e7c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3730      	adds	r7, #48	; 0x30
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	4ec4ec4f 	.word	0x4ec4ec4f

08013e90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b08a      	sub	sp, #40	; 0x28
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	613b      	str	r3, [r7, #16]
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	68db      	ldr	r3, [r3, #12]
 8013ea6:	60fb      	str	r3, [r7, #12]
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	617b      	str	r3, [r7, #20]
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013eb0:	69bb      	ldr	r3, [r7, #24]
 8013eb2:	1c5a      	adds	r2, r3, #1
 8013eb4:	61ba      	str	r2, [r7, #24]
 8013eb6:	693a      	ldr	r2, [r7, #16]
 8013eb8:	4413      	add	r3, r2
 8013eba:	781b      	ldrb	r3, [r3, #0]
 8013ebc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013ebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ec0:	2b1f      	cmp	r3, #31
 8013ec2:	d940      	bls.n	8013f46 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8013ec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ec6:	2b2f      	cmp	r3, #47	; 0x2f
 8013ec8:	d006      	beq.n	8013ed8 <create_name+0x48>
 8013eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ecc:	2b5c      	cmp	r3, #92	; 0x5c
 8013ece:	d110      	bne.n	8013ef2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013ed0:	e002      	b.n	8013ed8 <create_name+0x48>
 8013ed2:	69bb      	ldr	r3, [r7, #24]
 8013ed4:	3301      	adds	r3, #1
 8013ed6:	61bb      	str	r3, [r7, #24]
 8013ed8:	693a      	ldr	r2, [r7, #16]
 8013eda:	69bb      	ldr	r3, [r7, #24]
 8013edc:	4413      	add	r3, r2
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	2b2f      	cmp	r3, #47	; 0x2f
 8013ee2:	d0f6      	beq.n	8013ed2 <create_name+0x42>
 8013ee4:	693a      	ldr	r2, [r7, #16]
 8013ee6:	69bb      	ldr	r3, [r7, #24]
 8013ee8:	4413      	add	r3, r2
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	2b5c      	cmp	r3, #92	; 0x5c
 8013eee:	d0f0      	beq.n	8013ed2 <create_name+0x42>
			break;
 8013ef0:	e02a      	b.n	8013f48 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	2bfe      	cmp	r3, #254	; 0xfe
 8013ef6:	d901      	bls.n	8013efc <create_name+0x6c>
 8013ef8:	2306      	movs	r3, #6
 8013efa:	e1c9      	b.n	8014290 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013efc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013efe:	b2db      	uxtb	r3, r3
 8013f00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8013f02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f04:	2101      	movs	r1, #1
 8013f06:	4618      	mov	r0, r3
 8013f08:	f002 f8fc 	bl	8016104 <ff_convert>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013f10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d101      	bne.n	8013f1a <create_name+0x8a>
 8013f16:	2306      	movs	r3, #6
 8013f18:	e1ba      	b.n	8014290 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8013f1e:	d809      	bhi.n	8013f34 <create_name+0xa4>
 8013f20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f22:	4619      	mov	r1, r3
 8013f24:	48a5      	ldr	r0, [pc, #660]	; (80141bc <create_name+0x32c>)
 8013f26:	f7fe fd69 	bl	80129fc <chk_chr>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d001      	beq.n	8013f34 <create_name+0xa4>
 8013f30:	2306      	movs	r3, #6
 8013f32:	e1ad      	b.n	8014290 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	1c5a      	adds	r2, r3, #1
 8013f38:	617a      	str	r2, [r7, #20]
 8013f3a:	005b      	lsls	r3, r3, #1
 8013f3c:	68fa      	ldr	r2, [r7, #12]
 8013f3e:	4413      	add	r3, r2
 8013f40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013f42:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013f44:	e7b4      	b.n	8013eb0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8013f46:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013f48:	693a      	ldr	r2, [r7, #16]
 8013f4a:	69bb      	ldr	r3, [r7, #24]
 8013f4c:	441a      	add	r2, r3
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f54:	2b1f      	cmp	r3, #31
 8013f56:	d801      	bhi.n	8013f5c <create_name+0xcc>
 8013f58:	2304      	movs	r3, #4
 8013f5a:	e000      	b.n	8013f5e <create_name+0xce>
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8013f62:	697b      	ldr	r3, [r7, #20]
 8013f64:	2b01      	cmp	r3, #1
 8013f66:	d109      	bne.n	8013f7c <create_name+0xec>
 8013f68:	697b      	ldr	r3, [r7, #20]
 8013f6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013f6e:	3b01      	subs	r3, #1
 8013f70:	005b      	lsls	r3, r3, #1
 8013f72:	68fa      	ldr	r2, [r7, #12]
 8013f74:	4413      	add	r3, r2
 8013f76:	881b      	ldrh	r3, [r3, #0]
 8013f78:	2b2e      	cmp	r3, #46	; 0x2e
 8013f7a:	d016      	beq.n	8013faa <create_name+0x11a>
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	2b02      	cmp	r3, #2
 8013f80:	d14e      	bne.n	8014020 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8013f82:	697b      	ldr	r3, [r7, #20]
 8013f84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013f88:	3b01      	subs	r3, #1
 8013f8a:	005b      	lsls	r3, r3, #1
 8013f8c:	68fa      	ldr	r2, [r7, #12]
 8013f8e:	4413      	add	r3, r2
 8013f90:	881b      	ldrh	r3, [r3, #0]
 8013f92:	2b2e      	cmp	r3, #46	; 0x2e
 8013f94:	d144      	bne.n	8014020 <create_name+0x190>
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013f9c:	3b02      	subs	r3, #2
 8013f9e:	005b      	lsls	r3, r3, #1
 8013fa0:	68fa      	ldr	r2, [r7, #12]
 8013fa2:	4413      	add	r3, r2
 8013fa4:	881b      	ldrh	r3, [r3, #0]
 8013fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8013fa8:	d13a      	bne.n	8014020 <create_name+0x190>
		lfn[di] = 0;
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	005b      	lsls	r3, r3, #1
 8013fae:	68fa      	ldr	r2, [r7, #12]
 8013fb0:	4413      	add	r3, r2
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	623b      	str	r3, [r7, #32]
 8013fba:	e00f      	b.n	8013fdc <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8013fbc:	6a3a      	ldr	r2, [r7, #32]
 8013fbe:	697b      	ldr	r3, [r7, #20]
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d201      	bcs.n	8013fc8 <create_name+0x138>
 8013fc4:	212e      	movs	r1, #46	; 0x2e
 8013fc6:	e000      	b.n	8013fca <create_name+0x13a>
 8013fc8:	2120      	movs	r1, #32
 8013fca:	687a      	ldr	r2, [r7, #4]
 8013fcc:	6a3b      	ldr	r3, [r7, #32]
 8013fce:	4413      	add	r3, r2
 8013fd0:	3324      	adds	r3, #36	; 0x24
 8013fd2:	460a      	mov	r2, r1
 8013fd4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8013fd6:	6a3b      	ldr	r3, [r7, #32]
 8013fd8:	3301      	adds	r3, #1
 8013fda:	623b      	str	r3, [r7, #32]
 8013fdc:	6a3b      	ldr	r3, [r7, #32]
 8013fde:	2b0a      	cmp	r3, #10
 8013fe0:	d9ec      	bls.n	8013fbc <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8013fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fe6:	f043 0320 	orr.w	r3, r3, #32
 8013fea:	b2d9      	uxtb	r1, r3
 8013fec:	687a      	ldr	r2, [r7, #4]
 8013fee:	6a3b      	ldr	r3, [r7, #32]
 8013ff0:	4413      	add	r3, r2
 8013ff2:	3324      	adds	r3, #36	; 0x24
 8013ff4:	460a      	mov	r2, r1
 8013ff6:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	e149      	b.n	8014290 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014002:	3b01      	subs	r3, #1
 8014004:	005b      	lsls	r3, r3, #1
 8014006:	68fa      	ldr	r2, [r7, #12]
 8014008:	4413      	add	r3, r2
 801400a:	881b      	ldrh	r3, [r3, #0]
 801400c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801400e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014010:	2b20      	cmp	r3, #32
 8014012:	d002      	beq.n	801401a <create_name+0x18a>
 8014014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014016:	2b2e      	cmp	r3, #46	; 0x2e
 8014018:	d106      	bne.n	8014028 <create_name+0x198>
		di--;
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	3b01      	subs	r3, #1
 801401e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8014020:	697b      	ldr	r3, [r7, #20]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d1ea      	bne.n	8013ffc <create_name+0x16c>
 8014026:	e000      	b.n	801402a <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 8014028:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	005b      	lsls	r3, r3, #1
 801402e:	68fa      	ldr	r2, [r7, #12]
 8014030:	4413      	add	r3, r2
 8014032:	2200      	movs	r2, #0
 8014034:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d101      	bne.n	8014040 <create_name+0x1b0>
 801403c:	2306      	movs	r3, #6
 801403e:	e127      	b.n	8014290 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	3324      	adds	r3, #36	; 0x24
 8014044:	220b      	movs	r2, #11
 8014046:	2120      	movs	r1, #32
 8014048:	4618      	mov	r0, r3
 801404a:	f7fe fc96 	bl	801297a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801404e:	2300      	movs	r3, #0
 8014050:	61bb      	str	r3, [r7, #24]
 8014052:	e002      	b.n	801405a <create_name+0x1ca>
 8014054:	69bb      	ldr	r3, [r7, #24]
 8014056:	3301      	adds	r3, #1
 8014058:	61bb      	str	r3, [r7, #24]
 801405a:	69bb      	ldr	r3, [r7, #24]
 801405c:	005b      	lsls	r3, r3, #1
 801405e:	68fa      	ldr	r2, [r7, #12]
 8014060:	4413      	add	r3, r2
 8014062:	881b      	ldrh	r3, [r3, #0]
 8014064:	2b20      	cmp	r3, #32
 8014066:	d0f5      	beq.n	8014054 <create_name+0x1c4>
 8014068:	69bb      	ldr	r3, [r7, #24]
 801406a:	005b      	lsls	r3, r3, #1
 801406c:	68fa      	ldr	r2, [r7, #12]
 801406e:	4413      	add	r3, r2
 8014070:	881b      	ldrh	r3, [r3, #0]
 8014072:	2b2e      	cmp	r3, #46	; 0x2e
 8014074:	d0ee      	beq.n	8014054 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8014076:	69bb      	ldr	r3, [r7, #24]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d009      	beq.n	8014090 <create_name+0x200>
 801407c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014080:	f043 0303 	orr.w	r3, r3, #3
 8014084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8014088:	e002      	b.n	8014090 <create_name+0x200>
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	3b01      	subs	r3, #1
 801408e:	617b      	str	r3, [r7, #20]
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d009      	beq.n	80140aa <create_name+0x21a>
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801409c:	3b01      	subs	r3, #1
 801409e:	005b      	lsls	r3, r3, #1
 80140a0:	68fa      	ldr	r2, [r7, #12]
 80140a2:	4413      	add	r3, r2
 80140a4:	881b      	ldrh	r3, [r3, #0]
 80140a6:	2b2e      	cmp	r3, #46	; 0x2e
 80140a8:	d1ef      	bne.n	801408a <create_name+0x1fa>

	i = b = 0; ni = 8;
 80140aa:	2300      	movs	r3, #0
 80140ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80140b0:	2300      	movs	r3, #0
 80140b2:	623b      	str	r3, [r7, #32]
 80140b4:	2308      	movs	r3, #8
 80140b6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80140b8:	69bb      	ldr	r3, [r7, #24]
 80140ba:	1c5a      	adds	r2, r3, #1
 80140bc:	61ba      	str	r2, [r7, #24]
 80140be:	005b      	lsls	r3, r3, #1
 80140c0:	68fa      	ldr	r2, [r7, #12]
 80140c2:	4413      	add	r3, r2
 80140c4:	881b      	ldrh	r3, [r3, #0]
 80140c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80140c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	f000 8096 	beq.w	80141fc <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80140d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80140d2:	2b20      	cmp	r3, #32
 80140d4:	d006      	beq.n	80140e4 <create_name+0x254>
 80140d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80140d8:	2b2e      	cmp	r3, #46	; 0x2e
 80140da:	d10a      	bne.n	80140f2 <create_name+0x262>
 80140dc:	69ba      	ldr	r2, [r7, #24]
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d006      	beq.n	80140f2 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 80140e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140e8:	f043 0303 	orr.w	r3, r3, #3
 80140ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80140f0:	e083      	b.n	80141fa <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80140f2:	6a3a      	ldr	r2, [r7, #32]
 80140f4:	69fb      	ldr	r3, [r7, #28]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d203      	bcs.n	8014102 <create_name+0x272>
 80140fa:	69ba      	ldr	r2, [r7, #24]
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	429a      	cmp	r2, r3
 8014100:	d123      	bne.n	801414a <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 8014102:	69fb      	ldr	r3, [r7, #28]
 8014104:	2b0b      	cmp	r3, #11
 8014106:	d106      	bne.n	8014116 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 8014108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801410c:	f043 0303 	orr.w	r3, r3, #3
 8014110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014114:	e075      	b.n	8014202 <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8014116:	69ba      	ldr	r2, [r7, #24]
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	429a      	cmp	r2, r3
 801411c:	d005      	beq.n	801412a <create_name+0x29a>
 801411e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014122:	f043 0303 	orr.w	r3, r3, #3
 8014126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801412a:	69ba      	ldr	r2, [r7, #24]
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	429a      	cmp	r2, r3
 8014130:	d866      	bhi.n	8014200 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8014132:	697b      	ldr	r3, [r7, #20]
 8014134:	61bb      	str	r3, [r7, #24]
 8014136:	2308      	movs	r3, #8
 8014138:	623b      	str	r3, [r7, #32]
 801413a:	230b      	movs	r3, #11
 801413c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801413e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014142:	009b      	lsls	r3, r3, #2
 8014144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014148:	e057      	b.n	80141fa <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801414a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801414c:	2b7f      	cmp	r3, #127	; 0x7f
 801414e:	d914      	bls.n	801417a <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8014150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014152:	2100      	movs	r1, #0
 8014154:	4618      	mov	r0, r3
 8014156:	f001 ffd5 	bl	8016104 <ff_convert>
 801415a:	4603      	mov	r3, r0
 801415c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801415e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014160:	2b00      	cmp	r3, #0
 8014162:	d004      	beq.n	801416e <create_name+0x2de>
 8014164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014166:	3b80      	subs	r3, #128	; 0x80
 8014168:	4a15      	ldr	r2, [pc, #84]	; (80141c0 <create_name+0x330>)
 801416a:	5cd3      	ldrb	r3, [r2, r3]
 801416c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801416e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014172:	f043 0302 	orr.w	r3, r3, #2
 8014176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801417a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801417c:	2b00      	cmp	r3, #0
 801417e:	d007      	beq.n	8014190 <create_name+0x300>
 8014180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014182:	4619      	mov	r1, r3
 8014184:	480f      	ldr	r0, [pc, #60]	; (80141c4 <create_name+0x334>)
 8014186:	f7fe fc39 	bl	80129fc <chk_chr>
 801418a:	4603      	mov	r3, r0
 801418c:	2b00      	cmp	r3, #0
 801418e:	d008      	beq.n	80141a2 <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8014190:	235f      	movs	r3, #95	; 0x5f
 8014192:	84bb      	strh	r3, [r7, #36]	; 0x24
 8014194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014198:	f043 0303 	orr.w	r3, r3, #3
 801419c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80141a0:	e021      	b.n	80141e6 <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80141a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80141a4:	2b40      	cmp	r3, #64	; 0x40
 80141a6:	d90f      	bls.n	80141c8 <create_name+0x338>
 80141a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80141aa:	2b5a      	cmp	r3, #90	; 0x5a
 80141ac:	d80c      	bhi.n	80141c8 <create_name+0x338>
					b |= 2;
 80141ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141b2:	f043 0302 	orr.w	r3, r3, #2
 80141b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80141ba:	e014      	b.n	80141e6 <create_name+0x356>
 80141bc:	08017764 	.word	0x08017764
 80141c0:	0801b434 	.word	0x0801b434
 80141c4:	08017770 	.word	0x08017770
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80141c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80141ca:	2b60      	cmp	r3, #96	; 0x60
 80141cc:	d90b      	bls.n	80141e6 <create_name+0x356>
 80141ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80141d0:	2b7a      	cmp	r3, #122	; 0x7a
 80141d2:	d808      	bhi.n	80141e6 <create_name+0x356>
						b |= 1; w -= 0x20;
 80141d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141d8:	f043 0301 	orr.w	r3, r3, #1
 80141dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80141e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80141e2:	3b20      	subs	r3, #32
 80141e4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80141e6:	6a3b      	ldr	r3, [r7, #32]
 80141e8:	1c5a      	adds	r2, r3, #1
 80141ea:	623a      	str	r2, [r7, #32]
 80141ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80141ee:	b2d1      	uxtb	r1, r2
 80141f0:	687a      	ldr	r2, [r7, #4]
 80141f2:	4413      	add	r3, r2
 80141f4:	460a      	mov	r2, r1
 80141f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80141fa:	e75d      	b.n	80140b8 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 80141fc:	bf00      	nop
 80141fe:	e000      	b.n	8014202 <create_name+0x372>
			if (si > di) break;			/* No extension */
 8014200:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014208:	2be5      	cmp	r3, #229	; 0xe5
 801420a:	d103      	bne.n	8014214 <create_name+0x384>
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2205      	movs	r2, #5
 8014210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8014214:	69fb      	ldr	r3, [r7, #28]
 8014216:	2b08      	cmp	r3, #8
 8014218:	d104      	bne.n	8014224 <create_name+0x394>
 801421a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801421e:	009b      	lsls	r3, r3, #2
 8014220:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8014224:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014228:	f003 030c 	and.w	r3, r3, #12
 801422c:	2b0c      	cmp	r3, #12
 801422e:	d005      	beq.n	801423c <create_name+0x3ac>
 8014230:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014234:	f003 0303 	and.w	r3, r3, #3
 8014238:	2b03      	cmp	r3, #3
 801423a:	d105      	bne.n	8014248 <create_name+0x3b8>
 801423c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014240:	f043 0302 	orr.w	r3, r3, #2
 8014244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8014248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801424c:	f003 0302 	and.w	r3, r3, #2
 8014250:	2b00      	cmp	r3, #0
 8014252:	d117      	bne.n	8014284 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8014254:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014258:	f003 0303 	and.w	r3, r3, #3
 801425c:	2b01      	cmp	r3, #1
 801425e:	d105      	bne.n	801426c <create_name+0x3dc>
 8014260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014264:	f043 0310 	orr.w	r3, r3, #16
 8014268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801426c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014270:	f003 030c 	and.w	r3, r3, #12
 8014274:	2b04      	cmp	r3, #4
 8014276:	d105      	bne.n	8014284 <create_name+0x3f4>
 8014278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801427c:	f043 0308 	orr.w	r3, r3, #8
 8014280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801428a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801428e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8014290:	4618      	mov	r0, r3
 8014292:	3728      	adds	r7, #40	; 0x28
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}

08014298 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b086      	sub	sp, #24
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80142a6:	693b      	ldr	r3, [r7, #16]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	2b2f      	cmp	r3, #47	; 0x2f
 80142b2:	d00b      	beq.n	80142cc <follow_path+0x34>
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	2b5c      	cmp	r3, #92	; 0x5c
 80142ba:	d007      	beq.n	80142cc <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	699a      	ldr	r2, [r3, #24]
 80142c0:	693b      	ldr	r3, [r7, #16]
 80142c2:	609a      	str	r2, [r3, #8]
 80142c4:	e00d      	b.n	80142e2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	3301      	adds	r3, #1
 80142ca:	603b      	str	r3, [r7, #0]
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	781b      	ldrb	r3, [r3, #0]
 80142d0:	2b2f      	cmp	r3, #47	; 0x2f
 80142d2:	d0f8      	beq.n	80142c6 <follow_path+0x2e>
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	2b5c      	cmp	r3, #92	; 0x5c
 80142da:	d0f4      	beq.n	80142c6 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80142dc:	693b      	ldr	r3, [r7, #16]
 80142de:	2200      	movs	r2, #0
 80142e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80142e2:	683b      	ldr	r3, [r7, #0]
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	2b1f      	cmp	r3, #31
 80142e8:	d80a      	bhi.n	8014300 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2280      	movs	r2, #128	; 0x80
 80142ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80142f2:	2100      	movs	r1, #0
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f7ff f8c5 	bl	8013484 <dir_sdi>
 80142fa:	4603      	mov	r3, r0
 80142fc:	75fb      	strb	r3, [r7, #23]
 80142fe:	e056      	b.n	80143ae <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014300:	463b      	mov	r3, r7
 8014302:	4619      	mov	r1, r3
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f7ff fdc3 	bl	8013e90 <create_name>
 801430a:	4603      	mov	r3, r0
 801430c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801430e:	7dfb      	ldrb	r3, [r7, #23]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d147      	bne.n	80143a4 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014314:	6878      	ldr	r0, [r7, #4]
 8014316:	f7ff fc03 	bl	8013b20 <dir_find>
 801431a:	4603      	mov	r3, r0
 801431c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014324:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014326:	7dfb      	ldrb	r3, [r7, #23]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d01b      	beq.n	8014364 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801432c:	7dfb      	ldrb	r3, [r7, #23]
 801432e:	2b04      	cmp	r3, #4
 8014330:	d13a      	bne.n	80143a8 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8014332:	7afb      	ldrb	r3, [r7, #11]
 8014334:	f003 0320 	and.w	r3, r3, #32
 8014338:	2b00      	cmp	r3, #0
 801433a:	d00b      	beq.n	8014354 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801433c:	7afb      	ldrb	r3, [r7, #11]
 801433e:	f003 0304 	and.w	r3, r3, #4
 8014342:	2b00      	cmp	r3, #0
 8014344:	d02c      	beq.n	80143a0 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2280      	movs	r2, #128	; 0x80
 801434a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801434e:	2300      	movs	r3, #0
 8014350:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8014352:	e029      	b.n	80143a8 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014354:	7afb      	ldrb	r3, [r7, #11]
 8014356:	f003 0304 	and.w	r3, r3, #4
 801435a:	2b00      	cmp	r3, #0
 801435c:	d124      	bne.n	80143a8 <follow_path+0x110>
 801435e:	2305      	movs	r3, #5
 8014360:	75fb      	strb	r3, [r7, #23]
				break;
 8014362:	e021      	b.n	80143a8 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014364:	7afb      	ldrb	r3, [r7, #11]
 8014366:	f003 0304 	and.w	r3, r3, #4
 801436a:	2b00      	cmp	r3, #0
 801436c:	d11e      	bne.n	80143ac <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	799b      	ldrb	r3, [r3, #6]
 8014372:	f003 0310 	and.w	r3, r3, #16
 8014376:	2b00      	cmp	r3, #0
 8014378:	d102      	bne.n	8014380 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801437a:	2305      	movs	r3, #5
 801437c:	75fb      	strb	r3, [r7, #23]
 801437e:	e016      	b.n	80143ae <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	695b      	ldr	r3, [r3, #20]
 801438a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801438e:	4413      	add	r3, r2
 8014390:	4619      	mov	r1, r3
 8014392:	68f8      	ldr	r0, [r7, #12]
 8014394:	f7ff f9fd 	bl	8013792 <ld_clust>
 8014398:	4602      	mov	r2, r0
 801439a:	693b      	ldr	r3, [r7, #16]
 801439c:	609a      	str	r2, [r3, #8]
 801439e:	e7af      	b.n	8014300 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80143a0:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80143a2:	e7ad      	b.n	8014300 <follow_path+0x68>
			if (res != FR_OK) break;
 80143a4:	bf00      	nop
 80143a6:	e002      	b.n	80143ae <follow_path+0x116>
				break;
 80143a8:	bf00      	nop
 80143aa:	e000      	b.n	80143ae <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80143ac:	bf00      	nop
			}
		}
	}

	return res;
 80143ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3718      	adds	r7, #24
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80143b8:	b480      	push	{r7}
 80143ba:	b087      	sub	sp, #28
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80143c0:	f04f 33ff 	mov.w	r3, #4294967295
 80143c4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d031      	beq.n	8014432 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	617b      	str	r3, [r7, #20]
 80143d4:	e002      	b.n	80143dc <get_ldnumber+0x24>
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	3301      	adds	r3, #1
 80143da:	617b      	str	r3, [r7, #20]
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	2b1f      	cmp	r3, #31
 80143e2:	d903      	bls.n	80143ec <get_ldnumber+0x34>
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	2b3a      	cmp	r3, #58	; 0x3a
 80143ea:	d1f4      	bne.n	80143d6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	781b      	ldrb	r3, [r3, #0]
 80143f0:	2b3a      	cmp	r3, #58	; 0x3a
 80143f2:	d11c      	bne.n	801442e <get_ldnumber+0x76>
			tp = *path;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	1c5a      	adds	r2, r3, #1
 80143fe:	60fa      	str	r2, [r7, #12]
 8014400:	781b      	ldrb	r3, [r3, #0]
 8014402:	3b30      	subs	r3, #48	; 0x30
 8014404:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	2b09      	cmp	r3, #9
 801440a:	d80e      	bhi.n	801442a <get_ldnumber+0x72>
 801440c:	68fa      	ldr	r2, [r7, #12]
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	429a      	cmp	r2, r3
 8014412:	d10a      	bne.n	801442a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d107      	bne.n	801442a <get_ldnumber+0x72>
					vol = (int)i;
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	3301      	adds	r3, #1
 8014422:	617b      	str	r3, [r7, #20]
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	697a      	ldr	r2, [r7, #20]
 8014428:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	e002      	b.n	8014434 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801442e:	2300      	movs	r3, #0
 8014430:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014432:	693b      	ldr	r3, [r7, #16]
}
 8014434:	4618      	mov	r0, r3
 8014436:	371c      	adds	r7, #28
 8014438:	46bd      	mov	sp, r7
 801443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443e:	4770      	bx	lr

08014440 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b082      	sub	sp, #8
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	2200      	movs	r2, #0
 801444e:	70da      	strb	r2, [r3, #3]
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f04f 32ff 	mov.w	r2, #4294967295
 8014456:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014458:	6839      	ldr	r1, [r7, #0]
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f7fe fc9a 	bl	8012d94 <move_window>
 8014460:	4603      	mov	r3, r0
 8014462:	2b00      	cmp	r3, #0
 8014464:	d001      	beq.n	801446a <check_fs+0x2a>
 8014466:	2304      	movs	r3, #4
 8014468:	e038      	b.n	80144dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	3338      	adds	r3, #56	; 0x38
 801446e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014472:	4618      	mov	r0, r3
 8014474:	f7fe f9de 	bl	8012834 <ld_word>
 8014478:	4603      	mov	r3, r0
 801447a:	461a      	mov	r2, r3
 801447c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014480:	429a      	cmp	r2, r3
 8014482:	d001      	beq.n	8014488 <check_fs+0x48>
 8014484:	2303      	movs	r3, #3
 8014486:	e029      	b.n	80144dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801448e:	2be9      	cmp	r3, #233	; 0xe9
 8014490:	d009      	beq.n	80144a6 <check_fs+0x66>
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014498:	2beb      	cmp	r3, #235	; 0xeb
 801449a:	d11e      	bne.n	80144da <check_fs+0x9a>
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80144a2:	2b90      	cmp	r3, #144	; 0x90
 80144a4:	d119      	bne.n	80144da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	3338      	adds	r3, #56	; 0x38
 80144aa:	3336      	adds	r3, #54	; 0x36
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7fe f9d9 	bl	8012864 <ld_dword>
 80144b2:	4603      	mov	r3, r0
 80144b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80144b8:	4a0a      	ldr	r2, [pc, #40]	; (80144e4 <check_fs+0xa4>)
 80144ba:	4293      	cmp	r3, r2
 80144bc:	d101      	bne.n	80144c2 <check_fs+0x82>
 80144be:	2300      	movs	r3, #0
 80144c0:	e00c      	b.n	80144dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	3338      	adds	r3, #56	; 0x38
 80144c6:	3352      	adds	r3, #82	; 0x52
 80144c8:	4618      	mov	r0, r3
 80144ca:	f7fe f9cb 	bl	8012864 <ld_dword>
 80144ce:	4602      	mov	r2, r0
 80144d0:	4b05      	ldr	r3, [pc, #20]	; (80144e8 <check_fs+0xa8>)
 80144d2:	429a      	cmp	r2, r3
 80144d4:	d101      	bne.n	80144da <check_fs+0x9a>
 80144d6:	2300      	movs	r3, #0
 80144d8:	e000      	b.n	80144dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80144da:	2302      	movs	r3, #2
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3708      	adds	r7, #8
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}
 80144e4:	00544146 	.word	0x00544146
 80144e8:	33544146 	.word	0x33544146

080144ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b096      	sub	sp, #88	; 0x58
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	60f8      	str	r0, [r7, #12]
 80144f4:	60b9      	str	r1, [r7, #8]
 80144f6:	4613      	mov	r3, r2
 80144f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	2200      	movs	r2, #0
 80144fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014500:	68f8      	ldr	r0, [r7, #12]
 8014502:	f7ff ff59 	bl	80143b8 <get_ldnumber>
 8014506:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801450a:	2b00      	cmp	r3, #0
 801450c:	da01      	bge.n	8014512 <find_volume+0x26>
 801450e:	230b      	movs	r3, #11
 8014510:	e234      	b.n	801497c <find_volume+0x490>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014512:	4aa8      	ldr	r2, [pc, #672]	; (80147b4 <find_volume+0x2c8>)
 8014514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801451a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801451e:	2b00      	cmp	r3, #0
 8014520:	d101      	bne.n	8014526 <find_volume+0x3a>
 8014522:	230c      	movs	r3, #12
 8014524:	e22a      	b.n	801497c <find_volume+0x490>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801452a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801452c:	79fb      	ldrb	r3, [r7, #7]
 801452e:	f023 0301 	bic.w	r3, r3, #1
 8014532:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d01a      	beq.n	8014572 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801453e:	785b      	ldrb	r3, [r3, #1]
 8014540:	4618      	mov	r0, r3
 8014542:	f7fe f8d9 	bl	80126f8 <disk_status>
 8014546:	4603      	mov	r3, r0
 8014548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801454c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014550:	f003 0301 	and.w	r3, r3, #1
 8014554:	2b00      	cmp	r3, #0
 8014556:	d10c      	bne.n	8014572 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014558:	79fb      	ldrb	r3, [r7, #7]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d007      	beq.n	801456e <find_volume+0x82>
 801455e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014562:	f003 0304 	and.w	r3, r3, #4
 8014566:	2b00      	cmp	r3, #0
 8014568:	d001      	beq.n	801456e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801456a:	230a      	movs	r3, #10
 801456c:	e206      	b.n	801497c <find_volume+0x490>
			}
			return FR_OK;				/* The file system object is valid */
 801456e:	2300      	movs	r3, #0
 8014570:	e204      	b.n	801497c <find_volume+0x490>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014574:	2200      	movs	r2, #0
 8014576:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801457a:	b2da      	uxtb	r2, r3
 801457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801457e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014582:	785b      	ldrb	r3, [r3, #1]
 8014584:	4618      	mov	r0, r3
 8014586:	f7fe f8d1 	bl	801272c <disk_initialize>
 801458a:	4603      	mov	r3, r0
 801458c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014590:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014594:	f003 0301 	and.w	r3, r3, #1
 8014598:	2b00      	cmp	r3, #0
 801459a:	d001      	beq.n	80145a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801459c:	2303      	movs	r3, #3
 801459e:	e1ed      	b.n	801497c <find_volume+0x490>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80145a0:	79fb      	ldrb	r3, [r7, #7]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d007      	beq.n	80145b6 <find_volume+0xca>
 80145a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145aa:	f003 0304 	and.w	r3, r3, #4
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d001      	beq.n	80145b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80145b2:	230a      	movs	r3, #10
 80145b4:	e1e2      	b.n	801497c <find_volume+0x490>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80145b6:	2300      	movs	r3, #0
 80145b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80145ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80145bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80145be:	f7ff ff3f 	bl	8014440 <check_fs>
 80145c2:	4603      	mov	r3, r0
 80145c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80145c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145cc:	2b02      	cmp	r3, #2
 80145ce:	d14b      	bne.n	8014668 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80145d0:	2300      	movs	r3, #0
 80145d2:	643b      	str	r3, [r7, #64]	; 0x40
 80145d4:	e01f      	b.n	8014616 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80145d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145d8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80145dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145de:	011b      	lsls	r3, r3, #4
 80145e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80145e4:	4413      	add	r3, r2
 80145e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80145e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ea:	3304      	adds	r3, #4
 80145ec:	781b      	ldrb	r3, [r3, #0]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d006      	beq.n	8014600 <find_volume+0x114>
 80145f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f4:	3308      	adds	r3, #8
 80145f6:	4618      	mov	r0, r3
 80145f8:	f7fe f934 	bl	8012864 <ld_dword>
 80145fc:	4602      	mov	r2, r0
 80145fe:	e000      	b.n	8014602 <find_volume+0x116>
 8014600:	2200      	movs	r2, #0
 8014602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014604:	009b      	lsls	r3, r3, #2
 8014606:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801460a:	440b      	add	r3, r1
 801460c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014612:	3301      	adds	r3, #1
 8014614:	643b      	str	r3, [r7, #64]	; 0x40
 8014616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014618:	2b03      	cmp	r3, #3
 801461a:	d9dc      	bls.n	80145d6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801461c:	2300      	movs	r3, #0
 801461e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014622:	2b00      	cmp	r3, #0
 8014624:	d002      	beq.n	801462c <find_volume+0x140>
 8014626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014628:	3b01      	subs	r3, #1
 801462a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801462c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801462e:	009b      	lsls	r3, r3, #2
 8014630:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014634:	4413      	add	r3, r2
 8014636:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801463a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801463c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801463e:	2b00      	cmp	r3, #0
 8014640:	d005      	beq.n	801464e <find_volume+0x162>
 8014642:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014646:	f7ff fefb 	bl	8014440 <check_fs>
 801464a:	4603      	mov	r3, r0
 801464c:	e000      	b.n	8014650 <find_volume+0x164>
 801464e:	2303      	movs	r3, #3
 8014650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014658:	2b01      	cmp	r3, #1
 801465a:	d905      	bls.n	8014668 <find_volume+0x17c>
 801465c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801465e:	3301      	adds	r3, #1
 8014660:	643b      	str	r3, [r7, #64]	; 0x40
 8014662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014664:	2b03      	cmp	r3, #3
 8014666:	d9e1      	bls.n	801462c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014668:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801466c:	2b04      	cmp	r3, #4
 801466e:	d101      	bne.n	8014674 <find_volume+0x188>
 8014670:	2301      	movs	r3, #1
 8014672:	e183      	b.n	801497c <find_volume+0x490>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014674:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014678:	2b01      	cmp	r3, #1
 801467a:	d901      	bls.n	8014680 <find_volume+0x194>
 801467c:	230d      	movs	r3, #13
 801467e:	e17d      	b.n	801497c <find_volume+0x490>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014682:	3338      	adds	r3, #56	; 0x38
 8014684:	330b      	adds	r3, #11
 8014686:	4618      	mov	r0, r3
 8014688:	f7fe f8d4 	bl	8012834 <ld_word>
 801468c:	4603      	mov	r3, r0
 801468e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014692:	d001      	beq.n	8014698 <find_volume+0x1ac>
 8014694:	230d      	movs	r3, #13
 8014696:	e171      	b.n	801497c <find_volume+0x490>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801469a:	3338      	adds	r3, #56	; 0x38
 801469c:	3316      	adds	r3, #22
 801469e:	4618      	mov	r0, r3
 80146a0:	f7fe f8c8 	bl	8012834 <ld_word>
 80146a4:	4603      	mov	r3, r0
 80146a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80146a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d106      	bne.n	80146bc <find_volume+0x1d0>
 80146ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146b0:	3338      	adds	r3, #56	; 0x38
 80146b2:	3324      	adds	r3, #36	; 0x24
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7fe f8d5 	bl	8012864 <ld_dword>
 80146ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80146bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80146c0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80146c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146c4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80146c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80146cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ce:	789b      	ldrb	r3, [r3, #2]
 80146d0:	2b01      	cmp	r3, #1
 80146d2:	d005      	beq.n	80146e0 <find_volume+0x1f4>
 80146d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146d6:	789b      	ldrb	r3, [r3, #2]
 80146d8:	2b02      	cmp	r3, #2
 80146da:	d001      	beq.n	80146e0 <find_volume+0x1f4>
 80146dc:	230d      	movs	r3, #13
 80146de:	e14d      	b.n	801497c <find_volume+0x490>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80146e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e2:	789b      	ldrb	r3, [r3, #2]
 80146e4:	461a      	mov	r2, r3
 80146e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146e8:	fb02 f303 	mul.w	r3, r2, r3
 80146ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80146ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80146f4:	b29a      	uxth	r2, r3
 80146f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80146fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fc:	895b      	ldrh	r3, [r3, #10]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d008      	beq.n	8014714 <find_volume+0x228>
 8014702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014704:	895b      	ldrh	r3, [r3, #10]
 8014706:	461a      	mov	r2, r3
 8014708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801470a:	895b      	ldrh	r3, [r3, #10]
 801470c:	3b01      	subs	r3, #1
 801470e:	4013      	ands	r3, r2
 8014710:	2b00      	cmp	r3, #0
 8014712:	d001      	beq.n	8014718 <find_volume+0x22c>
 8014714:	230d      	movs	r3, #13
 8014716:	e131      	b.n	801497c <find_volume+0x490>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801471a:	3338      	adds	r3, #56	; 0x38
 801471c:	3311      	adds	r3, #17
 801471e:	4618      	mov	r0, r3
 8014720:	f7fe f888 	bl	8012834 <ld_word>
 8014724:	4603      	mov	r3, r0
 8014726:	461a      	mov	r2, r3
 8014728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801472a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801472e:	891b      	ldrh	r3, [r3, #8]
 8014730:	f003 030f 	and.w	r3, r3, #15
 8014734:	b29b      	uxth	r3, r3
 8014736:	2b00      	cmp	r3, #0
 8014738:	d001      	beq.n	801473e <find_volume+0x252>
 801473a:	230d      	movs	r3, #13
 801473c:	e11e      	b.n	801497c <find_volume+0x490>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014740:	3338      	adds	r3, #56	; 0x38
 8014742:	3313      	adds	r3, #19
 8014744:	4618      	mov	r0, r3
 8014746:	f7fe f875 	bl	8012834 <ld_word>
 801474a:	4603      	mov	r3, r0
 801474c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801474e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014750:	2b00      	cmp	r3, #0
 8014752:	d106      	bne.n	8014762 <find_volume+0x276>
 8014754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014756:	3338      	adds	r3, #56	; 0x38
 8014758:	3320      	adds	r3, #32
 801475a:	4618      	mov	r0, r3
 801475c:	f7fe f882 	bl	8012864 <ld_dword>
 8014760:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014764:	3338      	adds	r3, #56	; 0x38
 8014766:	330e      	adds	r3, #14
 8014768:	4618      	mov	r0, r3
 801476a:	f7fe f863 	bl	8012834 <ld_word>
 801476e:	4603      	mov	r3, r0
 8014770:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014772:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014774:	2b00      	cmp	r3, #0
 8014776:	d101      	bne.n	801477c <find_volume+0x290>
 8014778:	230d      	movs	r3, #13
 801477a:	e0ff      	b.n	801497c <find_volume+0x490>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801477c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801477e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014780:	4413      	add	r3, r2
 8014782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014784:	8912      	ldrh	r2, [r2, #8]
 8014786:	0912      	lsrs	r2, r2, #4
 8014788:	b292      	uxth	r2, r2
 801478a:	4413      	add	r3, r2
 801478c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801478e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014792:	429a      	cmp	r2, r3
 8014794:	d201      	bcs.n	801479a <find_volume+0x2ae>
 8014796:	230d      	movs	r3, #13
 8014798:	e0f0      	b.n	801497c <find_volume+0x490>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801479a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801479e:	1ad3      	subs	r3, r2, r3
 80147a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147a2:	8952      	ldrh	r2, [r2, #10]
 80147a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80147a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80147aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d103      	bne.n	80147b8 <find_volume+0x2cc>
 80147b0:	230d      	movs	r3, #13
 80147b2:	e0e3      	b.n	801497c <find_volume+0x490>
 80147b4:	20000c04 	.word	0x20000c04
		fmt = FS_FAT32;
 80147b8:	2303      	movs	r3, #3
 80147ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80147be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80147c4:	4293      	cmp	r3, r2
 80147c6:	d802      	bhi.n	80147ce <find_volume+0x2e2>
 80147c8:	2302      	movs	r3, #2
 80147ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80147ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80147d4:	4293      	cmp	r3, r2
 80147d6:	d802      	bhi.n	80147de <find_volume+0x2f2>
 80147d8:	2301      	movs	r3, #1
 80147da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80147de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e0:	1c9a      	adds	r2, r3, #2
 80147e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80147e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80147ea:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80147ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80147ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147f0:	441a      	add	r2, r3
 80147f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80147f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80147f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147fa:	441a      	add	r2, r3
 80147fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147fe:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8014800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014804:	2b03      	cmp	r3, #3
 8014806:	d11e      	bne.n	8014846 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801480a:	3338      	adds	r3, #56	; 0x38
 801480c:	332a      	adds	r3, #42	; 0x2a
 801480e:	4618      	mov	r0, r3
 8014810:	f7fe f810 	bl	8012834 <ld_word>
 8014814:	4603      	mov	r3, r0
 8014816:	2b00      	cmp	r3, #0
 8014818:	d001      	beq.n	801481e <find_volume+0x332>
 801481a:	230d      	movs	r3, #13
 801481c:	e0ae      	b.n	801497c <find_volume+0x490>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014820:	891b      	ldrh	r3, [r3, #8]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d001      	beq.n	801482a <find_volume+0x33e>
 8014826:	230d      	movs	r3, #13
 8014828:	e0a8      	b.n	801497c <find_volume+0x490>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801482c:	3338      	adds	r3, #56	; 0x38
 801482e:	332c      	adds	r3, #44	; 0x2c
 8014830:	4618      	mov	r0, r3
 8014832:	f7fe f817 	bl	8012864 <ld_dword>
 8014836:	4602      	mov	r2, r0
 8014838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801483a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801483e:	69db      	ldr	r3, [r3, #28]
 8014840:	009b      	lsls	r3, r3, #2
 8014842:	647b      	str	r3, [r7, #68]	; 0x44
 8014844:	e01f      	b.n	8014886 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014848:	891b      	ldrh	r3, [r3, #8]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d101      	bne.n	8014852 <find_volume+0x366>
 801484e:	230d      	movs	r3, #13
 8014850:	e094      	b.n	801497c <find_volume+0x490>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014858:	441a      	add	r2, r3
 801485a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801485c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801485e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014862:	2b02      	cmp	r3, #2
 8014864:	d103      	bne.n	801486e <find_volume+0x382>
 8014866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014868:	69db      	ldr	r3, [r3, #28]
 801486a:	005b      	lsls	r3, r3, #1
 801486c:	e00a      	b.n	8014884 <find_volume+0x398>
 801486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014870:	69da      	ldr	r2, [r3, #28]
 8014872:	4613      	mov	r3, r2
 8014874:	005b      	lsls	r3, r3, #1
 8014876:	4413      	add	r3, r2
 8014878:	085a      	lsrs	r2, r3, #1
 801487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801487c:	69db      	ldr	r3, [r3, #28]
 801487e:	f003 0301 	and.w	r3, r3, #1
 8014882:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014884:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014888:	6a1a      	ldr	r2, [r3, #32]
 801488a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801488c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014890:	0a5b      	lsrs	r3, r3, #9
 8014892:	429a      	cmp	r2, r3
 8014894:	d201      	bcs.n	801489a <find_volume+0x3ae>
 8014896:	230d      	movs	r3, #13
 8014898:	e070      	b.n	801497c <find_volume+0x490>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801489c:	f04f 32ff 	mov.w	r2, #4294967295
 80148a0:	615a      	str	r2, [r3, #20]
 80148a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a4:	695a      	ldr	r2, [r3, #20]
 80148a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80148aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ac:	2280      	movs	r2, #128	; 0x80
 80148ae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80148b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148b4:	2b03      	cmp	r3, #3
 80148b6:	d149      	bne.n	801494c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80148b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ba:	3338      	adds	r3, #56	; 0x38
 80148bc:	3330      	adds	r3, #48	; 0x30
 80148be:	4618      	mov	r0, r3
 80148c0:	f7fd ffb8 	bl	8012834 <ld_word>
 80148c4:	4603      	mov	r3, r0
 80148c6:	2b01      	cmp	r3, #1
 80148c8:	d140      	bne.n	801494c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80148ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148cc:	3301      	adds	r3, #1
 80148ce:	4619      	mov	r1, r3
 80148d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80148d2:	f7fe fa5f 	bl	8012d94 <move_window>
 80148d6:	4603      	mov	r3, r0
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d137      	bne.n	801494c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80148dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148de:	2200      	movs	r2, #0
 80148e0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80148e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e4:	3338      	adds	r3, #56	; 0x38
 80148e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80148ea:	4618      	mov	r0, r3
 80148ec:	f7fd ffa2 	bl	8012834 <ld_word>
 80148f0:	4603      	mov	r3, r0
 80148f2:	461a      	mov	r2, r3
 80148f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80148f8:	429a      	cmp	r2, r3
 80148fa:	d127      	bne.n	801494c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80148fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148fe:	3338      	adds	r3, #56	; 0x38
 8014900:	4618      	mov	r0, r3
 8014902:	f7fd ffaf 	bl	8012864 <ld_dword>
 8014906:	4602      	mov	r2, r0
 8014908:	4b1e      	ldr	r3, [pc, #120]	; (8014984 <find_volume+0x498>)
 801490a:	429a      	cmp	r2, r3
 801490c:	d11e      	bne.n	801494c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014910:	3338      	adds	r3, #56	; 0x38
 8014912:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014916:	4618      	mov	r0, r3
 8014918:	f7fd ffa4 	bl	8012864 <ld_dword>
 801491c:	4602      	mov	r2, r0
 801491e:	4b1a      	ldr	r3, [pc, #104]	; (8014988 <find_volume+0x49c>)
 8014920:	429a      	cmp	r2, r3
 8014922:	d113      	bne.n	801494c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014926:	3338      	adds	r3, #56	; 0x38
 8014928:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801492c:	4618      	mov	r0, r3
 801492e:	f7fd ff99 	bl	8012864 <ld_dword>
 8014932:	4602      	mov	r2, r0
 8014934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014936:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801493a:	3338      	adds	r3, #56	; 0x38
 801493c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014940:	4618      	mov	r0, r3
 8014942:	f7fd ff8f 	bl	8012864 <ld_dword>
 8014946:	4602      	mov	r2, r0
 8014948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801494a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801494e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014952:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014954:	4b0d      	ldr	r3, [pc, #52]	; (801498c <find_volume+0x4a0>)
 8014956:	881b      	ldrh	r3, [r3, #0]
 8014958:	3301      	adds	r3, #1
 801495a:	b29a      	uxth	r2, r3
 801495c:	4b0b      	ldr	r3, [pc, #44]	; (801498c <find_volume+0x4a0>)
 801495e:	801a      	strh	r2, [r3, #0]
 8014960:	4b0a      	ldr	r3, [pc, #40]	; (801498c <find_volume+0x4a0>)
 8014962:	881a      	ldrh	r2, [r3, #0]
 8014964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014966:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8014968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801496a:	4a09      	ldr	r2, [pc, #36]	; (8014990 <find_volume+0x4a4>)
 801496c:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014970:	2200      	movs	r2, #0
 8014972:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014974:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014976:	f7fe f9a5 	bl	8012cc4 <clear_lock>
#endif
	return FR_OK;
 801497a:	2300      	movs	r3, #0
}
 801497c:	4618      	mov	r0, r3
 801497e:	3758      	adds	r7, #88	; 0x58
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	41615252 	.word	0x41615252
 8014988:	61417272 	.word	0x61417272
 801498c:	20000c08 	.word	0x20000c08
 8014990:	20000c2c 	.word	0x20000c2c

08014994 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b084      	sub	sp, #16
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
 801499c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801499e:	2309      	movs	r3, #9
 80149a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d01c      	beq.n	80149e2 <validate+0x4e>
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d018      	beq.n	80149e2 <validate+0x4e>
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	781b      	ldrb	r3, [r3, #0]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d013      	beq.n	80149e2 <validate+0x4e>
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	889a      	ldrh	r2, [r3, #4]
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	88db      	ldrh	r3, [r3, #6]
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d10c      	bne.n	80149e2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	785b      	ldrb	r3, [r3, #1]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7fd fe92 	bl	80126f8 <disk_status>
 80149d4:	4603      	mov	r3, r0
 80149d6:	f003 0301 	and.w	r3, r3, #1
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d101      	bne.n	80149e2 <validate+0x4e>
			res = FR_OK;
 80149de:	2300      	movs	r3, #0
 80149e0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80149e2:	7bfb      	ldrb	r3, [r7, #15]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d102      	bne.n	80149ee <validate+0x5a>
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	e000      	b.n	80149f0 <validate+0x5c>
 80149ee:	2300      	movs	r3, #0
 80149f0:	683a      	ldr	r2, [r7, #0]
 80149f2:	6013      	str	r3, [r2, #0]
	return res;
 80149f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80149f6:	4618      	mov	r0, r3
 80149f8:	3710      	adds	r7, #16
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}
	...

08014a00 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b088      	sub	sp, #32
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	60f8      	str	r0, [r7, #12]
 8014a08:	60b9      	str	r1, [r7, #8]
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014a12:	f107 0310 	add.w	r3, r7, #16
 8014a16:	4618      	mov	r0, r3
 8014a18:	f7ff fcce 	bl	80143b8 <get_ldnumber>
 8014a1c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014a1e:	69fb      	ldr	r3, [r7, #28]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	da01      	bge.n	8014a28 <f_mount+0x28>
 8014a24:	230b      	movs	r3, #11
 8014a26:	e02b      	b.n	8014a80 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014a28:	4a17      	ldr	r2, [pc, #92]	; (8014a88 <f_mount+0x88>)
 8014a2a:	69fb      	ldr	r3, [r7, #28]
 8014a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a30:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014a32:	69bb      	ldr	r3, [r7, #24]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d005      	beq.n	8014a44 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014a38:	69b8      	ldr	r0, [r7, #24]
 8014a3a:	f7fe f943 	bl	8012cc4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014a3e:	69bb      	ldr	r3, [r7, #24]
 8014a40:	2200      	movs	r2, #0
 8014a42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d002      	beq.n	8014a50 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014a50:	68fa      	ldr	r2, [r7, #12]
 8014a52:	490d      	ldr	r1, [pc, #52]	; (8014a88 <f_mount+0x88>)
 8014a54:	69fb      	ldr	r3, [r7, #28]
 8014a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d002      	beq.n	8014a66 <f_mount+0x66>
 8014a60:	79fb      	ldrb	r3, [r7, #7]
 8014a62:	2b01      	cmp	r3, #1
 8014a64:	d001      	beq.n	8014a6a <f_mount+0x6a>
 8014a66:	2300      	movs	r3, #0
 8014a68:	e00a      	b.n	8014a80 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014a6a:	f107 010c 	add.w	r1, r7, #12
 8014a6e:	f107 0308 	add.w	r3, r7, #8
 8014a72:	2200      	movs	r2, #0
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7ff fd39 	bl	80144ec <find_volume>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a80:	4618      	mov	r0, r3
 8014a82:	3720      	adds	r7, #32
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}
 8014a88:	20000c04 	.word	0x20000c04

08014a8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b09a      	sub	sp, #104	; 0x68
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	60f8      	str	r0, [r7, #12]
 8014a94:	60b9      	str	r1, [r7, #8]
 8014a96:	4613      	mov	r3, r2
 8014a98:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d101      	bne.n	8014aa4 <f_open+0x18>
 8014aa0:	2309      	movs	r3, #9
 8014aa2:	e1ad      	b.n	8014e00 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014aa4:	79fb      	ldrb	r3, [r7, #7]
 8014aa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014aaa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014aac:	79fa      	ldrb	r2, [r7, #7]
 8014aae:	f107 0114 	add.w	r1, r7, #20
 8014ab2:	f107 0308 	add.w	r3, r7, #8
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7ff fd18 	bl	80144ec <find_volume>
 8014abc:	4603      	mov	r3, r0
 8014abe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8014ac2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	f040 8191 	bne.w	8014dee <f_open+0x362>
		dj.obj.fs = fs;
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014ad0:	68ba      	ldr	r2, [r7, #8]
 8014ad2:	f107 0318 	add.w	r3, r7, #24
 8014ad6:	4611      	mov	r1, r2
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7ff fbdd 	bl	8014298 <follow_path>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014ae4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d11a      	bne.n	8014b22 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014aec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014af0:	b25b      	sxtb	r3, r3
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	da03      	bge.n	8014afe <f_open+0x72>
				res = FR_INVALID_NAME;
 8014af6:	2306      	movs	r3, #6
 8014af8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014afc:	e011      	b.n	8014b22 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014afe:	79fb      	ldrb	r3, [r7, #7]
 8014b00:	f023 0301 	bic.w	r3, r3, #1
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	bf14      	ite	ne
 8014b08:	2301      	movne	r3, #1
 8014b0a:	2300      	moveq	r3, #0
 8014b0c:	b2db      	uxtb	r3, r3
 8014b0e:	461a      	mov	r2, r3
 8014b10:	f107 0318 	add.w	r3, r7, #24
 8014b14:	4611      	mov	r1, r2
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7fd ff8c 	bl	8012a34 <chk_lock>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014b22:	79fb      	ldrb	r3, [r7, #7]
 8014b24:	f003 031c 	and.w	r3, r3, #28
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d07f      	beq.n	8014c2c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014b2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d017      	beq.n	8014b64 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014b34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014b38:	2b04      	cmp	r3, #4
 8014b3a:	d10e      	bne.n	8014b5a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014b3c:	f7fd ffd6 	bl	8012aec <enq_lock>
 8014b40:	4603      	mov	r3, r0
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d006      	beq.n	8014b54 <f_open+0xc8>
 8014b46:	f107 0318 	add.w	r3, r7, #24
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f7ff f8a8 	bl	8013ca0 <dir_register>
 8014b50:	4603      	mov	r3, r0
 8014b52:	e000      	b.n	8014b56 <f_open+0xca>
 8014b54:	2312      	movs	r3, #18
 8014b56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014b5a:	79fb      	ldrb	r3, [r7, #7]
 8014b5c:	f043 0308 	orr.w	r3, r3, #8
 8014b60:	71fb      	strb	r3, [r7, #7]
 8014b62:	e010      	b.n	8014b86 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014b64:	7fbb      	ldrb	r3, [r7, #30]
 8014b66:	f003 0311 	and.w	r3, r3, #17
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d003      	beq.n	8014b76 <f_open+0xea>
					res = FR_DENIED;
 8014b6e:	2307      	movs	r3, #7
 8014b70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014b74:	e007      	b.n	8014b86 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014b76:	79fb      	ldrb	r3, [r7, #7]
 8014b78:	f003 0304 	and.w	r3, r3, #4
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d002      	beq.n	8014b86 <f_open+0xfa>
 8014b80:	2308      	movs	r3, #8
 8014b82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014b86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d168      	bne.n	8014c60 <f_open+0x1d4>
 8014b8e:	79fb      	ldrb	r3, [r7, #7]
 8014b90:	f003 0308 	and.w	r3, r3, #8
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d063      	beq.n	8014c60 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014b98:	f7f7 fedc 	bl	800c954 <get_fattime>
 8014b9c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ba0:	330e      	adds	r3, #14
 8014ba2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f7fd fe9b 	bl	80128e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bac:	3316      	adds	r3, #22
 8014bae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7fd fe95 	bl	80128e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb8:	330b      	adds	r3, #11
 8014bba:	2220      	movs	r2, #32
 8014bbc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014bbe:	697b      	ldr	r3, [r7, #20]
 8014bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014bc2:	4611      	mov	r1, r2
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7fe fde4 	bl	8013792 <ld_clust>
 8014bca:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014bcc:	697b      	ldr	r3, [r7, #20]
 8014bce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f7fe fdfc 	bl	80137d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bda:	331c      	adds	r3, #28
 8014bdc:	2100      	movs	r1, #0
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fd fe7e 	bl	80128e0 <st_dword>
					fs->wflag = 1;
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	2201      	movs	r2, #1
 8014be8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d037      	beq.n	8014c60 <f_open+0x1d4>
						dw = fs->winsect;
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bf4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8014bf6:	f107 0318 	add.w	r3, r7, #24
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f7fe fb0f 	bl	8013222 <remove_chain>
 8014c04:	4603      	mov	r3, r0
 8014c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8014c0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d126      	bne.n	8014c60 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014c12:	697b      	ldr	r3, [r7, #20]
 8014c14:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7fe f8bc 	bl	8012d94 <move_window>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014c22:	697b      	ldr	r3, [r7, #20]
 8014c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c26:	3a01      	subs	r2, #1
 8014c28:	611a      	str	r2, [r3, #16]
 8014c2a:	e019      	b.n	8014c60 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014c2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d115      	bne.n	8014c60 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014c34:	7fbb      	ldrb	r3, [r7, #30]
 8014c36:	f003 0310 	and.w	r3, r3, #16
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d003      	beq.n	8014c46 <f_open+0x1ba>
					res = FR_NO_FILE;
 8014c3e:	2304      	movs	r3, #4
 8014c40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014c44:	e00c      	b.n	8014c60 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014c46:	79fb      	ldrb	r3, [r7, #7]
 8014c48:	f003 0302 	and.w	r3, r3, #2
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d007      	beq.n	8014c60 <f_open+0x1d4>
 8014c50:	7fbb      	ldrb	r3, [r7, #30]
 8014c52:	f003 0301 	and.w	r3, r3, #1
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d002      	beq.n	8014c60 <f_open+0x1d4>
						res = FR_DENIED;
 8014c5a:	2307      	movs	r3, #7
 8014c5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8014c60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d128      	bne.n	8014cba <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014c68:	79fb      	ldrb	r3, [r7, #7]
 8014c6a:	f003 0308 	and.w	r3, r3, #8
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d003      	beq.n	8014c7a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014c72:	79fb      	ldrb	r3, [r7, #7]
 8014c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c78:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014c7a:	697b      	ldr	r3, [r7, #20]
 8014c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014c88:	79fb      	ldrb	r3, [r7, #7]
 8014c8a:	f023 0301 	bic.w	r3, r3, #1
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	bf14      	ite	ne
 8014c92:	2301      	movne	r3, #1
 8014c94:	2300      	moveq	r3, #0
 8014c96:	b2db      	uxtb	r3, r3
 8014c98:	461a      	mov	r2, r3
 8014c9a:	f107 0318 	add.w	r3, r7, #24
 8014c9e:	4611      	mov	r1, r2
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7fd ff45 	bl	8012b30 <inc_lock>
 8014ca6:	4602      	mov	r2, r0
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	691b      	ldr	r3, [r3, #16]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d102      	bne.n	8014cba <f_open+0x22e>
 8014cb4:	2302      	movs	r3, #2
 8014cb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014cba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	f040 8095 	bne.w	8014dee <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014cc4:	697b      	ldr	r3, [r7, #20]
 8014cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014cc8:	4611      	mov	r1, r2
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7fe fd61 	bl	8013792 <ld_clust>
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cd8:	331c      	adds	r3, #28
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f7fd fdc2 	bl	8012864 <ld_dword>
 8014ce0:	4602      	mov	r2, r0
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014cec:	697a      	ldr	r2, [r7, #20]
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	88da      	ldrh	r2, [r3, #6]
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	79fa      	ldrb	r2, [r7, #7]
 8014cfe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2200      	movs	r2, #0
 8014d04:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	2200      	movs	r2, #0
 8014d0a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	3330      	adds	r3, #48	; 0x30
 8014d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014d1a:	2100      	movs	r1, #0
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f7fd fe2c 	bl	801297a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014d22:	79fb      	ldrb	r3, [r7, #7]
 8014d24:	f003 0320 	and.w	r3, r3, #32
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d060      	beq.n	8014dee <f_open+0x362>
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	68db      	ldr	r3, [r3, #12]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d05c      	beq.n	8014dee <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	68da      	ldr	r2, [r3, #12]
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	895b      	ldrh	r3, [r3, #10]
 8014d40:	025b      	lsls	r3, r3, #9
 8014d42:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	689b      	ldr	r3, [r3, #8]
 8014d48:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	68db      	ldr	r3, [r3, #12]
 8014d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014d50:	e016      	b.n	8014d80 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7fe f8d7 	bl	8012f0a <get_fat>
 8014d5c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8014d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d802      	bhi.n	8014d6a <f_open+0x2de>
 8014d64:	2302      	movs	r3, #2
 8014d66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d70:	d102      	bne.n	8014d78 <f_open+0x2ec>
 8014d72:	2301      	movs	r3, #1
 8014d74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d7c:	1ad3      	subs	r3, r2, r3
 8014d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014d80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d103      	bne.n	8014d90 <f_open+0x304>
 8014d88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d8c:	429a      	cmp	r2, r3
 8014d8e:	d8e0      	bhi.n	8014d52 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014d94:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014d96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d127      	bne.n	8014dee <f_open+0x362>
 8014d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d022      	beq.n	8014dee <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014da8:	697b      	ldr	r3, [r7, #20]
 8014daa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014dac:	4618      	mov	r0, r3
 8014dae:	f7fe f88d 	bl	8012ecc <clust2sect>
 8014db2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d103      	bne.n	8014dc2 <f_open+0x336>
						res = FR_INT_ERR;
 8014dba:	2302      	movs	r3, #2
 8014dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014dc0:	e015      	b.n	8014dee <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014dc4:	0a5a      	lsrs	r2, r3, #9
 8014dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dc8:	441a      	add	r2, r3
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	7858      	ldrb	r0, [r3, #1]
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	6a1a      	ldr	r2, [r3, #32]
 8014ddc:	2301      	movs	r3, #1
 8014dde:	f7fd fccb 	bl	8012778 <disk_read>
 8014de2:	4603      	mov	r3, r0
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d002      	beq.n	8014dee <f_open+0x362>
 8014de8:	2301      	movs	r3, #1
 8014dea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014dee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d002      	beq.n	8014dfc <f_open+0x370>
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014dfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3768      	adds	r7, #104	; 0x68
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}

08014e08 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b08c      	sub	sp, #48	; 0x30
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	60f8      	str	r0, [r7, #12]
 8014e10:	60b9      	str	r1, [r7, #8]
 8014e12:	607a      	str	r2, [r7, #4]
 8014e14:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	f107 0210 	add.w	r2, r7, #16
 8014e26:	4611      	mov	r1, r2
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f7ff fdb3 	bl	8014994 <validate>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014e34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d107      	bne.n	8014e4c <f_write+0x44>
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	7d5b      	ldrb	r3, [r3, #21]
 8014e40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014e44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d002      	beq.n	8014e52 <f_write+0x4a>
 8014e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e50:	e14b      	b.n	80150ea <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	7d1b      	ldrb	r3, [r3, #20]
 8014e56:	f003 0302 	and.w	r3, r3, #2
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d101      	bne.n	8014e62 <f_write+0x5a>
 8014e5e:	2307      	movs	r3, #7
 8014e60:	e143      	b.n	80150ea <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	699a      	ldr	r2, [r3, #24]
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	441a      	add	r2, r3
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	699b      	ldr	r3, [r3, #24]
 8014e6e:	429a      	cmp	r2, r3
 8014e70:	f080 812d 	bcs.w	80150ce <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	699b      	ldr	r3, [r3, #24]
 8014e78:	43db      	mvns	r3, r3
 8014e7a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014e7c:	e127      	b.n	80150ce <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	699b      	ldr	r3, [r3, #24]
 8014e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	f040 80e3 	bne.w	8015052 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	699b      	ldr	r3, [r3, #24]
 8014e90:	0a5b      	lsrs	r3, r3, #9
 8014e92:	693a      	ldr	r2, [r7, #16]
 8014e94:	8952      	ldrh	r2, [r2, #10]
 8014e96:	3a01      	subs	r2, #1
 8014e98:	4013      	ands	r3, r2
 8014e9a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d143      	bne.n	8014f2a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	699b      	ldr	r3, [r3, #24]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d10c      	bne.n	8014ec4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	689b      	ldr	r3, [r3, #8]
 8014eae:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d11a      	bne.n	8014eec <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	2100      	movs	r1, #0
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7fe fa16 	bl	80132ec <create_chain>
 8014ec0:	62b8      	str	r0, [r7, #40]	; 0x28
 8014ec2:	e013      	b.n	8014eec <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d007      	beq.n	8014edc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	699b      	ldr	r3, [r3, #24]
 8014ed0:	4619      	mov	r1, r3
 8014ed2:	68f8      	ldr	r0, [r7, #12]
 8014ed4:	f7fe faa2 	bl	801341c <clmt_clust>
 8014ed8:	62b8      	str	r0, [r7, #40]	; 0x28
 8014eda:	e007      	b.n	8014eec <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014edc:	68fa      	ldr	r2, [r7, #12]
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	69db      	ldr	r3, [r3, #28]
 8014ee2:	4619      	mov	r1, r3
 8014ee4:	4610      	mov	r0, r2
 8014ee6:	f7fe fa01 	bl	80132ec <create_chain>
 8014eea:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	f000 80f2 	beq.w	80150d8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d104      	bne.n	8014f04 <f_write+0xfc>
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	2202      	movs	r2, #2
 8014efe:	755a      	strb	r2, [r3, #21]
 8014f00:	2302      	movs	r3, #2
 8014f02:	e0f2      	b.n	80150ea <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f0a:	d104      	bne.n	8014f16 <f_write+0x10e>
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	2201      	movs	r2, #1
 8014f10:	755a      	strb	r2, [r3, #21]
 8014f12:	2301      	movs	r3, #1
 8014f14:	e0e9      	b.n	80150ea <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f1a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	689b      	ldr	r3, [r3, #8]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d102      	bne.n	8014f2a <f_write+0x122>
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f28:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	7d1b      	ldrb	r3, [r3, #20]
 8014f2e:	b25b      	sxtb	r3, r3
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	da18      	bge.n	8014f66 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	7858      	ldrb	r0, [r3, #1]
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	6a1a      	ldr	r2, [r3, #32]
 8014f42:	2301      	movs	r3, #1
 8014f44:	f7fd fc38 	bl	80127b8 <disk_write>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d004      	beq.n	8014f58 <f_write+0x150>
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	2201      	movs	r2, #1
 8014f52:	755a      	strb	r2, [r3, #21]
 8014f54:	2301      	movs	r3, #1
 8014f56:	e0c8      	b.n	80150ea <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	7d1b      	ldrb	r3, [r3, #20]
 8014f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f60:	b2da      	uxtb	r2, r3
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014f66:	693a      	ldr	r2, [r7, #16]
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	69db      	ldr	r3, [r3, #28]
 8014f6c:	4619      	mov	r1, r3
 8014f6e:	4610      	mov	r0, r2
 8014f70:	f7fd ffac 	bl	8012ecc <clust2sect>
 8014f74:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014f76:	697b      	ldr	r3, [r7, #20]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d104      	bne.n	8014f86 <f_write+0x17e>
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	2202      	movs	r2, #2
 8014f80:	755a      	strb	r2, [r3, #21]
 8014f82:	2302      	movs	r3, #2
 8014f84:	e0b1      	b.n	80150ea <f_write+0x2e2>
			sect += csect;
 8014f86:	697a      	ldr	r2, [r7, #20]
 8014f88:	69bb      	ldr	r3, [r7, #24]
 8014f8a:	4413      	add	r3, r2
 8014f8c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	0a5b      	lsrs	r3, r3, #9
 8014f92:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014f94:	6a3b      	ldr	r3, [r7, #32]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d03c      	beq.n	8015014 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014f9a:	69ba      	ldr	r2, [r7, #24]
 8014f9c:	6a3b      	ldr	r3, [r7, #32]
 8014f9e:	4413      	add	r3, r2
 8014fa0:	693a      	ldr	r2, [r7, #16]
 8014fa2:	8952      	ldrh	r2, [r2, #10]
 8014fa4:	4293      	cmp	r3, r2
 8014fa6:	d905      	bls.n	8014fb4 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	895b      	ldrh	r3, [r3, #10]
 8014fac:	461a      	mov	r2, r3
 8014fae:	69bb      	ldr	r3, [r7, #24]
 8014fb0:	1ad3      	subs	r3, r2, r3
 8014fb2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	7858      	ldrb	r0, [r3, #1]
 8014fb8:	6a3b      	ldr	r3, [r7, #32]
 8014fba:	697a      	ldr	r2, [r7, #20]
 8014fbc:	69f9      	ldr	r1, [r7, #28]
 8014fbe:	f7fd fbfb 	bl	80127b8 <disk_write>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d004      	beq.n	8014fd2 <f_write+0x1ca>
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2201      	movs	r2, #1
 8014fcc:	755a      	strb	r2, [r3, #21]
 8014fce:	2301      	movs	r3, #1
 8014fd0:	e08b      	b.n	80150ea <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	6a1a      	ldr	r2, [r3, #32]
 8014fd6:	697b      	ldr	r3, [r7, #20]
 8014fd8:	1ad3      	subs	r3, r2, r3
 8014fda:	6a3a      	ldr	r2, [r7, #32]
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d915      	bls.n	801500c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	6a1a      	ldr	r2, [r3, #32]
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	1ad3      	subs	r3, r2, r3
 8014fee:	025b      	lsls	r3, r3, #9
 8014ff0:	69fa      	ldr	r2, [r7, #28]
 8014ff2:	4413      	add	r3, r2
 8014ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014ff8:	4619      	mov	r1, r3
 8014ffa:	f7fd fc9d 	bl	8012938 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	7d1b      	ldrb	r3, [r3, #20]
 8015002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015006:	b2da      	uxtb	r2, r3
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801500c:	6a3b      	ldr	r3, [r7, #32]
 801500e:	025b      	lsls	r3, r3, #9
 8015010:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015012:	e03f      	b.n	8015094 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	6a1b      	ldr	r3, [r3, #32]
 8015018:	697a      	ldr	r2, [r7, #20]
 801501a:	429a      	cmp	r2, r3
 801501c:	d016      	beq.n	801504c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	699a      	ldr	r2, [r3, #24]
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015026:	429a      	cmp	r2, r3
 8015028:	d210      	bcs.n	801504c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	7858      	ldrb	r0, [r3, #1]
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015034:	2301      	movs	r3, #1
 8015036:	697a      	ldr	r2, [r7, #20]
 8015038:	f7fd fb9e 	bl	8012778 <disk_read>
 801503c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801503e:	2b00      	cmp	r3, #0
 8015040:	d004      	beq.n	801504c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	2201      	movs	r2, #1
 8015046:	755a      	strb	r2, [r3, #21]
 8015048:	2301      	movs	r3, #1
 801504a:	e04e      	b.n	80150ea <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	697a      	ldr	r2, [r7, #20]
 8015050:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	699b      	ldr	r3, [r3, #24]
 8015056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801505a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801505e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	429a      	cmp	r2, r3
 8015066:	d901      	bls.n	801506c <f_write+0x264>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	699b      	ldr	r3, [r3, #24]
 8015076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801507a:	4413      	add	r3, r2
 801507c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801507e:	69f9      	ldr	r1, [r7, #28]
 8015080:	4618      	mov	r0, r3
 8015082:	f7fd fc59 	bl	8012938 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	7d1b      	ldrb	r3, [r3, #20]
 801508a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801508e:	b2da      	uxtb	r2, r3
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015094:	69fa      	ldr	r2, [r7, #28]
 8015096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015098:	4413      	add	r3, r2
 801509a:	61fb      	str	r3, [r7, #28]
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	699a      	ldr	r2, [r3, #24]
 80150a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a2:	441a      	add	r2, r3
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	619a      	str	r2, [r3, #24]
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	68da      	ldr	r2, [r3, #12]
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	699b      	ldr	r3, [r3, #24]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	bf38      	it	cc
 80150b4:	461a      	movcc	r2, r3
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	60da      	str	r2, [r3, #12]
 80150ba:	683b      	ldr	r3, [r7, #0]
 80150bc:	681a      	ldr	r2, [r3, #0]
 80150be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c0:	441a      	add	r2, r3
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	601a      	str	r2, [r3, #0]
 80150c6:	687a      	ldr	r2, [r7, #4]
 80150c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ca:	1ad3      	subs	r3, r2, r3
 80150cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	f47f aed4 	bne.w	8014e7e <f_write+0x76>
 80150d6:	e000      	b.n	80150da <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80150d8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	7d1b      	ldrb	r3, [r3, #20]
 80150de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150e2:	b2da      	uxtb	r2, r3
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80150e8:	2300      	movs	r3, #0
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	3730      	adds	r7, #48	; 0x30
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}

080150f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80150f2:	b580      	push	{r7, lr}
 80150f4:	b086      	sub	sp, #24
 80150f6:	af00      	add	r7, sp, #0
 80150f8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	f107 0208 	add.w	r2, r7, #8
 8015100:	4611      	mov	r1, r2
 8015102:	4618      	mov	r0, r3
 8015104:	f7ff fc46 	bl	8014994 <validate>
 8015108:	4603      	mov	r3, r0
 801510a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801510c:	7dfb      	ldrb	r3, [r7, #23]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d168      	bne.n	80151e4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	7d1b      	ldrb	r3, [r3, #20]
 8015116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801511a:	2b00      	cmp	r3, #0
 801511c:	d062      	beq.n	80151e4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	7d1b      	ldrb	r3, [r3, #20]
 8015122:	b25b      	sxtb	r3, r3
 8015124:	2b00      	cmp	r3, #0
 8015126:	da15      	bge.n	8015154 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	7858      	ldrb	r0, [r3, #1]
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6a1a      	ldr	r2, [r3, #32]
 8015136:	2301      	movs	r3, #1
 8015138:	f7fd fb3e 	bl	80127b8 <disk_write>
 801513c:	4603      	mov	r3, r0
 801513e:	2b00      	cmp	r3, #0
 8015140:	d001      	beq.n	8015146 <f_sync+0x54>
 8015142:	2301      	movs	r3, #1
 8015144:	e04f      	b.n	80151e6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	7d1b      	ldrb	r3, [r3, #20]
 801514a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801514e:	b2da      	uxtb	r2, r3
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015154:	f7f7 fbfe 	bl	800c954 <get_fattime>
 8015158:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801515a:	68ba      	ldr	r2, [r7, #8]
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015160:	4619      	mov	r1, r3
 8015162:	4610      	mov	r0, r2
 8015164:	f7fd fe16 	bl	8012d94 <move_window>
 8015168:	4603      	mov	r3, r0
 801516a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801516c:	7dfb      	ldrb	r3, [r7, #23]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d138      	bne.n	80151e4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015176:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	330b      	adds	r3, #11
 801517c:	781a      	ldrb	r2, [r3, #0]
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	330b      	adds	r3, #11
 8015182:	f042 0220 	orr.w	r2, r2, #32
 8015186:	b2d2      	uxtb	r2, r2
 8015188:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6818      	ldr	r0, [r3, #0]
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	689b      	ldr	r3, [r3, #8]
 8015192:	461a      	mov	r2, r3
 8015194:	68f9      	ldr	r1, [r7, #12]
 8015196:	f7fe fb1b 	bl	80137d0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	f103 021c 	add.w	r2, r3, #28
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	68db      	ldr	r3, [r3, #12]
 80151a4:	4619      	mov	r1, r3
 80151a6:	4610      	mov	r0, r2
 80151a8:	f7fd fb9a 	bl	80128e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	3316      	adds	r3, #22
 80151b0:	6939      	ldr	r1, [r7, #16]
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7fd fb94 	bl	80128e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	3312      	adds	r3, #18
 80151bc:	2100      	movs	r1, #0
 80151be:	4618      	mov	r0, r3
 80151c0:	f7fd fb73 	bl	80128aa <st_word>
					fs->wflag = 1;
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	2201      	movs	r2, #1
 80151c8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	4618      	mov	r0, r3
 80151ce:	f7fd fe0f 	bl	8012df0 <sync_fs>
 80151d2:	4603      	mov	r3, r0
 80151d4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	7d1b      	ldrb	r3, [r3, #20]
 80151da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80151de:	b2da      	uxtb	r2, r3
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80151e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3718      	adds	r7, #24
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}

080151ee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80151ee:	b580      	push	{r7, lr}
 80151f0:	b084      	sub	sp, #16
 80151f2:	af00      	add	r7, sp, #0
 80151f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80151f6:	6878      	ldr	r0, [r7, #4]
 80151f8:	f7ff ff7b 	bl	80150f2 <f_sync>
 80151fc:	4603      	mov	r3, r0
 80151fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015200:	7bfb      	ldrb	r3, [r7, #15]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d118      	bne.n	8015238 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f107 0208 	add.w	r2, r7, #8
 801520c:	4611      	mov	r1, r2
 801520e:	4618      	mov	r0, r3
 8015210:	f7ff fbc0 	bl	8014994 <validate>
 8015214:	4603      	mov	r3, r0
 8015216:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015218:	7bfb      	ldrb	r3, [r7, #15]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d10c      	bne.n	8015238 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	691b      	ldr	r3, [r3, #16]
 8015222:	4618      	mov	r0, r3
 8015224:	f7fd fd12 	bl	8012c4c <dec_lock>
 8015228:	4603      	mov	r3, r0
 801522a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801522c:	7bfb      	ldrb	r3, [r7, #15]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d102      	bne.n	8015238 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	2200      	movs	r2, #0
 8015236:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015238:	7bfb      	ldrb	r3, [r7, #15]
}
 801523a:	4618      	mov	r0, r3
 801523c:	3710      	adds	r7, #16
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}

08015242 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015242:	b590      	push	{r4, r7, lr}
 8015244:	b093      	sub	sp, #76	; 0x4c
 8015246:	af00      	add	r7, sp, #0
 8015248:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801524a:	f107 010c 	add.w	r1, r7, #12
 801524e:	1d3b      	adds	r3, r7, #4
 8015250:	2200      	movs	r2, #0
 8015252:	4618      	mov	r0, r3
 8015254:	f7ff f94a 	bl	80144ec <find_volume>
 8015258:	4603      	mov	r3, r0
 801525a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801525e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015262:	2b00      	cmp	r3, #0
 8015264:	d131      	bne.n	80152ca <f_chdir+0x88>
		dj.obj.fs = fs;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 801526a:	687a      	ldr	r2, [r7, #4]
 801526c:	f107 0310 	add.w	r3, r7, #16
 8015270:	4611      	mov	r1, r2
 8015272:	4618      	mov	r0, r3
 8015274:	f7ff f810 	bl	8014298 <follow_path>
 8015278:	4603      	mov	r3, r0
 801527a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 801527e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015282:	2b00      	cmp	r3, #0
 8015284:	d11a      	bne.n	80152bc <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015286:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801528a:	b25b      	sxtb	r3, r3
 801528c:	2b00      	cmp	r3, #0
 801528e:	da03      	bge.n	8015298 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	69ba      	ldr	r2, [r7, #24]
 8015294:	619a      	str	r2, [r3, #24]
 8015296:	e011      	b.n	80152bc <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8015298:	7dbb      	ldrb	r3, [r7, #22]
 801529a:	f003 0310 	and.w	r3, r3, #16
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d009      	beq.n	80152b6 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152a6:	68fc      	ldr	r4, [r7, #12]
 80152a8:	4611      	mov	r1, r2
 80152aa:	4618      	mov	r0, r3
 80152ac:	f7fe fa71 	bl	8013792 <ld_clust>
 80152b0:	4603      	mov	r3, r0
 80152b2:	61a3      	str	r3, [r4, #24]
 80152b4:	e002      	b.n	80152bc <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80152b6:	2305      	movs	r3, #5
 80152b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80152bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80152c0:	2b04      	cmp	r3, #4
 80152c2:	d102      	bne.n	80152ca <f_chdir+0x88>
 80152c4:	2305      	movs	r3, #5
 80152c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 80152ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	374c      	adds	r7, #76	; 0x4c
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd90      	pop	{r4, r7, pc}

080152d6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80152d6:	b580      	push	{r7, lr}
 80152d8:	b086      	sub	sp, #24
 80152da:	af00      	add	r7, sp, #0
 80152dc:	6078      	str	r0, [r7, #4]
 80152de:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d101      	bne.n	80152ea <f_opendir+0x14>
 80152e6:	2309      	movs	r3, #9
 80152e8:	e064      	b.n	80153b4 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80152ee:	f107 010c 	add.w	r1, r7, #12
 80152f2:	463b      	mov	r3, r7
 80152f4:	2200      	movs	r2, #0
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7ff f8f8 	bl	80144ec <find_volume>
 80152fc:	4603      	mov	r3, r0
 80152fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015300:	7dfb      	ldrb	r3, [r7, #23]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d14f      	bne.n	80153a6 <f_opendir+0xd0>
		obj->fs = fs;
 8015306:	68fa      	ldr	r2, [r7, #12]
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	4619      	mov	r1, r3
 8015310:	6878      	ldr	r0, [r7, #4]
 8015312:	f7fe ffc1 	bl	8014298 <follow_path>
 8015316:	4603      	mov	r3, r0
 8015318:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801531a:	7dfb      	ldrb	r3, [r7, #23]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d13d      	bne.n	801539c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015326:	b25b      	sxtb	r3, r3
 8015328:	2b00      	cmp	r3, #0
 801532a:	db12      	blt.n	8015352 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801532c:	693b      	ldr	r3, [r7, #16]
 801532e:	799b      	ldrb	r3, [r3, #6]
 8015330:	f003 0310 	and.w	r3, r3, #16
 8015334:	2b00      	cmp	r3, #0
 8015336:	d00a      	beq.n	801534e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015338:	68fa      	ldr	r2, [r7, #12]
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	6a1b      	ldr	r3, [r3, #32]
 801533e:	4619      	mov	r1, r3
 8015340:	4610      	mov	r0, r2
 8015342:	f7fe fa26 	bl	8013792 <ld_clust>
 8015346:	4602      	mov	r2, r0
 8015348:	693b      	ldr	r3, [r7, #16]
 801534a:	609a      	str	r2, [r3, #8]
 801534c:	e001      	b.n	8015352 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801534e:	2305      	movs	r3, #5
 8015350:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015352:	7dfb      	ldrb	r3, [r7, #23]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d121      	bne.n	801539c <f_opendir+0xc6>
				obj->id = fs->id;
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	88da      	ldrh	r2, [r3, #6]
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015360:	2100      	movs	r1, #0
 8015362:	6878      	ldr	r0, [r7, #4]
 8015364:	f7fe f88e 	bl	8013484 <dir_sdi>
 8015368:	4603      	mov	r3, r0
 801536a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801536c:	7dfb      	ldrb	r3, [r7, #23]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d114      	bne.n	801539c <f_opendir+0xc6>
					if (obj->sclust) {
 8015372:	693b      	ldr	r3, [r7, #16]
 8015374:	689b      	ldr	r3, [r3, #8]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d00d      	beq.n	8015396 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801537a:	2100      	movs	r1, #0
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f7fd fbd7 	bl	8012b30 <inc_lock>
 8015382:	4602      	mov	r2, r0
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	691b      	ldr	r3, [r3, #16]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d105      	bne.n	801539c <f_opendir+0xc6>
 8015390:	2312      	movs	r3, #18
 8015392:	75fb      	strb	r3, [r7, #23]
 8015394:	e002      	b.n	801539c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015396:	693b      	ldr	r3, [r7, #16]
 8015398:	2200      	movs	r2, #0
 801539a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801539c:	7dfb      	ldrb	r3, [r7, #23]
 801539e:	2b04      	cmp	r3, #4
 80153a0:	d101      	bne.n	80153a6 <f_opendir+0xd0>
 80153a2:	2305      	movs	r3, #5
 80153a4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80153a6:	7dfb      	ldrb	r3, [r7, #23]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d002      	beq.n	80153b2 <f_opendir+0xdc>
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	2200      	movs	r2, #0
 80153b0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80153b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80153b4:	4618      	mov	r0, r3
 80153b6:	3718      	adds	r7, #24
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}

080153bc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b084      	sub	sp, #16
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	f107 0208 	add.w	r2, r7, #8
 80153ca:	4611      	mov	r1, r2
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7ff fae1 	bl	8014994 <validate>
 80153d2:	4603      	mov	r3, r0
 80153d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80153d6:	7bfb      	ldrb	r3, [r7, #15]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d110      	bne.n	80153fe <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	691b      	ldr	r3, [r3, #16]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d006      	beq.n	80153f2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	691b      	ldr	r3, [r3, #16]
 80153e8:	4618      	mov	r0, r3
 80153ea:	f7fd fc2f 	bl	8012c4c <dec_lock>
 80153ee:	4603      	mov	r3, r0
 80153f0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80153f2:	7bfb      	ldrb	r3, [r7, #15]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d102      	bne.n	80153fe <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2200      	movs	r2, #0
 80153fc:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80153fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015400:	4618      	mov	r0, r3
 8015402:	3710      	adds	r7, #16
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}

08015408 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b098      	sub	sp, #96	; 0x60
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015410:	f107 010c 	add.w	r1, r7, #12
 8015414:	1d3b      	adds	r3, r7, #4
 8015416:	2202      	movs	r2, #2
 8015418:	4618      	mov	r0, r3
 801541a:	f7ff f867 	bl	80144ec <find_volume>
 801541e:	4603      	mov	r3, r0
 8015420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8015428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801542c:	2b00      	cmp	r3, #0
 801542e:	f040 80f9 	bne.w	8015624 <f_mkdir+0x21c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8015432:	687a      	ldr	r2, [r7, #4]
 8015434:	f107 0310 	add.w	r3, r7, #16
 8015438:	4611      	mov	r1, r2
 801543a:	4618      	mov	r0, r3
 801543c:	f7fe ff2c 	bl	8014298 <follow_path>
 8015440:	4603      	mov	r3, r0
 8015442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801544a:	2b00      	cmp	r3, #0
 801544c:	d102      	bne.n	8015454 <f_mkdir+0x4c>
 801544e:	2308      	movs	r3, #8
 8015450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8015454:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015458:	2b04      	cmp	r3, #4
 801545a:	d108      	bne.n	801546e <f_mkdir+0x66>
 801545c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015460:	f003 0320 	and.w	r3, r3, #32
 8015464:	2b00      	cmp	r3, #0
 8015466:	d002      	beq.n	801546e <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8015468:	2306      	movs	r3, #6
 801546a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801546e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015472:	2b04      	cmp	r3, #4
 8015474:	f040 80d6 	bne.w	8015624 <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8015478:	f107 0310 	add.w	r3, r7, #16
 801547c:	2100      	movs	r1, #0
 801547e:	4618      	mov	r0, r3
 8015480:	f7fd ff34 	bl	80132ec <create_chain>
 8015484:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	895b      	ldrh	r3, [r3, #10]
 801548a:	025b      	lsls	r3, r3, #9
 801548c:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 801548e:	2300      	movs	r3, #0
 8015490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015496:	2b00      	cmp	r3, #0
 8015498:	d102      	bne.n	80154a0 <f_mkdir+0x98>
 801549a:	2307      	movs	r3, #7
 801549c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 80154a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154a2:	2b01      	cmp	r3, #1
 80154a4:	d102      	bne.n	80154ac <f_mkdir+0xa4>
 80154a6:	2302      	movs	r3, #2
 80154a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80154ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154b2:	d102      	bne.n	80154ba <f_mkdir+0xb2>
 80154b4:	2301      	movs	r3, #1
 80154b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80154ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d106      	bne.n	80154d0 <f_mkdir+0xc8>
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7fd fc21 	bl	8012d0c <sync_window>
 80154ca:	4603      	mov	r3, r0
 80154cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 80154d0:	f7f7 fa40 	bl	800c954 <get_fattime>
 80154d4:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 80154d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d16a      	bne.n	80155b4 <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7fd fcf2 	bl	8012ecc <clust2sect>
 80154e8:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	3338      	adds	r3, #56	; 0x38
 80154ee:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 80154f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80154f4:	2100      	movs	r1, #0
 80154f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80154f8:	f7fd fa3f 	bl	801297a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80154fc:	220b      	movs	r2, #11
 80154fe:	2120      	movs	r1, #32
 8015500:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015502:	f7fd fa3a 	bl	801297a <mem_set>
					dir[DIR_Name] = '.';
 8015506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015508:	222e      	movs	r2, #46	; 0x2e
 801550a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801550c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801550e:	330b      	adds	r3, #11
 8015510:	2210      	movs	r2, #16
 8015512:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8015514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015516:	3316      	adds	r3, #22
 8015518:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801551a:	4618      	mov	r0, r3
 801551c:	f7fd f9e0 	bl	80128e0 <st_dword>
					st_clust(fs, dir, dcl);
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015524:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015526:	4618      	mov	r0, r3
 8015528:	f7fe f952 	bl	80137d0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801552c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801552e:	3320      	adds	r3, #32
 8015530:	2220      	movs	r2, #32
 8015532:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015534:	4618      	mov	r0, r3
 8015536:	f7fd f9ff 	bl	8012938 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801553a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801553c:	3321      	adds	r3, #33	; 0x21
 801553e:	222e      	movs	r2, #46	; 0x2e
 8015540:	701a      	strb	r2, [r3, #0]
 8015542:	69bb      	ldr	r3, [r7, #24]
 8015544:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	781b      	ldrb	r3, [r3, #0]
 801554a:	2b03      	cmp	r3, #3
 801554c:	d106      	bne.n	801555c <f_mkdir+0x154>
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015552:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015554:	429a      	cmp	r2, r3
 8015556:	d101      	bne.n	801555c <f_mkdir+0x154>
 8015558:	2300      	movs	r3, #0
 801555a:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 801555c:	68f8      	ldr	r0, [r7, #12]
 801555e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015560:	3320      	adds	r3, #32
 8015562:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015564:	4619      	mov	r1, r3
 8015566:	f7fe f933 	bl	80137d0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	895b      	ldrh	r3, [r3, #10]
 801556e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015570:	e01b      	b.n	80155aa <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 8015572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015574:	1c5a      	adds	r2, r3, #1
 8015576:	657a      	str	r2, [r7, #84]	; 0x54
 8015578:	68fa      	ldr	r2, [r7, #12]
 801557a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	2201      	movs	r2, #1
 8015580:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	4618      	mov	r0, r3
 8015586:	f7fd fbc1 	bl	8012d0c <sync_window>
 801558a:	4603      	mov	r3, r0
 801558c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8015590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015594:	2b00      	cmp	r3, #0
 8015596:	d10c      	bne.n	80155b2 <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 8015598:	f44f 7200 	mov.w	r2, #512	; 0x200
 801559c:	2100      	movs	r1, #0
 801559e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80155a0:	f7fd f9eb 	bl	801297a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80155a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80155a6:	3b01      	subs	r3, #1
 80155a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80155aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d1e0      	bne.n	8015572 <f_mkdir+0x16a>
 80155b0:	e000      	b.n	80155b4 <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 80155b2:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80155b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d107      	bne.n	80155cc <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80155bc:	f107 0310 	add.w	r3, r7, #16
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7fe fb6d 	bl	8013ca0 <dir_register>
 80155c6:	4603      	mov	r3, r0
 80155c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 80155cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d120      	bne.n	8015616 <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80155d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155d6:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80155d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155da:	3316      	adds	r3, #22
 80155dc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80155de:	4618      	mov	r0, r3
 80155e0:	f7fd f97e 	bl	80128e0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80155e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7fe f8f0 	bl	80137d0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80155f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155f2:	330b      	adds	r3, #11
 80155f4:	2210      	movs	r2, #16
 80155f6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	2201      	movs	r2, #1
 80155fc:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80155fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015602:	2b00      	cmp	r3, #0
 8015604:	d10e      	bne.n	8015624 <f_mkdir+0x21c>
					res = sync_fs(fs);
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	4618      	mov	r0, r3
 801560a:	f7fd fbf1 	bl	8012df0 <sync_fs>
 801560e:	4603      	mov	r3, r0
 8015610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015614:	e006      	b.n	8015624 <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015616:	f107 0310 	add.w	r3, r7, #16
 801561a:	2200      	movs	r2, #0
 801561c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801561e:	4618      	mov	r0, r3
 8015620:	f7fd fdff 	bl	8013222 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015624:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8015628:	4618      	mov	r0, r3
 801562a:	3760      	adds	r7, #96	; 0x60
 801562c:	46bd      	mov	sp, r7
 801562e:	bd80      	pop	{r7, pc}

08015630 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8015630:	b590      	push	{r4, r7, lr}
 8015632:	b09d      	sub	sp, #116	; 0x74
 8015634:	af00      	add	r7, sp, #0
 8015636:	60f8      	str	r0, [r7, #12]
 8015638:	607a      	str	r2, [r7, #4]
 801563a:	603b      	str	r3, [r7, #0]
 801563c:	460b      	mov	r3, r1
 801563e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8015640:	2301      	movs	r3, #1
 8015642:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8015644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015648:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 801564a:	f107 030c 	add.w	r3, r7, #12
 801564e:	4618      	mov	r0, r3
 8015650:	f7fe feb2 	bl	80143b8 <get_ldnumber>
 8015654:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8015656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015658:	2b00      	cmp	r3, #0
 801565a:	da02      	bge.n	8015662 <f_mkfs+0x32>
 801565c:	230b      	movs	r3, #11
 801565e:	f000 bc0d 	b.w	8015e7c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8015662:	4a94      	ldr	r2, [pc, #592]	; (80158b4 <f_mkfs+0x284>)
 8015664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d005      	beq.n	801567a <f_mkfs+0x4a>
 801566e:	4a91      	ldr	r2, [pc, #580]	; (80158b4 <f_mkfs+0x284>)
 8015670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015676:	2200      	movs	r2, #0
 8015678:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 801567a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801567c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8015680:	2300      	movs	r3, #0
 8015682:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8015686:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801568a:	4618      	mov	r0, r3
 801568c:	f7fd f84e 	bl	801272c <disk_initialize>
 8015690:	4603      	mov	r3, r0
 8015692:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8015696:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801569a:	f003 0301 	and.w	r3, r3, #1
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d001      	beq.n	80156a6 <f_mkfs+0x76>
 80156a2:	2303      	movs	r3, #3
 80156a4:	e3ea      	b.n	8015e7c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80156a6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80156aa:	f003 0304 	and.w	r3, r3, #4
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d001      	beq.n	80156b6 <f_mkfs+0x86>
 80156b2:	230a      	movs	r3, #10
 80156b4:	e3e2      	b.n	8015e7c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80156b6:	f107 0214 	add.w	r2, r7, #20
 80156ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80156be:	2103      	movs	r1, #3
 80156c0:	4618      	mov	r0, r3
 80156c2:	f7fd f899 	bl	80127f8 <disk_ioctl>
 80156c6:	4603      	mov	r3, r0
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d10c      	bne.n	80156e6 <f_mkfs+0xb6>
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d009      	beq.n	80156e6 <f_mkfs+0xb6>
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80156d8:	d805      	bhi.n	80156e6 <f_mkfs+0xb6>
 80156da:	697b      	ldr	r3, [r7, #20]
 80156dc:	1e5a      	subs	r2, r3, #1
 80156de:	697b      	ldr	r3, [r7, #20]
 80156e0:	4013      	ands	r3, r2
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d001      	beq.n	80156ea <f_mkfs+0xba>
 80156e6:	2301      	movs	r3, #1
 80156e8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80156ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80156ee:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d003      	beq.n	80156fe <f_mkfs+0xce>
 80156f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80156f8:	687a      	ldr	r2, [r7, #4]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d309      	bcc.n	8015712 <f_mkfs+0xe2>
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015704:	d805      	bhi.n	8015712 <f_mkfs+0xe2>
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	1e5a      	subs	r2, r3, #1
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	4013      	ands	r3, r2
 801570e:	2b00      	cmp	r3, #0
 8015710:	d001      	beq.n	8015716 <f_mkfs+0xe6>
 8015712:	2313      	movs	r3, #19
 8015714:	e3b2      	b.n	8015e7c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8015716:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	fbb2 f3f3 	udiv	r3, r2, r3
 801571e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8015724:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015726:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801572a:	fbb2 f3f3 	udiv	r3, r2, r3
 801572e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8015730:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015734:	fb02 f303 	mul.w	r3, r2, r3
 8015738:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 801573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573c:	2b00      	cmp	r3, #0
 801573e:	d101      	bne.n	8015744 <f_mkfs+0x114>
 8015740:	230e      	movs	r3, #14
 8015742:	e39b      	b.n	8015e7c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8015744:	f107 0210 	add.w	r2, r7, #16
 8015748:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801574c:	2101      	movs	r1, #1
 801574e:	4618      	mov	r0, r3
 8015750:	f7fd f852 	bl	80127f8 <disk_ioctl>
 8015754:	4603      	mov	r3, r0
 8015756:	2b00      	cmp	r3, #0
 8015758:	d001      	beq.n	801575e <f_mkfs+0x12e>
 801575a:	2301      	movs	r3, #1
 801575c:	e38e      	b.n	8015e7c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 801575e:	7afb      	ldrb	r3, [r7, #11]
 8015760:	f003 0308 	and.w	r3, r3, #8
 8015764:	2b00      	cmp	r3, #0
 8015766:	d001      	beq.n	801576c <f_mkfs+0x13c>
 8015768:	2300      	movs	r3, #0
 801576a:	e000      	b.n	801576e <f_mkfs+0x13e>
 801576c:	233f      	movs	r3, #63	; 0x3f
 801576e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8015770:	693b      	ldr	r3, [r7, #16]
 8015772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015774:	429a      	cmp	r2, r3
 8015776:	d901      	bls.n	801577c <f_mkfs+0x14c>
 8015778:	230e      	movs	r3, #14
 801577a:	e37f      	b.n	8015e7c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 801577c:	693a      	ldr	r2, [r7, #16]
 801577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015780:	1ad3      	subs	r3, r2, r3
 8015782:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8015784:	693b      	ldr	r3, [r7, #16]
 8015786:	2b7f      	cmp	r3, #127	; 0x7f
 8015788:	d801      	bhi.n	801578e <f_mkfs+0x15e>
 801578a:	230e      	movs	r3, #14
 801578c:	e376      	b.n	8015e7c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	2b80      	cmp	r3, #128	; 0x80
 8015792:	d901      	bls.n	8015798 <f_mkfs+0x168>
 8015794:	2313      	movs	r3, #19
 8015796:	e371      	b.n	8015e7c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8015798:	7afb      	ldrb	r3, [r7, #11]
 801579a:	f003 0302 	and.w	r3, r3, #2
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d00d      	beq.n	80157be <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80157a2:	7afb      	ldrb	r3, [r7, #11]
 80157a4:	f003 0307 	and.w	r3, r3, #7
 80157a8:	2b02      	cmp	r3, #2
 80157aa:	d004      	beq.n	80157b6 <f_mkfs+0x186>
 80157ac:	7afb      	ldrb	r3, [r7, #11]
 80157ae:	f003 0301 	and.w	r3, r3, #1
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d103      	bne.n	80157be <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80157b6:	2303      	movs	r3, #3
 80157b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80157bc:	e009      	b.n	80157d2 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80157be:	7afb      	ldrb	r3, [r7, #11]
 80157c0:	f003 0301 	and.w	r3, r3, #1
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d101      	bne.n	80157cc <f_mkfs+0x19c>
 80157c8:	2313      	movs	r3, #19
 80157ca:	e357      	b.n	8015e7c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80157cc:	2302      	movs	r3, #2
 80157ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80157d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80157da:	2b03      	cmp	r3, #3
 80157dc:	d13c      	bne.n	8015858 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80157de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d11b      	bne.n	801581c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80157e4:	693b      	ldr	r3, [r7, #16]
 80157e6:	0c5b      	lsrs	r3, r3, #17
 80157e8:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80157ea:	2300      	movs	r3, #0
 80157ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80157ee:	2301      	movs	r3, #1
 80157f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80157f2:	e005      	b.n	8015800 <f_mkfs+0x1d0>
 80157f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157f6:	3301      	adds	r3, #1
 80157f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80157fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80157fc:	005b      	lsls	r3, r3, #1
 80157fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015800:	4a2d      	ldr	r2, [pc, #180]	; (80158b8 <f_mkfs+0x288>)
 8015802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d007      	beq.n	801581c <f_mkfs+0x1ec>
 801580c:	4a2a      	ldr	r2, [pc, #168]	; (80158b8 <f_mkfs+0x288>)
 801580e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015814:	461a      	mov	r2, r3
 8015816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015818:	4293      	cmp	r3, r2
 801581a:	d2eb      	bcs.n	80157f4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 801581c:	693a      	ldr	r2, [r7, #16]
 801581e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015820:	fbb2 f3f3 	udiv	r3, r2, r3
 8015824:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8015826:	6a3b      	ldr	r3, [r7, #32]
 8015828:	3302      	adds	r3, #2
 801582a:	009a      	lsls	r2, r3, #2
 801582c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801582e:	4413      	add	r3, r2
 8015830:	1e5a      	subs	r2, r3, #1
 8015832:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015834:	fbb2 f3f3 	udiv	r3, r2, r3
 8015838:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 801583a:	2320      	movs	r3, #32
 801583c:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 801583e:	2300      	movs	r3, #0
 8015840:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8015842:	6a3b      	ldr	r3, [r7, #32]
 8015844:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015848:	4293      	cmp	r3, r2
 801584a:	d903      	bls.n	8015854 <f_mkfs+0x224>
 801584c:	6a3b      	ldr	r3, [r7, #32]
 801584e:	4a1b      	ldr	r2, [pc, #108]	; (80158bc <f_mkfs+0x28c>)
 8015850:	4293      	cmp	r3, r2
 8015852:	d952      	bls.n	80158fa <f_mkfs+0x2ca>
 8015854:	230e      	movs	r3, #14
 8015856:	e311      	b.n	8015e7c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8015858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801585a:	2b00      	cmp	r3, #0
 801585c:	d11b      	bne.n	8015896 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 801585e:	693b      	ldr	r3, [r7, #16]
 8015860:	0b1b      	lsrs	r3, r3, #12
 8015862:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015864:	2300      	movs	r3, #0
 8015866:	64bb      	str	r3, [r7, #72]	; 0x48
 8015868:	2301      	movs	r3, #1
 801586a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801586c:	e005      	b.n	801587a <f_mkfs+0x24a>
 801586e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015870:	3301      	adds	r3, #1
 8015872:	64bb      	str	r3, [r7, #72]	; 0x48
 8015874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015876:	005b      	lsls	r3, r3, #1
 8015878:	66fb      	str	r3, [r7, #108]	; 0x6c
 801587a:	4a11      	ldr	r2, [pc, #68]	; (80158c0 <f_mkfs+0x290>)
 801587c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801587e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d007      	beq.n	8015896 <f_mkfs+0x266>
 8015886:	4a0e      	ldr	r2, [pc, #56]	; (80158c0 <f_mkfs+0x290>)
 8015888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801588a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801588e:	461a      	mov	r2, r3
 8015890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015892:	4293      	cmp	r3, r2
 8015894:	d2eb      	bcs.n	801586e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8015896:	693a      	ldr	r2, [r7, #16]
 8015898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801589a:	fbb2 f3f3 	udiv	r3, r2, r3
 801589e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80158a0:	6a3b      	ldr	r3, [r7, #32]
 80158a2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80158a6:	4293      	cmp	r3, r2
 80158a8:	d90c      	bls.n	80158c4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80158aa:	6a3b      	ldr	r3, [r7, #32]
 80158ac:	3302      	adds	r3, #2
 80158ae:	005b      	lsls	r3, r3, #1
 80158b0:	663b      	str	r3, [r7, #96]	; 0x60
 80158b2:	e012      	b.n	80158da <f_mkfs+0x2aa>
 80158b4:	20000c04 	.word	0x20000c04
 80158b8:	0801b4c4 	.word	0x0801b4c4
 80158bc:	0ffffff5 	.word	0x0ffffff5
 80158c0:	0801b4d4 	.word	0x0801b4d4
				} else {
					fmt = FS_FAT12;
 80158c4:	2301      	movs	r3, #1
 80158c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80158ca:	6a3a      	ldr	r2, [r7, #32]
 80158cc:	4613      	mov	r3, r2
 80158ce:	005b      	lsls	r3, r3, #1
 80158d0:	4413      	add	r3, r2
 80158d2:	3301      	adds	r3, #1
 80158d4:	085b      	lsrs	r3, r3, #1
 80158d6:	3303      	adds	r3, #3
 80158d8:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80158da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80158dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80158de:	4413      	add	r3, r2
 80158e0:	1e5a      	subs	r2, r3, #1
 80158e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80158e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80158e8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 80158ea:	2301      	movs	r3, #1
 80158ec:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80158ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80158f0:	015a      	lsls	r2, r3, #5
 80158f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80158f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80158f8:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80158fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80158fe:	4413      	add	r3, r2
 8015900:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8015902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015904:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015906:	fb02 f203 	mul.w	r2, r2, r3
 801590a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801590c:	4413      	add	r3, r2
 801590e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015910:	4413      	add	r3, r2
 8015912:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8015914:	697a      	ldr	r2, [r7, #20]
 8015916:	69fb      	ldr	r3, [r7, #28]
 8015918:	4413      	add	r3, r2
 801591a:	1e5a      	subs	r2, r3, #1
 801591c:	697b      	ldr	r3, [r7, #20]
 801591e:	425b      	negs	r3, r3
 8015920:	401a      	ands	r2, r3
 8015922:	69fb      	ldr	r3, [r7, #28]
 8015924:	1ad3      	subs	r3, r2, r3
 8015926:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8015928:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801592c:	2b03      	cmp	r3, #3
 801592e:	d108      	bne.n	8015942 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8015930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015934:	4413      	add	r3, r2
 8015936:	65bb      	str	r3, [r7, #88]	; 0x58
 8015938:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801593a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801593c:	4413      	add	r3, r2
 801593e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015940:	e006      	b.n	8015950 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8015942:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015946:	fbb2 f3f3 	udiv	r3, r2, r3
 801594a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801594c:	4413      	add	r3, r2
 801594e:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8015950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015952:	011a      	lsls	r2, r3, #4
 8015954:	69fb      	ldr	r3, [r7, #28]
 8015956:	441a      	add	r2, r3
 8015958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801595a:	1ad2      	subs	r2, r2, r3
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	429a      	cmp	r2, r3
 8015960:	d901      	bls.n	8015966 <f_mkfs+0x336>
 8015962:	230e      	movs	r3, #14
 8015964:	e28a      	b.n	8015e7c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8015966:	693a      	ldr	r2, [r7, #16]
 8015968:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801596a:	1ad2      	subs	r2, r2, r3
 801596c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801596e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015970:	fb01 f303 	mul.w	r3, r1, r3
 8015974:	1ad2      	subs	r2, r2, r3
 8015976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015978:	1ad2      	subs	r2, r2, r3
 801597a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801597c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015980:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8015982:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015986:	2b03      	cmp	r3, #3
 8015988:	d10f      	bne.n	80159aa <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 801598a:	6a3b      	ldr	r3, [r7, #32]
 801598c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015990:	4293      	cmp	r3, r2
 8015992:	d80a      	bhi.n	80159aa <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d105      	bne.n	80159a6 <f_mkfs+0x376>
 801599a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801599c:	085b      	lsrs	r3, r3, #1
 801599e:	607b      	str	r3, [r7, #4]
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d144      	bne.n	8015a30 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80159a6:	230e      	movs	r3, #14
 80159a8:	e268      	b.n	8015e7c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80159aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80159ae:	2b02      	cmp	r3, #2
 80159b0:	d133      	bne.n	8015a1a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80159b2:	6a3b      	ldr	r3, [r7, #32]
 80159b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80159b8:	4293      	cmp	r3, r2
 80159ba:	d91e      	bls.n	80159fa <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d107      	bne.n	80159d2 <f_mkfs+0x3a2>
 80159c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80159c4:	005b      	lsls	r3, r3, #1
 80159c6:	2b40      	cmp	r3, #64	; 0x40
 80159c8:	d803      	bhi.n	80159d2 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80159ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80159cc:	005b      	lsls	r3, r3, #1
 80159ce:	607b      	str	r3, [r7, #4]
 80159d0:	e033      	b.n	8015a3a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80159d2:	7afb      	ldrb	r3, [r7, #11]
 80159d4:	f003 0302 	and.w	r3, r3, #2
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d003      	beq.n	80159e4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80159dc:	2303      	movs	r3, #3
 80159de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80159e2:	e02a      	b.n	8015a3a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d105      	bne.n	80159f6 <f_mkfs+0x3c6>
 80159ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80159ec:	005b      	lsls	r3, r3, #1
 80159ee:	607b      	str	r3, [r7, #4]
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2b80      	cmp	r3, #128	; 0x80
 80159f4:	d91e      	bls.n	8015a34 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80159f6:	230e      	movs	r3, #14
 80159f8:	e240      	b.n	8015e7c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80159fa:	6a3b      	ldr	r3, [r7, #32]
 80159fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015a00:	4293      	cmp	r3, r2
 8015a02:	d80a      	bhi.n	8015a1a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d105      	bne.n	8015a16 <f_mkfs+0x3e6>
 8015a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015a0c:	005b      	lsls	r3, r3, #1
 8015a0e:	607b      	str	r3, [r7, #4]
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2b80      	cmp	r3, #128	; 0x80
 8015a14:	d910      	bls.n	8015a38 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8015a16:	230e      	movs	r3, #14
 8015a18:	e230      	b.n	8015e7c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8015a1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015a1e:	2b01      	cmp	r3, #1
 8015a20:	d10c      	bne.n	8015a3c <f_mkfs+0x40c>
 8015a22:	6a3b      	ldr	r3, [r7, #32]
 8015a24:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015a28:	4293      	cmp	r3, r2
 8015a2a:	d907      	bls.n	8015a3c <f_mkfs+0x40c>
 8015a2c:	230e      	movs	r3, #14
 8015a2e:	e225      	b.n	8015e7c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015a30:	bf00      	nop
 8015a32:	e6ce      	b.n	80157d2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015a34:	bf00      	nop
 8015a36:	e6cc      	b.n	80157d2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015a38:	bf00      	nop
			pau = au;
 8015a3a:	e6ca      	b.n	80157d2 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8015a3c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8015a3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015a40:	461a      	mov	r2, r3
 8015a42:	2100      	movs	r1, #0
 8015a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a46:	f7fc ff98 	bl	801297a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8015a4a:	220b      	movs	r2, #11
 8015a4c:	49bc      	ldr	r1, [pc, #752]	; (8015d40 <f_mkfs+0x710>)
 8015a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a50:	f7fc ff72 	bl	8012938 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8015a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a56:	330b      	adds	r3, #11
 8015a58:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015a5a:	4611      	mov	r1, r2
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7fc ff24 	bl	80128aa <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8015a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a64:	330d      	adds	r3, #13
 8015a66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015a68:	b2d2      	uxtb	r2, r2
 8015a6a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8015a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a6e:	330e      	adds	r3, #14
 8015a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015a72:	b292      	uxth	r2, r2
 8015a74:	4611      	mov	r1, r2
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7fc ff17 	bl	80128aa <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8015a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a7e:	3310      	adds	r3, #16
 8015a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015a82:	b2d2      	uxtb	r2, r2
 8015a84:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8015a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a88:	f103 0211 	add.w	r2, r3, #17
 8015a8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015a90:	2b03      	cmp	r3, #3
 8015a92:	d002      	beq.n	8015a9a <f_mkfs+0x46a>
 8015a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a96:	b29b      	uxth	r3, r3
 8015a98:	e000      	b.n	8015a9c <f_mkfs+0x46c>
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	4619      	mov	r1, r3
 8015a9e:	4610      	mov	r0, r2
 8015aa0:	f7fc ff03 	bl	80128aa <st_word>
		if (sz_vol < 0x10000) {
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015aaa:	d208      	bcs.n	8015abe <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8015aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aae:	3313      	adds	r3, #19
 8015ab0:	693a      	ldr	r2, [r7, #16]
 8015ab2:	b292      	uxth	r2, r2
 8015ab4:	4611      	mov	r1, r2
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f7fc fef7 	bl	80128aa <st_word>
 8015abc:	e006      	b.n	8015acc <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8015abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ac0:	3320      	adds	r3, #32
 8015ac2:	693a      	ldr	r2, [r7, #16]
 8015ac4:	4611      	mov	r1, r2
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f7fc ff0a 	bl	80128e0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8015acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ace:	3315      	adds	r3, #21
 8015ad0:	22f8      	movs	r2, #248	; 0xf8
 8015ad2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8015ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad6:	3318      	adds	r3, #24
 8015ad8:	213f      	movs	r1, #63	; 0x3f
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7fc fee5 	bl	80128aa <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8015ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae2:	331a      	adds	r3, #26
 8015ae4:	21ff      	movs	r1, #255	; 0xff
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f7fc fedf 	bl	80128aa <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8015aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aee:	331c      	adds	r3, #28
 8015af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015af2:	4618      	mov	r0, r3
 8015af4:	f7fc fef4 	bl	80128e0 <st_dword>
		if (fmt == FS_FAT32) {
 8015af8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015afc:	2b03      	cmp	r3, #3
 8015afe:	d131      	bne.n	8015b64 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8015b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b02:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8015b06:	f7f6 ff25 	bl	800c954 <get_fattime>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	4619      	mov	r1, r3
 8015b0e:	4620      	mov	r0, r4
 8015b10:	f7fc fee6 	bl	80128e0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8015b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b16:	3324      	adds	r3, #36	; 0x24
 8015b18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7fc fee0 	bl	80128e0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8015b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b22:	332c      	adds	r3, #44	; 0x2c
 8015b24:	2102      	movs	r1, #2
 8015b26:	4618      	mov	r0, r3
 8015b28:	f7fc feda 	bl	80128e0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8015b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b2e:	3330      	adds	r3, #48	; 0x30
 8015b30:	2101      	movs	r1, #1
 8015b32:	4618      	mov	r0, r3
 8015b34:	f7fc feb9 	bl	80128aa <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8015b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b3a:	3332      	adds	r3, #50	; 0x32
 8015b3c:	2106      	movs	r1, #6
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7fc feb3 	bl	80128aa <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8015b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b46:	3340      	adds	r3, #64	; 0x40
 8015b48:	2280      	movs	r2, #128	; 0x80
 8015b4a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8015b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b4e:	3342      	adds	r3, #66	; 0x42
 8015b50:	2229      	movs	r2, #41	; 0x29
 8015b52:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8015b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b56:	3347      	adds	r3, #71	; 0x47
 8015b58:	2213      	movs	r2, #19
 8015b5a:	497a      	ldr	r1, [pc, #488]	; (8015d44 <f_mkfs+0x714>)
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7fc feeb 	bl	8012938 <mem_cpy>
 8015b62:	e020      	b.n	8015ba6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8015b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b66:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8015b6a:	f7f6 fef3 	bl	800c954 <get_fattime>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	4619      	mov	r1, r3
 8015b72:	4620      	mov	r0, r4
 8015b74:	f7fc feb4 	bl	80128e0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8015b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b7a:	3316      	adds	r3, #22
 8015b7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015b7e:	b292      	uxth	r2, r2
 8015b80:	4611      	mov	r1, r2
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7fc fe91 	bl	80128aa <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8015b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b8a:	3324      	adds	r3, #36	; 0x24
 8015b8c:	2280      	movs	r2, #128	; 0x80
 8015b8e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8015b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b92:	3326      	adds	r3, #38	; 0x26
 8015b94:	2229      	movs	r2, #41	; 0x29
 8015b96:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8015b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b9a:	332b      	adds	r3, #43	; 0x2b
 8015b9c:	2213      	movs	r2, #19
 8015b9e:	496a      	ldr	r1, [pc, #424]	; (8015d48 <f_mkfs+0x718>)
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7fc fec9 	bl	8012938 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8015ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015bac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7fc fe7a 	bl	80128aa <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8015bb6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015bba:	2301      	movs	r3, #1
 8015bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015bc0:	f7fc fdfa 	bl	80127b8 <disk_write>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d001      	beq.n	8015bce <f_mkfs+0x59e>
 8015bca:	2301      	movs	r3, #1
 8015bcc:	e156      	b.n	8015e7c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8015bce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015bd2:	2b03      	cmp	r3, #3
 8015bd4:	d140      	bne.n	8015c58 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8015bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd8:	1d9a      	adds	r2, r3, #6
 8015bda:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015bde:	2301      	movs	r3, #1
 8015be0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015be2:	f7fc fde9 	bl	80127b8 <disk_write>
			mem_set(buf, 0, ss);
 8015be6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015be8:	461a      	mov	r2, r3
 8015bea:	2100      	movs	r1, #0
 8015bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bee:	f7fc fec4 	bl	801297a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8015bf2:	4956      	ldr	r1, [pc, #344]	; (8015d4c <f_mkfs+0x71c>)
 8015bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bf6:	f7fc fe73 	bl	80128e0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8015bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bfc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015c00:	4953      	ldr	r1, [pc, #332]	; (8015d50 <f_mkfs+0x720>)
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7fc fe6c 	bl	80128e0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8015c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c0a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015c0e:	6a3b      	ldr	r3, [r7, #32]
 8015c10:	3b01      	subs	r3, #1
 8015c12:	4619      	mov	r1, r3
 8015c14:	4610      	mov	r0, r2
 8015c16:	f7fc fe63 	bl	80128e0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8015c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c1c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8015c20:	2102      	movs	r1, #2
 8015c22:	4618      	mov	r0, r3
 8015c24:	f7fc fe5c 	bl	80128e0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8015c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015c2e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015c32:	4618      	mov	r0, r3
 8015c34:	f7fc fe39 	bl	80128aa <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8015c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3a:	1dda      	adds	r2, r3, #7
 8015c3c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015c40:	2301      	movs	r3, #1
 8015c42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015c44:	f7fc fdb8 	bl	80127b8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8015c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c4a:	1c5a      	adds	r2, r3, #1
 8015c4c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015c50:	2301      	movs	r3, #1
 8015c52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015c54:	f7fc fdb0 	bl	80127b8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8015c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c5a:	2100      	movs	r1, #0
 8015c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c5e:	f7fc fe8c 	bl	801297a <mem_set>
		sect = b_fat;		/* FAT start sector */
 8015c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015c64:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8015c66:	2300      	movs	r3, #0
 8015c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8015c6a:	e04b      	b.n	8015d04 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8015c6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015c70:	2b03      	cmp	r3, #3
 8015c72:	d113      	bne.n	8015c9c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8015c74:	f06f 0107 	mvn.w	r1, #7
 8015c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c7a:	f7fc fe31 	bl	80128e0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8015c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c80:	3304      	adds	r3, #4
 8015c82:	f04f 31ff 	mov.w	r1, #4294967295
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7fc fe2a 	bl	80128e0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8015c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c8e:	3308      	adds	r3, #8
 8015c90:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7fc fe23 	bl	80128e0 <st_dword>
 8015c9a:	e00b      	b.n	8015cb4 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8015c9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015ca0:	2b01      	cmp	r3, #1
 8015ca2:	d101      	bne.n	8015ca8 <f_mkfs+0x678>
 8015ca4:	4b2b      	ldr	r3, [pc, #172]	; (8015d54 <f_mkfs+0x724>)
 8015ca6:	e001      	b.n	8015cac <f_mkfs+0x67c>
 8015ca8:	f06f 0307 	mvn.w	r3, #7
 8015cac:	4619      	mov	r1, r3
 8015cae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cb0:	f7fc fe16 	bl	80128e0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8015cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015cb6:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8015cb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cbc:	4293      	cmp	r3, r2
 8015cbe:	bf28      	it	cs
 8015cc0:	4613      	movcs	r3, r2
 8015cc2:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8015cc4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015cca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015ccc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015cce:	f7fc fd73 	bl	80127b8 <disk_write>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d001      	beq.n	8015cdc <f_mkfs+0x6ac>
 8015cd8:	2301      	movs	r3, #1
 8015cda:	e0cf      	b.n	8015e7c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8015cdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015cde:	461a      	mov	r2, r3
 8015ce0:	2100      	movs	r1, #0
 8015ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ce4:	f7fc fe49 	bl	801297a <mem_set>
				sect += n; nsect -= n;
 8015ce8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015cec:	4413      	add	r3, r2
 8015cee:	66bb      	str	r3, [r7, #104]	; 0x68
 8015cf0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015cf4:	1ad3      	subs	r3, r2, r3
 8015cf6:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 8015cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d1dc      	bne.n	8015cb8 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8015cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d00:	3301      	adds	r3, #1
 8015d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8015d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d08:	429a      	cmp	r2, r3
 8015d0a:	d3af      	bcc.n	8015c6c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8015d0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015d10:	2b03      	cmp	r3, #3
 8015d12:	d101      	bne.n	8015d18 <f_mkfs+0x6e8>
 8015d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d16:	e000      	b.n	8015d1a <f_mkfs+0x6ea>
 8015d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d1a:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8015d1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d20:	4293      	cmp	r3, r2
 8015d22:	bf28      	it	cs
 8015d24:	4613      	movcs	r3, r2
 8015d26:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8015d28:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015d2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015d30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015d32:	f7fc fd41 	bl	80127b8 <disk_write>
 8015d36:	4603      	mov	r3, r0
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d00d      	beq.n	8015d58 <f_mkfs+0x728>
 8015d3c:	2301      	movs	r3, #1
 8015d3e:	e09d      	b.n	8015e7c <f_mkfs+0x84c>
 8015d40:	08017778 	.word	0x08017778
 8015d44:	08017784 	.word	0x08017784
 8015d48:	08017798 	.word	0x08017798
 8015d4c:	41615252 	.word	0x41615252
 8015d50:	61417272 	.word	0x61417272
 8015d54:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8015d58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d5c:	4413      	add	r3, r2
 8015d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8015d60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d64:	1ad3      	subs	r3, r2, r3
 8015d66:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 8015d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d1d6      	bne.n	8015d1c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8015d6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015d72:	2b03      	cmp	r3, #3
 8015d74:	d103      	bne.n	8015d7e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8015d76:	230c      	movs	r3, #12
 8015d78:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8015d7c:	e010      	b.n	8015da0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8015d7e:	693b      	ldr	r3, [r7, #16]
 8015d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d84:	d303      	bcc.n	8015d8e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8015d86:	2306      	movs	r3, #6
 8015d88:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8015d8c:	e008      	b.n	8015da0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8015d8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015d92:	2b02      	cmp	r3, #2
 8015d94:	d101      	bne.n	8015d9a <f_mkfs+0x76a>
 8015d96:	2304      	movs	r3, #4
 8015d98:	e000      	b.n	8015d9c <f_mkfs+0x76c>
 8015d9a:	2301      	movs	r3, #1
 8015d9c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8015da0:	7afb      	ldrb	r3, [r7, #11]
 8015da2:	f003 0308 	and.w	r3, r3, #8
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d15b      	bne.n	8015e62 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8015daa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015dac:	461a      	mov	r2, r3
 8015dae:	2100      	movs	r1, #0
 8015db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015db2:	f7fc fde2 	bl	801297a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8015db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015dbc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f7fc fd72 	bl	80128aa <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8015dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8015dcc:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8015dce:	69bb      	ldr	r3, [r7, #24]
 8015dd0:	2200      	movs	r2, #0
 8015dd2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8015dd4:	69bb      	ldr	r3, [r7, #24]
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	2201      	movs	r2, #1
 8015dda:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8015ddc:	69bb      	ldr	r3, [r7, #24]
 8015dde:	3302      	adds	r3, #2
 8015de0:	2201      	movs	r2, #1
 8015de2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8015de4:	69bb      	ldr	r3, [r7, #24]
 8015de6:	3303      	adds	r3, #3
 8015de8:	2200      	movs	r2, #0
 8015dea:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8015dec:	69bb      	ldr	r3, [r7, #24]
 8015dee:	3304      	adds	r3, #4
 8015df0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8015df4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8015df6:	693a      	ldr	r2, [r7, #16]
 8015df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dfa:	441a      	add	r2, r3
 8015dfc:	4b21      	ldr	r3, [pc, #132]	; (8015e84 <f_mkfs+0x854>)
 8015dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8015e02:	1ad2      	subs	r2, r2, r3
 8015e04:	0852      	lsrs	r2, r2, #1
 8015e06:	4413      	add	r3, r2
 8015e08:	0b5b      	lsrs	r3, r3, #13
 8015e0a:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 8015e0c:	69bb      	ldr	r3, [r7, #24]
 8015e0e:	3305      	adds	r3, #5
 8015e10:	22fe      	movs	r2, #254	; 0xfe
 8015e12:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8015e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015e16:	089b      	lsrs	r3, r3, #2
 8015e18:	b2da      	uxtb	r2, r3
 8015e1a:	69bb      	ldr	r3, [r7, #24]
 8015e1c:	3306      	adds	r3, #6
 8015e1e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8015e22:	b2d2      	uxtb	r2, r2
 8015e24:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8015e26:	69bb      	ldr	r3, [r7, #24]
 8015e28:	3307      	adds	r3, #7
 8015e2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015e2c:	b2d2      	uxtb	r2, r2
 8015e2e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8015e30:	69bb      	ldr	r3, [r7, #24]
 8015e32:	3308      	adds	r3, #8
 8015e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015e36:	4618      	mov	r0, r3
 8015e38:	f7fc fd52 	bl	80128e0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8015e3c:	69bb      	ldr	r3, [r7, #24]
 8015e3e:	330c      	adds	r3, #12
 8015e40:	693a      	ldr	r2, [r7, #16]
 8015e42:	4611      	mov	r1, r2
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7fc fd4b 	bl	80128e0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8015e4a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015e4e:	2301      	movs	r3, #1
 8015e50:	2200      	movs	r2, #0
 8015e52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015e54:	f7fc fcb0 	bl	80127b8 <disk_write>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d001      	beq.n	8015e62 <f_mkfs+0x832>
 8015e5e:	2301      	movs	r3, #1
 8015e60:	e00c      	b.n	8015e7c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8015e62:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015e66:	2200      	movs	r2, #0
 8015e68:	2100      	movs	r1, #0
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f7fc fcc4 	bl	80127f8 <disk_ioctl>
 8015e70:	4603      	mov	r3, r0
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d001      	beq.n	8015e7a <f_mkfs+0x84a>
 8015e76:	2301      	movs	r3, #1
 8015e78:	e000      	b.n	8015e7c <f_mkfs+0x84c>

	return FR_OK;
 8015e7a:	2300      	movs	r3, #0
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3774      	adds	r7, #116	; 0x74
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd90      	pop	{r4, r7, pc}
 8015e84:	0515565b 	.word	0x0515565b

08015e88 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b084      	sub	sp, #16
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
 8015e90:	460b      	mov	r3, r1
 8015e92:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8015e94:	78fb      	ldrb	r3, [r7, #3]
 8015e96:	2b0a      	cmp	r3, #10
 8015e98:	d103      	bne.n	8015ea2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8015e9a:	210d      	movs	r1, #13
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f7ff fff3 	bl	8015e88 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	685b      	ldr	r3, [r3, #4]
 8015ea6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	db25      	blt.n	8015efa <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	1c5a      	adds	r2, r3, #1
 8015eb2:	60fa      	str	r2, [r7, #12]
 8015eb4:	687a      	ldr	r2, [r7, #4]
 8015eb6:	4413      	add	r3, r2
 8015eb8:	78fa      	ldrb	r2, [r7, #3]
 8015eba:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	2b3c      	cmp	r3, #60	; 0x3c
 8015ec0:	dd12      	ble.n	8015ee8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6818      	ldr	r0, [r3, #0]
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	f103 010c 	add.w	r1, r3, #12
 8015ecc:	68fa      	ldr	r2, [r7, #12]
 8015ece:	f107 0308 	add.w	r3, r7, #8
 8015ed2:	f7fe ff99 	bl	8014e08 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8015ed6:	68ba      	ldr	r2, [r7, #8]
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	429a      	cmp	r2, r3
 8015edc:	d101      	bne.n	8015ee2 <putc_bfd+0x5a>
 8015ede:	2300      	movs	r3, #0
 8015ee0:	e001      	b.n	8015ee6 <putc_bfd+0x5e>
 8015ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ee6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	68fa      	ldr	r2, [r7, #12]
 8015eec:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	689b      	ldr	r3, [r3, #8]
 8015ef2:	1c5a      	adds	r2, r3, #1
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	609a      	str	r2, [r3, #8]
 8015ef8:	e000      	b.n	8015efc <putc_bfd+0x74>
	if (i < 0) return;
 8015efa:	bf00      	nop
}
 8015efc:	3710      	adds	r7, #16
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}

08015f02 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8015f02:	b580      	push	{r7, lr}
 8015f04:	b084      	sub	sp, #16
 8015f06:	af00      	add	r7, sp, #0
 8015f08:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	685b      	ldr	r3, [r3, #4]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	db17      	blt.n	8015f42 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	6818      	ldr	r0, [r3, #0]
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f103 010c 	add.w	r1, r3, #12
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	461a      	mov	r2, r3
 8015f22:	f107 030c 	add.w	r3, r7, #12
 8015f26:	f7fe ff6f 	bl	8014e08 <f_write>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d108      	bne.n	8015f42 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	685b      	ldr	r3, [r3, #4]
 8015f34:	461a      	mov	r2, r3
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d102      	bne.n	8015f42 <putc_flush+0x40>
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	689b      	ldr	r3, [r3, #8]
 8015f40:	e001      	b.n	8015f46 <putc_flush+0x44>
	return EOF;
 8015f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3710      	adds	r7, #16
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}

08015f4e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8015f4e:	b480      	push	{r7}
 8015f50:	b083      	sub	sp, #12
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	6078      	str	r0, [r7, #4]
 8015f56:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	683a      	ldr	r2, [r7, #0]
 8015f5c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	2200      	movs	r2, #0
 8015f62:	605a      	str	r2, [r3, #4]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	685a      	ldr	r2, [r3, #4]
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	609a      	str	r2, [r3, #8]
}
 8015f6c:	bf00      	nop
 8015f6e:	370c      	adds	r7, #12
 8015f70:	46bd      	mov	sp, r7
 8015f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f76:	4770      	bx	lr

08015f78 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b096      	sub	sp, #88	; 0x58
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
 8015f80:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8015f82:	f107 030c 	add.w	r3, r7, #12
 8015f86:	6839      	ldr	r1, [r7, #0]
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f7ff ffe0 	bl	8015f4e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8015f8e:	e009      	b.n	8015fa4 <f_puts+0x2c>
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	1c5a      	adds	r2, r3, #1
 8015f94:	607a      	str	r2, [r7, #4]
 8015f96:	781a      	ldrb	r2, [r3, #0]
 8015f98:	f107 030c 	add.w	r3, r7, #12
 8015f9c:	4611      	mov	r1, r2
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f7ff ff72 	bl	8015e88 <putc_bfd>
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	781b      	ldrb	r3, [r3, #0]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d1f1      	bne.n	8015f90 <f_puts+0x18>
	return putc_flush(&pb);
 8015fac:	f107 030c 	add.w	r3, r7, #12
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f7ff ffa6 	bl	8015f02 <putc_flush>
 8015fb6:	4603      	mov	r3, r0
}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	3758      	adds	r7, #88	; 0x58
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	bd80      	pop	{r7, pc}

08015fc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	b087      	sub	sp, #28
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	60f8      	str	r0, [r7, #12]
 8015fc8:	60b9      	str	r1, [r7, #8]
 8015fca:	4613      	mov	r3, r2
 8015fcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015fce:	2301      	movs	r3, #1
 8015fd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015fd6:	4b1f      	ldr	r3, [pc, #124]	; (8016054 <FATFS_LinkDriverEx+0x94>)
 8015fd8:	7a5b      	ldrb	r3, [r3, #9]
 8015fda:	b2db      	uxtb	r3, r3
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d131      	bne.n	8016044 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015fe0:	4b1c      	ldr	r3, [pc, #112]	; (8016054 <FATFS_LinkDriverEx+0x94>)
 8015fe2:	7a5b      	ldrb	r3, [r3, #9]
 8015fe4:	b2db      	uxtb	r3, r3
 8015fe6:	461a      	mov	r2, r3
 8015fe8:	4b1a      	ldr	r3, [pc, #104]	; (8016054 <FATFS_LinkDriverEx+0x94>)
 8015fea:	2100      	movs	r1, #0
 8015fec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015fee:	4b19      	ldr	r3, [pc, #100]	; (8016054 <FATFS_LinkDriverEx+0x94>)
 8015ff0:	7a5b      	ldrb	r3, [r3, #9]
 8015ff2:	b2db      	uxtb	r3, r3
 8015ff4:	4a17      	ldr	r2, [pc, #92]	; (8016054 <FATFS_LinkDriverEx+0x94>)
 8015ff6:	009b      	lsls	r3, r3, #2
 8015ff8:	4413      	add	r3, r2
 8015ffa:	68fa      	ldr	r2, [r7, #12]
 8015ffc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015ffe:	4b15      	ldr	r3, [pc, #84]	; (8016054 <FATFS_LinkDriverEx+0x94>)
 8016000:	7a5b      	ldrb	r3, [r3, #9]
 8016002:	b2db      	uxtb	r3, r3
 8016004:	461a      	mov	r2, r3
 8016006:	4b13      	ldr	r3, [pc, #76]	; (8016054 <FATFS_LinkDriverEx+0x94>)
 8016008:	4413      	add	r3, r2
 801600a:	79fa      	ldrb	r2, [r7, #7]
 801600c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801600e:	4b11      	ldr	r3, [pc, #68]	; (8016054 <FATFS_LinkDriverEx+0x94>)
 8016010:	7a5b      	ldrb	r3, [r3, #9]
 8016012:	b2db      	uxtb	r3, r3
 8016014:	1c5a      	adds	r2, r3, #1
 8016016:	b2d1      	uxtb	r1, r2
 8016018:	4a0e      	ldr	r2, [pc, #56]	; (8016054 <FATFS_LinkDriverEx+0x94>)
 801601a:	7251      	strb	r1, [r2, #9]
 801601c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801601e:	7dbb      	ldrb	r3, [r7, #22]
 8016020:	3330      	adds	r3, #48	; 0x30
 8016022:	b2da      	uxtb	r2, r3
 8016024:	68bb      	ldr	r3, [r7, #8]
 8016026:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016028:	68bb      	ldr	r3, [r7, #8]
 801602a:	3301      	adds	r3, #1
 801602c:	223a      	movs	r2, #58	; 0x3a
 801602e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016030:	68bb      	ldr	r3, [r7, #8]
 8016032:	3302      	adds	r3, #2
 8016034:	222f      	movs	r2, #47	; 0x2f
 8016036:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016038:	68bb      	ldr	r3, [r7, #8]
 801603a:	3303      	adds	r3, #3
 801603c:	2200      	movs	r2, #0
 801603e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016040:	2300      	movs	r3, #0
 8016042:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016044:	7dfb      	ldrb	r3, [r7, #23]
}
 8016046:	4618      	mov	r0, r3
 8016048:	371c      	adds	r7, #28
 801604a:	46bd      	mov	sp, r7
 801604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016050:	4770      	bx	lr
 8016052:	bf00      	nop
 8016054:	20000e2c 	.word	0x20000e2c

08016058 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b082      	sub	sp, #8
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016062:	2200      	movs	r2, #0
 8016064:	6839      	ldr	r1, [r7, #0]
 8016066:	6878      	ldr	r0, [r7, #4]
 8016068:	f7ff ffaa 	bl	8015fc0 <FATFS_LinkDriverEx>
 801606c:	4603      	mov	r3, r0
}
 801606e:	4618      	mov	r0, r3
 8016070:	3708      	adds	r7, #8
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}
	...

08016078 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8016078:	b480      	push	{r7}
 801607a:	b085      	sub	sp, #20
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
 8016080:	460b      	mov	r3, r1
 8016082:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8016084:	2300      	movs	r3, #0
 8016086:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8016088:	2301      	movs	r3, #1
 801608a:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 801608c:	4b15      	ldr	r3, [pc, #84]	; (80160e4 <FATFS_UnLinkDriverEx+0x6c>)
 801608e:	7a5b      	ldrb	r3, [r3, #9]
 8016090:	b2db      	uxtb	r3, r3
 8016092:	2b00      	cmp	r3, #0
 8016094:	d01e      	beq.n	80160d4 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	781b      	ldrb	r3, [r3, #0]
 801609a:	3b30      	subs	r3, #48	; 0x30
 801609c:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 801609e:	7bbb      	ldrb	r3, [r7, #14]
 80160a0:	4a10      	ldr	r2, [pc, #64]	; (80160e4 <FATFS_UnLinkDriverEx+0x6c>)
 80160a2:	009b      	lsls	r3, r3, #2
 80160a4:	4413      	add	r3, r2
 80160a6:	685b      	ldr	r3, [r3, #4]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d013      	beq.n	80160d4 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80160ac:	7bbb      	ldrb	r3, [r7, #14]
 80160ae:	4a0d      	ldr	r2, [pc, #52]	; (80160e4 <FATFS_UnLinkDriverEx+0x6c>)
 80160b0:	009b      	lsls	r3, r3, #2
 80160b2:	4413      	add	r3, r2
 80160b4:	2200      	movs	r2, #0
 80160b6:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 80160b8:	7bbb      	ldrb	r3, [r7, #14]
 80160ba:	4a0a      	ldr	r2, [pc, #40]	; (80160e4 <FATFS_UnLinkDriverEx+0x6c>)
 80160bc:	4413      	add	r3, r2
 80160be:	2200      	movs	r2, #0
 80160c0:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 80160c2:	4b08      	ldr	r3, [pc, #32]	; (80160e4 <FATFS_UnLinkDriverEx+0x6c>)
 80160c4:	7a5b      	ldrb	r3, [r3, #9]
 80160c6:	b2db      	uxtb	r3, r3
 80160c8:	3b01      	subs	r3, #1
 80160ca:	b2da      	uxtb	r2, r3
 80160cc:	4b05      	ldr	r3, [pc, #20]	; (80160e4 <FATFS_UnLinkDriverEx+0x6c>)
 80160ce:	725a      	strb	r2, [r3, #9]
      ret = 0;
 80160d0:	2300      	movs	r3, #0
 80160d2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80160d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	3714      	adds	r7, #20
 80160da:	46bd      	mov	sp, r7
 80160dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e0:	4770      	bx	lr
 80160e2:	bf00      	nop
 80160e4:	20000e2c 	.word	0x20000e2c

080160e8 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b082      	sub	sp, #8
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 80160f0:	2100      	movs	r1, #0
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f7ff ffc0 	bl	8016078 <FATFS_UnLinkDriverEx>
 80160f8:	4603      	mov	r3, r0
}
 80160fa:	4618      	mov	r0, r3
 80160fc:	3708      	adds	r7, #8
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}
	...

08016104 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8016104:	b480      	push	{r7}
 8016106:	b085      	sub	sp, #20
 8016108:	af00      	add	r7, sp, #0
 801610a:	4603      	mov	r3, r0
 801610c:	6039      	str	r1, [r7, #0]
 801610e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016110:	88fb      	ldrh	r3, [r7, #6]
 8016112:	2b7f      	cmp	r3, #127	; 0x7f
 8016114:	d802      	bhi.n	801611c <ff_convert+0x18>
		c = chr;
 8016116:	88fb      	ldrh	r3, [r7, #6]
 8016118:	81fb      	strh	r3, [r7, #14]
 801611a:	e025      	b.n	8016168 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d00b      	beq.n	801613a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8016122:	88fb      	ldrh	r3, [r7, #6]
 8016124:	2bff      	cmp	r3, #255	; 0xff
 8016126:	d805      	bhi.n	8016134 <ff_convert+0x30>
 8016128:	88fb      	ldrh	r3, [r7, #6]
 801612a:	3b80      	subs	r3, #128	; 0x80
 801612c:	4a12      	ldr	r2, [pc, #72]	; (8016178 <ff_convert+0x74>)
 801612e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016132:	e000      	b.n	8016136 <ff_convert+0x32>
 8016134:	2300      	movs	r3, #0
 8016136:	81fb      	strh	r3, [r7, #14]
 8016138:	e016      	b.n	8016168 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801613a:	2300      	movs	r3, #0
 801613c:	81fb      	strh	r3, [r7, #14]
 801613e:	e009      	b.n	8016154 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016140:	89fb      	ldrh	r3, [r7, #14]
 8016142:	4a0d      	ldr	r2, [pc, #52]	; (8016178 <ff_convert+0x74>)
 8016144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016148:	88fa      	ldrh	r2, [r7, #6]
 801614a:	429a      	cmp	r2, r3
 801614c:	d006      	beq.n	801615c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801614e:	89fb      	ldrh	r3, [r7, #14]
 8016150:	3301      	adds	r3, #1
 8016152:	81fb      	strh	r3, [r7, #14]
 8016154:	89fb      	ldrh	r3, [r7, #14]
 8016156:	2b7f      	cmp	r3, #127	; 0x7f
 8016158:	d9f2      	bls.n	8016140 <ff_convert+0x3c>
 801615a:	e000      	b.n	801615e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801615c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801615e:	89fb      	ldrh	r3, [r7, #14]
 8016160:	3380      	adds	r3, #128	; 0x80
 8016162:	b29b      	uxth	r3, r3
 8016164:	b2db      	uxtb	r3, r3
 8016166:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016168:	89fb      	ldrh	r3, [r7, #14]
}
 801616a:	4618      	mov	r0, r3
 801616c:	3714      	adds	r7, #20
 801616e:	46bd      	mov	sp, r7
 8016170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016174:	4770      	bx	lr
 8016176:	bf00      	nop
 8016178:	0801b4e4 	.word	0x0801b4e4

0801617c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801617c:	b480      	push	{r7}
 801617e:	b087      	sub	sp, #28
 8016180:	af00      	add	r7, sp, #0
 8016182:	4603      	mov	r3, r0
 8016184:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8016186:	88fb      	ldrh	r3, [r7, #6]
 8016188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801618c:	d201      	bcs.n	8016192 <ff_wtoupper+0x16>
 801618e:	4b3e      	ldr	r3, [pc, #248]	; (8016288 <ff_wtoupper+0x10c>)
 8016190:	e000      	b.n	8016194 <ff_wtoupper+0x18>
 8016192:	4b3e      	ldr	r3, [pc, #248]	; (801628c <ff_wtoupper+0x110>)
 8016194:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8016196:	697b      	ldr	r3, [r7, #20]
 8016198:	1c9a      	adds	r2, r3, #2
 801619a:	617a      	str	r2, [r7, #20]
 801619c:	881b      	ldrh	r3, [r3, #0]
 801619e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80161a0:	8a7b      	ldrh	r3, [r7, #18]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d068      	beq.n	8016278 <ff_wtoupper+0xfc>
 80161a6:	88fa      	ldrh	r2, [r7, #6]
 80161a8:	8a7b      	ldrh	r3, [r7, #18]
 80161aa:	429a      	cmp	r2, r3
 80161ac:	d364      	bcc.n	8016278 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	1c9a      	adds	r2, r3, #2
 80161b2:	617a      	str	r2, [r7, #20]
 80161b4:	881b      	ldrh	r3, [r3, #0]
 80161b6:	823b      	strh	r3, [r7, #16]
 80161b8:	8a3b      	ldrh	r3, [r7, #16]
 80161ba:	0a1b      	lsrs	r3, r3, #8
 80161bc:	81fb      	strh	r3, [r7, #14]
 80161be:	8a3b      	ldrh	r3, [r7, #16]
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80161c4:	88fa      	ldrh	r2, [r7, #6]
 80161c6:	8a79      	ldrh	r1, [r7, #18]
 80161c8:	8a3b      	ldrh	r3, [r7, #16]
 80161ca:	440b      	add	r3, r1
 80161cc:	429a      	cmp	r2, r3
 80161ce:	da49      	bge.n	8016264 <ff_wtoupper+0xe8>
			switch (cmd) {
 80161d0:	89fb      	ldrh	r3, [r7, #14]
 80161d2:	2b08      	cmp	r3, #8
 80161d4:	d84f      	bhi.n	8016276 <ff_wtoupper+0xfa>
 80161d6:	a201      	add	r2, pc, #4	; (adr r2, 80161dc <ff_wtoupper+0x60>)
 80161d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161dc:	08016201 	.word	0x08016201
 80161e0:	08016213 	.word	0x08016213
 80161e4:	08016229 	.word	0x08016229
 80161e8:	08016231 	.word	0x08016231
 80161ec:	08016239 	.word	0x08016239
 80161f0:	08016241 	.word	0x08016241
 80161f4:	08016249 	.word	0x08016249
 80161f8:	08016251 	.word	0x08016251
 80161fc:	08016259 	.word	0x08016259
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8016200:	88fa      	ldrh	r2, [r7, #6]
 8016202:	8a7b      	ldrh	r3, [r7, #18]
 8016204:	1ad3      	subs	r3, r2, r3
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	697a      	ldr	r2, [r7, #20]
 801620a:	4413      	add	r3, r2
 801620c:	881b      	ldrh	r3, [r3, #0]
 801620e:	80fb      	strh	r3, [r7, #6]
 8016210:	e027      	b.n	8016262 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8016212:	88fa      	ldrh	r2, [r7, #6]
 8016214:	8a7b      	ldrh	r3, [r7, #18]
 8016216:	1ad3      	subs	r3, r2, r3
 8016218:	b29b      	uxth	r3, r3
 801621a:	f003 0301 	and.w	r3, r3, #1
 801621e:	b29b      	uxth	r3, r3
 8016220:	88fa      	ldrh	r2, [r7, #6]
 8016222:	1ad3      	subs	r3, r2, r3
 8016224:	80fb      	strh	r3, [r7, #6]
 8016226:	e01c      	b.n	8016262 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8016228:	88fb      	ldrh	r3, [r7, #6]
 801622a:	3b10      	subs	r3, #16
 801622c:	80fb      	strh	r3, [r7, #6]
 801622e:	e018      	b.n	8016262 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8016230:	88fb      	ldrh	r3, [r7, #6]
 8016232:	3b20      	subs	r3, #32
 8016234:	80fb      	strh	r3, [r7, #6]
 8016236:	e014      	b.n	8016262 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8016238:	88fb      	ldrh	r3, [r7, #6]
 801623a:	3b30      	subs	r3, #48	; 0x30
 801623c:	80fb      	strh	r3, [r7, #6]
 801623e:	e010      	b.n	8016262 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8016240:	88fb      	ldrh	r3, [r7, #6]
 8016242:	3b1a      	subs	r3, #26
 8016244:	80fb      	strh	r3, [r7, #6]
 8016246:	e00c      	b.n	8016262 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8016248:	88fb      	ldrh	r3, [r7, #6]
 801624a:	3308      	adds	r3, #8
 801624c:	80fb      	strh	r3, [r7, #6]
 801624e:	e008      	b.n	8016262 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8016250:	88fb      	ldrh	r3, [r7, #6]
 8016252:	3b50      	subs	r3, #80	; 0x50
 8016254:	80fb      	strh	r3, [r7, #6]
 8016256:	e004      	b.n	8016262 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8016258:	88fb      	ldrh	r3, [r7, #6]
 801625a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801625e:	80fb      	strh	r3, [r7, #6]
 8016260:	bf00      	nop
			}
			break;
 8016262:	e008      	b.n	8016276 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8016264:	89fb      	ldrh	r3, [r7, #14]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d195      	bne.n	8016196 <ff_wtoupper+0x1a>
 801626a:	8a3b      	ldrh	r3, [r7, #16]
 801626c:	005b      	lsls	r3, r3, #1
 801626e:	697a      	ldr	r2, [r7, #20]
 8016270:	4413      	add	r3, r2
 8016272:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8016274:	e78f      	b.n	8016196 <ff_wtoupper+0x1a>
			break;
 8016276:	bf00      	nop
	}

	return chr;
 8016278:	88fb      	ldrh	r3, [r7, #6]
}
 801627a:	4618      	mov	r0, r3
 801627c:	371c      	adds	r7, #28
 801627e:	46bd      	mov	sp, r7
 8016280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016284:	4770      	bx	lr
 8016286:	bf00      	nop
 8016288:	0801b5e4 	.word	0x0801b5e4
 801628c:	0801b7d8 	.word	0x0801b7d8

08016290 <rxCliInput>:

	cliInitialized = true;
	return CLI_OK;
}

void rxCliInput(uint8_t* Buf, uint32_t *Len) {
 8016290:	b580      	push	{r7, lr}
 8016292:	b082      	sub	sp, #8
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
 8016298:	6039      	str	r1, [r7, #0]
	if (Buf[0] != 13){					// Ignore Return Character
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	781b      	ldrb	r3, [r3, #0]
 801629e:	2b0d      	cmp	r3, #13
 80162a0:	d00d      	beq.n	80162be <rxCliInput+0x2e>
		usbCli.rxFlag = true;			/* Set the flag for the parser				*/
 80162a2:	4b09      	ldr	r3, [pc, #36]	; (80162c8 <rxCliInput+0x38>)
 80162a4:	2201      	movs	r2, #1
 80162a6:	719a      	strb	r2, [r3, #6]
		usbCli.cmd_len = Len[0];		/* Store the command length for the parser	*/
 80162a8:	683b      	ldr	r3, [r7, #0]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	4a06      	ldr	r2, [pc, #24]	; (80162c8 <rxCliInput+0x38>)
 80162ae:	6093      	str	r3, [r2, #8]

		// Copy the Received String to the Buffer in the structure
		memcpy(usbCli.cmd_buffer, Buf, usbCli.cmd_len);
 80162b0:	4b05      	ldr	r3, [pc, #20]	; (80162c8 <rxCliInput+0x38>)
 80162b2:	689b      	ldr	r3, [r3, #8]
 80162b4:	461a      	mov	r2, r3
 80162b6:	6879      	ldr	r1, [r7, #4]
 80162b8:	4804      	ldr	r0, [pc, #16]	; (80162cc <rxCliInput+0x3c>)
 80162ba:	f000 fd6a 	bl	8016d92 <memcpy>
	}
}
 80162be:	bf00      	nop
 80162c0:	3708      	adds	r7, #8
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}
 80162c6:	bf00      	nop
 80162c8:	20000e38 	.word	0x20000e38
 80162cc:	20000e44 	.word	0x20000e44

080162d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80162d4:	2200      	movs	r2, #0
 80162d6:	4912      	ldr	r1, [pc, #72]	; (8016320 <MX_USB_DEVICE_Init+0x50>)
 80162d8:	4812      	ldr	r0, [pc, #72]	; (8016324 <MX_USB_DEVICE_Init+0x54>)
 80162da:	f7fb f9b3 	bl	8011644 <USBD_Init>
 80162de:	4603      	mov	r3, r0
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d001      	beq.n	80162e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80162e4:	f7ee fcbc 	bl	8004c60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80162e8:	490f      	ldr	r1, [pc, #60]	; (8016328 <MX_USB_DEVICE_Init+0x58>)
 80162ea:	480e      	ldr	r0, [pc, #56]	; (8016324 <MX_USB_DEVICE_Init+0x54>)
 80162ec:	f7fb f9d5 	bl	801169a <USBD_RegisterClass>
 80162f0:	4603      	mov	r3, r0
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d001      	beq.n	80162fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80162f6:	f7ee fcb3 	bl	8004c60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80162fa:	490c      	ldr	r1, [pc, #48]	; (801632c <MX_USB_DEVICE_Init+0x5c>)
 80162fc:	4809      	ldr	r0, [pc, #36]	; (8016324 <MX_USB_DEVICE_Init+0x54>)
 80162fe:	f7fb f903 	bl	8011508 <USBD_CDC_RegisterInterface>
 8016302:	4603      	mov	r3, r0
 8016304:	2b00      	cmp	r3, #0
 8016306:	d001      	beq.n	801630c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016308:	f7ee fcaa 	bl	8004c60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801630c:	4805      	ldr	r0, [pc, #20]	; (8016324 <MX_USB_DEVICE_Init+0x54>)
 801630e:	f7fb f9de 	bl	80116ce <USBD_Start>
 8016312:	4603      	mov	r3, r0
 8016314:	2b00      	cmp	r3, #0
 8016316:	d001      	beq.n	801631c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016318:	f7ee fca2 	bl	8004c60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801631c:	bf00      	nop
 801631e:	bd80      	pop	{r7, pc}
 8016320:	20000184 	.word	0x20000184
 8016324:	200017b0 	.word	0x200017b0
 8016328:	20000068 	.word	0x20000068
 801632c:	20000174 	.word	0x20000174

08016330 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016334:	2200      	movs	r2, #0
 8016336:	4905      	ldr	r1, [pc, #20]	; (801634c <CDC_Init_FS+0x1c>)
 8016338:	4805      	ldr	r0, [pc, #20]	; (8016350 <CDC_Init_FS+0x20>)
 801633a:	f7fb f8fc 	bl	8011536 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801633e:	4905      	ldr	r1, [pc, #20]	; (8016354 <CDC_Init_FS+0x24>)
 8016340:	4803      	ldr	r0, [pc, #12]	; (8016350 <CDC_Init_FS+0x20>)
 8016342:	f7fb f912 	bl	801156a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016346:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016348:	4618      	mov	r0, r3
 801634a:	bd80      	pop	{r7, pc}
 801634c:	20001e4c 	.word	0x20001e4c
 8016350:	200017b0 	.word	0x200017b0
 8016354:	20001a4c 	.word	0x20001a4c

08016358 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016358:	b480      	push	{r7}
 801635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801635c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801635e:	4618      	mov	r0, r3
 8016360:	46bd      	mov	sp, r7
 8016362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016366:	4770      	bx	lr

08016368 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016368:	b480      	push	{r7}
 801636a:	b083      	sub	sp, #12
 801636c:	af00      	add	r7, sp, #0
 801636e:	4603      	mov	r3, r0
 8016370:	6039      	str	r1, [r7, #0]
 8016372:	71fb      	strb	r3, [r7, #7]
 8016374:	4613      	mov	r3, r2
 8016376:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016378:	79fb      	ldrb	r3, [r7, #7]
 801637a:	2b23      	cmp	r3, #35	; 0x23
 801637c:	d85c      	bhi.n	8016438 <CDC_Control_FS+0xd0>
 801637e:	a201      	add	r2, pc, #4	; (adr r2, 8016384 <CDC_Control_FS+0x1c>)
 8016380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016384:	08016439 	.word	0x08016439
 8016388:	08016439 	.word	0x08016439
 801638c:	08016439 	.word	0x08016439
 8016390:	08016439 	.word	0x08016439
 8016394:	08016439 	.word	0x08016439
 8016398:	08016439 	.word	0x08016439
 801639c:	08016439 	.word	0x08016439
 80163a0:	08016439 	.word	0x08016439
 80163a4:	08016439 	.word	0x08016439
 80163a8:	08016439 	.word	0x08016439
 80163ac:	08016439 	.word	0x08016439
 80163b0:	08016439 	.word	0x08016439
 80163b4:	08016439 	.word	0x08016439
 80163b8:	08016439 	.word	0x08016439
 80163bc:	08016439 	.word	0x08016439
 80163c0:	08016439 	.word	0x08016439
 80163c4:	08016439 	.word	0x08016439
 80163c8:	08016439 	.word	0x08016439
 80163cc:	08016439 	.word	0x08016439
 80163d0:	08016439 	.word	0x08016439
 80163d4:	08016439 	.word	0x08016439
 80163d8:	08016439 	.word	0x08016439
 80163dc:	08016439 	.word	0x08016439
 80163e0:	08016439 	.word	0x08016439
 80163e4:	08016439 	.word	0x08016439
 80163e8:	08016439 	.word	0x08016439
 80163ec:	08016439 	.word	0x08016439
 80163f0:	08016439 	.word	0x08016439
 80163f4:	08016439 	.word	0x08016439
 80163f8:	08016439 	.word	0x08016439
 80163fc:	08016439 	.word	0x08016439
 8016400:	08016439 	.word	0x08016439
 8016404:	08016415 	.word	0x08016415
 8016408:	08016427 	.word	0x08016427
 801640c:	08016439 	.word	0x08016439
 8016410:	08016439 	.word	0x08016439
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) );
 8016414:	4b0c      	ldr	r3, [pc, #48]	; (8016448 <CDC_Control_FS+0xe0>)
 8016416:	683a      	ldr	r2, [r7, #0]
 8016418:	6810      	ldr	r0, [r2, #0]
 801641a:	6018      	str	r0, [r3, #0]
 801641c:	8891      	ldrh	r1, [r2, #4]
 801641e:	7992      	ldrb	r2, [r2, #6]
 8016420:	8099      	strh	r1, [r3, #4]
 8016422:	719a      	strb	r2, [r3, #6]
    break;
 8016424:	e009      	b.n	801643a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) );
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	4a07      	ldr	r2, [pc, #28]	; (8016448 <CDC_Control_FS+0xe0>)
 801642a:	6810      	ldr	r0, [r2, #0]
 801642c:	6018      	str	r0, [r3, #0]
 801642e:	8891      	ldrh	r1, [r2, #4]
 8016430:	7992      	ldrb	r2, [r2, #6]
 8016432:	8099      	strh	r1, [r3, #4]
 8016434:	719a      	strb	r2, [r3, #6]
    break;
 8016436:	e000      	b.n	801643a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016438:	bf00      	nop
  }

  return (USBD_OK);
 801643a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801643c:	4618      	mov	r0, r3
 801643e:	370c      	adds	r7, #12
 8016440:	46bd      	mov	sp, r7
 8016442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016446:	4770      	bx	lr
 8016448:	2000016c 	.word	0x2000016c

0801644c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b082      	sub	sp, #8
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016456:	6879      	ldr	r1, [r7, #4]
 8016458:	4807      	ldr	r0, [pc, #28]	; (8016478 <CDC_Receive_FS+0x2c>)
 801645a:	f7fb f886 	bl	801156a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801645e:	4806      	ldr	r0, [pc, #24]	; (8016478 <CDC_Receive_FS+0x2c>)
 8016460:	f7fb f8c6 	bl	80115f0 <USBD_CDC_ReceivePacket>

  // Feed the buffer through to the CLI parser
  rxCliInput(Buf, Len);
 8016464:	6839      	ldr	r1, [r7, #0]
 8016466:	6878      	ldr	r0, [r7, #4]
 8016468:	f7ff ff12 	bl	8016290 <rxCliInput>

  return (USBD_OK);
 801646c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801646e:	4618      	mov	r0, r3
 8016470:	3708      	adds	r7, #8
 8016472:	46bd      	mov	sp, r7
 8016474:	bd80      	pop	{r7, pc}
 8016476:	bf00      	nop
 8016478:	200017b0 	.word	0x200017b0

0801647c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b084      	sub	sp, #16
 8016480:	af00      	add	r7, sp, #0
 8016482:	6078      	str	r0, [r7, #4]
 8016484:	460b      	mov	r3, r1
 8016486:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016488:	2300      	movs	r3, #0
 801648a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801648c:	4b0d      	ldr	r3, [pc, #52]	; (80164c4 <CDC_Transmit_FS+0x48>)
 801648e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8016492:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016494:	68bb      	ldr	r3, [r7, #8]
 8016496:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801649a:	2b00      	cmp	r3, #0
 801649c:	d001      	beq.n	80164a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801649e:	2301      	movs	r3, #1
 80164a0:	e00b      	b.n	80164ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80164a2:	887b      	ldrh	r3, [r7, #2]
 80164a4:	461a      	mov	r2, r3
 80164a6:	6879      	ldr	r1, [r7, #4]
 80164a8:	4806      	ldr	r0, [pc, #24]	; (80164c4 <CDC_Transmit_FS+0x48>)
 80164aa:	f7fb f844 	bl	8011536 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80164ae:	4805      	ldr	r0, [pc, #20]	; (80164c4 <CDC_Transmit_FS+0x48>)
 80164b0:	f7fb f86f 	bl	8011592 <USBD_CDC_TransmitPacket>
 80164b4:	4603      	mov	r3, r0
 80164b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80164b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	3710      	adds	r7, #16
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}
 80164c2:	bf00      	nop
 80164c4:	200017b0 	.word	0x200017b0

080164c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164c8:	b480      	push	{r7}
 80164ca:	b083      	sub	sp, #12
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	4603      	mov	r3, r0
 80164d0:	6039      	str	r1, [r7, #0]
 80164d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80164d4:	683b      	ldr	r3, [r7, #0]
 80164d6:	2212      	movs	r2, #18
 80164d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80164da:	4b03      	ldr	r3, [pc, #12]	; (80164e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80164dc:	4618      	mov	r0, r3
 80164de:	370c      	adds	r7, #12
 80164e0:	46bd      	mov	sp, r7
 80164e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e6:	4770      	bx	lr
 80164e8:	200001a0 	.word	0x200001a0

080164ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164ec:	b480      	push	{r7}
 80164ee:	b083      	sub	sp, #12
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	4603      	mov	r3, r0
 80164f4:	6039      	str	r1, [r7, #0]
 80164f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	2204      	movs	r2, #4
 80164fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80164fe:	4b03      	ldr	r3, [pc, #12]	; (801650c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016500:	4618      	mov	r0, r3
 8016502:	370c      	adds	r7, #12
 8016504:	46bd      	mov	sp, r7
 8016506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650a:	4770      	bx	lr
 801650c:	200001b4 	.word	0x200001b4

08016510 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
 8016516:	4603      	mov	r3, r0
 8016518:	6039      	str	r1, [r7, #0]
 801651a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801651c:	79fb      	ldrb	r3, [r7, #7]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d105      	bne.n	801652e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016522:	683a      	ldr	r2, [r7, #0]
 8016524:	4907      	ldr	r1, [pc, #28]	; (8016544 <USBD_FS_ProductStrDescriptor+0x34>)
 8016526:	4808      	ldr	r0, [pc, #32]	; (8016548 <USBD_FS_ProductStrDescriptor+0x38>)
 8016528:	f7fc f808 	bl	801253c <USBD_GetString>
 801652c:	e004      	b.n	8016538 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801652e:	683a      	ldr	r2, [r7, #0]
 8016530:	4904      	ldr	r1, [pc, #16]	; (8016544 <USBD_FS_ProductStrDescriptor+0x34>)
 8016532:	4805      	ldr	r0, [pc, #20]	; (8016548 <USBD_FS_ProductStrDescriptor+0x38>)
 8016534:	f7fc f802 	bl	801253c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016538:	4b02      	ldr	r3, [pc, #8]	; (8016544 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801653a:	4618      	mov	r0, r3
 801653c:	3708      	adds	r7, #8
 801653e:	46bd      	mov	sp, r7
 8016540:	bd80      	pop	{r7, pc}
 8016542:	bf00      	nop
 8016544:	2000224c 	.word	0x2000224c
 8016548:	080177ac 	.word	0x080177ac

0801654c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b082      	sub	sp, #8
 8016550:	af00      	add	r7, sp, #0
 8016552:	4603      	mov	r3, r0
 8016554:	6039      	str	r1, [r7, #0]
 8016556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016558:	683a      	ldr	r2, [r7, #0]
 801655a:	4904      	ldr	r1, [pc, #16]	; (801656c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801655c:	4804      	ldr	r0, [pc, #16]	; (8016570 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801655e:	f7fb ffed 	bl	801253c <USBD_GetString>
  return USBD_StrDesc;
 8016562:	4b02      	ldr	r3, [pc, #8]	; (801656c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016564:	4618      	mov	r0, r3
 8016566:	3708      	adds	r7, #8
 8016568:	46bd      	mov	sp, r7
 801656a:	bd80      	pop	{r7, pc}
 801656c:	2000224c 	.word	0x2000224c
 8016570:	080177c4 	.word	0x080177c4

08016574 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b082      	sub	sp, #8
 8016578:	af00      	add	r7, sp, #0
 801657a:	4603      	mov	r3, r0
 801657c:	6039      	str	r1, [r7, #0]
 801657e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	221a      	movs	r2, #26
 8016584:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016586:	f000 f843 	bl	8016610 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801658a:	4b02      	ldr	r3, [pc, #8]	; (8016594 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801658c:	4618      	mov	r0, r3
 801658e:	3708      	adds	r7, #8
 8016590:	46bd      	mov	sp, r7
 8016592:	bd80      	pop	{r7, pc}
 8016594:	200001b8 	.word	0x200001b8

08016598 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b082      	sub	sp, #8
 801659c:	af00      	add	r7, sp, #0
 801659e:	4603      	mov	r3, r0
 80165a0:	6039      	str	r1, [r7, #0]
 80165a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80165a4:	79fb      	ldrb	r3, [r7, #7]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d105      	bne.n	80165b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80165aa:	683a      	ldr	r2, [r7, #0]
 80165ac:	4907      	ldr	r1, [pc, #28]	; (80165cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80165ae:	4808      	ldr	r0, [pc, #32]	; (80165d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80165b0:	f7fb ffc4 	bl	801253c <USBD_GetString>
 80165b4:	e004      	b.n	80165c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80165b6:	683a      	ldr	r2, [r7, #0]
 80165b8:	4904      	ldr	r1, [pc, #16]	; (80165cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80165ba:	4805      	ldr	r0, [pc, #20]	; (80165d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80165bc:	f7fb ffbe 	bl	801253c <USBD_GetString>
  }
  return USBD_StrDesc;
 80165c0:	4b02      	ldr	r3, [pc, #8]	; (80165cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	3708      	adds	r7, #8
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}
 80165ca:	bf00      	nop
 80165cc:	2000224c 	.word	0x2000224c
 80165d0:	080177d8 	.word	0x080177d8

080165d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b082      	sub	sp, #8
 80165d8:	af00      	add	r7, sp, #0
 80165da:	4603      	mov	r3, r0
 80165dc:	6039      	str	r1, [r7, #0]
 80165de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80165e0:	79fb      	ldrb	r3, [r7, #7]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d105      	bne.n	80165f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80165e6:	683a      	ldr	r2, [r7, #0]
 80165e8:	4907      	ldr	r1, [pc, #28]	; (8016608 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80165ea:	4808      	ldr	r0, [pc, #32]	; (801660c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80165ec:	f7fb ffa6 	bl	801253c <USBD_GetString>
 80165f0:	e004      	b.n	80165fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80165f2:	683a      	ldr	r2, [r7, #0]
 80165f4:	4904      	ldr	r1, [pc, #16]	; (8016608 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80165f6:	4805      	ldr	r0, [pc, #20]	; (801660c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80165f8:	f7fb ffa0 	bl	801253c <USBD_GetString>
  }
  return USBD_StrDesc;
 80165fc:	4b02      	ldr	r3, [pc, #8]	; (8016608 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80165fe:	4618      	mov	r0, r3
 8016600:	3708      	adds	r7, #8
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
 8016606:	bf00      	nop
 8016608:	2000224c 	.word	0x2000224c
 801660c:	080177e4 	.word	0x080177e4

08016610 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016616:	4b0f      	ldr	r3, [pc, #60]	; (8016654 <Get_SerialNum+0x44>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801661c:	4b0e      	ldr	r3, [pc, #56]	; (8016658 <Get_SerialNum+0x48>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016622:	4b0e      	ldr	r3, [pc, #56]	; (801665c <Get_SerialNum+0x4c>)
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016628:	68fa      	ldr	r2, [r7, #12]
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	4413      	add	r3, r2
 801662e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d009      	beq.n	801664a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016636:	2208      	movs	r2, #8
 8016638:	4909      	ldr	r1, [pc, #36]	; (8016660 <Get_SerialNum+0x50>)
 801663a:	68f8      	ldr	r0, [r7, #12]
 801663c:	f000 f814 	bl	8016668 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016640:	2204      	movs	r2, #4
 8016642:	4908      	ldr	r1, [pc, #32]	; (8016664 <Get_SerialNum+0x54>)
 8016644:	68b8      	ldr	r0, [r7, #8]
 8016646:	f000 f80f 	bl	8016668 <IntToUnicode>
  }
}
 801664a:	bf00      	nop
 801664c:	3710      	adds	r7, #16
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}
 8016652:	bf00      	nop
 8016654:	1fff7a10 	.word	0x1fff7a10
 8016658:	1fff7a14 	.word	0x1fff7a14
 801665c:	1fff7a18 	.word	0x1fff7a18
 8016660:	200001ba 	.word	0x200001ba
 8016664:	200001ca 	.word	0x200001ca

08016668 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016668:	b480      	push	{r7}
 801666a:	b087      	sub	sp, #28
 801666c:	af00      	add	r7, sp, #0
 801666e:	60f8      	str	r0, [r7, #12]
 8016670:	60b9      	str	r1, [r7, #8]
 8016672:	4613      	mov	r3, r2
 8016674:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016676:	2300      	movs	r3, #0
 8016678:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801667a:	2300      	movs	r3, #0
 801667c:	75fb      	strb	r3, [r7, #23]
 801667e:	e027      	b.n	80166d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	0f1b      	lsrs	r3, r3, #28
 8016684:	2b09      	cmp	r3, #9
 8016686:	d80b      	bhi.n	80166a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	0f1b      	lsrs	r3, r3, #28
 801668c:	b2da      	uxtb	r2, r3
 801668e:	7dfb      	ldrb	r3, [r7, #23]
 8016690:	005b      	lsls	r3, r3, #1
 8016692:	4619      	mov	r1, r3
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	440b      	add	r3, r1
 8016698:	3230      	adds	r2, #48	; 0x30
 801669a:	b2d2      	uxtb	r2, r2
 801669c:	701a      	strb	r2, [r3, #0]
 801669e:	e00a      	b.n	80166b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	0f1b      	lsrs	r3, r3, #28
 80166a4:	b2da      	uxtb	r2, r3
 80166a6:	7dfb      	ldrb	r3, [r7, #23]
 80166a8:	005b      	lsls	r3, r3, #1
 80166aa:	4619      	mov	r1, r3
 80166ac:	68bb      	ldr	r3, [r7, #8]
 80166ae:	440b      	add	r3, r1
 80166b0:	3237      	adds	r2, #55	; 0x37
 80166b2:	b2d2      	uxtb	r2, r2
 80166b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	011b      	lsls	r3, r3, #4
 80166ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80166bc:	7dfb      	ldrb	r3, [r7, #23]
 80166be:	005b      	lsls	r3, r3, #1
 80166c0:	3301      	adds	r3, #1
 80166c2:	68ba      	ldr	r2, [r7, #8]
 80166c4:	4413      	add	r3, r2
 80166c6:	2200      	movs	r2, #0
 80166c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80166ca:	7dfb      	ldrb	r3, [r7, #23]
 80166cc:	3301      	adds	r3, #1
 80166ce:	75fb      	strb	r3, [r7, #23]
 80166d0:	7dfa      	ldrb	r2, [r7, #23]
 80166d2:	79fb      	ldrb	r3, [r7, #7]
 80166d4:	429a      	cmp	r2, r3
 80166d6:	d3d3      	bcc.n	8016680 <IntToUnicode+0x18>
  }
}
 80166d8:	bf00      	nop
 80166da:	371c      	adds	r7, #28
 80166dc:	46bd      	mov	sp, r7
 80166de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e2:	4770      	bx	lr

080166e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b08a      	sub	sp, #40	; 0x28
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80166ec:	f107 0314 	add.w	r3, r7, #20
 80166f0:	2200      	movs	r2, #0
 80166f2:	601a      	str	r2, [r3, #0]
 80166f4:	605a      	str	r2, [r3, #4]
 80166f6:	609a      	str	r2, [r3, #8]
 80166f8:	60da      	str	r2, [r3, #12]
 80166fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016704:	d152      	bne.n	80167ac <HAL_PCD_MspInit+0xc8>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8016706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801670a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801670c:	2301      	movs	r3, #1
 801670e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016710:	2300      	movs	r3, #0
 8016712:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8016714:	2302      	movs	r3, #2
 8016716:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016718:	f107 0314 	add.w	r3, r7, #20
 801671c:	4619      	mov	r1, r3
 801671e:	4825      	ldr	r0, [pc, #148]	; (80167b4 <HAL_PCD_MspInit+0xd0>)
 8016720:	f7ef f820 	bl	8005764 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8016724:	2200      	movs	r2, #0
 8016726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801672a:	4822      	ldr	r0, [pc, #136]	; (80167b4 <HAL_PCD_MspInit+0xd0>)
 801672c:	f7ef f9b4 	bl	8005a98 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8016730:	2005      	movs	r0, #5
 8016732:	f7ee fec1 	bl	80054b8 <HAL_Delay>

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016736:	2300      	movs	r3, #0
 8016738:	613b      	str	r3, [r7, #16]
 801673a:	4b1f      	ldr	r3, [pc, #124]	; (80167b8 <HAL_PCD_MspInit+0xd4>)
 801673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801673e:	4a1e      	ldr	r2, [pc, #120]	; (80167b8 <HAL_PCD_MspInit+0xd4>)
 8016740:	f043 0301 	orr.w	r3, r3, #1
 8016744:	6313      	str	r3, [r2, #48]	; 0x30
 8016746:	4b1c      	ldr	r3, [pc, #112]	; (80167b8 <HAL_PCD_MspInit+0xd4>)
 8016748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801674a:	f003 0301 	and.w	r3, r3, #1
 801674e:	613b      	str	r3, [r7, #16]
 8016750:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016752:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016758:	2302      	movs	r3, #2
 801675a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801675c:	2300      	movs	r3, #0
 801675e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016760:	2303      	movs	r3, #3
 8016762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016764:	230a      	movs	r3, #10
 8016766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016768:	f107 0314 	add.w	r3, r7, #20
 801676c:	4619      	mov	r1, r3
 801676e:	4811      	ldr	r0, [pc, #68]	; (80167b4 <HAL_PCD_MspInit+0xd0>)
 8016770:	f7ee fff8 	bl	8005764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016774:	4b10      	ldr	r3, [pc, #64]	; (80167b8 <HAL_PCD_MspInit+0xd4>)
 8016776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016778:	4a0f      	ldr	r2, [pc, #60]	; (80167b8 <HAL_PCD_MspInit+0xd4>)
 801677a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801677e:	6353      	str	r3, [r2, #52]	; 0x34
 8016780:	2300      	movs	r3, #0
 8016782:	60fb      	str	r3, [r7, #12]
 8016784:	4b0c      	ldr	r3, [pc, #48]	; (80167b8 <HAL_PCD_MspInit+0xd4>)
 8016786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016788:	4a0b      	ldr	r2, [pc, #44]	; (80167b8 <HAL_PCD_MspInit+0xd4>)
 801678a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801678e:	6453      	str	r3, [r2, #68]	; 0x44
 8016790:	4b09      	ldr	r3, [pc, #36]	; (80167b8 <HAL_PCD_MspInit+0xd4>)
 8016792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016798:	60fb      	str	r3, [r7, #12]
 801679a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801679c:	2200      	movs	r2, #0
 801679e:	2100      	movs	r1, #0
 80167a0:	2043      	movs	r0, #67	; 0x43
 80167a2:	f7ee ff86 	bl	80056b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80167a6:	2043      	movs	r0, #67	; 0x43
 80167a8:	f7ee ff9f 	bl	80056ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80167ac:	bf00      	nop
 80167ae:	3728      	adds	r7, #40	; 0x28
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bd80      	pop	{r7, pc}
 80167b4:	40020000 	.word	0x40020000
 80167b8:	40023800 	.word	0x40023800

080167bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b082      	sub	sp, #8
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80167d0:	4619      	mov	r1, r3
 80167d2:	4610      	mov	r0, r2
 80167d4:	f7fa ffc4 	bl	8011760 <USBD_LL_SetupStage>
}
 80167d8:	bf00      	nop
 80167da:	3708      	adds	r7, #8
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}

080167e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b082      	sub	sp, #8
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
 80167e8:	460b      	mov	r3, r1
 80167ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80167f2:	78fa      	ldrb	r2, [r7, #3]
 80167f4:	6879      	ldr	r1, [r7, #4]
 80167f6:	4613      	mov	r3, r2
 80167f8:	00db      	lsls	r3, r3, #3
 80167fa:	1a9b      	subs	r3, r3, r2
 80167fc:	009b      	lsls	r3, r3, #2
 80167fe:	440b      	add	r3, r1
 8016800:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016804:	681a      	ldr	r2, [r3, #0]
 8016806:	78fb      	ldrb	r3, [r7, #3]
 8016808:	4619      	mov	r1, r3
 801680a:	f7fa fff4 	bl	80117f6 <USBD_LL_DataOutStage>
}
 801680e:	bf00      	nop
 8016810:	3708      	adds	r7, #8
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}

08016816 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016816:	b580      	push	{r7, lr}
 8016818:	b082      	sub	sp, #8
 801681a:	af00      	add	r7, sp, #0
 801681c:	6078      	str	r0, [r7, #4]
 801681e:	460b      	mov	r3, r1
 8016820:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016828:	78fa      	ldrb	r2, [r7, #3]
 801682a:	6879      	ldr	r1, [r7, #4]
 801682c:	4613      	mov	r3, r2
 801682e:	00db      	lsls	r3, r3, #3
 8016830:	1a9b      	subs	r3, r3, r2
 8016832:	009b      	lsls	r3, r3, #2
 8016834:	440b      	add	r3, r1
 8016836:	3348      	adds	r3, #72	; 0x48
 8016838:	681a      	ldr	r2, [r3, #0]
 801683a:	78fb      	ldrb	r3, [r7, #3]
 801683c:	4619      	mov	r1, r3
 801683e:	f7fb f84b 	bl	80118d8 <USBD_LL_DataInStage>
}
 8016842:	bf00      	nop
 8016844:	3708      	adds	r7, #8
 8016846:	46bd      	mov	sp, r7
 8016848:	bd80      	pop	{r7, pc}

0801684a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801684a:	b580      	push	{r7, lr}
 801684c:	b082      	sub	sp, #8
 801684e:	af00      	add	r7, sp, #0
 8016850:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016858:	4618      	mov	r0, r3
 801685a:	f7fb f959 	bl	8011b10 <USBD_LL_SOF>
}
 801685e:	bf00      	nop
 8016860:	3708      	adds	r7, #8
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}

08016866 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8016866:	b580      	push	{r7, lr}
 8016868:	b084      	sub	sp, #16
 801686a:	af00      	add	r7, sp, #0
 801686c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801686e:	2301      	movs	r3, #1
 8016870:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	68db      	ldr	r3, [r3, #12]
 8016876:	2b02      	cmp	r3, #2
 8016878:	d001      	beq.n	801687e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801687a:	f7ee f9f1 	bl	8004c60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016884:	7bfa      	ldrb	r2, [r7, #15]
 8016886:	4611      	mov	r1, r2
 8016888:	4618      	mov	r0, r3
 801688a:	f7fb f90b 	bl	8011aa4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016894:	4618      	mov	r0, r3
 8016896:	f7fb f8c4 	bl	8011a22 <USBD_LL_Reset>
}
 801689a:	bf00      	nop
 801689c:	3710      	adds	r7, #16
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}
	...

080168a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7fb f906 	bl	8011ac4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	687a      	ldr	r2, [r7, #4]
 80168c4:	6812      	ldr	r2, [r2, #0]
 80168c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80168ca:	f043 0301 	orr.w	r3, r3, #1
 80168ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	6a1b      	ldr	r3, [r3, #32]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d005      	beq.n	80168e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80168d8:	4b04      	ldr	r3, [pc, #16]	; (80168ec <HAL_PCD_SuspendCallback+0x48>)
 80168da:	691b      	ldr	r3, [r3, #16]
 80168dc:	4a03      	ldr	r2, [pc, #12]	; (80168ec <HAL_PCD_SuspendCallback+0x48>)
 80168de:	f043 0306 	orr.w	r3, r3, #6
 80168e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80168e4:	bf00      	nop
 80168e6:	3708      	adds	r7, #8
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}
 80168ec:	e000ed00 	.word	0xe000ed00

080168f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168fe:	4618      	mov	r0, r3
 8016900:	f7fb f8f5 	bl	8011aee <USBD_LL_Resume>
}
 8016904:	bf00      	nop
 8016906:	3708      	adds	r7, #8
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}

0801690c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b082      	sub	sp, #8
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
 8016914:	460b      	mov	r3, r1
 8016916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801691e:	78fa      	ldrb	r2, [r7, #3]
 8016920:	4611      	mov	r1, r2
 8016922:	4618      	mov	r0, r3
 8016924:	f7fb f91b 	bl	8011b5e <USBD_LL_IsoOUTIncomplete>
}
 8016928:	bf00      	nop
 801692a:	3708      	adds	r7, #8
 801692c:	46bd      	mov	sp, r7
 801692e:	bd80      	pop	{r7, pc}

08016930 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b082      	sub	sp, #8
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
 8016938:	460b      	mov	r3, r1
 801693a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016942:	78fa      	ldrb	r2, [r7, #3]
 8016944:	4611      	mov	r1, r2
 8016946:	4618      	mov	r0, r3
 8016948:	f7fb f8fc 	bl	8011b44 <USBD_LL_IsoINIncomplete>
}
 801694c:	bf00      	nop
 801694e:	3708      	adds	r7, #8
 8016950:	46bd      	mov	sp, r7
 8016952:	bd80      	pop	{r7, pc}

08016954 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b082      	sub	sp, #8
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016962:	4618      	mov	r0, r3
 8016964:	f7fb f908 	bl	8011b78 <USBD_LL_DevConnected>
}
 8016968:	bf00      	nop
 801696a:	3708      	adds	r7, #8
 801696c:	46bd      	mov	sp, r7
 801696e:	bd80      	pop	{r7, pc}

08016970 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801697e:	4618      	mov	r0, r3
 8016980:	f7fb f905 	bl	8011b8e <USBD_LL_DevDisconnected>
}
 8016984:	bf00      	nop
 8016986:	3708      	adds	r7, #8
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}

0801698c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b082      	sub	sp, #8
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	781b      	ldrb	r3, [r3, #0]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d13c      	bne.n	8016a16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801699c:	4a20      	ldr	r2, [pc, #128]	; (8016a20 <USBD_LL_Init+0x94>)
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	4a1e      	ldr	r2, [pc, #120]	; (8016a20 <USBD_LL_Init+0x94>)
 80169a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80169ac:	4b1c      	ldr	r3, [pc, #112]	; (8016a20 <USBD_LL_Init+0x94>)
 80169ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80169b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80169b4:	4b1a      	ldr	r3, [pc, #104]	; (8016a20 <USBD_LL_Init+0x94>)
 80169b6:	2204      	movs	r2, #4
 80169b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80169ba:	4b19      	ldr	r3, [pc, #100]	; (8016a20 <USBD_LL_Init+0x94>)
 80169bc:	2202      	movs	r2, #2
 80169be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80169c0:	4b17      	ldr	r3, [pc, #92]	; (8016a20 <USBD_LL_Init+0x94>)
 80169c2:	2200      	movs	r2, #0
 80169c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80169c6:	4b16      	ldr	r3, [pc, #88]	; (8016a20 <USBD_LL_Init+0x94>)
 80169c8:	2202      	movs	r2, #2
 80169ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80169cc:	4b14      	ldr	r3, [pc, #80]	; (8016a20 <USBD_LL_Init+0x94>)
 80169ce:	2200      	movs	r2, #0
 80169d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80169d2:	4b13      	ldr	r3, [pc, #76]	; (8016a20 <USBD_LL_Init+0x94>)
 80169d4:	2200      	movs	r2, #0
 80169d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80169d8:	4b11      	ldr	r3, [pc, #68]	; (8016a20 <USBD_LL_Init+0x94>)
 80169da:	2200      	movs	r2, #0
 80169dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80169de:	4b10      	ldr	r3, [pc, #64]	; (8016a20 <USBD_LL_Init+0x94>)
 80169e0:	2200      	movs	r2, #0
 80169e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80169e4:	4b0e      	ldr	r3, [pc, #56]	; (8016a20 <USBD_LL_Init+0x94>)
 80169e6:	2200      	movs	r2, #0
 80169e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80169ea:	480d      	ldr	r0, [pc, #52]	; (8016a20 <USBD_LL_Init+0x94>)
 80169ec:	f7ef fe72 	bl	80066d4 <HAL_PCD_Init>
 80169f0:	4603      	mov	r3, r0
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d001      	beq.n	80169fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80169f6:	f7ee f933 	bl	8004c60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80169fa:	2180      	movs	r1, #128	; 0x80
 80169fc:	4808      	ldr	r0, [pc, #32]	; (8016a20 <USBD_LL_Init+0x94>)
 80169fe:	f7f0 ffd6 	bl	80079ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016a02:	2240      	movs	r2, #64	; 0x40
 8016a04:	2100      	movs	r1, #0
 8016a06:	4806      	ldr	r0, [pc, #24]	; (8016a20 <USBD_LL_Init+0x94>)
 8016a08:	f7f0 ff8a 	bl	8007920 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016a0c:	2280      	movs	r2, #128	; 0x80
 8016a0e:	2101      	movs	r1, #1
 8016a10:	4803      	ldr	r0, [pc, #12]	; (8016a20 <USBD_LL_Init+0x94>)
 8016a12:	f7f0 ff85 	bl	8007920 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016a16:	2300      	movs	r3, #0
}
 8016a18:	4618      	mov	r0, r3
 8016a1a:	3708      	adds	r7, #8
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}
 8016a20:	2000244c 	.word	0x2000244c

08016a24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b084      	sub	sp, #16
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a30:	2300      	movs	r3, #0
 8016a32:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7ef ff67 	bl	800690e <HAL_PCD_Start>
 8016a40:	4603      	mov	r3, r0
 8016a42:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016a44:	7bfb      	ldrb	r3, [r7, #15]
 8016a46:	4618      	mov	r0, r3
 8016a48:	f000 f92e 	bl	8016ca8 <USBD_Get_USB_Status>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016a50:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a52:	4618      	mov	r0, r3
 8016a54:	3710      	adds	r7, #16
 8016a56:	46bd      	mov	sp, r7
 8016a58:	bd80      	pop	{r7, pc}

08016a5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016a5a:	b580      	push	{r7, lr}
 8016a5c:	b084      	sub	sp, #16
 8016a5e:	af00      	add	r7, sp, #0
 8016a60:	6078      	str	r0, [r7, #4]
 8016a62:	4608      	mov	r0, r1
 8016a64:	4611      	mov	r1, r2
 8016a66:	461a      	mov	r2, r3
 8016a68:	4603      	mov	r3, r0
 8016a6a:	70fb      	strb	r3, [r7, #3]
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	70bb      	strb	r3, [r7, #2]
 8016a70:	4613      	mov	r3, r2
 8016a72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a74:	2300      	movs	r3, #0
 8016a76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a78:	2300      	movs	r3, #0
 8016a7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016a82:	78bb      	ldrb	r3, [r7, #2]
 8016a84:	883a      	ldrh	r2, [r7, #0]
 8016a86:	78f9      	ldrb	r1, [r7, #3]
 8016a88:	f7f0 fb3c 	bl	8007104 <HAL_PCD_EP_Open>
 8016a8c:	4603      	mov	r3, r0
 8016a8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a90:	7bfb      	ldrb	r3, [r7, #15]
 8016a92:	4618      	mov	r0, r3
 8016a94:	f000 f908 	bl	8016ca8 <USBD_Get_USB_Status>
 8016a98:	4603      	mov	r3, r0
 8016a9a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	3710      	adds	r7, #16
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd80      	pop	{r7, pc}

08016aa6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016aa6:	b580      	push	{r7, lr}
 8016aa8:	b084      	sub	sp, #16
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	6078      	str	r0, [r7, #4]
 8016aae:	460b      	mov	r3, r1
 8016ab0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016ac0:	78fa      	ldrb	r2, [r7, #3]
 8016ac2:	4611      	mov	r1, r2
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	f7f0 fb85 	bl	80071d4 <HAL_PCD_EP_Close>
 8016aca:	4603      	mov	r3, r0
 8016acc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8016ace:	7bfb      	ldrb	r3, [r7, #15]
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f000 f8e9 	bl	8016ca8 <USBD_Get_USB_Status>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016ada:	7bbb      	ldrb	r3, [r7, #14]
}
 8016adc:	4618      	mov	r0, r3
 8016ade:	3710      	adds	r7, #16
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}

08016ae4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b084      	sub	sp, #16
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	460b      	mov	r3, r1
 8016aee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016af0:	2300      	movs	r3, #0
 8016af2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016af4:	2300      	movs	r3, #0
 8016af6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016afe:	78fa      	ldrb	r2, [r7, #3]
 8016b00:	4611      	mov	r1, r2
 8016b02:	4618      	mov	r0, r3
 8016b04:	f7f0 fc5d 	bl	80073c2 <HAL_PCD_EP_SetStall>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b0c:	7bfb      	ldrb	r3, [r7, #15]
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f000 f8ca 	bl	8016ca8 <USBD_Get_USB_Status>
 8016b14:	4603      	mov	r3, r0
 8016b16:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3710      	adds	r7, #16
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd80      	pop	{r7, pc}

08016b22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b22:	b580      	push	{r7, lr}
 8016b24:	b084      	sub	sp, #16
 8016b26:	af00      	add	r7, sp, #0
 8016b28:	6078      	str	r0, [r7, #4]
 8016b2a:	460b      	mov	r3, r1
 8016b2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b2e:	2300      	movs	r3, #0
 8016b30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b32:	2300      	movs	r3, #0
 8016b34:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016b3c:	78fa      	ldrb	r2, [r7, #3]
 8016b3e:	4611      	mov	r1, r2
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7f0 fca2 	bl	800748a <HAL_PCD_EP_ClrStall>
 8016b46:	4603      	mov	r3, r0
 8016b48:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016b4a:	7bfb      	ldrb	r3, [r7, #15]
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	f000 f8ab 	bl	8016ca8 <USBD_Get_USB_Status>
 8016b52:	4603      	mov	r3, r0
 8016b54:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3710      	adds	r7, #16
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}

08016b60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b60:	b480      	push	{r7}
 8016b62:	b085      	sub	sp, #20
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
 8016b68:	460b      	mov	r3, r1
 8016b6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016b72:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	da0b      	bge.n	8016b94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016b7c:	78fb      	ldrb	r3, [r7, #3]
 8016b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b82:	68f9      	ldr	r1, [r7, #12]
 8016b84:	4613      	mov	r3, r2
 8016b86:	00db      	lsls	r3, r3, #3
 8016b88:	1a9b      	subs	r3, r3, r2
 8016b8a:	009b      	lsls	r3, r3, #2
 8016b8c:	440b      	add	r3, r1
 8016b8e:	333e      	adds	r3, #62	; 0x3e
 8016b90:	781b      	ldrb	r3, [r3, #0]
 8016b92:	e00b      	b.n	8016bac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016b94:	78fb      	ldrb	r3, [r7, #3]
 8016b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b9a:	68f9      	ldr	r1, [r7, #12]
 8016b9c:	4613      	mov	r3, r2
 8016b9e:	00db      	lsls	r3, r3, #3
 8016ba0:	1a9b      	subs	r3, r3, r2
 8016ba2:	009b      	lsls	r3, r3, #2
 8016ba4:	440b      	add	r3, r1
 8016ba6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016baa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016bac:	4618      	mov	r0, r3
 8016bae:	3714      	adds	r7, #20
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb6:	4770      	bx	lr

08016bb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b084      	sub	sp, #16
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
 8016bc0:	460b      	mov	r3, r1
 8016bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bc8:	2300      	movs	r3, #0
 8016bca:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016bd2:	78fa      	ldrb	r2, [r7, #3]
 8016bd4:	4611      	mov	r1, r2
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f7f0 fa6f 	bl	80070ba <HAL_PCD_SetAddress>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8016be0:	7bfb      	ldrb	r3, [r7, #15]
 8016be2:	4618      	mov	r0, r3
 8016be4:	f000 f860 	bl	8016ca8 <USBD_Get_USB_Status>
 8016be8:	4603      	mov	r3, r0
 8016bea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bee:	4618      	mov	r0, r3
 8016bf0:	3710      	adds	r7, #16
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd80      	pop	{r7, pc}

08016bf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016bf6:	b580      	push	{r7, lr}
 8016bf8:	b086      	sub	sp, #24
 8016bfa:	af00      	add	r7, sp, #0
 8016bfc:	60f8      	str	r0, [r7, #12]
 8016bfe:	607a      	str	r2, [r7, #4]
 8016c00:	461a      	mov	r2, r3
 8016c02:	460b      	mov	r3, r1
 8016c04:	72fb      	strb	r3, [r7, #11]
 8016c06:	4613      	mov	r3, r2
 8016c08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016c18:	893b      	ldrh	r3, [r7, #8]
 8016c1a:	7af9      	ldrb	r1, [r7, #11]
 8016c1c:	687a      	ldr	r2, [r7, #4]
 8016c1e:	f7f0 fb86 	bl	800732e <HAL_PCD_EP_Transmit>
 8016c22:	4603      	mov	r3, r0
 8016c24:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016c26:	7dfb      	ldrb	r3, [r7, #23]
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f000 f83d 	bl	8016ca8 <USBD_Get_USB_Status>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016c32:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3718      	adds	r7, #24
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b086      	sub	sp, #24
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	60f8      	str	r0, [r7, #12]
 8016c44:	607a      	str	r2, [r7, #4]
 8016c46:	461a      	mov	r2, r3
 8016c48:	460b      	mov	r3, r1
 8016c4a:	72fb      	strb	r3, [r7, #11]
 8016c4c:	4613      	mov	r3, r2
 8016c4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c50:	2300      	movs	r3, #0
 8016c52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c54:	2300      	movs	r3, #0
 8016c56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016c5e:	893b      	ldrh	r3, [r7, #8]
 8016c60:	7af9      	ldrb	r1, [r7, #11]
 8016c62:	687a      	ldr	r2, [r7, #4]
 8016c64:	f7f0 fb00 	bl	8007268 <HAL_PCD_EP_Receive>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016c6c:	7dfb      	ldrb	r3, [r7, #23]
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f000 f81a 	bl	8016ca8 <USBD_Get_USB_Status>
 8016c74:	4603      	mov	r3, r0
 8016c76:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016c78:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	3718      	adds	r7, #24
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	bd80      	pop	{r7, pc}

08016c82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c82:	b580      	push	{r7, lr}
 8016c84:	b082      	sub	sp, #8
 8016c86:	af00      	add	r7, sp, #0
 8016c88:	6078      	str	r0, [r7, #4]
 8016c8a:	460b      	mov	r3, r1
 8016c8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016c94:	78fa      	ldrb	r2, [r7, #3]
 8016c96:	4611      	mov	r1, r2
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7f0 fb30 	bl	80072fe <HAL_PCD_EP_GetRxCount>
 8016c9e:	4603      	mov	r3, r0
}
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	3708      	adds	r7, #8
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	bd80      	pop	{r7, pc}

08016ca8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016ca8:	b480      	push	{r7}
 8016caa:	b085      	sub	sp, #20
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	4603      	mov	r3, r0
 8016cb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016cb6:	79fb      	ldrb	r3, [r7, #7]
 8016cb8:	2b03      	cmp	r3, #3
 8016cba:	d817      	bhi.n	8016cec <USBD_Get_USB_Status+0x44>
 8016cbc:	a201      	add	r2, pc, #4	; (adr r2, 8016cc4 <USBD_Get_USB_Status+0x1c>)
 8016cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cc2:	bf00      	nop
 8016cc4:	08016cd5 	.word	0x08016cd5
 8016cc8:	08016cdb 	.word	0x08016cdb
 8016ccc:	08016ce1 	.word	0x08016ce1
 8016cd0:	08016ce7 	.word	0x08016ce7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8016cd8:	e00b      	b.n	8016cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016cda:	2302      	movs	r3, #2
 8016cdc:	73fb      	strb	r3, [r7, #15]
    break;
 8016cde:	e008      	b.n	8016cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016ce0:	2301      	movs	r3, #1
 8016ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8016ce4:	e005      	b.n	8016cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016ce6:	2302      	movs	r3, #2
 8016ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8016cea:	e002      	b.n	8016cf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016cec:	2302      	movs	r3, #2
 8016cee:	73fb      	strb	r3, [r7, #15]
    break;
 8016cf0:	bf00      	nop
  }
  return usb_status;
 8016cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	3714      	adds	r7, #20
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfe:	4770      	bx	lr

08016d00 <__errno>:
 8016d00:	4b01      	ldr	r3, [pc, #4]	; (8016d08 <__errno+0x8>)
 8016d02:	6818      	ldr	r0, [r3, #0]
 8016d04:	4770      	bx	lr
 8016d06:	bf00      	nop
 8016d08:	200001d4 	.word	0x200001d4

08016d0c <__libc_init_array>:
 8016d0c:	b570      	push	{r4, r5, r6, lr}
 8016d0e:	4e0d      	ldr	r6, [pc, #52]	; (8016d44 <__libc_init_array+0x38>)
 8016d10:	4c0d      	ldr	r4, [pc, #52]	; (8016d48 <__libc_init_array+0x3c>)
 8016d12:	1ba4      	subs	r4, r4, r6
 8016d14:	10a4      	asrs	r4, r4, #2
 8016d16:	2500      	movs	r5, #0
 8016d18:	42a5      	cmp	r5, r4
 8016d1a:	d109      	bne.n	8016d30 <__libc_init_array+0x24>
 8016d1c:	4e0b      	ldr	r6, [pc, #44]	; (8016d4c <__libc_init_array+0x40>)
 8016d1e:	4c0c      	ldr	r4, [pc, #48]	; (8016d50 <__libc_init_array+0x44>)
 8016d20:	f000 fc4e 	bl	80175c0 <_init>
 8016d24:	1ba4      	subs	r4, r4, r6
 8016d26:	10a4      	asrs	r4, r4, #2
 8016d28:	2500      	movs	r5, #0
 8016d2a:	42a5      	cmp	r5, r4
 8016d2c:	d105      	bne.n	8016d3a <__libc_init_array+0x2e>
 8016d2e:	bd70      	pop	{r4, r5, r6, pc}
 8016d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016d34:	4798      	blx	r3
 8016d36:	3501      	adds	r5, #1
 8016d38:	e7ee      	b.n	8016d18 <__libc_init_array+0xc>
 8016d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016d3e:	4798      	blx	r3
 8016d40:	3501      	adds	r5, #1
 8016d42:	e7f2      	b.n	8016d2a <__libc_init_array+0x1e>
 8016d44:	0801b8d0 	.word	0x0801b8d0
 8016d48:	0801b8d0 	.word	0x0801b8d0
 8016d4c:	0801b8d0 	.word	0x0801b8d0
 8016d50:	0801b8d4 	.word	0x0801b8d4

08016d54 <malloc>:
 8016d54:	4b02      	ldr	r3, [pc, #8]	; (8016d60 <malloc+0xc>)
 8016d56:	4601      	mov	r1, r0
 8016d58:	6818      	ldr	r0, [r3, #0]
 8016d5a:	f000 b87b 	b.w	8016e54 <_malloc_r>
 8016d5e:	bf00      	nop
 8016d60:	200001d4 	.word	0x200001d4

08016d64 <free>:
 8016d64:	4b02      	ldr	r3, [pc, #8]	; (8016d70 <free+0xc>)
 8016d66:	4601      	mov	r1, r0
 8016d68:	6818      	ldr	r0, [r3, #0]
 8016d6a:	f000 b825 	b.w	8016db8 <_free_r>
 8016d6e:	bf00      	nop
 8016d70:	200001d4 	.word	0x200001d4

08016d74 <memcmp>:
 8016d74:	b530      	push	{r4, r5, lr}
 8016d76:	2400      	movs	r4, #0
 8016d78:	42a2      	cmp	r2, r4
 8016d7a:	d101      	bne.n	8016d80 <memcmp+0xc>
 8016d7c:	2000      	movs	r0, #0
 8016d7e:	e007      	b.n	8016d90 <memcmp+0x1c>
 8016d80:	5d03      	ldrb	r3, [r0, r4]
 8016d82:	3401      	adds	r4, #1
 8016d84:	190d      	adds	r5, r1, r4
 8016d86:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016d8a:	42ab      	cmp	r3, r5
 8016d8c:	d0f4      	beq.n	8016d78 <memcmp+0x4>
 8016d8e:	1b58      	subs	r0, r3, r5
 8016d90:	bd30      	pop	{r4, r5, pc}

08016d92 <memcpy>:
 8016d92:	b510      	push	{r4, lr}
 8016d94:	1e43      	subs	r3, r0, #1
 8016d96:	440a      	add	r2, r1
 8016d98:	4291      	cmp	r1, r2
 8016d9a:	d100      	bne.n	8016d9e <memcpy+0xc>
 8016d9c:	bd10      	pop	{r4, pc}
 8016d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016da6:	e7f7      	b.n	8016d98 <memcpy+0x6>

08016da8 <memset>:
 8016da8:	4402      	add	r2, r0
 8016daa:	4603      	mov	r3, r0
 8016dac:	4293      	cmp	r3, r2
 8016dae:	d100      	bne.n	8016db2 <memset+0xa>
 8016db0:	4770      	bx	lr
 8016db2:	f803 1b01 	strb.w	r1, [r3], #1
 8016db6:	e7f9      	b.n	8016dac <memset+0x4>

08016db8 <_free_r>:
 8016db8:	b538      	push	{r3, r4, r5, lr}
 8016dba:	4605      	mov	r5, r0
 8016dbc:	2900      	cmp	r1, #0
 8016dbe:	d045      	beq.n	8016e4c <_free_r+0x94>
 8016dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016dc4:	1f0c      	subs	r4, r1, #4
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	bfb8      	it	lt
 8016dca:	18e4      	addlt	r4, r4, r3
 8016dcc:	f000 f8d4 	bl	8016f78 <__malloc_lock>
 8016dd0:	4a1f      	ldr	r2, [pc, #124]	; (8016e50 <_free_r+0x98>)
 8016dd2:	6813      	ldr	r3, [r2, #0]
 8016dd4:	4610      	mov	r0, r2
 8016dd6:	b933      	cbnz	r3, 8016de6 <_free_r+0x2e>
 8016dd8:	6063      	str	r3, [r4, #4]
 8016dda:	6014      	str	r4, [r2, #0]
 8016ddc:	4628      	mov	r0, r5
 8016dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016de2:	f000 b8ca 	b.w	8016f7a <__malloc_unlock>
 8016de6:	42a3      	cmp	r3, r4
 8016de8:	d90c      	bls.n	8016e04 <_free_r+0x4c>
 8016dea:	6821      	ldr	r1, [r4, #0]
 8016dec:	1862      	adds	r2, r4, r1
 8016dee:	4293      	cmp	r3, r2
 8016df0:	bf04      	itt	eq
 8016df2:	681a      	ldreq	r2, [r3, #0]
 8016df4:	685b      	ldreq	r3, [r3, #4]
 8016df6:	6063      	str	r3, [r4, #4]
 8016df8:	bf04      	itt	eq
 8016dfa:	1852      	addeq	r2, r2, r1
 8016dfc:	6022      	streq	r2, [r4, #0]
 8016dfe:	6004      	str	r4, [r0, #0]
 8016e00:	e7ec      	b.n	8016ddc <_free_r+0x24>
 8016e02:	4613      	mov	r3, r2
 8016e04:	685a      	ldr	r2, [r3, #4]
 8016e06:	b10a      	cbz	r2, 8016e0c <_free_r+0x54>
 8016e08:	42a2      	cmp	r2, r4
 8016e0a:	d9fa      	bls.n	8016e02 <_free_r+0x4a>
 8016e0c:	6819      	ldr	r1, [r3, #0]
 8016e0e:	1858      	adds	r0, r3, r1
 8016e10:	42a0      	cmp	r0, r4
 8016e12:	d10b      	bne.n	8016e2c <_free_r+0x74>
 8016e14:	6820      	ldr	r0, [r4, #0]
 8016e16:	4401      	add	r1, r0
 8016e18:	1858      	adds	r0, r3, r1
 8016e1a:	4282      	cmp	r2, r0
 8016e1c:	6019      	str	r1, [r3, #0]
 8016e1e:	d1dd      	bne.n	8016ddc <_free_r+0x24>
 8016e20:	6810      	ldr	r0, [r2, #0]
 8016e22:	6852      	ldr	r2, [r2, #4]
 8016e24:	605a      	str	r2, [r3, #4]
 8016e26:	4401      	add	r1, r0
 8016e28:	6019      	str	r1, [r3, #0]
 8016e2a:	e7d7      	b.n	8016ddc <_free_r+0x24>
 8016e2c:	d902      	bls.n	8016e34 <_free_r+0x7c>
 8016e2e:	230c      	movs	r3, #12
 8016e30:	602b      	str	r3, [r5, #0]
 8016e32:	e7d3      	b.n	8016ddc <_free_r+0x24>
 8016e34:	6820      	ldr	r0, [r4, #0]
 8016e36:	1821      	adds	r1, r4, r0
 8016e38:	428a      	cmp	r2, r1
 8016e3a:	bf04      	itt	eq
 8016e3c:	6811      	ldreq	r1, [r2, #0]
 8016e3e:	6852      	ldreq	r2, [r2, #4]
 8016e40:	6062      	str	r2, [r4, #4]
 8016e42:	bf04      	itt	eq
 8016e44:	1809      	addeq	r1, r1, r0
 8016e46:	6021      	streq	r1, [r4, #0]
 8016e48:	605c      	str	r4, [r3, #4]
 8016e4a:	e7c7      	b.n	8016ddc <_free_r+0x24>
 8016e4c:	bd38      	pop	{r3, r4, r5, pc}
 8016e4e:	bf00      	nop
 8016e50:	20000ea8 	.word	0x20000ea8

08016e54 <_malloc_r>:
 8016e54:	b570      	push	{r4, r5, r6, lr}
 8016e56:	1ccd      	adds	r5, r1, #3
 8016e58:	f025 0503 	bic.w	r5, r5, #3
 8016e5c:	3508      	adds	r5, #8
 8016e5e:	2d0c      	cmp	r5, #12
 8016e60:	bf38      	it	cc
 8016e62:	250c      	movcc	r5, #12
 8016e64:	2d00      	cmp	r5, #0
 8016e66:	4606      	mov	r6, r0
 8016e68:	db01      	blt.n	8016e6e <_malloc_r+0x1a>
 8016e6a:	42a9      	cmp	r1, r5
 8016e6c:	d903      	bls.n	8016e76 <_malloc_r+0x22>
 8016e6e:	230c      	movs	r3, #12
 8016e70:	6033      	str	r3, [r6, #0]
 8016e72:	2000      	movs	r0, #0
 8016e74:	bd70      	pop	{r4, r5, r6, pc}
 8016e76:	f000 f87f 	bl	8016f78 <__malloc_lock>
 8016e7a:	4a21      	ldr	r2, [pc, #132]	; (8016f00 <_malloc_r+0xac>)
 8016e7c:	6814      	ldr	r4, [r2, #0]
 8016e7e:	4621      	mov	r1, r4
 8016e80:	b991      	cbnz	r1, 8016ea8 <_malloc_r+0x54>
 8016e82:	4c20      	ldr	r4, [pc, #128]	; (8016f04 <_malloc_r+0xb0>)
 8016e84:	6823      	ldr	r3, [r4, #0]
 8016e86:	b91b      	cbnz	r3, 8016e90 <_malloc_r+0x3c>
 8016e88:	4630      	mov	r0, r6
 8016e8a:	f000 f83d 	bl	8016f08 <_sbrk_r>
 8016e8e:	6020      	str	r0, [r4, #0]
 8016e90:	4629      	mov	r1, r5
 8016e92:	4630      	mov	r0, r6
 8016e94:	f000 f838 	bl	8016f08 <_sbrk_r>
 8016e98:	1c43      	adds	r3, r0, #1
 8016e9a:	d124      	bne.n	8016ee6 <_malloc_r+0x92>
 8016e9c:	230c      	movs	r3, #12
 8016e9e:	6033      	str	r3, [r6, #0]
 8016ea0:	4630      	mov	r0, r6
 8016ea2:	f000 f86a 	bl	8016f7a <__malloc_unlock>
 8016ea6:	e7e4      	b.n	8016e72 <_malloc_r+0x1e>
 8016ea8:	680b      	ldr	r3, [r1, #0]
 8016eaa:	1b5b      	subs	r3, r3, r5
 8016eac:	d418      	bmi.n	8016ee0 <_malloc_r+0x8c>
 8016eae:	2b0b      	cmp	r3, #11
 8016eb0:	d90f      	bls.n	8016ed2 <_malloc_r+0x7e>
 8016eb2:	600b      	str	r3, [r1, #0]
 8016eb4:	50cd      	str	r5, [r1, r3]
 8016eb6:	18cc      	adds	r4, r1, r3
 8016eb8:	4630      	mov	r0, r6
 8016eba:	f000 f85e 	bl	8016f7a <__malloc_unlock>
 8016ebe:	f104 000b 	add.w	r0, r4, #11
 8016ec2:	1d23      	adds	r3, r4, #4
 8016ec4:	f020 0007 	bic.w	r0, r0, #7
 8016ec8:	1ac3      	subs	r3, r0, r3
 8016eca:	d0d3      	beq.n	8016e74 <_malloc_r+0x20>
 8016ecc:	425a      	negs	r2, r3
 8016ece:	50e2      	str	r2, [r4, r3]
 8016ed0:	e7d0      	b.n	8016e74 <_malloc_r+0x20>
 8016ed2:	428c      	cmp	r4, r1
 8016ed4:	684b      	ldr	r3, [r1, #4]
 8016ed6:	bf16      	itet	ne
 8016ed8:	6063      	strne	r3, [r4, #4]
 8016eda:	6013      	streq	r3, [r2, #0]
 8016edc:	460c      	movne	r4, r1
 8016ede:	e7eb      	b.n	8016eb8 <_malloc_r+0x64>
 8016ee0:	460c      	mov	r4, r1
 8016ee2:	6849      	ldr	r1, [r1, #4]
 8016ee4:	e7cc      	b.n	8016e80 <_malloc_r+0x2c>
 8016ee6:	1cc4      	adds	r4, r0, #3
 8016ee8:	f024 0403 	bic.w	r4, r4, #3
 8016eec:	42a0      	cmp	r0, r4
 8016eee:	d005      	beq.n	8016efc <_malloc_r+0xa8>
 8016ef0:	1a21      	subs	r1, r4, r0
 8016ef2:	4630      	mov	r0, r6
 8016ef4:	f000 f808 	bl	8016f08 <_sbrk_r>
 8016ef8:	3001      	adds	r0, #1
 8016efa:	d0cf      	beq.n	8016e9c <_malloc_r+0x48>
 8016efc:	6025      	str	r5, [r4, #0]
 8016efe:	e7db      	b.n	8016eb8 <_malloc_r+0x64>
 8016f00:	20000ea8 	.word	0x20000ea8
 8016f04:	20000eac 	.word	0x20000eac

08016f08 <_sbrk_r>:
 8016f08:	b538      	push	{r3, r4, r5, lr}
 8016f0a:	4c06      	ldr	r4, [pc, #24]	; (8016f24 <_sbrk_r+0x1c>)
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	4605      	mov	r5, r0
 8016f10:	4608      	mov	r0, r1
 8016f12:	6023      	str	r3, [r4, #0]
 8016f14:	f7ee f9f2 	bl	80052fc <_sbrk>
 8016f18:	1c43      	adds	r3, r0, #1
 8016f1a:	d102      	bne.n	8016f22 <_sbrk_r+0x1a>
 8016f1c:	6823      	ldr	r3, [r4, #0]
 8016f1e:	b103      	cbz	r3, 8016f22 <_sbrk_r+0x1a>
 8016f20:	602b      	str	r3, [r5, #0]
 8016f22:	bd38      	pop	{r3, r4, r5, pc}
 8016f24:	20002854 	.word	0x20002854

08016f28 <siprintf>:
 8016f28:	b40e      	push	{r1, r2, r3}
 8016f2a:	b500      	push	{lr}
 8016f2c:	b09c      	sub	sp, #112	; 0x70
 8016f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8016f30:	9002      	str	r0, [sp, #8]
 8016f32:	9006      	str	r0, [sp, #24]
 8016f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016f38:	4809      	ldr	r0, [pc, #36]	; (8016f60 <siprintf+0x38>)
 8016f3a:	9107      	str	r1, [sp, #28]
 8016f3c:	9104      	str	r1, [sp, #16]
 8016f3e:	4909      	ldr	r1, [pc, #36]	; (8016f64 <siprintf+0x3c>)
 8016f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f44:	9105      	str	r1, [sp, #20]
 8016f46:	6800      	ldr	r0, [r0, #0]
 8016f48:	9301      	str	r3, [sp, #4]
 8016f4a:	a902      	add	r1, sp, #8
 8016f4c:	f000 f870 	bl	8017030 <_svfiprintf_r>
 8016f50:	9b02      	ldr	r3, [sp, #8]
 8016f52:	2200      	movs	r2, #0
 8016f54:	701a      	strb	r2, [r3, #0]
 8016f56:	b01c      	add	sp, #112	; 0x70
 8016f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f5c:	b003      	add	sp, #12
 8016f5e:	4770      	bx	lr
 8016f60:	200001d4 	.word	0x200001d4
 8016f64:	ffff0208 	.word	0xffff0208

08016f68 <strcpy>:
 8016f68:	4603      	mov	r3, r0
 8016f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f6e:	f803 2b01 	strb.w	r2, [r3], #1
 8016f72:	2a00      	cmp	r2, #0
 8016f74:	d1f9      	bne.n	8016f6a <strcpy+0x2>
 8016f76:	4770      	bx	lr

08016f78 <__malloc_lock>:
 8016f78:	4770      	bx	lr

08016f7a <__malloc_unlock>:
 8016f7a:	4770      	bx	lr

08016f7c <__ssputs_r>:
 8016f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f80:	688e      	ldr	r6, [r1, #8]
 8016f82:	429e      	cmp	r6, r3
 8016f84:	4682      	mov	sl, r0
 8016f86:	460c      	mov	r4, r1
 8016f88:	4690      	mov	r8, r2
 8016f8a:	4699      	mov	r9, r3
 8016f8c:	d837      	bhi.n	8016ffe <__ssputs_r+0x82>
 8016f8e:	898a      	ldrh	r2, [r1, #12]
 8016f90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016f94:	d031      	beq.n	8016ffa <__ssputs_r+0x7e>
 8016f96:	6825      	ldr	r5, [r4, #0]
 8016f98:	6909      	ldr	r1, [r1, #16]
 8016f9a:	1a6f      	subs	r7, r5, r1
 8016f9c:	6965      	ldr	r5, [r4, #20]
 8016f9e:	2302      	movs	r3, #2
 8016fa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fa4:	fb95 f5f3 	sdiv	r5, r5, r3
 8016fa8:	f109 0301 	add.w	r3, r9, #1
 8016fac:	443b      	add	r3, r7
 8016fae:	429d      	cmp	r5, r3
 8016fb0:	bf38      	it	cc
 8016fb2:	461d      	movcc	r5, r3
 8016fb4:	0553      	lsls	r3, r2, #21
 8016fb6:	d530      	bpl.n	801701a <__ssputs_r+0x9e>
 8016fb8:	4629      	mov	r1, r5
 8016fba:	f7ff ff4b 	bl	8016e54 <_malloc_r>
 8016fbe:	4606      	mov	r6, r0
 8016fc0:	b950      	cbnz	r0, 8016fd8 <__ssputs_r+0x5c>
 8016fc2:	230c      	movs	r3, #12
 8016fc4:	f8ca 3000 	str.w	r3, [sl]
 8016fc8:	89a3      	ldrh	r3, [r4, #12]
 8016fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fce:	81a3      	strh	r3, [r4, #12]
 8016fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8016fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fd8:	463a      	mov	r2, r7
 8016fda:	6921      	ldr	r1, [r4, #16]
 8016fdc:	f7ff fed9 	bl	8016d92 <memcpy>
 8016fe0:	89a3      	ldrh	r3, [r4, #12]
 8016fe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016fea:	81a3      	strh	r3, [r4, #12]
 8016fec:	6126      	str	r6, [r4, #16]
 8016fee:	6165      	str	r5, [r4, #20]
 8016ff0:	443e      	add	r6, r7
 8016ff2:	1bed      	subs	r5, r5, r7
 8016ff4:	6026      	str	r6, [r4, #0]
 8016ff6:	60a5      	str	r5, [r4, #8]
 8016ff8:	464e      	mov	r6, r9
 8016ffa:	454e      	cmp	r6, r9
 8016ffc:	d900      	bls.n	8017000 <__ssputs_r+0x84>
 8016ffe:	464e      	mov	r6, r9
 8017000:	4632      	mov	r2, r6
 8017002:	4641      	mov	r1, r8
 8017004:	6820      	ldr	r0, [r4, #0]
 8017006:	f000 fa93 	bl	8017530 <memmove>
 801700a:	68a3      	ldr	r3, [r4, #8]
 801700c:	1b9b      	subs	r3, r3, r6
 801700e:	60a3      	str	r3, [r4, #8]
 8017010:	6823      	ldr	r3, [r4, #0]
 8017012:	441e      	add	r6, r3
 8017014:	6026      	str	r6, [r4, #0]
 8017016:	2000      	movs	r0, #0
 8017018:	e7dc      	b.n	8016fd4 <__ssputs_r+0x58>
 801701a:	462a      	mov	r2, r5
 801701c:	f000 faa1 	bl	8017562 <_realloc_r>
 8017020:	4606      	mov	r6, r0
 8017022:	2800      	cmp	r0, #0
 8017024:	d1e2      	bne.n	8016fec <__ssputs_r+0x70>
 8017026:	6921      	ldr	r1, [r4, #16]
 8017028:	4650      	mov	r0, sl
 801702a:	f7ff fec5 	bl	8016db8 <_free_r>
 801702e:	e7c8      	b.n	8016fc2 <__ssputs_r+0x46>

08017030 <_svfiprintf_r>:
 8017030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017034:	461d      	mov	r5, r3
 8017036:	898b      	ldrh	r3, [r1, #12]
 8017038:	061f      	lsls	r7, r3, #24
 801703a:	b09d      	sub	sp, #116	; 0x74
 801703c:	4680      	mov	r8, r0
 801703e:	460c      	mov	r4, r1
 8017040:	4616      	mov	r6, r2
 8017042:	d50f      	bpl.n	8017064 <_svfiprintf_r+0x34>
 8017044:	690b      	ldr	r3, [r1, #16]
 8017046:	b96b      	cbnz	r3, 8017064 <_svfiprintf_r+0x34>
 8017048:	2140      	movs	r1, #64	; 0x40
 801704a:	f7ff ff03 	bl	8016e54 <_malloc_r>
 801704e:	6020      	str	r0, [r4, #0]
 8017050:	6120      	str	r0, [r4, #16]
 8017052:	b928      	cbnz	r0, 8017060 <_svfiprintf_r+0x30>
 8017054:	230c      	movs	r3, #12
 8017056:	f8c8 3000 	str.w	r3, [r8]
 801705a:	f04f 30ff 	mov.w	r0, #4294967295
 801705e:	e0c8      	b.n	80171f2 <_svfiprintf_r+0x1c2>
 8017060:	2340      	movs	r3, #64	; 0x40
 8017062:	6163      	str	r3, [r4, #20]
 8017064:	2300      	movs	r3, #0
 8017066:	9309      	str	r3, [sp, #36]	; 0x24
 8017068:	2320      	movs	r3, #32
 801706a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801706e:	2330      	movs	r3, #48	; 0x30
 8017070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017074:	9503      	str	r5, [sp, #12]
 8017076:	f04f 0b01 	mov.w	fp, #1
 801707a:	4637      	mov	r7, r6
 801707c:	463d      	mov	r5, r7
 801707e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017082:	b10b      	cbz	r3, 8017088 <_svfiprintf_r+0x58>
 8017084:	2b25      	cmp	r3, #37	; 0x25
 8017086:	d13e      	bne.n	8017106 <_svfiprintf_r+0xd6>
 8017088:	ebb7 0a06 	subs.w	sl, r7, r6
 801708c:	d00b      	beq.n	80170a6 <_svfiprintf_r+0x76>
 801708e:	4653      	mov	r3, sl
 8017090:	4632      	mov	r2, r6
 8017092:	4621      	mov	r1, r4
 8017094:	4640      	mov	r0, r8
 8017096:	f7ff ff71 	bl	8016f7c <__ssputs_r>
 801709a:	3001      	adds	r0, #1
 801709c:	f000 80a4 	beq.w	80171e8 <_svfiprintf_r+0x1b8>
 80170a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170a2:	4453      	add	r3, sl
 80170a4:	9309      	str	r3, [sp, #36]	; 0x24
 80170a6:	783b      	ldrb	r3, [r7, #0]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	f000 809d 	beq.w	80171e8 <_svfiprintf_r+0x1b8>
 80170ae:	2300      	movs	r3, #0
 80170b0:	f04f 32ff 	mov.w	r2, #4294967295
 80170b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170b8:	9304      	str	r3, [sp, #16]
 80170ba:	9307      	str	r3, [sp, #28]
 80170bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80170c0:	931a      	str	r3, [sp, #104]	; 0x68
 80170c2:	462f      	mov	r7, r5
 80170c4:	2205      	movs	r2, #5
 80170c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80170ca:	4850      	ldr	r0, [pc, #320]	; (801720c <_svfiprintf_r+0x1dc>)
 80170cc:	f7e9 f890 	bl	80001f0 <memchr>
 80170d0:	9b04      	ldr	r3, [sp, #16]
 80170d2:	b9d0      	cbnz	r0, 801710a <_svfiprintf_r+0xda>
 80170d4:	06d9      	lsls	r1, r3, #27
 80170d6:	bf44      	itt	mi
 80170d8:	2220      	movmi	r2, #32
 80170da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80170de:	071a      	lsls	r2, r3, #28
 80170e0:	bf44      	itt	mi
 80170e2:	222b      	movmi	r2, #43	; 0x2b
 80170e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80170e8:	782a      	ldrb	r2, [r5, #0]
 80170ea:	2a2a      	cmp	r2, #42	; 0x2a
 80170ec:	d015      	beq.n	801711a <_svfiprintf_r+0xea>
 80170ee:	9a07      	ldr	r2, [sp, #28]
 80170f0:	462f      	mov	r7, r5
 80170f2:	2000      	movs	r0, #0
 80170f4:	250a      	movs	r5, #10
 80170f6:	4639      	mov	r1, r7
 80170f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170fc:	3b30      	subs	r3, #48	; 0x30
 80170fe:	2b09      	cmp	r3, #9
 8017100:	d94d      	bls.n	801719e <_svfiprintf_r+0x16e>
 8017102:	b1b8      	cbz	r0, 8017134 <_svfiprintf_r+0x104>
 8017104:	e00f      	b.n	8017126 <_svfiprintf_r+0xf6>
 8017106:	462f      	mov	r7, r5
 8017108:	e7b8      	b.n	801707c <_svfiprintf_r+0x4c>
 801710a:	4a40      	ldr	r2, [pc, #256]	; (801720c <_svfiprintf_r+0x1dc>)
 801710c:	1a80      	subs	r0, r0, r2
 801710e:	fa0b f000 	lsl.w	r0, fp, r0
 8017112:	4318      	orrs	r0, r3
 8017114:	9004      	str	r0, [sp, #16]
 8017116:	463d      	mov	r5, r7
 8017118:	e7d3      	b.n	80170c2 <_svfiprintf_r+0x92>
 801711a:	9a03      	ldr	r2, [sp, #12]
 801711c:	1d11      	adds	r1, r2, #4
 801711e:	6812      	ldr	r2, [r2, #0]
 8017120:	9103      	str	r1, [sp, #12]
 8017122:	2a00      	cmp	r2, #0
 8017124:	db01      	blt.n	801712a <_svfiprintf_r+0xfa>
 8017126:	9207      	str	r2, [sp, #28]
 8017128:	e004      	b.n	8017134 <_svfiprintf_r+0x104>
 801712a:	4252      	negs	r2, r2
 801712c:	f043 0302 	orr.w	r3, r3, #2
 8017130:	9207      	str	r2, [sp, #28]
 8017132:	9304      	str	r3, [sp, #16]
 8017134:	783b      	ldrb	r3, [r7, #0]
 8017136:	2b2e      	cmp	r3, #46	; 0x2e
 8017138:	d10c      	bne.n	8017154 <_svfiprintf_r+0x124>
 801713a:	787b      	ldrb	r3, [r7, #1]
 801713c:	2b2a      	cmp	r3, #42	; 0x2a
 801713e:	d133      	bne.n	80171a8 <_svfiprintf_r+0x178>
 8017140:	9b03      	ldr	r3, [sp, #12]
 8017142:	1d1a      	adds	r2, r3, #4
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	9203      	str	r2, [sp, #12]
 8017148:	2b00      	cmp	r3, #0
 801714a:	bfb8      	it	lt
 801714c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017150:	3702      	adds	r7, #2
 8017152:	9305      	str	r3, [sp, #20]
 8017154:	4d2e      	ldr	r5, [pc, #184]	; (8017210 <_svfiprintf_r+0x1e0>)
 8017156:	7839      	ldrb	r1, [r7, #0]
 8017158:	2203      	movs	r2, #3
 801715a:	4628      	mov	r0, r5
 801715c:	f7e9 f848 	bl	80001f0 <memchr>
 8017160:	b138      	cbz	r0, 8017172 <_svfiprintf_r+0x142>
 8017162:	2340      	movs	r3, #64	; 0x40
 8017164:	1b40      	subs	r0, r0, r5
 8017166:	fa03 f000 	lsl.w	r0, r3, r0
 801716a:	9b04      	ldr	r3, [sp, #16]
 801716c:	4303      	orrs	r3, r0
 801716e:	3701      	adds	r7, #1
 8017170:	9304      	str	r3, [sp, #16]
 8017172:	7839      	ldrb	r1, [r7, #0]
 8017174:	4827      	ldr	r0, [pc, #156]	; (8017214 <_svfiprintf_r+0x1e4>)
 8017176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801717a:	2206      	movs	r2, #6
 801717c:	1c7e      	adds	r6, r7, #1
 801717e:	f7e9 f837 	bl	80001f0 <memchr>
 8017182:	2800      	cmp	r0, #0
 8017184:	d038      	beq.n	80171f8 <_svfiprintf_r+0x1c8>
 8017186:	4b24      	ldr	r3, [pc, #144]	; (8017218 <_svfiprintf_r+0x1e8>)
 8017188:	bb13      	cbnz	r3, 80171d0 <_svfiprintf_r+0x1a0>
 801718a:	9b03      	ldr	r3, [sp, #12]
 801718c:	3307      	adds	r3, #7
 801718e:	f023 0307 	bic.w	r3, r3, #7
 8017192:	3308      	adds	r3, #8
 8017194:	9303      	str	r3, [sp, #12]
 8017196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017198:	444b      	add	r3, r9
 801719a:	9309      	str	r3, [sp, #36]	; 0x24
 801719c:	e76d      	b.n	801707a <_svfiprintf_r+0x4a>
 801719e:	fb05 3202 	mla	r2, r5, r2, r3
 80171a2:	2001      	movs	r0, #1
 80171a4:	460f      	mov	r7, r1
 80171a6:	e7a6      	b.n	80170f6 <_svfiprintf_r+0xc6>
 80171a8:	2300      	movs	r3, #0
 80171aa:	3701      	adds	r7, #1
 80171ac:	9305      	str	r3, [sp, #20]
 80171ae:	4619      	mov	r1, r3
 80171b0:	250a      	movs	r5, #10
 80171b2:	4638      	mov	r0, r7
 80171b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171b8:	3a30      	subs	r2, #48	; 0x30
 80171ba:	2a09      	cmp	r2, #9
 80171bc:	d903      	bls.n	80171c6 <_svfiprintf_r+0x196>
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d0c8      	beq.n	8017154 <_svfiprintf_r+0x124>
 80171c2:	9105      	str	r1, [sp, #20]
 80171c4:	e7c6      	b.n	8017154 <_svfiprintf_r+0x124>
 80171c6:	fb05 2101 	mla	r1, r5, r1, r2
 80171ca:	2301      	movs	r3, #1
 80171cc:	4607      	mov	r7, r0
 80171ce:	e7f0      	b.n	80171b2 <_svfiprintf_r+0x182>
 80171d0:	ab03      	add	r3, sp, #12
 80171d2:	9300      	str	r3, [sp, #0]
 80171d4:	4622      	mov	r2, r4
 80171d6:	4b11      	ldr	r3, [pc, #68]	; (801721c <_svfiprintf_r+0x1ec>)
 80171d8:	a904      	add	r1, sp, #16
 80171da:	4640      	mov	r0, r8
 80171dc:	f3af 8000 	nop.w
 80171e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80171e4:	4681      	mov	r9, r0
 80171e6:	d1d6      	bne.n	8017196 <_svfiprintf_r+0x166>
 80171e8:	89a3      	ldrh	r3, [r4, #12]
 80171ea:	065b      	lsls	r3, r3, #25
 80171ec:	f53f af35 	bmi.w	801705a <_svfiprintf_r+0x2a>
 80171f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171f2:	b01d      	add	sp, #116	; 0x74
 80171f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171f8:	ab03      	add	r3, sp, #12
 80171fa:	9300      	str	r3, [sp, #0]
 80171fc:	4622      	mov	r2, r4
 80171fe:	4b07      	ldr	r3, [pc, #28]	; (801721c <_svfiprintf_r+0x1ec>)
 8017200:	a904      	add	r1, sp, #16
 8017202:	4640      	mov	r0, r8
 8017204:	f000 f882 	bl	801730c <_printf_i>
 8017208:	e7ea      	b.n	80171e0 <_svfiprintf_r+0x1b0>
 801720a:	bf00      	nop
 801720c:	0801b894 	.word	0x0801b894
 8017210:	0801b89a 	.word	0x0801b89a
 8017214:	0801b89e 	.word	0x0801b89e
 8017218:	00000000 	.word	0x00000000
 801721c:	08016f7d 	.word	0x08016f7d

08017220 <_printf_common>:
 8017220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017224:	4691      	mov	r9, r2
 8017226:	461f      	mov	r7, r3
 8017228:	688a      	ldr	r2, [r1, #8]
 801722a:	690b      	ldr	r3, [r1, #16]
 801722c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017230:	4293      	cmp	r3, r2
 8017232:	bfb8      	it	lt
 8017234:	4613      	movlt	r3, r2
 8017236:	f8c9 3000 	str.w	r3, [r9]
 801723a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801723e:	4606      	mov	r6, r0
 8017240:	460c      	mov	r4, r1
 8017242:	b112      	cbz	r2, 801724a <_printf_common+0x2a>
 8017244:	3301      	adds	r3, #1
 8017246:	f8c9 3000 	str.w	r3, [r9]
 801724a:	6823      	ldr	r3, [r4, #0]
 801724c:	0699      	lsls	r1, r3, #26
 801724e:	bf42      	ittt	mi
 8017250:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017254:	3302      	addmi	r3, #2
 8017256:	f8c9 3000 	strmi.w	r3, [r9]
 801725a:	6825      	ldr	r5, [r4, #0]
 801725c:	f015 0506 	ands.w	r5, r5, #6
 8017260:	d107      	bne.n	8017272 <_printf_common+0x52>
 8017262:	f104 0a19 	add.w	sl, r4, #25
 8017266:	68e3      	ldr	r3, [r4, #12]
 8017268:	f8d9 2000 	ldr.w	r2, [r9]
 801726c:	1a9b      	subs	r3, r3, r2
 801726e:	42ab      	cmp	r3, r5
 8017270:	dc28      	bgt.n	80172c4 <_printf_common+0xa4>
 8017272:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017276:	6822      	ldr	r2, [r4, #0]
 8017278:	3300      	adds	r3, #0
 801727a:	bf18      	it	ne
 801727c:	2301      	movne	r3, #1
 801727e:	0692      	lsls	r2, r2, #26
 8017280:	d42d      	bmi.n	80172de <_printf_common+0xbe>
 8017282:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017286:	4639      	mov	r1, r7
 8017288:	4630      	mov	r0, r6
 801728a:	47c0      	blx	r8
 801728c:	3001      	adds	r0, #1
 801728e:	d020      	beq.n	80172d2 <_printf_common+0xb2>
 8017290:	6823      	ldr	r3, [r4, #0]
 8017292:	68e5      	ldr	r5, [r4, #12]
 8017294:	f8d9 2000 	ldr.w	r2, [r9]
 8017298:	f003 0306 	and.w	r3, r3, #6
 801729c:	2b04      	cmp	r3, #4
 801729e:	bf08      	it	eq
 80172a0:	1aad      	subeq	r5, r5, r2
 80172a2:	68a3      	ldr	r3, [r4, #8]
 80172a4:	6922      	ldr	r2, [r4, #16]
 80172a6:	bf0c      	ite	eq
 80172a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80172ac:	2500      	movne	r5, #0
 80172ae:	4293      	cmp	r3, r2
 80172b0:	bfc4      	itt	gt
 80172b2:	1a9b      	subgt	r3, r3, r2
 80172b4:	18ed      	addgt	r5, r5, r3
 80172b6:	f04f 0900 	mov.w	r9, #0
 80172ba:	341a      	adds	r4, #26
 80172bc:	454d      	cmp	r5, r9
 80172be:	d11a      	bne.n	80172f6 <_printf_common+0xd6>
 80172c0:	2000      	movs	r0, #0
 80172c2:	e008      	b.n	80172d6 <_printf_common+0xb6>
 80172c4:	2301      	movs	r3, #1
 80172c6:	4652      	mov	r2, sl
 80172c8:	4639      	mov	r1, r7
 80172ca:	4630      	mov	r0, r6
 80172cc:	47c0      	blx	r8
 80172ce:	3001      	adds	r0, #1
 80172d0:	d103      	bne.n	80172da <_printf_common+0xba>
 80172d2:	f04f 30ff 	mov.w	r0, #4294967295
 80172d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172da:	3501      	adds	r5, #1
 80172dc:	e7c3      	b.n	8017266 <_printf_common+0x46>
 80172de:	18e1      	adds	r1, r4, r3
 80172e0:	1c5a      	adds	r2, r3, #1
 80172e2:	2030      	movs	r0, #48	; 0x30
 80172e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80172e8:	4422      	add	r2, r4
 80172ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80172ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80172f2:	3302      	adds	r3, #2
 80172f4:	e7c5      	b.n	8017282 <_printf_common+0x62>
 80172f6:	2301      	movs	r3, #1
 80172f8:	4622      	mov	r2, r4
 80172fa:	4639      	mov	r1, r7
 80172fc:	4630      	mov	r0, r6
 80172fe:	47c0      	blx	r8
 8017300:	3001      	adds	r0, #1
 8017302:	d0e6      	beq.n	80172d2 <_printf_common+0xb2>
 8017304:	f109 0901 	add.w	r9, r9, #1
 8017308:	e7d8      	b.n	80172bc <_printf_common+0x9c>
	...

0801730c <_printf_i>:
 801730c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017310:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017314:	460c      	mov	r4, r1
 8017316:	7e09      	ldrb	r1, [r1, #24]
 8017318:	b085      	sub	sp, #20
 801731a:	296e      	cmp	r1, #110	; 0x6e
 801731c:	4617      	mov	r7, r2
 801731e:	4606      	mov	r6, r0
 8017320:	4698      	mov	r8, r3
 8017322:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017324:	f000 80b3 	beq.w	801748e <_printf_i+0x182>
 8017328:	d822      	bhi.n	8017370 <_printf_i+0x64>
 801732a:	2963      	cmp	r1, #99	; 0x63
 801732c:	d036      	beq.n	801739c <_printf_i+0x90>
 801732e:	d80a      	bhi.n	8017346 <_printf_i+0x3a>
 8017330:	2900      	cmp	r1, #0
 8017332:	f000 80b9 	beq.w	80174a8 <_printf_i+0x19c>
 8017336:	2958      	cmp	r1, #88	; 0x58
 8017338:	f000 8083 	beq.w	8017442 <_printf_i+0x136>
 801733c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017340:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017344:	e032      	b.n	80173ac <_printf_i+0xa0>
 8017346:	2964      	cmp	r1, #100	; 0x64
 8017348:	d001      	beq.n	801734e <_printf_i+0x42>
 801734a:	2969      	cmp	r1, #105	; 0x69
 801734c:	d1f6      	bne.n	801733c <_printf_i+0x30>
 801734e:	6820      	ldr	r0, [r4, #0]
 8017350:	6813      	ldr	r3, [r2, #0]
 8017352:	0605      	lsls	r5, r0, #24
 8017354:	f103 0104 	add.w	r1, r3, #4
 8017358:	d52a      	bpl.n	80173b0 <_printf_i+0xa4>
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	6011      	str	r1, [r2, #0]
 801735e:	2b00      	cmp	r3, #0
 8017360:	da03      	bge.n	801736a <_printf_i+0x5e>
 8017362:	222d      	movs	r2, #45	; 0x2d
 8017364:	425b      	negs	r3, r3
 8017366:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801736a:	486f      	ldr	r0, [pc, #444]	; (8017528 <_printf_i+0x21c>)
 801736c:	220a      	movs	r2, #10
 801736e:	e039      	b.n	80173e4 <_printf_i+0xd8>
 8017370:	2973      	cmp	r1, #115	; 0x73
 8017372:	f000 809d 	beq.w	80174b0 <_printf_i+0x1a4>
 8017376:	d808      	bhi.n	801738a <_printf_i+0x7e>
 8017378:	296f      	cmp	r1, #111	; 0x6f
 801737a:	d020      	beq.n	80173be <_printf_i+0xb2>
 801737c:	2970      	cmp	r1, #112	; 0x70
 801737e:	d1dd      	bne.n	801733c <_printf_i+0x30>
 8017380:	6823      	ldr	r3, [r4, #0]
 8017382:	f043 0320 	orr.w	r3, r3, #32
 8017386:	6023      	str	r3, [r4, #0]
 8017388:	e003      	b.n	8017392 <_printf_i+0x86>
 801738a:	2975      	cmp	r1, #117	; 0x75
 801738c:	d017      	beq.n	80173be <_printf_i+0xb2>
 801738e:	2978      	cmp	r1, #120	; 0x78
 8017390:	d1d4      	bne.n	801733c <_printf_i+0x30>
 8017392:	2378      	movs	r3, #120	; 0x78
 8017394:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017398:	4864      	ldr	r0, [pc, #400]	; (801752c <_printf_i+0x220>)
 801739a:	e055      	b.n	8017448 <_printf_i+0x13c>
 801739c:	6813      	ldr	r3, [r2, #0]
 801739e:	1d19      	adds	r1, r3, #4
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	6011      	str	r1, [r2, #0]
 80173a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80173ac:	2301      	movs	r3, #1
 80173ae:	e08c      	b.n	80174ca <_printf_i+0x1be>
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	6011      	str	r1, [r2, #0]
 80173b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80173b8:	bf18      	it	ne
 80173ba:	b21b      	sxthne	r3, r3
 80173bc:	e7cf      	b.n	801735e <_printf_i+0x52>
 80173be:	6813      	ldr	r3, [r2, #0]
 80173c0:	6825      	ldr	r5, [r4, #0]
 80173c2:	1d18      	adds	r0, r3, #4
 80173c4:	6010      	str	r0, [r2, #0]
 80173c6:	0628      	lsls	r0, r5, #24
 80173c8:	d501      	bpl.n	80173ce <_printf_i+0xc2>
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	e002      	b.n	80173d4 <_printf_i+0xc8>
 80173ce:	0668      	lsls	r0, r5, #25
 80173d0:	d5fb      	bpl.n	80173ca <_printf_i+0xbe>
 80173d2:	881b      	ldrh	r3, [r3, #0]
 80173d4:	4854      	ldr	r0, [pc, #336]	; (8017528 <_printf_i+0x21c>)
 80173d6:	296f      	cmp	r1, #111	; 0x6f
 80173d8:	bf14      	ite	ne
 80173da:	220a      	movne	r2, #10
 80173dc:	2208      	moveq	r2, #8
 80173de:	2100      	movs	r1, #0
 80173e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80173e4:	6865      	ldr	r5, [r4, #4]
 80173e6:	60a5      	str	r5, [r4, #8]
 80173e8:	2d00      	cmp	r5, #0
 80173ea:	f2c0 8095 	blt.w	8017518 <_printf_i+0x20c>
 80173ee:	6821      	ldr	r1, [r4, #0]
 80173f0:	f021 0104 	bic.w	r1, r1, #4
 80173f4:	6021      	str	r1, [r4, #0]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d13d      	bne.n	8017476 <_printf_i+0x16a>
 80173fa:	2d00      	cmp	r5, #0
 80173fc:	f040 808e 	bne.w	801751c <_printf_i+0x210>
 8017400:	4665      	mov	r5, ip
 8017402:	2a08      	cmp	r2, #8
 8017404:	d10b      	bne.n	801741e <_printf_i+0x112>
 8017406:	6823      	ldr	r3, [r4, #0]
 8017408:	07db      	lsls	r3, r3, #31
 801740a:	d508      	bpl.n	801741e <_printf_i+0x112>
 801740c:	6923      	ldr	r3, [r4, #16]
 801740e:	6862      	ldr	r2, [r4, #4]
 8017410:	429a      	cmp	r2, r3
 8017412:	bfde      	ittt	le
 8017414:	2330      	movle	r3, #48	; 0x30
 8017416:	f805 3c01 	strble.w	r3, [r5, #-1]
 801741a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801741e:	ebac 0305 	sub.w	r3, ip, r5
 8017422:	6123      	str	r3, [r4, #16]
 8017424:	f8cd 8000 	str.w	r8, [sp]
 8017428:	463b      	mov	r3, r7
 801742a:	aa03      	add	r2, sp, #12
 801742c:	4621      	mov	r1, r4
 801742e:	4630      	mov	r0, r6
 8017430:	f7ff fef6 	bl	8017220 <_printf_common>
 8017434:	3001      	adds	r0, #1
 8017436:	d14d      	bne.n	80174d4 <_printf_i+0x1c8>
 8017438:	f04f 30ff 	mov.w	r0, #4294967295
 801743c:	b005      	add	sp, #20
 801743e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017442:	4839      	ldr	r0, [pc, #228]	; (8017528 <_printf_i+0x21c>)
 8017444:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017448:	6813      	ldr	r3, [r2, #0]
 801744a:	6821      	ldr	r1, [r4, #0]
 801744c:	1d1d      	adds	r5, r3, #4
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	6015      	str	r5, [r2, #0]
 8017452:	060a      	lsls	r2, r1, #24
 8017454:	d50b      	bpl.n	801746e <_printf_i+0x162>
 8017456:	07ca      	lsls	r2, r1, #31
 8017458:	bf44      	itt	mi
 801745a:	f041 0120 	orrmi.w	r1, r1, #32
 801745e:	6021      	strmi	r1, [r4, #0]
 8017460:	b91b      	cbnz	r3, 801746a <_printf_i+0x15e>
 8017462:	6822      	ldr	r2, [r4, #0]
 8017464:	f022 0220 	bic.w	r2, r2, #32
 8017468:	6022      	str	r2, [r4, #0]
 801746a:	2210      	movs	r2, #16
 801746c:	e7b7      	b.n	80173de <_printf_i+0xd2>
 801746e:	064d      	lsls	r5, r1, #25
 8017470:	bf48      	it	mi
 8017472:	b29b      	uxthmi	r3, r3
 8017474:	e7ef      	b.n	8017456 <_printf_i+0x14a>
 8017476:	4665      	mov	r5, ip
 8017478:	fbb3 f1f2 	udiv	r1, r3, r2
 801747c:	fb02 3311 	mls	r3, r2, r1, r3
 8017480:	5cc3      	ldrb	r3, [r0, r3]
 8017482:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017486:	460b      	mov	r3, r1
 8017488:	2900      	cmp	r1, #0
 801748a:	d1f5      	bne.n	8017478 <_printf_i+0x16c>
 801748c:	e7b9      	b.n	8017402 <_printf_i+0xf6>
 801748e:	6813      	ldr	r3, [r2, #0]
 8017490:	6825      	ldr	r5, [r4, #0]
 8017492:	6961      	ldr	r1, [r4, #20]
 8017494:	1d18      	adds	r0, r3, #4
 8017496:	6010      	str	r0, [r2, #0]
 8017498:	0628      	lsls	r0, r5, #24
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	d501      	bpl.n	80174a2 <_printf_i+0x196>
 801749e:	6019      	str	r1, [r3, #0]
 80174a0:	e002      	b.n	80174a8 <_printf_i+0x19c>
 80174a2:	066a      	lsls	r2, r5, #25
 80174a4:	d5fb      	bpl.n	801749e <_printf_i+0x192>
 80174a6:	8019      	strh	r1, [r3, #0]
 80174a8:	2300      	movs	r3, #0
 80174aa:	6123      	str	r3, [r4, #16]
 80174ac:	4665      	mov	r5, ip
 80174ae:	e7b9      	b.n	8017424 <_printf_i+0x118>
 80174b0:	6813      	ldr	r3, [r2, #0]
 80174b2:	1d19      	adds	r1, r3, #4
 80174b4:	6011      	str	r1, [r2, #0]
 80174b6:	681d      	ldr	r5, [r3, #0]
 80174b8:	6862      	ldr	r2, [r4, #4]
 80174ba:	2100      	movs	r1, #0
 80174bc:	4628      	mov	r0, r5
 80174be:	f7e8 fe97 	bl	80001f0 <memchr>
 80174c2:	b108      	cbz	r0, 80174c8 <_printf_i+0x1bc>
 80174c4:	1b40      	subs	r0, r0, r5
 80174c6:	6060      	str	r0, [r4, #4]
 80174c8:	6863      	ldr	r3, [r4, #4]
 80174ca:	6123      	str	r3, [r4, #16]
 80174cc:	2300      	movs	r3, #0
 80174ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80174d2:	e7a7      	b.n	8017424 <_printf_i+0x118>
 80174d4:	6923      	ldr	r3, [r4, #16]
 80174d6:	462a      	mov	r2, r5
 80174d8:	4639      	mov	r1, r7
 80174da:	4630      	mov	r0, r6
 80174dc:	47c0      	blx	r8
 80174de:	3001      	adds	r0, #1
 80174e0:	d0aa      	beq.n	8017438 <_printf_i+0x12c>
 80174e2:	6823      	ldr	r3, [r4, #0]
 80174e4:	079b      	lsls	r3, r3, #30
 80174e6:	d413      	bmi.n	8017510 <_printf_i+0x204>
 80174e8:	68e0      	ldr	r0, [r4, #12]
 80174ea:	9b03      	ldr	r3, [sp, #12]
 80174ec:	4298      	cmp	r0, r3
 80174ee:	bfb8      	it	lt
 80174f0:	4618      	movlt	r0, r3
 80174f2:	e7a3      	b.n	801743c <_printf_i+0x130>
 80174f4:	2301      	movs	r3, #1
 80174f6:	464a      	mov	r2, r9
 80174f8:	4639      	mov	r1, r7
 80174fa:	4630      	mov	r0, r6
 80174fc:	47c0      	blx	r8
 80174fe:	3001      	adds	r0, #1
 8017500:	d09a      	beq.n	8017438 <_printf_i+0x12c>
 8017502:	3501      	adds	r5, #1
 8017504:	68e3      	ldr	r3, [r4, #12]
 8017506:	9a03      	ldr	r2, [sp, #12]
 8017508:	1a9b      	subs	r3, r3, r2
 801750a:	42ab      	cmp	r3, r5
 801750c:	dcf2      	bgt.n	80174f4 <_printf_i+0x1e8>
 801750e:	e7eb      	b.n	80174e8 <_printf_i+0x1dc>
 8017510:	2500      	movs	r5, #0
 8017512:	f104 0919 	add.w	r9, r4, #25
 8017516:	e7f5      	b.n	8017504 <_printf_i+0x1f8>
 8017518:	2b00      	cmp	r3, #0
 801751a:	d1ac      	bne.n	8017476 <_printf_i+0x16a>
 801751c:	7803      	ldrb	r3, [r0, #0]
 801751e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017522:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017526:	e76c      	b.n	8017402 <_printf_i+0xf6>
 8017528:	0801b8a5 	.word	0x0801b8a5
 801752c:	0801b8b6 	.word	0x0801b8b6

08017530 <memmove>:
 8017530:	4288      	cmp	r0, r1
 8017532:	b510      	push	{r4, lr}
 8017534:	eb01 0302 	add.w	r3, r1, r2
 8017538:	d807      	bhi.n	801754a <memmove+0x1a>
 801753a:	1e42      	subs	r2, r0, #1
 801753c:	4299      	cmp	r1, r3
 801753e:	d00a      	beq.n	8017556 <memmove+0x26>
 8017540:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017544:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017548:	e7f8      	b.n	801753c <memmove+0xc>
 801754a:	4283      	cmp	r3, r0
 801754c:	d9f5      	bls.n	801753a <memmove+0xa>
 801754e:	1881      	adds	r1, r0, r2
 8017550:	1ad2      	subs	r2, r2, r3
 8017552:	42d3      	cmn	r3, r2
 8017554:	d100      	bne.n	8017558 <memmove+0x28>
 8017556:	bd10      	pop	{r4, pc}
 8017558:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801755c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017560:	e7f7      	b.n	8017552 <memmove+0x22>

08017562 <_realloc_r>:
 8017562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017564:	4607      	mov	r7, r0
 8017566:	4614      	mov	r4, r2
 8017568:	460e      	mov	r6, r1
 801756a:	b921      	cbnz	r1, 8017576 <_realloc_r+0x14>
 801756c:	4611      	mov	r1, r2
 801756e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017572:	f7ff bc6f 	b.w	8016e54 <_malloc_r>
 8017576:	b922      	cbnz	r2, 8017582 <_realloc_r+0x20>
 8017578:	f7ff fc1e 	bl	8016db8 <_free_r>
 801757c:	4625      	mov	r5, r4
 801757e:	4628      	mov	r0, r5
 8017580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017582:	f000 f814 	bl	80175ae <_malloc_usable_size_r>
 8017586:	42a0      	cmp	r0, r4
 8017588:	d20f      	bcs.n	80175aa <_realloc_r+0x48>
 801758a:	4621      	mov	r1, r4
 801758c:	4638      	mov	r0, r7
 801758e:	f7ff fc61 	bl	8016e54 <_malloc_r>
 8017592:	4605      	mov	r5, r0
 8017594:	2800      	cmp	r0, #0
 8017596:	d0f2      	beq.n	801757e <_realloc_r+0x1c>
 8017598:	4631      	mov	r1, r6
 801759a:	4622      	mov	r2, r4
 801759c:	f7ff fbf9 	bl	8016d92 <memcpy>
 80175a0:	4631      	mov	r1, r6
 80175a2:	4638      	mov	r0, r7
 80175a4:	f7ff fc08 	bl	8016db8 <_free_r>
 80175a8:	e7e9      	b.n	801757e <_realloc_r+0x1c>
 80175aa:	4635      	mov	r5, r6
 80175ac:	e7e7      	b.n	801757e <_realloc_r+0x1c>

080175ae <_malloc_usable_size_r>:
 80175ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80175b2:	1f18      	subs	r0, r3, #4
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	bfbc      	itt	lt
 80175b8:	580b      	ldrlt	r3, [r1, r0]
 80175ba:	18c0      	addlt	r0, r0, r3
 80175bc:	4770      	bx	lr
	...

080175c0 <_init>:
 80175c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175c2:	bf00      	nop
 80175c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175c6:	bc08      	pop	{r3}
 80175c8:	469e      	mov	lr, r3
 80175ca:	4770      	bx	lr

080175cc <_fini>:
 80175cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ce:	bf00      	nop
 80175d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175d2:	bc08      	pop	{r3}
 80175d4:	469e      	mov	lr, r3
 80175d6:	4770      	bx	lr
