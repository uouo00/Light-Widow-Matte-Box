
Matte Box Rev 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000179a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000042f0  08017b48  08017b48  00027b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be38  0801be38  0003023c  2**0
                  CONTENTS
  4 .ARM          00000008  0801be38  0801be38  0002be38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be40  0801be40  0003023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801be40  0801be40  0002be40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801be44  0801be44  0002be44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0801be48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002620  2000023c  0801c084  0003023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000285c  0801c084  0003285c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c41c  00000000  00000000  0003026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008057  00000000  00000000  0006c688  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002318  00000000  00000000  000746e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f98  00000000  00000000  000769f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000126c4  00000000  00000000  00078990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b2c2  00000000  00000000  0008b054  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1bf4  00000000  00000000  000b6316  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167f0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009130  00000000  00000000  00167f88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000023c 	.word	0x2000023c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017b30 	.word	0x08017b30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000240 	.word	0x20000240
 80001dc:	08017b30 	.word	0x08017b30

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b972 	b.w	8000d78 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4688      	mov	r8, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14b      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4615      	mov	r5, r2
 8000abe:	d967      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0720 	rsb	r7, r2, #32
 8000aca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ace:	fa20 f707 	lsr.w	r7, r0, r7
 8000ad2:	4095      	lsls	r5, r2
 8000ad4:	ea47 0803 	orr.w	r8, r7, r3
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ae4:	fa1f fc85 	uxth.w	ip, r5
 8000ae8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000aec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af0:	fb07 f10c 	mul.w	r1, r7, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000afe:	f080 811b 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8118 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b08:	3f02      	subs	r7, #2
 8000b0a:	442b      	add	r3, r5
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	192c      	adds	r4, r5, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8107 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b2e:	45a4      	cmp	ip, r4
 8000b30:	f240 8104 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b34:	3802      	subs	r0, #2
 8000b36:	442c      	add	r4, r5
 8000b38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b3c:	eba4 040c 	sub.w	r4, r4, ip
 8000b40:	2700      	movs	r7, #0
 8000b42:	b11e      	cbz	r6, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0xbe>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80eb 	beq.w	8000d32 <__udivmoddi4+0x286>
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b62:	4638      	mov	r0, r7
 8000b64:	4639      	mov	r1, r7
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f783 	clz	r7, r3
 8000b6e:	2f00      	cmp	r7, #0
 8000b70:	d147      	bne.n	8000c02 <__udivmoddi4+0x156>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0xd0>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80fa 	bhi.w	8000d70 <__udivmoddi4+0x2c4>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	4698      	mov	r8, r3
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d0e0      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000b8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b8e:	e7dd      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000b90:	b902      	cbnz	r2, 8000b94 <__udivmoddi4+0xe8>
 8000b92:	deff      	udf	#255	; 0xff
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	f040 808f 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9e:	1b49      	subs	r1, r1, r5
 8000ba0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba4:	fa1f f885 	uxth.w	r8, r5
 8000ba8:	2701      	movs	r7, #1
 8000baa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bae:	0c23      	lsrs	r3, r4, #16
 8000bb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bc0:	18eb      	adds	r3, r5, r3
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	f200 80cd 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1a59      	subs	r1, r3, r1
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x14c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x14a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80b6 	bhi.w	8000d62 <__udivmoddi4+0x2b6>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e79f      	b.n	8000b42 <__udivmoddi4+0x96>
 8000c02:	f1c7 0c20 	rsb	ip, r7, #32
 8000c06:	40bb      	lsls	r3, r7
 8000c08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c10:	fa01 f407 	lsl.w	r4, r1, r7
 8000c14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c20:	4325      	orrs	r5, r4
 8000c22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c26:	0c2c      	lsrs	r4, r5, #16
 8000c28:	fb08 3319 	mls	r3, r8, r9, r3
 8000c2c:	fa1f fa8e 	uxth.w	sl, lr
 8000c30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c34:	fb09 f40a 	mul.w	r4, r9, sl
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1e 0303 	adds.w	r3, lr, r3
 8000c48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c4c:	f080 8087 	bcs.w	8000d5e <__udivmoddi4+0x2b2>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f240 8084 	bls.w	8000d5e <__udivmoddi4+0x2b2>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4473      	add	r3, lr
 8000c5c:	1b1b      	subs	r3, r3, r4
 8000c5e:	b2ad      	uxth	r5, r5
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c70:	45a2      	cmp	sl, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1e 0404 	adds.w	r4, lr, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	d26b      	bcs.n	8000d56 <__udivmoddi4+0x2aa>
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d969      	bls.n	8000d56 <__udivmoddi4+0x2aa>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4474      	add	r4, lr
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8e:	eba4 040a 	sub.w	r4, r4, sl
 8000c92:	454c      	cmp	r4, r9
 8000c94:	46c2      	mov	sl, r8
 8000c96:	464b      	mov	r3, r9
 8000c98:	d354      	bcc.n	8000d44 <__udivmoddi4+0x298>
 8000c9a:	d051      	beq.n	8000d40 <__udivmoddi4+0x294>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d069      	beq.n	8000d74 <__udivmoddi4+0x2c8>
 8000ca0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ca4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ca8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	40fc      	lsrs	r4, r7
 8000cb0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cb4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e747      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000cbc:	f1c2 0320 	rsb	r3, r2, #32
 8000cc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cc4:	4095      	lsls	r5, r2
 8000cc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cca:	fa21 f303 	lsr.w	r3, r1, r3
 8000cce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd2:	4338      	orrs	r0, r7
 8000cd4:	0c01      	lsrs	r1, r0, #16
 8000cd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cda:	fa1f f885 	uxth.w	r8, r5
 8000cde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb07 f308 	mul.w	r3, r7, r8
 8000cea:	428b      	cmp	r3, r1
 8000cec:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x256>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cf8:	d22f      	bcs.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d92d      	bls.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfe:	3f02      	subs	r7, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	b281      	uxth	r1, r0
 8000d06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d12:	fb00 f308 	mul.w	r3, r0, r8
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d907      	bls.n	8000d2a <__udivmoddi4+0x27e>
 8000d1a:	1869      	adds	r1, r5, r1
 8000d1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d20:	d217      	bcs.n	8000d52 <__udivmoddi4+0x2a6>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d915      	bls.n	8000d52 <__udivmoddi4+0x2a6>
 8000d26:	3802      	subs	r0, #2
 8000d28:	4429      	add	r1, r5
 8000d2a:	1ac9      	subs	r1, r1, r3
 8000d2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d30:	e73b      	b.n	8000baa <__udivmoddi4+0xfe>
 8000d32:	4637      	mov	r7, r6
 8000d34:	4630      	mov	r0, r6
 8000d36:	e709      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d38:	4607      	mov	r7, r0
 8000d3a:	e6e7      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	e6fb      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d40:	4541      	cmp	r1, r8
 8000d42:	d2ab      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d48:	eb69 020e 	sbc.w	r2, r9, lr
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	4613      	mov	r3, r2
 8000d50:	e7a4      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d52:	4660      	mov	r0, ip
 8000d54:	e7e9      	b.n	8000d2a <__udivmoddi4+0x27e>
 8000d56:	4618      	mov	r0, r3
 8000d58:	e795      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5a:	4667      	mov	r7, ip
 8000d5c:	e7d1      	b.n	8000d02 <__udivmoddi4+0x256>
 8000d5e:	4681      	mov	r9, r0
 8000d60:	e77c      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	442c      	add	r4, r5
 8000d66:	e747      	b.n	8000bf8 <__udivmoddi4+0x14c>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	442b      	add	r3, r5
 8000d6e:	e72f      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d70:	4638      	mov	r0, r7
 8000d72:	e708      	b.n	8000b86 <__udivmoddi4+0xda>
 8000d74:	4637      	mov	r7, r6
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0xa0>

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
    //if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <DWT_Init+0x2c>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <DWT_Init+0x2c>)
 8000d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d8a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <DWT_Init+0x30>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <DWT_Init+0x30>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <DWT_Init+0x30>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6013      	str	r3, [r2, #0]
    //}
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000edf0 	.word	0xe000edf0
 8000dac:	e0001000 	.word	0xe0001000

08000db0 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <DWT_Delay+0x40>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <DWT_Delay+0x44>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <DWT_Delay+0x48>)
 8000dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc8:	0c9a      	lsrs	r2, r3, #18
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	fb02 f303 	mul.w	r3, r2, r3
 8000dd0:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000dd2:	bf00      	nop
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <DWT_Delay+0x40>)
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d8f8      	bhi.n	8000dd4 <DWT_Delay+0x24>
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e0001000 	.word	0xe0001000
 8000df4:	20000050 	.word	0x20000050
 8000df8:	431bde83 	.word	0x431bde83

08000dfc <updateFilterSection>:
 *******************************************************************************/

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/
filterSectionStatus_t updateFilterSection(detectedTags_t *dTag, filterSection_t *currentFilters){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	filterSectionStatus_t status = NO_CHANGE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	77fb      	strb	r3, [r7, #31]
	bool UIDMatched = false;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	77bb      	strb	r3, [r7, #30]
	uint8_t tempZero[10] = {0};
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	811a      	strh	r2, [r3, #8]
	// For Loop Variables
	uint8_t detectedTag;
	uint8_t currentTag;

	// Look for filters that have been removed
	for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	773b      	strb	r3, [r7, #28]
 8000e1e:	e07d      	b.n	8000f1c <updateFilterSection+0x120>
		UIDMatched = false;
 8000e20:	2300      	movs	r3, #0
 8000e22:	77bb      	strb	r3, [r7, #30]
		// Take each current filter tag UID and try to locate it within the detected tags.
		for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000e24:	2300      	movs	r3, #0
 8000e26:	777b      	strb	r3, [r7, #29]
 8000e28:	e02f      	b.n	8000e8a <updateFilterSection+0x8e>
			if (memcmp(dTag->filterTags[detectedTag].tagUID, currentFilters->filter[currentTag].filterTagUID, 8) == 0){
 8000e2a:	7f7a      	ldrb	r2, [r7, #29]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	1c58      	adds	r0, r3, #1
 8000e3a:	7f3a      	ldrb	r2, [r7, #28]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	4413      	add	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	3308      	adds	r3, #8
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4619      	mov	r1, r3
 8000e52:	f016 fa47 	bl	80172e4 <memcmp>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d113      	bne.n	8000e84 <updateFilterSection+0x88>
				// To Prevent matching 2 empty stages
				if (memcmp(dTag->filterTags[detectedTag].tagUID, tempZero, 8) != 0){
 8000e5c:	7f7a      	ldrb	r2, [r7, #29]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f107 010c 	add.w	r1, r7, #12
 8000e70:	2208      	movs	r2, #8
 8000e72:	4618      	mov	r0, r3
 8000e74:	f016 fa36 	bl	80172e4 <memcmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <updateFilterSection+0x88>
					// Found a match. The tag is still here.
					UIDMatched = true;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	77bb      	strb	r3, [r7, #30]
					break;
 8000e82:	e005      	b.n	8000e90 <updateFilterSection+0x94>
		for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000e84:	7f7b      	ldrb	r3, [r7, #29]
 8000e86:	3301      	adds	r3, #1
 8000e88:	777b      	strb	r3, [r7, #29]
 8000e8a:	7f7b      	ldrb	r3, [r7, #29]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d9cc      	bls.n	8000e2a <updateFilterSection+0x2e>
				}
			}
		}

		if (!UIDMatched){
 8000e90:	7fbb      	ldrb	r3, [r7, #30]
 8000e92:	f083 0301 	eor.w	r3, r3, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d03c      	beq.n	8000f16 <updateFilterSection+0x11a>
			// Make sure the UID is not all 0's
			if (memcmp(currentFilters->filter[currentTag].filterTagUID, tempZero, 8) != 0){
 8000e9c:	7f3a      	ldrb	r2, [r7, #28]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3308      	adds	r3, #8
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	3303      	adds	r3, #3
 8000eb0:	f107 010c 	add.w	r1, r7, #12
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f016 fa14 	bl	80172e4 <memcmp>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d029      	beq.n	8000f16 <updateFilterSection+0x11a>
				// A filter has been taken out
				// Clear UID, Name, and Position
				memset(currentFilters->filter[currentTag].filterTagUID, 0x00, 8);
 8000ec2:	7f3a      	ldrb	r2, [r7, #28]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4413      	add	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	3308      	adds	r3, #8
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3303      	adds	r3, #3
 8000ed6:	2208      	movs	r2, #8
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f016 fa1c 	bl	8017318 <memset>
				memset(currentFilters->filter[currentTag].filterName, 0x00, 10);
 8000ee0:	7f3a      	ldrb	r2, [r7, #28]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	220a      	movs	r2, #10
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f016 fa0e 	bl	8017318 <memset>
				currentFilters->filter[currentTag].position = 0;
 8000efc:	7f3a      	ldrb	r2, [r7, #28]
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	4613      	mov	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3313      	adds	r3, #19
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
				status = FILTER_REMOVED;
 8000f12:	2301      	movs	r3, #1
 8000f14:	77fb      	strb	r3, [r7, #31]
	for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++) {
 8000f16:	7f3b      	ldrb	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	773b      	strb	r3, [r7, #28]
 8000f1c:	7f3b      	ldrb	r3, [r7, #28]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	f67f af7e 	bls.w	8000e20 <updateFilterSection+0x24>
			}
		}
	}

	// Look for filters that have been installed
	for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 8000f24:	2300      	movs	r3, #0
 8000f26:	777b      	strb	r3, [r7, #29]
 8000f28:	e0e3      	b.n	80010f2 <updateFilterSection+0x2f6>
		UIDMatched = false;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	77bb      	strb	r3, [r7, #30]
		// Loop through each detected UID and try to find it within the current filters
		for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++){
 8000f2e:	2300      	movs	r3, #0
 8000f30:	773b      	strb	r3, [r7, #28]
 8000f32:	e01e      	b.n	8000f72 <updateFilterSection+0x176>
			if (memcmp(dTag->filterTags[detectedTag].tagUID, currentFilters->filter[currentTag].filterTagUID, 8) == 0){
 8000f34:	7f7a      	ldrb	r2, [r7, #29]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	1c58      	adds	r0, r3, #1
 8000f44:	7f3a      	ldrb	r2, [r7, #28]
 8000f46:	4613      	mov	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	3308      	adds	r3, #8
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	3303      	adds	r3, #3
 8000f58:	2208      	movs	r2, #8
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f016 f9c2 	bl	80172e4 <memcmp>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <updateFilterSection+0x170>
				// Found a match. The tag is still installed.
				UIDMatched = true;
 8000f66:	2301      	movs	r3, #1
 8000f68:	77bb      	strb	r3, [r7, #30]
				break;
 8000f6a:	e005      	b.n	8000f78 <updateFilterSection+0x17c>
		for (currentTag = 0; currentTag < FILTER_SECTION_SIZE; currentTag++){
 8000f6c:	7f3b      	ldrb	r3, [r7, #28]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	773b      	strb	r3, [r7, #28]
 8000f72:	7f3b      	ldrb	r3, [r7, #28]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d9dd      	bls.n	8000f34 <updateFilterSection+0x138>
			}
		}

		if (!UIDMatched){
 8000f78:	7fbb      	ldrb	r3, [r7, #30]
 8000f7a:	f083 0301 	eor.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 80b3 	beq.w	80010ec <updateFilterSection+0x2f0>
			// Make sure the detected UID is not all 0's
			if (memcmp(dTag->filterTags[detectedTag].tagUID, tempZero, 8) != 0){
 8000f86:	7f7a      	ldrb	r2, [r7, #29]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	3301      	adds	r3, #1
 8000f96:	f107 010c 	add.w	r1, r7, #12
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f016 f9a1 	bl	80172e4 <memcmp>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80a1 	beq.w	80010ec <updateFilterSection+0x2f0>
				bool filterEmpty; // Holder for the empty filter position
				uint8_t stagePos;
				uint8_t filterPos;

				// Check the name to see if it isn't all zero's
				if (memcmp(dTag->filterTags[detectedTag].tagName, tempZero, 10) != 0){
 8000faa:	7f7a      	ldrb	r2, [r7, #29]
 8000fac:	4613      	mov	r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	4413      	add	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	3308      	adds	r3, #8
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f107 010c 	add.w	r1, r7, #12
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f016 f98e 	bl	80172e4 <memcmp>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 808c 	beq.w	80010e8 <updateFilterSection+0x2ec>
					// Find first empty stage
					for (stagePos = 0; stagePos < FILTER_SECTION_SIZE; stagePos++){
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	767b      	strb	r3, [r7, #25]
 8000fd4:	e021      	b.n	800101a <updateFilterSection+0x21e>
						stageEmpty = true; // Assume the stage is empty
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	76fb      	strb	r3, [r7, #27]
						for (uint8_t curFilter = 0; curFilter < FILTER_SECTION_SIZE; curFilter++){
 8000fda:	2300      	movs	r3, #0
 8000fdc:	75fb      	strb	r3, [r7, #23]
 8000fde:	e013      	b.n	8001008 <updateFilterSection+0x20c>
							if (currentFilters->filter[curFilter].position == stagePos + 1){
 8000fe0:	7dfa      	ldrb	r2, [r7, #23]
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	3313      	adds	r3, #19
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	7e7b      	ldrb	r3, [r7, #25]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d101      	bne.n	8001002 <updateFilterSection+0x206>
								//There is a filter loaded in this position
								stageEmpty = false;
 8000ffe:	2300      	movs	r3, #0
 8001000:	76fb      	strb	r3, [r7, #27]
						for (uint8_t curFilter = 0; curFilter < FILTER_SECTION_SIZE; curFilter++){
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	3301      	adds	r3, #1
 8001006:	75fb      	strb	r3, [r7, #23]
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d9e8      	bls.n	8000fe0 <updateFilterSection+0x1e4>
							}
						}

						if (stageEmpty) {
 800100e:	7efb      	ldrb	r3, [r7, #27]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <updateFilterSection+0x226>
					for (stagePos = 0; stagePos < FILTER_SECTION_SIZE; stagePos++){
 8001014:	7e7b      	ldrb	r3, [r7, #25]
 8001016:	3301      	adds	r3, #1
 8001018:	767b      	strb	r3, [r7, #25]
 800101a:	7e7b      	ldrb	r3, [r7, #25]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d9da      	bls.n	8000fd6 <updateFilterSection+0x1da>
 8001020:	e000      	b.n	8001024 <updateFilterSection+0x228>
							// Searched through all Filter positions, and this stage is empty
							break; // Break for loop and access stagePos for first empty stage
 8001022:	bf00      	nop
						}
					}

					// There is a scenario where the first position in currentFilters is taken, but assigned to a different slot
					// Find the first open position in currentFilters to prevent overwriting a tag
					for (filterPos = 0; filterPos < FILTER_SECTION_SIZE; filterPos++) {
 8001024:	2300      	movs	r3, #0
 8001026:	763b      	strb	r3, [r7, #24]
 8001028:	e01c      	b.n	8001064 <updateFilterSection+0x268>
						filterEmpty = true;	// Assume there's nothing in the filter position
 800102a:	2301      	movs	r3, #1
 800102c:	76bb      	strb	r3, [r7, #26]
						if (memcmp(currentFilters->filter[filterPos].filterTagUID, tempZero, 10) != 0) {
 800102e:	7e3a      	ldrb	r2, [r7, #24]
 8001030:	4613      	mov	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	3308      	adds	r3, #8
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	4413      	add	r3, r2
 8001040:	3303      	adds	r3, #3
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	220a      	movs	r2, #10
 8001048:	4618      	mov	r0, r3
 800104a:	f016 f94b 	bl	80172e4 <memcmp>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <updateFilterSection+0x25c>
							// Something is in the filter position
							filterEmpty = false;
 8001054:	2300      	movs	r3, #0
 8001056:	76bb      	strb	r3, [r7, #26]
						}

						if (filterEmpty) {
 8001058:	7ebb      	ldrb	r3, [r7, #26]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <updateFilterSection+0x270>
					for (filterPos = 0; filterPos < FILTER_SECTION_SIZE; filterPos++) {
 800105e:	7e3b      	ldrb	r3, [r7, #24]
 8001060:	3301      	adds	r3, #1
 8001062:	763b      	strb	r3, [r7, #24]
 8001064:	7e3b      	ldrb	r3, [r7, #24]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d9df      	bls.n	800102a <updateFilterSection+0x22e>
 800106a:	e000      	b.n	800106e <updateFilterSection+0x272>
							// Found an empty position in currentFilters - OK to write into this position.
							break;
 800106c:	bf00      	nop
						}
					}

					// The first open stage is stored in stagePos
					// Write the new UID, Name, and Position
					memcpy(currentFilters->filter[filterPos].filterTagUID, dTag->filterTags[detectedTag].tagUID, 8);
 800106e:	7e3a      	ldrb	r2, [r7, #24]
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	3308      	adds	r3, #8
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	4413      	add	r3, r2
 8001080:	1cd8      	adds	r0, r3, #3
 8001082:	7f7a      	ldrb	r2, [r7, #29]
 8001084:	4613      	mov	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	3301      	adds	r3, #1
 8001092:	2208      	movs	r2, #8
 8001094:	4619      	mov	r1, r3
 8001096:	f016 f934 	bl	8017302 <memcpy>
					memcpy(currentFilters->filter[filterPos].filterName, dTag->filterTags[detectedTag].tagName, 10);
 800109a:	7e3a      	ldrb	r2, [r7, #24]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	1c58      	adds	r0, r3, #1
 80010ac:	7f7a      	ldrb	r2, [r7, #29]
 80010ae:	4613      	mov	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4413      	add	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	3308      	adds	r3, #8
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	3301      	adds	r3, #1
 80010be:	220a      	movs	r2, #10
 80010c0:	4619      	mov	r1, r3
 80010c2:	f016 f91e 	bl	8017302 <memcpy>
					currentFilters->filter[filterPos].position = stagePos + 1;
 80010c6:	7e3a      	ldrb	r2, [r7, #24]
 80010c8:	7e7b      	ldrb	r3, [r7, #25]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2d8      	uxtb	r0, r3
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4413      	add	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	440b      	add	r3, r1
 80010dc:	3313      	adds	r3, #19
 80010de:	4602      	mov	r2, r0
 80010e0:	701a      	strb	r2, [r3, #0]
					status = FILTER_INSTALLED;
 80010e2:	2302      	movs	r3, #2
 80010e4:	77fb      	strb	r3, [r7, #31]
 80010e6:	e001      	b.n	80010ec <updateFilterSection+0x2f0>
				} else {
					// The name is unknown
					status = UNKNOWN_FILTER_NAME;
 80010e8:	2303      	movs	r3, #3
 80010ea:	77fb      	strb	r3, [r7, #31]
	for (detectedTag = 0; detectedTag < FILTER_SECTION_SIZE; detectedTag++){
 80010ec:	7f7b      	ldrb	r3, [r7, #29]
 80010ee:	3301      	adds	r3, #1
 80010f0:	777b      	strb	r3, [r7, #29]
 80010f2:	7f7b      	ldrb	r3, [r7, #29]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	f67f af18 	bls.w	8000f2a <updateFilterSection+0x12e>
			}
		}
	}

	// Update the filter counts
	currentFilters->filterCount = dTag->tagCount;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	701a      	strb	r2, [r3, #0]

	return status;
 8001102:	7ffb      	ldrb	r3, [r7, #31]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <setupIOs>:

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/

void setupIOs(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af02      	add	r7, sp, #8

	// Initialize the temperature sensor
	LM75B_Init(&hi2c1, AUX_POWER_GPIO_Port, AUX_POWER_Pin);
 8001112:	2220      	movs	r2, #32
 8001114:	4921      	ldr	r1, [pc, #132]	; (800119c <setupIOs+0x90>)
 8001116:	4822      	ldr	r0, [pc, #136]	; (80011a0 <setupIOs+0x94>)
 8001118:	f002 fc52 	bl	80039c0 <LM75B_Init>

	// Initialize and Setup the E-Paper Display
	EPD_Init(EPD_2_0, &hspi2, &epd1);
 800111c:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <setupIOs+0x98>)
 800111e:	4922      	ldr	r1, [pc, #136]	; (80011a8 <setupIOs+0x9c>)
 8001120:	2002      	movs	r0, #2
 8001122:	f000 fdd5 	bl	8001cd0 <EPD_Init>

	// Initialize the GFX Library for the EPD
	Canvas_Init(&canvas1, epd1.dots_per_line, epd1.lines_per_display);
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <setupIOs+0x98>)
 8001128:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <setupIOs+0x98>)
 800112c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800112e:	461a      	mov	r2, r3
 8001130:	481e      	ldr	r0, [pc, #120]	; (80011ac <setupIOs+0xa0>)
 8001132:	f001 ff8b 	bl	800304c <Canvas_Init>
	// Text rotation for a vertical display orientation
	canvas_SetRotate(&canvas1, ROTATE_90);
 8001136:	2101      	movs	r1, #1
 8001138:	481c      	ldr	r0, [pc, #112]	; (80011ac <setupIOs+0xa0>)
 800113a:	f002 f9b1 	bl	80034a0 <canvas_SetRotate>

	// Clear the EPD
	EPD_begin(&epd1);
 800113e:	4819      	ldr	r0, [pc, #100]	; (80011a4 <setupIOs+0x98>)
 8001140:	f000 fefa 	bl	8001f38 <EPD_begin>
	EPD_clear(&epd1);
 8001144:	4817      	ldr	r0, [pc, #92]	; (80011a4 <setupIOs+0x98>)
 8001146:	f001 fa83 	bl	8002650 <EPD_clear>
	EPD_end(&epd1);
 800114a:	4816      	ldr	r0, [pc, #88]	; (80011a4 <setupIOs+0x98>)
 800114c:	f001 f964 	bl	8002418 <EPD_end>

	// Render a string of text to the buffer image
	canvas_setBGImage(&canvas1, image_background);
 8001150:	4917      	ldr	r1, [pc, #92]	; (80011b0 <setupIOs+0xa4>)
 8001152:	4816      	ldr	r0, [pc, #88]	; (80011ac <setupIOs+0xa0>)
 8001154:	f002 fb8d 	bl	8003872 <canvas_setBGImage>
	canvas_DrawStringAt(&canvas1, 10, 3, "FILTERS", &Font16, 1);
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <setupIOs+0xa8>)
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <setupIOs+0xac>)
 8001162:	2203      	movs	r2, #3
 8001164:	210a      	movs	r1, #10
 8001166:	4811      	ldr	r0, [pc, #68]	; (80011ac <setupIOs+0xa0>)
 8001168:	f002 fb3d 	bl	80037e6 <canvas_DrawStringAt>
	// Update the EPD with the new image
	canvas_PrintEPD(&canvas1, &epd1);
 800116c:	490d      	ldr	r1, [pc, #52]	; (80011a4 <setupIOs+0x98>)
 800116e:	480f      	ldr	r0, [pc, #60]	; (80011ac <setupIOs+0xa0>)
 8001170:	f002 fb6a 	bl	8003848 <canvas_PrintEPD>
	//  BQ27441_Init(&hi2c1, &lipo1);
	//  // Setup the Fuel Gauge
	//  BQ27441_Setup(&lipo1);

	// Initialize the SD Card
	dataLoggerInit(SDIO_POWER_GPIO_Port, SDIO_POWER_Pin);
 8001174:	2140      	movs	r1, #64	; 0x40
 8001176:	4811      	ldr	r0, [pc, #68]	; (80011bc <setupIOs+0xb0>)
 8001178:	f000 fba6 	bl	80018c8 <dataLoggerInit>

	HAL_GPIO_WritePin(RFID_POWER_GPIO_Port, RFID_POWER_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2108      	movs	r1, #8
 8001180:	480f      	ldr	r0, [pc, #60]	; (80011c0 <setupIOs+0xb4>)
 8001182:	f004 fd0d 	bl	8005ba0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001186:	2005      	movs	r0, #5
 8001188:	f004 fa1a 	bl	80055c0 <HAL_Delay>
	spiInit(&hspi1);
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <setupIOs+0xb8>)
 800118e:	f003 fa61 	bl	8004654 <spiInit>

	rfidControllerInit();
 8001192:	f003 f93b 	bl	800440c <rfidControllerInit>
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40020400 	.word	0x40020400
 80011a0:	20000ff0 	.word	0x20000ff0
 80011a4:	20000ef0 	.word	0x20000ef0
 80011a8:	20000f98 	.word	0x20000f98
 80011ac:	20000f7c 	.word	0x20000f7c
 80011b0:	08017d64 	.word	0x08017d64
 80011b4:	20000040 	.word	0x20000040
 80011b8:	08017b48 	.word	0x08017b48
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	200010e8 	.word	0x200010e8

080011c8 <processIOs>:


void processIOs(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
	int8_t tmpTemp;

	while (1) {

		// Keep the RFAL Happy
		rfalWorker();
 80011ce:	f00d faf1 	bl	800e7b4 <rfalWorker>

		// Check ISR events
		checkISREvents();
 80011d2:	f000 f8a7 	bl	8001324 <checkISREvents>

		switch (processState) {
 80011d6:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <processIOs+0x13c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d8f7      	bhi.n	80011ce <processIOs+0x6>
 80011de:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <processIOs+0x1c>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	080011f9 	.word	0x080011f9
 80011e8:	08001267 	.word	0x08001267
 80011ec:	08001297 	.word	0x08001297
 80011f0:	0800129f 	.word	0x0800129f
 80011f4:	080012bd 	.word	0x080012bd

				// Check on the CLI to see if any new commands are present
				//checkCliStatus();

				// Find filters present in the matte box
				checkFilterTags(&dTags);
 80011f8:	4843      	ldr	r0, [pc, #268]	; (8001308 <processIOs+0x140>)
 80011fa:	f003 f927 	bl	800444c <checkFilterTags>

				// Compare found filter tags with previous filter section
				filterStatus = updateFilterSection(&dTags, &fSection);
 80011fe:	4943      	ldr	r1, [pc, #268]	; (800130c <processIOs+0x144>)
 8001200:	4841      	ldr	r0, [pc, #260]	; (8001308 <processIOs+0x140>)
 8001202:	f7ff fdfb 	bl	8000dfc <updateFilterSection>
 8001206:	4603      	mov	r3, r0
 8001208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				switch (filterStatus) {
 800120c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001210:	2b03      	cmp	r3, #3
 8001212:	d819      	bhi.n	8001248 <processIOs+0x80>
 8001214:	a201      	add	r2, pc, #4	; (adr r2, 800121c <processIOs+0x54>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	08001249 	.word	0x08001249
 8001220:	0800122d 	.word	0x0800122d
 8001224:	0800122d 	.word	0x0800122d
 8001228:	08001241 	.word	0x08001241
						break;

					case FILTER_REMOVED:
					case FILTER_INSTALLED:
						// Update the EPD with the new filter line up.
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 800122c:	2300      	movs	r3, #0
 800122e:	4a37      	ldr	r2, [pc, #220]	; (800130c <processIOs+0x144>)
 8001230:	4937      	ldr	r1, [pc, #220]	; (8001310 <processIOs+0x148>)
 8001232:	4838      	ldr	r0, [pc, #224]	; (8001314 <processIOs+0x14c>)
 8001234:	f001 ff4e 	bl	80030d4 <canvas_DrawFilters>
						// Log to the SD Card
						SDDataLog(&fSection);
 8001238:	4834      	ldr	r0, [pc, #208]	; (800130c <processIOs+0x144>)
 800123a:	f000 fcdd 	bl	8001bf8 <SDDataLog>
						break;
 800123e:	e003      	b.n	8001248 <processIOs+0x80>

					case UNKNOWN_FILTER_NAME:
						// Change state
						processState = UPDATE_FILTER_NAME;
 8001240:	4b30      	ldr	r3, [pc, #192]	; (8001304 <processIOs+0x13c>)
 8001242:	2202      	movs	r2, #2
 8001244:	701a      	strb	r2, [r3, #0]
						break;
 8001246:	bf00      	nop
				}

				// Set the RFID Chip into Wake Up Mode
				ReturnCode err = startWakeUpMode();
 8001248:	f003 f9cc 	bl	80045e4 <startWakeUpMode>
 800124c:	4603      	mov	r3, r0
 800124e:	84bb      	strh	r3, [r7, #36]	; 0x24
				if (err == ERR_NONE) {
 8001250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <processIOs+0x94>
					processState = RFID_WAKEUP_MODE;
 8001256:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <processIOs+0x13c>)
 8001258:	2203      	movs	r2, #3
 800125a:	701a      	strb	r2, [r3, #0]
				}

//				gotoSleep();
//				SystemClock_Config();

				HAL_Delay(500);
 800125c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001260:	f004 f9ae 	bl	80055c0 <HAL_Delay>
				break;
 8001264:	e04d      	b.n	8001302 <processIOs+0x13a>

			case CHANGE_FILTER_POS:
				// Wait for another button press. Timeout after X amount of time.
				if (timeoutCtr >= FILTER_POSITION_TIMEOUT) {
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <processIOs+0x150>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800126e:	d308      	bcc.n	8001282 <processIOs+0xba>
					// Draw stored
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 8001270:	2300      	movs	r3, #0
 8001272:	4a26      	ldr	r2, [pc, #152]	; (800130c <processIOs+0x144>)
 8001274:	4926      	ldr	r1, [pc, #152]	; (8001310 <processIOs+0x148>)
 8001276:	4827      	ldr	r0, [pc, #156]	; (8001314 <processIOs+0x14c>)
 8001278:	f001 ff2c 	bl	80030d4 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <processIOs+0x13c>)
 800127e:	2203      	movs	r2, #3
 8001280:	701a      	strb	r2, [r3, #0]
				}

				HAL_Delay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f004 f99c 	bl	80055c0 <HAL_Delay>
				timeoutCtr++;
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <processIOs+0x150>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <processIOs+0x150>)
 8001292:	801a      	strh	r2, [r3, #0]
				break;
 8001294:	e035      	b.n	8001302 <processIOs+0x13a>

			case UPDATE_FILTER_NAME:

				// Place Holder
				processState = RFID_WAKEUP_MODE;
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <processIOs+0x13c>)
 8001298:	2203      	movs	r2, #3
 800129a:	701a      	strb	r2, [r3, #0]
				break;
 800129c:	e031      	b.n	8001302 <processIOs+0x13a>

			case RFID_WAKEUP_MODE:
				// Handle an external wake up from the RFID chip
				if (rfalWakeUpModeHasWoke()){
 800129e:	f00e fcb9 	bl	800fc14 <rfalWakeUpModeHasWoke>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d02b      	beq.n	8001300 <processIOs+0x138>
					rfalWakeUpModeStop();
 80012a8:	f00e fda0 	bl	800fdec <rfalWakeUpModeStop>
					processState = NORMAL_OPERATION;
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <processIOs+0x13c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS("INTERRUPT\r\n", 11);
 80012b2:	210b      	movs	r1, #11
 80012b4:	4819      	ldr	r0, [pc, #100]	; (800131c <processIOs+0x154>)
 80012b6:	f015 fb99 	bl	80169ec <CDC_Transmit_FS>
				}
				break;
 80012ba:	e021      	b.n	8001300 <processIOs+0x138>

			case TEST_MODE:

				st25r3916MeasureAmplitude(&ampMeas);
 80012bc:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80012c0:	4618      	mov	r0, r3
 80012c2:	f00e ff6a 	bl	801019a <st25r3916MeasureAmplitude>
				st25r3916MeasurePhase(&phsMeas);
 80012c6:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00e ff74 	bl	80101b8 <st25r3916MeasurePhase>

				sprintf(tmpStr, "Amplitude: %d, Phase: %d\r\n", ampMeas, phsMeas);
 80012d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012d4:	461a      	mov	r2, r3
 80012d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80012da:	1d38      	adds	r0, r7, #4
 80012dc:	4910      	ldr	r1, [pc, #64]	; (8001320 <processIOs+0x158>)
 80012de:	f016 f8db 	bl	8017498 <siprintf>

				CDC_Transmit_FS(tmpStr, strlen((char *)tmpStr));
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7fe ff7b 	bl	80001e0 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f015 fb7a 	bl	80169ec <CDC_Transmit_FS>
				HAL_Delay(100);
 80012f8:	2064      	movs	r0, #100	; 0x64
 80012fa:	f004 f961 	bl	80055c0 <HAL_Delay>
				break;
 80012fe:	e000      	b.n	8001302 <processIOs+0x13a>
				break;
 8001300:	bf00      	nop
		rfalWorker();
 8001302:	e764      	b.n	80011ce <processIOs+0x6>
 8001304:	20000000 	.word	0x20000000
 8001308:	20000eb8 	.word	0x20000eb8
 800130c:	20000f40 	.word	0x20000f40
 8001310:	20000ef0 	.word	0x20000ef0
 8001314:	20000f7c 	.word	0x20000f7c
 8001318:	20000f8a 	.word	0x20000f8a
 800131c:	08017b50 	.word	0x08017b50
 8001320:	08017b5c 	.word	0x08017b5c

08001324 <checkISREvents>:
}

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
void checkISREvents(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
	bool posFound;

	if (isr_flags > 0){
 800132a:	4ba8      	ldr	r3, [pc, #672]	; (80015cc <checkISREvents+0x2a8>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 81d0 	beq.w	80016d4 <checkISREvents+0x3b0>
		if (isr_flags & INIT_FAT_FS) {
 8001334:	4ba5      	ldr	r3, [pc, #660]	; (80015cc <checkISREvents+0x2a8>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <checkISREvents+0x24>
			// An SD Card was inserted, Re-initialize FatFs and DataLogger
			dataLoggerInit(SDIO_POWER_GPIO_Port, SDIO_POWER_Pin);
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	48a3      	ldr	r0, [pc, #652]	; (80015d0 <checkISREvents+0x2ac>)
 8001344:	f000 fac0 	bl	80018c8 <dataLoggerInit>
		}

		if (isr_flags & DEINIT_FAT_FS) {
 8001348:	4ba0      	ldr	r3, [pc, #640]	; (80015cc <checkISREvents+0x2a8>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <checkISREvents+0x34>
			// An SD Card was removed, De-initialize FatFs and DataLogger
			dataLoggerDeInit();
 8001354:	f000 fb0a 	bl	800196c <dataLoggerDeInit>
		}

		if (isr_flags & BTN_1_SH_PRESS) {
 8001358:	4b9c      	ldr	r3, [pc, #624]	; (80015cc <checkISREvents+0x2a8>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d055      	beq.n	8001410 <checkISREvents+0xec>
			// Button 1 was short pressed.
			switch (processState) {
 8001364:	4b9b      	ldr	r3, [pc, #620]	; (80015d4 <checkISREvents+0x2b0>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d851      	bhi.n	8001410 <checkISREvents+0xec>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <checkISREvents+0x50>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001389 	.word	0x08001389
 8001378:	080013e1 	.word	0x080013e1
 800137c:	08001411 	.word	0x08001411
 8001380:	08001389 	.word	0x08001389
 8001384:	08001411 	.word	0x08001411
				case RFID_WAKEUP_MODE:
					// Fall-through
				case NORMAL_OPERATION:
					// Ensure the filter position actually has something in it
					posFound = false;
 8001388:	2300      	movs	r3, #0
 800138a:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800138c:	2300      	movs	r3, #0
 800138e:	71bb      	strb	r3, [r7, #6]
 8001390:	e010      	b.n	80013b4 <checkISREvents+0x90>

						if (fSection.filter[i].position == 1) {
 8001392:	79ba      	ldrb	r2, [r7, #6]
 8001394:	4990      	ldr	r1, [pc, #576]	; (80015d8 <checkISREvents+0x2b4>)
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	3313      	adds	r3, #19
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d101      	bne.n	80013ae <checkISREvents+0x8a>
							posFound = true;
 80013aa:	2301      	movs	r3, #1
 80013ac:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	3301      	adds	r3, #1
 80013b2:	71bb      	strb	r3, [r7, #6]
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d9eb      	bls.n	8001392 <checkISREvents+0x6e>
						}
					}

					if (posFound) {
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d026      	beq.n	800140e <checkISREvents+0xea>
						// Change filter position. Store button 1 as the first button.
						changeFilterPos1 = 1;			// Log Button 1 as the first Selected Filter
 80013c0:	4b86      	ldr	r3, [pc, #536]	; (80015dc <checkISREvents+0x2b8>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
						timeoutCtr = 0;
 80013c6:	4b86      	ldr	r3, [pc, #536]	; (80015e0 <checkISREvents+0x2bc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	801a      	strh	r2, [r3, #0]
						// Highlight the Filter Name
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 1);
 80013cc:	2301      	movs	r3, #1
 80013ce:	4a82      	ldr	r2, [pc, #520]	; (80015d8 <checkISREvents+0x2b4>)
 80013d0:	4984      	ldr	r1, [pc, #528]	; (80015e4 <checkISREvents+0x2c0>)
 80013d2:	4885      	ldr	r0, [pc, #532]	; (80015e8 <checkISREvents+0x2c4>)
 80013d4:	f001 fe7e 	bl	80030d4 <canvas_DrawFilters>
						processState = CHANGE_FILTER_POS;
 80013d8:	4b7e      	ldr	r3, [pc, #504]	; (80015d4 <checkISREvents+0x2b0>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
					}
					break;
 80013de:	e016      	b.n	800140e <checkISREvents+0xea>
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.

					// Check to see if the same button was pressed
					if (changeFilterPos1 != 1) {
 80013e0:	4b7e      	ldr	r3, [pc, #504]	; (80015dc <checkISREvents+0x2b8>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d005      	beq.n	80013f4 <checkISREvents+0xd0>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 1);
 80013e8:	4b7c      	ldr	r3, [pc, #496]	; (80015dc <checkISREvents+0x2b8>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2101      	movs	r1, #1
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f982 	bl	80016f8 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 80013f4:	4b79      	ldr	r3, [pc, #484]	; (80015dc <checkISREvents+0x2b8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80013fa:	2300      	movs	r3, #0
 80013fc:	4a76      	ldr	r2, [pc, #472]	; (80015d8 <checkISREvents+0x2b4>)
 80013fe:	4979      	ldr	r1, [pc, #484]	; (80015e4 <checkISREvents+0x2c0>)
 8001400:	4879      	ldr	r0, [pc, #484]	; (80015e8 <checkISREvents+0x2c4>)
 8001402:	f001 fe67 	bl	80030d4 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 8001406:	4b73      	ldr	r3, [pc, #460]	; (80015d4 <checkISREvents+0x2b0>)
 8001408:	2203      	movs	r2, #3
 800140a:	701a      	strb	r2, [r3, #0]
					break;
 800140c:	e000      	b.n	8001410 <checkISREvents+0xec>
					break;
 800140e:	bf00      	nop
				case TEST_MODE:
					break;
			}
		}

		if (isr_flags & BTN_1_LG_PRESS) {
 8001410:	4b6e      	ldr	r3, [pc, #440]	; (80015cc <checkISREvents+0x2a8>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d02c      	beq.n	8001476 <checkISREvents+0x152>
			// Button 1 was long pressed. Update state to Update Filter Name
			switch (processState) {
 800141c:	4b6d      	ldr	r3, [pc, #436]	; (80015d4 <checkISREvents+0x2b0>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b04      	cmp	r3, #4
 8001422:	d828      	bhi.n	8001476 <checkISREvents+0x152>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <checkISREvents+0x108>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	08001441 	.word	0x08001441
 8001430:	08001449 	.word	0x08001449
 8001434:	08001477 	.word	0x08001477
 8001438:	08001441 	.word	0x08001441
 800143c:	08001477 	.word	0x08001477
				case RFID_WAKEUP_MODE:
					// Fall-through
				case NORMAL_OPERATION:
					// Re-assign Filter Name
					processState = UPDATE_FILTER_NAME;
 8001440:	4b64      	ldr	r3, [pc, #400]	; (80015d4 <checkISREvents+0x2b0>)
 8001442:	2202      	movs	r2, #2
 8001444:	701a      	strb	r2, [r3, #0]
					break;
 8001446:	e016      	b.n	8001476 <checkISREvents+0x152>

				case CHANGE_FILTER_POS:
					// Even though a long press was executed, we still want the same function as a short press
					// Check to see if the same button was pressed
					if (changeFilterPos1 != 1) {
 8001448:	4b64      	ldr	r3, [pc, #400]	; (80015dc <checkISREvents+0x2b8>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d005      	beq.n	800145c <checkISREvents+0x138>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 1);
 8001450:	4b62      	ldr	r3, [pc, #392]	; (80015dc <checkISREvents+0x2b8>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2101      	movs	r1, #1
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f94e 	bl	80016f8 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 800145c:	4b5f      	ldr	r3, [pc, #380]	; (80015dc <checkISREvents+0x2b8>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 8001462:	2300      	movs	r3, #0
 8001464:	4a5c      	ldr	r2, [pc, #368]	; (80015d8 <checkISREvents+0x2b4>)
 8001466:	495f      	ldr	r1, [pc, #380]	; (80015e4 <checkISREvents+0x2c0>)
 8001468:	485f      	ldr	r0, [pc, #380]	; (80015e8 <checkISREvents+0x2c4>)
 800146a:	f001 fe33 	bl	80030d4 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 800146e:	4b59      	ldr	r3, [pc, #356]	; (80015d4 <checkISREvents+0x2b0>)
 8001470:	2203      	movs	r2, #3
 8001472:	701a      	strb	r2, [r3, #0]
					break;
 8001474:	bf00      	nop
				case TEST_MODE:
					break;
			}
		}

		if (isr_flags & BTN_2_SH_PRESS) {
 8001476:	4b55      	ldr	r3, [pc, #340]	; (80015cc <checkISREvents+0x2a8>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	d054      	beq.n	800152c <checkISREvents+0x208>
			// Button 2 was short pressed. Update state to Change Filter Position
			switch (processState) {
 8001482:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <checkISREvents+0x2b0>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b04      	cmp	r3, #4
 8001488:	d850      	bhi.n	800152c <checkISREvents+0x208>
 800148a:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <checkISREvents+0x16c>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	080014a5 	.word	0x080014a5
 8001494:	080014fd 	.word	0x080014fd
 8001498:	0800152d 	.word	0x0800152d
 800149c:	080014a5 	.word	0x080014a5
 80014a0:	0800152d 	.word	0x0800152d
				case RFID_WAKEUP_MODE:
					// Fall-through
				case NORMAL_OPERATION:
					// Ensure the filter position actually has something in it
					posFound = false;
 80014a4:	2300      	movs	r3, #0
 80014a6:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	717b      	strb	r3, [r7, #5]
 80014ac:	e010      	b.n	80014d0 <checkISREvents+0x1ac>

						if (fSection.filter[i].position == 2) {
 80014ae:	797a      	ldrb	r2, [r7, #5]
 80014b0:	4949      	ldr	r1, [pc, #292]	; (80015d8 <checkISREvents+0x2b4>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	440b      	add	r3, r1
 80014be:	3313      	adds	r3, #19
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d101      	bne.n	80014ca <checkISREvents+0x1a6>
							posFound = true;
 80014c6:	2301      	movs	r3, #1
 80014c8:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80014ca:	797b      	ldrb	r3, [r7, #5]
 80014cc:	3301      	adds	r3, #1
 80014ce:	717b      	strb	r3, [r7, #5]
 80014d0:	797b      	ldrb	r3, [r7, #5]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d9eb      	bls.n	80014ae <checkISREvents+0x18a>
						}
					}

					if (posFound) {
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d026      	beq.n	800152a <checkISREvents+0x206>
						// Change filter position. Store button 1 as the first button.
						changeFilterPos1 = 2;			// Log Button 2 as the first Selected Filter
 80014dc:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <checkISREvents+0x2b8>)
 80014de:	2202      	movs	r2, #2
 80014e0:	701a      	strb	r2, [r3, #0]
						timeoutCtr = 0;
 80014e2:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <checkISREvents+0x2bc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	801a      	strh	r2, [r3, #0]
						// Highlight the Filter Name
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 2);
 80014e8:	2302      	movs	r3, #2
 80014ea:	4a3b      	ldr	r2, [pc, #236]	; (80015d8 <checkISREvents+0x2b4>)
 80014ec:	493d      	ldr	r1, [pc, #244]	; (80015e4 <checkISREvents+0x2c0>)
 80014ee:	483e      	ldr	r0, [pc, #248]	; (80015e8 <checkISREvents+0x2c4>)
 80014f0:	f001 fdf0 	bl	80030d4 <canvas_DrawFilters>
						processState = CHANGE_FILTER_POS;
 80014f4:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <checkISREvents+0x2b0>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
					}
					break;
 80014fa:	e016      	b.n	800152a <checkISREvents+0x206>
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.

					// Check to see if the same button was pressed
					if (changeFilterPos1 != 2) {
 80014fc:	4b37      	ldr	r3, [pc, #220]	; (80015dc <checkISREvents+0x2b8>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d005      	beq.n	8001510 <checkISREvents+0x1ec>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 2);
 8001504:	4b35      	ldr	r3, [pc, #212]	; (80015dc <checkISREvents+0x2b8>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2102      	movs	r1, #2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f8f4 	bl	80016f8 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 8001510:	4b32      	ldr	r3, [pc, #200]	; (80015dc <checkISREvents+0x2b8>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 8001516:	2300      	movs	r3, #0
 8001518:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <checkISREvents+0x2b4>)
 800151a:	4932      	ldr	r1, [pc, #200]	; (80015e4 <checkISREvents+0x2c0>)
 800151c:	4832      	ldr	r0, [pc, #200]	; (80015e8 <checkISREvents+0x2c4>)
 800151e:	f001 fdd9 	bl	80030d4 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <checkISREvents+0x2b0>)
 8001524:	2203      	movs	r2, #3
 8001526:	701a      	strb	r2, [r3, #0]
					break;
 8001528:	e000      	b.n	800152c <checkISREvents+0x208>
					break;
 800152a:	bf00      	nop
				case TEST_MODE:
					break;
			}
		}

		if (isr_flags & BTN_2_LG_PRESS) {
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <checkISREvents+0x2a8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d02c      	beq.n	8001592 <checkISREvents+0x26e>
			// Button 2 was long pressed. Update state to Update Filter Name
			switch (processState) {
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <checkISREvents+0x2b0>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b04      	cmp	r3, #4
 800153e:	d828      	bhi.n	8001592 <checkISREvents+0x26e>
 8001540:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <checkISREvents+0x224>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	0800155d 	.word	0x0800155d
 800154c:	08001565 	.word	0x08001565
 8001550:	08001593 	.word	0x08001593
 8001554:	0800155d 	.word	0x0800155d
 8001558:	08001593 	.word	0x08001593
				case RFID_WAKEUP_MODE:
					// Fall-through
				case NORMAL_OPERATION:
					// Re-assign Filter Name
					processState = UPDATE_FILTER_NAME;
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <checkISREvents+0x2b0>)
 800155e:	2202      	movs	r2, #2
 8001560:	701a      	strb	r2, [r3, #0]
					break;
 8001562:	e016      	b.n	8001592 <checkISREvents+0x26e>

				case CHANGE_FILTER_POS:
					// Even though a long press was executed, we still want the same function as a short press
					// Check to see if the same button was pressed
					if (changeFilterPos1 != 2) {
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <checkISREvents+0x2b8>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d005      	beq.n	8001578 <checkISREvents+0x254>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 2);
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <checkISREvents+0x2b8>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2102      	movs	r1, #2
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f8c0 	bl	80016f8 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <checkISREvents+0x2b8>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 800157e:	2300      	movs	r3, #0
 8001580:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <checkISREvents+0x2b4>)
 8001582:	4918      	ldr	r1, [pc, #96]	; (80015e4 <checkISREvents+0x2c0>)
 8001584:	4818      	ldr	r0, [pc, #96]	; (80015e8 <checkISREvents+0x2c4>)
 8001586:	f001 fda5 	bl	80030d4 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <checkISREvents+0x2b0>)
 800158c:	2203      	movs	r2, #3
 800158e:	701a      	strb	r2, [r3, #0]
					break;
 8001590:	bf00      	nop
				case TEST_MODE:
					break;
			}
		}

		if (isr_flags & BTN_3_SH_PRESS) {
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <checkISREvents+0x2a8>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159a:	2b00      	cmp	r3, #0
 800159c:	d065      	beq.n	800166a <checkISREvents+0x346>
			// Button 3 was short pressed. Update state to Change Filter Position
			switch (processState) {
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <checkISREvents+0x2b0>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d861      	bhi.n	800166a <checkISREvents+0x346>
 80015a6:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <checkISREvents+0x288>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	080015c1 	.word	0x080015c1
 80015b0:	0800163b 	.word	0x0800163b
 80015b4:	0800166b 	.word	0x0800166b
 80015b8:	080015c1 	.word	0x080015c1
 80015bc:	0800166b 	.word	0x0800166b
				case RFID_WAKEUP_MODE:
					// Fall-through
				case NORMAL_OPERATION:
					// Ensure the filter position actually has something in it
					posFound = false;
 80015c0:	2300      	movs	r3, #0
 80015c2:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	713b      	strb	r3, [r7, #4]
 80015c8:	e021      	b.n	800160e <checkISREvents+0x2ea>
 80015ca:	bf00      	nop
 80015cc:	20000eb4 	.word	0x20000eb4
 80015d0:	40020800 	.word	0x40020800
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000f40 	.word	0x20000f40
 80015dc:	20000f88 	.word	0x20000f88
 80015e0:	20000f8a 	.word	0x20000f8a
 80015e4:	20000ef0 	.word	0x20000ef0
 80015e8:	20000f7c 	.word	0x20000f7c

						if (fSection.filter[i].position == 3) {
 80015ec:	793a      	ldrb	r2, [r7, #4]
 80015ee:	493b      	ldr	r1, [pc, #236]	; (80016dc <checkISREvents+0x3b8>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4413      	add	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	3313      	adds	r3, #19
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b03      	cmp	r3, #3
 8001602:	d101      	bne.n	8001608 <checkISREvents+0x2e4>
							posFound = true;
 8001604:	2301      	movs	r3, #1
 8001606:	71fb      	strb	r3, [r7, #7]
					for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001608:	793b      	ldrb	r3, [r7, #4]
 800160a:	3301      	adds	r3, #1
 800160c:	713b      	strb	r3, [r7, #4]
 800160e:	793b      	ldrb	r3, [r7, #4]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d9eb      	bls.n	80015ec <checkISREvents+0x2c8>
						}
					}

					if (posFound) {
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d026      	beq.n	8001668 <checkISREvents+0x344>
						// Change filter position. Store button 1 as the first button.
						changeFilterPos1 = 3;			// Log Button 3 as the first Selected Filter
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <checkISREvents+0x3bc>)
 800161c:	2203      	movs	r2, #3
 800161e:	701a      	strb	r2, [r3, #0]
						timeoutCtr = 0;
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <checkISREvents+0x3c0>)
 8001622:	2200      	movs	r2, #0
 8001624:	801a      	strh	r2, [r3, #0]
						// Highlight the Filter Name
						canvas_DrawFilters(&canvas1, &epd1, &fSection, 3);
 8001626:	2303      	movs	r3, #3
 8001628:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <checkISREvents+0x3b8>)
 800162a:	492f      	ldr	r1, [pc, #188]	; (80016e8 <checkISREvents+0x3c4>)
 800162c:	482f      	ldr	r0, [pc, #188]	; (80016ec <checkISREvents+0x3c8>)
 800162e:	f001 fd51 	bl	80030d4 <canvas_DrawFilters>
						processState = CHANGE_FILTER_POS;
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <checkISREvents+0x3cc>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001638:	e016      	b.n	8001668 <checkISREvents+0x344>
					// Update the Filter Order and redraw the screen
					// We need to know the first button that was pushed
					// If the button is the same, do nothing.

					// Check to see if the same button was pressed
					if (changeFilterPos1 != 3) {
 800163a:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <checkISREvents+0x3bc>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d005      	beq.n	800164e <checkISREvents+0x32a>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 3);
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <checkISREvents+0x3bc>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2103      	movs	r1, #3
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f855 	bl	80016f8 <changeFilterPosition>
					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <checkISREvents+0x3bc>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 8001654:	2300      	movs	r3, #0
 8001656:	4a21      	ldr	r2, [pc, #132]	; (80016dc <checkISREvents+0x3b8>)
 8001658:	4923      	ldr	r1, [pc, #140]	; (80016e8 <checkISREvents+0x3c4>)
 800165a:	4824      	ldr	r0, [pc, #144]	; (80016ec <checkISREvents+0x3c8>)
 800165c:	f001 fd3a 	bl	80030d4 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 8001660:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <checkISREvents+0x3cc>)
 8001662:	2203      	movs	r2, #3
 8001664:	701a      	strb	r2, [r3, #0]
					break;
 8001666:	e000      	b.n	800166a <checkISREvents+0x346>
					break;
 8001668:	bf00      	nop
				case TEST_MODE:
					break;
			}
		}

		if (isr_flags & BTN_3_LG_PRESS) {
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <checkISREvents+0x3d0>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b25b      	sxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	da2c      	bge.n	80016ce <checkISREvents+0x3aa>
			// Button 3 was long pressed. Update state to Update Filter Name
			switch (processState) {
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <checkISREvents+0x3cc>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b04      	cmp	r3, #4
 800167a:	d828      	bhi.n	80016ce <checkISREvents+0x3aa>
 800167c:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <checkISREvents+0x360>)
 800167e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001682:	bf00      	nop
 8001684:	08001699 	.word	0x08001699
 8001688:	080016a1 	.word	0x080016a1
 800168c:	080016cf 	.word	0x080016cf
 8001690:	08001699 	.word	0x08001699
 8001694:	080016cf 	.word	0x080016cf
				case RFID_WAKEUP_MODE:
					// Fall-through
				case NORMAL_OPERATION:
					// Re-assign Filter Name
					processState = UPDATE_FILTER_NAME;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <checkISREvents+0x3cc>)
 800169a:	2202      	movs	r2, #2
 800169c:	701a      	strb	r2, [r3, #0]
					break;
 800169e:	e016      	b.n	80016ce <checkISREvents+0x3aa>

				case CHANGE_FILTER_POS:
					// Even though a long press was executed, we still want the same function as a short press
					// Check to see if the same button was pressed
					if (changeFilterPos1 != 3) {
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <checkISREvents+0x3bc>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d005      	beq.n	80016b4 <checkISREvents+0x390>
						// A different button was pressed first. Switch the order and continue.
						// EG. Slot 1 button Pressed, then Slot 2
						// Assign position 1 to 2 and 2 to 1
						changeFilterPosition(changeFilterPos1, 3);
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <checkISREvents+0x3bc>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2103      	movs	r1, #3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f822 	bl	80016f8 <changeFilterPosition>

					}
					changeFilterPos1 = 0;				// Reset Change Filter Position
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <checkISREvents+0x3bc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
					canvas_DrawFilters(&canvas1, &epd1, &fSection, 0);
 80016ba:	2300      	movs	r3, #0
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <checkISREvents+0x3b8>)
 80016be:	490a      	ldr	r1, [pc, #40]	; (80016e8 <checkISREvents+0x3c4>)
 80016c0:	480a      	ldr	r0, [pc, #40]	; (80016ec <checkISREvents+0x3c8>)
 80016c2:	f001 fd07 	bl	80030d4 <canvas_DrawFilters>
					processState = RFID_WAKEUP_MODE;
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <checkISREvents+0x3cc>)
 80016c8:	2203      	movs	r2, #3
 80016ca:	701a      	strb	r2, [r3, #0]
					break;
 80016cc:	bf00      	nop
				case TEST_MODE:
					break;
			}
		}

		isr_flags = 0;	// Reset the flag after handling
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <checkISREvents+0x3d0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
	}
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000f40 	.word	0x20000f40
 80016e0:	20000f88 	.word	0x20000f88
 80016e4:	20000f8a 	.word	0x20000f8a
 80016e8:	20000ef0 	.word	0x20000ef0
 80016ec:	20000f7c 	.word	0x20000f7c
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000eb4 	.word	0x20000eb4

080016f8 <changeFilterPosition>:

void changeFilterPosition(uint8_t firstBtn, uint8_t secondBtn) {
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	460a      	mov	r2, r1
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	4613      	mov	r3, r2
 8001706:	71bb      	strb	r3, [r7, #6]
	int8_t slotIndex[FILTER_SECTION_SIZE] = {-1, -1, -1};
 8001708:	4a5c      	ldr	r2, [pc, #368]	; (800187c <changeFilterPosition+0x184>)
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	4611      	mov	r1, r2
 8001712:	8019      	strh	r1, [r3, #0]
 8001714:	3302      	adds	r3, #2
 8001716:	0c12      	lsrs	r2, r2, #16
 8001718:	701a      	strb	r2, [r3, #0]

	// The filter position switch is done with 2 steps.
	// Step 1. Loop through the filter positions, and transfer the positions into the proper slotIndex
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e022      	b.n	8001766 <changeFilterPosition+0x6e>
		for (uint8_t j = 0; j < FILTER_SECTION_SIZE; j++) {
 8001720:	2300      	movs	r3, #0
 8001722:	73bb      	strb	r3, [r7, #14]
 8001724:	e019      	b.n	800175a <changeFilterPosition+0x62>
			// Look for the filter in the associated slot index
			if (fSection.filter[j].position == i + 1) {
 8001726:	7bba      	ldrb	r2, [r7, #14]
 8001728:	4955      	ldr	r1, [pc, #340]	; (8001880 <changeFilterPosition+0x188>)
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4413      	add	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	440b      	add	r3, r1
 8001736:	3313      	adds	r3, #19
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	3301      	adds	r3, #1
 8001740:	429a      	cmp	r2, r3
 8001742:	d107      	bne.n	8001754 <changeFilterPosition+0x5c>
				slotIndex[i] = j;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800174a:	f107 0110 	add.w	r1, r7, #16
 800174e:	440b      	add	r3, r1
 8001750:	f803 2c08 	strb.w	r2, [r3, #-8]
		for (uint8_t j = 0; j < FILTER_SECTION_SIZE; j++) {
 8001754:	7bbb      	ldrb	r3, [r7, #14]
 8001756:	3301      	adds	r3, #1
 8001758:	73bb      	strb	r3, [r7, #14]
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d9e2      	bls.n	8001726 <changeFilterPosition+0x2e>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	3301      	adds	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d9d9      	bls.n	8001720 <changeFilterPosition+0x28>
		}
	}

	// Step 2. If there are any open spots, they will be represented as -1 within slotIndex.
	// We need to overwrite any -1's with usable filter indexes. That is what this loop is doing.
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 800176c:	2300      	movs	r3, #0
 800176e:	737b      	strb	r3, [r7, #13]
 8001770:	e030      	b.n	80017d4 <changeFilterPosition+0xdc>
		// Look for the filter in the associated slot index
		if (fSection.filter[i].position == 0) {
 8001772:	7b7a      	ldrb	r2, [r7, #13]
 8001774:	4942      	ldr	r1, [pc, #264]	; (8001880 <changeFilterPosition+0x188>)
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	440b      	add	r3, r1
 8001782:	3313      	adds	r3, #19
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d121      	bne.n	80017ce <changeFilterPosition+0xd6>
			// Find the first empty position
			uint8_t j = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	733b      	strb	r3, [r7, #12]
			while ((slotIndex[j] >= 0) & (j < FILTER_SECTION_SIZE)){
 800178e:	e002      	b.n	8001796 <changeFilterPosition+0x9e>
				j++;
 8001790:	7b3b      	ldrb	r3, [r7, #12]
 8001792:	3301      	adds	r3, #1
 8001794:	733b      	strb	r3, [r7, #12]
			while ((slotIndex[j] >= 0) & (j < FILTER_SECTION_SIZE)){
 8001796:	7b3b      	ldrb	r3, [r7, #12]
 8001798:	f107 0210 	add.w	r2, r7, #16
 800179c:	4413      	add	r3, r2
 800179e:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	09db      	lsrs	r3, r3, #7
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	7b3b      	ldrb	r3, [r7, #12]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	bf94      	ite	ls
 80017b0:	2301      	movls	r3, #1
 80017b2:	2300      	movhi	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4013      	ands	r3, r2
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1e8      	bne.n	8001790 <changeFilterPosition+0x98>
			}
			slotIndex[j] = i;
 80017be:	7b3b      	ldrb	r3, [r7, #12]
 80017c0:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80017c4:	f107 0110 	add.w	r1, r7, #16
 80017c8:	440b      	add	r3, r1
 80017ca:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	3301      	adds	r3, #1
 80017d2:	737b      	strb	r3, [r7, #13]
 80017d4:	7b7b      	ldrb	r3, [r7, #13]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d9cb      	bls.n	8001772 <changeFilterPosition+0x7a>
	// FYI. slotIndex is the place holder for the fSection.filter index. EG -> It is to be used within fSection.filter[slotIndex]

	// Now, we have a slotIndex that is referencing the proper filter order and we just need to reposition the filters now:
	// 1st button pressed goes to 2nd button slot
	// Check to see if there is a tag in the position
	if (fSection.filter[slotIndex[firstBtn - 1]].position > 0) {
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	3b01      	subs	r3, #1
 80017de:	f107 0210 	add.w	r2, r7, #16
 80017e2:	4413      	add	r3, r2
 80017e4:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4925      	ldr	r1, [pc, #148]	; (8001880 <changeFilterPosition+0x188>)
 80017ec:	4613      	mov	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4413      	add	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	3313      	adds	r3, #19
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d011      	beq.n	8001824 <changeFilterPosition+0x12c>
		fSection.filter[slotIndex[firstBtn - 1]].position = secondBtn;
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	3b01      	subs	r3, #1
 8001804:	f107 0210 	add.w	r2, r7, #16
 8001808:	4413      	add	r3, r2
 800180a:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 800180e:	461a      	mov	r2, r3
 8001810:	491b      	ldr	r1, [pc, #108]	; (8001880 <changeFilterPosition+0x188>)
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	440b      	add	r3, r1
 800181e:	3313      	adds	r3, #19
 8001820:	79ba      	ldrb	r2, [r7, #6]
 8001822:	701a      	strb	r2, [r3, #0]
	}

	// 2nd button pressed goes to 1st button slot
	if (fSection.filter[slotIndex[secondBtn - 1]].position > 0) {
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	3b01      	subs	r3, #1
 8001828:	f107 0210 	add.w	r2, r7, #16
 800182c:	4413      	add	r3, r2
 800182e:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 8001832:	461a      	mov	r2, r3
 8001834:	4912      	ldr	r1, [pc, #72]	; (8001880 <changeFilterPosition+0x188>)
 8001836:	4613      	mov	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4413      	add	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	440b      	add	r3, r1
 8001842:	3313      	adds	r3, #19
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d011      	beq.n	800186e <changeFilterPosition+0x176>
		fSection.filter[slotIndex[secondBtn - 1]].position = firstBtn;
 800184a:	79bb      	ldrb	r3, [r7, #6]
 800184c:	3b01      	subs	r3, #1
 800184e:	f107 0210 	add.w	r2, r7, #16
 8001852:	4413      	add	r3, r2
 8001854:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 8001858:	461a      	mov	r2, r3
 800185a:	4909      	ldr	r1, [pc, #36]	; (8001880 <changeFilterPosition+0x188>)
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	440b      	add	r3, r1
 8001868:	3313      	adds	r3, #19
 800186a:	79fa      	ldrb	r2, [r7, #7]
 800186c:	701a      	strb	r2, [r3, #0]
	}
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	08017b78 	.word	0x08017b78
 8001880:	20000f40 	.word	0x20000f40

08001884 <isLogDirValid>:
static uint16_t sdPowerPin;

/******************************************************************************
 * PRIVATE FUNCTIONS
 *******************************************************************************/
bool isLogDirValid(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b08e      	sub	sp, #56	; 0x38
 8001888:	af00      	add	r7, sp, #0
	bool retVal = false;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DIR logDir;

	// Try to open the directory
	FRESULT res = f_opendir(&logDir, DL_LOG_DIR_PATH);
 8001890:	463b      	mov	r3, r7
 8001892:	490c      	ldr	r1, [pc, #48]	; (80018c4 <isLogDirValid+0x40>)
 8001894:	4618      	mov	r0, r3
 8001896:	f013 ffd6 	bl	8015846 <f_opendir>
 800189a:	4603      	mov	r3, r0
 800189c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (FR_OK == res)
 80018a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d106      	bne.n	80018b6 <isLogDirValid+0x32>
	{
		// The directory exists, close it back up
		f_closedir(&logDir);
 80018a8:	463b      	mov	r3, r7
 80018aa:	4618      	mov	r0, r3
 80018ac:	f014 f83e 	bl	801592c <f_closedir>
		retVal = true;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	return retVal;
 80018b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3738      	adds	r7, #56	; 0x38
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	08017b7c 	.word	0x08017b7c

080018c8 <dataLoggerInit>:

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/

DL_error dataLoggerInit(GPIO_TypeDef* sd_Port, uint16_t sd_Pin) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
	DL_error retVal = DATALOG_ERR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]

	// Check RTC. Initialize if needed.
	if (!rtcModuleIsInit()) {
 80018d8:	f002 ff6a 	bl	80047b0 <rtcModuleIsInit>
 80018dc:	4603      	mov	r3, r0
 80018de:	f083 0301 	eor.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <dataLoggerInit+0x26>
		rtcModuleInit(&hrtc);
 80018e8:	481b      	ldr	r0, [pc, #108]	; (8001958 <dataLoggerInit+0x90>)
 80018ea:	f002 ff4d 	bl	8004788 <rtcModuleInit>
	}

	//Bind GPIO Port and Pin
	if (sdPowerPort == NULL) {
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <dataLoggerInit+0x94>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d105      	bne.n	8001902 <dataLoggerInit+0x3a>
		sdPowerPort = sd_Port;
 80018f6:	4a19      	ldr	r2, [pc, #100]	; (800195c <dataLoggerInit+0x94>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6013      	str	r3, [r2, #0]
		sdPowerPin = sd_Pin;
 80018fc:	4a18      	ldr	r2, [pc, #96]	; (8001960 <dataLoggerInit+0x98>)
 80018fe:	887b      	ldrh	r3, [r7, #2]
 8001900:	8013      	strh	r3, [r2, #0]
	}

	if (startSDCard() != DATALOG_OK) {
 8001902:	f000 f83f 	bl	8001984 <startSDCard>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <dataLoggerInit+0x48>
		return DATALOG_ERR;
 800190c:	2301      	movs	r3, #1
 800190e:	e01f      	b.n	8001950 <dataLoggerInit+0x88>
	}

	// Verify that FatFs is initialized
	if (FatFsIsModuleInit()) {
 8001910:	f00b f8f2 	bl	800caf8 <FatFsIsModuleInit>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d014      	beq.n	8001944 <dataLoggerInit+0x7c>
		if (!isLogDirValid()) {
 800191a:	f7ff ffb3 	bl	8001884 <isLogDirValid>
 800191e:	4603      	mov	r3, r0
 8001920:	f083 0301 	eor.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00e      	beq.n	8001948 <dataLoggerInit+0x80>
			// Create the new directory and file
			FRESULT fr;
			fr = f_mkdir(DL_LOG_DIR_PATH);
 800192a:	480e      	ldr	r0, [pc, #56]	; (8001964 <dataLoggerInit+0x9c>)
 800192c:	f014 f824 	bl	8015978 <f_mkdir>
 8001930:	4603      	mov	r3, r0
 8001932:	73bb      	strb	r3, [r7, #14]
			if (fr == FR_OK) {
 8001934:	7bbb      	ldrb	r3, [r7, #14]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <dataLoggerInit+0x78>
				// The directory was created successfully
				retVal = DATALOG_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	e003      	b.n	8001948 <dataLoggerInit+0x80>
			} else {
				// FatFs Error
				return retVal;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	e005      	b.n	8001950 <dataLoggerInit+0x88>
			}
		}
	} else {
		// FatFs Not Initialized
		return retVal;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	e003      	b.n	8001950 <dataLoggerInit+0x88>
	}

	dlModInit = true;
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <dataLoggerInit+0xa0>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
	return retVal;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20001044 	.word	0x20001044
 800195c:	2000025c 	.word	0x2000025c
 8001960:	20000260 	.word	0x20000260
 8001964:	08017b7c 	.word	0x08017b7c
 8001968:	20000258 	.word	0x20000258

0800196c <dataLoggerDeInit>:

DL_error dataLoggerDeInit(void) {
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	dlModInit = false;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <dataLoggerDeInit+0x14>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
	return stopSDCard();
 8001976:	f000 f837 	bl	80019e8 <stopSDCard>
 800197a:	4603      	mov	r3, r0
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000258 	.word	0x20000258

08001984 <startSDCard>:

DL_error startSDCard(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
	// See if a card is installed
	if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_SET){
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	4813      	ldr	r0, [pc, #76]	; (80019dc <startSDCard+0x58>)
 800198e:	f004 f8ef 	bl	8005b70 <HAL_GPIO_ReadPin>
 8001992:	4603      	mov	r3, r0
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <startSDCard+0x18>
		// No card is installed.
		return DATALOG_ERR;
 8001998:	2301      	movs	r3, #1
 800199a:	e01a      	b.n	80019d2 <startSDCard+0x4e>
	}

	HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_SET);
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <startSDCard+0x5c>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <startSDCard+0x60>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4619      	mov	r1, r3
 80019a8:	f004 f8fa 	bl	8005ba0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80019ac:	2005      	movs	r0, #5
 80019ae:	f003 fe07 	bl	80055c0 <HAL_Delay>
	DL_error ret = FatFsInit();
 80019b2:	f00b f85b 	bl	800ca6c <FatFsInit>
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]

	// If there is a problem with the FatFs, turn off the power.
	if (ret != DATALOG_OK) {
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <startSDCard+0x4c>
		HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_RESET);
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <startSDCard+0x5c>)
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <startSDCard+0x60>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	4619      	mov	r1, r3
 80019cc:	f004 f8e8 	bl	8005ba0 <HAL_GPIO_WritePin>
	}
	return ret;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40020800 	.word	0x40020800
 80019e0:	2000025c 	.word	0x2000025c
 80019e4:	20000260 	.word	0x20000260

080019e8 <stopSDCard>:

DL_error stopSDCard(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
	// Unlink the FatFs and turn off the SD Card
	DL_error ret = FatFsDeInit();
 80019ee:	f00b f873 	bl	800cad8 <FatFsDeInit>
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(sdPowerPort, sdPowerPin, GPIO_PIN_RESET);
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <stopSDCard+0x28>)
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <stopSDCard+0x2c>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	2200      	movs	r2, #0
 8001a00:	4619      	mov	r1, r3
 8001a02:	f004 f8cd 	bl	8005ba0 <HAL_GPIO_WritePin>
	return ret;
 8001a06:	79fb      	ldrb	r3, [r7, #7]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000025c 	.word	0x2000025c
 8001a14:	20000260 	.word	0x20000260

08001a18 <logDataToSD>:
/*	This function get's called from the FilterMachine whenever there's
 * a filter change. It first fills out a Log Record, then sends it to
 * this function to be copied to the SD Card.
 * */

DL_error logDataToSD(sdLog_record_t *sdLog) {
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	b0ba      	sub	sp, #232	; 0xe8
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	6078      	str	r0, [r7, #4]

	// Ensure the modules are initialized
	if (dlModInit) {
 8001a20:	4b6c      	ldr	r3, [pc, #432]	; (8001bd4 <logDataToSD+0x1bc>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80d0 	beq.w	8001bca <logDataToSD+0x1b2>

		// Verify that the directory has been initialized
		if (!isLogDirValid()) {
 8001a2a:	f7ff ff2b 	bl	8001884 <isLogDirValid>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f083 0301 	eor.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <logDataToSD+0x26>
			return DATALOG_ERR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0c6      	b.n	8001bcc <logDataToSD+0x1b4>
		}

		// The log directory is valid. Start organizing the data.
		// Convert all non-string fields
		char dateStamp_s[11] = {0};
 8001a3e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	f8c3 2007 	str.w	r2, [r3, #7]
		char logFileName_s[35] = {0};
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	2223      	movs	r2, #35	; 0x23
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f015 fc5f 	bl	8017318 <memset>
		char timeStamp_s[11] = {0};
 8001a5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	f8c3 2007 	str.w	r2, [r3, #7]

		// Compile the Date
		sprintf(dateStamp_s, "%02d-%02d-%d",
				sdLog->dateTimeStamp.month,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7bdb      	ldrb	r3, [r3, #15]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 8001a6c:	461a      	mov	r2, r3
				sdLog->dateTimeStamp.day,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7b9b      	ldrb	r3, [r3, #14]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 8001a72:	4619      	mov	r1, r3
				sdLog->dateTimeStamp.year);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	8a1b      	ldrh	r3, [r3, #16]
		sprintf(dateStamp_s, "%02d-%02d-%d",
 8001a78:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4955      	ldr	r1, [pc, #340]	; (8001bd8 <logDataToSD+0x1c0>)
 8001a82:	f015 fd09 	bl	8017498 <siprintf>

		// File Name Format: FilterLog_Date_Matte Box ID
		// Example: FilterLog_01-01-2020_LBSA0100P
		sprintf(logFileName_s, "FilterLog_%s_%s.csv",
				dateStamp_s,
				sdLog->matteBoxID);
 8001a86:	687b      	ldr	r3, [r7, #4]
		sprintf(logFileName_s, "FilterLog_%s_%s.csv",
 8001a88:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001a8c:	f107 0008 	add.w	r0, r7, #8
 8001a90:	4952      	ldr	r1, [pc, #328]	; (8001bdc <logDataToSD+0x1c4>)
 8001a92:	f015 fd01 	bl	8017498 <siprintf>

		// Compile the time
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
				sdLog->dateTimeStamp.hours,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7a9b      	ldrb	r3, [r3, #10]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 8001a9a:	461a      	mov	r2, r3
				sdLog->dateTimeStamp.minutes,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7adb      	ldrb	r3, [r3, #11]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 8001aa0:	4619      	mov	r1, r3
				sdLog->dateTimeStamp.seconds);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(timeStamp_s, "%02d:%02d:%02d,",
 8001aa6:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	460b      	mov	r3, r1
 8001aae:	494c      	ldr	r1, [pc, #304]	; (8001be0 <logDataToSD+0x1c8>)
 8001ab0:	f015 fcf2 	bl	8017498 <siprintf>

		// Prepare to write the file
		FRESULT fr;
		FIL* logFil = malloc(sizeof(FIL));
 8001ab4:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001ab8:	f015 fc04 	bl	80172c4 <malloc>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

		// Change to the directory
		fr = f_chdir(DL_LOG_DIR_PATH);
 8001ac2:	4848      	ldr	r0, [pc, #288]	; (8001be4 <logDataToSD+0x1cc>)
 8001ac4:	f013 fe75 	bl	80157b2 <f_chdir>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		// If the file exists, open it. Otherwise, create the log file.
		fr = f_open(logFil, (const TCHAR*) logFileName_s, FA_OPEN_APPEND | FA_WRITE);
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	2232      	movs	r2, #50	; 0x32
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001ada:	f013 fa8f 	bl	8014ffc <f_open>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

		if (fr != FR_OK) {
 8001ae4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <logDataToSD+0xd8>
			// Can't open the file
			return DATALOG_ERR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e06d      	b.n	8001bcc <logDataToSD+0x1b4>
		}

		// The file is open and ready. Write the fields to the file.
		// Check to see if the file is empty
		if (logFil->fptr == 0){
 8001af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d12b      	bne.n	8001b52 <logDataToSD+0x13a>
			// Brand New File. Make the Headers
			char headers[100] = {0};
 8001afa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001afe:	2264      	movs	r2, #100	; 0x64
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f015 fc08 	bl	8017318 <memset>

			sprintf(headers, "Light Widow Matte Box\nMatte Box ID:,%s\nDate:,%s\nNotes:\n\n",
					sdLog->matteBoxID,
 8001b08:	687a      	ldr	r2, [r7, #4]
			sprintf(headers, "Light Widow Matte Box\nMatte Box ID:,%s\nDate:,%s\nNotes:\n\n",
 8001b0a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b0e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001b12:	4935      	ldr	r1, [pc, #212]	; (8001be8 <logDataToSD+0x1d0>)
 8001b14:	f015 fcc0 	bl	8017498 <siprintf>
					dateStamp_s);
			const char tmpStr[50] = "Time,Filter Slot 1,Filter Slot 2,Filter Slot 3\n";
 8001b18:	4b34      	ldr	r3, [pc, #208]	; (8001bec <logDataToSD+0x1d4>)
 8001b1a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001b1e:	461d      	mov	r5, r3
 8001b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			f_puts(headers, (FIL*) logFil);
 8001b36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b3a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f014 fcd2 	bl	80164e8 <f_puts>
			f_puts(tmpStr, (FIL*) logFil);
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f014 fccb 	bl	80164e8 <f_puts>
		}

		// Write the Time Stamp
		f_puts(timeStamp_s, (FIL*) logFil);
 8001b52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b56:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f014 fcc4 	bl	80164e8 <f_puts>

		// Write the Filter Name in Slot 1
		f_puts(sdLog->filterNames[0].filterName, (FIL*) logFil);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3312      	adds	r3, #18
 8001b64:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f014 fcbd 	bl	80164e8 <f_puts>
		f_puts(DL_DELIM, (FIL*) logFil);
 8001b6e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b72:	481f      	ldr	r0, [pc, #124]	; (8001bf0 <logDataToSD+0x1d8>)
 8001b74:	f014 fcb8 	bl	80164e8 <f_puts>

		// Write the Filter Name in Slot 2
		f_puts(sdLog->filterNames[1].filterName, (FIL*) logFil);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	331d      	adds	r3, #29
 8001b7c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b80:	4618      	mov	r0, r3
 8001b82:	f014 fcb1 	bl	80164e8 <f_puts>
		f_puts(DL_DELIM, (FIL*) logFil);
 8001b86:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b8a:	4819      	ldr	r0, [pc, #100]	; (8001bf0 <logDataToSD+0x1d8>)
 8001b8c:	f014 fcac 	bl	80164e8 <f_puts>

		// Write the Filter Name in Slot 3
		f_puts(sdLog->filterNames[2].filterName, (FIL*) logFil);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3328      	adds	r3, #40	; 0x28
 8001b94:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f014 fca5 	bl	80164e8 <f_puts>

		// Make a new line
		f_puts(DL_ENDL, (FIL*) logFil);
 8001b9e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001ba2:	4814      	ldr	r0, [pc, #80]	; (8001bf4 <logDataToSD+0x1dc>)
 8001ba4:	f014 fca0 	bl	80164e8 <f_puts>

		// Finish and Close the file
		fr = f_close((FIL*) logFil);
 8001ba8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001bac:	f013 fdd7 	bl	801575e <f_close>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

		// De-allocate the FatFs
		free(logFil);
 8001bb6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001bba:	f015 fb8b 	bl	80172d4 <free>

		if (fr == FR_OK) {
 8001bbe:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <logDataToSD+0x1b2>
			// The file closed successfully
			return DATALOG_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <logDataToSD+0x1b4>
		}
	}
	return DATALOG_ERR;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	37e0      	adds	r7, #224	; 0xe0
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd4:	20000258 	.word	0x20000258
 8001bd8:	08017b8c 	.word	0x08017b8c
 8001bdc:	08017b9c 	.word	0x08017b9c
 8001be0:	08017bb0 	.word	0x08017bb0
 8001be4:	08017b7c 	.word	0x08017b7c
 8001be8:	08017bc0 	.word	0x08017bc0
 8001bec:	08017c04 	.word	0x08017c04
 8001bf0:	08017bfc 	.word	0x08017bfc
 8001bf4:	08017c00 	.word	0x08017c00

08001bf8 <SDDataLog>:

DL_error SDDataLog(filterSection_t *fSection) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b096      	sub	sp, #88	; 0x58
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef dateStamp;
	RTC_TimeTypeDef timeStamp;
	sdLog_record_t sdLog = {0};
 8001c00:	f107 0308 	add.w	r3, r7, #8
 8001c04:	2234      	movs	r2, #52	; 0x34
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f015 fb85 	bl	8017318 <memset>

	if (!dlModInit) {
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <SDDataLog+0xd0>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	f083 0301 	eor.w	r3, r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <SDDataLog+0x28>
		return DATALOG_ERR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e04f      	b.n	8001cc0 <SDDataLog+0xc8>
	}

	// See if FATFS and SD Card are ready


	strcpy(sdLog.matteBoxID, MATTE_BOX_HW_ID);
 8001c20:	4a2a      	ldr	r2, [pc, #168]	; (8001ccc <SDDataLog+0xd4>)
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c28:	c303      	stmia	r3!, {r0, r1}
 8001c2a:	801a      	strh	r2, [r3, #0]

	// Get the Time and Store it
	rtcGetDateTime(&dateStamp, &timeStamp);
 8001c2c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001c30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 fdc6 	bl	80047c8 <rtcGetDateTime>

	// Load the DateTime results into the DataLog structure
	sdLog.dateTimeStamp.month = dateStamp.Month;
 8001c3c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001c40:	75fb      	strb	r3, [r7, #23]
	sdLog.dateTimeStamp.day = dateStamp.Date;
 8001c42:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001c46:	75bb      	strb	r3, [r7, #22]
	sdLog.dateTimeStamp.year = dateStamp.Year + 2000;
 8001c48:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	833b      	strh	r3, [r7, #24]

	sdLog.dateTimeStamp.hours = timeStamp.Hours;
 8001c56:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001c5a:	74bb      	strb	r3, [r7, #18]
	sdLog.dateTimeStamp.minutes = timeStamp.Minutes;
 8001c5c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001c60:	74fb      	strb	r3, [r7, #19]
	sdLog.dateTimeStamp.seconds = timeStamp.Seconds;
 8001c62:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c66:	753b      	strb	r3, [r7, #20]

	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001c6e:	e01d      	b.n	8001cac <SDDataLog+0xb4>
		strcpy(&sdLog.filterNames[i].filterName, fSection->filter[i].filterName);
 8001c70:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001c74:	f107 0108 	add.w	r1, r7, #8
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	3310      	adds	r3, #16
 8001c84:	440b      	add	r3, r1
 8001c86:	1c98      	adds	r0, r3, #2
 8001c88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f015 fc1b 	bl	80174d8 <strcpy>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8001ca2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001cac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d9dd      	bls.n	8001c70 <SDDataLog+0x78>
	}

	// Log to the SD Card
	return logDataToSD(&sdLog);
 8001cb4:	f107 0308 	add.w	r3, r7, #8
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fead 	bl	8001a18 <logDataToSD>
 8001cbe:	4603      	mov	r3, r0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3758      	adds	r7, #88	; 0x58
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000258 	.word	0x20000258
 8001ccc:	08017c38 	.word	0x08017c38

08001cd0 <EPD_Init>:
static void SPI_read(EPD_HandleTypeDef *epd, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);

// Global Variables
static bool setTemp = false;

void EPD_Init(EPD_size size, SPI_HandleTypeDef *spi, EPD_HandleTypeDef *epd) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	73fb      	strb	r3, [r7, #15]

	DWT_Init();											// Microsecond Delay required by the e-paper
 8001cde:	f7ff f84d 	bl	8000d7c <DWT_Init>

	epd->status = EPD_OK;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
	epd->spi = spi;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
	epd->size = size;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	705a      	strb	r2, [r3, #1]

	epd->panel_on_pin = EPD_POWER_Pin;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	805a      	strh	r2, [r3, #2]
	epd->discharge_pin = EPD_DISCHARGE_Pin;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	811a      	strh	r2, [r3, #8]
	epd->reset_pin = EPD_NRST_Pin;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	821a      	strh	r2, [r3, #16]
	epd->busy_pin = EPD_BUSY_Pin;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	831a      	strh	r2, [r3, #24]
	epd->spi_cs_pin = EPD_SPI_CS_Pin;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	841a      	strh	r2, [r3, #32]

	epd->panel_on_port = EPD_POWER_GPIO_Port;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a81      	ldr	r2, [pc, #516]	; (8001f1c <EPD_Init+0x24c>)
 8001d16:	605a      	str	r2, [r3, #4]
	epd->discharge_port = EPD_DISCHARGE_GPIO_Port;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a81      	ldr	r2, [pc, #516]	; (8001f20 <EPD_Init+0x250>)
 8001d1c:	60da      	str	r2, [r3, #12]
	epd->reset_port = EPD_NRST_GPIO_Port;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a7f      	ldr	r2, [pc, #508]	; (8001f20 <EPD_Init+0x250>)
 8001d22:	615a      	str	r2, [r3, #20]
	epd->busy_port = EPD_BUSY_GPIO_Port;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a7e      	ldr	r2, [pc, #504]	; (8001f20 <EPD_Init+0x250>)
 8001d28:	61da      	str	r2, [r3, #28]
	epd->spi_cs_port = EPD_SPI_CS_GPIO_Port;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a7b      	ldr	r2, [pc, #492]	; (8001f1c <EPD_Init+0x24c>)
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24

	epd->base_stage_time = 480; // milliseconds
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d36:	859a      	strh	r2, [r3, #44]	; 0x2c

	switch (size) {
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d80b      	bhi.n	8001d58 <EPD_Init+0x88>
 8001d40:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <EPD_Init+0x78>)
 8001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001d97 	.word	0x08001d97
 8001d4c:	08001dd5 	.word	0x08001dd5
 8001d50:	08001e13 	.word	0x08001e13
 8001d54:	08001e59 	.word	0x08001e59
		default:
		case EPD_1_44:  // default so no change
			epd->lines_per_display = 96;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2260      	movs	r2, #96	; 0x60
 8001d5c:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 128;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 128 / 8;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2210      	movs	r2, #16
 8001d68:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 96 / 4;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2218      	movs	r2, #24
 8001d6e:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00};
			epd->channel_select = cs;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a6c      	ldr	r2, [pc, #432]	; (8001f24 <EPD_Init+0x254>)
 8001d74:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2209      	movs	r2, #9
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
			epd->middle_scan = true; // => data-scan-data ELSE: scan-data-scan
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->pre_border_byte = false;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_ZERO;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001d94:	e080      	b.n	8001e98 <EPD_Init+0x1c8>

		case EPD_1_9: {
			epd->lines_per_display = 128;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 144;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2290      	movs	r2, #144	; 0x90
 8001da0:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 144 / 8;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2212      	movs	r2, #18
 8001da6:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->middle_scan = false;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->bytes_per_scan = 128 / 4 / 2; // scan/2 - data - scan/2
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2210      	movs	r2, #16
 8001db4:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0xff};
			epd->channel_select = cs;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a5b      	ldr	r2, [pc, #364]	; (8001f28 <EPD_Init+0x258>)
 8001dba:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2209      	movs	r2, #9
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = false;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_SET;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001dd2:	e061      	b.n	8001e98 <EPD_Init+0x1c8>
		}

		case EPD_2_0: {
			epd->lines_per_display = 96;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2260      	movs	r2, #96	; 0x60
 8001dd8:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 200;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	22c8      	movs	r2, #200	; 0xc8
 8001dde:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 200 / 8;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2219      	movs	r2, #25
 8001de4:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 96 / 4;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2218      	movs	r2, #24
 8001dea:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00};
			epd->channel_select = cs;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a4f      	ldr	r2, [pc, #316]	; (8001f2c <EPD_Init+0x25c>)
 8001df0:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2209      	movs	r2, #9
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
			epd->middle_scan = true; // => data-scan-data ELSE: scan-data-scan
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->pre_border_byte = true;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001e10:	e042      	b.n	8001e98 <EPD_Init+0x1c8>
		}

		case EPD_2_6: {
			epd->base_stage_time = 630; // milliseconds
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f240 2276 	movw	r2, #630	; 0x276
 8001e18:	859a      	strh	r2, [r3, #44]	; 0x2c
			epd->lines_per_display = 128;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 232;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	22e8      	movs	r2, #232	; 0xe8
 8001e24:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 232 / 8;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	221d      	movs	r2, #29
 8001e2a:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->middle_scan = false;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			epd->bytes_per_scan = 128 / 4 / 2; // scan/2 - data - scan/2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2210      	movs	r2, #16
 8001e38:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0xff};
			epd->channel_select = cs;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <EPD_Init+0x260>)
 8001e3e:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2209      	movs	r2, #9
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = false;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_SET;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001e56:	e01f      	b.n	8001e98 <EPD_Init+0x1c8>
		}

		case EPD_2_7: {
			epd->base_stage_time = 630; // milliseconds
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f240 2276 	movw	r2, #630	; 0x276
 8001e5e:	859a      	strh	r2, [r3, #44]	; 0x2c
			epd->lines_per_display = 176;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	22b0      	movs	r2, #176	; 0xb0
 8001e64:	861a      	strh	r2, [r3, #48]	; 0x30
			epd->dots_per_line = 264;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001e6c:	865a      	strh	r2, [r3, #50]	; 0x32
			epd->bytes_per_line = 264 / 8;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2221      	movs	r2, #33	; 0x21
 8001e72:	869a      	strh	r2, [r3, #52]	; 0x34
			epd->bytes_per_scan = 176 / 4;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	222c      	movs	r2, #44	; 0x2c
 8001e78:	86da      	strh	r2, [r3, #54]	; 0x36
			static uint8_t cs[] = {0x72, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00};
			epd->channel_select = cs;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a2d      	ldr	r2, [pc, #180]	; (8001f34 <EPD_Init+0x264>)
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c
			epd->channel_select_length = sizeof(cs);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2209      	movs	r2, #9
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
			epd->pre_border_byte = true;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			epd->border_byte = EPD_BORDER_BYTE_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			break;
 8001e96:	bf00      	nop
		}
	}

	// an initial default temperature
	epd->factored_stage_time = epd->base_stage_time;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	85da      	strh	r2, [r3, #46]	; 0x2e

	// Set a base temperature
	EPD_set_temperature(epd, 25);
 8001ea0:	2119      	movs	r1, #25
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fbaa 	bl	80025fc <EPD_set_temperature>

	// buffer for frame line
	if (epd->middle_scan) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <EPD_Init+0x1f8>
		epd->line_buffer_size = 2 * epd->bytes_per_line
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001eb6:	005b      	lsls	r3, r3, #1
			+ epd->bytes_per_scan
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001ebc:	4413      	add	r3, r2
			+ 3; // command byte, pre_border_byte, border byte
 8001ebe:	3303      	adds	r3, #3
 8001ec0:	461a      	mov	r2, r3
		epd->line_buffer_size = 2 * epd->bytes_per_line
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	649a      	str	r2, [r3, #72]	; 0x48
 8001ec6:	e00a      	b.n	8001ede <EPD_Init+0x20e>
	} else {
		epd->line_buffer_size = epd->bytes_per_line
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001ecc:	461a      	mov	r2, r3
			+ 2 * epd->bytes_per_scan
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
			+ 3; // command byte, pre_border_byte, border byte
 8001ed6:	3303      	adds	r3, #3
 8001ed8:	461a      	mov	r2, r3
		epd->line_buffer_size = epd->bytes_per_line
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	649a      	str	r2, [r3, #72]	; 0x48
	}

	epd->line_buffer = malloc(epd->line_buffer_size + 4096);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f015 f9ec 	bl	80172c4 <malloc>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44

	// ensure zero
	memset(epd->line_buffer, 0x00, epd->line_buffer_size);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efc:	461a      	mov	r2, r3
 8001efe:	2100      	movs	r1, #0
 8001f00:	f015 fa0a 	bl	8017318 <memset>

	// ensure I/O is all set to ZERO
	power_off(epd);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fb4d 	bl	80025a4 <power_off>

	// COG state for partial update
	epd->COG_on = false;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	20000004 	.word	0x20000004
 8001f28:	20000010 	.word	0x20000010
 8001f2c:	2000001c 	.word	0x2000001c
 8001f30:	20000028 	.word	0x20000028
 8001f34:	20000034 	.word	0x20000034

08001f38 <EPD_begin>:
	return epd->status;
}


// starts an EPD sequence
void EPD_begin(EPD_HandleTypeDef *epd) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b0a8      	sub	sp, #160	; 0xa0
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	int8_t currentTemperature;

	// Nothing to do when COG still on
	if (epd->COG_on) {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 823f 	bne.w	80023ca <EPD_begin+0x492>
		return;
	}

	if (setTemp) {
 8001f4c:	4b6f      	ldr	r3, [pc, #444]	; (800210c <EPD_begin+0x1d4>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d015      	beq.n	8001f80 <EPD_begin+0x48>
		// setTemp flag is set from outside to prevent over-sampling
		if (LM75B_ReadTemp(&currentTemperature) == LM75B_OK) {
 8001f54:	f107 030f 	add.w	r3, r7, #15
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f001 fd75 	bl	8003a48 <LM75B_ReadTemp>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d106      	bne.n	8001f72 <EPD_begin+0x3a>
			EPD_set_temperature(epd, currentTemperature);
 8001f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fb46 	bl	80025fc <EPD_set_temperature>
 8001f70:	e003      	b.n	8001f7a <EPD_begin+0x42>
		} else {
			EPD_set_temperature(epd, 25);
 8001f72:	2119      	movs	r1, #25
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fb41 	bl	80025fc <EPD_set_temperature>
		}
		setTemp = false;
 8001f7a:	4b64      	ldr	r3, [pc, #400]	; (800210c <EPD_begin+0x1d4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
	}

	// assume OK
	epd->status = EPD_OK;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]

	// power up sequence
	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6958      	ldr	r0, [r3, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	8a1b      	ldrh	r3, [r3, #16]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	4619      	mov	r1, r3
 8001f92:	f003 fe05 	bl	8005ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, LOW);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6858      	ldr	r0, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	885b      	ldrh	r3, [r3, #2]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f003 fdfd 	bl	8005ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, LOW);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68d8      	ldr	r0, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	891b      	ldrh	r3, [r3, #8]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f003 fdf5 	bl	8005ba0 <HAL_GPIO_WritePin>

	Delay_ms(5);
 8001fb6:	2005      	movs	r0, #5
 8001fb8:	f003 fb02 	bl	80055c0 <HAL_Delay>
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	8c1b      	ldrh	r3, [r3, #32]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f003 fdea 	bl	8005ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, HIGH);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6858      	ldr	r0, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	885b      	ldrh	r3, [r3, #2]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f003 fde2 	bl	8005ba0 <HAL_GPIO_WritePin>
	Delay_ms(10);
 8001fdc:	200a      	movs	r0, #10
 8001fde:	f003 faef 	bl	80055c0 <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, HIGH);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6958      	ldr	r0, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8a1b      	ldrh	r3, [r3, #16]
 8001fea:	2201      	movs	r2, #1
 8001fec:	4619      	mov	r1, r3
 8001fee:	f003 fdd7 	bl	8005ba0 <HAL_GPIO_WritePin>
	Delay_ms(5);
 8001ff2:	2005      	movs	r0, #5
 8001ff4:	f003 fae4 	bl	80055c0 <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6958      	ldr	r0, [r3, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	8a1b      	ldrh	r3, [r3, #16]
 8002000:	2200      	movs	r2, #0
 8002002:	4619      	mov	r1, r3
 8002004:	f003 fdcc 	bl	8005ba0 <HAL_GPIO_WritePin>
	Delay_ms(5);
 8002008:	2005      	movs	r0, #5
 800200a:	f003 fad9 	bl	80055c0 <HAL_Delay>

	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, HIGH);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6958      	ldr	r0, [r3, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	8a1b      	ldrh	r3, [r3, #16]
 8002016:	2201      	movs	r2, #1
 8002018:	4619      	mov	r1, r3
 800201a:	f003 fdc1 	bl	8005ba0 <HAL_GPIO_WritePin>
	Delay_ms(5);
 800201e:	2005      	movs	r0, #5
 8002020:	f003 face 	bl	80055c0 <HAL_Delay>

	// wait for COG to become ready
	while (HIGH == HAL_GPIO_ReadPin(epd->busy_port, epd->busy_pin)) {
 8002024:	e002      	b.n	800202c <EPD_begin+0xf4>
		Delay_us(10);
 8002026:	200a      	movs	r0, #10
 8002028:	f7fe fec2 	bl	8000db0 <DWT_Delay>
	while (HIGH == HAL_GPIO_ReadPin(epd->busy_port, epd->busy_pin)) {
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	8b1b      	ldrh	r3, [r3, #24]
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f003 fd9a 	bl	8005b70 <HAL_GPIO_ReadPin>
 800203c:	4603      	mov	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	d0f1      	beq.n	8002026 <EPD_begin+0xee>
	}

	// read the COG ID
	uint8_t receive_buffer[2];
	SPI_read(epd, CU8(0x71, 0x00), receive_buffer, sizeof(receive_buffer));
 8002042:	2371      	movs	r3, #113	; 0x71
 8002044:	743b      	strb	r3, [r7, #16]
 8002046:	2300      	movs	r3, #0
 8002048:	747b      	strb	r3, [r7, #17]
 800204a:	f107 020c 	add.w	r2, r7, #12
 800204e:	f107 0110 	add.w	r1, r7, #16
 8002052:	2302      	movs	r3, #2
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 ffcf 	bl	8002ff8 <SPI_read>
	SPI_read(epd, CU8(0x71, 0x00), receive_buffer, sizeof(receive_buffer));
 800205a:	2371      	movs	r3, #113	; 0x71
 800205c:	753b      	strb	r3, [r7, #20]
 800205e:	2300      	movs	r3, #0
 8002060:	757b      	strb	r3, [r7, #21]
 8002062:	f107 020c 	add.w	r2, r7, #12
 8002066:	f107 0114 	add.w	r1, r7, #20
 800206a:	2302      	movs	r3, #2
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 ffc3 	bl	8002ff8 <SPI_read>
	int cog_id = receive_buffer[1];
 8002072:	7b7b      	ldrb	r3, [r7, #13]
 8002074:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (0x02 != (0x0f & cog_id)) {
 8002078:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	2b02      	cmp	r3, #2
 8002082:	d006      	beq.n	8002092 <EPD_begin+0x15a>
		epd->status = EPD_UNSUPPORTED_COG;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fa8a 	bl	80025a4 <power_off>
		return;
 8002090:	e19c      	b.n	80023cc <EPD_begin+0x494>
	}

	// Disable OE
	SPI_send(epd, CU8(0x70, 0x02), 2);
 8002092:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <EPD_begin+0x1d8>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	833b      	strh	r3, [r7, #24]
 8002098:	f107 0318 	add.w	r3, r7, #24
 800209c:	2202      	movs	r2, #2
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 ff83 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x40), 2);
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <EPD_begin+0x1dc>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	83bb      	strh	r3, [r7, #28]
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	2202      	movs	r2, #2
 80020b2:	4619      	mov	r1, r3
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 ff79 	bl	8002fac <SPI_send>

	// check breakage
	SPI_send(epd, CU8(0x70, 0x0f), 2);
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <EPD_begin+0x1e0>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	843b      	strh	r3, [r7, #32]
 80020c0:	f107 0320 	add.w	r3, r7, #32
 80020c4:	2202      	movs	r2, #2
 80020c6:	4619      	mov	r1, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 ff6f 	bl	8002fac <SPI_send>
	SPI_read(epd, CU8(0x73, 0x00), receive_buffer, sizeof(receive_buffer));
 80020ce:	2373      	movs	r3, #115	; 0x73
 80020d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80020d4:	2300      	movs	r3, #0
 80020d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80020da:	f107 020c 	add.w	r2, r7, #12
 80020de:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80020e2:	2302      	movs	r3, #2
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 ff87 	bl	8002ff8 <SPI_read>
	int broken_panel = receive_buffer[1];
 80020ea:	7b7b      	ldrb	r3, [r7, #13]
 80020ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (0x00 == (0x80 & broken_panel)) {
 80020f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10f      	bne.n	800211c <EPD_begin+0x1e4>
		epd->status = EPD_PANEL_BROKEN;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fa4e 	bl	80025a4 <power_off>
		return;
 8002108:	e160      	b.n	80023cc <EPD_begin+0x494>
 800210a:	bf00      	nop
 800210c:	20000262 	.word	0x20000262
 8002110:	08017c68 	.word	0x08017c68
 8002114:	08017c6c 	.word	0x08017c6c
 8002118:	08017c70 	.word	0x08017c70
	}

	// power saving mode
	SPI_send(epd, CU8(0x70, 0x0b), 2);
 800211c:	4bad      	ldr	r3, [pc, #692]	; (80023d4 <EPD_begin+0x49c>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	853b      	strh	r3, [r7, #40]	; 0x28
 8002122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002126:	2202      	movs	r2, #2
 8002128:	4619      	mov	r1, r3
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 ff3e 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x02), 2);
 8002130:	4ba9      	ldr	r3, [pc, #676]	; (80023d8 <EPD_begin+0x4a0>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800213a:	2202      	movs	r2, #2
 800213c:	4619      	mov	r1, r3
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 ff34 	bl	8002fac <SPI_send>

	// channel select
	SPI_send(epd, CU8(0x70, 0x01), 2);
 8002144:	4ba5      	ldr	r3, [pc, #660]	; (80023dc <EPD_begin+0x4a4>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	863b      	strh	r3, [r7, #48]	; 0x30
 800214a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800214e:	2202      	movs	r2, #2
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 ff2a 	bl	8002fac <SPI_send>
	SPI_send(epd, epd->channel_select, epd->channel_select_length);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	b29b      	uxth	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 ff21 	bl	8002fac <SPI_send>

	// high power mode osc
	SPI_send(epd, CU8(0x70, 0x07), 2);
 800216a:	4b9d      	ldr	r3, [pc, #628]	; (80023e0 <EPD_begin+0x4a8>)
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002170:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002174:	2202      	movs	r2, #2
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 ff17 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0xd1), 2);
 800217e:	4b99      	ldr	r3, [pc, #612]	; (80023e4 <EPD_begin+0x4ac>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	873b      	strh	r3, [r7, #56]	; 0x38
 8002184:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002188:	2202      	movs	r2, #2
 800218a:	4619      	mov	r1, r3
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 ff0d 	bl	8002fac <SPI_send>

	// power setting
	SPI_send(epd, CU8(0x70, 0x08), 2);
 8002192:	4b95      	ldr	r3, [pc, #596]	; (80023e8 <EPD_begin+0x4b0>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002198:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800219c:	2202      	movs	r2, #2
 800219e:	4619      	mov	r1, r3
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 ff03 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x02), 2);
 80021a6:	4b8c      	ldr	r3, [pc, #560]	; (80023d8 <EPD_begin+0x4a0>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80021ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021b2:	2202      	movs	r2, #2
 80021b4:	4619      	mov	r1, r3
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fef8 	bl	8002fac <SPI_send>

	// Vcom level
	SPI_send(epd, CU8(0x70, 0x09), 2);
 80021bc:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <EPD_begin+0x4b4>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80021c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021c8:	2202      	movs	r2, #2
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 feed 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0xc2), 2);
 80021d2:	4b87      	ldr	r3, [pc, #540]	; (80023f0 <EPD_begin+0x4b8>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80021da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021de:	2202      	movs	r2, #2
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fee2 	bl	8002fac <SPI_send>

	// power setting
	SPI_send(epd, CU8(0x70, 0x04), 2);
 80021e8:	4b82      	ldr	r3, [pc, #520]	; (80023f4 <EPD_begin+0x4bc>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80021f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021f4:	2202      	movs	r2, #2
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fed7 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x03), 2);
 80021fe:	4b7e      	ldr	r3, [pc, #504]	; (80023f8 <EPD_begin+0x4c0>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002206:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800220a:	2202      	movs	r2, #2
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fecc 	bl	8002fac <SPI_send>

	// driver latch on
	SPI_send(epd, CU8(0x70, 0x03), 2);
 8002214:	4b79      	ldr	r3, [pc, #484]	; (80023fc <EPD_begin+0x4c4>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800221c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002220:	2202      	movs	r2, #2
 8002222:	4619      	mov	r1, r3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fec1 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 800222a:	4b75      	ldr	r3, [pc, #468]	; (8002400 <EPD_begin+0x4c8>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002232:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002236:	2202      	movs	r2, #2
 8002238:	4619      	mov	r1, r3
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 feb6 	bl	8002fac <SPI_send>

	// driver latch off
	SPI_send(epd, CU8(0x70, 0x03), 2);
 8002240:	4b6e      	ldr	r3, [pc, #440]	; (80023fc <EPD_begin+0x4c4>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002248:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800224c:	2202      	movs	r2, #2
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 feab 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 8002256:	2372      	movs	r3, #114	; 0x72
 8002258:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800225c:	2300      	movs	r3, #0
 800225e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8002262:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002266:	2202      	movs	r2, #2
 8002268:	4619      	mov	r1, r3
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fe9e 	bl	8002fac <SPI_send>

	Delay_ms(5);
 8002270:	2005      	movs	r0, #5
 8002272:	f003 f9a5 	bl	80055c0 <HAL_Delay>

	bool dc_ok = false;
 8002276:	2300      	movs	r3, #0
 8002278:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	for (int i = 0; i < 4; ++i) {
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002282:	e075      	b.n	8002370 <EPD_begin+0x438>
		// charge pump positive voltage on - VGH/VDL on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 8002284:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <EPD_begin+0x4cc>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800228c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002290:	2202      	movs	r2, #2
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fe89 	bl	8002fac <SPI_send>
		SPI_send(epd, CU8(0x72, 0x01), 2);
 800229a:	4b59      	ldr	r3, [pc, #356]	; (8002400 <EPD_begin+0x4c8>)
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80022a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022a6:	2202      	movs	r2, #2
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fe7e 	bl	8002fac <SPI_send>

		Delay_ms(240);
 80022b0:	20f0      	movs	r0, #240	; 0xf0
 80022b2:	f003 f985 	bl	80055c0 <HAL_Delay>

		// charge pump negative voltage on - VGL/VDL on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 80022b6:	4b53      	ldr	r3, [pc, #332]	; (8002404 <EPD_begin+0x4cc>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80022be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022c2:	2202      	movs	r2, #2
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fe70 	bl	8002fac <SPI_send>
		SPI_send(epd, CU8(0x72, 0x03), 2);
 80022cc:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <EPD_begin+0x4c0>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 80022d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022d8:	2202      	movs	r2, #2
 80022da:	4619      	mov	r1, r3
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 fe65 	bl	8002fac <SPI_send>

		Delay_ms(40);
 80022e2:	2028      	movs	r0, #40	; 0x28
 80022e4:	f003 f96c 	bl	80055c0 <HAL_Delay>

		// charge pump Vcom on - Vcom driver on
		SPI_send(epd, CU8(0x70, 0x05), 2);
 80022e8:	4b46      	ldr	r3, [pc, #280]	; (8002404 <EPD_begin+0x4cc>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80022f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022f4:	2202      	movs	r2, #2
 80022f6:	4619      	mov	r1, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fe57 	bl	8002fac <SPI_send>
		SPI_send(epd, CU8(0x72, 0x0f), 2);
 80022fe:	4b42      	ldr	r3, [pc, #264]	; (8002408 <EPD_begin+0x4d0>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002306:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800230a:	2202      	movs	r2, #2
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fe4c 	bl	8002fac <SPI_send>

		Delay_ms(40);
 8002314:	2028      	movs	r0, #40	; 0x28
 8002316:	f003 f953 	bl	80055c0 <HAL_Delay>

		// check DC/DC
		SPI_send(epd, CU8(0x70, 0x0f), 2);
 800231a:	4b3c      	ldr	r3, [pc, #240]	; (800240c <EPD_begin+0x4d4>)
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002322:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002326:	2202      	movs	r2, #2
 8002328:	4619      	mov	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fe3e 	bl	8002fac <SPI_send>
		SPI_read(epd, CU8(0x73, 0x00), receive_buffer, sizeof(receive_buffer));
 8002330:	2373      	movs	r3, #115	; 0x73
 8002332:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8002336:	2300      	movs	r3, #0
 8002338:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800233c:	f107 020c 	add.w	r2, r7, #12
 8002340:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002344:	2302      	movs	r3, #2
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fe56 	bl	8002ff8 <SPI_read>
		int dc_state = receive_buffer[1];
 800234c:	7b7b      	ldrb	r3, [r7, #13]
 800234e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if (0x40 == (0x40 & dc_state)) {
 8002352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <EPD_begin+0x42e>
			dc_ok = true;
 800235e:	2301      	movs	r3, #1
 8002360:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
 8002364:	e008      	b.n	8002378 <EPD_begin+0x440>
	for (int i = 0; i < 4; ++i) {
 8002366:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800236a:	3301      	adds	r3, #1
 800236c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002374:	2b03      	cmp	r3, #3
 8002376:	dd85      	ble.n	8002284 <EPD_begin+0x34c>
		}
	}
	if (!dc_ok) {
 8002378:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800237c:	f083 0301 	eor.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <EPD_begin+0x45c>
		epd->status = EPD_DC_FAILED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2203      	movs	r2, #3
 800238a:	701a      	strb	r2, [r3, #0]
		power_off(epd);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f909 	bl	80025a4 <power_off>
		return;
 8002392:	e01b      	b.n	80023cc <EPD_begin+0x494>
	}

	// output enable to disable
	SPI_send(epd, CU8(0x70, 0x02), 2);
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <EPD_begin+0x4d8>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800239c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80023a0:	2202      	movs	r2, #2
 80023a2:	4619      	mov	r1, r3
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fe01 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x04), 2);
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <EPD_begin+0x4dc>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80023b2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023b6:	2202      	movs	r2, #2
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fdf6 	bl	8002fac <SPI_send>

	epd->COG_on = true;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80023c8:	e000      	b.n	80023cc <EPD_begin+0x494>
		return;
 80023ca:	bf00      	nop
}
 80023cc:	37a0      	adds	r7, #160	; 0xa0
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	08017c74 	.word	0x08017c74
 80023d8:	08017c78 	.word	0x08017c78
 80023dc:	08017c7c 	.word	0x08017c7c
 80023e0:	08017c80 	.word	0x08017c80
 80023e4:	08017c84 	.word	0x08017c84
 80023e8:	08017c88 	.word	0x08017c88
 80023ec:	08017c8c 	.word	0x08017c8c
 80023f0:	08017c90 	.word	0x08017c90
 80023f4:	08017c94 	.word	0x08017c94
 80023f8:	08017c98 	.word	0x08017c98
 80023fc:	08017c9c 	.word	0x08017c9c
 8002400:	08017ca0 	.word	0x08017ca0
 8002404:	08017ca4 	.word	0x08017ca4
 8002408:	08017ca8 	.word	0x08017ca8
 800240c:	08017c70 	.word	0x08017c70
 8002410:	08017c68 	.word	0x08017c68
 8002414:	08017cac 	.word	0x08017cac

08002418 <EPD_end>:


void EPD_end(EPD_HandleTypeDef *epd) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b090      	sub	sp, #64	; 0x40
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

	nothing_frame(epd);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fa48 	bl	80028b6 <nothing_frame>

	if (EPD_2_7 == epd->size) {
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	785b      	ldrb	r3, [r3, #1]
 800242a:	2b04      	cmp	r3, #4
 800242c:	d103      	bne.n	8002436 <EPD_end+0x1e>
		dummy_line(epd);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fa60 	bl	80028f4 <dummy_line>
 8002434:	e005      	b.n	8002442 <EPD_end+0x2a>
//		Delay_ms(25);
//		digitalWrite(epd->EPD_Pin_BORDER, LOW);
//		Delay_ms(200);
//		digitalWrite(epd->EPD_Pin_BORDER, HIGH);
	} else {
		border_dummy_line(epd);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa6f 	bl	800291a <border_dummy_line>
		Delay_ms(200);
 800243c:	20c8      	movs	r0, #200	; 0xc8
 800243e:	f003 f8bf 	bl	80055c0 <HAL_Delay>
	}

	// ??? - not described in datasheet
	SPI_send(epd, CU8(0x70, 0x0b), 2);
 8002442:	4b50      	ldr	r3, [pc, #320]	; (8002584 <EPD_end+0x16c>)
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	813b      	strh	r3, [r7, #8]
 8002448:	f107 0308 	add.w	r3, r7, #8
 800244c:	2202      	movs	r2, #2
 800244e:	4619      	mov	r1, r3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fdab 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 8002456:	2372      	movs	r3, #114	; 0x72
 8002458:	733b      	strb	r3, [r7, #12]
 800245a:	2300      	movs	r3, #0
 800245c:	737b      	strb	r3, [r7, #13]
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	2202      	movs	r2, #2
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fda0 	bl	8002fac <SPI_send>

	// latch reset turn on
	SPI_send(epd, CU8(0x70, 0x03), 2);
 800246c:	4b46      	ldr	r3, [pc, #280]	; (8002588 <EPD_end+0x170>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	823b      	strh	r3, [r7, #16]
 8002472:	f107 0310 	add.w	r3, r7, #16
 8002476:	2202      	movs	r2, #2
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fd96 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 8002480:	4b42      	ldr	r3, [pc, #264]	; (800258c <EPD_end+0x174>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	82bb      	strh	r3, [r7, #20]
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	2202      	movs	r2, #2
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fd8c 	bl	8002fac <SPI_send>

	// power off charge pump Vcom
	SPI_send(epd, CU8(0x70, 0x05), 2);
 8002494:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <EPD_end+0x178>)
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	833b      	strh	r3, [r7, #24]
 800249a:	f107 0318 	add.w	r3, r7, #24
 800249e:	2202      	movs	r2, #2
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fd82 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x03), 2);
 80024a8:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <EPD_end+0x17c>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	83bb      	strh	r3, [r7, #28]
 80024ae:	f107 031c 	add.w	r3, r7, #28
 80024b2:	2202      	movs	r2, #2
 80024b4:	4619      	mov	r1, r3
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fd78 	bl	8002fac <SPI_send>

	// power off charge pump neg voltage
	SPI_send(epd, CU8(0x70, 0x05), 2);
 80024bc:	4b34      	ldr	r3, [pc, #208]	; (8002590 <EPD_end+0x178>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	843b      	strh	r3, [r7, #32]
 80024c2:	f107 0320 	add.w	r3, r7, #32
 80024c6:	2202      	movs	r2, #2
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fd6e 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 80024d0:	4b2e      	ldr	r3, [pc, #184]	; (800258c <EPD_end+0x174>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80024d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024da:	2202      	movs	r2, #2
 80024dc:	4619      	mov	r1, r3
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fd64 	bl	8002fac <SPI_send>

	Delay_ms(120);
 80024e4:	2078      	movs	r0, #120	; 0x78
 80024e6:	f003 f86b 	bl	80055c0 <HAL_Delay>

	// discharge internal
	SPI_send(epd, CU8(0x70, 0x04), 2);
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <EPD_end+0x180>)
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80024f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024f4:	2202      	movs	r2, #2
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fd57 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x80), 2);
 80024fe:	4b27      	ldr	r3, [pc, #156]	; (800259c <EPD_end+0x184>)
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002508:	2202      	movs	r2, #2
 800250a:	4619      	mov	r1, r3
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fd4d 	bl	8002fac <SPI_send>

	// turn off all charge pumps
	SPI_send(epd, CU8(0x70, 0x05), 2);
 8002512:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <EPD_end+0x178>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	863b      	strh	r3, [r7, #48]	; 0x30
 8002518:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800251c:	2202      	movs	r2, #2
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fd43 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x00), 2);
 8002526:	2372      	movs	r3, #114	; 0x72
 8002528:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800252c:	2300      	movs	r3, #0
 800252e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002532:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002536:	2202      	movs	r2, #2
 8002538:	4619      	mov	r1, r3
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fd36 	bl	8002fac <SPI_send>

	// turn of osc
	SPI_send(epd, CU8(0x70, 0x07), 2);
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <EPD_end+0x188>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	873b      	strh	r3, [r7, #56]	; 0x38
 8002546:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800254a:	2202      	movs	r2, #2
 800254c:	4619      	mov	r1, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fd2c 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x01), 2);
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <EPD_end+0x174>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800255a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800255e:	2202      	movs	r2, #2
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fd22 	bl	8002fac <SPI_send>

	Delay_ms(50);
 8002568:	2032      	movs	r0, #50	; 0x32
 800256a:	f003 f829 	bl	80055c0 <HAL_Delay>

	power_off(epd);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f818 	bl	80025a4 <power_off>

	epd->COG_on = false;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800257c:	bf00      	nop
 800257e:	3740      	adds	r7, #64	; 0x40
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	08017c74 	.word	0x08017c74
 8002588:	08017c9c 	.word	0x08017c9c
 800258c:	08017ca0 	.word	0x08017ca0
 8002590:	08017ca4 	.word	0x08017ca4
 8002594:	08017c98 	.word	0x08017c98
 8002598:	08017c94 	.word	0x08017c94
 800259c:	08017cb0 	.word	0x08017cb0
 80025a0:	08017c80 	.word	0x08017c80

080025a4 <power_off>:


static void power_off(EPD_HandleTypeDef *epd) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

	// turn of power and all signals
	HAL_GPIO_WritePin(epd->reset_port, epd->reset_pin, LOW);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6958      	ldr	r0, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8a1b      	ldrh	r3, [r3, #16]
 80025b4:	2200      	movs	r2, #0
 80025b6:	4619      	mov	r1, r3
 80025b8:	f003 faf2 	bl	8005ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(epd->panel_on_port, epd->panel_on_pin, LOW);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6858      	ldr	r0, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	885b      	ldrh	r3, [r3, #2]
 80025c4:	2200      	movs	r2, #0
 80025c6:	4619      	mov	r1, r3
 80025c8:	f003 faea 	bl	8005ba0 <HAL_GPIO_WritePin>

	// ensure SPI MOSI and CLOCK are Low before CS Low
//	SPI_off(epd->spi);

	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, HIGH);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68d8      	ldr	r0, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	891b      	ldrh	r3, [r3, #8]
 80025d4:	2201      	movs	r2, #1
 80025d6:	4619      	mov	r1, r3
 80025d8:	f003 fae2 	bl	8005ba0 <HAL_GPIO_WritePin>
	Delay_ms(150);
 80025dc:	2096      	movs	r0, #150	; 0x96
 80025de:	f002 ffef 	bl	80055c0 <HAL_Delay>
	HAL_GPIO_WritePin(epd->discharge_port, epd->discharge_pin, LOW);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68d8      	ldr	r0, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	891b      	ldrh	r3, [r3, #8]
 80025ea:	2200      	movs	r2, #0
 80025ec:	4619      	mov	r1, r3
 80025ee:	f003 fad7 	bl	8005ba0 <HAL_GPIO_WritePin>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <EPD_set_temperature>:


void EPD_set_temperature(EPD_HandleTypeDef *epd, int temperature) {
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
	epd->factored_stage_time = epd->base_stage_time * temperature_to_factor_10x(temperature) / 10;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800260a:	461c      	mov	r4, r3
 800260c:	6838      	ldr	r0, [r7, #0]
 800260e:	f000 f86a 	bl	80026e6 <temperature_to_factor_10x>
 8002612:	4603      	mov	r3, r0
 8002614:	fb03 f304 	mul.w	r3, r3, r4
 8002618:	4a06      	ldr	r2, [pc, #24]	; (8002634 <EPD_set_temperature+0x38>)
 800261a:	fb82 1203 	smull	r1, r2, r2, r3
 800261e:	1092      	asrs	r2, r2, #2
 8002620:	17db      	asrs	r3, r3, #31
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	b29a      	uxth	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}
 8002632:	bf00      	nop
 8002634:	66666667 	.word	0x66666667

08002638 <EPD_set_enable_temperature>:

void EPD_set_enable_temperature(void){
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	setTemp = true;
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <EPD_set_enable_temperature+0x14>)
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	20000262 	.word	0x20000262

08002650 <EPD_clear>:
//	epd->factored_stage_time = pu_stagetime;
//}


// clear display (anything -> white)
void EPD_clear(EPD_HandleTypeDef *epd) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	frame_fixed_repeat(epd, 0xff, EPD_compensate);
 8002658:	2200      	movs	r2, #0
 800265a:	21ff      	movs	r1, #255	; 0xff
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f8e5 	bl	800282c <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xff, EPD_white);
 8002662:	2201      	movs	r2, #1
 8002664:	21ff      	movs	r1, #255	; 0xff
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8e0 	bl	800282c <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_inverse);
 800266c:	2202      	movs	r2, #2
 800266e:	21aa      	movs	r1, #170	; 0xaa
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f8db 	bl	800282c <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_normal);
 8002676:	2203      	movs	r2, #3
 8002678:	21aa      	movs	r1, #170	; 0xaa
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f8d6 	bl	800282c <frame_fixed_repeat>
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <EPD_image_0>:

// assuming a clear (white) screen output an image
void EPD_image_0(EPD_HandleTypeDef *epd, const uint8_t *image) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
	frame_fixed_repeat(epd, 0xaa, EPD_compensate);
 8002692:	2200      	movs	r2, #0
 8002694:	21aa      	movs	r1, #170	; 0xaa
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8c8 	bl	800282c <frame_fixed_repeat>
	frame_fixed_repeat(epd, 0xaa, EPD_white);
 800269c:	2201      	movs	r2, #1
 800269e:	21aa      	movs	r1, #170	; 0xaa
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f8c3 	bl	800282c <frame_fixed_repeat>
	frame_data_repeat(epd, image, NULL, EPD_inverse);
 80026a6:	2302      	movs	r3, #2
 80026a8:	2200      	movs	r2, #0
 80026aa:	6839      	ldr	r1, [r7, #0]
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f8e0 	bl	8002872 <frame_data_repeat>
	frame_data_repeat(epd, image, NULL, EPD_normal);
 80026b2:	2303      	movs	r3, #3
 80026b4:	2200      	movs	r2, #0
 80026b6:	6839      	ldr	r1, [r7, #0]
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f8da 	bl	8002872 <frame_data_repeat>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <EPD_partial_image>:
	frame_data_repeat(epd, new_image, NULL, EPD_inverse);
	frame_data_repeat(epd, new_image, NULL, EPD_normal);
}

// change from old image to new image
void EPD_partial_image(EPD_HandleTypeDef *epd, const uint8_t *old_image, const uint8_t *new_image) {
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
	// Only need last stage for partial update
	// See discussion on issue #19 in the repaper/gratis repository on github
	frame_data_repeat(epd, new_image, old_image, EPD_normal);
 80026d2:	2303      	movs	r3, #3
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f8ca 	bl	8002872 <frame_data_repeat>
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <temperature_to_factor_10x>:
// internal functions
// ==================

// convert a temperature in Celsius to
// the scale factor for frame_*_repeat methods
static int temperature_to_factor_10x(int temperature) {
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
	if (temperature <= -10) {
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f113 0f09 	cmn.w	r3, #9
 80026f4:	da01      	bge.n	80026fa <temperature_to_factor_10x+0x14>
		return 170;
 80026f6:	23aa      	movs	r3, #170	; 0xaa
 80026f8:	e01f      	b.n	800273a <temperature_to_factor_10x+0x54>
	} else if (temperature <= -5) {
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f113 0f04 	cmn.w	r3, #4
 8002700:	da01      	bge.n	8002706 <temperature_to_factor_10x+0x20>
		return 120;
 8002702:	2378      	movs	r3, #120	; 0x78
 8002704:	e019      	b.n	800273a <temperature_to_factor_10x+0x54>
	} else if (temperature <= 5) {
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b05      	cmp	r3, #5
 800270a:	dc01      	bgt.n	8002710 <temperature_to_factor_10x+0x2a>
		return 80;
 800270c:	2350      	movs	r3, #80	; 0x50
 800270e:	e014      	b.n	800273a <temperature_to_factor_10x+0x54>
	} else if (temperature <= 10) {
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b0a      	cmp	r3, #10
 8002714:	dc01      	bgt.n	800271a <temperature_to_factor_10x+0x34>
		return 40;
 8002716:	2328      	movs	r3, #40	; 0x28
 8002718:	e00f      	b.n	800273a <temperature_to_factor_10x+0x54>
	} else if (temperature <= 15) {
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b0f      	cmp	r3, #15
 800271e:	dc01      	bgt.n	8002724 <temperature_to_factor_10x+0x3e>
		return 30;
 8002720:	231e      	movs	r3, #30
 8002722:	e00a      	b.n	800273a <temperature_to_factor_10x+0x54>
	} else if (temperature <= 20) {
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b14      	cmp	r3, #20
 8002728:	dc01      	bgt.n	800272e <temperature_to_factor_10x+0x48>
		return 20;
 800272a:	2314      	movs	r3, #20
 800272c:	e005      	b.n	800273a <temperature_to_factor_10x+0x54>
	} else if (temperature <= 40) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b28      	cmp	r3, #40	; 0x28
 8002732:	dc01      	bgt.n	8002738 <temperature_to_factor_10x+0x52>
		return 10;
 8002734:	230a      	movs	r3, #10
 8002736:	e000      	b.n	800273a <temperature_to_factor_10x+0x54>
	}
	return 7;
 8002738:	2307      	movs	r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <frame_fixed>:
// The 2.7” frame of data is 176 lines * 264 dots.

// the image is arranged by line which matches the display size
// so smallest would have 96 * 32 bytes

static void frame_fixed(EPD_HandleTypeDef *epd, uint8_t fixed_value, EPD_stage stage) {
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af02      	add	r7, sp, #8
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	70fb      	strb	r3, [r7, #3]
 8002752:	4613      	mov	r3, r2
 8002754:	70bb      	strb	r3, [r7, #2]
	for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	e00e      	b.n	800277a <frame_fixed+0x34>
		one_line(epd, l, NULL, fixed_value, NULL, stage);
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	b299      	uxth	r1, r3
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	78bb      	ldrb	r3, [r7, #2]
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	2300      	movs	r3, #0
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	4613      	mov	r3, r2
 800276c:	2200      	movs	r2, #0
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fb06 	bl	8002d80 <one_line>
	for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	3301      	adds	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	b29a      	uxth	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002782:	429a      	cmp	r2, r3
 8002784:	d3ea      	bcc.n	800275c <frame_fixed+0x16>
	}
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <frame_data>:


static void frame_data(EPD_HandleTypeDef *epd, const uint8_t *image, const uint8_t *mask, EPD_stage stage) {
 800278e:	b580      	push	{r7, lr}
 8002790:	b088      	sub	sp, #32
 8002792:	af02      	add	r7, sp, #8
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	70fb      	strb	r3, [r7, #3]
	if (NULL == mask) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d11e      	bne.n	80027e0 <frame_data+0x52>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]
 80027a6:	e014      	b.n	80027d2 <frame_data+0x44>
			one_line(epd, l, &image[l * epd->bytes_per_line], 0, NULL, stage);
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	b299      	uxth	r1, r3
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	441a      	add	r2, r3
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	2300      	movs	r3, #0
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2300      	movs	r3, #0
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 fada 	bl	8002d80 <one_line>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	3301      	adds	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80027da:	429a      	cmp	r2, r3
 80027dc:	d3e4      	bcc.n	80027a8 <frame_data+0x1a>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
			size_t n = l * epd->bytes_per_line;
			one_line(epd, l, &image[n], 0, &mask[n], stage);
		}
	}
}
 80027de:	e021      	b.n	8002824 <frame_data+0x96>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 80027e0:	2300      	movs	r3, #0
 80027e2:	75bb      	strb	r3, [r7, #22]
 80027e4:	e018      	b.n	8002818 <frame_data+0x8a>
			size_t n = l * epd->bytes_per_line;
 80027e6:	7dbb      	ldrb	r3, [r7, #22]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	613b      	str	r3, [r7, #16]
			one_line(epd, l, &image[n], 0, &mask[n], stage);
 80027f2:	7dbb      	ldrb	r3, [r7, #22]
 80027f4:	b299      	uxth	r1, r3
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	18d0      	adds	r0, r2, r3
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	9201      	str	r2, [sp, #4]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	4602      	mov	r2, r0
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fab7 	bl	8002d80 <one_line>
		for (uint8_t l = 0; l < epd->lines_per_display ; ++l) {
 8002812:	7dbb      	ldrb	r3, [r7, #22]
 8002814:	3301      	adds	r3, #1
 8002816:	75bb      	strb	r3, [r7, #22]
 8002818:	7dbb      	ldrb	r3, [r7, #22]
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002820:	429a      	cmp	r2, r3
 8002822:	d3e0      	bcc.n	80027e6 <frame_data+0x58>
}
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <frame_fixed_repeat>:


static void frame_fixed_repeat(EPD_HandleTypeDef *epd, uint8_t fixed_value, EPD_stage stage) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
 8002838:	4613      	mov	r3, r2
 800283a:	70bb      	strb	r3, [r7, #2]
	int iters = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
	uint32_t startTime = HAL_GetTick();
 8002840:	f002 feb2 	bl	80055a8 <HAL_GetTick>
 8002844:	60b8      	str	r0, [r7, #8]

	do {
		frame_fixed(epd, fixed_value, stage);
 8002846:	78ba      	ldrb	r2, [r7, #2]
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	4619      	mov	r1, r3
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff7a 	bl	8002746 <frame_fixed>
		iters++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3301      	adds	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
	} while (HAL_GetTick() - startTime < epd->factored_stage_time);
 8002858:	f002 fea6 	bl	80055a8 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002866:	4293      	cmp	r3, r2
 8002868:	d3ed      	bcc.n	8002846 <frame_fixed_repeat+0x1a>
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <frame_data_repeat>:


static void frame_data_repeat(EPD_HandleTypeDef *epd, const uint8_t *image, const uint8_t *mask, EPD_stage stage) {
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	70fb      	strb	r3, [r7, #3]
	int iters = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
	uint32_t startTime = HAL_GetTick();
 8002884:	f002 fe90 	bl	80055a8 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

	do {
		frame_data(epd, image, mask, stage);
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7ff ff7c 	bl	800278e <frame_data>
		iters++;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3301      	adds	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
	} while (HAL_GetTick() - startTime < epd->factored_stage_time);
 800289c:	f002 fe84 	bl	80055a8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d3ed      	bcc.n	800288a <frame_data_repeat+0x18>
}
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <nothing_frame>:



static void nothing_frame(EPD_HandleTypeDef *epd) {
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af02      	add	r7, sp, #8
 80028bc:	6078      	str	r0, [r7, #4]
	for (int line = 0; line < epd->lines_per_display; ++line) {
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e00d      	b.n	80028e0 <nothing_frame+0x2a>
		one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_compensate);
 80028c4:	2300      	movs	r3, #0
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	2300      	movs	r3, #0
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2300      	movs	r3, #0
 80028ce:	2200      	movs	r2, #0
 80028d0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fa53 	bl	8002d80 <one_line>
	for (int line = 0; line < epd->lines_per_display; ++line) {
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3301      	adds	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80028e4:	461a      	mov	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4293      	cmp	r3, r2
 80028ea:	dbeb      	blt.n	80028c4 <nothing_frame+0xe>
	}
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <dummy_line>:


static void dummy_line(EPD_HandleTypeDef *epd) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	6078      	str	r0, [r7, #4]
	one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_compensate);
 80028fc:	2300      	movs	r3, #0
 80028fe:	9301      	str	r3, [sp, #4]
 8002900:	2300      	movs	r3, #0
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2300      	movs	r3, #0
 8002906:	2200      	movs	r2, #0
 8002908:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fa37 	bl	8002d80 <one_line>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <border_dummy_line>:


static void border_dummy_line(EPD_HandleTypeDef *epd) {
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af02      	add	r7, sp, #8
 8002920:	6078      	str	r0, [r7, #4]
	one_line(epd, 0x7fffu, NULL, 0x00, NULL, EPD_normal);
 8002922:	2303      	movs	r3, #3
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	2300      	movs	r3, #0
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2300      	movs	r3, #0
 800292c:	2200      	movs	r2, #0
 800292e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fa24 	bl	8002d80 <one_line>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <even_pixels>:


// pixels on display are numbered from 1 so even is actually bits 1,3,5,...
static void even_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	70fb      	strb	r3, [r7, #3]

	for (uint16_t b = 0; b < epd->bytes_per_line; ++b) {
 800294e:	2300      	movs	r3, #0
 8002950:	82fb      	strh	r3, [r7, #22]
 8002952:	e098      	b.n	8002a86 <even_pixels+0x146>
		if (NULL != data) {
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 808b 	beq.w	8002a72 <even_pixels+0x132>
			uint8_t pixels = data[b] & 0xaa;
 800295c:	8afb      	ldrh	r3, [r7, #22]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8002968:	757b      	strb	r3, [r7, #21]
			uint8_t pixel_mask = 0xff;
 800296a:	23ff      	movs	r3, #255	; 0xff
 800296c:	753b      	strb	r3, [r7, #20]
			if (NULL != mask) {
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00f      	beq.n	8002994 <even_pixels+0x54>
				pixel_mask = (mask[b] ^ pixels) & 0xaa;
 8002974:	8afb      	ldrh	r3, [r7, #22]
 8002976:	6a3a      	ldr	r2, [r7, #32]
 8002978:	4413      	add	r3, r2
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	7d7b      	ldrb	r3, [r7, #21]
 800297e:	4053      	eors	r3, r2
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8002986:	753b      	strb	r3, [r7, #20]
				pixel_mask |= pixel_mask >> 1;
 8002988:	7d3b      	ldrb	r3, [r7, #20]
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	b2da      	uxtb	r2, r3
 800298e:	7d3b      	ldrb	r3, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	753b      	strb	r3, [r7, #20]
			}
			switch(stage) {
 8002994:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002998:	2b03      	cmp	r3, #3
 800299a:	d82e      	bhi.n	80029fa <even_pixels+0xba>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <even_pixels+0x64>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	080029c9 	.word	0x080029c9
 80029ac:	080029db 	.word	0x080029db
 80029b0:	080029ed 	.word	0x080029ed
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaa | ((pixels ^ 0xaa) >> 1);
 80029b4:	7d7b      	ldrb	r3, [r7, #21]
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f063 0355 	orn	r3, r3, #85	; 0x55
 80029c4:	757b      	strb	r3, [r7, #21]
				break;
 80029c6:	e018      	b.n	80029fa <even_pixels+0xba>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x55 + ((pixels ^ 0xaa) >> 1);
 80029c8:	7d7b      	ldrb	r3, [r7, #21]
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3355      	adds	r3, #85	; 0x55
 80029d6:	757b      	strb	r3, [r7, #21]
				break;
 80029d8:	e00f      	b.n	80029fa <even_pixels+0xba>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x55 | (pixels ^ 0xaa);
 80029da:	7d7b      	ldrb	r3, [r7, #21]
 80029dc:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 80029e0:	43db      	mvns	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80029e8:	757b      	strb	r3, [r7, #21]
				break;
 80029ea:	e006      	b.n	80029fa <even_pixels+0xba>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaa | (pixels >> 1);
 80029ec:	7d7b      	ldrb	r3, [r7, #21]
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f063 0355 	orn	r3, r3, #85	; 0x55
 80029f6:	757b      	strb	r3, [r7, #21]
				break;
 80029f8:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x55);
 80029fa:	7d7a      	ldrb	r2, [r7, #21]
 80029fc:	7d3b      	ldrb	r3, [r7, #20]
 80029fe:	4013      	ands	r3, r2
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	b25a      	sxtb	r2, r3
 8002a04:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	b25b      	sxtb	r3, r3
 8002a0c:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	4313      	orrs	r3, r2
 8002a14:	b25b      	sxtb	r3, r3
 8002a16:	757b      	strb	r3, [r7, #21]
			uint8_t p1 = (pixels >> 6) & 0x03;
 8002a18:	7d7b      	ldrb	r3, [r7, #21]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	74fb      	strb	r3, [r7, #19]
			uint8_t p2 = (pixels >> 4) & 0x03;
 8002a1e:	7d7b      	ldrb	r3, [r7, #21]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	74bb      	strb	r3, [r7, #18]
			uint8_t p3 = (pixels >> 2) & 0x03;
 8002a2a:	7d7b      	ldrb	r3, [r7, #21]
 8002a2c:	089b      	lsrs	r3, r3, #2
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	747b      	strb	r3, [r7, #17]
			uint8_t p4 = (pixels >> 0) & 0x03;
 8002a36:	7d7b      	ldrb	r3, [r7, #21]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	743b      	strb	r3, [r7, #16]
			pixels = (p1 << 0) | (p2 << 2) | (p3 << 4) | (p4 << 6);
 8002a3e:	7cbb      	ldrb	r3, [r7, #18]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	b25a      	sxtb	r2, r3
 8002a44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	b25a      	sxtb	r2, r3
 8002a4c:	7c7b      	ldrb	r3, [r7, #17]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	4313      	orrs	r3, r2
 8002a54:	b25a      	sxtb	r2, r3
 8002a56:	7c3b      	ldrb	r3, [r7, #16]
 8002a58:	019b      	lsls	r3, r3, #6
 8002a5a:	b25b      	sxtb	r3, r3
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b25b      	sxtb	r3, r3
 8002a60:	757b      	strb	r3, [r7, #21]
			*(*pp)++ = pixels;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	1c59      	adds	r1, r3, #1
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	6011      	str	r1, [r2, #0]
 8002a6c:	7d7a      	ldrb	r2, [r7, #21]
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e006      	b.n	8002a80 <even_pixels+0x140>
		} else {
			*(*pp)++ = fixed_value;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	1c59      	adds	r1, r3, #1
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	6011      	str	r1, [r2, #0]
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = 0; b < epd->bytes_per_line; ++b) {
 8002a80:	8afb      	ldrh	r3, [r7, #22]
 8002a82:	3301      	adds	r3, #1
 8002a84:	82fb      	strh	r3, [r7, #22]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a8a:	8afa      	ldrh	r2, [r7, #22]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f4ff af61 	bcc.w	8002954 <even_pixels+0x14>
		}
	}
}
 8002a92:	bf00      	nop
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop

08002aa0 <odd_pixels>:

// pixels on display are numbered from 1 so odd is actually bits 0,2,4,...
static void odd_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	70fb      	strb	r3, [r7, #3]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002ab2:	82fb      	strh	r3, [r7, #22]
 8002ab4:	e072      	b.n	8002b9c <odd_pixels+0xfc>
		if (NULL != data) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d065      	beq.n	8002b88 <odd_pixels+0xe8>
			uint8_t pixels = data[b - 1] & 0x55;
 8002abc:	8afb      	ldrh	r3, [r7, #22]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002aca:	757b      	strb	r3, [r7, #21]
			uint8_t pixel_mask = 0xff;
 8002acc:	23ff      	movs	r3, #255	; 0xff
 8002ace:	753b      	strb	r3, [r7, #20]
			if (NULL != mask) {
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d012      	beq.n	8002afc <odd_pixels+0x5c>
				pixel_mask = (mask[b - 1] ^ pixels) & 0x55;
 8002ad6:	8afb      	ldrh	r3, [r7, #22]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	6a3a      	ldr	r2, [r7, #32]
 8002adc:	4413      	add	r3, r2
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	7d7b      	ldrb	r3, [r7, #21]
 8002ae2:	4053      	eors	r3, r2
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002aea:	753b      	strb	r3, [r7, #20]
				pixel_mask |= pixel_mask << 1;
 8002aec:	7d3b      	ldrb	r3, [r7, #20]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	b25a      	sxtb	r2, r3
 8002af2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	753b      	strb	r3, [r7, #20]
			}
			switch(stage) {
 8002afc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d82a      	bhi.n	8002b5a <odd_pixels+0xba>
 8002b04:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <odd_pixels+0x6c>)
 8002b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0a:	bf00      	nop
 8002b0c:	08002b1d 	.word	0x08002b1d
 8002b10:	08002b2d 	.word	0x08002b2d
 8002b14:	08002b3b 	.word	0x08002b3b
 8002b18:	08002b51 	.word	0x08002b51
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaa | (pixels ^ 0x55);
 8002b1c:	7d7b      	ldrb	r3, [r7, #21]
 8002b1e:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f063 0355 	orn	r3, r3, #85	; 0x55
 8002b28:	757b      	strb	r3, [r7, #21]
				break;
 8002b2a:	e016      	b.n	8002b5a <odd_pixels+0xba>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x55 + (pixels ^ 0x55);
 8002b2c:	7d7b      	ldrb	r3, [r7, #21]
 8002b2e:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	3355      	adds	r3, #85	; 0x55
 8002b36:	757b      	strb	r3, [r7, #21]
				break;
 8002b38:	e00f      	b.n	8002b5a <odd_pixels+0xba>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x55 | ((pixels ^ 0x55) << 1);
 8002b3a:	7d7b      	ldrb	r3, [r7, #21]
 8002b3c:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002b4a:	b25b      	sxtb	r3, r3
 8002b4c:	757b      	strb	r3, [r7, #21]
				break;
 8002b4e:	e004      	b.n	8002b5a <odd_pixels+0xba>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaa | pixels;
 8002b50:	7d7b      	ldrb	r3, [r7, #21]
 8002b52:	f063 0355 	orn	r3, r3, #85	; 0x55
 8002b56:	757b      	strb	r3, [r7, #21]
				break;
 8002b58:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x55);
 8002b5a:	7d7a      	ldrb	r2, [r7, #21]
 8002b5c:	7d3b      	ldrb	r3, [r7, #20]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	b25a      	sxtb	r2, r3
 8002b64:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002b70:	b25b      	sxtb	r3, r3
 8002b72:	4313      	orrs	r3, r2
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	757b      	strb	r3, [r7, #21]
			*(*pp)++ = pixels;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1c59      	adds	r1, r3, #1
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	6011      	str	r1, [r2, #0]
 8002b82:	7d7a      	ldrb	r2, [r7, #21]
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e006      	b.n	8002b96 <odd_pixels+0xf6>
		} else {
			*(*pp)++ = fixed_value;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	1c59      	adds	r1, r3, #1
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	6011      	str	r1, [r2, #0]
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002b96:	8afb      	ldrh	r3, [r7, #22]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	82fb      	strh	r3, [r7, #22]
 8002b9c:	8afb      	ldrh	r3, [r7, #22]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d189      	bne.n	8002ab6 <odd_pixels+0x16>
		}
	}
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop

08002bb0 <interleave_bits>:

// interleave bits: (byte)76543210 -> (16 bit).7.6.5.4.3.2.1
static inline uint16_t interleave_bits(uint16_t value) {
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 4)) & 0x0f0f;
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	b21a      	sxth	r2, r3
 8002bc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002bce:	4013      	ands	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 2)) & 0x3333;
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	b21a      	sxth	r2, r3
 8002bd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	b21b      	sxth	r3, r3
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	f243 3333 	movw	r3, #13107	; 0x3333
 8002be6:	4013      	ands	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
	value = (value | (value << 1)) & 0x5555;
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	b21b      	sxth	r3, r3
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	f245 5355 	movw	r3, #21845	; 0x5555
 8002bfe:	4013      	ands	r3, r2
 8002c00:	80fb      	strh	r3, [r7, #6]
	return value;
 8002c02:	88fb      	ldrh	r3, [r7, #6]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <all_pixels>:

// pixels on display are numbered from 1
static void all_pixels(EPD_HandleTypeDef *epd, uint8_t **pp, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	70fb      	strb	r3, [r7, #3]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002c22:	82fb      	strh	r3, [r7, #22]
 8002c24:	e0a1      	b.n	8002d6a <all_pixels+0x15a>
		if (NULL != data) {
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 808d 	beq.w	8002d48 <all_pixels+0x138>
			uint16_t pixels = interleave_bits(data[b - 1]);
 8002c2e:	8afb      	ldrh	r3, [r7, #22]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ffb8 	bl	8002bb0 <interleave_bits>
 8002c40:	4603      	mov	r3, r0
 8002c42:	82bb      	strh	r3, [r7, #20]

			uint16_t pixel_mask = 0xffff;
 8002c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c48:	827b      	strh	r3, [r7, #18]
			if (NULL != mask) {
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01a      	beq.n	8002c86 <all_pixels+0x76>
				uint16_t pixel_mask = interleave_bits(mask[b - 1]);
 8002c50:	8afb      	ldrh	r3, [r7, #22]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	6a3a      	ldr	r2, [r7, #32]
 8002c56:	4413      	add	r3, r2
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ffa7 	bl	8002bb0 <interleave_bits>
 8002c62:	4603      	mov	r3, r0
 8002c64:	823b      	strh	r3, [r7, #16]
				pixel_mask = (pixel_mask ^ pixels) & 0x5555;
 8002c66:	8a3a      	ldrh	r2, [r7, #16]
 8002c68:	8abb      	ldrh	r3, [r7, #20]
 8002c6a:	4053      	eors	r3, r2
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	f245 5355 	movw	r3, #21845	; 0x5555
 8002c72:	4013      	ands	r3, r2
 8002c74:	823b      	strh	r3, [r7, #16]
				pixel_mask |= pixel_mask << 1;
 8002c76:	8a3b      	ldrh	r3, [r7, #16]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	b21a      	sxth	r2, r3
 8002c7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	823b      	strh	r3, [r7, #16]
			}
			switch(stage) {
 8002c86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d839      	bhi.n	8002d02 <all_pixels+0xf2>
 8002c8e:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <all_pixels+0x84>)
 8002c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c94:	08002ca5 	.word	0x08002ca5
 8002c98:	08002cb9 	.word	0x08002cb9
 8002c9c:	08002ccf 	.word	0x08002ccf
 8002ca0:	08002ced 	.word	0x08002ced
			case EPD_compensate:  // B -> W, W -> B (Current Image)
				pixels = 0xaaaa | (pixels ^ 0x5555);
 8002ca4:	8abb      	ldrh	r3, [r7, #20]
 8002ca6:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002caa:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <all_pixels+0x16c>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	82bb      	strh	r3, [r7, #20]
				break;
 8002cb6:	e024      	b.n	8002d02 <all_pixels+0xf2>
			case EPD_white:       // B -> N, W -> W (Current Image)
				pixels = 0x5555 + (pixels ^ 0x5555);
 8002cb8:	8abb      	ldrh	r3, [r7, #20]
 8002cba:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002cbe:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8002cc8:	3355      	adds	r3, #85	; 0x55
 8002cca:	82bb      	strh	r3, [r7, #20]
				break;
 8002ccc:	e019      	b.n	8002d02 <all_pixels+0xf2>
			case EPD_inverse:     // B -> N, W -> B (New Image)
				pixels = 0x5555 | ((pixels ^ 0x5555) << 1);
 8002cce:	8abb      	ldrh	r3, [r7, #20]
 8002cd0:	f483 43aa 	eor.w	r3, r3, #21760	; 0x5500
 8002cd4:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	b21b      	sxth	r3, r3
 8002cde:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8002ce2:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002ce6:	b21b      	sxth	r3, r3
 8002ce8:	82bb      	strh	r3, [r7, #20]
				break;
 8002cea:	e00a      	b.n	8002d02 <all_pixels+0xf2>
			case EPD_normal:       // B -> B, W -> W (New Image)
				pixels = 0xaaaa | pixels;
 8002cec:	8abb      	ldrh	r3, [r7, #20]
 8002cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf6:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8002cfa:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8002cfe:	82bb      	strh	r3, [r7, #20]
				break;
 8002d00:	bf00      	nop
			}
			pixels = (pixels & pixel_mask) | (~pixel_mask & 0x5555);
 8002d02:	8aba      	ldrh	r2, [r7, #20]
 8002d04:	8a7b      	ldrh	r3, [r7, #18]
 8002d06:	4013      	ands	r3, r2
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	b21a      	sxth	r2, r3
 8002d0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	b219      	sxth	r1, r3
 8002d14:	f245 5355 	movw	r3, #21845	; 0x5555
 8002d18:	400b      	ands	r3, r1
 8002d1a:	b21b      	sxth	r3, r3
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	b21b      	sxth	r3, r3
 8002d20:	82bb      	strh	r3, [r7, #20]
			*(*pp)++ = pixels >> 8;
 8002d22:	8abb      	ldrh	r3, [r7, #20]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	b298      	uxth	r0, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	1c59      	adds	r1, r3, #1
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	6011      	str	r1, [r2, #0]
 8002d32:	b2c2      	uxtb	r2, r0
 8002d34:	701a      	strb	r2, [r3, #0]
			*(*pp)++ = pixels;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	1c59      	adds	r1, r3, #1
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	6011      	str	r1, [r2, #0]
 8002d40:	8aba      	ldrh	r2, [r7, #20]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]
 8002d46:	e00d      	b.n	8002d64 <all_pixels+0x154>
		} else {
			*(*pp)++ = fixed_value;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	1c59      	adds	r1, r3, #1
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	6011      	str	r1, [r2, #0]
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	701a      	strb	r2, [r3, #0]
			*(*pp)++ = fixed_value;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1c59      	adds	r1, r3, #1
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	6011      	str	r1, [r2, #0]
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	701a      	strb	r2, [r3, #0]
	for (uint16_t b = epd->bytes_per_line; b > 0; --b) {
 8002d64:	8afb      	ldrh	r3, [r7, #22]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	82fb      	strh	r3, [r7, #22]
 8002d6a:	8afb      	ldrh	r3, [r7, #22]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f47f af5a 	bne.w	8002c26 <all_pixels+0x16>
		}
	}
}
 8002d72:	bf00      	nop
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	ffffaaaa 	.word	0xffffaaaa

08002d80 <one_line>:

// output one line of scan and data bytes to the display
static void one_line(EPD_HandleTypeDef *epd, uint16_t line, const uint8_t *data, uint8_t fixed_value, const uint8_t *mask, EPD_stage stage) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08c      	sub	sp, #48	; 0x30
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	817b      	strh	r3, [r7, #10]
 8002d90:	4613      	mov	r3, r2
 8002d92:	727b      	strb	r3, [r7, #9]

	// send data
	SPI_send(epd, CU8(0x70, 0x0a), 2);
 8002d94:	4b82      	ldr	r3, [pc, #520]	; (8002fa0 <one_line+0x220>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	833b      	strh	r3, [r7, #24]
 8002d9a:	f107 0318 	add.w	r3, r7, #24
 8002d9e:	2202      	movs	r2, #2
 8002da0:	4619      	mov	r1, r3
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f902 	bl	8002fac <SPI_send>

	// Start Loading the line buffer
	uint8_t *p = epd->line_buffer;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dac:	617b      	str	r3, [r7, #20]

	*p++ = 0x72;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	617a      	str	r2, [r7, #20]
 8002db4:	2272      	movs	r2, #114	; 0x72
 8002db6:	701a      	strb	r2, [r3, #0]

	if (epd->pre_border_byte) {
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d004      	beq.n	8002dcc <one_line+0x4c>
		*p++ = 0x00;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	617a      	str	r2, [r7, #20]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
	}

	if (epd->middle_scan) {
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d03e      	beq.n	8002e54 <one_line+0xd4>
		// data bytes
		odd_pixels(epd, &p, data, fixed_value, mask, stage);
 8002dd6:	7a7a      	ldrb	r2, [r7, #9]
 8002dd8:	f107 0114 	add.w	r1, r7, #20
 8002ddc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f7ff fe58 	bl	8002aa0 <odd_pixels>

		// scan line
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002df6:	e01c      	b.n	8002e32 <one_line+0xb2>
			if (line / 4 == b - 1) {
 8002df8:	897b      	ldrh	r3, [r7, #10]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e02:	3b01      	subs	r3, #1
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d10c      	bne.n	8002e22 <one_line+0xa2>
				*p++ = 0x03 << (2 * (line & 0x03));
 8002e08:	897b      	ldrh	r3, [r7, #10]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	2203      	movs	r2, #3
 8002e12:	fa02 f103 	lsl.w	r1, r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	617a      	str	r2, [r7, #20]
 8002e1c:	b2ca      	uxtb	r2, r1
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e004      	b.n	8002e2c <one_line+0xac>
			} else {
				*p++ = 0x00;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	617a      	str	r2, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002e2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1df      	bne.n	8002df8 <one_line+0x78>
			}
		}

		// data bytes
		even_pixels(epd, &p, data, fixed_value, mask, stage);
 8002e38:	7a7a      	ldrb	r2, [r7, #9]
 8002e3a:	f107 0114 	add.w	r1, r7, #20
 8002e3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff fd77 	bl	8002940 <even_pixels>
 8002e52:	e05b      	b.n	8002f0c <one_line+0x18c>

	} else {
		// even scan line, but as lines on display are numbered from 1, line: 1,3,5,...
		for (uint16_t b = 0; b < epd->bytes_per_scan; ++b) {
 8002e54:	2300      	movs	r3, #0
 8002e56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e58:	e01e      	b.n	8002e98 <one_line+0x118>
			if (0 != (line & 0x01) && line / 8 == b) {
 8002e5a:	897b      	ldrh	r3, [r7, #10]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d011      	beq.n	8002e88 <one_line+0x108>
 8002e64:	897b      	ldrh	r3, [r7, #10]
 8002e66:	08db      	lsrs	r3, r3, #3
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d10b      	bne.n	8002e88 <one_line+0x108>
				*p++ = 0xc0 >> (line & 0x06);
 8002e70:	897b      	ldrh	r3, [r7, #10]
 8002e72:	f003 0306 	and.w	r3, r3, #6
 8002e76:	22c0      	movs	r2, #192	; 0xc0
 8002e78:	fa42 f103 	asr.w	r1, r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	617a      	str	r2, [r7, #20]
 8002e82:	b2ca      	uxtb	r2, r1
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	e004      	b.n	8002e92 <one_line+0x112>
			} else {
				*p++ = 0x00;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	617a      	str	r2, [r7, #20]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = 0; b < epd->bytes_per_scan; ++b) {
 8002e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e94:	3301      	adds	r3, #1
 8002e96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3db      	bcc.n	8002e5a <one_line+0xda>
			}
		}

		// data bytes
		all_pixels(epd, &p, data, fixed_value, mask, stage);
 8002ea2:	7a7a      	ldrb	r2, [r7, #9]
 8002ea4:	f107 0114 	add.w	r1, r7, #20
 8002ea8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f7ff feaa 	bl	8002c10 <all_pixels>

		// odd scan line, but as lines on display are numbered from 1, line: 0,2,4,6,...
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec0:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ec2:	e020      	b.n	8002f06 <one_line+0x186>
			if (0 == (line & 0x01) && line / 8 == b - 1) {
 8002ec4:	897b      	ldrh	r3, [r7, #10]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d113      	bne.n	8002ef6 <one_line+0x176>
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	08db      	lsrs	r3, r3, #3
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d10b      	bne.n	8002ef6 <one_line+0x176>
				*p++ = 0x03 << (line & 0x06);
 8002ede:	897b      	ldrh	r3, [r7, #10]
 8002ee0:	f003 0306 	and.w	r3, r3, #6
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	fa02 f103 	lsl.w	r1, r2, r3
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	617a      	str	r2, [r7, #20]
 8002ef0:	b2ca      	uxtb	r2, r1
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e004      	b.n	8002f00 <one_line+0x180>
			} else {
				*p++ = 0x00;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	617a      	str	r2, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
		for (uint16_t b = epd->bytes_per_scan; b > 0; --b) {
 8002f00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f02:	3b01      	subs	r3, #1
 8002f04:	847b      	strh	r3, [r7, #34]	; 0x22
 8002f06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1db      	bne.n	8002ec4 <one_line+0x144>
			}
		}
	}

	// post data border byte
	switch (epd->border_byte) {
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d003      	beq.n	8002f1e <one_line+0x19e>
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d007      	beq.n	8002f2a <one_line+0x1aa>
 8002f1a:	2b00      	cmp	r3, #0
	case EPD_BORDER_BYTE_NONE:  // no border byte requred
		break;
 8002f1c:	e01b      	b.n	8002f56 <one_line+0x1d6>

	case EPD_BORDER_BYTE_ZERO:  // border byte == 0x00 requred
		*p++ = 0x00;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	617a      	str	r2, [r7, #20]
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
		break;
 8002f28:	e015      	b.n	8002f56 <one_line+0x1d6>

	case EPD_BORDER_BYTE_SET:   // border byte needs to be set
		switch(stage) {
 8002f2a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	db10      	blt.n	8002f54 <one_line+0x1d4>
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	dd02      	ble.n	8002f3c <one_line+0x1bc>
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d006      	beq.n	8002f48 <one_line+0x1c8>
			break;
		case EPD_normal:
			*p++ = 0xaa;
			break;
		}
		break;
 8002f3a:	e00b      	b.n	8002f54 <one_line+0x1d4>
			*p++ = 0x00;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	617a      	str	r2, [r7, #20]
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
			break;
 8002f46:	e005      	b.n	8002f54 <one_line+0x1d4>
			*p++ = 0xaa;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	617a      	str	r2, [r7, #20]
 8002f4e:	22aa      	movs	r2, #170	; 0xaa
 8002f50:	701a      	strb	r2, [r3, #0]
			break;
 8002f52:	bf00      	nop
		break;
 8002f54:	bf00      	nop
	}
	// send the accumulated line buffer
	SPI_send(epd, epd->line_buffer, p - epd->line_buffer);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f81f 	bl	8002fac <SPI_send>

	// output data to panel
	SPI_send(epd, CU8(0x70, 0x02), 2);
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <one_line+0x224>)
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	83bb      	strh	r3, [r7, #28]
 8002f74:	f107 031c 	add.w	r3, r7, #28
 8002f78:	2202      	movs	r2, #2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f815 	bl	8002fac <SPI_send>
	SPI_send(epd, CU8(0x72, 0x07), 2);
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <one_line+0x228>)
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	843b      	strh	r3, [r7, #32]
 8002f88:	f107 0320 	add.w	r3, r7, #32
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f80b 	bl	8002fac <SPI_send>

	//Delay_ms(1);
}
 8002f96:	bf00      	nop
 8002f98:	3728      	adds	r7, #40	; 0x28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	08017cb4 	.word	0x08017cb4
 8002fa4:	08017c68 	.word	0x08017c68
 8002fa8:	08017cb8 	.word	0x08017cb8

08002fac <SPI_send>:


// Low Level SPI Commands
// SPI Send Function.
static void SPI_send(EPD_HandleTypeDef *epd, uint8_t *pData, uint16_t Size) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
	// Write CS Low
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, LOW);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8c1b      	ldrh	r3, [r3, #32]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f002 fdeb 	bl	8005ba0 <HAL_GPIO_WritePin>
	// Send Data
	HAL_SPI_Transmit(epd->spi, pData, Size, 1000);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002fce:	88fa      	ldrh	r2, [r7, #6]
 8002fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	f007 f8a3 	bl	800a120 <HAL_SPI_Transmit>
	// Write CS High
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8c1b      	ldrh	r3, [r3, #32]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f002 fddb 	bl	8005ba0 <HAL_GPIO_WritePin>
	// Delay for 10us
	Delay_us(10);
 8002fea:	200a      	movs	r0, #10
 8002fec:	f7fd fee0 	bl	8000db0 <DWT_Delay>
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <SPI_read>:

// SPI Read Function
static void SPI_read(EPD_HandleTypeDef *epd, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	807b      	strh	r3, [r7, #2]
	// Write CS Low
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, LOW);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8c1b      	ldrh	r3, [r3, #32]
 800300e:	2200      	movs	r2, #0
 8003010:	4619      	mov	r1, r3
 8003012:	f002 fdc5 	bl	8005ba0 <HAL_GPIO_WritePin>
	// Send Data
	HAL_SPI_TransmitReceive(epd->spi, pTxData, pRxData, Size, 1000);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800301a:	887a      	ldrh	r2, [r7, #2]
 800301c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	f007 f9ae 	bl	800a388 <HAL_SPI_TransmitReceive>
	// Write CS High
	HAL_GPIO_WritePin(epd->spi_cs_port, epd->spi_cs_pin, HIGH);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8c1b      	ldrh	r3, [r3, #32]
 8003034:	2201      	movs	r2, #1
 8003036:	4619      	mov	r1, r3
 8003038:	f002 fdb2 	bl	8005ba0 <HAL_GPIO_WritePin>
	// Delay for 10us
	Delay_us(10);
 800303c:	200a      	movs	r0, #10
 800303e:	f7fd feb7 	bl	8000db0 <DWT_Delay>
}
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <Canvas_Init>:

/************************************************************************************************
 * GLOBAL FUNCTIONS
 ***********************************************************************************************/

Canvas_error Canvas_Init(Canvas* canvas, uint16_t width, uint16_t height) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
 8003058:	4613      	mov	r3, r2
 800305a:	803b      	strh	r3, [r7, #0]
	// Allocate memory for the buffer canvas depending on display size
	b_canvas = (uint8_t *)malloc(width * height);
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	883a      	ldrh	r2, [r7, #0]
 8003060:	fb02 f303 	mul.w	r3, r2, r3
 8003064:	4618      	mov	r0, r3
 8003066:	f014 f92d 	bl	80172c4 <malloc>
 800306a:	4603      	mov	r3, r0
 800306c:	461a      	mov	r2, r3
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <Canvas_Init+0x84>)
 8003070:	601a      	str	r2, [r3, #0]
	memset(b_canvas, 0x00, width * height);
 8003072:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <Canvas_Init+0x84>)
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	887b      	ldrh	r3, [r7, #2]
 8003078:	883a      	ldrh	r2, [r7, #0]
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	461a      	mov	r2, r3
 8003080:	2100      	movs	r1, #0
 8003082:	f014 f949 	bl	8017318 <memset>

	if (b_canvas == NULL){
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <Canvas_Init+0x84>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <Canvas_Init+0x46>
		return CANVAS_MEM_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e01a      	b.n	80030c8 <Canvas_Init+0x7c>
	}
	canvas->rotate = ROTATE_0;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	721a      	strb	r2, [r3, #8]
	canvas->image = b_canvas;
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <Canvas_Init+0x84>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	601a      	str	r2, [r3, #0]
	/* 1 byte = 8 pixels, so the width should be the multiple of 8 */
	canvas->width = width % 8 ? width + 8 - (width % 8) : width;
 80030a0:	887b      	ldrh	r3, [r7, #2]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <Canvas_Init+0x6e>
 80030ac:	887b      	ldrh	r3, [r7, #2]
 80030ae:	f023 0307 	bic.w	r3, r3, #7
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3308      	adds	r3, #8
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	e000      	b.n	80030bc <Canvas_Init+0x70>
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	8093      	strh	r3, [r2, #4]
	canvas->height = height;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	883a      	ldrh	r2, [r7, #0]
 80030c4:	80da      	strh	r2, [r3, #6]

	return CANVAS_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000f8c 	.word	0x20000f8c

080030d4 <canvas_DrawFilters>:

// Responsible for taking the software filter set model and updating the EPD
void canvas_DrawFilters(Canvas* canvas, EPD_HandleTypeDef* epd, filterSection_t *currentFilters, uint8_t invPosition) {
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	f6ad 1da4 	subw	sp, sp, #2468	; 0x9a4
 80030da:	af02      	add	r7, sp, #8
 80030dc:	f107 040c 	add.w	r4, r7, #12
 80030e0:	6020      	str	r0, [r4, #0]
 80030e2:	f107 0008 	add.w	r0, r7, #8
 80030e6:	6001      	str	r1, [r0, #0]
 80030e8:	1d39      	adds	r1, r7, #4
 80030ea:	600a      	str	r2, [r1, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	1cfb      	adds	r3, r7, #3
 80030f0:	701a      	strb	r2, [r3, #0]
	// If it has been refreshed 5+ times, perform a full refresh
// invPosition inverts the color/filter name on a specific position. 0 = no invert, >0 = position is inverted

// TODO - Find out how many filter slots are installed and draw the canvas correctly

	uint8_t tmpName[10] = {0};
 80030f2:	f607 1384 	addw	r3, r7, #2436	; 0x984
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	811a      	strh	r2, [r3, #8]

	uint8_t prevImage[2400];
	static uint8_t refreshCount = 0;	// Keep track of how many times the screen has been updated

	// Store the current image so that a partial update can be compared
	memcpy(prevImage, canvas->image, 2400);
 80030fe:	f107 030c 	add.w	r3, r7, #12
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800310a:	4610      	mov	r0, r2
 800310c:	4619      	mov	r1, r3
 800310e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8003112:	461a      	mov	r2, r3
 8003114:	f014 f8f5 	bl	8017302 <memcpy>

	//Start with a clear BG
	canvas_setBGImage(canvas, image_background);
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	497f      	ldr	r1, [pc, #508]	; (800331c <canvas_DrawFilters+0x248>)
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	f000 fba7 	bl	8003872 <canvas_setBGImage>
	canvas_DrawStringAt(canvas, 10, 3, "FILTERS", &Font16, 1);
 8003124:	f107 000c 	add.w	r0, r7, #12
 8003128:	2301      	movs	r3, #1
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	4b7c      	ldr	r3, [pc, #496]	; (8003320 <canvas_DrawFilters+0x24c>)
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	4b7c      	ldr	r3, [pc, #496]	; (8003324 <canvas_DrawFilters+0x250>)
 8003132:	2203      	movs	r2, #3
 8003134:	210a      	movs	r1, #10
 8003136:	6800      	ldr	r0, [r0, #0]
 8003138:	f000 fb55 	bl	80037e6 <canvas_DrawStringAt>

	// If a position is inverted, draw a filled rectangle in that position
	if (invPosition > 0) {
 800313c:	1cfb      	adds	r3, r7, #3
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02e      	beq.n	80031a2 <canvas_DrawFilters+0xce>
		switch (invPosition) {
 8003144:	1cfb      	adds	r3, r7, #3
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d010      	beq.n	800316e <canvas_DrawFilters+0x9a>
 800314c:	2b03      	cmp	r3, #3
 800314e:	d01b      	beq.n	8003188 <canvas_DrawFilters+0xb4>
 8003150:	2b01      	cmp	r3, #1
 8003152:	d126      	bne.n	80031a2 <canvas_DrawFilters+0xce>
			case 1:
				canvas_DrawFilledRectangle(canvas, 2, 19, 93, 75, false);
 8003154:	f107 000c 	add.w	r0, r7, #12
 8003158:	2300      	movs	r3, #0
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	234b      	movs	r3, #75	; 0x4b
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	235d      	movs	r3, #93	; 0x5d
 8003162:	2213      	movs	r2, #19
 8003164:	2102      	movs	r1, #2
 8003166:	6800      	ldr	r0, [r0, #0]
 8003168:	f000 fbb1 	bl	80038ce <canvas_DrawFilledRectangle>
				break;
 800316c:	e019      	b.n	80031a2 <canvas_DrawFilters+0xce>
			case 2:
				canvas_DrawFilledRectangle(canvas, 2, 82, 93, 137, false);
 800316e:	f107 000c 	add.w	r0, r7, #12
 8003172:	2300      	movs	r3, #0
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2389      	movs	r3, #137	; 0x89
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	235d      	movs	r3, #93	; 0x5d
 800317c:	2252      	movs	r2, #82	; 0x52
 800317e:	2102      	movs	r1, #2
 8003180:	6800      	ldr	r0, [r0, #0]
 8003182:	f000 fba4 	bl	80038ce <canvas_DrawFilledRectangle>
				break;
 8003186:	e00c      	b.n	80031a2 <canvas_DrawFilters+0xce>
			case 3:
				canvas_DrawFilledRectangle(canvas, 2, 144, 93, 198, false);
 8003188:	f107 000c 	add.w	r0, r7, #12
 800318c:	2300      	movs	r3, #0
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	23c6      	movs	r3, #198	; 0xc6
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	235d      	movs	r3, #93	; 0x5d
 8003196:	2290      	movs	r2, #144	; 0x90
 8003198:	2102      	movs	r1, #2
 800319a:	6800      	ldr	r0, [r0, #0]
 800319c:	f000 fb97 	bl	80038ce <canvas_DrawFilledRectangle>
				break;
 80031a0:	bf00      	nop
		}
	}

	// Loop through all filter stages
	for (uint8_t filterStage = 1; filterStage <= FILTER_SECTION_SIZE; filterStage++){
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
 80031a8:	e148      	b.n	800343c <canvas_DrawFilters+0x368>
		// Try to find a filter in the current position
		for (uint8_t filter = 0; filter < FILTER_SECTION_SIZE; filter++){
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3995 	strb.w	r3, [r7, #2453]	; 0x995
 80031b0:	e13a      	b.n	8003428 <canvas_DrawFilters+0x354>
			if (currentFilters->filter[filter].position == filterStage){
 80031b2:	f897 2995 	ldrb.w	r2, [r7, #2453]	; 0x995
 80031b6:	1d3b      	adds	r3, r7, #4
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	440b      	add	r3, r1
 80031c6:	3313      	adds	r3, #19
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 80031ce:	429a      	cmp	r2, r3
 80031d0:	f040 8125 	bne.w	800341e <canvas_DrawFilters+0x34a>
				// Found a filter loaded in the current position
				// Store the name into tmpName
				memcpy(tmpName, currentFilters->filter[filter].filterName, 10);
 80031d4:	f897 2995 	ldrb.w	r2, [r7, #2453]	; 0x995
 80031d8:	1d39      	adds	r1, r7, #4
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	680a      	ldr	r2, [r1, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	f607 1384 	addw	r3, r7, #2436	; 0x984
 80031ee:	6810      	ldr	r0, [r2, #0]
 80031f0:	6851      	ldr	r1, [r2, #4]
 80031f2:	c303      	stmia	r3!, {r0, r1}
 80031f4:	8912      	ldrh	r2, [r2, #8]
 80031f6:	801a      	strh	r2, [r3, #0]

				// "0x00" is a signal that there isn't any more data
				for (nameLen = 0; nameLen < 10; nameLen++){
 80031f8:	2300      	movs	r3, #0
 80031fa:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
 80031fe:	e00d      	b.n	800321c <canvas_DrawFilters+0x148>
					if (tmpName[nameLen] == 0x00){
 8003200:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8003204:	f607 1298 	addw	r2, r7, #2456	; 0x998
 8003208:	4413      	add	r3, r2
 800320a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <canvas_DrawFilters+0x152>
				for (nameLen = 0; nameLen < 10; nameLen++){
 8003212:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8003216:	3301      	adds	r3, #1
 8003218:	f887 3997 	strb.w	r3, [r7, #2455]	; 0x997
 800321c:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 8003220:	2b09      	cmp	r3, #9
 8003222:	d9ed      	bls.n	8003200 <canvas_DrawFilters+0x12c>
 8003224:	e000      	b.n	8003228 <canvas_DrawFilters+0x154>
						break;
 8003226:	bf00      	nop
					}
				}

				// At this point, nameIndex has the length of the Name
				if (nameLen <= 5){
 8003228:	f897 3997 	ldrb.w	r3, [r7, #2455]	; 0x997
 800322c:	2b05      	cmp	r3, #5
 800322e:	d85f      	bhi.n	80032f0 <canvas_DrawFilters+0x21c>
					// Only 1 row needed
					// Find the starting Y pixel
					uint8_t sectionHeight;
					sectionHeight = epd->dots_per_line - 15;			// Account for the header
 8003230:	f107 0308 	add.w	r3, r7, #8
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3b0f      	subs	r3, #15
 800323c:	f887 3991 	strb.w	r3, [r7, #2449]	; 0x991
					sectionHeight /= FILTER_SECTION_SIZE;					// Account for the number of filters
 8003240:	f897 3991 	ldrb.w	r3, [r7, #2449]	; 0x991
 8003244:	4a38      	ldr	r2, [pc, #224]	; (8003328 <canvas_DrawFilters+0x254>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	f887 3991 	strb.w	r3, [r7, #2449]	; 0x991
					startPixelY = sectionHeight * (filterStage - 1);  	// Get the correct section
 8003250:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 8003254:	3b01      	subs	r3, #1
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f897 2991 	ldrb.w	r2, [r7, #2449]	; 0x991
 800325c:	fb12 f303 	smulbb	r3, r2, r3
 8003260:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += sectionHeight / 2;					// Get to the center of the section
 8003264:	f897 3991 	ldrb.w	r3, [r7, #2449]	; 0x991
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	b2da      	uxtb	r2, r3
 800326c:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003270:	4413      	add	r3, r2
 8003272:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY -= 12;									// Account for the text height (assuming font24)
 8003276:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800327a:	3b0c      	subs	r3, #12
 800327c:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += 15;									// Re-incorporate the header length
 8003280:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 8003284:	330f      	adds	r3, #15
 8003286:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992

					// Find the staring X pixel
					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
 800328a:	f107 0308 	add.w	r3, r7, #8
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	b29b      	uxth	r3, r3
 8003296:	f887 3990 	strb.w	r3, [r7, #2448]	; 0x990
					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line
 800329a:	f897 2997 	ldrb.w	r2, [r7, #2455]	; 0x997
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	4413      	add	r3, r2
 80032a4:	0fda      	lsrs	r2, r3, #31
 80032a6:	4413      	add	r3, r2
 80032a8:	105b      	asrs	r3, r3, #1
 80032aa:	425b      	negs	r3, r3
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	f897 3990 	ldrb.w	r3, [r7, #2448]	; 0x990
 80032b2:	4413      	add	r3, r2
 80032b4:	f887 3990 	strb.w	r3, [r7, #2448]	; 0x990

					// Draw Text
					canvas_DrawStringAt(canvas, startPixelX, startPixelY, tmpName, &Font24, filterStage == invPosition ? 1 : 0);
 80032b8:	f897 3990 	ldrb.w	r3, [r7, #2448]	; 0x990
 80032bc:	b299      	uxth	r1, r3
 80032be:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80032c2:	b29c      	uxth	r4, r3
 80032c4:	1cfb      	adds	r3, r7, #3
 80032c6:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f607 1284 	addw	r2, r7, #2436	; 0x984
 80032da:	f107 000c 	add.w	r0, r7, #12
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <canvas_DrawFilters+0x258>)
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	4622      	mov	r2, r4
 80032e8:	6800      	ldr	r0, [r0, #0]
 80032ea:	f000 fa7c 	bl	80037e6 <canvas_DrawStringAt>
 80032ee:	e096      	b.n	800341e <canvas_DrawFilters+0x34a>

				} else {
					// Need to split into 2 rows
					uint8_t topLine[6] = {0};							// Top Line Holder
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	809a      	strh	r2, [r3, #4]
					uint8_t botLine[6] = {0};							// Bottom Line Holder
 80032fa:	f107 0314 	add.w	r3, r7, #20
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	809a      	strh	r2, [r3, #4]
					memcpy(topLine, tmpName, 5);
 8003304:	f607 1184 	addw	r1, r7, #2436	; 0x984
 8003308:	f107 031c 	add.w	r3, r7, #28
 800330c:	2205      	movs	r2, #5
 800330e:	4618      	mov	r0, r3
 8003310:	f013 fff7 	bl	8017302 <memcpy>

					for (uint8_t i = 5; i < 10; i++){
 8003314:	2305      	movs	r3, #5
 8003316:	f887 3994 	strb.w	r3, [r7, #2452]	; 0x994
 800331a:	e01b      	b.n	8003354 <canvas_DrawFilters+0x280>
 800331c:	080186c4 	.word	0x080186c4
 8003320:	20000040 	.word	0x20000040
 8003324:	08017cbc 	.word	0x08017cbc
 8003328:	aaaaaaab 	.word	0xaaaaaaab
 800332c:	20000048 	.word	0x20000048
						botLine[i - 5] = tmpName[i];
 8003330:	f897 2994 	ldrb.w	r2, [r7, #2452]	; 0x994
 8003334:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 8003338:	3b05      	subs	r3, #5
 800333a:	f607 1198 	addw	r1, r7, #2456	; 0x998
 800333e:	440a      	add	r2, r1
 8003340:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8003344:	f107 0214 	add.w	r2, r7, #20
 8003348:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 5; i < 10; i++){
 800334a:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 800334e:	3301      	adds	r3, #1
 8003350:	f887 3994 	strb.w	r3, [r7, #2452]	; 0x994
 8003354:	f897 3994 	ldrb.w	r3, [r7, #2452]	; 0x994
 8003358:	2b09      	cmp	r3, #9
 800335a:	d9e9      	bls.n	8003330 <canvas_DrawFilters+0x25c>
					}

					// Find the starting Y pixel
					uint8_t sectionHeight;
					sectionHeight = epd->dots_per_line - 15;			// Account for the header
 800335c:	f107 0308 	add.w	r3, r7, #8
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003364:	b2db      	uxtb	r3, r3
 8003366:	3b0f      	subs	r3, #15
 8003368:	f887 3993 	strb.w	r3, [r7, #2451]	; 0x993
					sectionHeight /= FILTER_SECTION_SIZE;					// Account for the number of filters
 800336c:	f897 3993 	ldrb.w	r3, [r7, #2451]	; 0x993
 8003370:	4a48      	ldr	r2, [pc, #288]	; (8003494 <canvas_DrawFilters+0x3c0>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	f887 3993 	strb.w	r3, [r7, #2451]	; 0x993
					startPixelY = sectionHeight * (filterStage - 1);  	// Get the correct section
 800337c:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 8003380:	3b01      	subs	r3, #1
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f897 2993 	ldrb.w	r2, [r7, #2451]	; 0x993
 8003388:	fb12 f303 	smulbb	r3, r2, r3
 800338c:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += sectionHeight / 2;					// Get to the center of the section
 8003390:	f897 3993 	ldrb.w	r3, [r7, #2451]	; 0x993
 8003394:	085b      	lsrs	r3, r3, #1
 8003396:	b2da      	uxtb	r2, r3
 8003398:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 800339c:	4413      	add	r3, r2
 800339e:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY -= 24;									// Account for the text height (assuming font24)
 80033a2:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80033a6:	3b18      	subs	r3, #24
 80033a8:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
					startPixelY += 15;									// Re-incorporate the header length
 80033ac:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80033b0:	330f      	adds	r3, #15
 80033b2:	f887 3992 	strb.w	r3, [r7, #2450]	; 0x992
//					// Find the staring X pixel
//					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
//					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line

					// Draw text
					canvas_DrawStringAt(canvas, 6, startPixelY, topLine, &Font24, filterStage == invPosition ? 1 : 0);
 80033b6:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80033ba:	b299      	uxth	r1, r3
 80033bc:	1cfb      	adds	r3, r7, #3
 80033be:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f107 021c 	add.w	r2, r7, #28
 80033d2:	f107 000c 	add.w	r0, r7, #12
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <canvas_DrawFilters+0x3c4>)
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	460a      	mov	r2, r1
 80033e0:	2106      	movs	r1, #6
 80033e2:	6800      	ldr	r0, [r0, #0]
 80033e4:	f000 f9ff 	bl	80037e6 <canvas_DrawStringAt>

//					// Find the staring X pixel
//					startPixelX = epd->lines_per_display / 2;	// Find the center of the line
//					startPixelX -= (nameLen * 17) / 2;			// difference of the center of text and center of line

					canvas_DrawStringAt(canvas, 6, startPixelY + 24, botLine, &Font24, filterStage == invPosition ? 1 : 0);
 80033e8:	f897 3992 	ldrb.w	r3, [r7, #2450]	; 0x992
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3318      	adds	r3, #24
 80033f0:	b299      	uxth	r1, r3
 80033f2:	1cfb      	adds	r3, r7, #3
 80033f4:	f897 2996 	ldrb.w	r2, [r7, #2454]	; 0x996
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	bf0c      	ite	eq
 80033fe:	2301      	moveq	r3, #1
 8003400:	2300      	movne	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f107 0214 	add.w	r2, r7, #20
 8003408:	f107 000c 	add.w	r0, r7, #12
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	4b22      	ldr	r3, [pc, #136]	; (8003498 <canvas_DrawFilters+0x3c4>)
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	4613      	mov	r3, r2
 8003414:	460a      	mov	r2, r1
 8003416:	2106      	movs	r1, #6
 8003418:	6800      	ldr	r0, [r0, #0]
 800341a:	f000 f9e4 	bl	80037e6 <canvas_DrawStringAt>
		for (uint8_t filter = 0; filter < FILTER_SECTION_SIZE; filter++){
 800341e:	f897 3995 	ldrb.w	r3, [r7, #2453]	; 0x995
 8003422:	3301      	adds	r3, #1
 8003424:	f887 3995 	strb.w	r3, [r7, #2453]	; 0x995
 8003428:	f897 3995 	ldrb.w	r3, [r7, #2453]	; 0x995
 800342c:	2b02      	cmp	r3, #2
 800342e:	f67f aec0 	bls.w	80031b2 <canvas_DrawFilters+0xde>
	for (uint8_t filterStage = 1; filterStage <= FILTER_SECTION_SIZE; filterStage++){
 8003432:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 8003436:	3301      	adds	r3, #1
 8003438:	f887 3996 	strb.w	r3, [r7, #2454]	; 0x996
 800343c:	f897 3996 	ldrb.w	r3, [r7, #2454]	; 0x996
 8003440:	2b03      	cmp	r3, #3
 8003442:	f67f aeb2 	bls.w	80031aa <canvas_DrawFilters+0xd6>
			}
		}
	}

	// Print the rendered image
	if (refreshCount < CYCLES_UNTIL_REFRESH){
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <canvas_DrawFilters+0x3c8>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b05      	cmp	r3, #5
 800344c:	d810      	bhi.n	8003470 <canvas_DrawFilters+0x39c>
		canvas_UpdateEPD(canvas, epd, prevImage);
 800344e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003452:	f107 0108 	add.w	r1, r7, #8
 8003456:	f107 030c 	add.w	r3, r7, #12
 800345a:	6809      	ldr	r1, [r1, #0]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	f000 fa1f 	bl	80038a0 <canvas_UpdateEPD>
		refreshCount++;
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <canvas_DrawFilters+0x3c8>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	3301      	adds	r3, #1
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4b0c      	ldr	r3, [pc, #48]	; (800349c <canvas_DrawFilters+0x3c8>)
 800346c:	701a      	strb	r2, [r3, #0]
	} else {
		EPD_set_enable_temperature();
		canvas_PrintEPD(canvas, epd);
		refreshCount = 0;
	}
}
 800346e:	e00c      	b.n	800348a <canvas_DrawFilters+0x3b6>
		EPD_set_enable_temperature();
 8003470:	f7ff f8e2 	bl	8002638 <EPD_set_enable_temperature>
		canvas_PrintEPD(canvas, epd);
 8003474:	f107 0208 	add.w	r2, r7, #8
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	6811      	ldr	r1, [r2, #0]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	f000 f9e2 	bl	8003848 <canvas_PrintEPD>
		refreshCount = 0;
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <canvas_DrawFilters+0x3c8>)
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
}
 800348a:	bf00      	nop
 800348c:	f607 179c 	addw	r7, r7, #2460	; 0x99c
 8003490:	46bd      	mov	sp, r7
 8003492:	bd90      	pop	{r4, r7, pc}
 8003494:	aaaaaaab 	.word	0xaaaaaaab
 8003498:	20000048 	.word	0x20000048
 800349c:	20000263 	.word	0x20000263

080034a0 <canvas_SetRotate>:

void canvas_SetRotate(Canvas* canvas, uint8_t rotate) {
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
	canvas->rotate = rotate;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	721a      	strb	r2, [r3, #8]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <canvas_DrawAbsolutePixel>:

/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void canvas_DrawAbsolutePixel(Canvas* canvas, uint16_t x, uint16_t y, int colored) {
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	817b      	strh	r3, [r7, #10]
 80034ce:	4613      	mov	r3, r2
 80034d0:	813b      	strh	r3, [r7, #8]

	// swap x order. 7 to 0, 6 to 1, 5 to 2, etc.
	// 1. Get bit position
	uint8_t bit_pos = x % 8;
 80034d2:	897b      	ldrh	r3, [r7, #10]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	75fb      	strb	r3, [r7, #23]

	switch (bit_pos){
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b07      	cmp	r3, #7
 80034e0:	d82a      	bhi.n	8003538 <canvas_DrawAbsolutePixel+0x78>
 80034e2:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <canvas_DrawAbsolutePixel+0x28>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	08003509 	.word	0x08003509
 80034ec:	0800350f 	.word	0x0800350f
 80034f0:	08003515 	.word	0x08003515
 80034f4:	0800351b 	.word	0x0800351b
 80034f8:	08003521 	.word	0x08003521
 80034fc:	08003527 	.word	0x08003527
 8003500:	0800352d 	.word	0x0800352d
 8003504:	08003533 	.word	0x08003533
		case 0:
			bit_pos = 7;
 8003508:	2307      	movs	r3, #7
 800350a:	75fb      	strb	r3, [r7, #23]
			break;
 800350c:	e014      	b.n	8003538 <canvas_DrawAbsolutePixel+0x78>
		case 1:
			bit_pos = 6;
 800350e:	2306      	movs	r3, #6
 8003510:	75fb      	strb	r3, [r7, #23]
			break;
 8003512:	e011      	b.n	8003538 <canvas_DrawAbsolutePixel+0x78>
		case 2:
			bit_pos = 5;
 8003514:	2305      	movs	r3, #5
 8003516:	75fb      	strb	r3, [r7, #23]
			break;
 8003518:	e00e      	b.n	8003538 <canvas_DrawAbsolutePixel+0x78>
		case 3:
			bit_pos = 4;
 800351a:	2304      	movs	r3, #4
 800351c:	75fb      	strb	r3, [r7, #23]
			break;
 800351e:	e00b      	b.n	8003538 <canvas_DrawAbsolutePixel+0x78>
		case 4:
			bit_pos = 3;
 8003520:	2303      	movs	r3, #3
 8003522:	75fb      	strb	r3, [r7, #23]
			break;
 8003524:	e008      	b.n	8003538 <canvas_DrawAbsolutePixel+0x78>
		case 5:
			bit_pos = 2;
 8003526:	2302      	movs	r3, #2
 8003528:	75fb      	strb	r3, [r7, #23]
			break;
 800352a:	e005      	b.n	8003538 <canvas_DrawAbsolutePixel+0x78>
		case 6:
			bit_pos = 1;
 800352c:	2301      	movs	r3, #1
 800352e:	75fb      	strb	r3, [r7, #23]
			break;
 8003530:	e002      	b.n	8003538 <canvas_DrawAbsolutePixel+0x78>
		case 7:
			bit_pos = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	75fb      	strb	r3, [r7, #23]
			break;
 8003536:	bf00      	nop
	}

    if (x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	889b      	ldrh	r3, [r3, #4]
 800353c:	897a      	ldrh	r2, [r7, #10]
 800353e:	429a      	cmp	r2, r3
 8003540:	d249      	bcs.n	80035d6 <canvas_DrawAbsolutePixel+0x116>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	88db      	ldrh	r3, [r3, #6]
 8003546:	893a      	ldrh	r2, [r7, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	d244      	bcs.n	80035d6 <canvas_DrawAbsolutePixel+0x116>
        	canvas->image[(x + y * canvas->width) / 8] |= 0x80 >> (bit_pos);
        } else {
        	canvas->image[(x + y * canvas->width) / 8] &= ~(0x80 >> (bit_pos));
        }
    } else {
        if (colored) {
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d021      	beq.n	8003596 <canvas_DrawAbsolutePixel+0xd6>
        	canvas->image[(x + y * canvas->width) / 8] &= ~(0x80 >> (bit_pos));
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	8979      	ldrh	r1, [r7, #10]
 8003558:	893b      	ldrh	r3, [r7, #8]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	8880      	ldrh	r0, [r0, #4]
 800355e:	fb00 f303 	mul.w	r3, r0, r3
 8003562:	440b      	add	r3, r1
 8003564:	2b00      	cmp	r3, #0
 8003566:	da00      	bge.n	800356a <canvas_DrawAbsolutePixel+0xaa>
 8003568:	3307      	adds	r3, #7
 800356a:	10db      	asrs	r3, r3, #3
 800356c:	4618      	mov	r0, r3
 800356e:	4603      	mov	r3, r0
 8003570:	4413      	add	r3, r2
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	b25a      	sxtb	r2, r3
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	fa41 f303 	asr.w	r3, r1, r3
 800357e:	b25b      	sxtb	r3, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	b25b      	sxtb	r3, r3
 8003584:	4013      	ands	r3, r2
 8003586:	b25a      	sxtb	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4601      	mov	r1, r0
 800358e:	440b      	add	r3, r1
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e020      	b.n	80035d8 <canvas_DrawAbsolutePixel+0x118>
        } else {
        	canvas->image[(x + y * canvas->width) / 8] |= 0x80 >> (bit_pos);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	8979      	ldrh	r1, [r7, #10]
 800359c:	893b      	ldrh	r3, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	8880      	ldrh	r0, [r0, #4]
 80035a2:	fb00 f303 	mul.w	r3, r0, r3
 80035a6:	440b      	add	r3, r1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da00      	bge.n	80035ae <canvas_DrawAbsolutePixel+0xee>
 80035ac:	3307      	adds	r3, #7
 80035ae:	10db      	asrs	r3, r3, #3
 80035b0:	4618      	mov	r0, r3
 80035b2:	4603      	mov	r3, r0
 80035b4:	4413      	add	r3, r2
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	b25a      	sxtb	r2, r3
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
 80035bc:	2180      	movs	r1, #128	; 0x80
 80035be:	fa41 f303 	asr.w	r3, r1, r3
 80035c2:	b25b      	sxtb	r3, r3
 80035c4:	4313      	orrs	r3, r2
 80035c6:	b25a      	sxtb	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4601      	mov	r1, r0
 80035ce:	440b      	add	r3, r1
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	e000      	b.n	80035d8 <canvas_DrawAbsolutePixel+0x118>
        return;
 80035d6:	bf00      	nop
        }
    }
}
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop

080035e4 <canvas_DrawPixel>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void canvas_DrawPixel(Canvas* canvas, uint16_t x, uint16_t y, int colored) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	607b      	str	r3, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	817b      	strh	r3, [r7, #10]
 80035f2:	4613      	mov	r3, r2
 80035f4:	813b      	strh	r3, [r7, #8]
    int point_temp;
    if (canvas->rotate == ROTATE_0) {
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	7a1b      	ldrb	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d110      	bne.n	8003620 <canvas_DrawPixel+0x3c>
        if(x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	889b      	ldrh	r3, [r3, #4]
 8003602:	897a      	ldrh	r2, [r7, #10]
 8003604:	429a      	cmp	r2, r3
 8003606:	d267      	bcs.n	80036d8 <canvas_DrawPixel+0xf4>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	88db      	ldrh	r3, [r3, #6]
 800360c:	893a      	ldrh	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d262      	bcs.n	80036d8 <canvas_DrawPixel+0xf4>
            return;
        }
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 8003612:	893a      	ldrh	r2, [r7, #8]
 8003614:	8979      	ldrh	r1, [r7, #10]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff ff51 	bl	80034c0 <canvas_DrawAbsolutePixel>
 800361e:	e062      	b.n	80036e6 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_90) {
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	7a1b      	ldrb	r3, [r3, #8]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d119      	bne.n	800365c <canvas_DrawPixel+0x78>
        if(x < 0 || x >= canvas->height || y < 0 || y >= canvas->width) {
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	88db      	ldrh	r3, [r3, #6]
 800362c:	897a      	ldrh	r2, [r7, #10]
 800362e:	429a      	cmp	r2, r3
 8003630:	d254      	bcs.n	80036dc <canvas_DrawPixel+0xf8>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	889b      	ldrh	r3, [r3, #4]
 8003636:	893a      	ldrh	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	d24f      	bcs.n	80036dc <canvas_DrawPixel+0xf8>
          return;
        }
        point_temp = x;
 800363c:	897b      	ldrh	r3, [r7, #10]
 800363e:	617b      	str	r3, [r7, #20]
        x = canvas->width - y;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	889a      	ldrh	r2, [r3, #4]
 8003644:	893b      	ldrh	r3, [r7, #8]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	817b      	strh	r3, [r7, #10]
        y = point_temp;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 800364e:	893a      	ldrh	r2, [r7, #8]
 8003650:	8979      	ldrh	r1, [r7, #10]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f7ff ff33 	bl	80034c0 <canvas_DrawAbsolutePixel>
 800365a:	e044      	b.n	80036e6 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_180) {
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	7a1b      	ldrb	r3, [r3, #8]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d11a      	bne.n	800369a <canvas_DrawPixel+0xb6>
        if(x < 0 || x >= canvas->width || y < 0 || y >= canvas->height) {
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	889b      	ldrh	r3, [r3, #4]
 8003668:	897a      	ldrh	r2, [r7, #10]
 800366a:	429a      	cmp	r2, r3
 800366c:	d238      	bcs.n	80036e0 <canvas_DrawPixel+0xfc>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	88db      	ldrh	r3, [r3, #6]
 8003672:	893a      	ldrh	r2, [r7, #8]
 8003674:	429a      	cmp	r2, r3
 8003676:	d233      	bcs.n	80036e0 <canvas_DrawPixel+0xfc>
          return;
        }
        x = canvas->width - x;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	889a      	ldrh	r2, [r3, #4]
 800367c:	897b      	ldrh	r3, [r7, #10]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	817b      	strh	r3, [r7, #10]
        y = canvas->height - y;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	88da      	ldrh	r2, [r3, #6]
 8003686:	893b      	ldrh	r3, [r7, #8]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 800368c:	893a      	ldrh	r2, [r7, #8]
 800368e:	8979      	ldrh	r1, [r7, #10]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7ff ff14 	bl	80034c0 <canvas_DrawAbsolutePixel>
 8003698:	e025      	b.n	80036e6 <canvas_DrawPixel+0x102>
    } else if (canvas->rotate == ROTATE_270) {
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	7a1b      	ldrb	r3, [r3, #8]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d121      	bne.n	80036e6 <canvas_DrawPixel+0x102>
        if(x < 0 || x >= canvas->height || y < 0 || y >= canvas->width) {
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	88db      	ldrh	r3, [r3, #6]
 80036a6:	897a      	ldrh	r2, [r7, #10]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d21b      	bcs.n	80036e4 <canvas_DrawPixel+0x100>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	889b      	ldrh	r3, [r3, #4]
 80036b0:	893a      	ldrh	r2, [r7, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d216      	bcs.n	80036e4 <canvas_DrawPixel+0x100>
          return;
        }
        point_temp = x;
 80036b6:	897b      	ldrh	r3, [r7, #10]
 80036b8:	617b      	str	r3, [r7, #20]
        x = y;
 80036ba:	893b      	ldrh	r3, [r7, #8]
 80036bc:	817b      	strh	r3, [r7, #10]
        y = canvas->height - point_temp;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	88da      	ldrh	r2, [r3, #6]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	813b      	strh	r3, [r7, #8]
        canvas_DrawAbsolutePixel(canvas, x, y, colored);
 80036ca:	893a      	ldrh	r2, [r7, #8]
 80036cc:	8979      	ldrh	r1, [r7, #10]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff fef5 	bl	80034c0 <canvas_DrawAbsolutePixel>
 80036d6:	e006      	b.n	80036e6 <canvas_DrawPixel+0x102>
            return;
 80036d8:	bf00      	nop
 80036da:	e004      	b.n	80036e6 <canvas_DrawPixel+0x102>
          return;
 80036dc:	bf00      	nop
 80036de:	e002      	b.n	80036e6 <canvas_DrawPixel+0x102>
          return;
 80036e0:	bf00      	nop
 80036e2:	e000      	b.n	80036e6 <canvas_DrawPixel+0x102>
          return;
 80036e4:	bf00      	nop
    }
}
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <canvas_DrawCharAt>:

/**
 *  @brief: this draws a character on the frame buffer but not refresh
 */
void canvas_DrawCharAt(Canvas* canvas, uint16_t x, uint16_t y, char ascii_char, sFONT* font, int colored) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	817b      	strh	r3, [r7, #10]
 80036fe:	460b      	mov	r3, r1
 8003700:	813b      	strh	r3, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	71fb      	strb	r3, [r7, #7]
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	3b20      	subs	r3, #32
 800370a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370c:	88d2      	ldrh	r2, [r2, #6]
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003714:	8892      	ldrh	r2, [r2, #4]
 8003716:	08d2      	lsrs	r2, r2, #3
 8003718:	b292      	uxth	r2, r2
 800371a:	4611      	mov	r1, r2
 800371c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800371e:	8892      	ldrh	r2, [r2, #4]
 8003720:	f002 0207 	and.w	r2, r2, #7
 8003724:	b292      	uxth	r2, r2
 8003726:	2a00      	cmp	r2, #0
 8003728:	bf14      	ite	ne
 800372a:	2201      	movne	r2, #1
 800372c:	2200      	moveq	r2, #0
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	440a      	add	r2, r1
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	613b      	str	r3, [r7, #16]
    const unsigned char* ptr = &font->table[char_offset];
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

    for (j = 0; j < font->Height; j++) {
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e044      	b.n	80037d2 <canvas_DrawCharAt+0xe6>
        for (i = 0; i < font->Width; i++) {
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	e02e      	b.n	80037ac <canvas_DrawCharAt+0xc0>
            if (*ptr & (0x80 >> (i % 8))) {
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	4619      	mov	r1, r3
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	425a      	negs	r2, r3
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	f002 0207 	and.w	r2, r2, #7
 8003760:	bf58      	it	pl
 8003762:	4253      	negpl	r3, r2
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	fa42 f303 	asr.w	r3, r2, r3
 800376a:	400b      	ands	r3, r1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00d      	beq.n	800378c <canvas_DrawCharAt+0xa0>
                canvas_DrawPixel(canvas, x + i, y + j, colored);
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	b29a      	uxth	r2, r3
 8003774:	897b      	ldrh	r3, [r7, #10]
 8003776:	4413      	add	r3, r2
 8003778:	b299      	uxth	r1, r3
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	b29a      	uxth	r2, r3
 800377e:	893b      	ldrh	r3, [r7, #8]
 8003780:	4413      	add	r3, r2
 8003782:	b29a      	uxth	r2, r3
 8003784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff ff2c 	bl	80035e4 <canvas_DrawPixel>
            }
            if (i % 8 == 7) {
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	425a      	negs	r2, r3
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	f002 0207 	and.w	r2, r2, #7
 8003798:	bf58      	it	pl
 800379a:	4253      	negpl	r3, r2
 800379c:	2b07      	cmp	r3, #7
 800379e:	d102      	bne.n	80037a6 <canvas_DrawCharAt+0xba>
                ptr++;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	3301      	adds	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
        for (i = 0; i < font->Width; i++) {
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3301      	adds	r3, #1
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	889b      	ldrh	r3, [r3, #4]
 80037b0:	461a      	mov	r2, r3
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4293      	cmp	r3, r2
 80037b6:	dbca      	blt.n	800374e <canvas_DrawCharAt+0x62>
            }
        }
        if (font->Width % 8 != 0) {
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	889b      	ldrh	r3, [r3, #4]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <canvas_DrawCharAt+0xe0>
            ptr++;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	3301      	adds	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	3301      	adds	r3, #1
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	88db      	ldrh	r3, [r3, #6]
 80037d6:	461a      	mov	r2, r3
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	4293      	cmp	r3, r2
 80037dc:	dbb4      	blt.n	8003748 <canvas_DrawCharAt+0x5c>
        }
    }
}
 80037de:	bf00      	nop
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <canvas_DrawStringAt>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void canvas_DrawStringAt(Canvas* canvas, uint16_t x, uint16_t y, const char* text, sFONT* font, int colored) {
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b08a      	sub	sp, #40	; 0x28
 80037ea:	af02      	add	r7, sp, #8
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	817b      	strh	r3, [r7, #10]
 80037f4:	4613      	mov	r3, r2
 80037f6:	813b      	strh	r3, [r7, #8]
    const char* p_text = text;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	61fb      	str	r3, [r7, #28]
    unsigned int counter = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61bb      	str	r3, [r7, #24]
    int refcolumn = x;
 8003800:	897b      	ldrh	r3, [r7, #10]
 8003802:	617b      	str	r3, [r7, #20]

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8003804:	e018      	b.n	8003838 <canvas_DrawStringAt+0x52>
        /* Display one character on EPD */
        canvas_DrawCharAt(canvas, refcolumn, y, *p_text, font, colored);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	b299      	uxth	r1, r3
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	7818      	ldrb	r0, [r3, #0]
 800380e:	893a      	ldrh	r2, [r7, #8]
 8003810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	4603      	mov	r3, r0
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f7ff ff66 	bl	80036ec <canvas_DrawCharAt>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	889b      	ldrh	r3, [r3, #4]
 8003824:	461a      	mov	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	4413      	add	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
        /* Point on the next character */
        p_text++;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	3301      	adds	r3, #1
 8003830:	61fb      	str	r3, [r7, #28]
        counter++;
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	3301      	adds	r3, #1
 8003836:	61bb      	str	r3, [r7, #24]
    while (*p_text != 0) {
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e2      	bne.n	8003806 <canvas_DrawStringAt+0x20>
    }
}
 8003840:	bf00      	nop
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <canvas_PrintEPD>:

/**
*  @brief:
*/
void canvas_PrintEPD(Canvas* canvas, EPD_HandleTypeDef* epd){
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]

	EPD_begin(epd);
 8003852:	6838      	ldr	r0, [r7, #0]
 8003854:	f7fe fb70 	bl	8001f38 <EPD_begin>
	EPD_image_0(epd, canvas->image);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4619      	mov	r1, r3
 800385e:	6838      	ldr	r0, [r7, #0]
 8003860:	f7fe ff12 	bl	8002688 <EPD_image_0>
	EPD_end(epd);
 8003864:	6838      	ldr	r0, [r7, #0]
 8003866:	f7fe fdd7 	bl	8002418 <EPD_end>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <canvas_setBGImage>:

/**
*  @brief: This updates the canvas background image
*/
void canvas_setBGImage(Canvas* canvas, const uint8_t* bg_image){
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
	uint16_t size = canvas->width * canvas->height;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	889a      	ldrh	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	88db      	ldrh	r3, [r3, #6]
 8003884:	fb12 f303 	smulbb	r3, r2, r3
 8003888:	81fb      	strh	r3, [r7, #14]
	memcpy(canvas->image, bg_image, size);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	89fa      	ldrh	r2, [r7, #14]
 8003890:	6839      	ldr	r1, [r7, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f013 fd35 	bl	8017302 <memcpy>
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <canvas_UpdateEPD>:

void canvas_UpdateEPD(Canvas* canvas, EPD_HandleTypeDef* epd, uint8_t* old_img){
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]

	EPD_begin(epd);
 80038ac:	68b8      	ldr	r0, [r7, #8]
 80038ae:	f7fe fb43 	bl	8001f38 <EPD_begin>
	EPD_partial_image(epd, old_img, canvas->image);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	68b8      	ldr	r0, [r7, #8]
 80038bc:	f7fe ff03 	bl	80026c6 <EPD_partial_image>
	EPD_end(epd);
 80038c0:	68b8      	ldr	r0, [r7, #8]
 80038c2:	f7fe fda9 	bl	8002418 <EPD_end>
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <canvas_DrawFilledRectangle>:
 ***********************************************************************************************/

/**
*  @brief: this draws a filled rectangle
*/
void canvas_DrawFilledRectangle(Canvas* canvas, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t colored) {
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b08a      	sub	sp, #40	; 0x28
 80038d2:	af02      	add	r7, sp, #8
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	4608      	mov	r0, r1
 80038d8:	4611      	mov	r1, r2
 80038da:	461a      	mov	r2, r3
 80038dc:	4603      	mov	r3, r0
 80038de:	70fb      	strb	r3, [r7, #3]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70bb      	strb	r3, [r7, #2]
 80038e4:	4613      	mov	r3, r2
 80038e6:	707b      	strb	r3, [r7, #1]
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
 80038e8:	787a      	ldrb	r2, [r7, #1]
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d901      	bls.n	80038f4 <canvas_DrawFilledRectangle+0x26>
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	e000      	b.n	80038f6 <canvas_DrawFilledRectangle+0x28>
 80038f4:	787b      	ldrb	r3, [r7, #1]
 80038f6:	61bb      	str	r3, [r7, #24]
    max_x = x1 > x0 ? x1 : x0;
 80038f8:	787a      	ldrb	r2, [r7, #1]
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d901      	bls.n	8003904 <canvas_DrawFilledRectangle+0x36>
 8003900:	787b      	ldrb	r3, [r7, #1]
 8003902:	e000      	b.n	8003906 <canvas_DrawFilledRectangle+0x38>
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	617b      	str	r3, [r7, #20]
    min_y = y1 > y0 ? y0 : y1;
 8003908:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800390c:	78bb      	ldrb	r3, [r7, #2]
 800390e:	429a      	cmp	r2, r3
 8003910:	d901      	bls.n	8003916 <canvas_DrawFilledRectangle+0x48>
 8003912:	78bb      	ldrb	r3, [r7, #2]
 8003914:	e001      	b.n	800391a <canvas_DrawFilledRectangle+0x4c>
 8003916:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800391a:	613b      	str	r3, [r7, #16]
    max_y = y1 > y0 ? y1 : y0;
 800391c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003920:	78bb      	ldrb	r3, [r7, #2]
 8003922:	429a      	cmp	r2, r3
 8003924:	d902      	bls.n	800392c <canvas_DrawFilledRectangle+0x5e>
 8003926:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800392a:	e000      	b.n	800392e <canvas_DrawFilledRectangle+0x60>
 800392c:	78bb      	ldrb	r3, [r7, #2]
 800392e:	60fb      	str	r3, [r7, #12]

    for (i = min_x; i <= max_x; i++) {
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e016      	b.n	8003964 <canvas_DrawFilledRectangle+0x96>
      canvas_DrawVerticalLine(canvas, i, min_y, max_y - min_y + 1, colored);
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	b2d9      	uxtb	r1, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	b2d8      	uxtb	r0, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	b2db      	uxtb	r3, r3
 800394a:	3301      	adds	r3, #1
 800394c:	b2da      	uxtb	r2, r3
 800394e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	4602      	mov	r2, r0
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f80b 	bl	8003974 <canvas_DrawVerticalLine>
    for (i = min_x; i <= max_x; i++) {
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3301      	adds	r3, #1
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	429a      	cmp	r2, r3
 800396a:	dde4      	ble.n	8003936 <canvas_DrawFilledRectangle+0x68>
    }
}
 800396c:	bf00      	nop
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <canvas_DrawVerticalLine>:


/**
*  @brief: this draws a vertical line on the frame buffer
*/
void canvas_DrawVerticalLine(Canvas* canvas, uint8_t x, uint8_t y, uint8_t line_height, uint8_t colored) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	4608      	mov	r0, r1
 800397e:	4611      	mov	r1, r2
 8003980:	461a      	mov	r2, r3
 8003982:	4603      	mov	r3, r0
 8003984:	70fb      	strb	r3, [r7, #3]
 8003986:	460b      	mov	r3, r1
 8003988:	70bb      	strb	r3, [r7, #2]
 800398a:	4613      	mov	r3, r2
 800398c:	707b      	strb	r3, [r7, #1]
    int i;
    for (i = y; i < y + line_height; i++) {
 800398e:	78bb      	ldrb	r3, [r7, #2]
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e00a      	b.n	80039aa <canvas_DrawVerticalLine+0x36>
        canvas_DrawPixel(canvas, x, i, colored);
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	b299      	uxth	r1, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	b29a      	uxth	r2, r3
 800399c:	7e3b      	ldrb	r3, [r7, #24]
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff fe20 	bl	80035e4 <canvas_DrawPixel>
    for (i = y; i < y + line_height; i++) {
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3301      	adds	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	78ba      	ldrb	r2, [r7, #2]
 80039ac:	787b      	ldrb	r3, [r7, #1]
 80039ae:	4413      	add	r3, r2
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	dbee      	blt.n	8003994 <canvas_DrawVerticalLine+0x20>
    }
}
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <LM75B_Init>:
LM75B_error LM75B_i2cWriteBytes(uint8_t subAddr, uint8_t *src, uint8_t Size);

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/
LM75B_error LM75B_Init(I2C_HandleTypeDef *hi2c, GPIO_TypeDef *Power_Port, uint16_t Power_Pin) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
	// Setup the Power and Comms
	pi2c = hi2c;
 80039ce:	4a1a      	ldr	r2, [pc, #104]	; (8003a38 <LM75B_Init+0x78>)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6013      	str	r3, [r2, #0]
	LM75BPowerPort = Power_Port;
 80039d4:	4a19      	ldr	r2, [pc, #100]	; (8003a3c <LM75B_Init+0x7c>)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6013      	str	r3, [r2, #0]
	LM75BPowerPin = Power_Pin;
 80039da:	4a19      	ldr	r2, [pc, #100]	; (8003a40 <LM75B_Init+0x80>)
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_SET);
 80039e0:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <LM75B_Init+0x7c>)
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <LM75B_Init+0x80>)
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	2201      	movs	r2, #1
 80039ea:	4619      	mov	r1, r3
 80039ec:	f002 f8d8 	bl	8005ba0 <HAL_GPIO_WritePin>
	HAL_Delay(1); // Small delay to ensure stable power
 80039f0:	2001      	movs	r0, #1
 80039f2:	f001 fde5 	bl	80055c0 <HAL_Delay>

	// Read the configuration register and see if I2C Returns an issue
	uint8_t tempConfig;
	LM75B_error status = readConfigReg(&tempConfig);
 80039f6:	f107 0316 	add.w	r3, r7, #22
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f88a 	bl	8003b14 <readConfigReg>
 8003a00:	4603      	mov	r3, r0
 8003a02:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_RESET);
 8003a04:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <LM75B_Init+0x7c>)
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <LM75B_Init+0x80>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f002 f8c6 	bl	8005ba0 <HAL_GPIO_WritePin>

	if (status != LM75B_OK) {
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <LM75B_Init+0x5e>
		return LM75B_ERR;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e008      	b.n	8003a30 <LM75B_Init+0x70>
	}

	if (tempConfig == 0x00){
 8003a1e:	7dbb      	ldrb	r3, [r7, #22]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <LM75B_Init+0x6e>
		LM75BInitialized = true;
 8003a24:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <LM75B_Init+0x84>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
		return LM75B_OK;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <LM75B_Init+0x70>
	}

	return LM75B_ERR;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20000264 	.word	0x20000264
 8003a3c:	20000f94 	.word	0x20000f94
 8003a40:	20000f90 	.word	0x20000f90
 8003a44:	20000268 	.word	0x20000268

08003a48 <LM75B_ReadTemp>:

LM75B_error LM75B_ReadTemp(int8_t *temp) {
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	if (!LM75BInitialized) {
 8003a50:	4b2d      	ldr	r3, [pc, #180]	; (8003b08 <LM75B_ReadTemp+0xc0>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	f083 0301 	eor.w	r3, r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <LM75B_ReadTemp+0x1a>
		return LM75B_ERR;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e04d      	b.n	8003afe <LM75B_ReadTemp+0xb6>
	}

	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_SET);
 8003a62:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <LM75B_ReadTemp+0xc4>)
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <LM75B_ReadTemp+0xc8>)
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f002 f897 	bl	8005ba0 <HAL_GPIO_WritePin>
	HAL_Delay(50); // Small delay to ensure stable power and to allow LM75B to acquire a temp reading
 8003a72:	2032      	movs	r0, #50	; 0x32
 8003a74:	f001 fda4 	bl	80055c0 <HAL_Delay>

	// Read the temperature register
	uint8_t tempReg[2] = {0};
 8003a78:	2300      	movs	r3, #0
 8003a7a:	813b      	strh	r3, [r7, #8]
	LM75B_i2cReadBytes(TEMP_REG, tempReg, 2);
 8003a7c:	f107 0308 	add.w	r3, r7, #8
 8003a80:	2202      	movs	r2, #2
 8003a82:	4619      	mov	r1, r3
 8003a84:	2000      	movs	r0, #0
 8003a86:	f000 f853 	bl	8003b30 <LM75B_i2cReadBytes>

	// Shutdown to conserve power
	HAL_GPIO_WritePin(LM75BPowerPort, LM75BPowerPin, GPIO_PIN_RESET);
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <LM75B_ReadTemp+0xc4>)
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <LM75B_ReadTemp+0xc8>)
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	2200      	movs	r2, #0
 8003a94:	4619      	mov	r1, r3
 8003a96:	f002 f883 	bl	8005ba0 <HAL_GPIO_WritePin>

	// Convert Array into signed integer
	int16_t temperature = (tempReg[0] << 8) | tempReg[1];
 8003a9a:	7a3b      	ldrb	r3, [r7, #8]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	b21a      	sxth	r2, r3
 8003aa0:	7a7b      	ldrb	r3, [r7, #9]
 8003aa2:	b21b      	sxth	r3, r3
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	81fb      	strh	r3, [r7, #14]

	temperature = temperature >> 5;		// The temperature only uses the 11 most significant bits.
 8003aa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aac:	115b      	asrs	r3, r3, #5
 8003aae:	81fb      	strh	r3, [r7, #14]
	temperature *= 0.125;				// 0.125 deg C Resolution
 8003ab0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fc fd3d 	bl	8000534 <__aeabi_i2d>
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003ac2:	f7fc fda1 	bl	8000608 <__aeabi_dmul>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	460c      	mov	r4, r1
 8003aca:	4618      	mov	r0, r3
 8003acc:	4621      	mov	r1, r4
 8003ace:	f7fc ffad 	bl	8000a2c <__aeabi_d2iz>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	81fb      	strh	r3, [r7, #14]

	// Check to see if temp is Negative
	int8_t checktemp = (uint8_t) temperature;
 8003ad6:	89fb      	ldrh	r3, [r7, #14]
 8003ad8:	737b      	strb	r3, [r7, #13]

	if (checktemp & (1 << 7)) {
 8003ada:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da09      	bge.n	8003af6 <LM75B_ReadTemp+0xae>
		// We are negative, Strip the negative qualifier and send result
		*temp = (checktemp & (0x7F)) * -1;
 8003ae2:	7b7b      	ldrb	r3, [r7, #13]
 8003ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	425b      	negs	r3, r3
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	b25a      	sxtb	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	e002      	b.n	8003afc <LM75B_ReadTemp+0xb4>
	} else {
		*temp = checktemp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	7b7a      	ldrb	r2, [r7, #13]
 8003afa:	701a      	strb	r2, [r3, #0]
	}

	return LM75B_OK;
 8003afc:	2301      	movs	r3, #1
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd90      	pop	{r4, r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000268 	.word	0x20000268
 8003b0c:	20000f94 	.word	0x20000f94
 8003b10:	20000f90 	.word	0x20000f90

08003b14 <readConfigReg>:

/********************************************************************************
 * PRIVATE FUNCTIONS
 *******************************************************************************/
LM75B_error readConfigReg(uint8_t *confReg) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	// Reads and returns the configuration register
	return LM75B_i2cReadBytes(CONFIG_REG, confReg, 1);
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	2001      	movs	r0, #1
 8003b22:	f000 f805 	bl	8003b30 <LM75B_i2cReadBytes>
 8003b26:	4603      	mov	r3, r0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <LM75B_i2cReadBytes>:

/********************************************************************************
 * I2C READ AND WRITE ROUTINES
 *******************************************************************************/

LM75B_error LM75B_i2cReadBytes(uint8_t subAddr, uint8_t *dest, uint8_t Size) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af04      	add	r7, sp, #16
 8003b36:	4603      	mov	r3, r0
 8003b38:	6039      	str	r1, [r7, #0]
 8003b3a:	71fb      	strb	r3, [r7, #7]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(pi2c, LM75B_I2C_ADDR, subAddr, I2C_MEMADD_SIZE_8BIT, dest, Size, LM75B_I2C_TIMEOUT);
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <LM75B_i2cReadBytes+0x4c>)
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	b299      	uxth	r1, r3
 8003b48:	79bb      	ldrb	r3, [r7, #6]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b50:	9202      	str	r2, [sp, #8]
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2301      	movs	r3, #1
 8003b5a:	460a      	mov	r2, r1
 8003b5c:	2190      	movs	r1, #144	; 0x90
 8003b5e:	f002 f995 	bl	8005e8c <HAL_I2C_Mem_Read>
 8003b62:	4603      	mov	r3, r0
 8003b64:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <LM75B_i2cReadBytes+0x40>
		return LM75B_ERR;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e000      	b.n	8003b72 <LM75B_i2cReadBytes+0x42>
	}
	return LM75B_OK;
 8003b70:	2301      	movs	r3, #1
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000264 	.word	0x20000264

08003b80 <iso15693Initialize>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693Initialize( bool useSlowTX, bool useFastRX )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	460a      	mov	r2, r1
 8003b8a:	71fb      	strb	r3, [r7, #7]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	71bb      	strb	r3, [r7, #6]
    ReturnCode err;

    err = rfalSetMode( RFAL_MODE_POLL_NFCV, useSlowTX?(RFAL_BR_1p66):(RFAL_BR_26p48), useFastRX?(RFAL_BR_52p97):(RFAL_BR_26p48) );
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <iso15693Initialize+0x1a>
 8003b96:	21ed      	movs	r1, #237	; 0xed
 8003b98:	e000      	b.n	8003b9c <iso15693Initialize+0x1c>
 8003b9a:	21ec      	movs	r1, #236	; 0xec
 8003b9c:	79bb      	ldrb	r3, [r7, #6]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <iso15693Initialize+0x26>
 8003ba2:	23eb      	movs	r3, #235	; 0xeb
 8003ba4:	e000      	b.n	8003ba8 <iso15693Initialize+0x28>
 8003ba6:	23ec      	movs	r3, #236	; 0xec
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2007      	movs	r0, #7
 8003bac:	f009 fe9e 	bl	800d8ec <rfalSetMode>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	81fb      	strh	r3, [r7, #14]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	f00a fac5 	bl	800e144 <rfalSetErrorHandling>

    rfalSetGT( RFAL_GT_NFCV );
 8003bba:	4809      	ldr	r0, [pc, #36]	; (8003be0 <iso15693Initialize+0x60>)
 8003bbc:	f00a fb0e 	bl	800e1dc <rfalSetGT>
    rfalSetFDTListen( rfalConv64fcTo1fc(ISO15693_MASK_FDT_LISTEN) );
 8003bc0:	f44f 5082 	mov.w	r0, #4160	; 0x1040
 8003bc4:	f00a faf6 	bl	800e1b4 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8003bc8:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 8003bcc:	f00a fadc 	bl	800e188 <rfalSetFDTPoll>

    rfalFieldOnAndStartGT();
 8003bd0:	f00a fb32 	bl	800e238 <rfalFieldOnAndStartGT>

    return err;
 8003bd4:	89fb      	ldrh	r3, [r7, #14]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	000108d8 	.word	0x000108d8

08003be4 <iso15693Deinitialize>:

ReturnCode iso15693Deinitialize(uint8_t keep_on)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]
    if (!keep_on)
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <iso15693Deinitialize+0x18>
    {
        return rfalFieldOff();
 8003bf4:	f00a fb88 	bl	800e308 <rfalFieldOff>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	e000      	b.n	8003bfe <iso15693Deinitialize+0x1a>
    }
    return ERR_NONE;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <iso15693Inventory>:
                    uint8_t maskLength,
                    uint8_t* mask,
                    iso15693ProximityCard_t* cards,
                    uint8_t maxCards,
                    uint8_t* cardsFound)
{
 8003c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c0c:	b091      	sub	sp, #68	; 0x44
 8003c0e:	af02      	add	r7, sp, #8
 8003c10:	60ba      	str	r2, [r7, #8]
 8003c12:	607b      	str	r3, [r7, #4]
 8003c14:	4603      	mov	r3, r0
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	73bb      	strb	r3, [r7, #14]
    int8_t slot; /* number of the slot currently being processed */
    uint8_t slotNumPos; /* gives the position of the slot number within the mask */
    int8_t currColSlot; /* index of the slot whose collision is currently processed */
    uint16_t colSlots; /* 16 bit long marker holding all slots with collisions (indicated by set bit */
    uint64_t collisions; /* 64 bit long marker holding all unresolved collisions within 64bit UID */
    iso15693ProximityCard_t* crdptr = cards; /* pointer to the card currently used */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	61fb      	str	r3, [r7, #28]
    uint8_t crdidx = 0; /* index of the card currently used */
 8003c20:	2300      	movs	r3, #0
 8003c22:	76fb      	strb	r3, [r7, #27]

    if (maxCards == 0)
 8003c24:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <iso15693Inventory+0x2a>
    {
        err = ERR_NOMEM;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	86fb      	strh	r3, [r7, #54]	; 0x36
        goto out;
 8003c30:	e2f8      	b.n	8004224 <iso15693Inventory+0x61c>
    }

    ST_MEMSET(iso15693DirMarker, 0, ISO15693_NUM_UID_BITS);
 8003c32:	2240      	movs	r2, #64	; 0x40
 8003c34:	2100      	movs	r1, #0
 8003c36:	48aa      	ldr	r0, [pc, #680]	; (8003ee0 <iso15693Inventory+0x2d8>)
 8003c38:	f013 fb6e 	bl	8017318 <memset>

    /* set inventory flag */
    iso15693Buffer[0] = ISO15693_REQ_FLAG_INVENTORY;
 8003c3c:	4ba9      	ldr	r3, [pc, #676]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003c3e:	2204      	movs	r2, #4
 8003c40:	701a      	strb	r2, [r3, #0]

    /* if number of slot is 1 then set the appropriate flag */
    if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <iso15693Inventory+0x4e>
    {
        iso15693Buffer[0] |= ISO15693_REQ_FLAG_1_SLOT;
 8003c48:	4ba6      	ldr	r3, [pc, #664]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	f043 0320 	orr.w	r3, r3, #32
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	4ba4      	ldr	r3, [pc, #656]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003c54:	701a      	strb	r2, [r3, #0]
    }
    iso15693Buffer[1] = ISO15693_CMD_INVENTORY;
 8003c56:	4ba3      	ldr	r3, [pc, #652]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	705a      	strb	r2, [r3, #1]
    iso15693Buffer[2] = maskLength;
 8003c5c:	4aa1      	ldr	r2, [pc, #644]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003c5e:	7bbb      	ldrb	r3, [r7, #14]
 8003c60:	7093      	strb	r3, [r2, #2]

    /* convert maskLength from number of bits to bytes */
    maskLengthBytes = (maskLength >> 3) + (((maskLength & 7) > 0) ? 1 : 0);
 8003c62:	7bbb      	ldrb	r3, [r7, #14]
 8003c64:	08db      	lsrs	r3, r3, #3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	7bba      	ldrb	r2, [r7, #14]
 8003c6a:	f002 0207 	and.w	r2, r2, #7
 8003c6e:	2a00      	cmp	r2, #0
 8003c70:	bfcc      	ite	gt
 8003c72:	2201      	movgt	r2, #1
 8003c74:	2200      	movle	r2, #0
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	4413      	add	r3, r2
 8003c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if ((maskLengthBytes + 3) > ISO15693_BUFFER_SIZE)
 8003c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c82:	3303      	adds	r3, #3
 8003c84:	2b48      	cmp	r3, #72	; 0x48
 8003c86:	dd02      	ble.n	8003c8e <iso15693Inventory+0x86>
    {
        err = ERR_NOMEM;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        goto out;
 8003c8c:	e2ca      	b.n	8004224 <iso15693Inventory+0x61c>
    }

    /* mask out unneeded bits */
    if (maskLength & 7)
 8003c8e:	7bbb      	ldrb	r3, [r7, #14]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d017      	beq.n	8003cc8 <iso15693Inventory+0xc0>
    {
        bitmask = (1 << (maskLength & 7)) - 1;
 8003c98:	7bbb      	ldrb	r3, [r7, #14]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	76bb      	strb	r3, [r7, #26]
        mask[maskLengthBytes-1] &= bitmask;
 8003caa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	7819      	ldrb	r1, [r3, #0]
 8003cb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	7eba      	ldrb	r2, [r7, #26]
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]
    }
    ST_MEMCPY(&iso15693Buffer[3], mask, maskLengthBytes);
 8003cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	4885      	ldr	r0, [pc, #532]	; (8003ee8 <iso15693Inventory+0x2e0>)
 8003cd2:	f013 fb16 	bl	8017302 <memcpy>

    slotNumPos = maskLength & 7;
 8003cd6:	7bbb      	ldrb	r3, [r7, #14]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	767b      	strb	r3, [r7, #25]
    currColPos = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    collisions = 0;
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    colSlots = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    currColSlot = -1;
 8003cf4:	23ff      	movs	r3, #255	; 0xff
 8003cf6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    slot = (slotcnt == ISO15693_NUM_SLOTS_1) ? -1 : 15;
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <iso15693Inventory+0xfe>
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295
 8003d04:	e000      	b.n	8003d08 <iso15693Inventory+0x100>
 8003d06:	230f      	movs	r3, #15
 8003d08:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            /* inner loop iterates once over all slots (in case of slot count 16)
               or only one iteration in case of slot count 1.
               After first 16 slot iterations (slot count 16) slot count is
               changed to 1 */

            if ((slotcnt == ISO15693_NUM_SLOTS_1) || (slot == 15))
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <iso15693Inventory+0x112>
 8003d12:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003d16:	2b0f      	cmp	r3, #15
 8003d18:	d10e      	bne.n	8003d38 <iso15693Inventory+0x130>
            {
                /* send the request. Note: CRC is appended by physical layer.
                   Add 3 to mask for flag field, command field and mask length */
                err = rfalISO15693TransceiveAnticollisionFrame(iso15693Buffer, (3 + maskLengthBytes),
 8003d1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d1e:	3303      	adds	r3, #3
 8003d20:	b2d9      	uxtb	r1, r3
 8003d22:	f107 0316 	add.w	r3, r7, #22
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	230c      	movs	r3, #12
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	486d      	ldr	r0, [pc, #436]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003d2e:	f00b fc93 	bl	800f658 <rfalISO15693TransceiveAnticollisionFrame>
 8003d32:	4603      	mov	r3, r0
 8003d34:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003d36:	e00b      	b.n	8003d50 <iso15693Inventory+0x148>
                            (uint8_t*)crdptr, sizeof(iso15693ProximityCard_t), &actlength);
            }
            else
            {
                HAL_Delay(5); /* this is a worst case delay for sending EOF. t3min depends on modulation depth and data rate */
 8003d38:	2005      	movs	r0, #5
 8003d3a:	f001 fc41 	bl	80055c0 <HAL_Delay>
                /* in case if slot count 16 slot is incremented by just sending EOF */
                err = rfalISO15693TransceiveEOFAnticollision(
 8003d3e:	f107 0316 	add.w	r3, r7, #22
 8003d42:	461a      	mov	r2, r3
 8003d44:	210c      	movs	r1, #12
 8003d46:	69f8      	ldr	r0, [r7, #28]
 8003d48:	f00b fd3e 	bl	800f7c8 <rfalISO15693TransceiveEOFAnticollision>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	86fb      	strh	r3, [r7, #54]	; 0x36
                            (uint8_t*)crdptr, sizeof(iso15693ProximityCard_t), &actlength);
            }

            bitsBeforeCol = actlength%8;
 8003d50:	8afb      	ldrh	r3, [r7, #22]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	763b      	strb	r3, [r7, #24]
            actlength /= 8;
 8003d5a:	8afb      	ldrh	r3, [r7, #22]
 8003d5c:	08db      	lsrs	r3, r3, #3
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	82fb      	strh	r3, [r7, #22]

            if (ERR_RF_COLLISION == err) do
 8003d62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d64:	2b1d      	cmp	r3, #29
 8003d66:	f040 80a1 	bne.w	8003eac <iso15693Inventory+0x2a4>
            {
                if (actlength < 2)
 8003d6a:	8afb      	ldrh	r3, [r7, #22]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d802      	bhi.n	8003d76 <iso15693Inventory+0x16e>
                {
                    /* collision before actually receiving UID!!! This should
                    not happen since we ignored collisions in these bytes. */
                    err = ERR_RF_COLLISION;
 8003d70:	231d      	movs	r3, #29
 8003d72:	86fb      	strh	r3, [r7, #54]	; 0x36
                    goto out;
 8003d74:	e256      	b.n	8004224 <iso15693Inventory+0x61c>
                }
                if ((actlength - 2 + (bitsBeforeCol ? 1 : 0)) < maskLengthBytes)
 8003d76:	8afb      	ldrh	r3, [r7, #22]
 8003d78:	3b02      	subs	r3, #2
 8003d7a:	7e3a      	ldrb	r2, [r7, #24]
 8003d7c:	2a00      	cmp	r2, #0
 8003d7e:	bf14      	ite	ne
 8003d80:	2201      	movne	r2, #1
 8003d82:	2200      	moveq	r2, #0
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	441a      	add	r2, r3
 8003d88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	da02      	bge.n	8003d96 <iso15693Inventory+0x18e>
                {
                    /* we provided a mask but received fewer bytes which
                     * should not happen. Treat this as timeout and continue. */
                    err = ERR_TIMEOUT;
 8003d90:	2304      	movs	r3, #4
 8003d92:	86fb      	strh	r3, [r7, #54]	; 0x36
                    break;
 8003d94:	e08a      	b.n	8003eac <iso15693Inventory+0x2a4>
                }

                if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d17a      	bne.n	8003e92 <iso15693Inventory+0x28a>
                {
                    /* in case slot count is 1 collision needs to be resolved */
                    /* find position of collision within received UID and
                       update mask and mask length appropriately */
                    iso15693Buffer[2] = ((actlength - 2) << 3) + bitsBeforeCol + 1;
 8003d9c:	8afb      	ldrh	r3, [r7, #22]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	3b02      	subs	r3, #2
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	7e3b      	ldrb	r3, [r7, #24]
 8003daa:	4413      	add	r3, r2
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	3301      	adds	r3, #1
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4b4c      	ldr	r3, [pc, #304]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003db4:	709a      	strb	r2, [r3, #2]
                    if (iso15693Buffer[2] > ISO15693_NUM_UID_BITS)
 8003db6:	4b4b      	ldr	r3, [pc, #300]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003db8:	789b      	ldrb	r3, [r3, #2]
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d902      	bls.n	8003dc4 <iso15693Inventory+0x1bc>
                    { /* The collision is inside the CRC: This should not happen,
                         treat this as a timeout and continue */
                        err = ERR_TIMEOUT;
 8003dbe:	2304      	movs	r3, #4
 8003dc0:	86fb      	strh	r3, [r7, #54]	; 0x36
                        break;
 8003dc2:	e073      	b.n	8003eac <iso15693Inventory+0x2a4>
                    }
                    currColPos = iso15693Buffer[2] - 1;
 8003dc4:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003dc6:	789b      	ldrb	r3, [r3, #2]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                    collisions |= ((uint64_t)1 << (uint64_t)currColPos);
 8003dce:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8003dd2:	f04f 0201 	mov.w	r2, #1
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	f1a1 0620 	sub.w	r6, r1, #32
 8003dde:	f1c1 0020 	rsb	r0, r1, #32
 8003de2:	fa03 f501 	lsl.w	r5, r3, r1
 8003de6:	fa02 f606 	lsl.w	r6, r2, r6
 8003dea:	4335      	orrs	r5, r6
 8003dec:	fa22 f000 	lsr.w	r0, r2, r0
 8003df0:	4305      	orrs	r5, r0
 8003df2:	fa02 f401 	lsl.w	r4, r2, r1
 8003df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dfa:	ea42 0004 	orr.w	r0, r2, r4
 8003dfe:	ea43 0105 	orr.w	r1, r3, r5
 8003e02:	e9c7 0108 	strd	r0, r1, [r7, #32]
                    maskLengthBytes = actlength - 1;
 8003e06:	8afb      	ldrh	r3, [r7, #22]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                    /* copy received UID to mask */
                    ST_MEMCPY(&iso15693Buffer[3], crdptr->uid, maskLengthBytes);
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	3302      	adds	r3, #2
 8003e14:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4833      	ldr	r0, [pc, #204]	; (8003ee8 <iso15693Inventory+0x2e0>)
 8003e1c:	f013 fa71 	bl	8017302 <memcpy>
                    bitmask = (1 << bitsBeforeCol) - 1;
 8003e20:	7e3b      	ldrb	r3, [r7, #24]
 8003e22:	2201      	movs	r2, #1
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	76bb      	strb	r3, [r7, #26]

                    /* clear bit where collision happened which means try
                       left branch of the tree first */
                    iso15693Buffer[2+maskLengthBytes] &= bitmask;
 8003e2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e32:	3302      	adds	r3, #2
 8003e34:	4a2b      	ldr	r2, [pc, #172]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003e36:	5cd1      	ldrb	r1, [r2, r3]
 8003e38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	7eba      	ldrb	r2, [r7, #26]
 8003e40:	400a      	ands	r2, r1
 8003e42:	b2d1      	uxtb	r1, r2
 8003e44:	4a27      	ldr	r2, [pc, #156]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003e46:	54d1      	strb	r1, [r2, r3]

                    if (1 == iso15693DirMarker[currColPos])
 8003e48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003e4c:	4a24      	ldr	r2, [pc, #144]	; (8003ee0 <iso15693Inventory+0x2d8>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d115      	bne.n	8003e80 <iso15693Inventory+0x278>
                    {
                        /* if left branch has been tried out before (dirMarker set to 1)
                           the set the bit where collision happened to 1, i.e.
                           try right branch */
                        iso15693Buffer[2+maskLengthBytes] |= (1 << (currColPos & 7));
 8003e54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e58:	3302      	adds	r3, #2
 8003e5a:	4a22      	ldr	r2, [pc, #136]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003e5c:	5cd3      	ldrb	r3, [r2, r3]
 8003e5e:	b25a      	sxtb	r2, r3
 8003e60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	2101      	movs	r1, #1
 8003e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6e:	b25b      	sxtb	r3, r3
 8003e70:	4313      	orrs	r3, r2
 8003e72:	b25a      	sxtb	r2, r3
 8003e74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e78:	3302      	adds	r3, #2
 8003e7a:	b2d1      	uxtb	r1, r2
 8003e7c:	4a19      	ldr	r2, [pc, #100]	; (8003ee4 <iso15693Inventory+0x2dc>)
 8003e7e:	54d1      	strb	r1, [r2, r3]
                    }
                    /* in any case increment dirMarker to indicate the way we chose */
                    iso15693DirMarker[currColPos]++;
 8003e80:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003e84:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <iso15693Inventory+0x2d8>)
 8003e86:	5cd2      	ldrb	r2, [r2, r3]
 8003e88:	3201      	adds	r2, #1
 8003e8a:	b2d1      	uxtb	r1, r2
 8003e8c:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <iso15693Inventory+0x2d8>)
 8003e8e:	54d1      	strb	r1, [r2, r3]
 8003e90:	e00c      	b.n	8003eac <iso15693Inventory+0x2a4>
                }
                else
                {
                    /* in case of slot count 16 just mark that there is a collision
                    within this slot. Resolve it later when switching back to slot count 1 */
                    colSlots |= 1 << (15 - slot);
 8003e92:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003e96:	f1c3 030f 	rsb	r3, r3, #15
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	b21a      	sxth	r2, r3
 8003ea2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	b21b      	sxth	r3, r3
 8003eaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
            } while(0);
            if (ERR_RF_COLLISION != err)
 8003eac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eae:	2b1d      	cmp	r3, #29
 8003eb0:	f000 80c8 	beq.w	8004044 <iso15693Inventory+0x43c>
            {
                if (ERR_NONE == err)
 8003eb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <iso15693Inventory+0x2ca>
                {
                    /* received all bytes without collision - store UID */
                    crdidx++;
 8003eba:	7efb      	ldrb	r3, [r7, #27]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	76fb      	strb	r3, [r7, #27]
                    if (crdidx >= maxCards)
 8003ec0:	7efa      	ldrb	r2, [r7, #27]
 8003ec2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	f080 81a9 	bcs.w	800421e <iso15693Inventory+0x616>
                    {
                        goto out_max_cards;
                    }
                    crdptr++;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	61fb      	str	r3, [r7, #28]
                }

                if (ISO15693_NUM_SLOTS_1 == slotcnt)
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f040 80b5 	bne.w	8004044 <iso15693Inventory+0x43c>
                {

                    i = ISO15693_NUM_UID_BITS;
 8003eda:	2340      	movs	r3, #64	; 0x40
 8003edc:	86bb      	strh	r3, [r7, #52]	; 0x34
                    /* a collisions has been resolved. Go back in the tree to find
                     next collision */
                    while (i--)
 8003ede:	e091      	b.n	8004004 <iso15693Inventory+0x3fc>
 8003ee0:	200002b8 	.word	0x200002b8
 8003ee4:	2000026c 	.word	0x2000026c
 8003ee8:	2000026f 	.word	0x2000026f
                    {
                        if (collisions & ((uint64_t)1 << (uint64_t)i))
 8003eec:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003eee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ef2:	f1c1 0620 	rsb	r6, r1, #32
 8003ef6:	f1a1 0020 	sub.w	r0, r1, #32
 8003efa:	fa22 f801 	lsr.w	r8, r2, r1
 8003efe:	fa03 f606 	lsl.w	r6, r3, r6
 8003f02:	ea48 0806 	orr.w	r8, r8, r6
 8003f06:	fa23 f000 	lsr.w	r0, r3, r0
 8003f0a:	ea48 0800 	orr.w	r8, r8, r0
 8003f0e:	fa23 f901 	lsr.w	r9, r3, r1
 8003f12:	f04f 0201 	mov.w	r2, #1
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	ea02 0008 	and.w	r0, r2, r8
 8003f1e:	ea03 0109 	and.w	r1, r3, r9
 8003f22:	ea50 0301 	orrs.w	r3, r0, r1
 8003f26:	d06d      	beq.n	8004004 <iso15693Inventory+0x3fc>
                        {
                            if (iso15693DirMarker[i] > 1)
 8003f28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f2a:	4ab2      	ldr	r2, [pc, #712]	; (80041f4 <iso15693Inventory+0x5ec>)
 8003f2c:	5cd3      	ldrb	r3, [r2, r3]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d939      	bls.n	8003fa6 <iso15693Inventory+0x39e>
                            {
                                /* dirMarker 2 means that both paths (left 'n right)
                                   have been tried (=resolved). Remove this collision */
                                collisions &= ~((uint64_t)((uint64_t)1 << (uint64_t)i));
 8003f32:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003f34:	f04f 0201 	mov.w	r2, #1
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	f1a1 0620 	sub.w	r6, r1, #32
 8003f40:	f1c1 0020 	rsb	r0, r1, #32
 8003f44:	fa03 fb01 	lsl.w	fp, r3, r1
 8003f48:	fa02 f606 	lsl.w	r6, r2, r6
 8003f4c:	ea4b 0b06 	orr.w	fp, fp, r6
 8003f50:	fa22 f000 	lsr.w	r0, r2, r0
 8003f54:	ea4b 0b00 	orr.w	fp, fp, r0
 8003f58:	fa02 fa01 	lsl.w	sl, r2, r1
 8003f5c:	ea6f 020a 	mvn.w	r2, sl
 8003f60:	ea6f 030b 	mvn.w	r3, fp
 8003f64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003f68:	ea02 0200 	and.w	r2, r2, r0
 8003f6c:	ea03 0301 	and.w	r3, r3, r1
 8003f70:	e9c7 2308 	strd	r2, r3, [r7, #32]
                                iso15693DirMarker[i] = 0;
 8003f74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f76:	4a9f      	ldr	r2, [pc, #636]	; (80041f4 <iso15693Inventory+0x5ec>)
 8003f78:	2100      	movs	r1, #0
 8003f7a:	54d1      	strb	r1, [r2, r3]
                                if (currColSlot >= 0)
 8003f7c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	db3f      	blt.n	8004004 <iso15693Inventory+0x3fc>
                                {
                                    /* if this collision was within a slot unmark
                                       also this slot */
                                    colSlots &= ~(1 << currColSlot);
 8003f84:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003f88:	2201      	movs	r2, #1
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	b21b      	sxth	r3, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	b21a      	sxth	r2, r3
 8003f94:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b21b      	sxth	r3, r3
 8003f9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                                    currColSlot = -1;
 8003f9e:	23ff      	movs	r3, #255	; 0xff
 8003fa0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8003fa4:	e02e      	b.n	8004004 <iso15693Inventory+0x3fc>
                            else
                            {
                                /* update collision position. dirMarker 1
                                also means that left branch was tried before.
                                Switch to right branch now */
                                currColPos = i;
 8003fa6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003fa8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                                iso15693Buffer[2] = currColPos + 1;
 8003fac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	4b90      	ldr	r3, [pc, #576]	; (80041f8 <iso15693Inventory+0x5f0>)
 8003fb6:	709a      	strb	r2, [r3, #2]
                                maskLengthBytes = (currColPos >> 3) + 1;
 8003fb8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003fbc:	08db      	lsrs	r3, r3, #3
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                                iso15693Buffer[2+maskLengthBytes] |= (1 << (currColPos & 7));
 8003fc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fca:	3302      	adds	r3, #2
 8003fcc:	4a8a      	ldr	r2, [pc, #552]	; (80041f8 <iso15693Inventory+0x5f0>)
 8003fce:	5cd3      	ldrb	r3, [r2, r3]
 8003fd0:	b25a      	sxtb	r2, r3
 8003fd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	2101      	movs	r1, #1
 8003fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe0:	b25b      	sxtb	r3, r3
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	b25a      	sxtb	r2, r3
 8003fe6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fea:	3302      	adds	r3, #2
 8003fec:	b2d1      	uxtb	r1, r2
 8003fee:	4a82      	ldr	r2, [pc, #520]	; (80041f8 <iso15693Inventory+0x5f0>)
 8003ff0:	54d1      	strb	r1, [r2, r3]
                                iso15693DirMarker[currColPos]++;
 8003ff2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003ff6:	4a7f      	ldr	r2, [pc, #508]	; (80041f4 <iso15693Inventory+0x5ec>)
 8003ff8:	5cd2      	ldrb	r2, [r2, r3]
 8003ffa:	3201      	adds	r2, #1
 8003ffc:	b2d1      	uxtb	r1, r2
 8003ffe:	4a7d      	ldr	r2, [pc, #500]	; (80041f4 <iso15693Inventory+0x5ec>)
 8004000:	54d1      	strb	r1, [r2, r3]
                                break;
 8004002:	e005      	b.n	8004010 <iso15693Inventory+0x408>
                    while (i--)
 8004004:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004006:	1e5a      	subs	r2, r3, #1
 8004008:	86ba      	strh	r2, [r7, #52]	; 0x34
 800400a:	2b00      	cmp	r3, #0
 800400c:	f47f af6e 	bne.w	8003eec <iso15693Inventory+0x2e4>
                            }
                        }
                    }

                    if ((currColSlot >= 0) && (iso15693DirMarker[currColPos] == 0))
 8004010:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8004014:	2b00      	cmp	r3, #0
 8004016:	db15      	blt.n	8004044 <iso15693Inventory+0x43c>
 8004018:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800401c:	4a75      	ldr	r2, [pc, #468]	; (80041f4 <iso15693Inventory+0x5ec>)
 800401e:	5cd3      	ldrb	r3, [r2, r3]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10f      	bne.n	8004044 <iso15693Inventory+0x43c>
                    {
                        /* a slot where a collision was found before has been processed
                           with no collision. So unmark this slot */
                        colSlots &= ~(1 << currColSlot);
 8004024:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8004028:	2201      	movs	r2, #1
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	b21b      	sxth	r3, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	b21a      	sxth	r2, r3
 8004034:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004038:	4013      	ands	r3, r2
 800403a:	b21b      	sxth	r3, r3
 800403c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        currColSlot = -1;
 800403e:	23ff      	movs	r3, #255	; 0xff
 8004040:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    }
                }
            }

            if (slot >= 0)
 8004044:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8004048:	2b00      	cmp	r3, #0
 800404a:	db06      	blt.n	800405a <iso15693Inventory+0x452>
            {
                slot--;
 800404c:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8004050:	b2db      	uxtb	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            }
        } while (slot >= 0);
 800405a:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 800405e:	2b00      	cmp	r3, #0
 8004060:	f6bf ae54 	bge.w	8003d0c <iso15693Inventory+0x104>

        /* after 16 iterations switch back to slot count 0 which means
         a normal binary tree search */
        if (ISO15693_NUM_SLOTS_16 == slotcnt)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d108      	bne.n	800407c <iso15693Inventory+0x474>
        {
            slotcnt = ISO15693_NUM_SLOTS_1;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
            iso15693Buffer[0] |= ISO15693_REQ_FLAG_1_SLOT;
 800406e:	4b62      	ldr	r3, [pc, #392]	; (80041f8 <iso15693Inventory+0x5f0>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	f043 0320 	orr.w	r3, r3, #32
 8004076:	b2da      	uxtb	r2, r3
 8004078:	4b5f      	ldr	r3, [pc, #380]	; (80041f8 <iso15693Inventory+0x5f0>)
 800407a:	701a      	strb	r2, [r3, #0]
        }
        if (!collisions && (ISO15693_NUM_SLOTS_1 == slotcnt))
 800407c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004080:	4313      	orrs	r3, r2
 8004082:	f040 80c2 	bne.w	800420a <iso15693Inventory+0x602>
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f040 80be 	bne.w	800420a <iso15693Inventory+0x602>
        {
            /* if all collisions are resolved check the slots for open collisions */
            for (i = 0; i < 16; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004092:	e0b6      	b.n	8004202 <iso15693Inventory+0x5fa>
            {
                if ((1 << i) & colSlots)
 8004094:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004096:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004098:	fa42 f303 	asr.w	r3, r2, r3
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80ab 	beq.w	80041fc <iso15693Inventory+0x5f4>
                {
                    /* found a slot with unresolved collision.
                       Reset mask length to original value and append slot number to mask */
                    maskLengthBytes = (maskLength >> 3) + (((maskLength & 7) > 0) ? 1 : 0);
 80040a6:	7bbb      	ldrb	r3, [r7, #14]
 80040a8:	08db      	lsrs	r3, r3, #3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	7bba      	ldrb	r2, [r7, #14]
 80040ae:	f002 0207 	and.w	r2, r2, #7
 80040b2:	2a00      	cmp	r2, #0
 80040b4:	bfcc      	ite	gt
 80040b6:	2201      	movgt	r2, #1
 80040b8:	2200      	movle	r2, #0
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	4413      	add	r3, r2
 80040be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    if (slotNumPos == 0)
 80040c2:	7e7b      	ldrb	r3, [r7, #25]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <iso15693Inventory+0x4ca>
                    {
                        /* add an additional byte in case slot number starts at LSB */
                        maskLengthBytes++;
 80040c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040cc:	3301      	adds	r3, #1
 80040ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    }
                    if (slotNumPos > 4)
 80040d2:	7e7b      	ldrb	r3, [r7, #25]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d95b      	bls.n	8004190 <iso15693Inventory+0x588>
                    {
                        /* also if slot number would overlap add an additional byte */
                        maskLengthBytes++;
 80040d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040dc:	3301      	adds	r3, #1
 80040de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                        /* add slot number to mask */
                        iso15693Buffer[2+maskLengthBytes] &= ~((1 << (8 - slotNumPos)) - 1);
 80040e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040e6:	3302      	adds	r3, #2
 80040e8:	4a43      	ldr	r2, [pc, #268]	; (80041f8 <iso15693Inventory+0x5f0>)
 80040ea:	5cd3      	ldrb	r3, [r2, r3]
 80040ec:	b25a      	sxtb	r2, r3
 80040ee:	7e7b      	ldrb	r3, [r7, #25]
 80040f0:	f1c3 0308 	rsb	r3, r3, #8
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	425b      	negs	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	b25b      	sxtb	r3, r3
 8004102:	4013      	ands	r3, r2
 8004104:	b25a      	sxtb	r2, r3
 8004106:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800410a:	3302      	adds	r3, #2
 800410c:	b2d1      	uxtb	r1, r2
 800410e:	4a3a      	ldr	r2, [pc, #232]	; (80041f8 <iso15693Inventory+0x5f0>)
 8004110:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[2+maskLengthBytes] |= i >> (8 - slotNumPos);
 8004112:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004116:	3302      	adds	r3, #2
 8004118:	4a37      	ldr	r2, [pc, #220]	; (80041f8 <iso15693Inventory+0x5f0>)
 800411a:	5cd3      	ldrb	r3, [r2, r3]
 800411c:	b25a      	sxtb	r2, r3
 800411e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004120:	7e7b      	ldrb	r3, [r7, #25]
 8004122:	f1c3 0308 	rsb	r3, r3, #8
 8004126:	fa41 f303 	asr.w	r3, r1, r3
 800412a:	b25b      	sxtb	r3, r3
 800412c:	4313      	orrs	r3, r2
 800412e:	b25a      	sxtb	r2, r3
 8004130:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004134:	3302      	adds	r3, #2
 8004136:	b2d1      	uxtb	r1, r2
 8004138:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <iso15693Inventory+0x5f0>)
 800413a:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[1+maskLengthBytes] &= (1 << slotNumPos) - 1;
 800413c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004140:	3301      	adds	r3, #1
 8004142:	4a2d      	ldr	r2, [pc, #180]	; (80041f8 <iso15693Inventory+0x5f0>)
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	b25a      	sxtb	r2, r3
 8004148:	7e7b      	ldrb	r3, [r7, #25]
 800414a:	2101      	movs	r1, #1
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	b2db      	uxtb	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	b25b      	sxtb	r3, r3
 8004158:	4013      	ands	r3, r2
 800415a:	b25a      	sxtb	r2, r3
 800415c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004160:	3301      	adds	r3, #1
 8004162:	b2d1      	uxtb	r1, r2
 8004164:	4a24      	ldr	r2, [pc, #144]	; (80041f8 <iso15693Inventory+0x5f0>)
 8004166:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[1+maskLengthBytes] |= (i << slotNumPos);
 8004168:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800416c:	3301      	adds	r3, #1
 800416e:	4a22      	ldr	r2, [pc, #136]	; (80041f8 <iso15693Inventory+0x5f0>)
 8004170:	5cd3      	ldrb	r3, [r2, r3]
 8004172:	b25a      	sxtb	r2, r3
 8004174:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004176:	7e7b      	ldrb	r3, [r7, #25]
 8004178:	fa01 f303 	lsl.w	r3, r1, r3
 800417c:	b25b      	sxtb	r3, r3
 800417e:	4313      	orrs	r3, r2
 8004180:	b25a      	sxtb	r2, r3
 8004182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004186:	3301      	adds	r3, #1
 8004188:	b2d1      	uxtb	r1, r2
 800418a:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <iso15693Inventory+0x5f0>)
 800418c:	54d1      	strb	r1, [r2, r3]
 800418e:	e028      	b.n	80041e2 <iso15693Inventory+0x5da>
                    }
                    else
                    {
                        /* add slot number to mask */
                        iso15693Buffer[2+maskLengthBytes] &= (1 << slotNumPos) - 1;
 8004190:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004194:	3302      	adds	r3, #2
 8004196:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <iso15693Inventory+0x5f0>)
 8004198:	5cd3      	ldrb	r3, [r2, r3]
 800419a:	b25a      	sxtb	r2, r3
 800419c:	7e7b      	ldrb	r3, [r7, #25]
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f303 	lsl.w	r3, r1, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	b25b      	sxtb	r3, r3
 80041ac:	4013      	ands	r3, r2
 80041ae:	b25a      	sxtb	r2, r3
 80041b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041b4:	3302      	adds	r3, #2
 80041b6:	b2d1      	uxtb	r1, r2
 80041b8:	4a0f      	ldr	r2, [pc, #60]	; (80041f8 <iso15693Inventory+0x5f0>)
 80041ba:	54d1      	strb	r1, [r2, r3]
                        iso15693Buffer[2+maskLengthBytes] |= (i << slotNumPos);
 80041bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041c0:	3302      	adds	r3, #2
 80041c2:	4a0d      	ldr	r2, [pc, #52]	; (80041f8 <iso15693Inventory+0x5f0>)
 80041c4:	5cd3      	ldrb	r3, [r2, r3]
 80041c6:	b25a      	sxtb	r2, r3
 80041c8:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80041ca:	7e7b      	ldrb	r3, [r7, #25]
 80041cc:	fa01 f303 	lsl.w	r3, r1, r3
 80041d0:	b25b      	sxtb	r3, r3
 80041d2:	4313      	orrs	r3, r2
 80041d4:	b25a      	sxtb	r2, r3
 80041d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041da:	3302      	adds	r3, #2
 80041dc:	b2d1      	uxtb	r1, r2
 80041de:	4a06      	ldr	r2, [pc, #24]	; (80041f8 <iso15693Inventory+0x5f0>)
 80041e0:	54d1      	strb	r1, [r2, r3]
                    }
                    /* in any case number of mask bits needs to be incremented by 4 */
                    iso15693Buffer[2] = maskLength + 4;
 80041e2:	7bbb      	ldrb	r3, [r7, #14]
 80041e4:	3304      	adds	r3, #4
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <iso15693Inventory+0x5f0>)
 80041ea:	709a      	strb	r2, [r3, #2]
                    currColSlot = i;
 80041ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041ee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    break;
 80041f2:	e00a      	b.n	800420a <iso15693Inventory+0x602>
 80041f4:	200002b8 	.word	0x200002b8
 80041f8:	2000026c 	.word	0x2000026c
            for (i = 0; i < 16; i++)
 80041fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041fe:	3301      	adds	r3, #1
 8004200:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004202:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004204:	2b0f      	cmp	r3, #15
 8004206:	f67f af45 	bls.w	8004094 <iso15693Inventory+0x48c>
            }

        }

        /* do not stop before all collisions in all slots are resolved */
    } while (collisions || colSlots);
 800420a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800420e:	4313      	orrs	r3, r2
 8004210:	f47f ad7c 	bne.w	8003d0c <iso15693Inventory+0x104>
 8004214:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004216:	2b00      	cmp	r3, #0
 8004218:	f47f ad78 	bne.w	8003d0c <iso15693Inventory+0x104>

out_max_cards:
 800421c:	e000      	b.n	8004220 <iso15693Inventory+0x618>
                        goto out_max_cards;
 800421e:	bf00      	nop
    err = ERR_NONE;
 8004220:	2300      	movs	r3, #0
 8004222:	86fb      	strh	r3, [r7, #54]	; 0x36
out:
    *cardsFound = crdidx;
 8004224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004226:	7efa      	ldrb	r2, [r7, #27]
 8004228:	701a      	strb	r2, [r3, #0]

    if (*cardsFound == 0)
 800422a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <iso15693Inventory+0x62e>
    {
        err = ERR_NOTFOUND;
 8004232:	2316      	movs	r3, #22
 8004234:	86fb      	strh	r3, [r7, #54]	; 0x36
    }

    return err;
 8004236:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8004238:	4618      	mov	r0, r3
 800423a:	373c      	adds	r7, #60	; 0x3c
 800423c:	46bd      	mov	sp, r7
 800423e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004242:	bf00      	nop

08004244 <iso15693SelectPicc>:
            0,
            ISO15693_FWT);
}

ReturnCode iso15693SelectPicc(const iso15693ProximityCard_t* card)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08a      	sub	sp, #40	; 0x28
 8004248:	af06      	add	r7, sp, #24
 800424a:	6078      	str	r0, [r7, #4]
    uint16_t actlength;
    ReturnCode err;

    err = iso15693SendRequest(ISO15693_CMD_SELECT,
 800424c:	4b12      	ldr	r3, [pc, #72]	; (8004298 <iso15693SelectPicc+0x54>)
 800424e:	7819      	ldrb	r1, [r3, #0]
 8004250:	2351      	movs	r3, #81	; 0x51
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	2300      	movs	r3, #0
 8004256:	9303      	str	r3, [sp, #12]
 8004258:	2300      	movs	r3, #0
 800425a:	9302      	str	r3, [sp, #8]
 800425c:	f107 030c 	add.w	r3, r7, #12
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	2304      	movs	r3, #4
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <iso15693SelectPicc+0x58>)
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	2025      	movs	r0, #37	; 0x25
 800426c:	f000 f876 	bl	800435c <iso15693SendRequest>
 8004270:	4603      	mov	r3, r0
 8004272:	81fb      	strh	r3, [r7, #14]
            4,
            &actlength,
            NULL,
            0,
            ISO15693_FWT);
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8004274:	89fb      	ldrh	r3, [r7, #14]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <iso15693SelectPicc+0x44>

    if (iso15693Buffer[0] != 0)
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <iso15693SelectPicc+0x58>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <iso15693SelectPicc+0x48>
    {
        err = ERR_NOMSG;
 8004282:	2306      	movs	r3, #6
 8004284:	81fb      	strh	r3, [r7, #14]
 8004286:	e002      	b.n	800428e <iso15693SelectPicc+0x4a>
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8004288:	bf00      	nop
 800428a:	e000      	b.n	800428e <iso15693SelectPicc+0x4a>
    }

out:
 800428c:	bf00      	nop
    return err;
 800428e:	89fb      	ldrh	r3, [r7, #14]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	200002f8 	.word	0x200002f8
 800429c:	2000026c 	.word	0x2000026c

080042a0 <iso15693ReadMultipleBlocks>:



ReturnCode iso15693ReadMultipleBlocks(const iso15693ProximityCard_t* card, uint8_t startblock, uint8_t numBlocks,
                                        uint8_t* res_flags, uint8_t* data, uint16_t dataLen, uint16_t *actLen )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	; 0x30
 80042a4:	af06      	add	r7, sp, #24
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	72fb      	strb	r3, [r7, #11]
 80042ae:	4613      	mov	r3, r2
 80042b0:	72bb      	strb	r3, [r7, #10]
    ReturnCode err;
    uint16_t actlength;
    uint8_t addData[2];

    addData[0] = startblock;
 80042b2:	7afb      	ldrb	r3, [r7, #11]
 80042b4:	743b      	strb	r3, [r7, #16]
    addData[1] = numBlocks - 1;
 80042b6:	7abb      	ldrb	r3, [r7, #10]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	747b      	strb	r3, [r7, #17]

    err = iso15693SendRequest(ISO15693_CMD_READ_MULTIPLE_BLOCKS,
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <iso15693ReadMultipleBlocks+0xb0>)
 80042c0:	7819      	ldrb	r1, [r3, #0]
 80042c2:	2351      	movs	r3, #81	; 0x51
 80042c4:	9304      	str	r3, [sp, #16]
 80042c6:	2302      	movs	r3, #2
 80042c8:	9303      	str	r3, [sp, #12]
 80042ca:	f107 0310 	add.w	r3, r7, #16
 80042ce:	9302      	str	r3, [sp, #8]
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	2348      	movs	r3, #72	; 0x48
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <iso15693ReadMultipleBlocks+0xb4>)
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	2023      	movs	r0, #35	; 0x23
 80042e0:	f000 f83c 	bl	800435c <iso15693SendRequest>
 80042e4:	4603      	mov	r3, r0
 80042e6:	82fb      	strh	r3, [r7, #22]
            ISO15693_BUFFER_SIZE,
            &actlength,
            addData,
            2,
            ISO15693_FWT);
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 80042e8:	8afb      	ldrh	r3, [r7, #22]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d128      	bne.n	8004340 <iso15693ReadMultipleBlocks+0xa0>

    if (actlength >= 2)
 80042ee:	8abb      	ldrh	r3, [r7, #20]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d927      	bls.n	8004344 <iso15693ReadMultipleBlocks+0xa4>
    {
        *res_flags = iso15693Buffer[0];
 80042f4:	4b17      	ldr	r3, [pc, #92]	; (8004354 <iso15693ReadMultipleBlocks+0xb4>)
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	701a      	strb	r2, [r3, #0]
        if (*res_flags & ISO15693_RESP_FLAG_ERROR)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d006      	beq.n	8004316 <iso15693ReadMultipleBlocks+0x76>
        {
            *actLen = 0;
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	2200      	movs	r2, #0
 800430c:	801a      	strh	r2, [r3, #0]
            err = iso15693Buffer[1];
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <iso15693ReadMultipleBlocks+0xb4>)
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	82fb      	strh	r3, [r7, #22]
 8004314:	e017      	b.n	8004346 <iso15693ReadMultipleBlocks+0xa6>
        }
        else
        {
            *actLen = ((( actlength > dataLen ) ? dataLen : actlength) - 1);
 8004316:	8abb      	ldrh	r3, [r7, #20]
 8004318:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800431a:	429a      	cmp	r2, r3
 800431c:	d203      	bcs.n	8004326 <iso15693ReadMultipleBlocks+0x86>
 800431e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004320:	3b01      	subs	r3, #1
 8004322:	b29b      	uxth	r3, r3
 8004324:	e002      	b.n	800432c <iso15693ReadMultipleBlocks+0x8c>
 8004326:	8abb      	ldrh	r3, [r7, #20]
 8004328:	3b01      	subs	r3, #1
 800432a:	b29b      	uxth	r3, r3
 800432c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800432e:	8013      	strh	r3, [r2, #0]
            ST_MEMCPY( data, &iso15693Buffer[1], *actLen );
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	4908      	ldr	r1, [pc, #32]	; (8004358 <iso15693ReadMultipleBlocks+0xb8>)
 8004338:	6a38      	ldr	r0, [r7, #32]
 800433a:	f012 ffe2 	bl	8017302 <memcpy>
 800433e:	e002      	b.n	8004346 <iso15693ReadMultipleBlocks+0xa6>
    EVAL_ERR_NE_GOTO(ERR_NONE, err, out);
 8004340:	bf00      	nop
 8004342:	e000      	b.n	8004346 <iso15693ReadMultipleBlocks+0xa6>
        }
    }

out:
 8004344:	bf00      	nop
    return err;
 8004346:	8afb      	ldrh	r3, [r7, #22]

}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	200002f8 	.word	0x200002f8
 8004354:	2000026c 	.word	0x2000026c
 8004358:	2000026d 	.word	0x2000026d

0800435c <iso15693SendRequest>:
                uint16_t rcvbuffer_len,
                uint16_t* actlength,
                uint8_t* addSendData,
                uint8_t addSendDataLength,
                uint32_t no_response_time_64fcs)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af04      	add	r7, sp, #16
 8004362:	60ba      	str	r2, [r7, #8]
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	4603      	mov	r3, r0
 8004368:	73fb      	strb	r3, [r7, #15]
 800436a:	460b      	mov	r3, r1
 800436c:	73bb      	strb	r3, [r7, #14]
    uint8_t length;


    /* sanity checks first */
    if ((ISO15693_UID_LENGTH + addSendDataLength + 2) > ISO15693_BUFFER_SIZE)
 800436e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004372:	330a      	adds	r3, #10
 8004374:	2b48      	cmp	r3, #72	; 0x48
 8004376:	dd01      	ble.n	800437c <iso15693SendRequest+0x20>
    {
        return ERR_NOMEM;
 8004378:	2301      	movs	r3, #1
 800437a:	e03f      	b.n	80043fc <iso15693SendRequest+0xa0>
    }

    /* FLAG_SELECT and FLAG_ADDRESS will be added as required below */
    flags &= (~(ISO15693_REQ_FLAG_SELECT|ISO15693_REQ_FLAG_ADDRESS));
 800437c:	7bbb      	ldrb	r3, [r7, #14]
 800437e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004382:	73bb      	strb	r3, [r7, #14]
    if (card == NULL)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d108      	bne.n	800439c <iso15693SendRequest+0x40>
    {
        /* uid is NULL which means that selected PICC (using #iso15693SelectPicc)
           is used */
        /* set select flag */
        iso15693Buffer[0] = flags | ISO15693_REQ_FLAG_SELECT;
 800438a:	7bbb      	ldrb	r3, [r7, #14]
 800438c:	f043 0310 	orr.w	r3, r3, #16
 8004390:	b2da      	uxtb	r2, r3
 8004392:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <iso15693SendRequest+0xa8>)
 8004394:	701a      	strb	r2, [r3, #0]
        length = 2;
 8004396:	2302      	movs	r3, #2
 8004398:	75fb      	strb	r3, [r7, #23]
 800439a:	e00e      	b.n	80043ba <iso15693SendRequest+0x5e>
    }
    else
    {
        /* set address flag */
        iso15693Buffer[0] = flags | ISO15693_REQ_FLAG_ADDRESS;
 800439c:	7bbb      	ldrb	r3, [r7, #14]
 800439e:	f043 0320 	orr.w	r3, r3, #32
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	4b17      	ldr	r3, [pc, #92]	; (8004404 <iso15693SendRequest+0xa8>)
 80043a6:	701a      	strb	r2, [r3, #0]
        /* copy UID */
        ST_MEMCPY((void*)&iso15693Buffer[2], (void*)card->uid, ISO15693_UID_LENGTH);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	3302      	adds	r3, #2
 80043ac:	2208      	movs	r2, #8
 80043ae:	4619      	mov	r1, r3
 80043b0:	4815      	ldr	r0, [pc, #84]	; (8004408 <iso15693SendRequest+0xac>)
 80043b2:	f012 ffa6 	bl	8017302 <memcpy>
        length = 2 + ISO15693_UID_LENGTH;
 80043b6:	230a      	movs	r3, #10
 80043b8:	75fb      	strb	r3, [r7, #23]
    }

    iso15693Buffer[1] = cmd;
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <iso15693SendRequest+0xa8>)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	7053      	strb	r3, [r2, #1]

    /* append additional data to be sent */
    ST_MEMCPY(&iso15693Buffer[length], addSendData, addSendDataLength);
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
 80043c2:	4a10      	ldr	r2, [pc, #64]	; (8004404 <iso15693SendRequest+0xa8>)
 80043c4:	4413      	add	r3, r2
 80043c6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80043ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043cc:	4618      	mov	r0, r3
 80043ce:	f012 ff98 	bl	8017302 <memcpy>
    length += addSendDataLength;
 80043d2:	7dfa      	ldrb	r2, [r7, #23]
 80043d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80043d8:	4413      	add	r3, r2
 80043da:	75fb      	strb	r3, [r7, #23]

    return rfalTransceiveBlockingTxRx( iso15693Buffer, length, rcvbuffer, rcvbuffer_len, actlength,
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	b299      	uxth	r1, r3
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	8c3a      	ldrh	r2, [r7, #32]
 80043e6:	9302      	str	r3, [sp, #8]
 80043e8:	2300      	movs	r3, #0
 80043ea:	9301      	str	r3, [sp, #4]
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	4803      	ldr	r0, [pc, #12]	; (8004404 <iso15693SendRequest+0xa8>)
 80043f6:	f00a f965 	bl	800e6c4 <rfalTransceiveBlockingTxRx>
 80043fa:	4603      	mov	r3, r0
                                     (RFAL_TXRX_FLAGS_CRC_TX_AUTO | RFAL_TXRX_FLAGS_CRC_RX_REMV | RFAL_TXRX_FLAGS_NFCIP1_OFF | RFAL_TXRX_FLAGS_AGC_ON | RFAL_TXRX_FLAGS_PAR_RX_REMV),
                                      rfalConv64fcTo1fc( no_response_time_64fcs * 4 ) );

}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	2000026c 	.word	0x2000026c
 8004408:	2000026e 	.word	0x2000026e

0800440c <rfidControllerInit>:
 *******************************************************************************/

/*******************************************************************************
 * GLOBAL FUNCTIONS
 *******************************************************************************/
ReturnCode rfidControllerInit(void) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
	ReturnCode err = ERR_NONE;
 8004412:	2300      	movs	r3, #0
 8004414:	80fb      	strh	r3, [r7, #6]
	struct st25r3916AatTuneResult tuningStatus;

	rfalAnalogConfigInitialize();                                                     /* Initialize RFAL's Analog Configs */
 8004416:	f008 fd11 	bl	800ce3c <rfalAnalogConfigInitialize>

	if ((err = rfalInitialize()) == ERR_NONE) {
 800441a:	f009 f9f1 	bl	800d800 <rfalInitialize>
 800441e:	4603      	mov	r3, r0
 8004420:	80fb      	strh	r3, [r7, #6]
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d102      	bne.n	800442e <rfidControllerInit+0x22>
		rfidInitialized = true;
 8004428:	4b07      	ldr	r3, [pc, #28]	; (8004448 <rfidControllerInit+0x3c>)
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
	}

	err = st25r3916AatTune(NULL, &tuningStatus);
 800442e:	463b      	mov	r3, r7
 8004430:	4619      	mov	r1, r3
 8004432:	2000      	movs	r0, #0
 8004434:	f00c f8e4 	bl	8010600 <st25r3916AatTune>
 8004438:	4603      	mov	r3, r0
 800443a:	80fb      	strh	r3, [r7, #6]

	return err;
 800443c:	88fb      	ldrh	r3, [r7, #6]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	200002f9 	.word	0x200002f9

0800444c <checkFilterTags>:

ReturnCode checkFilterTags(detectedTags_t *dTags) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b08e      	sub	sp, #56	; 0x38
 8004450:	af04      	add	r7, sp, #16
 8004452:	6078      	str	r0, [r7, #4]
	ReturnCode err = ERR_NONE;
 8004454:	2300      	movs	r3, #0
 8004456:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t  resFlags;
	uint16_t actLen;

	uint8_t rxNameBuffer[16];

	if (!rfidInitialized) return ERR_PARAM;
 8004458:	4b5f      	ldr	r3, [pc, #380]	; (80045d8 <checkFilterTags+0x18c>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	f083 0301 	eor.w	r3, r3, #1
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <checkFilterTags+0x1e>
 8004466:	2307      	movs	r3, #7
 8004468:	e0b1      	b.n	80045ce <checkFilterTags+0x182>

	// Reset dTags
	dTags->tagCount = 0;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 8004470:	2300      	movs	r3, #0
 8004472:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004476:	e021      	b.n	80044bc <checkFilterTags+0x70>
		memset(dTags->filterTags[i].tagUID, 0, ISO15693_UID_LENGTH);
 8004478:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800447c:	4613      	mov	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	4413      	add	r3, r2
 8004488:	3301      	adds	r3, #1
 800448a:	2208      	movs	r2, #8
 800448c:	2100      	movs	r1, #0
 800448e:	4618      	mov	r0, r3
 8004490:	f012 ff42 	bl	8017318 <memset>
		memset(dTags->filterTags[i].tagName, 0, FILTER_NAME_LEN);
 8004494:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	3308      	adds	r3, #8
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	4413      	add	r3, r2
 80044a6:	3301      	adds	r3, #1
 80044a8:	220a      	movs	r2, #10
 80044aa:	2100      	movs	r1, #0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f012 ff33 	bl	8017318 <memset>
	for (uint8_t i = 0; i < FILTER_SECTION_SIZE; i++) {
 80044b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80044b6:	3301      	adds	r3, #1
 80044b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80044bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d9d9      	bls.n	8004478 <checkFilterTags+0x2c>
	}

	crdptr = NULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	623b      	str	r3, [r7, #32]

	// Initialize the Reader. Turn the field on and get ready to detect cards.
	if ((err = iso15693Initialize(false, false)) != ERR_NONE) goto deinitReader;
 80044c8:	2100      	movs	r1, #0
 80044ca:	2000      	movs	r0, #0
 80044cc:	f7ff fb58 	bl	8003b80 <iso15693Initialize>
 80044d0:	4603      	mov	r3, r0
 80044d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80044d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d16e      	bne.n	80045b8 <checkFilterTags+0x16c>

	// Get the card inventory. This will load the [cards] variable with UIDs and update the [crdcnt] variable
	if ((err = iso15693Inventory(ISO15693_NUM_SLOTS_1, 0, NULL, cards, FILTER_SECTION_SIZE, &crdcnt)) != ERR_NONE) goto deinitReader;
 80044da:	4b40      	ldr	r3, [pc, #256]	; (80045dc <checkFilterTags+0x190>)
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	2303      	movs	r3, #3
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	4b3f      	ldr	r3, [pc, #252]	; (80045e0 <checkFilterTags+0x194>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	2100      	movs	r1, #0
 80044e8:	2000      	movs	r0, #0
 80044ea:	f7ff fb8d 	bl	8003c08 <iso15693Inventory>
 80044ee:	4603      	mov	r3, r0
 80044f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80044f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d161      	bne.n	80045bc <checkFilterTags+0x170>

	// Get the Filter names stored on each tag
	for (uint8_t i = 0; i < crdcnt; i++) {
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80044fe:	e050      	b.n	80045a2 <checkFilterTags+0x156>
		// Loop through each card by updating the UID pointer, selecting the card, read the mem block, and update the filter section name.
		// Select the next card
		crdptr = &cards[i];
 8004500:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004504:	4613      	mov	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4a34      	ldr	r2, [pc, #208]	; (80045e0 <checkFilterTags+0x194>)
 800450e:	4413      	add	r3, r2
 8004510:	623b      	str	r3, [r7, #32]
		if ((err = iso15693SelectPicc(crdptr)) != ERR_NONE) goto deinitReader;
 8004512:	6a38      	ldr	r0, [r7, #32]
 8004514:	f7ff fe96 	bl	8004244 <iso15693SelectPicc>
 8004518:	4603      	mov	r3, r0
 800451a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800451c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800451e:	2b00      	cmp	r3, #0
 8004520:	d14e      	bne.n	80045c0 <checkFilterTags+0x174>

		// Read the Memory Block
		if ((err = iso15693ReadMultipleBlocks(crdptr, 0, 4, &resFlags, rxNameBuffer, sizeof(rxNameBuffer) + 1, &actLen)) != ERR_NONE) goto deinitReader;
 8004522:	f107 021f 	add.w	r2, r7, #31
 8004526:	f107 031c 	add.w	r3, r7, #28
 800452a:	9302      	str	r3, [sp, #8]
 800452c:	2311      	movs	r3, #17
 800452e:	9301      	str	r3, [sp, #4]
 8004530:	f107 030c 	add.w	r3, r7, #12
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	4613      	mov	r3, r2
 8004538:	2204      	movs	r2, #4
 800453a:	2100      	movs	r1, #0
 800453c:	6a38      	ldr	r0, [r7, #32]
 800453e:	f7ff feaf 	bl	80042a0 <iso15693ReadMultipleBlocks>
 8004542:	4603      	mov	r3, r0
 8004544:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004548:	2b00      	cmp	r3, #0
 800454a:	d13b      	bne.n	80045c4 <checkFilterTags+0x178>

		// Copy the UID and Filter Name into the filterSection
		memcpy(dTags->filterTags[i].tagUID, cards[i].uid, ISO15693_UID_LENGTH);
 800454c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004550:	4613      	mov	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4413      	add	r3, r2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	4413      	add	r3, r2
 800455c:	1c58      	adds	r0, r3, #1
 800455e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004562:	4613      	mov	r3, r2
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <checkFilterTags+0x194>)
 800456c:	4413      	add	r3, r2
 800456e:	3302      	adds	r3, #2
 8004570:	2208      	movs	r2, #8
 8004572:	4619      	mov	r1, r3
 8004574:	f012 fec5 	bl	8017302 <memcpy>
		memcpy(dTags->filterTags[i].tagName, rxNameBuffer, FILTER_NAME_LEN);
 8004578:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	3308      	adds	r3, #8
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	4413      	add	r3, r2
 800458a:	3301      	adds	r3, #1
 800458c:	f107 010c 	add.w	r1, r7, #12
 8004590:	220a      	movs	r2, #10
 8004592:	4618      	mov	r0, r3
 8004594:	f012 feb5 	bl	8017302 <memcpy>
	for (uint8_t i = 0; i < crdcnt; i++) {
 8004598:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800459c:	3301      	adds	r3, #1
 800459e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80045a2:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <checkFilterTags+0x190>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d3a8      	bcc.n	8004500 <checkFilterTags+0xb4>
	}

	dTags->tagCount = crdcnt;
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <checkFilterTags+0x190>)
 80045b0:	781a      	ldrb	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	e006      	b.n	80045c6 <checkFilterTags+0x17a>
	if ((err = iso15693Initialize(false, false)) != ERR_NONE) goto deinitReader;
 80045b8:	bf00      	nop
 80045ba:	e004      	b.n	80045c6 <checkFilterTags+0x17a>
	if ((err = iso15693Inventory(ISO15693_NUM_SLOTS_1, 0, NULL, cards, FILTER_SECTION_SIZE, &crdcnt)) != ERR_NONE) goto deinitReader;
 80045bc:	bf00      	nop
 80045be:	e002      	b.n	80045c6 <checkFilterTags+0x17a>
		if ((err = iso15693SelectPicc(crdptr)) != ERR_NONE) goto deinitReader;
 80045c0:	bf00      	nop
 80045c2:	e000      	b.n	80045c6 <checkFilterTags+0x17a>
		if ((err = iso15693ReadMultipleBlocks(crdptr, 0, 4, &resFlags, rxNameBuffer, sizeof(rxNameBuffer) + 1, &actLen)) != ERR_NONE) goto deinitReader;
 80045c4:	bf00      	nop

	// Deinitialize the Reader
	deinitReader:
		iso15693Deinitialize(false);
 80045c6:	2000      	movs	r0, #0
 80045c8:	f7ff fb0c 	bl	8003be4 <iso15693Deinitialize>

	return err;
 80045cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3728      	adds	r7, #40	; 0x28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200002f9 	.word	0x200002f9
 80045dc:	200002fa 	.word	0x200002fa
 80045e0:	200002fc 	.word	0x200002fc

080045e4 <startWakeUpMode>:

ReturnCode startWakeUpMode(void) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
	rfalWakeUpConfig wkupConfig;

	// Set up the Wake Up Configuration
	wkupConfig.period = RFAL_WUM_PERIOD_100MS;
 80045ea:	2310      	movs	r3, #16
 80045ec:	703b      	strb	r3, [r7, #0]
	wkupConfig.irqTout = false;
 80045ee:	2300      	movs	r3, #0
 80045f0:	707b      	strb	r3, [r7, #1]
	wkupConfig.swTagDetect = false;
 80045f2:	2300      	movs	r3, #0
 80045f4:	70bb      	strb	r3, [r7, #2]

	// Inductive Amplitude Wake Up
	wkupConfig.indAmp.enabled = false;
 80045f6:	2300      	movs	r3, #0
 80045f8:	70fb      	strb	r3, [r7, #3]
	wkupConfig.indAmp.delta = 1;
 80045fa:	2301      	movs	r3, #1
 80045fc:	713b      	strb	r3, [r7, #4]
	wkupConfig.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 80045fe:	23ff      	movs	r3, #255	; 0xff
 8004600:	717b      	strb	r3, [r7, #5]
	wkupConfig.indAmp.autoAvg = true;
 8004602:	2301      	movs	r3, #1
 8004604:	71bb      	strb	r3, [r7, #6]
	wkupConfig.indAmp.aaInclMeas = true;
 8004606:	2301      	movs	r3, #1
 8004608:	71fb      	strb	r3, [r7, #7]
	wkupConfig.indAmp.aaWeight = RFAL_WUM_AA_WEIGHT_16;
 800460a:	2302      	movs	r3, #2
 800460c:	723b      	strb	r3, [r7, #8]

	// Inductive Phase Wake Up - Disabled
	wkupConfig.indPha.enabled = true;
 800460e:	2301      	movs	r3, #1
 8004610:	727b      	strb	r3, [r7, #9]
	wkupConfig.indPha.delta = 4;
 8004612:	2304      	movs	r3, #4
 8004614:	72bb      	strb	r3, [r7, #10]
	wkupConfig.indPha.reference = RFAL_WUM_REFERENCE_AUTO;
 8004616:	23ff      	movs	r3, #255	; 0xff
 8004618:	72fb      	strb	r3, [r7, #11]
	wkupConfig.indPha.autoAvg = true;
 800461a:	2301      	movs	r3, #1
 800461c:	733b      	strb	r3, [r7, #12]
	wkupConfig.indPha.aaInclMeas = true;
 800461e:	2301      	movs	r3, #1
 8004620:	737b      	strb	r3, [r7, #13]
	wkupConfig.indPha.aaWeight = RFAL_WUM_AA_WEIGHT_8;
 8004622:	2301      	movs	r3, #1
 8004624:	73bb      	strb	r3, [r7, #14]

//	// Capacitive Wake Up - Disabled
	wkupConfig.cap.enabled = false;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
	wkupConfig.cap.delta = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	743b      	strb	r3, [r7, #16]
	wkupConfig.cap.reference = RFAL_WUM_REFERENCE_AUTO;
 800462e:	23ff      	movs	r3, #255	; 0xff
 8004630:	747b      	strb	r3, [r7, #17]
	wkupConfig.cap.autoAvg = true;
 8004632:	2301      	movs	r3, #1
 8004634:	74bb      	strb	r3, [r7, #18]
	wkupConfig.cap.aaInclMeas = true;
 8004636:	2301      	movs	r3, #1
 8004638:	74fb      	strb	r3, [r7, #19]
	wkupConfig.cap.aaWeight = RFAL_WUM_AA_WEIGHT_16;
 800463a:	2302      	movs	r3, #2
 800463c:	753b      	strb	r3, [r7, #20]

	ReturnCode err = rfalWakeUpModeStart(&wkupConfig);
 800463e:	463b      	mov	r3, r7
 8004640:	4618      	mov	r0, r3
 8004642:	f00b f8e1 	bl	800f808 <rfalWakeUpModeStart>
 8004646:	4603      	mov	r3, r0
 8004648:	82fb      	strh	r3, [r7, #22]

	return err;
 800464a:	8afb      	ldrh	r3, [r7, #22]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 800465c:	4a08      	ldr	r2, [pc, #32]	; (8004680 <spiInit+0x2c>)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004670:	601a      	str	r2, [r3, #0]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000720 	.word	0x20000720

08004684 <spiSelect>:

void spiSelect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_RESET);
 8004690:	887b      	ldrh	r3, [r7, #2]
 8004692:	2200      	movs	r2, #0
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f001 fa82 	bl	8005ba0 <HAL_GPIO_WritePin>
}     
 800469c:	bf00      	nop
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <spiDeselect>:

void spiDeselect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	807b      	strh	r3, [r7, #2]
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
 80046b0:	887b      	ldrh	r3, [r7, #2]
 80046b2:	2201      	movs	r2, #1
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f001 fa72 	bl	8005ba0 <HAL_GPIO_WritePin>
}
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <spiTxRx>:

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 80046d2:	4b18      	ldr	r3, [pc, #96]	; (8004734 <spiTxRx+0x70>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <spiTxRx+0x1a>
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e026      	b.n	800472c <spiTxRx+0x68>
  
  if(length > SPI_BUF_LEN)
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e4:	d901      	bls.n	80046ea <spiTxRx+0x26>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e020      	b.n	800472c <spiTxRx+0x68>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d006      	beq.n	80046fe <spiTxRx+0x3a>
  {
    memcpy(txBuf, txData, length );
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68f9      	ldr	r1, [r7, #12]
 80046f6:	4810      	ldr	r0, [pc, #64]	; (8004738 <spiTxRx+0x74>)
 80046f8:	f012 fe03 	bl	8017302 <memcpy>
 80046fc:	e005      	b.n	800470a <spiTxRx+0x46>
  }
  else
  {
    memset(txBuf, 0x00, length );
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	461a      	mov	r2, r3
 8004702:	2100      	movs	r1, #0
 8004704:	480c      	ldr	r0, [pc, #48]	; (8004738 <spiTxRx+0x74>)
 8004706:	f012 fe07 	bl	8017318 <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <spiTxRx+0x70>)
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <spiTxRx+0x54>
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	e000      	b.n	800471a <spiTxRx+0x56>
 8004718:	4a08      	ldr	r2, [pc, #32]	; (800473c <spiTxRx+0x78>)
 800471a:	88f9      	ldrh	r1, [r7, #6]
 800471c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	460b      	mov	r3, r1
 8004724:	4904      	ldr	r1, [pc, #16]	; (8004738 <spiTxRx+0x74>)
 8004726:	f005 fe2f 	bl	800a388 <HAL_SPI_TransmitReceive>
 800472a:	4603      	mov	r3, r0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000720 	.word	0x20000720
 8004738:	20000320 	.word	0x20000320
 800473c:	20000520 	.word	0x20000520

08004740 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 800474a:	f000 ff2d 	bl	80055a8 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	4413      	add	r3, r2
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 8004764:	f000 ff20 	bl	80055a8 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	da01      	bge.n	800477e <timerIsExpired+0x22>
  {
    return true;
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <timerIsExpired+0x24>
  }
  
  return false;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <rtcModuleInit>:
 *******************************************************************************/

/********************************************************************************
 * PUBLIC FUNCTIONS
 *******************************************************************************/
void rtcModuleInit(RTC_HandleTypeDef *hrtc) {
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	// Register the Handle
	pRtcHandle = hrtc;
 8004790:	4a05      	ldr	r2, [pc, #20]	; (80047a8 <rtcModuleInit+0x20>)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6013      	str	r3, [r2, #0]
	rtcModInit = true;
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <rtcModuleInit+0x24>)
 8004798:	2201      	movs	r2, #1
 800479a:	701a      	strb	r2, [r3, #0]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	20000724 	.word	0x20000724
 80047ac:	20000728 	.word	0x20000728

080047b0 <rtcModuleIsInit>:

bool rtcModuleIsInit( void ) {
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
	return rtcModInit;
 80047b4:	4b03      	ldr	r3, [pc, #12]	; (80047c4 <rtcModuleIsInit+0x14>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000728 	.word	0x20000728

080047c8 <rtcGetDateTime>:
	}

	return RTC_OK;
}

RTC_error rtcGetDateTime(RTC_DateTypeDef* dateRet, RTC_TimeTypeDef* timeRet) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
	// Check If Module is Initialized
	if (!rtcModInit) {
 80047d2:	4b13      	ldr	r3, [pc, #76]	; (8004820 <rtcGetDateTime+0x58>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	f083 0301 	eor.w	r3, r3, #1
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <rtcGetDateTime+0x1c>
		return RTC_ERR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e018      	b.n	8004816 <rtcGetDateTime+0x4e>
	}

	// Get the Time
	if (HAL_RTC_GetTime(pRtcHandle, timeRet, RTC_FORMAT_BIN) != HAL_OK) {
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <rtcGetDateTime+0x5c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2200      	movs	r2, #0
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f004 f80b 	bl	8008808 <HAL_RTC_GetTime>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <rtcGetDateTime+0x34>
		// There was an issue communicating with the RTC
		return RTC_ERR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e00c      	b.n	8004816 <rtcGetDateTime+0x4e>
	}

	// Get the Date
	if (HAL_RTC_GetDate(pRtcHandle, dateRet, RTC_FORMAT_BIN) != HAL_OK) {
 80047fc:	4b09      	ldr	r3, [pc, #36]	; (8004824 <rtcGetDateTime+0x5c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2200      	movs	r2, #0
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	4618      	mov	r0, r3
 8004806:	f004 f904 	bl	8008a12 <HAL_RTC_GetDate>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <rtcGetDateTime+0x4c>
		// There was an issue communicating with the RTC
		return RTC_ERR;
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <rtcGetDateTime+0x4e>
	}

	return RTC_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20000728 	.word	0x20000728
 8004824:	20000724 	.word	0x20000724

08004828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800482c:	f000 fe56 	bl	80054dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004830:	f000 f814 	bl	800485c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004834:	f000 f9a8 	bl	8004b88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004838:	f000 f892 	bl	8004960 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 800483c:	f000 f918 	bl	8004a70 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8004840:	f000 f936 	bl	8004ab0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004844:	f000 f96a 	bl	8004b1c <MX_SPI2_Init>
//  MX_FATFS_Init();
  MX_USB_DEVICE_Init();
 8004848:	f011 fffa 	bl	8016840 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800484c:	f000 f8b6 	bl	80049bc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  setupIOs();						/* Main Setup 			*/
 8004850:	f7fc fc5c 	bl	800110c <setupIOs>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  processIOs();					/* Main Process 		*/
 8004854:	f7fc fcb8 	bl	80011c8 <processIOs>
 8004858:	e7fc      	b.n	8004854 <main+0x2c>
	...

0800485c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b09a      	sub	sp, #104	; 0x68
 8004860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004862:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004866:	2230      	movs	r2, #48	; 0x30
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f012 fd54 	bl	8017318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	609a      	str	r2, [r3, #8]
 800487c:	60da      	str	r2, [r3, #12]
 800487e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004880:	f107 030c 	add.w	r3, r7, #12
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	60da      	str	r2, [r3, #12]
 800488e:	611a      	str	r2, [r3, #16]
 8004890:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	4b30      	ldr	r3, [pc, #192]	; (8004958 <SystemClock_Config+0xfc>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <SystemClock_Config+0xfc>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6413      	str	r3, [r2, #64]	; 0x40
 80048a2:	4b2d      	ldr	r3, [pc, #180]	; (8004958 <SystemClock_Config+0xfc>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048ae:	2300      	movs	r3, #0
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	4b2a      	ldr	r3, [pc, #168]	; (800495c <SystemClock_Config+0x100>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a29      	ldr	r2, [pc, #164]	; (800495c <SystemClock_Config+0x100>)
 80048b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	4b27      	ldr	r3, [pc, #156]	; (800495c <SystemClock_Config+0x100>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048c6:	607b      	str	r3, [r7, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80048ca:	230a      	movs	r3, #10
 80048cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048ce:	2301      	movs	r3, #1
 80048d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80048d2:	2310      	movs	r3, #16
 80048d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80048d6:	2301      	movs	r3, #1
 80048d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048da:	2302      	movs	r3, #2
 80048dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80048de:	2300      	movs	r3, #0
 80048e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 80048e2:	2308      	movs	r3, #8
 80048e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 80048e6:	2348      	movs	r3, #72	; 0x48
 80048e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048ea:	2302      	movs	r3, #2
 80048ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80048ee:	2303      	movs	r3, #3
 80048f0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048f6:	4618      	mov	r0, r3
 80048f8:	f003 f8fa 	bl	8007af0 <HAL_RCC_OscConfig>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004902:	f000 fa31 	bl	8004d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004906:	230f      	movs	r3, #15
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800490a:	2302      	movs	r3, #2
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800490e:	2300      	movs	r3, #0
 8004910:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004916:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004918:	2300      	movs	r3, #0
 800491a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800491c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004920:	2102      	movs	r1, #2
 8004922:	4618      	mov	r0, r3
 8004924:	f003 fb54 	bl	8007fd0 <HAL_RCC_ClockConfig>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800492e:	f000 fa1b 	bl	8004d68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004932:	2302      	movs	r3, #2
 8004934:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800493a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800493c:	f107 030c 	add.w	r3, r7, #12
 8004940:	4618      	mov	r0, r3
 8004942:	f003 fd23 	bl	800838c <HAL_RCCEx_PeriphCLKConfig>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800494c:	f000 fa0c 	bl	8004d68 <Error_Handler>
  }
}
 8004950:	bf00      	nop
 8004952:	3768      	adds	r7, #104	; 0x68
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40023800 	.word	0x40023800
 800495c:	40007000 	.word	0x40007000

08004960 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004964:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <MX_I2C1_Init+0x50>)
 8004966:	4a13      	ldr	r2, [pc, #76]	; (80049b4 <MX_I2C1_Init+0x54>)
 8004968:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800496a:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <MX_I2C1_Init+0x50>)
 800496c:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <MX_I2C1_Init+0x58>)
 800496e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004970:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <MX_I2C1_Init+0x50>)
 8004972:	2200      	movs	r2, #0
 8004974:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <MX_I2C1_Init+0x50>)
 8004978:	2200      	movs	r2, #0
 800497a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <MX_I2C1_Init+0x50>)
 800497e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004982:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004984:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <MX_I2C1_Init+0x50>)
 8004986:	2200      	movs	r2, #0
 8004988:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800498a:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <MX_I2C1_Init+0x50>)
 800498c:	2200      	movs	r2, #0
 800498e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <MX_I2C1_Init+0x50>)
 8004992:	2200      	movs	r2, #0
 8004994:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <MX_I2C1_Init+0x50>)
 8004998:	2200      	movs	r2, #0
 800499a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800499c:	4804      	ldr	r0, [pc, #16]	; (80049b0 <MX_I2C1_Init+0x50>)
 800499e:	f001 f93d 	bl	8005c1c <HAL_I2C_Init>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80049a8:	f000 f9de 	bl	8004d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80049ac:	bf00      	nop
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000ff0 	.word	0x20000ff0
 80049b4:	40005400 	.word	0x40005400
 80049b8:	00061a80 	.word	0x00061a80

080049bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80049c2:	1d3b      	adds	r3, r7, #4
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80049d0:	2300      	movs	r3, #0
 80049d2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80049d4:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <MX_RTC_Init+0xac>)
 80049d6:	4a25      	ldr	r2, [pc, #148]	; (8004a6c <MX_RTC_Init+0xb0>)
 80049d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80049da:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <MX_RTC_Init+0xac>)
 80049dc:	2200      	movs	r2, #0
 80049de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80049e0:	4b21      	ldr	r3, [pc, #132]	; (8004a68 <MX_RTC_Init+0xac>)
 80049e2:	227f      	movs	r2, #127	; 0x7f
 80049e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80049e6:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <MX_RTC_Init+0xac>)
 80049e8:	22ff      	movs	r2, #255	; 0xff
 80049ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80049ec:	4b1e      	ldr	r3, [pc, #120]	; (8004a68 <MX_RTC_Init+0xac>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80049f2:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <MX_RTC_Init+0xac>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80049f8:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <MX_RTC_Init+0xac>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80049fe:	481a      	ldr	r0, [pc, #104]	; (8004a68 <MX_RTC_Init+0xac>)
 8004a00:	f003 fdb4 	bl	800856c <HAL_RTC_Init>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8004a0a:	f000 f9ad 	bl	8004d68 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004a22:	1d3b      	adds	r3, r7, #4
 8004a24:	2201      	movs	r2, #1
 8004a26:	4619      	mov	r1, r3
 8004a28:	480f      	ldr	r0, [pc, #60]	; (8004a68 <MX_RTC_Init+0xac>)
 8004a2a:	f003 fe30 	bl	800868e <HAL_RTC_SetTime>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004a34:	f000 f998 	bl	8004d68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8004a40:	2301      	movs	r3, #1
 8004a42:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004a48:	463b      	mov	r3, r7
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4806      	ldr	r0, [pc, #24]	; (8004a68 <MX_RTC_Init+0xac>)
 8004a50:	f003 ff38 	bl	80088c4 <HAL_RTC_SetDate>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8004a5a:	f000 f985 	bl	8004d68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004a5e:	bf00      	nop
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20001044 	.word	0x20001044
 8004a6c:	40002800 	.word	0x40002800

08004a70 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004a74:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <MX_SDIO_SD_Init+0x38>)
 8004a76:	4a0d      	ldr	r2, [pc, #52]	; (8004aac <MX_SDIO_SD_Init+0x3c>)
 8004a78:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <MX_SDIO_SD_Init+0x38>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <MX_SDIO_SD_Init+0x38>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004a86:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <MX_SDIO_SD_Init+0x38>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <MX_SDIO_SD_Init+0x38>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004a92:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <MX_SDIO_SD_Init+0x38>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <MX_SDIO_SD_Init+0x38>)
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004a9e:	bf00      	nop
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	20001064 	.word	0x20001064
 8004aac:	40012c00 	.word	0x40012c00

08004ab0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004ab4:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004ab6:	4a18      	ldr	r2, [pc, #96]	; (8004b18 <MX_SPI1_Init+0x68>)
 8004ab8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004aba:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004abc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ac0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004ac2:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ac8:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004ae2:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004ae4:	2210      	movs	r2, #16
 8004ae6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004aee:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004afc:	220a      	movs	r2, #10
 8004afe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004b00:	4804      	ldr	r0, [pc, #16]	; (8004b14 <MX_SPI1_Init+0x64>)
 8004b02:	f005 faa9 	bl	800a058 <HAL_SPI_Init>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004b0c:	f000 f92c 	bl	8004d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004b10:	bf00      	nop
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	200010e8 	.word	0x200010e8
 8004b18:	40013000 	.word	0x40013000

08004b1c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004b20:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b22:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <MX_SPI2_Init+0x68>)
 8004b24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004b26:	4b16      	ldr	r3, [pc, #88]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004b2e:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b34:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b3a:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b40:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004b46:	4b0e      	ldr	r3, [pc, #56]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b50:	2208      	movs	r2, #8
 8004b52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b54:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b5a:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b68:	220a      	movs	r2, #10
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004b6c:	4804      	ldr	r0, [pc, #16]	; (8004b80 <MX_SPI2_Init+0x64>)
 8004b6e:	f005 fa73 	bl	800a058 <HAL_SPI_Init>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004b78:	f000 f8f6 	bl	8004d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004b7c:	bf00      	nop
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000f98 	.word	0x20000f98
 8004b84:	40003800 	.word	0x40003800

08004b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b8e:	f107 0314 	add.w	r3, r7, #20
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	605a      	str	r2, [r3, #4]
 8004b98:	609a      	str	r2, [r3, #8]
 8004b9a:	60da      	str	r2, [r3, #12]
 8004b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	4b6b      	ldr	r3, [pc, #428]	; (8004d50 <MX_GPIO_Init+0x1c8>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	4a6a      	ldr	r2, [pc, #424]	; (8004d50 <MX_GPIO_Init+0x1c8>)
 8004ba8:	f043 0304 	orr.w	r3, r3, #4
 8004bac:	6313      	str	r3, [r2, #48]	; 0x30
 8004bae:	4b68      	ldr	r3, [pc, #416]	; (8004d50 <MX_GPIO_Init+0x1c8>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	4b64      	ldr	r3, [pc, #400]	; (8004d50 <MX_GPIO_Init+0x1c8>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	4a63      	ldr	r2, [pc, #396]	; (8004d50 <MX_GPIO_Init+0x1c8>)
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bca:	4b61      	ldr	r3, [pc, #388]	; (8004d50 <MX_GPIO_Init+0x1c8>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	4b5d      	ldr	r3, [pc, #372]	; (8004d50 <MX_GPIO_Init+0x1c8>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	4a5c      	ldr	r2, [pc, #368]	; (8004d50 <MX_GPIO_Init+0x1c8>)
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	6313      	str	r3, [r2, #48]	; 0x30
 8004be6:	4b5a      	ldr	r3, [pc, #360]	; (8004d50 <MX_GPIO_Init+0x1c8>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	4b56      	ldr	r3, [pc, #344]	; (8004d50 <MX_GPIO_Init+0x1c8>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	4a55      	ldr	r2, [pc, #340]	; (8004d50 <MX_GPIO_Init+0x1c8>)
 8004bfc:	f043 0308 	orr.w	r3, r3, #8
 8004c00:	6313      	str	r3, [r2, #48]	; 0x30
 8004c02:	4b53      	ldr	r3, [pc, #332]	; (8004d50 <MX_GPIO_Init+0x1c8>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin, GPIO_PIN_RESET);
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2143      	movs	r1, #67	; 0x43
 8004c12:	4850      	ldr	r0, [pc, #320]	; (8004d54 <MX_GPIO_Init+0x1cc>)
 8004c14:	f000 ffc4 	bl	8005ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f240 711b 	movw	r1, #1819	; 0x71b
 8004c1e:	484e      	ldr	r0, [pc, #312]	; (8004d58 <MX_GPIO_Init+0x1d0>)
 8004c20:	f000 ffbe 	bl	8005ba0 <HAL_GPIO_WritePin>
                          |USB_RENUM_Pin|DBG_OUT_TX_Pin|DBG_OUT_RX_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|AUX_POWER_Pin, GPIO_PIN_RESET);
 8004c24:	2200      	movs	r2, #0
 8004c26:	2123      	movs	r1, #35	; 0x23
 8004c28:	484c      	ldr	r0, [pc, #304]	; (8004d5c <MX_GPIO_Init+0x1d4>)
 8004c2a:	f000 ffb9 	bl	8005ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_POWER_Pin EPD_SPI_CS_Pin SDIO_POWER_Pin */
  GPIO_InitStruct.Pin = EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin;
 8004c2e:	2343      	movs	r3, #67	; 0x43
 8004c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c32:	2301      	movs	r3, #1
 8004c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c3e:	f107 0314 	add.w	r3, r7, #20
 8004c42:	4619      	mov	r1, r3
 8004c44:	4843      	ldr	r0, [pc, #268]	; (8004d54 <MX_GPIO_Init+0x1cc>)
 8004c46:	f000 fe11 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DISCHARGE_Pin EPD_NRST_Pin RFID_POWER_Pin RF_SPI_BSS_Pin 
                           USB_RENUM_Pin DBG_OUT_TX_Pin DBG_OUT_RX_Pin */
  GPIO_InitStruct.Pin = EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 8004c4a:	f240 731b 	movw	r3, #1819	; 0x71b
 8004c4e:	617b      	str	r3, [r7, #20]
                          |USB_RENUM_Pin|DBG_OUT_TX_Pin|DBG_OUT_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c50:	2301      	movs	r3, #1
 8004c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c5c:	f107 0314 	add.w	r3, r7, #20
 8004c60:	4619      	mov	r1, r3
 8004c62:	483d      	ldr	r0, [pc, #244]	; (8004d58 <MX_GPIO_Init+0x1d0>)
 8004c64:	f000 fe02 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8004c68:	2304      	movs	r3, #4
 8004c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8004c74:	f107 0314 	add.w	r3, r7, #20
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4837      	ldr	r0, [pc, #220]	; (8004d58 <MX_GPIO_Init+0x1d0>)
 8004c7c:	f000 fdf6 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 8004c80:	2310      	movs	r3, #16
 8004c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c84:	4b36      	ldr	r3, [pc, #216]	; (8004d60 <MX_GPIO_Init+0x1d8>)
 8004c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004c8c:	f107 0314 	add.w	r3, r7, #20
 8004c90:	4619      	mov	r1, r3
 8004c92:	4830      	ldr	r0, [pc, #192]	; (8004d54 <MX_GPIO_Init+0x1cc>)
 8004c94:	f000 fdea 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin AUX_POWER_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|AUX_POWER_Pin;
 8004c98:	2323      	movs	r3, #35	; 0x23
 8004c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca8:	f107 0314 	add.w	r3, r7, #20
 8004cac:	4619      	mov	r1, r3
 8004cae:	482b      	ldr	r0, [pc, #172]	; (8004d5c <MX_GPIO_Init+0x1d4>)
 8004cb0:	f000 fddc 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pins : B_INPUT1_Pin B_INPUT2_Pin B_INPUT3_Pin */
  GPIO_InitStruct.Pin = B_INPUT1_Pin|B_INPUT2_Pin|B_INPUT3_Pin;
 8004cb4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004cba:	4b2a      	ldr	r3, [pc, #168]	; (8004d64 <MX_GPIO_Init+0x1dc>)
 8004cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cc2:	f107 0314 	add.w	r3, r7, #20
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4824      	ldr	r0, [pc, #144]	; (8004d5c <MX_GPIO_Init+0x1d4>)
 8004cca:	f000 fdcf 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004cd2:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <MX_GPIO_Init+0x1dc>)
 8004cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8004cda:	f107 0314 	add.w	r3, r7, #20
 8004cde:	4619      	mov	r1, r3
 8004ce0:	481c      	ldr	r0, [pc, #112]	; (8004d54 <MX_GPIO_Init+0x1cc>)
 8004ce2:	f000 fdc3 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : TC_SIGNAL_Pin */
  GPIO_InitStruct.Pin = TC_SIGNAL_Pin;
 8004ce6:	2310      	movs	r3, #16
 8004ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TC_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8004cf2:	f107 0314 	add.w	r3, r7, #20
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4818      	ldr	r0, [pc, #96]	; (8004d5c <MX_GPIO_Init+0x1d4>)
 8004cfa:	f000 fdb7 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP_IRQ_Pin LOW_BAT_IRQ_Pin */
  GPIO_InitStruct.Pin = TEMP_IRQ_Pin|LOW_BAT_IRQ_Pin;
 8004cfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d04:	4b16      	ldr	r3, [pc, #88]	; (8004d60 <MX_GPIO_Init+0x1d8>)
 8004d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0c:	f107 0314 	add.w	r3, r7, #20
 8004d10:	4619      	mov	r1, r3
 8004d12:	4812      	ldr	r0, [pc, #72]	; (8004d5c <MX_GPIO_Init+0x1d4>)
 8004d14:	f000 fdaa 	bl	800586c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	200a      	movs	r0, #10
 8004d1e:	f000 fd4c 	bl	80057ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004d22:	200a      	movs	r0, #10
 8004d24:	f000 fd65 	bl	80057f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	2017      	movs	r0, #23
 8004d2e:	f000 fd44 	bl	80057ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d32:	2017      	movs	r0, #23
 8004d34:	f000 fd5d 	bl	80057f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	2028      	movs	r0, #40	; 0x28
 8004d3e:	f000 fd3c 	bl	80057ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d42:	2028      	movs	r0, #40	; 0x28
 8004d44:	f000 fd55 	bl	80057f2 <HAL_NVIC_EnableIRQ>

}
 8004d48:	bf00      	nop
 8004d4a:	3728      	adds	r7, #40	; 0x28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40023800 	.word	0x40023800
 8004d54:	40020800 	.word	0x40020800
 8004d58:	40020000 	.word	0x40020000
 8004d5c:	40020400 	.word	0x40020400
 8004d60:	10110000 	.word	0x10110000
 8004d64:	10310000 	.word	0x10310000

08004d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004d6c:	bf00      	nop
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <HAL_MspInit+0x4c>)
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	4a0f      	ldr	r2, [pc, #60]	; (8004dc4 <HAL_MspInit+0x4c>)
 8004d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <HAL_MspInit+0x4c>)
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	603b      	str	r3, [r7, #0]
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_MspInit+0x4c>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <HAL_MspInit+0x4c>)
 8004da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da8:	6413      	str	r3, [r2, #64]	; 0x40
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_MspInit+0x4c>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800

08004dc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	; 0x28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd0:	f107 0314 	add.w	r3, r7, #20
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	609a      	str	r2, [r3, #8]
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a19      	ldr	r2, [pc, #100]	; (8004e4c <HAL_I2C_MspInit+0x84>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d12b      	bne.n	8004e42 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <HAL_I2C_MspInit+0x88>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <HAL_I2C_MspInit+0x88>)
 8004df4:	f043 0302 	orr.w	r3, r3, #2
 8004df8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <HAL_I2C_MspInit+0x88>)
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = AUX_I2C_SCL_Pin|AUX_I2C_SDA_Pin;
 8004e06:	23c0      	movs	r3, #192	; 0xc0
 8004e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e0a:	2312      	movs	r3, #18
 8004e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e12:	2303      	movs	r3, #3
 8004e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e16:	2304      	movs	r3, #4
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e1a:	f107 0314 	add.w	r3, r7, #20
 8004e1e:	4619      	mov	r1, r3
 8004e20:	480c      	ldr	r0, [pc, #48]	; (8004e54 <HAL_I2C_MspInit+0x8c>)
 8004e22:	f000 fd23 	bl	800586c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <HAL_I2C_MspInit+0x88>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <HAL_I2C_MspInit+0x88>)
 8004e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e34:	6413      	str	r3, [r2, #64]	; 0x40
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <HAL_I2C_MspInit+0x88>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004e42:	bf00      	nop
 8004e44:	3728      	adds	r7, #40	; 0x28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40005400 	.word	0x40005400
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40020400 	.word	0x40020400

08004e58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a05      	ldr	r2, [pc, #20]	; (8004e7c <HAL_RTC_MspInit+0x24>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d102      	bne.n	8004e70 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RTC_MspInit+0x28>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	40002800 	.word	0x40002800
 8004e80:	42470e3c 	.word	0x42470e3c

08004e84 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08c      	sub	sp, #48	; 0x30
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e8c:	f107 031c 	add.w	r3, r7, #28
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a3c      	ldr	r2, [pc, #240]	; (8004f94 <HAL_SD_MspInit+0x110>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d171      	bne.n	8004f8a <HAL_SD_MspInit+0x106>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	4b3b      	ldr	r3, [pc, #236]	; (8004f98 <HAL_SD_MspInit+0x114>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	4a3a      	ldr	r2, [pc, #232]	; (8004f98 <HAL_SD_MspInit+0x114>)
 8004eb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb6:	4b38      	ldr	r3, [pc, #224]	; (8004f98 <HAL_SD_MspInit+0x114>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	4b34      	ldr	r3, [pc, #208]	; (8004f98 <HAL_SD_MspInit+0x114>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	4a33      	ldr	r2, [pc, #204]	; (8004f98 <HAL_SD_MspInit+0x114>)
 8004ecc:	f043 0302 	orr.w	r3, r3, #2
 8004ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed2:	4b31      	ldr	r3, [pc, #196]	; (8004f98 <HAL_SD_MspInit+0x114>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	4b2d      	ldr	r3, [pc, #180]	; (8004f98 <HAL_SD_MspInit+0x114>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	4a2c      	ldr	r2, [pc, #176]	; (8004f98 <HAL_SD_MspInit+0x114>)
 8004ee8:	f043 0304 	orr.w	r3, r3, #4
 8004eec:	6313      	str	r3, [r2, #48]	; 0x30
 8004eee:	4b2a      	ldr	r3, [pc, #168]	; (8004f98 <HAL_SD_MspInit+0x114>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <HAL_SD_MspInit+0x114>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	4a25      	ldr	r2, [pc, #148]	; (8004f98 <HAL_SD_MspInit+0x114>)
 8004f04:	f043 0308 	orr.w	r3, r3, #8
 8004f08:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0a:	4b23      	ldr	r3, [pc, #140]	; (8004f98 <HAL_SD_MspInit+0x114>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f24:	2303      	movs	r3, #3
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004f28:	230c      	movs	r3, #12
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f2c:	f107 031c 	add.w	r3, r7, #28
 8004f30:	4619      	mov	r1, r3
 8004f32:	481a      	ldr	r0, [pc, #104]	; (8004f9c <HAL_SD_MspInit+0x118>)
 8004f34:	f000 fc9a 	bl	800586c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8004f38:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f46:	2303      	movs	r3, #3
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f4e:	f107 031c 	add.w	r3, r7, #28
 8004f52:	4619      	mov	r1, r3
 8004f54:	4812      	ldr	r0, [pc, #72]	; (8004fa0 <HAL_SD_MspInit+0x11c>)
 8004f56:	f000 fc89 	bl	800586c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f5a:	2304      	movs	r3, #4
 8004f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f5e:	2302      	movs	r3, #2
 8004f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f66:	2303      	movs	r3, #3
 8004f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f6e:	f107 031c 	add.w	r3, r7, #28
 8004f72:	4619      	mov	r1, r3
 8004f74:	480b      	ldr	r0, [pc, #44]	; (8004fa4 <HAL_SD_MspInit+0x120>)
 8004f76:	f000 fc79 	bl	800586c <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	2031      	movs	r0, #49	; 0x31
 8004f80:	f000 fc1b 	bl	80057ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004f84:	2031      	movs	r0, #49	; 0x31
 8004f86:	f000 fc34 	bl	80057f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004f8a:	bf00      	nop
 8004f8c:	3730      	adds	r7, #48	; 0x30
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	40020400 	.word	0x40020400
 8004fa0:	40020800 	.word	0x40020800
 8004fa4:	40020c00 	.word	0x40020c00

08004fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	; 0x30
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb0:	f107 031c 	add.w	r3, r7, #28
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a45      	ldr	r2, [pc, #276]	; (80050dc <HAL_SPI_MspInit+0x134>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d134      	bne.n	8005034 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61bb      	str	r3, [r7, #24]
 8004fce:	4b44      	ldr	r3, [pc, #272]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	4a43      	ldr	r2, [pc, #268]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8004fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fda:	4b41      	ldr	r3, [pc, #260]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	4b3d      	ldr	r3, [pc, #244]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	4a3c      	ldr	r2, [pc, #240]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8004ff0:	f043 0301 	orr.w	r3, r3, #1
 8004ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff6:	4b3a      	ldr	r3, [pc, #232]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SPI_SCLK_Pin|RF_SPI_MISO_Pin|RF_SPI_MOSI_Pin;
 8005002:	23e0      	movs	r3, #224	; 0xe0
 8005004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005006:	2302      	movs	r3, #2
 8005008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500a:	2300      	movs	r3, #0
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800500e:	2303      	movs	r3, #3
 8005010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005012:	2305      	movs	r3, #5
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005016:	f107 031c 	add.w	r3, r7, #28
 800501a:	4619      	mov	r1, r3
 800501c:	4831      	ldr	r0, [pc, #196]	; (80050e4 <HAL_SPI_MspInit+0x13c>)
 800501e:	f000 fc25 	bl	800586c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005022:	2200      	movs	r2, #0
 8005024:	2100      	movs	r1, #0
 8005026:	2023      	movs	r0, #35	; 0x23
 8005028:	f000 fbc7 	bl	80057ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800502c:	2023      	movs	r0, #35	; 0x23
 800502e:	f000 fbe0 	bl	80057f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005032:	e04f      	b.n	80050d4 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <HAL_SPI_MspInit+0x140>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d14a      	bne.n	80050d4 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	4a26      	ldr	r2, [pc, #152]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8005048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800504c:	6413      	str	r3, [r2, #64]	; 0x40
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8005064:	f043 0304 	orr.w	r3, r3, #4
 8005068:	6313      	str	r3, [r2, #48]	; 0x30
 800506a:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8005080:	f043 0302 	orr.w	r3, r3, #2
 8005084:	6313      	str	r3, [r2, #48]	; 0x30
 8005086:	4b16      	ldr	r3, [pc, #88]	; (80050e0 <HAL_SPI_MspInit+0x138>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	60bb      	str	r3, [r7, #8]
 8005090:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EPD_SPI_MISO_Pin|EPD_SPI_MOSI_Pin;
 8005092:	230c      	movs	r3, #12
 8005094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005096:	2302      	movs	r3, #2
 8005098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509a:	2300      	movs	r3, #0
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800509e:	2303      	movs	r3, #3
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050a2:	2305      	movs	r3, #5
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050a6:	f107 031c 	add.w	r3, r7, #28
 80050aa:	4619      	mov	r1, r3
 80050ac:	480f      	ldr	r0, [pc, #60]	; (80050ec <HAL_SPI_MspInit+0x144>)
 80050ae:	f000 fbdd 	bl	800586c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80050b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b8:	2302      	movs	r3, #2
 80050ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c0:	2303      	movs	r3, #3
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050c4:	2305      	movs	r3, #5
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c8:	f107 031c 	add.w	r3, r7, #28
 80050cc:	4619      	mov	r1, r3
 80050ce:	4808      	ldr	r0, [pc, #32]	; (80050f0 <HAL_SPI_MspInit+0x148>)
 80050d0:	f000 fbcc 	bl	800586c <HAL_GPIO_Init>
}
 80050d4:	bf00      	nop
 80050d6:	3730      	adds	r7, #48	; 0x30
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40013000 	.word	0x40013000
 80050e0:	40023800 	.word	0x40023800
 80050e4:	40020000 	.word	0x40020000
 80050e8:	40003800 	.word	0x40003800
 80050ec:	40020800 	.word	0x40020800
 80050f0:	40020400 	.word	0x40020400

080050f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050f8:	bf00      	nop
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005102:	b480      	push	{r7}
 8005104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005106:	e7fe      	b.n	8005106 <HardFault_Handler+0x4>

08005108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800510c:	e7fe      	b.n	800510c <MemManage_Handler+0x4>

0800510e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800510e:	b480      	push	{r7}
 8005110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005112:	e7fe      	b.n	8005112 <BusFault_Handler+0x4>

08005114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005118:	e7fe      	b.n	8005118 <UsageFault_Handler+0x4>

0800511a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800511a:	b480      	push	{r7}
 800511c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800511e:	bf00      	nop
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005136:	b480      	push	{r7}
 8005138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800513a:	bf00      	nop
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005148:	f000 fa1a 	bl	8005580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800514c:	bf00      	nop
 800514e:	bd80      	pop	{r7, pc}

08005150 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005154:	2010      	movs	r0, #16
 8005156:	f000 fd3d 	bl	8005bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  st25r3916Isr();
 800515a:	f00c f883 	bl	8011264 <st25r3916Isr>
  /* USER CODE END EXTI4_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint32_t irq5tickCnt;
	static uint32_t irq5tickOffset = 0;
	// Software Debounce
	irq5tickCnt = HAL_GetTick();
 800516a:	f000 fa1d 	bl	80055a8 <HAL_GetTick>
 800516e:	6078      	str	r0, [r7, #4]

	if ((irq5tickCnt - irq5tickOffset) > 10) {
 8005170:	4b16      	ldr	r3, [pc, #88]	; (80051cc <EXTI9_5_IRQHandler+0x68>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b0a      	cmp	r3, #10
 800517a:	d918      	bls.n	80051ae <EXTI9_5_IRQHandler+0x4a>
		irq5tickOffset = irq5tickCnt;
 800517c:	4a13      	ldr	r2, [pc, #76]	; (80051cc <EXTI9_5_IRQHandler+0x68>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6013      	str	r3, [r2, #0]
		// Service the SD Card Insert/Remove
		if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_RESET) {
 8005182:	2180      	movs	r1, #128	; 0x80
 8005184:	4812      	ldr	r0, [pc, #72]	; (80051d0 <EXTI9_5_IRQHandler+0x6c>)
 8005186:	f000 fcf3 	bl	8005b70 <HAL_GPIO_ReadPin>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d107      	bne.n	80051a0 <EXTI9_5_IRQHandler+0x3c>
			// The card has been inserted. Init FatFs/Logger.
			isr_flags |= (isr_flags_t) INIT_FAT_FS;
 8005190:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <EXTI9_5_IRQHandler+0x70>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	b2da      	uxtb	r2, r3
 800519a:	4b0e      	ldr	r3, [pc, #56]	; (80051d4 <EXTI9_5_IRQHandler+0x70>)
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	e006      	b.n	80051ae <EXTI9_5_IRQHandler+0x4a>
		} else {
			// The card has been removed.  Deinit FatFs/Logger.
			isr_flags |= (isr_flags_t) DEINIT_FAT_FS;
 80051a0:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <EXTI9_5_IRQHandler+0x70>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	f043 0302 	orr.w	r3, r3, #2
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <EXTI9_5_IRQHandler+0x70>)
 80051ac:	701a      	strb	r2, [r3, #0]
		}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80051ae:	2080      	movs	r0, #128	; 0x80
 80051b0:	f000 fd10 	bl	8005bd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80051b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80051b8:	f000 fd0c 	bl	8005bd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80051bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80051c0:	f000 fd08 	bl	8005bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	2000072c 	.word	0x2000072c
 80051d0:	40020800 	.word	0x40020800
 80051d4:	20000eb4 	.word	0x20000eb4

080051d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80051dc:	4802      	ldr	r0, [pc, #8]	; (80051e8 <SPI1_IRQHandler+0x10>)
 80051de:	f005 fa75 	bl	800a6cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	200010e8 	.word	0x200010e8

080051ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	static uint32_t tickStart, tickEnd = 0; // Interval Tracking
	static uint8_t btn1flag, btn2flag, btn3flag = 0;

	// Check Pin States
	if (HAL_GPIO_ReadPin(B_INPUT1_GPIO_Port, B_INPUT1_Pin) == GPIO_PIN_SET) {
 80051f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051f4:	4872      	ldr	r0, [pc, #456]	; (80053c0 <EXTI15_10_IRQHandler+0x1d4>)
 80051f6:	f000 fcbb 	bl	8005b70 <HAL_GPIO_ReadPin>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d10b      	bne.n	8005218 <EXTI15_10_IRQHandler+0x2c>
		// Button 1 Initial Press
		btn1flag = 1;
 8005200:	4b70      	ldr	r3, [pc, #448]	; (80053c4 <EXTI15_10_IRQHandler+0x1d8>)
 8005202:	2201      	movs	r2, #1
 8005204:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 8005206:	f000 f9cf 	bl	80055a8 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	4b6e      	ldr	r3, [pc, #440]	; (80053c8 <EXTI15_10_IRQHandler+0x1dc>)
 800520e:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 8005210:	4b6d      	ldr	r3, [pc, #436]	; (80053c8 <EXTI15_10_IRQHandler+0x1dc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a6d      	ldr	r2, [pc, #436]	; (80053cc <EXTI15_10_IRQHandler+0x1e0>)
 8005216:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(B_INPUT2_GPIO_Port, B_INPUT2_Pin) == GPIO_PIN_SET) {
 8005218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800521c:	4868      	ldr	r0, [pc, #416]	; (80053c0 <EXTI15_10_IRQHandler+0x1d4>)
 800521e:	f000 fca7 	bl	8005b70 <HAL_GPIO_ReadPin>
 8005222:	4603      	mov	r3, r0
 8005224:	2b01      	cmp	r3, #1
 8005226:	d10b      	bne.n	8005240 <EXTI15_10_IRQHandler+0x54>
		// Button 2 Initial Press
		btn2flag = 1;
 8005228:	4b69      	ldr	r3, [pc, #420]	; (80053d0 <EXTI15_10_IRQHandler+0x1e4>)
 800522a:	2201      	movs	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 800522e:	f000 f9bb 	bl	80055a8 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	4b64      	ldr	r3, [pc, #400]	; (80053c8 <EXTI15_10_IRQHandler+0x1dc>)
 8005236:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 8005238:	4b63      	ldr	r3, [pc, #396]	; (80053c8 <EXTI15_10_IRQHandler+0x1dc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a63      	ldr	r2, [pc, #396]	; (80053cc <EXTI15_10_IRQHandler+0x1e0>)
 800523e:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(B_INPUT3_GPIO_Port, B_INPUT3_Pin) == GPIO_PIN_SET) {
 8005240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005244:	485e      	ldr	r0, [pc, #376]	; (80053c0 <EXTI15_10_IRQHandler+0x1d4>)
 8005246:	f000 fc93 	bl	8005b70 <HAL_GPIO_ReadPin>
 800524a:	4603      	mov	r3, r0
 800524c:	2b01      	cmp	r3, #1
 800524e:	d10b      	bne.n	8005268 <EXTI15_10_IRQHandler+0x7c>
		// Button 3 Initial Press
		btn3flag = 1;
 8005250:	4b60      	ldr	r3, [pc, #384]	; (80053d4 <EXTI15_10_IRQHandler+0x1e8>)
 8005252:	2201      	movs	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
		tickStart = HAL_GetTick();
 8005256:	f000 f9a7 	bl	80055a8 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	4b5a      	ldr	r3, [pc, #360]	; (80053c8 <EXTI15_10_IRQHandler+0x1dc>)
 800525e:	601a      	str	r2, [r3, #0]
		tickEnd = tickStart;
 8005260:	4b59      	ldr	r3, [pc, #356]	; (80053c8 <EXTI15_10_IRQHandler+0x1dc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a59      	ldr	r2, [pc, #356]	; (80053cc <EXTI15_10_IRQHandler+0x1e0>)
 8005266:	6013      	str	r3, [r2, #0]
	}

	if (btn1flag) {
 8005268:	4b56      	ldr	r3, [pc, #344]	; (80053c4 <EXTI15_10_IRQHandler+0x1d8>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00c      	beq.n	800528a <EXTI15_10_IRQHandler+0x9e>
		if (HAL_GPIO_ReadPin(B_INPUT1_GPIO_Port, B_INPUT1_Pin) == GPIO_PIN_RESET) {
 8005270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005274:	4852      	ldr	r0, [pc, #328]	; (80053c0 <EXTI15_10_IRQHandler+0x1d4>)
 8005276:	f000 fc7b 	bl	8005b70 <HAL_GPIO_ReadPin>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d104      	bne.n	800528a <EXTI15_10_IRQHandler+0x9e>
			// Button 1 was released
			tickEnd = HAL_GetTick();
 8005280:	f000 f992 	bl	80055a8 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	4b51      	ldr	r3, [pc, #324]	; (80053cc <EXTI15_10_IRQHandler+0x1e0>)
 8005288:	601a      	str	r2, [r3, #0]
		}
	}
	if (btn2flag) {
 800528a:	4b51      	ldr	r3, [pc, #324]	; (80053d0 <EXTI15_10_IRQHandler+0x1e4>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <EXTI15_10_IRQHandler+0xc0>
		if (HAL_GPIO_ReadPin(B_INPUT2_GPIO_Port, B_INPUT2_Pin) == GPIO_PIN_RESET) {
 8005292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005296:	484a      	ldr	r0, [pc, #296]	; (80053c0 <EXTI15_10_IRQHandler+0x1d4>)
 8005298:	f000 fc6a 	bl	8005b70 <HAL_GPIO_ReadPin>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d104      	bne.n	80052ac <EXTI15_10_IRQHandler+0xc0>
			// Button 2 was released
			tickEnd = HAL_GetTick();
 80052a2:	f000 f981 	bl	80055a8 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	4b48      	ldr	r3, [pc, #288]	; (80053cc <EXTI15_10_IRQHandler+0x1e0>)
 80052aa:	601a      	str	r2, [r3, #0]
		}
	}
	if (btn3flag) {
 80052ac:	4b49      	ldr	r3, [pc, #292]	; (80053d4 <EXTI15_10_IRQHandler+0x1e8>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00c      	beq.n	80052ce <EXTI15_10_IRQHandler+0xe2>
		if (HAL_GPIO_ReadPin(B_INPUT3_GPIO_Port, B_INPUT3_Pin) == GPIO_PIN_RESET) {
 80052b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052b8:	4841      	ldr	r0, [pc, #260]	; (80053c0 <EXTI15_10_IRQHandler+0x1d4>)
 80052ba:	f000 fc59 	bl	8005b70 <HAL_GPIO_ReadPin>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <EXTI15_10_IRQHandler+0xe2>
			// Button 3 was released
			tickEnd = HAL_GetTick();
 80052c4:	f000 f970 	bl	80055a8 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b40      	ldr	r3, [pc, #256]	; (80053cc <EXTI15_10_IRQHandler+0x1e0>)
 80052cc:	601a      	str	r2, [r3, #0]
		}
	}

	// Evaluate Results
	if (tickEnd - tickStart > 0) {
 80052ce:	4b3f      	ldr	r3, [pc, #252]	; (80053cc <EXTI15_10_IRQHandler+0x1e0>)
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	4b3d      	ldr	r3, [pc, #244]	; (80053c8 <EXTI15_10_IRQHandler+0x1dc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d064      	beq.n	80053a4 <EXTI15_10_IRQHandler+0x1b8>
		// Avoid 1st event
		if (tickEnd - tickStart <= 1000) {
 80052da:	4b3c      	ldr	r3, [pc, #240]	; (80053cc <EXTI15_10_IRQHandler+0x1e0>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b3a      	ldr	r3, [pc, #232]	; (80053c8 <EXTI15_10_IRQHandler+0x1dc>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052e8:	d829      	bhi.n	800533e <EXTI15_10_IRQHandler+0x152>
			// Short press
			if (btn1flag) {
 80052ea:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <EXTI15_10_IRQHandler+0x1d8>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <EXTI15_10_IRQHandler+0x11a>
				isr_flags |= (isr_flags_t) BTN_1_SH_PRESS;
 80052f2:	4b39      	ldr	r3, [pc, #228]	; (80053d8 <EXTI15_10_IRQHandler+0x1ec>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	f043 0304 	orr.w	r3, r3, #4
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <EXTI15_10_IRQHandler+0x1ec>)
 80052fe:	701a      	strb	r2, [r3, #0]
				btn1flag = 0;
 8005300:	4b30      	ldr	r3, [pc, #192]	; (80053c4 <EXTI15_10_IRQHandler+0x1d8>)
 8005302:	2200      	movs	r2, #0
 8005304:	701a      	strb	r2, [r3, #0]
			}
			if (btn2flag) {
 8005306:	4b32      	ldr	r3, [pc, #200]	; (80053d0 <EXTI15_10_IRQHandler+0x1e4>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <EXTI15_10_IRQHandler+0x136>
				isr_flags |= (isr_flags_t) BTN_2_SH_PRESS;
 800530e:	4b32      	ldr	r3, [pc, #200]	; (80053d8 <EXTI15_10_IRQHandler+0x1ec>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	f043 0310 	orr.w	r3, r3, #16
 8005316:	b2da      	uxtb	r2, r3
 8005318:	4b2f      	ldr	r3, [pc, #188]	; (80053d8 <EXTI15_10_IRQHandler+0x1ec>)
 800531a:	701a      	strb	r2, [r3, #0]
				btn2flag = 0;
 800531c:	4b2c      	ldr	r3, [pc, #176]	; (80053d0 <EXTI15_10_IRQHandler+0x1e4>)
 800531e:	2200      	movs	r2, #0
 8005320:	701a      	strb	r2, [r3, #0]
			}
			if (btn3flag) {
 8005322:	4b2c      	ldr	r3, [pc, #176]	; (80053d4 <EXTI15_10_IRQHandler+0x1e8>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d009      	beq.n	800533e <EXTI15_10_IRQHandler+0x152>
				isr_flags |= (isr_flags_t) BTN_3_SH_PRESS;
 800532a:	4b2b      	ldr	r3, [pc, #172]	; (80053d8 <EXTI15_10_IRQHandler+0x1ec>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005332:	b2da      	uxtb	r2, r3
 8005334:	4b28      	ldr	r3, [pc, #160]	; (80053d8 <EXTI15_10_IRQHandler+0x1ec>)
 8005336:	701a      	strb	r2, [r3, #0]
				btn3flag = 0;
 8005338:	4b26      	ldr	r3, [pc, #152]	; (80053d4 <EXTI15_10_IRQHandler+0x1e8>)
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]
			}
		}

		if (HAL_GetTick() - tickStart > 1000) {
 800533e:	f000 f933 	bl	80055a8 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	4b20      	ldr	r3, [pc, #128]	; (80053c8 <EXTI15_10_IRQHandler+0x1dc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800534e:	d929      	bls.n	80053a4 <EXTI15_10_IRQHandler+0x1b8>
			// Long press
			if (btn1flag) {
 8005350:	4b1c      	ldr	r3, [pc, #112]	; (80053c4 <EXTI15_10_IRQHandler+0x1d8>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d009      	beq.n	800536c <EXTI15_10_IRQHandler+0x180>
				isr_flags |= (isr_flags_t) BTN_1_LG_PRESS;
 8005358:	4b1f      	ldr	r3, [pc, #124]	; (80053d8 <EXTI15_10_IRQHandler+0x1ec>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	f043 0308 	orr.w	r3, r3, #8
 8005360:	b2da      	uxtb	r2, r3
 8005362:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <EXTI15_10_IRQHandler+0x1ec>)
 8005364:	701a      	strb	r2, [r3, #0]
				btn1flag = 0;
 8005366:	4b17      	ldr	r3, [pc, #92]	; (80053c4 <EXTI15_10_IRQHandler+0x1d8>)
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
			}
			if (btn2flag) {
 800536c:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <EXTI15_10_IRQHandler+0x1e4>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d009      	beq.n	8005388 <EXTI15_10_IRQHandler+0x19c>
				isr_flags |= (isr_flags_t) BTN_2_LG_PRESS;
 8005374:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <EXTI15_10_IRQHandler+0x1ec>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	f043 0320 	orr.w	r3, r3, #32
 800537c:	b2da      	uxtb	r2, r3
 800537e:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <EXTI15_10_IRQHandler+0x1ec>)
 8005380:	701a      	strb	r2, [r3, #0]
				btn2flag = 0;
 8005382:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <EXTI15_10_IRQHandler+0x1e4>)
 8005384:	2200      	movs	r2, #0
 8005386:	701a      	strb	r2, [r3, #0]
			}
			if (btn3flag) {
 8005388:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <EXTI15_10_IRQHandler+0x1e8>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <EXTI15_10_IRQHandler+0x1b8>
				isr_flags |= (isr_flags_t) BTN_3_LG_PRESS;
 8005390:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <EXTI15_10_IRQHandler+0x1ec>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005398:	b2da      	uxtb	r2, r3
 800539a:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <EXTI15_10_IRQHandler+0x1ec>)
 800539c:	701a      	strb	r2, [r3, #0]
				btn3flag = 0;
 800539e:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <EXTI15_10_IRQHandler+0x1e8>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80053a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80053a8:	f000 fc14 	bl	8005bd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80053ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80053b0:	f000 fc10 	bl	8005bd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80053b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80053b8:	f000 fc0c 	bl	8005bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80053bc:	bf00      	nop
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40020400 	.word	0x40020400
 80053c4:	20000730 	.word	0x20000730
 80053c8:	20000734 	.word	0x20000734
 80053cc:	20000738 	.word	0x20000738
 80053d0:	2000073c 	.word	0x2000073c
 80053d4:	2000073d 	.word	0x2000073d
 80053d8:	20000eb4 	.word	0x20000eb4

080053dc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80053e0:	4802      	ldr	r0, [pc, #8]	; (80053ec <SDIO_IRQHandler+0x10>)
 80053e2:	f004 f821 	bl	8009428 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80053e6:	bf00      	nop
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20001064 	.word	0x20001064

080053f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80053f4:	4802      	ldr	r0, [pc, #8]	; (8005400 <OTG_FS_IRQHandler+0x10>)
 80053f6:	f001 fb41 	bl	8006a7c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80053fa:	bf00      	nop
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20002450 	.word	0x20002450

08005404 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800540c:	4b11      	ldr	r3, [pc, #68]	; (8005454 <_sbrk+0x50>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d102      	bne.n	800541a <_sbrk+0x16>
		heap_end = &end;
 8005414:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <_sbrk+0x50>)
 8005416:	4a10      	ldr	r2, [pc, #64]	; (8005458 <_sbrk+0x54>)
 8005418:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800541a:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <_sbrk+0x50>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <_sbrk+0x50>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4413      	add	r3, r2
 8005428:	466a      	mov	r2, sp
 800542a:	4293      	cmp	r3, r2
 800542c:	d907      	bls.n	800543e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800542e:	f011 ff1f 	bl	8017270 <__errno>
 8005432:	4602      	mov	r2, r0
 8005434:	230c      	movs	r3, #12
 8005436:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005438:	f04f 33ff 	mov.w	r3, #4294967295
 800543c:	e006      	b.n	800544c <_sbrk+0x48>
	}

	heap_end += incr;
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <_sbrk+0x50>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	4a03      	ldr	r2, [pc, #12]	; (8005454 <_sbrk+0x50>)
 8005448:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800544a:	68fb      	ldr	r3, [r7, #12]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000740 	.word	0x20000740
 8005458:	20002860 	.word	0x20002860

0800545c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005460:	4b08      	ldr	r3, [pc, #32]	; (8005484 <SystemInit+0x28>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	4a07      	ldr	r2, [pc, #28]	; (8005484 <SystemInit+0x28>)
 8005468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800546c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005470:	4b04      	ldr	r3, [pc, #16]	; (8005484 <SystemInit+0x28>)
 8005472:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005476:	609a      	str	r2, [r3, #8]
#endif
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	e000ed00 	.word	0xe000ed00

08005488 <Reset_Handler>:
 8005488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054c0 <LoopFillZerobss+0x14>
 800548c:	2100      	movs	r1, #0
 800548e:	e003      	b.n	8005498 <LoopCopyDataInit>

08005490 <CopyDataInit>:
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <LoopFillZerobss+0x18>)
 8005492:	585b      	ldr	r3, [r3, r1]
 8005494:	5043      	str	r3, [r0, r1]
 8005496:	3104      	adds	r1, #4

08005498 <LoopCopyDataInit>:
 8005498:	480b      	ldr	r0, [pc, #44]	; (80054c8 <LoopFillZerobss+0x1c>)
 800549a:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <LoopFillZerobss+0x20>)
 800549c:	1842      	adds	r2, r0, r1
 800549e:	429a      	cmp	r2, r3
 80054a0:	d3f6      	bcc.n	8005490 <CopyDataInit>
 80054a2:	4a0b      	ldr	r2, [pc, #44]	; (80054d0 <LoopFillZerobss+0x24>)
 80054a4:	e002      	b.n	80054ac <LoopFillZerobss>

080054a6 <FillZerobss>:
 80054a6:	2300      	movs	r3, #0
 80054a8:	f842 3b04 	str.w	r3, [r2], #4

080054ac <LoopFillZerobss>:
 80054ac:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <LoopFillZerobss+0x28>)
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d3f9      	bcc.n	80054a6 <FillZerobss>
 80054b2:	f7ff ffd3 	bl	800545c <SystemInit>
 80054b6:	f011 fee1 	bl	801727c <__libc_init_array>
 80054ba:	f7ff f9b5 	bl	8004828 <main>
 80054be:	4770      	bx	lr
 80054c0:	20020000 	.word	0x20020000
 80054c4:	0801be48 	.word	0x0801be48
 80054c8:	20000000 	.word	0x20000000
 80054cc:	2000023c 	.word	0x2000023c
 80054d0:	2000023c 	.word	0x2000023c
 80054d4:	2000285c 	.word	0x2000285c

080054d8 <ADC_IRQHandler>:
 80054d8:	e7fe      	b.n	80054d8 <ADC_IRQHandler>
	...

080054dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054e0:	4b0e      	ldr	r3, [pc, #56]	; (800551c <HAL_Init+0x40>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a0d      	ldr	r2, [pc, #52]	; (800551c <HAL_Init+0x40>)
 80054e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054ec:	4b0b      	ldr	r3, [pc, #44]	; (800551c <HAL_Init+0x40>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a0a      	ldr	r2, [pc, #40]	; (800551c <HAL_Init+0x40>)
 80054f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054f8:	4b08      	ldr	r3, [pc, #32]	; (800551c <HAL_Init+0x40>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a07      	ldr	r2, [pc, #28]	; (800551c <HAL_Init+0x40>)
 80054fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005504:	2003      	movs	r0, #3
 8005506:	f000 f94d 	bl	80057a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800550a:	2000      	movs	r0, #0
 800550c:	f000 f808 	bl	8005520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005510:	f7ff fc32 	bl	8004d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40023c00 	.word	0x40023c00

08005520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005528:	4b12      	ldr	r3, [pc, #72]	; (8005574 <HAL_InitTick+0x54>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b12      	ldr	r3, [pc, #72]	; (8005578 <HAL_InitTick+0x58>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	4619      	mov	r1, r3
 8005532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005536:	fbb3 f3f1 	udiv	r3, r3, r1
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f965 	bl	800580e <HAL_SYSTICK_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e00e      	b.n	800556c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b0f      	cmp	r3, #15
 8005552:	d80a      	bhi.n	800556a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005554:	2200      	movs	r2, #0
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	f000 f92d 	bl	80057ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005560:	4a06      	ldr	r2, [pc, #24]	; (800557c <HAL_InitTick+0x5c>)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	e000      	b.n	800556c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20000050 	.word	0x20000050
 8005578:	20000058 	.word	0x20000058
 800557c:	20000054 	.word	0x20000054

08005580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005584:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_IncTick+0x20>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_IncTick+0x24>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4413      	add	r3, r2
 8005590:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <HAL_IncTick+0x24>)
 8005592:	6013      	str	r3, [r2, #0]
}
 8005594:	bf00      	nop
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000058 	.word	0x20000058
 80055a4:	20001140 	.word	0x20001140

080055a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return uwTick;
 80055ac:	4b03      	ldr	r3, [pc, #12]	; (80055bc <HAL_GetTick+0x14>)
 80055ae:	681b      	ldr	r3, [r3, #0]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20001140 	.word	0x20001140

080055c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055c8:	f7ff ffee 	bl	80055a8 <HAL_GetTick>
 80055cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d005      	beq.n	80055e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <HAL_Delay+0x40>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055e6:	bf00      	nop
 80055e8:	f7ff ffde 	bl	80055a8 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d8f7      	bhi.n	80055e8 <HAL_Delay+0x28>
  {
  }
}
 80055f8:	bf00      	nop
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20000058 	.word	0x20000058

08005604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <__NVIC_SetPriorityGrouping+0x44>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005620:	4013      	ands	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800562c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005636:	4a04      	ldr	r2, [pc, #16]	; (8005648 <__NVIC_SetPriorityGrouping+0x44>)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	60d3      	str	r3, [r2, #12]
}
 800563c:	bf00      	nop
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005650:	4b04      	ldr	r3, [pc, #16]	; (8005664 <__NVIC_GetPriorityGrouping+0x18>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	0a1b      	lsrs	r3, r3, #8
 8005656:	f003 0307 	and.w	r3, r3, #7
}
 800565a:	4618      	mov	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	e000ed00 	.word	0xe000ed00

08005668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005676:	2b00      	cmp	r3, #0
 8005678:	db0b      	blt.n	8005692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	f003 021f 	and.w	r2, r3, #31
 8005680:	4907      	ldr	r1, [pc, #28]	; (80056a0 <__NVIC_EnableIRQ+0x38>)
 8005682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	2001      	movs	r0, #1
 800568a:	fa00 f202 	lsl.w	r2, r0, r2
 800568e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	e000e100 	.word	0xe000e100

080056a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	6039      	str	r1, [r7, #0]
 80056ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	db0a      	blt.n	80056ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	490c      	ldr	r1, [pc, #48]	; (80056f0 <__NVIC_SetPriority+0x4c>)
 80056be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c2:	0112      	lsls	r2, r2, #4
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	440b      	add	r3, r1
 80056c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056cc:	e00a      	b.n	80056e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4908      	ldr	r1, [pc, #32]	; (80056f4 <__NVIC_SetPriority+0x50>)
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	3b04      	subs	r3, #4
 80056dc:	0112      	lsls	r2, r2, #4
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	440b      	add	r3, r1
 80056e2:	761a      	strb	r2, [r3, #24]
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	e000e100 	.word	0xe000e100
 80056f4:	e000ed00 	.word	0xe000ed00

080056f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b089      	sub	sp, #36	; 0x24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f1c3 0307 	rsb	r3, r3, #7
 8005712:	2b04      	cmp	r3, #4
 8005714:	bf28      	it	cs
 8005716:	2304      	movcs	r3, #4
 8005718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	3304      	adds	r3, #4
 800571e:	2b06      	cmp	r3, #6
 8005720:	d902      	bls.n	8005728 <NVIC_EncodePriority+0x30>
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	3b03      	subs	r3, #3
 8005726:	e000      	b.n	800572a <NVIC_EncodePriority+0x32>
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800572c:	f04f 32ff 	mov.w	r2, #4294967295
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43da      	mvns	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	401a      	ands	r2, r3
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005740:	f04f 31ff 	mov.w	r1, #4294967295
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	fa01 f303 	lsl.w	r3, r1, r3
 800574a:	43d9      	mvns	r1, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005750:	4313      	orrs	r3, r2
         );
}
 8005752:	4618      	mov	r0, r3
 8005754:	3724      	adds	r7, #36	; 0x24
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
	...

08005760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3b01      	subs	r3, #1
 800576c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005770:	d301      	bcc.n	8005776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005772:	2301      	movs	r3, #1
 8005774:	e00f      	b.n	8005796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005776:	4a0a      	ldr	r2, [pc, #40]	; (80057a0 <SysTick_Config+0x40>)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3b01      	subs	r3, #1
 800577c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800577e:	210f      	movs	r1, #15
 8005780:	f04f 30ff 	mov.w	r0, #4294967295
 8005784:	f7ff ff8e 	bl	80056a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <SysTick_Config+0x40>)
 800578a:	2200      	movs	r2, #0
 800578c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <SysTick_Config+0x40>)
 8005790:	2207      	movs	r2, #7
 8005792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	e000e010 	.word	0xe000e010

080057a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff ff29 	bl	8005604 <__NVIC_SetPriorityGrouping>
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b086      	sub	sp, #24
 80057be:	af00      	add	r7, sp, #0
 80057c0:	4603      	mov	r3, r0
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	607a      	str	r2, [r7, #4]
 80057c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057cc:	f7ff ff3e 	bl	800564c <__NVIC_GetPriorityGrouping>
 80057d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	6978      	ldr	r0, [r7, #20]
 80057d8:	f7ff ff8e 	bl	80056f8 <NVIC_EncodePriority>
 80057dc:	4602      	mov	r2, r0
 80057de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057e2:	4611      	mov	r1, r2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff ff5d 	bl	80056a4 <__NVIC_SetPriority>
}
 80057ea:	bf00      	nop
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	4603      	mov	r3, r0
 80057fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff ff31 	bl	8005668 <__NVIC_EnableIRQ>
}
 8005806:	bf00      	nop
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff ffa2 	bl	8005760 <SysTick_Config>
 800581c:	4603      	mov	r3, r0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d004      	beq.n	8005844 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2280      	movs	r2, #128	; 0x80
 800583e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e00c      	b.n	800585e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2205      	movs	r2, #5
 8005848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800586c:	b480      	push	{r7}
 800586e:	b089      	sub	sp, #36	; 0x24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800587e:	2300      	movs	r3, #0
 8005880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
 8005886:	e159      	b.n	8005b3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005888:	2201      	movs	r2, #1
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4013      	ands	r3, r2
 800589a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	f040 8148 	bne.w	8005b36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d00b      	beq.n	80058c6 <HAL_GPIO_Init+0x5a>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d007      	beq.n	80058c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058ba:	2b11      	cmp	r3, #17
 80058bc:	d003      	beq.n	80058c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b12      	cmp	r3, #18
 80058c4:	d130      	bne.n	8005928 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	2203      	movs	r2, #3
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	43db      	mvns	r3, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4013      	ands	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058fc:	2201      	movs	r2, #1
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	43db      	mvns	r3, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 0201 	and.w	r2, r3, #1
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4313      	orrs	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	2203      	movs	r2, #3
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	43db      	mvns	r3, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4013      	ands	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4313      	orrs	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d003      	beq.n	8005968 <HAL_GPIO_Init+0xfc>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b12      	cmp	r3, #18
 8005966:	d123      	bne.n	80059b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	08da      	lsrs	r2, r3, #3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3208      	adds	r2, #8
 8005970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	220f      	movs	r2, #15
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4013      	ands	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4313      	orrs	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	08da      	lsrs	r2, r3, #3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3208      	adds	r2, #8
 80059aa:	69b9      	ldr	r1, [r7, #24]
 80059ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	2203      	movs	r2, #3
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	43db      	mvns	r3, r3
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4013      	ands	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 0203 	and.w	r2, r3, #3
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4313      	orrs	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80a2 	beq.w	8005b36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	4b56      	ldr	r3, [pc, #344]	; (8005b50 <HAL_GPIO_Init+0x2e4>)
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	4a55      	ldr	r2, [pc, #340]	; (8005b50 <HAL_GPIO_Init+0x2e4>)
 80059fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a00:	6453      	str	r3, [r2, #68]	; 0x44
 8005a02:	4b53      	ldr	r3, [pc, #332]	; (8005b50 <HAL_GPIO_Init+0x2e4>)
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a0e:	4a51      	ldr	r2, [pc, #324]	; (8005b54 <HAL_GPIO_Init+0x2e8>)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	089b      	lsrs	r3, r3, #2
 8005a14:	3302      	adds	r3, #2
 8005a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	220f      	movs	r2, #15
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a48      	ldr	r2, [pc, #288]	; (8005b58 <HAL_GPIO_Init+0x2ec>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d019      	beq.n	8005a6e <HAL_GPIO_Init+0x202>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a47      	ldr	r2, [pc, #284]	; (8005b5c <HAL_GPIO_Init+0x2f0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <HAL_GPIO_Init+0x1fe>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a46      	ldr	r2, [pc, #280]	; (8005b60 <HAL_GPIO_Init+0x2f4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00d      	beq.n	8005a66 <HAL_GPIO_Init+0x1fa>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a45      	ldr	r2, [pc, #276]	; (8005b64 <HAL_GPIO_Init+0x2f8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d007      	beq.n	8005a62 <HAL_GPIO_Init+0x1f6>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a44      	ldr	r2, [pc, #272]	; (8005b68 <HAL_GPIO_Init+0x2fc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d101      	bne.n	8005a5e <HAL_GPIO_Init+0x1f2>
 8005a5a:	2304      	movs	r3, #4
 8005a5c:	e008      	b.n	8005a70 <HAL_GPIO_Init+0x204>
 8005a5e:	2307      	movs	r3, #7
 8005a60:	e006      	b.n	8005a70 <HAL_GPIO_Init+0x204>
 8005a62:	2303      	movs	r3, #3
 8005a64:	e004      	b.n	8005a70 <HAL_GPIO_Init+0x204>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e002      	b.n	8005a70 <HAL_GPIO_Init+0x204>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <HAL_GPIO_Init+0x204>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	f002 0203 	and.w	r2, r2, #3
 8005a76:	0092      	lsls	r2, r2, #2
 8005a78:	4093      	lsls	r3, r2
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a80:	4934      	ldr	r1, [pc, #208]	; (8005b54 <HAL_GPIO_Init+0x2e8>)
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	089b      	lsrs	r3, r3, #2
 8005a86:	3302      	adds	r3, #2
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a8e:	4b37      	ldr	r3, [pc, #220]	; (8005b6c <HAL_GPIO_Init+0x300>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	43db      	mvns	r3, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ab2:	4a2e      	ldr	r2, [pc, #184]	; (8005b6c <HAL_GPIO_Init+0x300>)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ab8:	4b2c      	ldr	r3, [pc, #176]	; (8005b6c <HAL_GPIO_Init+0x300>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005adc:	4a23      	ldr	r2, [pc, #140]	; (8005b6c <HAL_GPIO_Init+0x300>)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ae2:	4b22      	ldr	r3, [pc, #136]	; (8005b6c <HAL_GPIO_Init+0x300>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	43db      	mvns	r3, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b06:	4a19      	ldr	r2, [pc, #100]	; (8005b6c <HAL_GPIO_Init+0x300>)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b0c:	4b17      	ldr	r3, [pc, #92]	; (8005b6c <HAL_GPIO_Init+0x300>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b30:	4a0e      	ldr	r2, [pc, #56]	; (8005b6c <HAL_GPIO_Init+0x300>)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b0f      	cmp	r3, #15
 8005b40:	f67f aea2 	bls.w	8005888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b44:	bf00      	nop
 8005b46:	3724      	adds	r7, #36	; 0x24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	40023800 	.word	0x40023800
 8005b54:	40013800 	.word	0x40013800
 8005b58:	40020000 	.word	0x40020000
 8005b5c:	40020400 	.word	0x40020400
 8005b60:	40020800 	.word	0x40020800
 8005b64:	40020c00 	.word	0x40020c00
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	40013c00 	.word	0x40013c00

08005b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	887b      	ldrh	r3, [r7, #2]
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	73fb      	strb	r3, [r7, #15]
 8005b8c:	e001      	b.n	8005b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	807b      	strh	r3, [r7, #2]
 8005bac:	4613      	mov	r3, r2
 8005bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bb0:	787b      	ldrb	r3, [r7, #1]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bb6:	887a      	ldrh	r2, [r7, #2]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005bbc:	e003      	b.n	8005bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bbe:	887b      	ldrh	r3, [r7, #2]
 8005bc0:	041a      	lsls	r2, r3, #16
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	619a      	str	r2, [r3, #24]
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005bde:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005be0:	695a      	ldr	r2, [r3, #20]
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d006      	beq.n	8005bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bea:	4a05      	ldr	r2, [pc, #20]	; (8005c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bf0:	88fb      	ldrh	r3, [r7, #6]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f806 	bl	8005c04 <HAL_GPIO_EXTI_Callback>
  }
}
 8005bf8:	bf00      	nop
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40013c00 	.word	0x40013c00

08005c04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e11f      	b.n	8005e6e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff f8c0 	bl	8004dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2224      	movs	r2, #36	; 0x24
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c80:	f002 fb70 	bl	8008364 <HAL_RCC_GetPCLK1Freq>
 8005c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	4a7b      	ldr	r2, [pc, #492]	; (8005e78 <HAL_I2C_Init+0x25c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d807      	bhi.n	8005ca0 <HAL_I2C_Init+0x84>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a7a      	ldr	r2, [pc, #488]	; (8005e7c <HAL_I2C_Init+0x260>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	bf94      	ite	ls
 8005c98:	2301      	movls	r3, #1
 8005c9a:	2300      	movhi	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	e006      	b.n	8005cae <HAL_I2C_Init+0x92>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4a77      	ldr	r2, [pc, #476]	; (8005e80 <HAL_I2C_Init+0x264>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	bf94      	ite	ls
 8005ca8:	2301      	movls	r3, #1
 8005caa:	2300      	movhi	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e0db      	b.n	8005e6e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a72      	ldr	r2, [pc, #456]	; (8005e84 <HAL_I2C_Init+0x268>)
 8005cba:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbe:	0c9b      	lsrs	r3, r3, #18
 8005cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	4a64      	ldr	r2, [pc, #400]	; (8005e78 <HAL_I2C_Init+0x25c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d802      	bhi.n	8005cf0 <HAL_I2C_Init+0xd4>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	3301      	adds	r3, #1
 8005cee:	e009      	b.n	8005d04 <HAL_I2C_Init+0xe8>
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005cf6:	fb02 f303 	mul.w	r3, r2, r3
 8005cfa:	4a63      	ldr	r2, [pc, #396]	; (8005e88 <HAL_I2C_Init+0x26c>)
 8005cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005d00:	099b      	lsrs	r3, r3, #6
 8005d02:	3301      	adds	r3, #1
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	4956      	ldr	r1, [pc, #344]	; (8005e78 <HAL_I2C_Init+0x25c>)
 8005d20:	428b      	cmp	r3, r1
 8005d22:	d80d      	bhi.n	8005d40 <HAL_I2C_Init+0x124>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1e59      	subs	r1, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d32:	3301      	adds	r3, #1
 8005d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	bf38      	it	cc
 8005d3c:	2304      	movcc	r3, #4
 8005d3e:	e04f      	b.n	8005de0 <HAL_I2C_Init+0x1c4>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d111      	bne.n	8005d6c <HAL_I2C_Init+0x150>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1e58      	subs	r0, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6859      	ldr	r1, [r3, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	440b      	add	r3, r1
 8005d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf0c      	ite	eq
 8005d64:	2301      	moveq	r3, #1
 8005d66:	2300      	movne	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	e012      	b.n	8005d92 <HAL_I2C_Init+0x176>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	1e58      	subs	r0, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6859      	ldr	r1, [r3, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	0099      	lsls	r1, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d82:	3301      	adds	r3, #1
 8005d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bf0c      	ite	eq
 8005d8c:	2301      	moveq	r3, #1
 8005d8e:	2300      	movne	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_I2C_Init+0x17e>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e022      	b.n	8005de0 <HAL_I2C_Init+0x1c4>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10e      	bne.n	8005dc0 <HAL_I2C_Init+0x1a4>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1e58      	subs	r0, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6859      	ldr	r1, [r3, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	440b      	add	r3, r1
 8005db0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005db4:	3301      	adds	r3, #1
 8005db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dbe:	e00f      	b.n	8005de0 <HAL_I2C_Init+0x1c4>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	1e58      	subs	r0, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6859      	ldr	r1, [r3, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	0099      	lsls	r1, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	6809      	ldr	r1, [r1, #0]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69da      	ldr	r2, [r3, #28]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6911      	ldr	r1, [r2, #16]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	68d2      	ldr	r2, [r2, #12]
 8005e1a:	4311      	orrs	r1, r2
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	430b      	orrs	r3, r1
 8005e22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	695a      	ldr	r2, [r3, #20]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	000186a0 	.word	0x000186a0
 8005e7c:	001e847f 	.word	0x001e847f
 8005e80:	003d08ff 	.word	0x003d08ff
 8005e84:	431bde83 	.word	0x431bde83
 8005e88:	10624dd3 	.word	0x10624dd3

08005e8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08c      	sub	sp, #48	; 0x30
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	4608      	mov	r0, r1
 8005e96:	4611      	mov	r1, r2
 8005e98:	461a      	mov	r2, r3
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	817b      	strh	r3, [r7, #10]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	813b      	strh	r3, [r7, #8]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ea6:	f7ff fb7f 	bl	80055a8 <HAL_GetTick>
 8005eaa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	f040 8208 	bne.w	80062ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	2319      	movs	r3, #25
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	497b      	ldr	r1, [pc, #492]	; (80060b0 <HAL_I2C_Mem_Read+0x224>)
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 faed 	bl	80064a4 <I2C_WaitOnFlagUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e1fb      	b.n	80062cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <HAL_I2C_Mem_Read+0x56>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e1f4      	b.n	80062cc <HAL_I2C_Mem_Read+0x440>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d007      	beq.n	8005f08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2222      	movs	r2, #34	; 0x22
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2240      	movs	r2, #64	; 0x40
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4a5b      	ldr	r2, [pc, #364]	; (80060b4 <HAL_I2C_Mem_Read+0x228>)
 8005f48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f4a:	88f8      	ldrh	r0, [r7, #6]
 8005f4c:	893a      	ldrh	r2, [r7, #8]
 8005f4e:	8979      	ldrh	r1, [r7, #10]
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	9301      	str	r3, [sp, #4]
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	4603      	mov	r3, r0
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f9bc 	bl	80062d8 <I2C_RequestMemoryRead>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e1b0      	b.n	80062cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d113      	bne.n	8005f9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f72:	2300      	movs	r3, #0
 8005f74:	623b      	str	r3, [r7, #32]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	623b      	str	r3, [r7, #32]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	623b      	str	r3, [r7, #32]
 8005f86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e184      	b.n	80062a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d11b      	bne.n	8005fda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61fb      	str	r3, [r7, #28]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	61fb      	str	r3, [r7, #28]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	e164      	b.n	80062a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d11b      	bne.n	800601a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006000:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006002:	2300      	movs	r3, #0
 8006004:	61bb      	str	r3, [r7, #24]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	e144      	b.n	80062a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006030:	e138      	b.n	80062a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006036:	2b03      	cmp	r3, #3
 8006038:	f200 80f1 	bhi.w	800621e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006040:	2b01      	cmp	r3, #1
 8006042:	d123      	bne.n	800608c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006046:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fb42 	bl	80066d2 <I2C_WaitOnRXNEFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e139      	b.n	80062cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	855a      	strh	r2, [r3, #42]	; 0x2a
 800608a:	e10b      	b.n	80062a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006090:	2b02      	cmp	r3, #2
 8006092:	d14e      	bne.n	8006132 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	2200      	movs	r2, #0
 800609c:	4906      	ldr	r1, [pc, #24]	; (80060b8 <HAL_I2C_Mem_Read+0x22c>)
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 fa00 	bl	80064a4 <I2C_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d008      	beq.n	80060bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e10e      	b.n	80062cc <HAL_I2C_Mem_Read+0x440>
 80060ae:	bf00      	nop
 80060b0:	00100002 	.word	0x00100002
 80060b4:	ffff0000 	.word	0xffff0000
 80060b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006130:	e0b8      	b.n	80062a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	2200      	movs	r2, #0
 800613a:	4966      	ldr	r1, [pc, #408]	; (80062d4 <HAL_I2C_Mem_Read+0x448>)
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f9b1 	bl	80064a4 <I2C_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0bf      	b.n	80062cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	2200      	movs	r2, #0
 8006196:	494f      	ldr	r1, [pc, #316]	; (80062d4 <HAL_I2C_Mem_Read+0x448>)
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f983 	bl	80064a4 <I2C_WaitOnFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e091      	b.n	80062cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800621c:	e042      	b.n	80062a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800621e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006220:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fa55 	bl	80066d2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e04c      	b.n	80062cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b04      	cmp	r3, #4
 8006270:	d118      	bne.n	80062a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f47f aec2 	bne.w	8006032 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e000      	b.n	80062cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80062ca:	2302      	movs	r3, #2
  }
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3728      	adds	r7, #40	; 0x28
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	00010004 	.word	0x00010004

080062d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af02      	add	r7, sp, #8
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	4608      	mov	r0, r1
 80062e2:	4611      	mov	r1, r2
 80062e4:	461a      	mov	r2, r3
 80062e6:	4603      	mov	r3, r0
 80062e8:	817b      	strh	r3, [r7, #10]
 80062ea:	460b      	mov	r3, r1
 80062ec:	813b      	strh	r3, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006300:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006310:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	2200      	movs	r2, #0
 800631a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f8c0 	bl	80064a4 <I2C_WaitOnFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00c      	beq.n	8006344 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800633e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e0a9      	b.n	8006498 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006344:	897b      	ldrh	r3, [r7, #10]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	461a      	mov	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006352:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	6a3a      	ldr	r2, [r7, #32]
 8006358:	4951      	ldr	r1, [pc, #324]	; (80064a0 <I2C_RequestMemoryRead+0x1c8>)
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f8f9 	bl	8006552 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e096      	b.n	8006498 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	6a39      	ldr	r1, [r7, #32]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f963 	bl	8006650 <I2C_WaitOnTXEFlagUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00d      	beq.n	80063ac <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	2b04      	cmp	r3, #4
 8006396:	d107      	bne.n	80063a8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e075      	b.n	8006498 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063ac:	88fb      	ldrh	r3, [r7, #6]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d105      	bne.n	80063be <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063b2:	893b      	ldrh	r3, [r7, #8]
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	611a      	str	r2, [r3, #16]
 80063bc:	e021      	b.n	8006402 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063be:	893b      	ldrh	r3, [r7, #8]
 80063c0:	0a1b      	lsrs	r3, r3, #8
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ce:	6a39      	ldr	r1, [r7, #32]
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f93d 	bl	8006650 <I2C_WaitOnTXEFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00d      	beq.n	80063f8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d107      	bne.n	80063f4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e04f      	b.n	8006498 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063f8:	893b      	ldrh	r3, [r7, #8]
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006404:	6a39      	ldr	r1, [r7, #32]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f922 	bl	8006650 <I2C_WaitOnTXEFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	2b04      	cmp	r3, #4
 8006418:	d107      	bne.n	800642a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006428:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e034      	b.n	8006498 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800643c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	2200      	movs	r2, #0
 8006446:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f82a 	bl	80064a4 <I2C_WaitOnFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00c      	beq.n	8006470 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800646a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e013      	b.n	8006498 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006470:	897b      	ldrh	r3, [r7, #10]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f043 0301 	orr.w	r3, r3, #1
 8006478:	b2da      	uxtb	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	6a3a      	ldr	r2, [r7, #32]
 8006484:	4906      	ldr	r1, [pc, #24]	; (80064a0 <I2C_RequestMemoryRead+0x1c8>)
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f863 	bl	8006552 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	00010002 	.word	0x00010002

080064a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064b4:	e025      	b.n	8006502 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d021      	beq.n	8006502 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064be:	f7ff f873 	bl	80055a8 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d302      	bcc.n	80064d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d116      	bne.n	8006502 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f043 0220 	orr.w	r2, r3, #32
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e023      	b.n	800654a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	0c1b      	lsrs	r3, r3, #16
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b01      	cmp	r3, #1
 800650a:	d10d      	bne.n	8006528 <I2C_WaitOnFlagUntilTimeout+0x84>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	43da      	mvns	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4013      	ands	r3, r2
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	bf0c      	ite	eq
 800651e:	2301      	moveq	r3, #1
 8006520:	2300      	movne	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	e00c      	b.n	8006542 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	43da      	mvns	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4013      	ands	r3, r2
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	bf0c      	ite	eq
 800653a:	2301      	moveq	r3, #1
 800653c:	2300      	movne	r3, #0
 800653e:	b2db      	uxtb	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	429a      	cmp	r2, r3
 8006546:	d0b6      	beq.n	80064b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006560:	e051      	b.n	8006606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800656c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006570:	d123      	bne.n	80065ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006580:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800658a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	f043 0204 	orr.w	r2, r3, #4
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e046      	b.n	8006648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c0:	d021      	beq.n	8006606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c2:	f7fe fff1 	bl	80055a8 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d302      	bcc.n	80065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d116      	bne.n	8006606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	f043 0220 	orr.w	r2, r3, #32
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e020      	b.n	8006648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	0c1b      	lsrs	r3, r3, #16
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b01      	cmp	r3, #1
 800660e:	d10c      	bne.n	800662a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	43da      	mvns	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4013      	ands	r3, r2
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	bf14      	ite	ne
 8006622:	2301      	movne	r3, #1
 8006624:	2300      	moveq	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	e00b      	b.n	8006642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	43da      	mvns	r2, r3
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	4013      	ands	r3, r2
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	bf14      	ite	ne
 800663c:	2301      	movne	r3, #1
 800663e:	2300      	moveq	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d18d      	bne.n	8006562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800665c:	e02d      	b.n	80066ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f88d 	bl	800677e <I2C_IsAcknowledgeFailed>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e02d      	b.n	80066ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d021      	beq.n	80066ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006676:	f7fe ff97 	bl	80055a8 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	d302      	bcc.n	800668c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d116      	bne.n	80066ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	f043 0220 	orr.w	r2, r3, #32
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e007      	b.n	80066ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c4:	2b80      	cmp	r3, #128	; 0x80
 80066c6:	d1ca      	bne.n	800665e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066de:	e042      	b.n	8006766 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f003 0310 	and.w	r3, r3, #16
 80066ea:	2b10      	cmp	r3, #16
 80066ec:	d119      	bne.n	8006722 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f06f 0210 	mvn.w	r2, #16
 80066f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e029      	b.n	8006776 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006722:	f7fe ff41 	bl	80055a8 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	429a      	cmp	r2, r3
 8006730:	d302      	bcc.n	8006738 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d116      	bne.n	8006766 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	f043 0220 	orr.w	r2, r3, #32
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e007      	b.n	8006776 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d1b5      	bne.n	80066e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006794:	d11b      	bne.n	80067ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800679e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	f043 0204 	orr.w	r2, r3, #4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e000      	b.n	80067d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067de:	b08f      	sub	sp, #60	; 0x3c
 80067e0:	af0a      	add	r7, sp, #40	; 0x28
 80067e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e10f      	b.n	8006a0e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f010 fa23 	bl	8016c54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2203      	movs	r2, #3
 8006812:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4618      	mov	r0, r3
 800682e:	f004 ff4e 	bl	800b6ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	687e      	ldr	r6, [r7, #4]
 800683a:	466d      	mov	r5, sp
 800683c:	f106 0410 	add.w	r4, r6, #16
 8006840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006848:	e894 0003 	ldmia.w	r4, {r0, r1}
 800684c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006850:	1d33      	adds	r3, r6, #4
 8006852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006854:	6838      	ldr	r0, [r7, #0]
 8006856:	f004 fe25 	bl	800b4a4 <USB_CoreInit>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e0d0      	b.n	8006a0e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2100      	movs	r1, #0
 8006872:	4618      	mov	r0, r3
 8006874:	f004 ff3c 	bl	800b6f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006878:	2300      	movs	r3, #0
 800687a:	73fb      	strb	r3, [r7, #15]
 800687c:	e04a      	b.n	8006914 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800687e:	7bfa      	ldrb	r2, [r7, #15]
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	4613      	mov	r3, r2
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	333d      	adds	r3, #61	; 0x3d
 800688e:	2201      	movs	r2, #1
 8006890:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006892:	7bfa      	ldrb	r2, [r7, #15]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	333c      	adds	r3, #60	; 0x3c
 80068a2:	7bfa      	ldrb	r2, [r7, #15]
 80068a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068a6:	7bfa      	ldrb	r2, [r7, #15]
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	b298      	uxth	r0, r3
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	3342      	adds	r3, #66	; 0x42
 80068ba:	4602      	mov	r2, r0
 80068bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068be:	7bfa      	ldrb	r2, [r7, #15]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	333f      	adds	r3, #63	; 0x3f
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068d2:	7bfa      	ldrb	r2, [r7, #15]
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	4613      	mov	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	3344      	adds	r3, #68	; 0x44
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068e6:	7bfa      	ldrb	r2, [r7, #15]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	3348      	adds	r3, #72	; 0x48
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80068fa:	7bfa      	ldrb	r2, [r7, #15]
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	1a9b      	subs	r3, r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	3350      	adds	r3, #80	; 0x50
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	3301      	adds	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
 8006914:	7bfa      	ldrb	r2, [r7, #15]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	d3af      	bcc.n	800687e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]
 8006922:	e044      	b.n	80069ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006924:	7bfa      	ldrb	r2, [r7, #15]
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	4613      	mov	r3, r2
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	1a9b      	subs	r3, r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006936:	2200      	movs	r2, #0
 8006938:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800693a:	7bfa      	ldrb	r2, [r7, #15]
 800693c:	6879      	ldr	r1, [r7, #4]
 800693e:	4613      	mov	r3, r2
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	440b      	add	r3, r1
 8006948:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800694c:	7bfa      	ldrb	r2, [r7, #15]
 800694e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006950:	7bfa      	ldrb	r2, [r7, #15]
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	4613      	mov	r3, r2
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006966:	7bfa      	ldrb	r2, [r7, #15]
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	440b      	add	r3, r1
 8006974:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800697c:	7bfa      	ldrb	r2, [r7, #15]
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	4613      	mov	r3, r2
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	440b      	add	r3, r1
 800698a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006992:	7bfa      	ldrb	r2, [r7, #15]
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	1a9b      	subs	r3, r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	3301      	adds	r3, #1
 80069ac:	73fb      	strb	r3, [r7, #15]
 80069ae:	7bfa      	ldrb	r2, [r7, #15]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d3b5      	bcc.n	8006924 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	603b      	str	r3, [r7, #0]
 80069be:	687e      	ldr	r6, [r7, #4]
 80069c0:	466d      	mov	r5, sp
 80069c2:	f106 0410 	add.w	r4, r6, #16
 80069c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80069d6:	1d33      	adds	r3, r6, #4
 80069d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069da:	6838      	ldr	r0, [r7, #0]
 80069dc:	f004 feb2 	bl	800b744 <USB_DevInit>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2202      	movs	r2, #2
 80069ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e00d      	b.n	8006a0e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f005 fea7 	bl	800c75a <USB_DevDisconnect>

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_PCD_Start+0x1c>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e020      	b.n	8006a74 <HAL_PCD_Start+0x5e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d109      	bne.n	8006a56 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d005      	beq.n	8006a56 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f005 fe65 	bl	800c72a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f004 fe21 	bl	800b6ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a7c:	b590      	push	{r4, r7, lr}
 8006a7e:	b08d      	sub	sp, #52	; 0x34
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f005 ff0c 	bl	800c8b0 <USB_GetMode>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f040 838e 	bne.w	80071bc <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f005 fe70 	bl	800c78a <USB_ReadInterrupts>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8384 	beq.w	80071ba <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f005 fe67 	bl	800c78a <USB_ReadInterrupts>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d107      	bne.n	8006ad6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695a      	ldr	r2, [r3, #20]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f002 0202 	and.w	r2, r2, #2
 8006ad4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f005 fe55 	bl	800c78a <USB_ReadInterrupts>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ae6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006aea:	d17b      	bne.n	8006be4 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f005 fe5b 	bl	800c7b0 <USB_ReadDevAllOutEpInterrupt>
 8006afa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006afc:	e06f      	b.n	8006bde <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d064      	beq.n	8006bd2 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	4611      	mov	r1, r2
 8006b12:	4618      	mov	r0, r3
 8006b14:	f005 fe80 	bl	800c818 <USB_ReadDevOutEPInterrupt>
 8006b18:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00c      	beq.n	8006b3e <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b30:	461a      	mov	r2, r3
 8006b32:	2301      	movs	r3, #1
 8006b34:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fe0d 	bl	8007758 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00c      	beq.n	8006b62 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 ff0c 	bl	8007968 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	2308      	movs	r3, #8
 8006b60:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b78:	461a      	mov	r2, r3
 8006b7a:	2310      	movs	r3, #16
 8006b7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d015      	beq.n	8006bb4 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d108      	bne.n	8006ba2 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6818      	ldr	r0, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	f005 fecb 	bl	800c938 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bae:	461a      	mov	r2, r3
 8006bb0:	2320      	movs	r3, #32
 8006bb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bd0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d18c      	bne.n	8006afe <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f005 fdce 	bl	800c78a <USB_ReadInterrupts>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bf8:	f040 80c4 	bne.w	8006d84 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f005 fdef 	bl	800c7e4 <USB_ReadDevAllInEpInterrupt>
 8006c06:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006c0c:	e0b6      	b.n	8006d7c <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80ab 	beq.w	8006d70 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	4611      	mov	r1, r2
 8006c24:	4618      	mov	r0, r3
 8006c26:	f005 fe15 	bl	800c854 <USB_ReadDevInEPInterrupt>
 8006c2a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d05b      	beq.n	8006cee <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	f003 030f 	and.w	r3, r3, #15
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c42:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	69f9      	ldr	r1, [r7, #28]
 8006c52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c56:	4013      	ands	r3, r2
 8006c58:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c66:	461a      	mov	r2, r3
 8006c68:	2301      	movs	r3, #1
 8006c6a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d11b      	bne.n	8006cac <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c78:	4613      	mov	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	1a9b      	subs	r3, r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	3348      	adds	r3, #72	; 0x48
 8006c84:	6819      	ldr	r1, [r3, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	1a9b      	subs	r3, r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4403      	add	r3, r0
 8006c94:	3344      	adds	r3, #68	; 0x44
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4419      	add	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4403      	add	r3, r0
 8006ca8:	3348      	adds	r3, #72	; 0x48
 8006caa:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f010 f867 	bl	8016d86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d116      	bne.n	8006cee <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d113      	bne.n	8006cee <HAL_PCD_IRQHandler+0x272>
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cca:	4613      	mov	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	3350      	adds	r3, #80	; 0x50
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d108      	bne.n	8006cee <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	2101      	movs	r1, #1
 8006cea:	f005 fe25 	bl	800c938 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d008      	beq.n	8006d0a <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	461a      	mov	r2, r3
 8006d06:	2308      	movs	r3, #8
 8006d08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d008      	beq.n	8006d26 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	461a      	mov	r2, r3
 8006d22:	2310      	movs	r3, #16
 8006d24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d008      	beq.n	8006d42 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	2340      	movs	r3, #64	; 0x40
 8006d40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	461a      	mov	r2, r3
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fc67 	bl	800763e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	3301      	adds	r3, #1
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f47f af45 	bne.w	8006c0e <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f005 fcfe 	bl	800c78a <USB_ReadInterrupts>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d98:	d122      	bne.n	8006de0 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006da8:	f023 0301 	bic.w	r3, r3, #1
 8006dac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d108      	bne.n	8006dca <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fe88 	bl	8007ad8 <HAL_PCDEx_LPM_Callback>
 8006dc8:	e002      	b.n	8006dd0 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f010 f848 	bl	8016e60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695a      	ldr	r2, [r3, #20]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f005 fcd0 	bl	800c78a <USB_ReadInterrupts>
 8006dea:	4603      	mov	r3, r0
 8006dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006df4:	d112      	bne.n	8006e1c <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d102      	bne.n	8006e0c <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f010 f804 	bl	8016e14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	695a      	ldr	r2, [r3, #20]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006e1a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f005 fcb2 	bl	800c78a <USB_ReadInterrupts>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e30:	f040 80a7 	bne.w	8006f82 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e42:	f023 0301 	bic.w	r3, r3, #1
 8006e46:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2110      	movs	r1, #16
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f004 fdea 	bl	800ba28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e54:	2300      	movs	r3, #0
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e58:	e036      	b.n	8006ec8 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e66:	461a      	mov	r2, r3
 8006e68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e6c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ea0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eb2:	0151      	lsls	r1, r2, #5
 8006eb4:	69fa      	ldr	r2, [r7, #28]
 8006eb6:	440a      	add	r2, r1
 8006eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ebc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ec0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d3c3      	bcc.n	8006e5a <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ee0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006ee4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d016      	beq.n	8006f1c <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006efe:	f043 030b 	orr.w	r3, r3, #11
 8006f02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f14:	f043 030b 	orr.w	r3, r3, #11
 8006f18:	6453      	str	r3, [r2, #68]	; 0x44
 8006f1a:	e015      	b.n	8006f48 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f2e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006f32:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f42:	f043 030b 	orr.w	r3, r3, #11
 8006f46:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f5a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	f005 fce3 	bl	800c938 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	695a      	ldr	r2, [r3, #20]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006f80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f005 fbff 	bl	800c78a <USB_ReadInterrupts>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f96:	d124      	bne.n	8006fe2 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f005 fc95 	bl	800c8cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f004 fd9f 	bl	800baea <USB_GetDevSpeed>
 8006fac:	4603      	mov	r3, r0
 8006fae:	461a      	mov	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681c      	ldr	r4, [r3, #0]
 8006fb8:	f001 f9c8 	bl	800834c <HAL_RCC_GetHCLKFreq>
 8006fbc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f004 face 	bl	800b568 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f00f ff02 	bl	8016dd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695a      	ldr	r2, [r3, #20]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f005 fbcf 	bl	800c78a <USB_ReadInterrupts>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f003 0310 	and.w	r3, r3, #16
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d161      	bne.n	80070ba <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699a      	ldr	r2, [r3, #24]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0210 	bic.w	r2, r2, #16
 8007004:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f003 020f 	and.w	r2, r3, #15
 8007012:	4613      	mov	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	4413      	add	r3, r2
 8007022:	3304      	adds	r3, #4
 8007024:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	0c5b      	lsrs	r3, r3, #17
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	2b02      	cmp	r3, #2
 8007030:	d124      	bne.n	800707c <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007038:	4013      	ands	r3, r2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d035      	beq.n	80070aa <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	091b      	lsrs	r3, r3, #4
 8007046:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800704c:	b29b      	uxth	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	6a38      	ldr	r0, [r7, #32]
 8007052:	f005 fa47 	bl	800c4e4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	091b      	lsrs	r3, r3, #4
 800705e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007062:	441a      	add	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	091b      	lsrs	r3, r3, #4
 8007070:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007074:	441a      	add	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	619a      	str	r2, [r3, #24]
 800707a:	e016      	b.n	80070aa <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	0c5b      	lsrs	r3, r3, #17
 8007080:	f003 030f 	and.w	r3, r3, #15
 8007084:	2b06      	cmp	r3, #6
 8007086:	d110      	bne.n	80070aa <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800708e:	2208      	movs	r2, #8
 8007090:	4619      	mov	r1, r3
 8007092:	6a38      	ldr	r0, [r7, #32]
 8007094:	f005 fa26 	bl	800c4e4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	699a      	ldr	r2, [r3, #24]
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	091b      	lsrs	r3, r3, #4
 80070a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070a4:	441a      	add	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	699a      	ldr	r2, [r3, #24]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0210 	orr.w	r2, r2, #16
 80070b8:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f005 fb63 	bl	800c78a <USB_ReadInterrupts>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b08      	cmp	r3, #8
 80070cc:	d10a      	bne.n	80070e4 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f00f fe73 	bl	8016dba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	695a      	ldr	r2, [r3, #20]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f002 0208 	and.w	r2, r2, #8
 80070e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f005 fb4e 	bl	800c78a <USB_ReadInterrupts>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070f8:	d10f      	bne.n	800711a <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	b2db      	uxtb	r3, r3
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f00f fecb 	bl	8016ea0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695a      	ldr	r2, [r3, #20]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f005 fb33 	bl	800c78a <USB_ReadInterrupts>
 8007124:	4603      	mov	r3, r0
 8007126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800712a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800712e:	d10f      	bne.n	8007150 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	b2db      	uxtb	r3, r3
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f00f fe9e 	bl	8016e7c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695a      	ldr	r2, [r3, #20]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800714e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f005 fb18 	bl	800c78a <USB_ReadInterrupts>
 800715a:	4603      	mov	r3, r0
 800715c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007164:	d10a      	bne.n	800717c <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f00f feac 	bl	8016ec4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695a      	ldr	r2, [r3, #20]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800717a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4618      	mov	r0, r3
 8007182:	f005 fb02 	bl	800c78a <USB_ReadInterrupts>
 8007186:	4603      	mov	r3, r0
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b04      	cmp	r3, #4
 800718e:	d115      	bne.n	80071bc <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f00f fe9c 	bl	8016ee0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6859      	ldr	r1, [r3, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	605a      	str	r2, [r3, #4]
 80071b8:	e000      	b.n	80071bc <HAL_PCD_IRQHandler+0x740>
      return;
 80071ba:	bf00      	nop
    }
  }
}
 80071bc:	3734      	adds	r7, #52	; 0x34
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd90      	pop	{r4, r7, pc}

080071c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d101      	bne.n	80071dc <HAL_PCD_SetAddress+0x1a>
 80071d8:	2302      	movs	r3, #2
 80071da:	e013      	b.n	8007204 <HAL_PCD_SetAddress+0x42>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	78fa      	ldrb	r2, [r7, #3]
 80071e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	78fa      	ldrb	r2, [r7, #3]
 80071f2:	4611      	mov	r1, r2
 80071f4:	4618      	mov	r0, r3
 80071f6:	f005 fa72 	bl	800c6de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	4608      	mov	r0, r1
 8007216:	4611      	mov	r1, r2
 8007218:	461a      	mov	r2, r3
 800721a:	4603      	mov	r3, r0
 800721c:	70fb      	strb	r3, [r7, #3]
 800721e:	460b      	mov	r3, r1
 8007220:	803b      	strh	r3, [r7, #0]
 8007222:	4613      	mov	r3, r2
 8007224:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800722a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800722e:	2b00      	cmp	r3, #0
 8007230:	da0f      	bge.n	8007252 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007232:	78fb      	ldrb	r3, [r7, #3]
 8007234:	f003 020f 	and.w	r2, r3, #15
 8007238:	4613      	mov	r3, r2
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	1a9b      	subs	r3, r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	3338      	adds	r3, #56	; 0x38
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4413      	add	r3, r2
 8007246:	3304      	adds	r3, #4
 8007248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	705a      	strb	r2, [r3, #1]
 8007250:	e00f      	b.n	8007272 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	f003 020f 	and.w	r2, r3, #15
 8007258:	4613      	mov	r3, r2
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	1a9b      	subs	r3, r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	4413      	add	r3, r2
 8007268:	3304      	adds	r3, #4
 800726a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	b2da      	uxtb	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800727e:	883a      	ldrh	r2, [r7, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	78ba      	ldrb	r2, [r7, #2]
 8007288:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	b29a      	uxth	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800729c:	78bb      	ldrb	r3, [r7, #2]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d102      	bne.n	80072a8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_PCD_EP_Open+0xaa>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e00e      	b.n	80072d4 <HAL_PCD_EP_Open+0xc8>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f004 fc35 	bl	800bb34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80072d2:	7afb      	ldrb	r3, [r7, #11]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80072e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	da0f      	bge.n	8007310 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	f003 020f 	and.w	r2, r3, #15
 80072f6:	4613      	mov	r3, r2
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	1a9b      	subs	r3, r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	3338      	adds	r3, #56	; 0x38
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	4413      	add	r3, r2
 8007304:	3304      	adds	r3, #4
 8007306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	705a      	strb	r2, [r3, #1]
 800730e:	e00f      	b.n	8007330 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	f003 020f 	and.w	r2, r3, #15
 8007316:	4613      	mov	r3, r2
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	4413      	add	r3, r2
 8007326:	3304      	adds	r3, #4
 8007328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	b2da      	uxtb	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <HAL_PCD_EP_Close+0x6e>
 8007346:	2302      	movs	r3, #2
 8007348:	e00e      	b.n	8007368 <HAL_PCD_EP_Close+0x8c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68f9      	ldr	r1, [r7, #12]
 8007358:	4618      	mov	r0, r3
 800735a:	f004 fc73 	bl	800bc44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	460b      	mov	r3, r1
 800737e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	f003 020f 	and.w	r2, r3, #15
 8007386:	4613      	mov	r3, r2
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	1a9b      	subs	r3, r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	3304      	adds	r3, #4
 8007398:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2200      	movs	r2, #0
 80073aa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2200      	movs	r2, #0
 80073b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073b2:	7afb      	ldrb	r3, [r7, #11]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d102      	bne.n	80073cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073cc:	7afb      	ldrb	r3, [r7, #11]
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6818      	ldr	r0, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	461a      	mov	r2, r3
 80073e2:	6979      	ldr	r1, [r7, #20]
 80073e4:	f004 fef6 	bl	800c1d4 <USB_EP0StartXfer>
 80073e8:	e008      	b.n	80073fc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	6979      	ldr	r1, [r7, #20]
 80073f8:	f004 fca8 	bl	800bd4c <USB_EPStartXfer>
  }

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007412:	78fb      	ldrb	r3, [r7, #3]
 8007414:	f003 020f 	and.w	r2, r3, #15
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	4613      	mov	r3, r2
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	1a9b      	subs	r3, r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	440b      	add	r3, r1
 8007424:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007428:	681b      	ldr	r3, [r3, #0]
}
 800742a:	4618      	mov	r0, r3
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b086      	sub	sp, #24
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	603b      	str	r3, [r7, #0]
 8007442:	460b      	mov	r3, r1
 8007444:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007446:	7afb      	ldrb	r3, [r7, #11]
 8007448:	f003 020f 	and.w	r2, r3, #15
 800744c:	4613      	mov	r3, r2
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	1a9b      	subs	r3, r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	3338      	adds	r3, #56	; 0x38
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4413      	add	r3, r2
 800745a:	3304      	adds	r3, #4
 800745c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2200      	movs	r2, #0
 800746e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2201      	movs	r2, #1
 8007474:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	b2da      	uxtb	r2, r3
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d102      	bne.n	8007490 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007490:	7afb      	ldrb	r3, [r7, #11]
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	2b00      	cmp	r3, #0
 8007498:	d109      	bne.n	80074ae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	6979      	ldr	r1, [r7, #20]
 80074a8:	f004 fe94 	bl	800c1d4 <USB_EP0StartXfer>
 80074ac:	e008      	b.n	80074c0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	6979      	ldr	r1, [r7, #20]
 80074bc:	f004 fc46 	bl	800bd4c <USB_EPStartXfer>
  }

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80074d6:	78fb      	ldrb	r3, [r7, #3]
 80074d8:	f003 020f 	and.w	r2, r3, #15
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d901      	bls.n	80074e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e050      	b.n	800758a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80074e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	da0f      	bge.n	8007510 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	f003 020f 	and.w	r2, r3, #15
 80074f6:	4613      	mov	r3, r2
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	1a9b      	subs	r3, r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	3338      	adds	r3, #56	; 0x38
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	4413      	add	r3, r2
 8007504:	3304      	adds	r3, #4
 8007506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2201      	movs	r2, #1
 800750c:	705a      	strb	r2, [r3, #1]
 800750e:	e00d      	b.n	800752c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007510:	78fa      	ldrb	r2, [r7, #3]
 8007512:	4613      	mov	r3, r2
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	4413      	add	r3, r2
 8007522:	3304      	adds	r3, #4
 8007524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2201      	movs	r2, #1
 8007530:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	f003 030f 	and.w	r3, r3, #15
 8007538:	b2da      	uxtb	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_PCD_EP_SetStall+0x82>
 8007548:	2302      	movs	r3, #2
 800754a:	e01e      	b.n	800758a <HAL_PCD_EP_SetStall+0xc0>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68f9      	ldr	r1, [r7, #12]
 800755a:	4618      	mov	r0, r3
 800755c:	f004 ffeb 	bl	800c536 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10a      	bne.n	8007580 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	b2d9      	uxtb	r1, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800757a:	461a      	mov	r2, r3
 800757c:	f005 f9dc 	bl	800c938 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	f003 020f 	and.w	r2, r3, #15
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d901      	bls.n	80075b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e042      	b.n	8007636 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80075b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	da0f      	bge.n	80075d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	f003 020f 	and.w	r2, r3, #15
 80075be:	4613      	mov	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	1a9b      	subs	r3, r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	3338      	adds	r3, #56	; 0x38
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	4413      	add	r3, r2
 80075cc:	3304      	adds	r3, #4
 80075ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	705a      	strb	r2, [r3, #1]
 80075d6:	e00f      	b.n	80075f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	f003 020f 	and.w	r2, r3, #15
 80075de:	4613      	mov	r3, r2
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	1a9b      	subs	r3, r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	4413      	add	r3, r2
 80075ee:	3304      	adds	r3, #4
 80075f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	f003 030f 	and.w	r3, r3, #15
 8007604:	b2da      	uxtb	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007610:	2b01      	cmp	r3, #1
 8007612:	d101      	bne.n	8007618 <HAL_PCD_EP_ClrStall+0x86>
 8007614:	2302      	movs	r3, #2
 8007616:	e00e      	b.n	8007636 <HAL_PCD_EP_ClrStall+0xa4>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68f9      	ldr	r1, [r7, #12]
 8007626:	4618      	mov	r0, r3
 8007628:	f004 fff3 	bl	800c612 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b08a      	sub	sp, #40	; 0x28
 8007642:	af02      	add	r7, sp, #8
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	4613      	mov	r3, r2
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	1a9b      	subs	r3, r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	3338      	adds	r3, #56	; 0x38
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	4413      	add	r3, r2
 8007662:	3304      	adds	r3, #4
 8007664:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	699a      	ldr	r2, [r3, #24]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	429a      	cmp	r2, r3
 8007670:	d901      	bls.n	8007676 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e06c      	b.n	8007750 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	695a      	ldr	r2, [r3, #20]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	429a      	cmp	r2, r3
 800768a:	d902      	bls.n	8007692 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	3303      	adds	r3, #3
 8007696:	089b      	lsrs	r3, r3, #2
 8007698:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800769a:	e02b      	b.n	80076f4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	695a      	ldr	r2, [r3, #20]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	69fa      	ldr	r2, [r7, #28]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d902      	bls.n	80076b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	3303      	adds	r3, #3
 80076bc:	089b      	lsrs	r3, r3, #2
 80076be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68d9      	ldr	r1, [r3, #12]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	4603      	mov	r3, r0
 80076d6:	6978      	ldr	r0, [r7, #20]
 80076d8:	f004 fecf 	bl	800c47a <USB_WritePacket>

    ep->xfer_buff  += len;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	441a      	add	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	699a      	ldr	r2, [r3, #24]
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	441a      	add	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	b29b      	uxth	r3, r3
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	429a      	cmp	r2, r3
 8007708:	d809      	bhi.n	800771e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007712:	429a      	cmp	r2, r3
 8007714:	d203      	bcs.n	800771e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1be      	bne.n	800769c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	695a      	ldr	r2, [r3, #20]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	429a      	cmp	r2, r3
 8007728:	d811      	bhi.n	800774e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	f003 030f 	and.w	r3, r3, #15
 8007730:	2201      	movs	r2, #1
 8007732:	fa02 f303 	lsl.w	r3, r2, r3
 8007736:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	43db      	mvns	r3, r3
 8007744:	6939      	ldr	r1, [r7, #16]
 8007746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800774a:	4013      	ands	r3, r2
 800774c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	333c      	adds	r3, #60	; 0x3c
 8007770:	3304      	adds	r3, #4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	2b01      	cmp	r3, #1
 800778c:	f040 80b3 	bne.w	80078f6 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	2b00      	cmp	r3, #0
 8007798:	d028      	beq.n	80077ec <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4a70      	ldr	r2, [pc, #448]	; (8007960 <PCD_EP_OutXfrComplete_int+0x208>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d90e      	bls.n	80077c0 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d009      	beq.n	80077c0 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b8:	461a      	mov	r2, r3
 80077ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077be:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f00f fab3 	bl	8016d2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077d0:	461a      	mov	r2, r3
 80077d2:	2101      	movs	r1, #1
 80077d4:	f005 f8b0 	bl	800c938 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e4:	461a      	mov	r2, r3
 80077e6:	2308      	movs	r3, #8
 80077e8:	6093      	str	r3, [r2, #8]
 80077ea:	e0b3      	b.n	8007954 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f003 0320 	and.w	r3, r3, #32
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d009      	beq.n	800780a <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007802:	461a      	mov	r2, r3
 8007804:	2320      	movs	r3, #32
 8007806:	6093      	str	r3, [r2, #8]
 8007808:	e0a4      	b.n	8007954 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007810:	2b00      	cmp	r3, #0
 8007812:	f040 809f 	bne.w	8007954 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	4a51      	ldr	r2, [pc, #324]	; (8007960 <PCD_EP_OutXfrComplete_int+0x208>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d90f      	bls.n	800783e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00a      	beq.n	800783e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007834:	461a      	mov	r2, r3
 8007836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800783a:	6093      	str	r3, [r2, #8]
 800783c:	e08a      	b.n	8007954 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	4613      	mov	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	1a9b      	subs	r3, r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	440b      	add	r3, r1
 800784c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007850:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	0159      	lsls	r1, r3, #5
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	440b      	add	r3, r1
 800785a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007864:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	4613      	mov	r3, r2
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	1a9b      	subs	r3, r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4403      	add	r3, r0
 8007874:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007878:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	4613      	mov	r3, r2
 8007880:	00db      	lsls	r3, r3, #3
 8007882:	1a9b      	subs	r3, r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	440b      	add	r3, r1
 8007888:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800788c:	6819      	ldr	r1, [r3, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	4613      	mov	r3, r2
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	1a9b      	subs	r3, r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4403      	add	r3, r0
 800789c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4419      	add	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	4613      	mov	r3, r2
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	1a9b      	subs	r3, r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4403      	add	r3, r0
 80078b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80078b6:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f00f fa46 	bl	8016d50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d144      	bne.n	8007954 <PCD_EP_OutXfrComplete_int+0x1fc>
 80078ca:	6879      	ldr	r1, [r7, #4]
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	4613      	mov	r3, r2
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	1a9b      	subs	r3, r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	440b      	add	r3, r1
 80078d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d138      	bne.n	8007954 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078ec:	461a      	mov	r2, r3
 80078ee:	2101      	movs	r1, #1
 80078f0:	f005 f822 	bl	800c938 <USB_EP0_OutStart>
 80078f4:	e02e      	b.n	8007954 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a1a      	ldr	r2, [pc, #104]	; (8007964 <PCD_EP_OutXfrComplete_int+0x20c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d124      	bne.n	8007948 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00a      	beq.n	800791e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007914:	461a      	mov	r2, r3
 8007916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800791a:	6093      	str	r3, [r2, #8]
 800791c:	e01a      	b.n	8007954 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007934:	461a      	mov	r2, r3
 8007936:	2320      	movs	r3, #32
 8007938:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f00f fa05 	bl	8016d50 <HAL_PCD_DataOutStageCallback>
 8007946:	e005      	b.n	8007954 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f00f f9fe 	bl	8016d50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	4f54300a 	.word	0x4f54300a
 8007964:	4f54310a 	.word	0x4f54310a

08007968 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	333c      	adds	r3, #60	; 0x3c
 8007980:	3304      	adds	r3, #4
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d113      	bne.n	80079c6 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4a1f      	ldr	r2, [pc, #124]	; (8007a20 <PCD_EP_OutSetupPacket_int+0xb8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d922      	bls.n	80079ec <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01d      	beq.n	80079ec <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079bc:	461a      	mov	r2, r3
 80079be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079c2:	6093      	str	r3, [r2, #8]
 80079c4:	e012      	b.n	80079ec <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4a16      	ldr	r2, [pc, #88]	; (8007a24 <PCD_EP_OutSetupPacket_int+0xbc>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d10e      	bne.n	80079ec <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d009      	beq.n	80079ec <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e4:	461a      	mov	r2, r3
 80079e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f00f f99d 	bl	8016d2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4a0a      	ldr	r2, [pc, #40]	; (8007a20 <PCD_EP_OutSetupPacket_int+0xb8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d90c      	bls.n	8007a14 <PCD_EP_OutSetupPacket_int+0xac>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d108      	bne.n	8007a14 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	2101      	movs	r1, #1
 8007a10:	f004 ff92 	bl	800c938 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	4f54300a 	.word	0x4f54300a
 8007a24:	4f54310a 	.word	0x4f54310a

08007a28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	460b      	mov	r3, r1
 8007a32:	70fb      	strb	r3, [r7, #3]
 8007a34:	4613      	mov	r3, r2
 8007a36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d107      	bne.n	8007a56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007a46:	883b      	ldrh	r3, [r7, #0]
 8007a48:	0419      	lsls	r1, r3, #16
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	629a      	str	r2, [r3, #40]	; 0x28
 8007a54:	e028      	b.n	8007aa8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	0c1b      	lsrs	r3, r3, #16
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	4413      	add	r3, r2
 8007a62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a64:	2300      	movs	r3, #0
 8007a66:	73fb      	strb	r3, [r7, #15]
 8007a68:	e00d      	b.n	8007a86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	3340      	adds	r3, #64	; 0x40
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	0c1b      	lsrs	r3, r3, #16
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	3301      	adds	r3, #1
 8007a84:	73fb      	strb	r3, [r7, #15]
 8007a86:	7bfa      	ldrb	r2, [r7, #15]
 8007a88:	78fb      	ldrb	r3, [r7, #3]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d3ec      	bcc.n	8007a6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007a90:	883b      	ldrh	r3, [r7, #0]
 8007a92:	0418      	lsls	r0, r3, #16
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6819      	ldr	r1, [r3, #0]
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	4302      	orrs	r2, r0
 8007aa0:	3340      	adds	r3, #64	; 0x40
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	440b      	add	r3, r1
 8007aa6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	887a      	ldrh	r2, [r7, #2]
 8007ac8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e25b      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d075      	beq.n	8007bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b0e:	4ba3      	ldr	r3, [pc, #652]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 030c 	and.w	r3, r3, #12
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d00c      	beq.n	8007b34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b1a:	4ba0      	ldr	r3, [pc, #640]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b22:	2b08      	cmp	r3, #8
 8007b24:	d112      	bne.n	8007b4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b26:	4b9d      	ldr	r3, [pc, #628]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b32:	d10b      	bne.n	8007b4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b34:	4b99      	ldr	r3, [pc, #612]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d05b      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x108>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d157      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e236      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b54:	d106      	bne.n	8007b64 <HAL_RCC_OscConfig+0x74>
 8007b56:	4b91      	ldr	r3, [pc, #580]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a90      	ldr	r2, [pc, #576]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	e01d      	b.n	8007ba0 <HAL_RCC_OscConfig+0xb0>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b6c:	d10c      	bne.n	8007b88 <HAL_RCC_OscConfig+0x98>
 8007b6e:	4b8b      	ldr	r3, [pc, #556]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a8a      	ldr	r2, [pc, #552]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	4b88      	ldr	r3, [pc, #544]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a87      	ldr	r2, [pc, #540]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	e00b      	b.n	8007ba0 <HAL_RCC_OscConfig+0xb0>
 8007b88:	4b84      	ldr	r3, [pc, #528]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a83      	ldr	r2, [pc, #524]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	4b81      	ldr	r3, [pc, #516]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a80      	ldr	r2, [pc, #512]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d013      	beq.n	8007bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba8:	f7fd fcfe 	bl	80055a8 <HAL_GetTick>
 8007bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bae:	e008      	b.n	8007bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007bb0:	f7fd fcfa 	bl	80055a8 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b64      	cmp	r3, #100	; 0x64
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e1fb      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bc2:	4b76      	ldr	r3, [pc, #472]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0f0      	beq.n	8007bb0 <HAL_RCC_OscConfig+0xc0>
 8007bce:	e014      	b.n	8007bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd0:	f7fd fcea 	bl	80055a8 <HAL_GetTick>
 8007bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007bd8:	f7fd fce6 	bl	80055a8 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b64      	cmp	r3, #100	; 0x64
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e1e7      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bea:	4b6c      	ldr	r3, [pc, #432]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1f0      	bne.n	8007bd8 <HAL_RCC_OscConfig+0xe8>
 8007bf6:	e000      	b.n	8007bfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d063      	beq.n	8007cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c06:	4b65      	ldr	r3, [pc, #404]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f003 030c 	and.w	r3, r3, #12
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c12:	4b62      	ldr	r3, [pc, #392]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c1a:	2b08      	cmp	r3, #8
 8007c1c:	d11c      	bne.n	8007c58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c1e:	4b5f      	ldr	r3, [pc, #380]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d116      	bne.n	8007c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c2a:	4b5c      	ldr	r3, [pc, #368]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d005      	beq.n	8007c42 <HAL_RCC_OscConfig+0x152>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d001      	beq.n	8007c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e1bb      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c42:	4b56      	ldr	r3, [pc, #344]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	00db      	lsls	r3, r3, #3
 8007c50:	4952      	ldr	r1, [pc, #328]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c56:	e03a      	b.n	8007cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d020      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c60:	4b4f      	ldr	r3, [pc, #316]	; (8007da0 <HAL_RCC_OscConfig+0x2b0>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c66:	f7fd fc9f 	bl	80055a8 <HAL_GetTick>
 8007c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c6c:	e008      	b.n	8007c80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c6e:	f7fd fc9b 	bl	80055a8 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e19c      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c80:	4b46      	ldr	r3, [pc, #280]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0f0      	beq.n	8007c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c8c:	4b43      	ldr	r3, [pc, #268]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	4940      	ldr	r1, [pc, #256]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	600b      	str	r3, [r1, #0]
 8007ca0:	e015      	b.n	8007cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ca2:	4b3f      	ldr	r3, [pc, #252]	; (8007da0 <HAL_RCC_OscConfig+0x2b0>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca8:	f7fd fc7e 	bl	80055a8 <HAL_GetTick>
 8007cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cae:	e008      	b.n	8007cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cb0:	f7fd fc7a 	bl	80055a8 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d901      	bls.n	8007cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e17b      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cc2:	4b36      	ldr	r3, [pc, #216]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1f0      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d030      	beq.n	8007d3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d016      	beq.n	8007d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ce2:	4b30      	ldr	r3, [pc, #192]	; (8007da4 <HAL_RCC_OscConfig+0x2b4>)
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce8:	f7fd fc5e 	bl	80055a8 <HAL_GetTick>
 8007cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cee:	e008      	b.n	8007d02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cf0:	f7fd fc5a 	bl	80055a8 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e15b      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d02:	4b26      	ldr	r3, [pc, #152]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0f0      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x200>
 8007d0e:	e015      	b.n	8007d3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d10:	4b24      	ldr	r3, [pc, #144]	; (8007da4 <HAL_RCC_OscConfig+0x2b4>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d16:	f7fd fc47 	bl	80055a8 <HAL_GetTick>
 8007d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d1c:	e008      	b.n	8007d30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d1e:	f7fd fc43 	bl	80055a8 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d901      	bls.n	8007d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e144      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d30:	4b1a      	ldr	r3, [pc, #104]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d34:	f003 0302 	and.w	r3, r3, #2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1f0      	bne.n	8007d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 80a0 	beq.w	8007e8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d4e:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10f      	bne.n	8007d7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60bb      	str	r3, [r7, #8]
 8007d5e:	4b0f      	ldr	r3, [pc, #60]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	4a0e      	ldr	r2, [pc, #56]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d68:	6413      	str	r3, [r2, #64]	; 0x40
 8007d6a:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <HAL_RCC_OscConfig+0x2ac>)
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d72:	60bb      	str	r3, [r7, #8]
 8007d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d76:	2301      	movs	r3, #1
 8007d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d7a:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <HAL_RCC_OscConfig+0x2b8>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d121      	bne.n	8007dca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d86:	4b08      	ldr	r3, [pc, #32]	; (8007da8 <HAL_RCC_OscConfig+0x2b8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a07      	ldr	r2, [pc, #28]	; (8007da8 <HAL_RCC_OscConfig+0x2b8>)
 8007d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d92:	f7fd fc09 	bl	80055a8 <HAL_GetTick>
 8007d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d98:	e011      	b.n	8007dbe <HAL_RCC_OscConfig+0x2ce>
 8007d9a:	bf00      	nop
 8007d9c:	40023800 	.word	0x40023800
 8007da0:	42470000 	.word	0x42470000
 8007da4:	42470e80 	.word	0x42470e80
 8007da8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dac:	f7fd fbfc 	bl	80055a8 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e0fd      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dbe:	4b81      	ldr	r3, [pc, #516]	; (8007fc4 <HAL_RCC_OscConfig+0x4d4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0f0      	beq.n	8007dac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d106      	bne.n	8007de0 <HAL_RCC_OscConfig+0x2f0>
 8007dd2:	4b7d      	ldr	r3, [pc, #500]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd6:	4a7c      	ldr	r2, [pc, #496]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007dd8:	f043 0301 	orr.w	r3, r3, #1
 8007ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8007dde:	e01c      	b.n	8007e1a <HAL_RCC_OscConfig+0x32a>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	2b05      	cmp	r3, #5
 8007de6:	d10c      	bne.n	8007e02 <HAL_RCC_OscConfig+0x312>
 8007de8:	4b77      	ldr	r3, [pc, #476]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dec:	4a76      	ldr	r2, [pc, #472]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007dee:	f043 0304 	orr.w	r3, r3, #4
 8007df2:	6713      	str	r3, [r2, #112]	; 0x70
 8007df4:	4b74      	ldr	r3, [pc, #464]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df8:	4a73      	ldr	r2, [pc, #460]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007dfa:	f043 0301 	orr.w	r3, r3, #1
 8007dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8007e00:	e00b      	b.n	8007e1a <HAL_RCC_OscConfig+0x32a>
 8007e02:	4b71      	ldr	r3, [pc, #452]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e06:	4a70      	ldr	r2, [pc, #448]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007e08:	f023 0301 	bic.w	r3, r3, #1
 8007e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8007e0e:	4b6e      	ldr	r3, [pc, #440]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e12:	4a6d      	ldr	r2, [pc, #436]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007e14:	f023 0304 	bic.w	r3, r3, #4
 8007e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d015      	beq.n	8007e4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e22:	f7fd fbc1 	bl	80055a8 <HAL_GetTick>
 8007e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e28:	e00a      	b.n	8007e40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e2a:	f7fd fbbd 	bl	80055a8 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e0bc      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e40:	4b61      	ldr	r3, [pc, #388]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0ee      	beq.n	8007e2a <HAL_RCC_OscConfig+0x33a>
 8007e4c:	e014      	b.n	8007e78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e4e:	f7fd fbab 	bl	80055a8 <HAL_GetTick>
 8007e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e54:	e00a      	b.n	8007e6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e56:	f7fd fba7 	bl	80055a8 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e0a6      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e6c:	4b56      	ldr	r3, [pc, #344]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1ee      	bne.n	8007e56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d105      	bne.n	8007e8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e7e:	4b52      	ldr	r3, [pc, #328]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	4a51      	ldr	r2, [pc, #324]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 8092 	beq.w	8007fb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e94:	4b4c      	ldr	r3, [pc, #304]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 030c 	and.w	r3, r3, #12
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d05c      	beq.n	8007f5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d141      	bne.n	8007f2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ea8:	4b48      	ldr	r3, [pc, #288]	; (8007fcc <HAL_RCC_OscConfig+0x4dc>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eae:	f7fd fb7b 	bl	80055a8 <HAL_GetTick>
 8007eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eb4:	e008      	b.n	8007ec8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007eb6:	f7fd fb77 	bl	80055a8 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d901      	bls.n	8007ec8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e078      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ec8:	4b3f      	ldr	r3, [pc, #252]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1f0      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	019b      	lsls	r3, r3, #6
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eea:	085b      	lsrs	r3, r3, #1
 8007eec:	3b01      	subs	r3, #1
 8007eee:	041b      	lsls	r3, r3, #16
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	061b      	lsls	r3, r3, #24
 8007ef8:	4933      	ldr	r1, [pc, #204]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007efe:	4b33      	ldr	r3, [pc, #204]	; (8007fcc <HAL_RCC_OscConfig+0x4dc>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f04:	f7fd fb50 	bl	80055a8 <HAL_GetTick>
 8007f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f0c:	f7fd fb4c 	bl	80055a8 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e04d      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f1e:	4b2a      	ldr	r3, [pc, #168]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0f0      	beq.n	8007f0c <HAL_RCC_OscConfig+0x41c>
 8007f2a:	e045      	b.n	8007fb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f2c:	4b27      	ldr	r3, [pc, #156]	; (8007fcc <HAL_RCC_OscConfig+0x4dc>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f32:	f7fd fb39 	bl	80055a8 <HAL_GetTick>
 8007f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f38:	e008      	b.n	8007f4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f3a:	f7fd fb35 	bl	80055a8 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e036      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f4c:	4b1e      	ldr	r3, [pc, #120]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1f0      	bne.n	8007f3a <HAL_RCC_OscConfig+0x44a>
 8007f58:	e02e      	b.n	8007fb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d101      	bne.n	8007f66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e029      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007f66:	4b18      	ldr	r3, [pc, #96]	; (8007fc8 <HAL_RCC_OscConfig+0x4d8>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d11c      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d115      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f8e:	4013      	ands	r3, r2
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d10d      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d106      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d001      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e000      	b.n	8007fba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	40007000 	.word	0x40007000
 8007fc8:	40023800 	.word	0x40023800
 8007fcc:	42470060 	.word	0x42470060

08007fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e0cc      	b.n	800817e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007fe4:	4b68      	ldr	r3, [pc, #416]	; (8008188 <HAL_RCC_ClockConfig+0x1b8>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 030f 	and.w	r3, r3, #15
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d90c      	bls.n	800800c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff2:	4b65      	ldr	r3, [pc, #404]	; (8008188 <HAL_RCC_ClockConfig+0x1b8>)
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	b2d2      	uxtb	r2, r2
 8007ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ffa:	4b63      	ldr	r3, [pc, #396]	; (8008188 <HAL_RCC_ClockConfig+0x1b8>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	429a      	cmp	r2, r3
 8008006:	d001      	beq.n	800800c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e0b8      	b.n	800817e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d020      	beq.n	800805a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d005      	beq.n	8008030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008024:	4b59      	ldr	r3, [pc, #356]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	4a58      	ldr	r2, [pc, #352]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 800802a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800802e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0308 	and.w	r3, r3, #8
 8008038:	2b00      	cmp	r3, #0
 800803a:	d005      	beq.n	8008048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800803c:	4b53      	ldr	r3, [pc, #332]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	4a52      	ldr	r2, [pc, #328]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 8008042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008048:	4b50      	ldr	r3, [pc, #320]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	494d      	ldr	r1, [pc, #308]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 8008056:	4313      	orrs	r3, r2
 8008058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	d044      	beq.n	80080f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d107      	bne.n	800807e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800806e:	4b47      	ldr	r3, [pc, #284]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d119      	bne.n	80080ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e07f      	b.n	800817e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2b02      	cmp	r3, #2
 8008084:	d003      	beq.n	800808e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800808a:	2b03      	cmp	r3, #3
 800808c:	d107      	bne.n	800809e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800808e:	4b3f      	ldr	r3, [pc, #252]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d109      	bne.n	80080ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e06f      	b.n	800817e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800809e:	4b3b      	ldr	r3, [pc, #236]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e067      	b.n	800817e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080ae:	4b37      	ldr	r3, [pc, #220]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f023 0203 	bic.w	r2, r3, #3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	4934      	ldr	r1, [pc, #208]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080c0:	f7fd fa72 	bl	80055a8 <HAL_GetTick>
 80080c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080c6:	e00a      	b.n	80080de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080c8:	f7fd fa6e 	bl	80055a8 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d901      	bls.n	80080de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e04f      	b.n	800817e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080de:	4b2b      	ldr	r3, [pc, #172]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 020c 	and.w	r2, r3, #12
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d1eb      	bne.n	80080c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080f0:	4b25      	ldr	r3, [pc, #148]	; (8008188 <HAL_RCC_ClockConfig+0x1b8>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 030f 	and.w	r3, r3, #15
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d20c      	bcs.n	8008118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080fe:	4b22      	ldr	r3, [pc, #136]	; (8008188 <HAL_RCC_ClockConfig+0x1b8>)
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008106:	4b20      	ldr	r3, [pc, #128]	; (8008188 <HAL_RCC_ClockConfig+0x1b8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 030f 	and.w	r3, r3, #15
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d001      	beq.n	8008118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e032      	b.n	800817e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d008      	beq.n	8008136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008124:	4b19      	ldr	r3, [pc, #100]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	4916      	ldr	r1, [pc, #88]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 8008132:	4313      	orrs	r3, r2
 8008134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0308 	and.w	r3, r3, #8
 800813e:	2b00      	cmp	r3, #0
 8008140:	d009      	beq.n	8008156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008142:	4b12      	ldr	r3, [pc, #72]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	490e      	ldr	r1, [pc, #56]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 8008152:	4313      	orrs	r3, r2
 8008154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008156:	f000 f821 	bl	800819c <HAL_RCC_GetSysClockFreq>
 800815a:	4601      	mov	r1, r0
 800815c:	4b0b      	ldr	r3, [pc, #44]	; (800818c <HAL_RCC_ClockConfig+0x1bc>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	091b      	lsrs	r3, r3, #4
 8008162:	f003 030f 	and.w	r3, r3, #15
 8008166:	4a0a      	ldr	r2, [pc, #40]	; (8008190 <HAL_RCC_ClockConfig+0x1c0>)
 8008168:	5cd3      	ldrb	r3, [r2, r3]
 800816a:	fa21 f303 	lsr.w	r3, r1, r3
 800816e:	4a09      	ldr	r2, [pc, #36]	; (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 8008170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008172:	4b09      	ldr	r3, [pc, #36]	; (8008198 <HAL_RCC_ClockConfig+0x1c8>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4618      	mov	r0, r3
 8008178:	f7fd f9d2 	bl	8005520 <HAL_InitTick>

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	40023c00 	.word	0x40023c00
 800818c:	40023800 	.word	0x40023800
 8008190:	0801b6bc 	.word	0x0801b6bc
 8008194:	20000050 	.word	0x20000050
 8008198:	20000054 	.word	0x20000054

0800819c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800819c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	2300      	movs	r3, #0
 80081ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80081ae:	2300      	movs	r3, #0
 80081b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081b2:	4b63      	ldr	r3, [pc, #396]	; (8008340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f003 030c 	and.w	r3, r3, #12
 80081ba:	2b04      	cmp	r3, #4
 80081bc:	d007      	beq.n	80081ce <HAL_RCC_GetSysClockFreq+0x32>
 80081be:	2b08      	cmp	r3, #8
 80081c0:	d008      	beq.n	80081d4 <HAL_RCC_GetSysClockFreq+0x38>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f040 80b4 	bne.w	8008330 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081c8:	4b5e      	ldr	r3, [pc, #376]	; (8008344 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80081ca:	60bb      	str	r3, [r7, #8]
       break;
 80081cc:	e0b3      	b.n	8008336 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081ce:	4b5e      	ldr	r3, [pc, #376]	; (8008348 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80081d0:	60bb      	str	r3, [r7, #8]
      break;
 80081d2:	e0b0      	b.n	8008336 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081d4:	4b5a      	ldr	r3, [pc, #360]	; (8008340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081de:	4b58      	ldr	r3, [pc, #352]	; (8008340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d04a      	beq.n	8008280 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081ea:	4b55      	ldr	r3, [pc, #340]	; (8008340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	099b      	lsrs	r3, r3, #6
 80081f0:	f04f 0400 	mov.w	r4, #0
 80081f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80081f8:	f04f 0200 	mov.w	r2, #0
 80081fc:	ea03 0501 	and.w	r5, r3, r1
 8008200:	ea04 0602 	and.w	r6, r4, r2
 8008204:	4629      	mov	r1, r5
 8008206:	4632      	mov	r2, r6
 8008208:	f04f 0300 	mov.w	r3, #0
 800820c:	f04f 0400 	mov.w	r4, #0
 8008210:	0154      	lsls	r4, r2, #5
 8008212:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008216:	014b      	lsls	r3, r1, #5
 8008218:	4619      	mov	r1, r3
 800821a:	4622      	mov	r2, r4
 800821c:	1b49      	subs	r1, r1, r5
 800821e:	eb62 0206 	sbc.w	r2, r2, r6
 8008222:	f04f 0300 	mov.w	r3, #0
 8008226:	f04f 0400 	mov.w	r4, #0
 800822a:	0194      	lsls	r4, r2, #6
 800822c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008230:	018b      	lsls	r3, r1, #6
 8008232:	1a5b      	subs	r3, r3, r1
 8008234:	eb64 0402 	sbc.w	r4, r4, r2
 8008238:	f04f 0100 	mov.w	r1, #0
 800823c:	f04f 0200 	mov.w	r2, #0
 8008240:	00e2      	lsls	r2, r4, #3
 8008242:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008246:	00d9      	lsls	r1, r3, #3
 8008248:	460b      	mov	r3, r1
 800824a:	4614      	mov	r4, r2
 800824c:	195b      	adds	r3, r3, r5
 800824e:	eb44 0406 	adc.w	r4, r4, r6
 8008252:	f04f 0100 	mov.w	r1, #0
 8008256:	f04f 0200 	mov.w	r2, #0
 800825a:	0262      	lsls	r2, r4, #9
 800825c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008260:	0259      	lsls	r1, r3, #9
 8008262:	460b      	mov	r3, r1
 8008264:	4614      	mov	r4, r2
 8008266:	4618      	mov	r0, r3
 8008268:	4621      	mov	r1, r4
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f04f 0400 	mov.w	r4, #0
 8008270:	461a      	mov	r2, r3
 8008272:	4623      	mov	r3, r4
 8008274:	f7f8 fc02 	bl	8000a7c <__aeabi_uldivmod>
 8008278:	4603      	mov	r3, r0
 800827a:	460c      	mov	r4, r1
 800827c:	60fb      	str	r3, [r7, #12]
 800827e:	e049      	b.n	8008314 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008280:	4b2f      	ldr	r3, [pc, #188]	; (8008340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	099b      	lsrs	r3, r3, #6
 8008286:	f04f 0400 	mov.w	r4, #0
 800828a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800828e:	f04f 0200 	mov.w	r2, #0
 8008292:	ea03 0501 	and.w	r5, r3, r1
 8008296:	ea04 0602 	and.w	r6, r4, r2
 800829a:	4629      	mov	r1, r5
 800829c:	4632      	mov	r2, r6
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	f04f 0400 	mov.w	r4, #0
 80082a6:	0154      	lsls	r4, r2, #5
 80082a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80082ac:	014b      	lsls	r3, r1, #5
 80082ae:	4619      	mov	r1, r3
 80082b0:	4622      	mov	r2, r4
 80082b2:	1b49      	subs	r1, r1, r5
 80082b4:	eb62 0206 	sbc.w	r2, r2, r6
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	f04f 0400 	mov.w	r4, #0
 80082c0:	0194      	lsls	r4, r2, #6
 80082c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80082c6:	018b      	lsls	r3, r1, #6
 80082c8:	1a5b      	subs	r3, r3, r1
 80082ca:	eb64 0402 	sbc.w	r4, r4, r2
 80082ce:	f04f 0100 	mov.w	r1, #0
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	00e2      	lsls	r2, r4, #3
 80082d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80082dc:	00d9      	lsls	r1, r3, #3
 80082de:	460b      	mov	r3, r1
 80082e0:	4614      	mov	r4, r2
 80082e2:	195b      	adds	r3, r3, r5
 80082e4:	eb44 0406 	adc.w	r4, r4, r6
 80082e8:	f04f 0100 	mov.w	r1, #0
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	02a2      	lsls	r2, r4, #10
 80082f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80082f6:	0299      	lsls	r1, r3, #10
 80082f8:	460b      	mov	r3, r1
 80082fa:	4614      	mov	r4, r2
 80082fc:	4618      	mov	r0, r3
 80082fe:	4621      	mov	r1, r4
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f04f 0400 	mov.w	r4, #0
 8008306:	461a      	mov	r2, r3
 8008308:	4623      	mov	r3, r4
 800830a:	f7f8 fbb7 	bl	8000a7c <__aeabi_uldivmod>
 800830e:	4603      	mov	r3, r0
 8008310:	460c      	mov	r4, r1
 8008312:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008314:	4b0a      	ldr	r3, [pc, #40]	; (8008340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	0c1b      	lsrs	r3, r3, #16
 800831a:	f003 0303 	and.w	r3, r3, #3
 800831e:	3301      	adds	r3, #1
 8008320:	005b      	lsls	r3, r3, #1
 8008322:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	fbb2 f3f3 	udiv	r3, r2, r3
 800832c:	60bb      	str	r3, [r7, #8]
      break;
 800832e:	e002      	b.n	8008336 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008330:	4b04      	ldr	r3, [pc, #16]	; (8008344 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008332:	60bb      	str	r3, [r7, #8]
      break;
 8008334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008336:	68bb      	ldr	r3, [r7, #8]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008340:	40023800 	.word	0x40023800
 8008344:	00f42400 	.word	0x00f42400
 8008348:	007a1200 	.word	0x007a1200

0800834c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008350:	4b03      	ldr	r3, [pc, #12]	; (8008360 <HAL_RCC_GetHCLKFreq+0x14>)
 8008352:	681b      	ldr	r3, [r3, #0]
}
 8008354:	4618      	mov	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	20000050 	.word	0x20000050

08008364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008368:	f7ff fff0 	bl	800834c <HAL_RCC_GetHCLKFreq>
 800836c:	4601      	mov	r1, r0
 800836e:	4b05      	ldr	r3, [pc, #20]	; (8008384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	0a9b      	lsrs	r3, r3, #10
 8008374:	f003 0307 	and.w	r3, r3, #7
 8008378:	4a03      	ldr	r2, [pc, #12]	; (8008388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800837a:	5cd3      	ldrb	r3, [r2, r3]
 800837c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008380:	4618      	mov	r0, r3
 8008382:	bd80      	pop	{r7, pc}
 8008384:	40023800 	.word	0x40023800
 8008388:	0801b6cc 	.word	0x0801b6cc

0800838c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d105      	bne.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d038      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80083b4:	4b68      	ldr	r3, [pc, #416]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083ba:	f7fd f8f5 	bl	80055a8 <HAL_GetTick>
 80083be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083c0:	e008      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80083c2:	f7fd f8f1 	bl	80055a8 <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d901      	bls.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e0bd      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083d4:	4b61      	ldr	r3, [pc, #388]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1f0      	bne.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	019b      	lsls	r3, r3, #6
 80083ea:	431a      	orrs	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	071b      	lsls	r3, r3, #28
 80083f2:	495a      	ldr	r1, [pc, #360]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f4:	4313      	orrs	r3, r2
 80083f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80083fa:	4b57      	ldr	r3, [pc, #348]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80083fc:	2201      	movs	r2, #1
 80083fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008400:	f7fd f8d2 	bl	80055a8 <HAL_GetTick>
 8008404:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008406:	e008      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008408:	f7fd f8ce 	bl	80055a8 <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d901      	bls.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e09a      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800841a:	4b50      	ldr	r3, [pc, #320]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d0f0      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 8083 	beq.w	800853a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	4b48      	ldr	r3, [pc, #288]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	4a47      	ldr	r2, [pc, #284]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800843e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008442:	6413      	str	r3, [r2, #64]	; 0x40
 8008444:	4b45      	ldr	r3, [pc, #276]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008450:	4b43      	ldr	r3, [pc, #268]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a42      	ldr	r2, [pc, #264]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800845a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800845c:	f7fd f8a4 	bl	80055a8 <HAL_GetTick>
 8008460:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008462:	e008      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008464:	f7fd f8a0 	bl	80055a8 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b02      	cmp	r3, #2
 8008470:	d901      	bls.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e06c      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008476:	4b3a      	ldr	r3, [pc, #232]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0f0      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008482:	4b36      	ldr	r3, [pc, #216]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800848a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d02f      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	429a      	cmp	r2, r3
 800849e:	d028      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084a0:	4b2e      	ldr	r3, [pc, #184]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084a8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80084aa:	4b2e      	ldr	r3, [pc, #184]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80084ac:	2201      	movs	r2, #1
 80084ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80084b0:	4b2c      	ldr	r3, [pc, #176]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80084b6:	4a29      	ldr	r2, [pc, #164]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80084bc:	4b27      	ldr	r3, [pc, #156]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d114      	bne.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80084c8:	f7fd f86e 	bl	80055a8 <HAL_GetTick>
 80084cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084ce:	e00a      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084d0:	f7fd f86a 	bl	80055a8 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	f241 3288 	movw	r2, #5000	; 0x1388
 80084de:	4293      	cmp	r3, r2
 80084e0:	d901      	bls.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e034      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084e6:	4b1d      	ldr	r3, [pc, #116]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0ee      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084fe:	d10d      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008500:	4b16      	ldr	r3, [pc, #88]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008514:	4911      	ldr	r1, [pc, #68]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008516:	4313      	orrs	r3, r2
 8008518:	608b      	str	r3, [r1, #8]
 800851a:	e005      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800851c:	4b0f      	ldr	r3, [pc, #60]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	4a0e      	ldr	r2, [pc, #56]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008522:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008526:	6093      	str	r3, [r2, #8]
 8008528:	4b0c      	ldr	r3, [pc, #48]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800852a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008534:	4909      	ldr	r1, [pc, #36]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008536:	4313      	orrs	r3, r2
 8008538:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0308 	and.w	r3, r3, #8
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	7d1a      	ldrb	r2, [r3, #20]
 800854a:	4b07      	ldr	r3, [pc, #28]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800854c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	42470068 	.word	0x42470068
 800855c:	40023800 	.word	0x40023800
 8008560:	40007000 	.word	0x40007000
 8008564:	42470e40 	.word	0x42470e40
 8008568:	424711e0 	.word	0x424711e0

0800856c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e083      	b.n	8008686 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	7f5b      	ldrb	r3, [r3, #29]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d105      	bne.n	8008594 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7fc fc62 	bl	8004e58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	22ca      	movs	r2, #202	; 0xca
 80085a0:	625a      	str	r2, [r3, #36]	; 0x24
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2253      	movs	r2, #83	; 0x53
 80085a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 faa8 	bl	8008b00 <RTC_EnterInitMode>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d008      	beq.n	80085c8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	22ff      	movs	r2, #255	; 0xff
 80085bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2204      	movs	r2, #4
 80085c2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e05e      	b.n	8008686 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80085d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085da:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6899      	ldr	r1, [r3, #8]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	431a      	orrs	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	431a      	orrs	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	68d2      	ldr	r2, [r2, #12]
 8008602:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6919      	ldr	r1, [r3, #16]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	041a      	lsls	r2, r3, #16
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68da      	ldr	r2, [r3, #12]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008626:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10e      	bne.n	8008654 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fa3a 	bl	8008ab0 <HAL_RTC_WaitForSynchro>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d008      	beq.n	8008654 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	22ff      	movs	r2, #255	; 0xff
 8008648:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2204      	movs	r2, #4
 800864e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e018      	b.n	8008686 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008662:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	430a      	orrs	r2, r1
 8008674:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	22ff      	movs	r2, #255	; 0xff
 800867c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008684:	2300      	movs	r3, #0
  }
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800868e:	b590      	push	{r4, r7, lr}
 8008690:	b087      	sub	sp, #28
 8008692:	af00      	add	r7, sp, #0
 8008694:	60f8      	str	r0, [r7, #12]
 8008696:	60b9      	str	r1, [r7, #8]
 8008698:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	7f1b      	ldrb	r3, [r3, #28]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d101      	bne.n	80086aa <HAL_RTC_SetTime+0x1c>
 80086a6:	2302      	movs	r3, #2
 80086a8:	e0aa      	b.n	8008800 <HAL_RTC_SetTime+0x172>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2201      	movs	r2, #1
 80086ae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2202      	movs	r2, #2
 80086b4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d126      	bne.n	800870a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d102      	bne.n	80086d0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2200      	movs	r2, #0
 80086ce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 fa3f 	bl	8008b58 <RTC_ByteToBcd2>
 80086da:	4603      	mov	r3, r0
 80086dc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	785b      	ldrb	r3, [r3, #1]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 fa38 	bl	8008b58 <RTC_ByteToBcd2>
 80086e8:	4603      	mov	r3, r0
 80086ea:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80086ec:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	789b      	ldrb	r3, [r3, #2]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fa30 	bl	8008b58 <RTC_ByteToBcd2>
 80086f8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80086fa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	78db      	ldrb	r3, [r3, #3]
 8008702:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008704:	4313      	orrs	r3, r2
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	e018      	b.n	800873c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008714:	2b00      	cmp	r3, #0
 8008716:	d102      	bne.n	800871e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2200      	movs	r2, #0
 800871c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800872a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008730:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	78db      	ldrb	r3, [r3, #3]
 8008736:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008738:	4313      	orrs	r3, r2
 800873a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	22ca      	movs	r2, #202	; 0xca
 8008742:	625a      	str	r2, [r3, #36]	; 0x24
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2253      	movs	r2, #83	; 0x53
 800874a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f9d7 	bl	8008b00 <RTC_EnterInitMode>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	22ff      	movs	r2, #255	; 0xff
 800875e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2204      	movs	r2, #4
 8008764:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e047      	b.n	8008800 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800877a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800877e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689a      	ldr	r2, [r3, #8]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800878e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6899      	ldr	r1, [r3, #8]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	431a      	orrs	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087b6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d111      	bne.n	80087ea <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 f972 	bl	8008ab0 <HAL_RTC_WaitForSynchro>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00b      	beq.n	80087ea <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	22ff      	movs	r2, #255	; 0xff
 80087d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2204      	movs	r2, #4
 80087de:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e00a      	b.n	8008800 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	22ff      	movs	r2, #255	; 0xff
 80087f0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2201      	movs	r2, #1
 80087f6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80087fe:	2300      	movs	r3, #0
  }
}
 8008800:	4618      	mov	r0, r3
 8008802:	371c      	adds	r7, #28
 8008804:	46bd      	mov	sp, r7
 8008806:	bd90      	pop	{r4, r7, pc}

08008808 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800883a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800883e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	0c1b      	lsrs	r3, r3, #16
 8008844:	b2db      	uxtb	r3, r3
 8008846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800884a:	b2da      	uxtb	r2, r3
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	0a1b      	lsrs	r3, r3, #8
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800885a:	b2da      	uxtb	r2, r3
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008868:	b2da      	uxtb	r2, r3
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	0c1b      	lsrs	r3, r3, #16
 8008872:	b2db      	uxtb	r3, r3
 8008874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008878:	b2da      	uxtb	r2, r3
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d11a      	bne.n	80088ba <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	4618      	mov	r0, r3
 800888a:	f000 f983 	bl	8008b94 <RTC_Bcd2ToByte>
 800888e:	4603      	mov	r3, r0
 8008890:	461a      	mov	r2, r3
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 f97a 	bl	8008b94 <RTC_Bcd2ToByte>
 80088a0:	4603      	mov	r3, r0
 80088a2:	461a      	mov	r2, r3
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	789b      	ldrb	r3, [r3, #2]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f971 	bl	8008b94 <RTC_Bcd2ToByte>
 80088b2:	4603      	mov	r3, r0
 80088b4:	461a      	mov	r2, r3
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80088c4:	b590      	push	{r4, r7, lr}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	7f1b      	ldrb	r3, [r3, #28]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d101      	bne.n	80088e0 <HAL_RTC_SetDate+0x1c>
 80088dc:	2302      	movs	r3, #2
 80088de:	e094      	b.n	8008a0a <HAL_RTC_SetDate+0x146>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2201      	movs	r2, #1
 80088e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2202      	movs	r2, #2
 80088ea:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10e      	bne.n	8008910 <HAL_RTC_SetDate+0x4c>
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	f003 0310 	and.w	r3, r3, #16
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d008      	beq.n	8008910 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	785b      	ldrb	r3, [r3, #1]
 8008902:	f023 0310 	bic.w	r3, r3, #16
 8008906:	b2db      	uxtb	r3, r3
 8008908:	330a      	adds	r3, #10
 800890a:	b2da      	uxtb	r2, r3
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d11c      	bne.n	8008950 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	78db      	ldrb	r3, [r3, #3]
 800891a:	4618      	mov	r0, r3
 800891c:	f000 f91c 	bl	8008b58 <RTC_ByteToBcd2>
 8008920:	4603      	mov	r3, r0
 8008922:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	785b      	ldrb	r3, [r3, #1]
 8008928:	4618      	mov	r0, r3
 800892a:	f000 f915 	bl	8008b58 <RTC_ByteToBcd2>
 800892e:	4603      	mov	r3, r0
 8008930:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008932:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	789b      	ldrb	r3, [r3, #2]
 8008938:	4618      	mov	r0, r3
 800893a:	f000 f90d 	bl	8008b58 <RTC_ByteToBcd2>
 800893e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008940:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]
 800894e:	e00e      	b.n	800896e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	78db      	ldrb	r3, [r3, #3]
 8008954:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	785b      	ldrb	r3, [r3, #1]
 800895a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800895c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008962:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800896a:	4313      	orrs	r3, r2
 800896c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	22ca      	movs	r2, #202	; 0xca
 8008974:	625a      	str	r2, [r3, #36]	; 0x24
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2253      	movs	r2, #83	; 0x53
 800897c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 f8be 	bl	8008b00 <RTC_EnterInitMode>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00b      	beq.n	80089a2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	22ff      	movs	r2, #255	; 0xff
 8008990:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2204      	movs	r2, #4
 8008996:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e033      	b.n	8008a0a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089c0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f003 0320 	and.w	r3, r3, #32
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d111      	bne.n	80089f4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 f86d 	bl	8008ab0 <HAL_RTC_WaitForSynchro>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	22ff      	movs	r2, #255	; 0xff
 80089e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2204      	movs	r2, #4
 80089e8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e00a      	b.n	8008a0a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	22ff      	movs	r2, #255	; 0xff
 80089fa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2201      	movs	r2, #1
 8008a00:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008a08:	2300      	movs	r3, #0
  }
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	371c      	adds	r7, #28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd90      	pop	{r4, r7, pc}

08008a12 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b086      	sub	sp, #24
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008a2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a30:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	0c1b      	lsrs	r3, r3, #16
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	0a1b      	lsrs	r3, r3, #8
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	f003 031f 	and.w	r3, r3, #31
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	0b5b      	lsrs	r3, r3, #13
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	f003 0307 	and.w	r3, r3, #7
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d11a      	bne.n	8008aa6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	78db      	ldrb	r3, [r3, #3]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 f88d 	bl	8008b94 <RTC_Bcd2ToByte>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	785b      	ldrb	r3, [r3, #1]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 f884 	bl	8008b94 <RTC_Bcd2ToByte>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	461a      	mov	r2, r3
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	789b      	ldrb	r3, [r3, #2]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 f87b 	bl	8008b94 <RTC_Bcd2ToByte>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008aca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008acc:	f7fc fd6c 	bl	80055a8 <HAL_GetTick>
 8008ad0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008ad2:	e009      	b.n	8008ae8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ad4:	f7fc fd68 	bl	80055a8 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ae2:	d901      	bls.n	8008ae8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e007      	b.n	8008af8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0ee      	beq.n	8008ad4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d119      	bne.n	8008b4e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b22:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b24:	f7fc fd40 	bl	80055a8 <HAL_GetTick>
 8008b28:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008b2a:	e009      	b.n	8008b40 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b2c:	f7fc fd3c 	bl	80055a8 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b3a:	d901      	bls.n	8008b40 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e007      	b.n	8008b50 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0ee      	beq.n	8008b2c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008b66:	e005      	b.n	8008b74 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	3b0a      	subs	r3, #10
 8008b72:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	2b09      	cmp	r3, #9
 8008b78:	d8f6      	bhi.n	8008b68 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	b2db      	uxtb	r3, r3
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008ba2:	79fb      	ldrb	r3, [r7, #7]
 8008ba4:	091b      	lsrs	r3, r3, #4
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	461a      	mov	r2, r3
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008bb4:	79fb      	ldrb	r3, [r7, #7]
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	b2db      	uxtb	r3, r3
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e022      	b.n	8008c28 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d105      	bne.n	8008bfa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7fc f945 	bl	8004e84 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2203      	movs	r2, #3
 8008bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f814 	bl	8008c30 <HAL_SD_InitCard>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e00a      	b.n	8008c28 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c30:	b5b0      	push	{r4, r5, r7, lr}
 8008c32:	b08e      	sub	sp, #56	; 0x38
 8008c34:	af04      	add	r7, sp, #16
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008c40:	2300      	movs	r3, #0
 8008c42:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008c44:	2300      	movs	r3, #0
 8008c46:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008c4c:	2376      	movs	r3, #118	; 0x76
 8008c4e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681d      	ldr	r5, [r3, #0]
 8008c54:	466c      	mov	r4, sp
 8008c56:	f107 0314 	add.w	r3, r7, #20
 8008c5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c62:	f107 0308 	add.w	r3, r7, #8
 8008c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f001 fef9 	bl	800aa60 <SDIO_Init>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e031      	b.n	8008ce4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008c80:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <HAL_SD_InitCard+0xbc>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f001 ff31 	bl	800aaf2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008c90:	4b16      	ldr	r3, [pc, #88]	; (8008cec <HAL_SD_InitCard+0xbc>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f001 f882 	bl	8009da0 <SD_PowerON>
 8008c9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e013      	b.n	8008ce4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 ffa1 	bl	8009c04 <SD_InitCard>
 8008cc2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00b      	beq.n	8008ce2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e000      	b.n	8008ce4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3728      	adds	r7, #40	; 0x28
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bdb0      	pop	{r4, r5, r7, pc}
 8008cec:	422580a0 	.word	0x422580a0

08008cf0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b092      	sub	sp, #72	; 0x48
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008cfe:	f7fc fc53 	bl	80055a8 <HAL_GetTick>
 8008d02:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d107      	bne.n	8008d22 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e1d9      	b.n	80090d6 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	f040 81cc 	bne.w	80090c8 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	441a      	add	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d907      	bls.n	8008d54 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d48:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e1c0      	b.n	80090d6 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2203      	movs	r2, #3
 8008d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2200      	movs	r2, #0
 8008d62:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d002      	beq.n	8008d72 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	025b      	lsls	r3, r3, #9
 8008d70:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f001 ff4c 	bl	800ac18 <SDMMC_CmdBlockLength>
 8008d80:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00f      	beq.n	8008da8 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a9b      	ldr	r2, [pc, #620]	; (8008ffc <HAL_SD_ReadBlocks+0x30c>)
 8008d8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d96:	431a      	orrs	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e196      	b.n	80090d6 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008da8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dac:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	025b      	lsls	r3, r3, #9
 8008db2:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008db4:	2390      	movs	r3, #144	; 0x90
 8008db6:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008db8:	2302      	movs	r3, #2
 8008dba:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f107 0214 	add.w	r2, r7, #20
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 fef6 	bl	800abc0 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d90a      	bls.n	8008df0 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2202      	movs	r2, #2
 8008dde:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008de6:	4618      	mov	r0, r3
 8008de8:	f001 ff5a 	bl	800aca0 <SDMMC_CmdReadMultiBlock>
 8008dec:	6478      	str	r0, [r7, #68]	; 0x44
 8008dee:	e009      	b.n	8008e04 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2201      	movs	r2, #1
 8008df4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 ff2d 	bl	800ac5c <SDMMC_CmdReadSingleBlock>
 8008e02:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d012      	beq.n	8008e30 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a7b      	ldr	r2, [pc, #492]	; (8008ffc <HAL_SD_ReadBlocks+0x30c>)
 8008e10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e152      	b.n	80090d6 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008e34:	e061      	b.n	8008efa <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d03c      	beq.n	8008ebe <HAL_SD_ReadBlocks+0x1ce>
 8008e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d039      	beq.n	8008ebe <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e4e:	e033      	b.n	8008eb8 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f001 fe2e 	bl	800aab6 <SDIO_ReadFIFO>
 8008e5a:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e62:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e66:	3301      	adds	r3, #1
 8008e68:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	0a1b      	lsrs	r3, r3, #8
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e78:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e82:	3b01      	subs	r3, #1
 8008e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e88:	0c1b      	lsrs	r3, r3, #16
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e92:	3301      	adds	r3, #1
 8008e94:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9e:	0e1b      	lsrs	r3, r3, #24
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8008eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eba:	2b07      	cmp	r3, #7
 8008ebc:	d9c8      	bls.n	8008e50 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008ebe:	f7fc fb73 	bl	80055a8 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d902      	bls.n	8008ed4 <HAL_SD_ReadBlocks+0x1e4>
 8008ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d112      	bne.n	8008efa <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a48      	ldr	r2, [pc, #288]	; (8008ffc <HAL_SD_ReadBlocks+0x30c>)
 8008eda:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e0ed      	b.n	80090d6 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f00:	f240 332a 	movw	r3, #810	; 0x32a
 8008f04:	4013      	ands	r3, r2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d095      	beq.n	8008e36 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d022      	beq.n	8008f5e <HAL_SD_ReadBlocks+0x26e>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d91f      	bls.n	8008f5e <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d01b      	beq.n	8008f5e <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f001 ff1e 	bl	800ad6c <SDMMC_CmdStopTransfer>
 8008f30:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d012      	beq.n	8008f5e <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a2f      	ldr	r2, [pc, #188]	; (8008ffc <HAL_SD_ReadBlocks+0x30c>)
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f46:	431a      	orrs	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e0bb      	b.n	80090d6 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d012      	beq.n	8008f92 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a22      	ldr	r2, [pc, #136]	; (8008ffc <HAL_SD_ReadBlocks+0x30c>)
 8008f72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f78:	f043 0208 	orr.w	r2, r3, #8
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e0a1      	b.n	80090d6 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d012      	beq.n	8008fc6 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a15      	ldr	r2, [pc, #84]	; (8008ffc <HAL_SD_ReadBlocks+0x30c>)
 8008fa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fac:	f043 0202 	orr.w	r2, r3, #2
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e087      	b.n	80090d6 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fcc:	f003 0320 	and.w	r3, r3, #32
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d064      	beq.n	800909e <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a08      	ldr	r2, [pc, #32]	; (8008ffc <HAL_SD_ReadBlocks+0x30c>)
 8008fda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	f043 0220 	orr.w	r2, r3, #32
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e06d      	b.n	80090d6 <HAL_SD_ReadBlocks+0x3e6>
 8008ffa:	bf00      	nop
 8008ffc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4618      	mov	r0, r3
 8009006:	f001 fd56 	bl	800aab6 <SDIO_ReadFIFO>
 800900a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	b2da      	uxtb	r2, r3
 8009010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009012:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009016:	3301      	adds	r3, #1
 8009018:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800901a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901c:	3b01      	subs	r3, #1
 800901e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	0a1b      	lsrs	r3, r3, #8
 8009024:	b2da      	uxtb	r2, r3
 8009026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009028:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800902a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902c:	3301      	adds	r3, #1
 800902e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009032:	3b01      	subs	r3, #1
 8009034:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009038:	0c1b      	lsrs	r3, r3, #16
 800903a:	b2da      	uxtb	r2, r3
 800903c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009042:	3301      	adds	r3, #1
 8009044:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009048:	3b01      	subs	r3, #1
 800904a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	0e1b      	lsrs	r3, r3, #24
 8009050:	b2da      	uxtb	r2, r3
 8009052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009054:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009058:	3301      	adds	r3, #1
 800905a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800905c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905e:	3b01      	subs	r3, #1
 8009060:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009062:	f7fc faa1 	bl	80055a8 <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800906e:	429a      	cmp	r2, r3
 8009070:	d902      	bls.n	8009078 <HAL_SD_ReadBlocks+0x388>
 8009072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009074:	2b00      	cmp	r3, #0
 8009076:	d112      	bne.n	800909e <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a18      	ldr	r2, [pc, #96]	; (80090e0 <HAL_SD_ReadBlocks+0x3f0>)
 800907e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e01b      	b.n	80090d6 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <HAL_SD_ReadBlocks+0x3c2>
 80090ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1a6      	bne.n	8009000 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80090ba:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e006      	b.n	80090d6 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
  }
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3748      	adds	r7, #72	; 0x48
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	004005ff 	.word	0x004005ff

080090e4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b092      	sub	sp, #72	; 0x48
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80090f2:	f7fc fa59 	bl	80055a8 <HAL_GetTick>
 80090f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d107      	bne.n	8009116 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e184      	b.n	8009420 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b01      	cmp	r3, #1
 8009120:	f040 8177 	bne.w	8009412 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800912a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	441a      	add	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009134:	429a      	cmp	r2, r3
 8009136:	d907      	bls.n	8009148 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e16b      	b.n	8009420 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2203      	movs	r2, #3
 800914c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2200      	movs	r2, #0
 8009156:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915c:	2b01      	cmp	r3, #1
 800915e:	d002      	beq.n	8009166 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	025b      	lsls	r3, r3, #9
 8009164:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800916e:	4618      	mov	r0, r3
 8009170:	f001 fd52 	bl	800ac18 <SDMMC_CmdBlockLength>
 8009174:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8009176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00f      	beq.n	800919c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a9d      	ldr	r2, [pc, #628]	; (80093f8 <HAL_SD_WriteBlocks+0x314>)
 8009182:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800918a:	431a      	orrs	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e141      	b.n	8009420 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800919c:	f04f 33ff 	mov.w	r3, #4294967295
 80091a0:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	025b      	lsls	r3, r3, #9
 80091a6:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80091a8:	2390      	movs	r3, #144	; 0x90
 80091aa:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80091ac:	2300      	movs	r3, #0
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80091b4:	2301      	movs	r3, #1
 80091b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f107 0218 	add.w	r2, r7, #24
 80091c0:	4611      	mov	r1, r2
 80091c2:	4618      	mov	r0, r3
 80091c4:	f001 fcfc 	bl	800abc0 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d90a      	bls.n	80091e4 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2220      	movs	r2, #32
 80091d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091da:	4618      	mov	r0, r3
 80091dc:	f001 fda4 	bl	800ad28 <SDMMC_CmdWriteMultiBlock>
 80091e0:	6478      	str	r0, [r7, #68]	; 0x44
 80091e2:	e009      	b.n	80091f8 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2210      	movs	r2, #16
 80091e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091f0:	4618      	mov	r0, r3
 80091f2:	f001 fd77 	bl	800ace4 <SDMMC_CmdWriteSingleBlock>
 80091f6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80091f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d012      	beq.n	8009224 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a7d      	ldr	r2, [pc, #500]	; (80093f8 <HAL_SD_WriteBlocks+0x314>)
 8009204:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800920a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800920c:	431a      	orrs	r2, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e0fd      	b.n	8009420 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009228:	e065      	b.n	80092f6 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d040      	beq.n	80092ba <HAL_SD_WriteBlocks+0x1d6>
 8009238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923a:	2b00      	cmp	r3, #0
 800923c:	d03d      	beq.n	80092ba <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800923e:	2300      	movs	r3, #0
 8009240:	643b      	str	r3, [r7, #64]	; 0x40
 8009242:	e037      	b.n	80092b4 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8009244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800924a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924c:	3301      	adds	r3, #1
 800924e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009252:	3b01      	subs	r3, #1
 8009254:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	021a      	lsls	r2, r3, #8
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	4313      	orrs	r3, r2
 8009260:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009264:	3301      	adds	r3, #1
 8009266:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926a:	3b01      	subs	r3, #1
 800926c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800926e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	041a      	lsls	r2, r3, #16
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	4313      	orrs	r3, r2
 8009278:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800927a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927c:	3301      	adds	r3, #1
 800927e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009282:	3b01      	subs	r3, #1
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	061a      	lsls	r2, r3, #24
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	4313      	orrs	r3, r2
 8009290:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009294:	3301      	adds	r3, #1
 8009296:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929a:	3b01      	subs	r3, #1
 800929c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f107 0214 	add.w	r2, r7, #20
 80092a6:	4611      	mov	r1, r2
 80092a8:	4618      	mov	r0, r3
 80092aa:	f001 fc11 	bl	800aad0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80092ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092b0:	3301      	adds	r3, #1
 80092b2:	643b      	str	r3, [r7, #64]	; 0x40
 80092b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092b6:	2b07      	cmp	r3, #7
 80092b8:	d9c4      	bls.n	8009244 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80092ba:	f7fc f975 	bl	80055a8 <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d902      	bls.n	80092d0 <HAL_SD_WriteBlocks+0x1ec>
 80092ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d112      	bne.n	80092f6 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a48      	ldr	r2, [pc, #288]	; (80093f8 <HAL_SD_WriteBlocks+0x314>)
 80092d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092de:	431a      	orrs	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e094      	b.n	8009420 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092fc:	f240 331a 	movw	r3, #794	; 0x31a
 8009300:	4013      	ands	r3, r2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d091      	beq.n	800922a <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009310:	2b00      	cmp	r3, #0
 8009312:	d022      	beq.n	800935a <HAL_SD_WriteBlocks+0x276>
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d91f      	bls.n	800935a <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931e:	2b03      	cmp	r3, #3
 8009320:	d01b      	beq.n	800935a <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4618      	mov	r0, r3
 8009328:	f001 fd20 	bl	800ad6c <SDMMC_CmdStopTransfer>
 800932c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800932e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009330:	2b00      	cmp	r3, #0
 8009332:	d012      	beq.n	800935a <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a2f      	ldr	r2, [pc, #188]	; (80093f8 <HAL_SD_WriteBlocks+0x314>)
 800933a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009342:	431a      	orrs	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e062      	b.n	8009420 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	2b00      	cmp	r3, #0
 8009366:	d012      	beq.n	800938e <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a22      	ldr	r2, [pc, #136]	; (80093f8 <HAL_SD_WriteBlocks+0x314>)
 800936e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009374:	f043 0208 	orr.w	r2, r3, #8
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e048      	b.n	8009420 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	2b00      	cmp	r3, #0
 800939a:	d012      	beq.n	80093c2 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a15      	ldr	r2, [pc, #84]	; (80093f8 <HAL_SD_WriteBlocks+0x314>)
 80093a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a8:	f043 0202 	orr.w	r2, r3, #2
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e02e      	b.n	8009420 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c8:	f003 0310 	and.w	r3, r3, #16
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d015      	beq.n	80093fc <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a08      	ldr	r2, [pc, #32]	; (80093f8 <HAL_SD_WriteBlocks+0x314>)
 80093d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093dc:	f043 0210 	orr.w	r2, r3, #16
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e014      	b.n	8009420 <HAL_SD_WriteBlocks+0x33c>
 80093f6:	bf00      	nop
 80093f8:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f240 523a 	movw	r2, #1338	; 0x53a
 8009404:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	e006      	b.n	8009420 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009416:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
  }
}
 8009420:	4618      	mov	r0, r3
 8009422:	3748      	adds	r7, #72	; 0x48
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009434:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d008      	beq.n	8009456 <HAL_SD_IRQHandler+0x2e>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f003 0308 	and.w	r3, r3, #8
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fd5c 	bl	8009f0c <SD_Read_IT>
 8009454:	e165      	b.n	8009722 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 808f 	beq.w	8009584 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800946e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	6812      	ldr	r2, [r2, #0]
 800947a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800947e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009482:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0201 	bic.w	r2, r2, #1
 8009492:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f003 0308 	and.w	r3, r3, #8
 800949a:	2b00      	cmp	r3, #0
 800949c:	d039      	beq.n	8009512 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d104      	bne.n	80094b2 <HAL_SD_IRQHandler+0x8a>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f003 0320 	and.w	r3, r3, #32
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d011      	beq.n	80094d6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f001 fc58 	bl	800ad6c <SDMMC_CmdStopTransfer>
 80094bc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d008      	beq.n	80094d6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	431a      	orrs	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f92f 	bl	8009734 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f240 523a 	movw	r2, #1338	; 0x53a
 80094de:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d104      	bne.n	8009502 <HAL_SD_IRQHandler+0xda>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f003 fb8a 	bl	800cc1c <HAL_SD_RxCpltCallback>
 8009508:	e10b      	b.n	8009722 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f003 fb7c 	bl	800cc08 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009510:	e107      	b.n	8009722 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 8102 	beq.w	8009722 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f003 0320 	and.w	r3, r3, #32
 8009524:	2b00      	cmp	r3, #0
 8009526:	d011      	beq.n	800954c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4618      	mov	r0, r3
 800952e:	f001 fc1d 	bl	800ad6c <SDMMC_CmdStopTransfer>
 8009532:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d008      	beq.n	800954c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	431a      	orrs	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f8f4 	bl	8009734 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	2b00      	cmp	r3, #0
 8009554:	f040 80e5 	bne.w	8009722 <HAL_SD_IRQHandler+0x2fa>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f003 0302 	and.w	r3, r3, #2
 800955e:	2b00      	cmp	r3, #0
 8009560:	f040 80df 	bne.w	8009722 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f022 0208 	bic.w	r2, r2, #8
 8009572:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f003 fb43 	bl	800cc08 <HAL_SD_TxCpltCallback>
}
 8009582:	e0ce      	b.n	8009722 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d008      	beq.n	80095a4 <HAL_SD_IRQHandler+0x17c>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f003 0308 	and.w	r3, r3, #8
 8009598:	2b00      	cmp	r3, #0
 800959a:	d003      	beq.n	80095a4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fd06 	bl	8009fae <SD_Write_IT>
 80095a2:	e0be      	b.n	8009722 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095aa:	f240 233a 	movw	r3, #570	; 0x23a
 80095ae:	4013      	ands	r3, r2
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 80b6 	beq.w	8009722 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095bc:	f003 0302 	and.w	r3, r3, #2
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d005      	beq.n	80095d0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c8:	f043 0202 	orr.w	r2, r3, #2
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d6:	f003 0308 	and.w	r3, r3, #8
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e2:	f043 0208 	orr.w	r2, r3, #8
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d005      	beq.n	8009604 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fc:	f043 0220 	orr.w	r2, r3, #32
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960a:	f003 0310 	and.w	r3, r3, #16
 800960e:	2b00      	cmp	r3, #0
 8009610:	d005      	beq.n	800961e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009616:	f043 0210 	orr.w	r2, r3, #16
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009628:	2b00      	cmp	r3, #0
 800962a:	d005      	beq.n	8009638 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009630:	f043 0208 	orr.w	r2, r3, #8
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f240 723a 	movw	r2, #1850	; 0x73a
 8009640:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	6812      	ldr	r2, [r2, #0]
 800964c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8009650:	f023 0302 	bic.w	r3, r3, #2
 8009654:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4618      	mov	r0, r3
 800965c:	f001 fb86 	bl	800ad6c <SDMMC_CmdStopTransfer>
 8009660:	4602      	mov	r2, r0
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	431a      	orrs	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f003 0308 	and.w	r3, r3, #8
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00a      	beq.n	800968c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f855 	bl	8009734 <HAL_SD_ErrorCallback>
}
 800968a:	e04a      	b.n	8009722 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009692:	2b00      	cmp	r3, #0
 8009694:	d045      	beq.n	8009722 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f003 0310 	and.w	r3, r3, #16
 800969c:	2b00      	cmp	r3, #0
 800969e:	d104      	bne.n	80096aa <HAL_SD_IRQHandler+0x282>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f003 0320 	and.w	r3, r3, #32
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d011      	beq.n	80096ce <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ae:	4a1f      	ldr	r2, [pc, #124]	; (800972c <HAL_SD_IRQHandler+0x304>)
 80096b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fc f8b5 	bl	8005826 <HAL_DMA_Abort_IT>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d02f      	beq.n	8009722 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fa2e 	bl	8009b28 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80096cc:	e029      	b.n	8009722 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d104      	bne.n	80096e2 <HAL_SD_IRQHandler+0x2ba>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d011      	beq.n	8009706 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	4a12      	ldr	r2, [pc, #72]	; (8009730 <HAL_SD_IRQHandler+0x308>)
 80096e8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fc f899 	bl	8005826 <HAL_DMA_Abort_IT>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d013      	beq.n	8009722 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fa49 	bl	8009b96 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009704:	e00d      	b.n	8009722 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f003 fa6a 	bl	800cbf4 <HAL_SD_AbortCallback>
}
 8009720:	e7ff      	b.n	8009722 <HAL_SD_IRQHandler+0x2fa>
 8009722:	bf00      	nop
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	08009b29 	.word	0x08009b29
 8009730:	08009b97 	.word	0x08009b97

08009734 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009756:	0f9b      	lsrs	r3, r3, #30
 8009758:	b2da      	uxtb	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009762:	0e9b      	lsrs	r3, r3, #26
 8009764:	b2db      	uxtb	r3, r3
 8009766:	f003 030f 	and.w	r3, r3, #15
 800976a:	b2da      	uxtb	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009774:	0e1b      	lsrs	r3, r3, #24
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f003 0303 	and.w	r3, r3, #3
 800977c:	b2da      	uxtb	r2, r3
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009786:	0c1b      	lsrs	r3, r3, #16
 8009788:	b2da      	uxtb	r2, r3
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009792:	0a1b      	lsrs	r3, r3, #8
 8009794:	b2da      	uxtb	r2, r3
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097a8:	0d1b      	lsrs	r3, r3, #20
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097b4:	0c1b      	lsrs	r3, r3, #16
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 030f 	and.w	r3, r3, #15
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097c6:	0bdb      	lsrs	r3, r3, #15
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097d8:	0b9b      	lsrs	r3, r3, #14
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097ea:	0b5b      	lsrs	r3, r3, #13
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097fc:	0b1b      	lsrs	r3, r3, #12
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	f003 0301 	and.w	r3, r3, #1
 8009804:	b2da      	uxtb	r2, r3
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2200      	movs	r2, #0
 800980e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009814:	2b00      	cmp	r3, #0
 8009816:	d163      	bne.n	80098e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800981c:	009a      	lsls	r2, r3, #2
 800981e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009822:	4013      	ands	r3, r2
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009828:	0f92      	lsrs	r2, r2, #30
 800982a:	431a      	orrs	r2, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009834:	0edb      	lsrs	r3, r3, #27
 8009836:	b2db      	uxtb	r3, r3
 8009838:	f003 0307 	and.w	r3, r3, #7
 800983c:	b2da      	uxtb	r2, r3
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009846:	0e1b      	lsrs	r3, r3, #24
 8009848:	b2db      	uxtb	r3, r3
 800984a:	f003 0307 	and.w	r3, r3, #7
 800984e:	b2da      	uxtb	r2, r3
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009858:	0d5b      	lsrs	r3, r3, #21
 800985a:	b2db      	uxtb	r3, r3
 800985c:	f003 0307 	and.w	r3, r3, #7
 8009860:	b2da      	uxtb	r2, r3
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800986a:	0c9b      	lsrs	r3, r3, #18
 800986c:	b2db      	uxtb	r3, r3
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	b2da      	uxtb	r2, r3
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800987c:	0bdb      	lsrs	r3, r3, #15
 800987e:	b2db      	uxtb	r3, r3
 8009880:	f003 0307 	and.w	r3, r3, #7
 8009884:	b2da      	uxtb	r2, r3
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	7e1b      	ldrb	r3, [r3, #24]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	f003 0307 	and.w	r3, r3, #7
 800989e:	3302      	adds	r3, #2
 80098a0:	2201      	movs	r2, #1
 80098a2:	fa02 f303 	lsl.w	r3, r2, r3
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80098aa:	fb02 f203 	mul.w	r2, r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	7a1b      	ldrb	r3, [r3, #8]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f003 030f 	and.w	r3, r3, #15
 80098bc:	2201      	movs	r2, #1
 80098be:	409a      	lsls	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80098cc:	0a52      	lsrs	r2, r2, #9
 80098ce:	fb02 f203 	mul.w	r2, r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098dc:	661a      	str	r2, [r3, #96]	; 0x60
 80098de:	e031      	b.n	8009944 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d11d      	bne.n	8009924 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098ec:	041b      	lsls	r3, r3, #16
 80098ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f6:	0c1b      	lsrs	r3, r3, #16
 80098f8:	431a      	orrs	r2, r3
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	3301      	adds	r3, #1
 8009904:	029a      	lsls	r2, r3, #10
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009918:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	661a      	str	r2, [r3, #96]	; 0x60
 8009922:	e00f      	b.n	8009944 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a58      	ldr	r2, [pc, #352]	; (8009a8c <HAL_SD_GetCardCSD+0x344>)
 800992a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009930:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e09d      	b.n	8009a80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009948:	0b9b      	lsrs	r3, r3, #14
 800994a:	b2db      	uxtb	r3, r3
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	b2da      	uxtb	r2, r3
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800995a:	09db      	lsrs	r3, r3, #7
 800995c:	b2db      	uxtb	r3, r3
 800995e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009962:	b2da      	uxtb	r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800996c:	b2db      	uxtb	r3, r3
 800996e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009972:	b2da      	uxtb	r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997c:	0fdb      	lsrs	r3, r3, #31
 800997e:	b2da      	uxtb	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009988:	0f5b      	lsrs	r3, r3, #29
 800998a:	b2db      	uxtb	r3, r3
 800998c:	f003 0303 	and.w	r3, r3, #3
 8009990:	b2da      	uxtb	r2, r3
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999a:	0e9b      	lsrs	r3, r3, #26
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ac:	0d9b      	lsrs	r3, r3, #22
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	f003 030f 	and.w	r3, r3, #15
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099be:	0d5b      	lsrs	r3, r3, #21
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099da:	0c1b      	lsrs	r3, r3, #16
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ee:	0bdb      	lsrs	r3, r3, #15
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a02:	0b9b      	lsrs	r3, r3, #14
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	f003 0301 	and.w	r3, r3, #1
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a16:	0b5b      	lsrs	r3, r3, #13
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a2a:	0b1b      	lsrs	r3, r3, #12
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3e:	0a9b      	lsrs	r3, r3, #10
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a52:	0a1b      	lsrs	r3, r3, #8
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a66:	085b      	lsrs	r3, r3, #1
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	004005ff 	.word	0x004005ff

08009a90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009af4:	f107 030c 	add.w	r3, r7, #12
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f9de 	bl	8009ebc <SD_SendStatus>
 8009b00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d005      	beq.n	8009b14 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	0a5b      	lsrs	r3, r3, #9
 8009b18:	f003 030f 	and.w	r3, r3, #15
 8009b1c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009b1e:	693b      	ldr	r3, [r7, #16]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f240 523a 	movw	r2, #1338	; 0x53a
 8009b3e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff ffd1 	bl	8009ae8 <HAL_SD_GetCardState>
 8009b46:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2b06      	cmp	r3, #6
 8009b5a:	d002      	beq.n	8009b62 <SD_DMATxAbort+0x3a>
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2b05      	cmp	r3, #5
 8009b60:	d10a      	bne.n	8009b78 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f001 f900 	bl	800ad6c <SDMMC_CmdStopTransfer>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b72:	431a      	orrs	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d103      	bne.n	8009b88 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f003 f837 	bl	800cbf4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009b86:	e002      	b.n	8009b8e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f7ff fdd3 	bl	8009734 <HAL_SD_ErrorCallback>
}
 8009b8e:	bf00      	nop
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f240 523a 	movw	r2, #1338	; 0x53a
 8009bac:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f7ff ff9a 	bl	8009ae8 <HAL_SD_GetCardState>
 8009bb4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b06      	cmp	r3, #6
 8009bc8:	d002      	beq.n	8009bd0 <SD_DMARxAbort+0x3a>
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b05      	cmp	r3, #5
 8009bce:	d10a      	bne.n	8009be6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f001 f8c9 	bl	800ad6c <SDMMC_CmdStopTransfer>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be0:	431a      	orrs	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d103      	bne.n	8009bf6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f003 f800 	bl	800cbf4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009bf4:	e002      	b.n	8009bfc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f7ff fd9c 	bl	8009734 <HAL_SD_ErrorCallback>
}
 8009bfc:	bf00      	nop
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009c04:	b5b0      	push	{r4, r5, r7, lr}
 8009c06:	b094      	sub	sp, #80	; 0x50
 8009c08:	af04      	add	r7, sp, #16
 8009c0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 ff7b 	bl	800ab10 <SDIO_GetPowerState>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d102      	bne.n	8009c26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009c24:	e0b7      	b.n	8009d96 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d02f      	beq.n	8009c8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f001 f961 	bl	800aefa <SDMMC_CmdSendCID>
 8009c38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <SD_InitCard+0x40>
    {
      return errorstate;
 8009c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c42:	e0a8      	b.n	8009d96 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2100      	movs	r1, #0
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 ffa5 	bl	800ab9a <SDIO_GetResponse>
 8009c50:	4602      	mov	r2, r0
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2104      	movs	r1, #4
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 ff9c 	bl	800ab9a <SDIO_GetResponse>
 8009c62:	4602      	mov	r2, r0
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2108      	movs	r1, #8
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 ff93 	bl	800ab9a <SDIO_GetResponse>
 8009c74:	4602      	mov	r2, r0
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	210c      	movs	r1, #12
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 ff8a 	bl	800ab9a <SDIO_GetResponse>
 8009c86:	4602      	mov	r2, r0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d00d      	beq.n	8009cb2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f107 020e 	add.w	r2, r7, #14
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f001 f967 	bl	800af74 <SDMMC_CmdSetRelAdd>
 8009ca6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <SD_InitCard+0xae>
    {
      return errorstate;
 8009cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb0:	e071      	b.n	8009d96 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d036      	beq.n	8009d28 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009cba:	89fb      	ldrh	r3, [r7, #14]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cca:	041b      	lsls	r3, r3, #16
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f001 f931 	bl	800af36 <SDMMC_CmdSendCSD>
 8009cd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cde:	e05a      	b.n	8009d96 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 ff57 	bl	800ab9a <SDIO_GetResponse>
 8009cec:	4602      	mov	r2, r0
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2104      	movs	r1, #4
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 ff4e 	bl	800ab9a <SDIO_GetResponse>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2108      	movs	r1, #8
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 ff45 	bl	800ab9a <SDIO_GetResponse>
 8009d10:	4602      	mov	r2, r0
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	210c      	movs	r1, #12
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 ff3c 	bl	800ab9a <SDIO_GetResponse>
 8009d22:	4602      	mov	r2, r0
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2104      	movs	r1, #4
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 ff33 	bl	800ab9a <SDIO_GetResponse>
 8009d34:	4603      	mov	r3, r0
 8009d36:	0d1a      	lsrs	r2, r3, #20
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009d3c:	f107 0310 	add.w	r3, r7, #16
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7ff fd00 	bl	8009748 <HAL_SD_GetCardCSD>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d52:	e020      	b.n	8009d96 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6819      	ldr	r1, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d5c:	041b      	lsls	r3, r3, #16
 8009d5e:	f04f 0400 	mov.w	r4, #0
 8009d62:	461a      	mov	r2, r3
 8009d64:	4623      	mov	r3, r4
 8009d66:	4608      	mov	r0, r1
 8009d68:	f001 f822 	bl	800adb0 <SDMMC_CmdSelDesel>
 8009d6c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d001      	beq.n	8009d78 <SD_InitCard+0x174>
  {
    return errorstate;
 8009d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d76:	e00e      	b.n	8009d96 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681d      	ldr	r5, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	466c      	mov	r4, sp
 8009d80:	f103 0210 	add.w	r2, r3, #16
 8009d84:	ca07      	ldmia	r2, {r0, r1, r2}
 8009d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d8a:	3304      	adds	r3, #4
 8009d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f000 fe66 	bl	800aa60 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3740      	adds	r7, #64	; 0x40
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009da0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009dac:	2300      	movs	r3, #0
 8009dae:	617b      	str	r3, [r7, #20]
 8009db0:	2300      	movs	r3, #0
 8009db2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 f81c 	bl	800adf6 <SDMMC_CmdGoIdleState>
 8009dbe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <SD_PowerON+0x2a>
  {
    return errorstate;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	e072      	b.n	8009eb0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f001 f82f 	bl	800ae32 <SDMMC_CmdOperCond>
 8009dd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00d      	beq.n	8009df8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f001 f805 	bl	800adf6 <SDMMC_CmdGoIdleState>
 8009dec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d004      	beq.n	8009dfe <SD_PowerON+0x5e>
    {
      return errorstate;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	e05b      	b.n	8009eb0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d137      	bne.n	8009e76 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f001 f82f 	bl	800ae70 <SDMMC_CmdAppCommand>
 8009e12:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d02d      	beq.n	8009e76 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e1e:	e047      	b.n	8009eb0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2100      	movs	r1, #0
 8009e26:	4618      	mov	r0, r3
 8009e28:	f001 f822 	bl	800ae70 <SDMMC_CmdAppCommand>
 8009e2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <SD_PowerON+0x98>
    {
      return errorstate;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	e03b      	b.n	8009eb0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	491e      	ldr	r1, [pc, #120]	; (8009eb8 <SD_PowerON+0x118>)
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 f838 	bl	800aeb4 <SDMMC_CmdAppOperCommand>
 8009e44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e50:	e02e      	b.n	8009eb0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2100      	movs	r1, #0
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 fe9e 	bl	800ab9a <SDIO_GetResponse>
 8009e5e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	0fdb      	lsrs	r3, r3, #31
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d101      	bne.n	8009e6c <SD_PowerON+0xcc>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e000      	b.n	8009e6e <SD_PowerON+0xce>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	613b      	str	r3, [r7, #16]

    count++;
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	3301      	adds	r3, #1
 8009e74:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d802      	bhi.n	8009e86 <SD_PowerON+0xe6>
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0cc      	beq.n	8009e20 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d902      	bls.n	8009e96 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e94:	e00c      	b.n	8009eb0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d003      	beq.n	8009ea8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	645a      	str	r2, [r3, #68]	; 0x44
 8009ea6:	e002      	b.n	8009eae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	c1100000 	.word	0xc1100000

08009ebc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d102      	bne.n	8009ed2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009ecc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ed0:	e018      	b.n	8009f04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eda:	041b      	lsls	r3, r3, #16
 8009edc:	4619      	mov	r1, r3
 8009ede:	4610      	mov	r0, r2
 8009ee0:	f001 f869 	bl	800afb6 <SDMMC_CmdSendStatus>
 8009ee4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	e009      	b.n	8009f04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 fe4f 	bl	800ab9a <SDIO_GetResponse>
 8009efc:	4602      	mov	r2, r0
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f18:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d03f      	beq.n	8009fa6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]
 8009f2a:	e033      	b.n	8009f94 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 fdc0 	bl	800aab6 <SDIO_ReadFIFO>
 8009f36:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3301      	adds	r3, #1
 8009f44:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	0a1b      	lsrs	r3, r3, #8
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	0c1b      	lsrs	r3, r3, #16
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	0e1b      	lsrs	r3, r3, #24
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3301      	adds	r3, #1
 8009f86:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	3301      	adds	r3, #1
 8009f92:	617b      	str	r3, [r7, #20]
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	2b07      	cmp	r3, #7
 8009f98:	d9c8      	bls.n	8009f2c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009fa6:	bf00      	nop
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b086      	sub	sp, #24
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d043      	beq.n	800a050 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009fc8:	2300      	movs	r3, #0
 8009fca:	617b      	str	r3, [r7, #20]
 8009fcc:	e037      	b.n	800a03e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	021a      	lsls	r2, r3, #8
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	041a      	lsls	r2, r3, #16
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	4313      	orrs	r3, r2
 800a002:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3301      	adds	r3, #1
 800a008:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	3b01      	subs	r3, #1
 800a00e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	061a      	lsls	r2, r3, #24
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	4313      	orrs	r3, r2
 800a01a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	3b01      	subs	r3, #1
 800a026:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f107 0208 	add.w	r2, r7, #8
 800a030:	4611      	mov	r1, r2
 800a032:	4618      	mov	r0, r3
 800a034:	f000 fd4c 	bl	800aad0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	3301      	adds	r3, #1
 800a03c:	617b      	str	r3, [r7, #20]
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b07      	cmp	r3, #7
 800a042:	d9c4      	bls.n	8009fce <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a050:	bf00      	nop
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e056      	b.n	800a118 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d106      	bne.n	800a08a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7fa ff8f 	bl	8004fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2202      	movs	r2, #2
 800a08e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	685a      	ldr	r2, [r3, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	431a      	orrs	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	431a      	orrs	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	ea42 0103 	orr.w	r1, r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	0c1b      	lsrs	r3, r3, #16
 800a0e8:	f003 0104 	and.w	r1, r3, #4
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	69da      	ldr	r2, [r3, #28]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a106:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	603b      	str	r3, [r7, #0]
 800a12c:	4613      	mov	r3, r2
 800a12e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d101      	bne.n	800a142 <HAL_SPI_Transmit+0x22>
 800a13e:	2302      	movs	r3, #2
 800a140:	e11e      	b.n	800a380 <HAL_SPI_Transmit+0x260>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a14a:	f7fb fa2d 	bl	80055a8 <HAL_GetTick>
 800a14e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a150:	88fb      	ldrh	r3, [r7, #6]
 800a152:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d002      	beq.n	800a166 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a160:	2302      	movs	r3, #2
 800a162:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a164:	e103      	b.n	800a36e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <HAL_SPI_Transmit+0x52>
 800a16c:	88fb      	ldrh	r3, [r7, #6]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d102      	bne.n	800a178 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a176:	e0fa      	b.n	800a36e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2203      	movs	r2, #3
 800a17c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	88fa      	ldrh	r2, [r7, #6]
 800a190:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	88fa      	ldrh	r2, [r7, #6]
 800a196:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2200      	movs	r2, #0
 800a19c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1be:	d107      	bne.n	800a1d0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1da:	2b40      	cmp	r3, #64	; 0x40
 800a1dc:	d007      	beq.n	800a1ee <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1f6:	d14b      	bne.n	800a290 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d002      	beq.n	800a206 <HAL_SPI_Transmit+0xe6>
 800a200:	8afb      	ldrh	r3, [r7, #22]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d13e      	bne.n	800a284 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20a:	881a      	ldrh	r2, [r3, #0]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a216:	1c9a      	adds	r2, r3, #2
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a220:	b29b      	uxth	r3, r3
 800a222:	3b01      	subs	r3, #1
 800a224:	b29a      	uxth	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a22a:	e02b      	b.n	800a284 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	f003 0302 	and.w	r3, r3, #2
 800a236:	2b02      	cmp	r3, #2
 800a238:	d112      	bne.n	800a260 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23e:	881a      	ldrh	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24a:	1c9a      	adds	r2, r3, #2
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a254:	b29b      	uxth	r3, r3
 800a256:	3b01      	subs	r3, #1
 800a258:	b29a      	uxth	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	86da      	strh	r2, [r3, #54]	; 0x36
 800a25e:	e011      	b.n	800a284 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a260:	f7fb f9a2 	bl	80055a8 <HAL_GetTick>
 800a264:	4602      	mov	r2, r0
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d803      	bhi.n	800a278 <HAL_SPI_Transmit+0x158>
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a276:	d102      	bne.n	800a27e <HAL_SPI_Transmit+0x15e>
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d102      	bne.n	800a284 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a282:	e074      	b.n	800a36e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a288:	b29b      	uxth	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1ce      	bne.n	800a22c <HAL_SPI_Transmit+0x10c>
 800a28e:	e04c      	b.n	800a32a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <HAL_SPI_Transmit+0x17e>
 800a298:	8afb      	ldrh	r3, [r7, #22]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d140      	bne.n	800a320 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	330c      	adds	r3, #12
 800a2a8:	7812      	ldrb	r2, [r2, #0]
 800a2aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b0:	1c5a      	adds	r2, r3, #1
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a2c4:	e02c      	b.n	800a320 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	f003 0302 	and.w	r3, r3, #2
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d113      	bne.n	800a2fc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	330c      	adds	r3, #12
 800a2de:	7812      	ldrb	r2, [r2, #0]
 800a2e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e6:	1c5a      	adds	r2, r3, #1
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	86da      	strh	r2, [r3, #54]	; 0x36
 800a2fa:	e011      	b.n	800a320 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2fc:	f7fb f954 	bl	80055a8 <HAL_GetTick>
 800a300:	4602      	mov	r2, r0
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d803      	bhi.n	800a314 <HAL_SPI_Transmit+0x1f4>
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a312:	d102      	bne.n	800a31a <HAL_SPI_Transmit+0x1fa>
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d102      	bne.n	800a320 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a31a:	2303      	movs	r3, #3
 800a31c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a31e:	e026      	b.n	800a36e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a324:	b29b      	uxth	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1cd      	bne.n	800a2c6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a32a:	69ba      	ldr	r2, [r7, #24]
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f000 fb54 	bl	800a9dc <SPI_EndRxTxTransaction>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2220      	movs	r2, #32
 800a33e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d10a      	bne.n	800a35e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a348:	2300      	movs	r3, #0
 800a34a:	613b      	str	r3, [r7, #16]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	613b      	str	r3, [r7, #16]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	613b      	str	r3, [r7, #16]
 800a35c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a362:	2b00      	cmp	r3, #0
 800a364:	d002      	beq.n	800a36c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	77fb      	strb	r3, [r7, #31]
 800a36a:	e000      	b.n	800a36e <HAL_SPI_Transmit+0x24e>
  }

error:
 800a36c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a37e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3720      	adds	r7, #32
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08c      	sub	sp, #48	; 0x30
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
 800a394:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a396:	2301      	movs	r3, #1
 800a398:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d101      	bne.n	800a3ae <HAL_SPI_TransmitReceive+0x26>
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	e18a      	b.n	800a6c4 <HAL_SPI_TransmitReceive+0x33c>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3b6:	f7fb f8f7 	bl	80055a8 <HAL_GetTick>
 800a3ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a3cc:	887b      	ldrh	r3, [r7, #2]
 800a3ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a3d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d00f      	beq.n	800a3f8 <HAL_SPI_TransmitReceive+0x70>
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3de:	d107      	bne.n	800a3f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d103      	bne.n	800a3f0 <HAL_SPI_TransmitReceive+0x68>
 800a3e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3ec:	2b04      	cmp	r3, #4
 800a3ee:	d003      	beq.n	800a3f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a3f6:	e15b      	b.n	800a6b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d005      	beq.n	800a40a <HAL_SPI_TransmitReceive+0x82>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d002      	beq.n	800a40a <HAL_SPI_TransmitReceive+0x82>
 800a404:	887b      	ldrh	r3, [r7, #2]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d103      	bne.n	800a412 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a40a:	2301      	movs	r3, #1
 800a40c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a410:	e14e      	b.n	800a6b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b04      	cmp	r3, #4
 800a41c:	d003      	beq.n	800a426 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2205      	movs	r2, #5
 800a422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	887a      	ldrh	r2, [r7, #2]
 800a436:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	887a      	ldrh	r2, [r7, #2]
 800a43c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	887a      	ldrh	r2, [r7, #2]
 800a448:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	887a      	ldrh	r2, [r7, #2]
 800a44e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a466:	2b40      	cmp	r3, #64	; 0x40
 800a468:	d007      	beq.n	800a47a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a478:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a482:	d178      	bne.n	800a576 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d002      	beq.n	800a492 <HAL_SPI_TransmitReceive+0x10a>
 800a48c:	8b7b      	ldrh	r3, [r7, #26]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d166      	bne.n	800a560 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a496:	881a      	ldrh	r2, [r3, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a2:	1c9a      	adds	r2, r3, #2
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4b6:	e053      	b.n	800a560 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d11b      	bne.n	800a4fe <HAL_SPI_TransmitReceive+0x176>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d016      	beq.n	800a4fe <HAL_SPI_TransmitReceive+0x176>
 800a4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d113      	bne.n	800a4fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4da:	881a      	ldrh	r2, [r3, #0]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e6:	1c9a      	adds	r2, r3, #2
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d119      	bne.n	800a540 <HAL_SPI_TransmitReceive+0x1b8>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a510:	b29b      	uxth	r3, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	d014      	beq.n	800a540 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68da      	ldr	r2, [r3, #12]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a520:	b292      	uxth	r2, r2
 800a522:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a528:	1c9a      	adds	r2, r3, #2
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a532:	b29b      	uxth	r3, r3
 800a534:	3b01      	subs	r3, #1
 800a536:	b29a      	uxth	r2, r3
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a53c:	2301      	movs	r3, #1
 800a53e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a540:	f7fb f832 	bl	80055a8 <HAL_GetTick>
 800a544:	4602      	mov	r2, r0
 800a546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d807      	bhi.n	800a560 <HAL_SPI_TransmitReceive+0x1d8>
 800a550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a556:	d003      	beq.n	800a560 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a558:	2303      	movs	r3, #3
 800a55a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a55e:	e0a7      	b.n	800a6b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a564:	b29b      	uxth	r3, r3
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1a6      	bne.n	800a4b8 <HAL_SPI_TransmitReceive+0x130>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a56e:	b29b      	uxth	r3, r3
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1a1      	bne.n	800a4b8 <HAL_SPI_TransmitReceive+0x130>
 800a574:	e07c      	b.n	800a670 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d002      	beq.n	800a584 <HAL_SPI_TransmitReceive+0x1fc>
 800a57e:	8b7b      	ldrh	r3, [r7, #26]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d16b      	bne.n	800a65c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	330c      	adds	r3, #12
 800a58e:	7812      	ldrb	r2, [r2, #0]
 800a590:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a596:	1c5a      	adds	r2, r3, #1
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5aa:	e057      	b.n	800a65c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f003 0302 	and.w	r3, r3, #2
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d11c      	bne.n	800a5f4 <HAL_SPI_TransmitReceive+0x26c>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d017      	beq.n	800a5f4 <HAL_SPI_TransmitReceive+0x26c>
 800a5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d114      	bne.n	800a5f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	330c      	adds	r3, #12
 800a5d4:	7812      	ldrb	r2, [r2, #0]
 800a5d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d119      	bne.n	800a636 <HAL_SPI_TransmitReceive+0x2ae>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a606:	b29b      	uxth	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d014      	beq.n	800a636 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68da      	ldr	r2, [r3, #12]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a616:	b2d2      	uxtb	r2, r2
 800a618:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a628:	b29b      	uxth	r3, r3
 800a62a:	3b01      	subs	r3, #1
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a632:	2301      	movs	r3, #1
 800a634:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a636:	f7fa ffb7 	bl	80055a8 <HAL_GetTick>
 800a63a:	4602      	mov	r2, r0
 800a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a642:	429a      	cmp	r2, r3
 800a644:	d803      	bhi.n	800a64e <HAL_SPI_TransmitReceive+0x2c6>
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64c:	d102      	bne.n	800a654 <HAL_SPI_TransmitReceive+0x2cc>
 800a64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a650:	2b00      	cmp	r3, #0
 800a652:	d103      	bne.n	800a65c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a654:	2303      	movs	r3, #3
 800a656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a65a:	e029      	b.n	800a6b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a660:	b29b      	uxth	r3, r3
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1a2      	bne.n	800a5ac <HAL_SPI_TransmitReceive+0x224>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d19d      	bne.n	800a5ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a672:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 f9b1 	bl	800a9dc <SPI_EndRxTxTransaction>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d006      	beq.n	800a68e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2220      	movs	r2, #32
 800a68a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a68c:	e010      	b.n	800a6b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10b      	bne.n	800a6ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a696:	2300      	movs	r3, #0
 800a698:	617b      	str	r3, [r7, #20]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	617b      	str	r3, [r7, #20]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	e000      	b.n	800a6b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a6ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a6c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3730      	adds	r7, #48	; 0x30
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	099b      	lsrs	r3, r3, #6
 800a6e8:	f003 0301 	and.w	r3, r3, #1
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10f      	bne.n	800a710 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	099b      	lsrs	r3, r3, #6
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	d004      	beq.n	800a710 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	4798      	blx	r3
    return;
 800a70e:	e0d8      	b.n	800a8c2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	085b      	lsrs	r3, r3, #1
 800a714:	f003 0301 	and.w	r3, r3, #1
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00a      	beq.n	800a732 <HAL_SPI_IRQHandler+0x66>
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	09db      	lsrs	r3, r3, #7
 800a720:	f003 0301 	and.w	r3, r3, #1
 800a724:	2b00      	cmp	r3, #0
 800a726:	d004      	beq.n	800a732 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	4798      	blx	r3
    return;
 800a730:	e0c7      	b.n	800a8c2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	095b      	lsrs	r3, r3, #5
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10c      	bne.n	800a758 <HAL_SPI_IRQHandler+0x8c>
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	099b      	lsrs	r3, r3, #6
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	2b00      	cmp	r3, #0
 800a748:	d106      	bne.n	800a758 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	0a1b      	lsrs	r3, r3, #8
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	f000 80b5 	beq.w	800a8c2 <HAL_SPI_IRQHandler+0x1f6>
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	095b      	lsrs	r3, r3, #5
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 80ae 	beq.w	800a8c2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	099b      	lsrs	r3, r3, #6
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d023      	beq.n	800a7ba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d011      	beq.n	800a7a2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a782:	f043 0204 	orr.w	r2, r3, #4
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a78a:	2300      	movs	r3, #0
 800a78c:	617b      	str	r3, [r7, #20]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	617b      	str	r3, [r7, #20]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	617b      	str	r3, [r7, #20]
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	e00b      	b.n	800a7ba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	613b      	str	r3, [r7, #16]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	613b      	str	r3, [r7, #16]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	613b      	str	r3, [r7, #16]
 800a7b6:	693b      	ldr	r3, [r7, #16]
        return;
 800a7b8:	e083      	b.n	800a8c2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	095b      	lsrs	r3, r3, #5
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d014      	beq.n	800a7f0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ca:	f043 0201 	orr.w	r2, r3, #1
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60fb      	str	r3, [r7, #12]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	60fb      	str	r3, [r7, #12]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	0a1b      	lsrs	r3, r3, #8
 800a7f4:	f003 0301 	and.w	r3, r3, #1
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00c      	beq.n	800a816 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a800:	f043 0208 	orr.w	r2, r3, #8
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a808:	2300      	movs	r3, #0
 800a80a:	60bb      	str	r3, [r7, #8]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	60bb      	str	r3, [r7, #8]
 800a814:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d050      	beq.n	800a8c0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a82c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	f003 0302 	and.w	r3, r3, #2
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d104      	bne.n	800a84a <HAL_SPI_IRQHandler+0x17e>
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	f003 0301 	and.w	r3, r3, #1
 800a846:	2b00      	cmp	r3, #0
 800a848:	d034      	beq.n	800a8b4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f022 0203 	bic.w	r2, r2, #3
 800a858:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d011      	beq.n	800a886 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a866:	4a18      	ldr	r2, [pc, #96]	; (800a8c8 <HAL_SPI_IRQHandler+0x1fc>)
 800a868:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fa ffd9 	bl	8005826 <HAL_DMA_Abort_IT>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d005      	beq.n	800a886 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d016      	beq.n	800a8bc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a892:	4a0d      	ldr	r2, [pc, #52]	; (800a8c8 <HAL_SPI_IRQHandler+0x1fc>)
 800a894:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fa ffc3 	bl	8005826 <HAL_DMA_Abort_IT>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00a      	beq.n	800a8bc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a8b2:	e003      	b.n	800a8bc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f809 	bl	800a8cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a8ba:	e000      	b.n	800a8be <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a8bc:	bf00      	nop
    return;
 800a8be:	bf00      	nop
 800a8c0:	bf00      	nop
  }
}
 800a8c2:	3720      	adds	r7, #32
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	0800a8e1 	.word	0x0800a8e1

0800a8cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f7ff ffe6 	bl	800a8cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a900:	bf00      	nop
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	603b      	str	r3, [r7, #0]
 800a914:	4613      	mov	r3, r2
 800a916:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a918:	e04c      	b.n	800a9b4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a920:	d048      	beq.n	800a9b4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a922:	f7fa fe41 	bl	80055a8 <HAL_GetTick>
 800a926:	4602      	mov	r2, r0
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d902      	bls.n	800a938 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d13d      	bne.n	800a9b4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a946:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a950:	d111      	bne.n	800a976 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a95a:	d004      	beq.n	800a966 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a964:	d107      	bne.n	800a976 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a974:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a97e:	d10f      	bne.n	800a9a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a99e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e00f      	b.n	800a9d4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689a      	ldr	r2, [r3, #8]
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	4013      	ands	r3, r2
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	bf0c      	ite	eq
 800a9c4:	2301      	moveq	r3, #1
 800a9c6:	2300      	movne	r3, #0
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	79fb      	ldrb	r3, [r7, #7]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d1a3      	bne.n	800a91a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b088      	sub	sp, #32
 800a9e0:	af02      	add	r7, sp, #8
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a9e8:	4b1b      	ldr	r3, [pc, #108]	; (800aa58 <SPI_EndRxTxTransaction+0x7c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a1b      	ldr	r2, [pc, #108]	; (800aa5c <SPI_EndRxTxTransaction+0x80>)
 800a9ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f2:	0d5b      	lsrs	r3, r3, #21
 800a9f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a9f8:	fb02 f303 	mul.w	r3, r2, r3
 800a9fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa06:	d112      	bne.n	800aa2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2180      	movs	r1, #128	; 0x80
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7ff ff78 	bl	800a908 <SPI_WaitFlagStateUntilTimeout>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d016      	beq.n	800aa4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa22:	f043 0220 	orr.w	r2, r3, #32
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e00f      	b.n	800aa4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00a      	beq.n	800aa4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa44:	2b80      	cmp	r3, #128	; 0x80
 800aa46:	d0f2      	beq.n	800aa2e <SPI_EndRxTxTransaction+0x52>
 800aa48:	e000      	b.n	800aa4c <SPI_EndRxTxTransaction+0x70>
        break;
 800aa4a:	bf00      	nop
  }

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3718      	adds	r7, #24
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	20000050 	.word	0x20000050
 800aa5c:	165e9f81 	.word	0x165e9f81

0800aa60 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800aa60:	b084      	sub	sp, #16
 800aa62:	b480      	push	{r7}
 800aa64:	b085      	sub	sp, #20
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	f107 001c 	add.w	r0, r7, #28
 800aa6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aa76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aa78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aa7a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aa7e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aa82:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aa86:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aa8a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800aa9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	b004      	add	sp, #16
 800aab4:	4770      	bx	lr

0800aab6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	370c      	adds	r7, #12
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2203      	movs	r2, #3
 800aafe:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ab00:	2002      	movs	r0, #2
 800ab02:	f7fa fd5d 	bl	80055c0 <HAL_Delay>
  
  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 0303 	and.w	r3, r3, #3
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab4a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab50:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ab66:	f023 030f 	bic.w	r3, r3, #15
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	431a      	orrs	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3714      	adds	r7, #20
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	b2db      	uxtb	r3, r3
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b085      	sub	sp, #20
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3314      	adds	r3, #20
 800aba8:	461a      	mov	r2, r3
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	4413      	add	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
}  
 800abb4:	4618      	mov	r0, r3
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abca:	2300      	movs	r3, #0
 800abcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	685a      	ldr	r2, [r3, #4]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abe6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800abec:	431a      	orrs	r2, r3
                       Data->DPSM);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800abf2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	431a      	orrs	r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac0a:	2300      	movs	r3, #0

}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac26:	2310      	movs	r3, #16
 800ac28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac2a:	2340      	movs	r3, #64	; 0x40
 800ac2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac38:	f107 0308 	add.w	r3, r7, #8
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7ff ff74 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ac44:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac48:	2110      	movs	r1, #16
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f9fe 	bl	800b04c <SDMMC_GetCmdResp1>
 800ac50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac52:	69fb      	ldr	r3, [r7, #28]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3720      	adds	r7, #32
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b088      	sub	sp, #32
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac6a:	2311      	movs	r3, #17
 800ac6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac6e:	2340      	movs	r3, #64	; 0x40
 800ac70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac72:	2300      	movs	r3, #0
 800ac74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac7c:	f107 0308 	add.w	r3, r7, #8
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7ff ff52 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ac88:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac8c:	2111      	movs	r1, #17
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f9dc 	bl	800b04c <SDMMC_GetCmdResp1>
 800ac94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac96:	69fb      	ldr	r3, [r7, #28]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3720      	adds	r7, #32
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b088      	sub	sp, #32
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800acae:	2312      	movs	r3, #18
 800acb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acb2:	2340      	movs	r3, #64	; 0x40
 800acb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acb6:	2300      	movs	r3, #0
 800acb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acc0:	f107 0308 	add.w	r3, r7, #8
 800acc4:	4619      	mov	r1, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7ff ff30 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800accc:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd0:	2112      	movs	r1, #18
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f9ba 	bl	800b04c <SDMMC_GetCmdResp1>
 800acd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acda:	69fb      	ldr	r3, [r7, #28]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3720      	adds	r7, #32
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b088      	sub	sp, #32
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800acf2:	2318      	movs	r3, #24
 800acf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acf6:	2340      	movs	r3, #64	; 0x40
 800acf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acfa:	2300      	movs	r3, #0
 800acfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad04:	f107 0308 	add.w	r3, r7, #8
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7ff ff0e 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ad10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad14:	2118      	movs	r1, #24
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f998 	bl	800b04c <SDMMC_GetCmdResp1>
 800ad1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad1e:	69fb      	ldr	r3, [r7, #28]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3720      	adds	r7, #32
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b088      	sub	sp, #32
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad36:	2319      	movs	r3, #25
 800ad38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad3a:	2340      	movs	r3, #64	; 0x40
 800ad3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad48:	f107 0308 	add.w	r3, r7, #8
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff feec 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ad54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad58:	2119      	movs	r1, #25
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f976 	bl	800b04c <SDMMC_GetCmdResp1>
 800ad60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad62:	69fb      	ldr	r3, [r7, #28]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3720      	adds	r7, #32
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b088      	sub	sp, #32
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ad74:	2300      	movs	r3, #0
 800ad76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad78:	230c      	movs	r3, #12
 800ad7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad7c:	2340      	movs	r3, #64	; 0x40
 800ad7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad80:	2300      	movs	r3, #0
 800ad82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad8a:	f107 0308 	add.w	r3, r7, #8
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7ff fecb 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ad96:	4a05      	ldr	r2, [pc, #20]	; (800adac <SDMMC_CmdStopTransfer+0x40>)
 800ad98:	210c      	movs	r1, #12
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f956 	bl	800b04c <SDMMC_GetCmdResp1>
 800ada0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ada2:	69fb      	ldr	r3, [r7, #28]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3720      	adds	r7, #32
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	05f5e100 	.word	0x05f5e100

0800adb0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b08a      	sub	sp, #40	; 0x28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800adc0:	2307      	movs	r3, #7
 800adc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800adc4:	2340      	movs	r3, #64	; 0x40
 800adc6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800adc8:	2300      	movs	r3, #0
 800adca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800add0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800add2:	f107 0310 	add.w	r3, r7, #16
 800add6:	4619      	mov	r1, r3
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f7ff fea7 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800adde:	f241 3288 	movw	r2, #5000	; 0x1388
 800ade2:	2107      	movs	r1, #7
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f000 f931 	bl	800b04c <SDMMC_GetCmdResp1>
 800adea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3728      	adds	r7, #40	; 0x28
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b088      	sub	sp, #32
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ae06:	2300      	movs	r3, #0
 800ae08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae14:	f107 0308 	add.w	r3, r7, #8
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff fe86 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f8eb 	bl	800affc <SDMMC_GetCmdError>
 800ae26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae28:	69fb      	ldr	r3, [r7, #28]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3720      	adds	r7, #32
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b088      	sub	sp, #32
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ae3a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ae3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ae40:	2308      	movs	r3, #8
 800ae42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae44:	2340      	movs	r3, #64	; 0x40
 800ae46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae52:	f107 0308 	add.w	r3, r7, #8
 800ae56:	4619      	mov	r1, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7ff fe67 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fad4 	bl	800b40c <SDMMC_GetCmdResp7>
 800ae64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae66:	69fb      	ldr	r3, [r7, #28]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3720      	adds	r7, #32
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b088      	sub	sp, #32
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ae7e:	2337      	movs	r3, #55	; 0x37
 800ae80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae82:	2340      	movs	r3, #64	; 0x40
 800ae84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae86:	2300      	movs	r3, #0
 800ae88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae90:	f107 0308 	add.w	r3, r7, #8
 800ae94:	4619      	mov	r1, r3
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f7ff fe48 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ae9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aea0:	2137      	movs	r1, #55	; 0x37
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f8d2 	bl	800b04c <SDMMC_GetCmdResp1>
 800aea8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeaa:	69fb      	ldr	r3, [r7, #28]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3720      	adds	r7, #32
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aeca:	2329      	movs	r3, #41	; 0x29
 800aecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aece:	2340      	movs	r3, #64	; 0x40
 800aed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aed2:	2300      	movs	r3, #0
 800aed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aedc:	f107 0308 	add.w	r3, r7, #8
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7ff fe22 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f9e1 	bl	800b2b0 <SDMMC_GetCmdResp3>
 800aeee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aef0:	69fb      	ldr	r3, [r7, #28]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3720      	adds	r7, #32
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b088      	sub	sp, #32
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800af02:	2300      	movs	r3, #0
 800af04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800af06:	2302      	movs	r3, #2
 800af08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800af0a:	23c0      	movs	r3, #192	; 0xc0
 800af0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af0e:	2300      	movs	r3, #0
 800af10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af18:	f107 0308 	add.w	r3, r7, #8
 800af1c:	4619      	mov	r1, r3
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7ff fe04 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f97d 	bl	800b224 <SDMMC_GetCmdResp2>
 800af2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af2c:	69fb      	ldr	r3, [r7, #28]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3720      	adds	r7, #32
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b088      	sub	sp, #32
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800af44:	2309      	movs	r3, #9
 800af46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800af48:	23c0      	movs	r3, #192	; 0xc0
 800af4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af4c:	2300      	movs	r3, #0
 800af4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af56:	f107 0308 	add.w	r3, r7, #8
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff fde5 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f95e 	bl	800b224 <SDMMC_GetCmdResp2>
 800af68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af6a:	69fb      	ldr	r3, [r7, #28]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3720      	adds	r7, #32
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800af7e:	2300      	movs	r3, #0
 800af80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800af82:	2303      	movs	r3, #3
 800af84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af86:	2340      	movs	r3, #64	; 0x40
 800af88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af8a:	2300      	movs	r3, #0
 800af8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af94:	f107 0308 	add.w	r3, r7, #8
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7ff fdc6 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	2103      	movs	r1, #3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 f9bd 	bl	800b324 <SDMMC_GetCmdResp6>
 800afaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afac:	69fb      	ldr	r3, [r7, #28]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3720      	adds	r7, #32
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b088      	sub	sp, #32
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800afc4:	230d      	movs	r3, #13
 800afc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afc8:	2340      	movs	r3, #64	; 0x40
 800afca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afcc:	2300      	movs	r3, #0
 800afce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afd6:	f107 0308 	add.w	r3, r7, #8
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7ff fda5 	bl	800ab2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800afe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe6:	210d      	movs	r1, #13
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f82f 	bl	800b04c <SDMMC_GetCmdResp1>
 800afee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aff0:	69fb      	ldr	r3, [r7, #28]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3720      	adds	r7, #32
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
	...

0800affc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800affc:	b490      	push	{r4, r7}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b004:	4b0f      	ldr	r3, [pc, #60]	; (800b044 <SDMMC_GetCmdError+0x48>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a0f      	ldr	r2, [pc, #60]	; (800b048 <SDMMC_GetCmdError+0x4c>)
 800b00a:	fba2 2303 	umull	r2, r3, r2, r3
 800b00e:	0a5b      	lsrs	r3, r3, #9
 800b010:	f241 3288 	movw	r2, #5000	; 0x1388
 800b014:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b018:	4623      	mov	r3, r4
 800b01a:	1e5c      	subs	r4, r3, #1
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d102      	bne.n	800b026 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b020:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b024:	e009      	b.n	800b03a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b02a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0f2      	beq.n	800b018 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	22c5      	movs	r2, #197	; 0xc5
 800b036:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bc90      	pop	{r4, r7}
 800b042:	4770      	bx	lr
 800b044:	20000050 	.word	0x20000050
 800b048:	10624dd3 	.word	0x10624dd3

0800b04c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b04c:	b590      	push	{r4, r7, lr}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	460b      	mov	r3, r1
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b05a:	4b6f      	ldr	r3, [pc, #444]	; (800b218 <SDMMC_GetCmdResp1+0x1cc>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a6f      	ldr	r2, [pc, #444]	; (800b21c <SDMMC_GetCmdResp1+0x1d0>)
 800b060:	fba2 2303 	umull	r2, r3, r2, r3
 800b064:	0a5b      	lsrs	r3, r3, #9
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b06c:	4623      	mov	r3, r4
 800b06e:	1e5c      	subs	r4, r3, #1
 800b070:	2b00      	cmp	r3, #0
 800b072:	d102      	bne.n	800b07a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b078:	e0c9      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b07e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0f0      	beq.n	800b06c <SDMMC_GetCmdResp1+0x20>
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1eb      	bne.n	800b06c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b098:	f003 0304 	and.w	r3, r3, #4
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d004      	beq.n	800b0aa <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2204      	movs	r2, #4
 800b0a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0a6:	2304      	movs	r3, #4
 800b0a8:	e0b1      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d004      	beq.n	800b0c0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e0a6      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	22c5      	movs	r2, #197	; 0xc5
 800b0c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f7ff fd5a 	bl	800ab80 <SDIO_GetCommandResponse>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	7afb      	ldrb	r3, [r7, #11]
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d001      	beq.n	800b0da <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e099      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b0da:	2100      	movs	r1, #0
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f7ff fd5c 	bl	800ab9a <SDIO_GetResponse>
 800b0e2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	4b4e      	ldr	r3, [pc, #312]	; (800b220 <SDMMC_GetCmdResp1+0x1d4>)
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	e08d      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	da02      	bge.n	800b0fe <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b0f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0fc:	e087      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b108:	2340      	movs	r3, #64	; 0x40
 800b10a:	e080      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b116:	2380      	movs	r3, #128	; 0x80
 800b118:	e079      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b124:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b128:	e071      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b134:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b138:	e069      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d002      	beq.n	800b14a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b148:	e061      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b158:	e059      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b168:	e051      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b178:	e049      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b184:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b188:	e041      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b198:	e039      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b1a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b1a8:	e031      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d002      	beq.n	800b1ba <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b1b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b1b8:	e029      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d002      	beq.n	800b1ca <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b1c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1c8:	e021      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b1d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b1d8:	e019      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b1e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b1e8:	e011      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b1f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b1f8:	e009      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	f003 0308 	and.w	r3, r3, #8
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b204:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b208:	e001      	b.n	800b20e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b20a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b20e:	4618      	mov	r0, r3
 800b210:	371c      	adds	r7, #28
 800b212:	46bd      	mov	sp, r7
 800b214:	bd90      	pop	{r4, r7, pc}
 800b216:	bf00      	nop
 800b218:	20000050 	.word	0x20000050
 800b21c:	10624dd3 	.word	0x10624dd3
 800b220:	fdffe008 	.word	0xfdffe008

0800b224 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b224:	b490      	push	{r4, r7}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b22c:	4b1e      	ldr	r3, [pc, #120]	; (800b2a8 <SDMMC_GetCmdResp2+0x84>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a1e      	ldr	r2, [pc, #120]	; (800b2ac <SDMMC_GetCmdResp2+0x88>)
 800b232:	fba2 2303 	umull	r2, r3, r2, r3
 800b236:	0a5b      	lsrs	r3, r3, #9
 800b238:	f241 3288 	movw	r2, #5000	; 0x1388
 800b23c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b240:	4623      	mov	r3, r4
 800b242:	1e5c      	subs	r4, r3, #1
 800b244:	2b00      	cmp	r3, #0
 800b246:	d102      	bne.n	800b24e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b24c:	e026      	b.n	800b29c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b252:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0f0      	beq.n	800b240 <SDMMC_GetCmdResp2+0x1c>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1eb      	bne.n	800b240 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b26c:	f003 0304 	and.w	r3, r3, #4
 800b270:	2b00      	cmp	r3, #0
 800b272:	d004      	beq.n	800b27e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2204      	movs	r2, #4
 800b278:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b27a:	2304      	movs	r3, #4
 800b27c:	e00e      	b.n	800b29c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	2b00      	cmp	r3, #0
 800b288:	d004      	beq.n	800b294 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2201      	movs	r2, #1
 800b28e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b290:	2301      	movs	r3, #1
 800b292:	e003      	b.n	800b29c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	22c5      	movs	r2, #197	; 0xc5
 800b298:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bc90      	pop	{r4, r7}
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	20000050 	.word	0x20000050
 800b2ac:	10624dd3 	.word	0x10624dd3

0800b2b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b2b0:	b490      	push	{r4, r7}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2b8:	4b18      	ldr	r3, [pc, #96]	; (800b31c <SDMMC_GetCmdResp3+0x6c>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a18      	ldr	r2, [pc, #96]	; (800b320 <SDMMC_GetCmdResp3+0x70>)
 800b2be:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c2:	0a5b      	lsrs	r3, r3, #9
 800b2c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b2cc:	4623      	mov	r3, r4
 800b2ce:	1e5c      	subs	r4, r3, #1
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d102      	bne.n	800b2da <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2d8:	e01b      	b.n	800b312 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d0f0      	beq.n	800b2cc <SDMMC_GetCmdResp3+0x1c>
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1eb      	bne.n	800b2cc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f8:	f003 0304 	and.w	r3, r3, #4
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d004      	beq.n	800b30a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2204      	movs	r2, #4
 800b304:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b306:	2304      	movs	r3, #4
 800b308:	e003      	b.n	800b312 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	22c5      	movs	r2, #197	; 0xc5
 800b30e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bc90      	pop	{r4, r7}
 800b31a:	4770      	bx	lr
 800b31c:	20000050 	.word	0x20000050
 800b320:	10624dd3 	.word	0x10624dd3

0800b324 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b324:	b590      	push	{r4, r7, lr}
 800b326:	b087      	sub	sp, #28
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	460b      	mov	r3, r1
 800b32e:	607a      	str	r2, [r7, #4]
 800b330:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b332:	4b34      	ldr	r3, [pc, #208]	; (800b404 <SDMMC_GetCmdResp6+0xe0>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a34      	ldr	r2, [pc, #208]	; (800b408 <SDMMC_GetCmdResp6+0xe4>)
 800b338:	fba2 2303 	umull	r2, r3, r2, r3
 800b33c:	0a5b      	lsrs	r3, r3, #9
 800b33e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b342:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b346:	4623      	mov	r3, r4
 800b348:	1e5c      	subs	r4, r3, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d102      	bne.n	800b354 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b34e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b352:	e052      	b.n	800b3fa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b358:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b360:	2b00      	cmp	r3, #0
 800b362:	d0f0      	beq.n	800b346 <SDMMC_GetCmdResp6+0x22>
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1eb      	bne.n	800b346 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b372:	f003 0304 	and.w	r3, r3, #4
 800b376:	2b00      	cmp	r3, #0
 800b378:	d004      	beq.n	800b384 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2204      	movs	r2, #4
 800b37e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b380:	2304      	movs	r3, #4
 800b382:	e03a      	b.n	800b3fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b388:	f003 0301 	and.w	r3, r3, #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d004      	beq.n	800b39a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2201      	movs	r2, #1
 800b394:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b396:	2301      	movs	r3, #1
 800b398:	e02f      	b.n	800b3fa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f7ff fbf0 	bl	800ab80 <SDIO_GetCommandResponse>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	7afb      	ldrb	r3, [r7, #11]
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d001      	beq.n	800b3ae <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e025      	b.n	800b3fa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	22c5      	movs	r2, #197	; 0xc5
 800b3b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f7ff fbef 	bl	800ab9a <SDIO_GetResponse>
 800b3bc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d106      	bne.n	800b3d6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	0c1b      	lsrs	r3, r3, #16
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e011      	b.n	800b3fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b3e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3e4:	e009      	b.n	800b3fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b3f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3f4:	e001      	b.n	800b3fa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b3f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	371c      	adds	r7, #28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd90      	pop	{r4, r7, pc}
 800b402:	bf00      	nop
 800b404:	20000050 	.word	0x20000050
 800b408:	10624dd3 	.word	0x10624dd3

0800b40c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b40c:	b490      	push	{r4, r7}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b414:	4b21      	ldr	r3, [pc, #132]	; (800b49c <SDMMC_GetCmdResp7+0x90>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a21      	ldr	r2, [pc, #132]	; (800b4a0 <SDMMC_GetCmdResp7+0x94>)
 800b41a:	fba2 2303 	umull	r2, r3, r2, r3
 800b41e:	0a5b      	lsrs	r3, r3, #9
 800b420:	f241 3288 	movw	r2, #5000	; 0x1388
 800b424:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b428:	4623      	mov	r3, r4
 800b42a:	1e5c      	subs	r4, r3, #1
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d102      	bne.n	800b436 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b430:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b434:	e02c      	b.n	800b490 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b43a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b442:	2b00      	cmp	r3, #0
 800b444:	d0f0      	beq.n	800b428 <SDMMC_GetCmdResp7+0x1c>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1eb      	bne.n	800b428 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b454:	f003 0304 	and.w	r3, r3, #4
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d004      	beq.n	800b466 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2204      	movs	r2, #4
 800b460:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b462:	2304      	movs	r3, #4
 800b464:	e014      	b.n	800b490 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b46a:	f003 0301 	and.w	r3, r3, #1
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d004      	beq.n	800b47c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b478:	2301      	movs	r3, #1
 800b47a:	e009      	b.n	800b490 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2240      	movs	r2, #64	; 0x40
 800b48c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b48e:	2300      	movs	r3, #0
  
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bc90      	pop	{r4, r7}
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	20000050 	.word	0x20000050
 800b4a0:	10624dd3 	.word	0x10624dd3

0800b4a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	f107 001c 	add.w	r0, r7, #28
 800b4b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d122      	bne.n	800b502 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b4d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b4e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d105      	bne.n	800b4f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f001 fa7c 	bl	800c9f4 <USB_CoreReset>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73fb      	strb	r3, [r7, #15]
 800b500:	e01a      	b.n	800b538 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f001 fa70 	bl	800c9f4 <USB_CoreReset>
 800b514:	4603      	mov	r3, r0
 800b516:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d106      	bne.n	800b52c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b522:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	639a      	str	r2, [r3, #56]	; 0x38
 800b52a:	e005      	b.n	800b538 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b530:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d10b      	bne.n	800b556 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	f043 0206 	orr.w	r2, r3, #6
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	f043 0220 	orr.w	r2, r3, #32
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b556:	7bfb      	ldrb	r3, [r7, #15]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b562:	b004      	add	sp, #16
 800b564:	4770      	bx	lr
	...

0800b568 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b568:	b480      	push	{r7}
 800b56a:	b087      	sub	sp, #28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	4613      	mov	r3, r2
 800b574:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b576:	79fb      	ldrb	r3, [r7, #7]
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d165      	bne.n	800b648 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	4a41      	ldr	r2, [pc, #260]	; (800b684 <USB_SetTurnaroundTime+0x11c>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d906      	bls.n	800b592 <USB_SetTurnaroundTime+0x2a>
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	4a40      	ldr	r2, [pc, #256]	; (800b688 <USB_SetTurnaroundTime+0x120>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d802      	bhi.n	800b592 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b58c:	230f      	movs	r3, #15
 800b58e:	617b      	str	r3, [r7, #20]
 800b590:	e062      	b.n	800b658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	4a3c      	ldr	r2, [pc, #240]	; (800b688 <USB_SetTurnaroundTime+0x120>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d906      	bls.n	800b5a8 <USB_SetTurnaroundTime+0x40>
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	4a3b      	ldr	r2, [pc, #236]	; (800b68c <USB_SetTurnaroundTime+0x124>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d802      	bhi.n	800b5a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b5a2:	230e      	movs	r3, #14
 800b5a4:	617b      	str	r3, [r7, #20]
 800b5a6:	e057      	b.n	800b658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	4a38      	ldr	r2, [pc, #224]	; (800b68c <USB_SetTurnaroundTime+0x124>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d906      	bls.n	800b5be <USB_SetTurnaroundTime+0x56>
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	4a37      	ldr	r2, [pc, #220]	; (800b690 <USB_SetTurnaroundTime+0x128>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d802      	bhi.n	800b5be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b5b8:	230d      	movs	r3, #13
 800b5ba:	617b      	str	r3, [r7, #20]
 800b5bc:	e04c      	b.n	800b658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	4a33      	ldr	r2, [pc, #204]	; (800b690 <USB_SetTurnaroundTime+0x128>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d906      	bls.n	800b5d4 <USB_SetTurnaroundTime+0x6c>
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	4a32      	ldr	r2, [pc, #200]	; (800b694 <USB_SetTurnaroundTime+0x12c>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d802      	bhi.n	800b5d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b5ce:	230c      	movs	r3, #12
 800b5d0:	617b      	str	r3, [r7, #20]
 800b5d2:	e041      	b.n	800b658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	4a2f      	ldr	r2, [pc, #188]	; (800b694 <USB_SetTurnaroundTime+0x12c>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d906      	bls.n	800b5ea <USB_SetTurnaroundTime+0x82>
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	4a2e      	ldr	r2, [pc, #184]	; (800b698 <USB_SetTurnaroundTime+0x130>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d802      	bhi.n	800b5ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b5e4:	230b      	movs	r3, #11
 800b5e6:	617b      	str	r3, [r7, #20]
 800b5e8:	e036      	b.n	800b658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	4a2a      	ldr	r2, [pc, #168]	; (800b698 <USB_SetTurnaroundTime+0x130>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d906      	bls.n	800b600 <USB_SetTurnaroundTime+0x98>
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	4a29      	ldr	r2, [pc, #164]	; (800b69c <USB_SetTurnaroundTime+0x134>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d802      	bhi.n	800b600 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b5fa:	230a      	movs	r3, #10
 800b5fc:	617b      	str	r3, [r7, #20]
 800b5fe:	e02b      	b.n	800b658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	4a26      	ldr	r2, [pc, #152]	; (800b69c <USB_SetTurnaroundTime+0x134>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d906      	bls.n	800b616 <USB_SetTurnaroundTime+0xae>
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	4a25      	ldr	r2, [pc, #148]	; (800b6a0 <USB_SetTurnaroundTime+0x138>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d802      	bhi.n	800b616 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b610:	2309      	movs	r3, #9
 800b612:	617b      	str	r3, [r7, #20]
 800b614:	e020      	b.n	800b658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	4a21      	ldr	r2, [pc, #132]	; (800b6a0 <USB_SetTurnaroundTime+0x138>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d906      	bls.n	800b62c <USB_SetTurnaroundTime+0xc4>
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	4a20      	ldr	r2, [pc, #128]	; (800b6a4 <USB_SetTurnaroundTime+0x13c>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d802      	bhi.n	800b62c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b626:	2308      	movs	r3, #8
 800b628:	617b      	str	r3, [r7, #20]
 800b62a:	e015      	b.n	800b658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	4a1d      	ldr	r2, [pc, #116]	; (800b6a4 <USB_SetTurnaroundTime+0x13c>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d906      	bls.n	800b642 <USB_SetTurnaroundTime+0xda>
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	4a1c      	ldr	r2, [pc, #112]	; (800b6a8 <USB_SetTurnaroundTime+0x140>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d802      	bhi.n	800b642 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b63c:	2307      	movs	r3, #7
 800b63e:	617b      	str	r3, [r7, #20]
 800b640:	e00a      	b.n	800b658 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b642:	2306      	movs	r3, #6
 800b644:	617b      	str	r3, [r7, #20]
 800b646:	e007      	b.n	800b658 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b648:	79fb      	ldrb	r3, [r7, #7]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d102      	bne.n	800b654 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b64e:	2309      	movs	r3, #9
 800b650:	617b      	str	r3, [r7, #20]
 800b652:	e001      	b.n	800b658 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b654:	2309      	movs	r3, #9
 800b656:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	68da      	ldr	r2, [r3, #12]
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	029b      	lsls	r3, r3, #10
 800b66c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b670:	431a      	orrs	r2, r3
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	371c      	adds	r7, #28
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	00d8acbf 	.word	0x00d8acbf
 800b688:	00e4e1bf 	.word	0x00e4e1bf
 800b68c:	00f423ff 	.word	0x00f423ff
 800b690:	0106737f 	.word	0x0106737f
 800b694:	011a499f 	.word	0x011a499f
 800b698:	01312cff 	.word	0x01312cff
 800b69c:	014ca43f 	.word	0x014ca43f
 800b6a0:	016e35ff 	.word	0x016e35ff
 800b6a4:	01a6ab1f 	.word	0x01a6ab1f
 800b6a8:	01e847ff 	.word	0x01e847ff

0800b6ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	f043 0201 	orr.w	r2, r3, #1
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b083      	sub	sp, #12
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	f023 0201 	bic.w	r2, r3, #1
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b708:	78fb      	ldrb	r3, [r7, #3]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d106      	bne.n	800b71c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	60da      	str	r2, [r3, #12]
 800b71a:	e00b      	b.n	800b734 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b71c:	78fb      	ldrb	r3, [r7, #3]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	60da      	str	r2, [r3, #12]
 800b72e:	e001      	b.n	800b734 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	e003      	b.n	800b73c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b734:	2032      	movs	r0, #50	; 0x32
 800b736:	f7f9 ff43 	bl	80055c0 <HAL_Delay>

  return HAL_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b744:	b084      	sub	sp, #16
 800b746:	b580      	push	{r7, lr}
 800b748:	b086      	sub	sp, #24
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b756:	2300      	movs	r3, #0
 800b758:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b75e:	2300      	movs	r3, #0
 800b760:	613b      	str	r3, [r7, #16]
 800b762:	e009      	b.n	800b778 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	3340      	adds	r3, #64	; 0x40
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4413      	add	r3, r2
 800b76e:	2200      	movs	r2, #0
 800b770:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	3301      	adds	r3, #1
 800b776:	613b      	str	r3, [r7, #16]
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	2b0e      	cmp	r3, #14
 800b77c:	d9f2      	bls.n	800b764 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b77e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b780:	2b00      	cmp	r3, #0
 800b782:	d112      	bne.n	800b7aa <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b788:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b794:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	639a      	str	r2, [r3, #56]	; 0x38
 800b7a8:	e00b      	b.n	800b7c2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7dc:	461a      	mov	r2, r3
 800b7de:	680b      	ldr	r3, [r1, #0]
 800b7e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d10c      	bne.n	800b802 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d104      	bne.n	800b7f8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f961 	bl	800bab8 <USB_SetDevSpeed>
 800b7f6:	e008      	b.n	800b80a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b7f8:	2101      	movs	r1, #1
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f95c 	bl	800bab8 <USB_SetDevSpeed>
 800b800:	e003      	b.n	800b80a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b802:	2103      	movs	r1, #3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f957 	bl	800bab8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b80a:	2110      	movs	r1, #16
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 f90b 	bl	800ba28 <USB_FlushTxFifo>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f929 	bl	800ba74 <USB_FlushRxFifo>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d001      	beq.n	800b82c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b832:	461a      	mov	r2, r3
 800b834:	2300      	movs	r3, #0
 800b836:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b83e:	461a      	mov	r2, r3
 800b840:	2300      	movs	r3, #0
 800b842:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b84a:	461a      	mov	r2, r3
 800b84c:	2300      	movs	r3, #0
 800b84e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b850:	2300      	movs	r3, #0
 800b852:	613b      	str	r3, [r7, #16]
 800b854:	e043      	b.n	800b8de <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	015a      	lsls	r2, r3, #5
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	4413      	add	r3, r2
 800b85e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b86c:	d118      	bne.n	800b8a0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10a      	bne.n	800b88a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	015a      	lsls	r2, r3, #5
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	4413      	add	r3, r2
 800b87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b880:	461a      	mov	r2, r3
 800b882:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	e013      	b.n	800b8b2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	015a      	lsls	r2, r3, #5
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	4413      	add	r3, r2
 800b892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b896:	461a      	mov	r2, r3
 800b898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b89c:	6013      	str	r3, [r2, #0]
 800b89e:	e008      	b.n	800b8b2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	015a      	lsls	r2, r3, #5
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	015a      	lsls	r2, r3, #5
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8be:	461a      	mov	r2, r3
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	015a      	lsls	r2, r3, #5
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b8d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	613b      	str	r3, [r7, #16]
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d3b7      	bcc.n	800b856 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	613b      	str	r3, [r7, #16]
 800b8ea:	e043      	b.n	800b974 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	015a      	lsls	r2, r3, #5
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b902:	d118      	bne.n	800b936 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10a      	bne.n	800b920 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	015a      	lsls	r2, r3, #5
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	4413      	add	r3, r2
 800b912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b916:	461a      	mov	r2, r3
 800b918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b91c:	6013      	str	r3, [r2, #0]
 800b91e:	e013      	b.n	800b948 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b92c:	461a      	mov	r2, r3
 800b92e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	e008      	b.n	800b948 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	015a      	lsls	r2, r3, #5
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	4413      	add	r3, r2
 800b93e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b942:	461a      	mov	r2, r3
 800b944:	2300      	movs	r3, #0
 800b946:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	015a      	lsls	r2, r3, #5
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b954:	461a      	mov	r2, r3
 800b956:	2300      	movs	r3, #0
 800b958:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	015a      	lsls	r2, r3, #5
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b966:	461a      	mov	r2, r3
 800b968:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b96c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	3301      	adds	r3, #1
 800b972:	613b      	str	r3, [r7, #16]
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d3b7      	bcc.n	800b8ec <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b98a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b98e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800b990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b992:	2b01      	cmp	r3, #1
 800b994:	d111      	bne.n	800b9ba <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b99c:	461a      	mov	r2, r3
 800b99e:	4b20      	ldr	r3, [pc, #128]	; (800ba20 <USB_DevInit+0x2dc>)
 800b9a0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9b4:	f043 0303 	orr.w	r3, r3, #3
 800b9b8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b9c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d105      	bne.n	800b9da <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	f043 0210 	orr.w	r2, r3, #16
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	699a      	ldr	r2, [r3, #24]
 800b9de:	4b11      	ldr	r3, [pc, #68]	; (800ba24 <USB_DevInit+0x2e0>)
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d005      	beq.n	800b9f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	f043 0208 	orr.w	r2, r3, #8
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d107      	bne.n	800ba0e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba06:	f043 0304 	orr.w	r3, r3, #4
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3718      	adds	r7, #24
 800ba14:	46bd      	mov	sp, r7
 800ba16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba1a:	b004      	add	sp, #16
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	00800100 	.word	0x00800100
 800ba24:	803c3800 	.word	0x803c3800

0800ba28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ba32:	2300      	movs	r3, #0
 800ba34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	019b      	lsls	r3, r3, #6
 800ba3a:	f043 0220 	orr.w	r2, r3, #32
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3301      	adds	r3, #1
 800ba46:	60fb      	str	r3, [r7, #12]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	4a09      	ldr	r2, [pc, #36]	; (800ba70 <USB_FlushTxFifo+0x48>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d901      	bls.n	800ba54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ba50:	2303      	movs	r3, #3
 800ba52:	e006      	b.n	800ba62 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	f003 0320 	and.w	r3, r3, #32
 800ba5c:	2b20      	cmp	r3, #32
 800ba5e:	d0f0      	beq.n	800ba42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3714      	adds	r7, #20
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	00030d40 	.word	0x00030d40

0800ba74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2210      	movs	r2, #16
 800ba84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	60fb      	str	r3, [r7, #12]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4a09      	ldr	r2, [pc, #36]	; (800bab4 <USB_FlushRxFifo+0x40>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d901      	bls.n	800ba98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ba94:	2303      	movs	r3, #3
 800ba96:	e006      	b.n	800baa6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	f003 0310 	and.w	r3, r3, #16
 800baa0:	2b10      	cmp	r3, #16
 800baa2:	d0f0      	beq.n	800ba86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	00030d40 	.word	0x00030d40

0800bab8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	460b      	mov	r3, r1
 800bac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	78fb      	ldrb	r3, [r7, #3]
 800bad2:	68f9      	ldr	r1, [r7, #12]
 800bad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bad8:	4313      	orrs	r3, r2
 800bada:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3714      	adds	r7, #20
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800baea:	b480      	push	{r7}
 800baec:	b087      	sub	sp, #28
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	f003 0306 	and.w	r3, r3, #6
 800bb02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d102      	bne.n	800bb10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	75fb      	strb	r3, [r7, #23]
 800bb0e:	e00a      	b.n	800bb26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d002      	beq.n	800bb1c <USB_GetDevSpeed+0x32>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b06      	cmp	r3, #6
 800bb1a:	d102      	bne.n	800bb22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	75fb      	strb	r3, [r7, #23]
 800bb20:	e001      	b.n	800bb26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bb22:	230f      	movs	r3, #15
 800bb24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	371c      	adds	r7, #28
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	785b      	ldrb	r3, [r3, #1]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d13a      	bne.n	800bbc6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb56:	69da      	ldr	r2, [r3, #28]
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	f003 030f 	and.w	r3, r3, #15
 800bb60:	2101      	movs	r1, #1
 800bb62:	fa01 f303 	lsl.w	r3, r1, r3
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	68f9      	ldr	r1, [r7, #12]
 800bb6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	015a      	lsls	r2, r3, #5
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d155      	bne.n	800bc34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	015a      	lsls	r2, r3, #5
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4413      	add	r3, r2
 800bb90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	78db      	ldrb	r3, [r3, #3]
 800bba2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bba4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	059b      	lsls	r3, r3, #22
 800bbaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bbac:	4313      	orrs	r3, r2
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	0151      	lsls	r1, r2, #5
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	440a      	add	r2, r1
 800bbb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbc2:	6013      	str	r3, [r2, #0]
 800bbc4:	e036      	b.n	800bc34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbcc:	69da      	ldr	r2, [r3, #28]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	f003 030f 	and.w	r3, r3, #15
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbdc:	041b      	lsls	r3, r3, #16
 800bbde:	68f9      	ldr	r1, [r7, #12]
 800bbe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	015a      	lsls	r2, r3, #5
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4413      	add	r3, r2
 800bbf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d11a      	bne.n	800bc34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	015a      	lsls	r2, r3, #5
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	4413      	add	r3, r2
 800bc06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	78db      	ldrb	r3, [r3, #3]
 800bc18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bc1a:	430b      	orrs	r3, r1
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	0151      	lsls	r1, r2, #5
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	440a      	add	r2, r1
 800bc26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
	...

0800bc44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	785b      	ldrb	r3, [r3, #1]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d135      	bne.n	800bccc <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	f003 030f 	and.w	r3, r3, #15
 800bc70:	2101      	movs	r1, #1
 800bc72:	fa01 f303 	lsl.w	r3, r1, r3
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	43db      	mvns	r3, r3
 800bc7a:	68f9      	ldr	r1, [r7, #12]
 800bc7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc80:	4013      	ands	r3, r2
 800bc82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8a:	69da      	ldr	r2, [r3, #28]
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	f003 030f 	and.w	r3, r3, #15
 800bc94:	2101      	movs	r1, #1
 800bc96:	fa01 f303 	lsl.w	r3, r1, r3
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	43db      	mvns	r3, r3
 800bc9e:	68f9      	ldr	r1, [r7, #12]
 800bca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bca4:	4013      	ands	r3, r2
 800bca6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	0159      	lsls	r1, r3, #5
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	440b      	add	r3, r1
 800bcbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	4b1f      	ldr	r3, [pc, #124]	; (800bd44 <USB_DeactivateEndpoint+0x100>)
 800bcc6:	4013      	ands	r3, r2
 800bcc8:	600b      	str	r3, [r1, #0]
 800bcca:	e034      	b.n	800bd36 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	f003 030f 	and.w	r3, r3, #15
 800bcdc:	2101      	movs	r1, #1
 800bcde:	fa01 f303 	lsl.w	r3, r1, r3
 800bce2:	041b      	lsls	r3, r3, #16
 800bce4:	43db      	mvns	r3, r3
 800bce6:	68f9      	ldr	r1, [r7, #12]
 800bce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcec:	4013      	ands	r3, r2
 800bcee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcf6:	69da      	ldr	r2, [r3, #28]
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	f003 030f 	and.w	r3, r3, #15
 800bd00:	2101      	movs	r1, #1
 800bd02:	fa01 f303 	lsl.w	r3, r1, r3
 800bd06:	041b      	lsls	r3, r3, #16
 800bd08:	43db      	mvns	r3, r3
 800bd0a:	68f9      	ldr	r1, [r7, #12]
 800bd0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd10:	4013      	ands	r3, r2
 800bd12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	015a      	lsls	r2, r3, #5
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	0159      	lsls	r1, r3, #5
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	440b      	add	r3, r1
 800bd2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd2e:	4619      	mov	r1, r3
 800bd30:	4b05      	ldr	r3, [pc, #20]	; (800bd48 <USB_DeactivateEndpoint+0x104>)
 800bd32:	4013      	ands	r3, r2
 800bd34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	ec337800 	.word	0xec337800
 800bd48:	eff37800 	.word	0xeff37800

0800bd4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08a      	sub	sp, #40	; 0x28
 800bd50:	af02      	add	r7, sp, #8
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	4613      	mov	r3, r2
 800bd58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	785b      	ldrb	r3, [r3, #1]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	f040 815c 	bne.w	800c026 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	695b      	ldr	r3, [r3, #20]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d132      	bne.n	800bddc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd82:	691b      	ldr	r3, [r3, #16]
 800bd84:	69ba      	ldr	r2, [r7, #24]
 800bd86:	0151      	lsls	r1, r2, #5
 800bd88:	69fa      	ldr	r2, [r7, #28]
 800bd8a:	440a      	add	r2, r1
 800bd8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bd98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	015a      	lsls	r2, r3, #5
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	4413      	add	r3, r2
 800bda2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	69ba      	ldr	r2, [r7, #24]
 800bdaa:	0151      	lsls	r1, r2, #5
 800bdac:	69fa      	ldr	r2, [r7, #28]
 800bdae:	440a      	add	r2, r1
 800bdb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	015a      	lsls	r2, r3, #5
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	69ba      	ldr	r2, [r7, #24]
 800bdca:	0151      	lsls	r1, r2, #5
 800bdcc:	69fa      	ldr	r2, [r7, #28]
 800bdce:	440a      	add	r2, r1
 800bdd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdd4:	0cdb      	lsrs	r3, r3, #19
 800bdd6:	04db      	lsls	r3, r3, #19
 800bdd8:	6113      	str	r3, [r2, #16]
 800bdda:	e074      	b.n	800bec6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	015a      	lsls	r2, r3, #5
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	4413      	add	r3, r2
 800bde4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	69ba      	ldr	r2, [r7, #24]
 800bdec:	0151      	lsls	r1, r2, #5
 800bdee:	69fa      	ldr	r2, [r7, #28]
 800bdf0:	440a      	add	r2, r1
 800bdf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdf6:	0cdb      	lsrs	r3, r3, #19
 800bdf8:	04db      	lsls	r3, r3, #19
 800bdfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	4413      	add	r3, r2
 800be04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	69ba      	ldr	r2, [r7, #24]
 800be0c:	0151      	lsls	r1, r2, #5
 800be0e:	69fa      	ldr	r2, [r7, #28]
 800be10:	440a      	add	r2, r1
 800be12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800be1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800be1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	015a      	lsls	r2, r3, #5
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	4413      	add	r3, r2
 800be28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be2c:	691a      	ldr	r2, [r3, #16]
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	6959      	ldr	r1, [r3, #20]
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	440b      	add	r3, r1
 800be38:	1e59      	subs	r1, r3, #1
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	fbb1 f3f3 	udiv	r3, r1, r3
 800be42:	04d9      	lsls	r1, r3, #19
 800be44:	4b9d      	ldr	r3, [pc, #628]	; (800c0bc <USB_EPStartXfer+0x370>)
 800be46:	400b      	ands	r3, r1
 800be48:	69b9      	ldr	r1, [r7, #24]
 800be4a:	0148      	lsls	r0, r1, #5
 800be4c:	69f9      	ldr	r1, [r7, #28]
 800be4e:	4401      	add	r1, r0
 800be50:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800be54:	4313      	orrs	r3, r2
 800be56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be64:	691a      	ldr	r2, [r3, #16]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	695b      	ldr	r3, [r3, #20]
 800be6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be6e:	69b9      	ldr	r1, [r7, #24]
 800be70:	0148      	lsls	r0, r1, #5
 800be72:	69f9      	ldr	r1, [r7, #28]
 800be74:	4401      	add	r1, r0
 800be76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800be7a:	4313      	orrs	r3, r2
 800be7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	78db      	ldrb	r3, [r3, #3]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d11f      	bne.n	800bec6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	015a      	lsls	r2, r3, #5
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	4413      	add	r3, r2
 800be8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be92:	691b      	ldr	r3, [r3, #16]
 800be94:	69ba      	ldr	r2, [r7, #24]
 800be96:	0151      	lsls	r1, r2, #5
 800be98:	69fa      	ldr	r2, [r7, #28]
 800be9a:	440a      	add	r2, r1
 800be9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bea0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bea4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	015a      	lsls	r2, r3, #5
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	4413      	add	r3, r2
 800beae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	69ba      	ldr	r2, [r7, #24]
 800beb6:	0151      	lsls	r1, r2, #5
 800beb8:	69fa      	ldr	r2, [r7, #28]
 800beba:	440a      	add	r2, r1
 800bebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bec0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bec4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bec6:	79fb      	ldrb	r3, [r7, #7]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d14b      	bne.n	800bf64 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d009      	beq.n	800bee8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	015a      	lsls	r2, r3, #5
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	4413      	add	r3, r2
 800bedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee0:	461a      	mov	r2, r3
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	78db      	ldrb	r3, [r3, #3]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d128      	bne.n	800bf42 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800befc:	2b00      	cmp	r3, #0
 800befe:	d110      	bne.n	800bf22 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	015a      	lsls	r2, r3, #5
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	4413      	add	r3, r2
 800bf08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	69ba      	ldr	r2, [r7, #24]
 800bf10:	0151      	lsls	r1, r2, #5
 800bf12:	69fa      	ldr	r2, [r7, #28]
 800bf14:	440a      	add	r2, r1
 800bf16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf1e:	6013      	str	r3, [r2, #0]
 800bf20:	e00f      	b.n	800bf42 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	015a      	lsls	r2, r3, #5
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	4413      	add	r3, r2
 800bf2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	69ba      	ldr	r2, [r7, #24]
 800bf32:	0151      	lsls	r1, r2, #5
 800bf34:	69fa      	ldr	r2, [r7, #28]
 800bf36:	440a      	add	r2, r1
 800bf38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	015a      	lsls	r2, r3, #5
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	4413      	add	r3, r2
 800bf4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	69ba      	ldr	r2, [r7, #24]
 800bf52:	0151      	lsls	r1, r2, #5
 800bf54:	69fa      	ldr	r2, [r7, #28]
 800bf56:	440a      	add	r2, r1
 800bf58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf60:	6013      	str	r3, [r2, #0]
 800bf62:	e12f      	b.n	800c1c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	015a      	lsls	r2, r3, #5
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	69ba      	ldr	r2, [r7, #24]
 800bf74:	0151      	lsls	r1, r2, #5
 800bf76:	69fa      	ldr	r2, [r7, #28]
 800bf78:	440a      	add	r2, r1
 800bf7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	78db      	ldrb	r3, [r3, #3]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d015      	beq.n	800bfb8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	695b      	ldr	r3, [r3, #20]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f000 8117 	beq.w	800c1c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	f003 030f 	and.w	r3, r3, #15
 800bfa6:	2101      	movs	r1, #1
 800bfa8:	fa01 f303 	lsl.w	r3, r1, r3
 800bfac:	69f9      	ldr	r1, [r7, #28]
 800bfae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	634b      	str	r3, [r1, #52]	; 0x34
 800bfb6:	e105      	b.n	800c1c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d110      	bne.n	800bfea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	015a      	lsls	r2, r3, #5
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	4413      	add	r3, r2
 800bfd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	69ba      	ldr	r2, [r7, #24]
 800bfd8:	0151      	lsls	r1, r2, #5
 800bfda:	69fa      	ldr	r2, [r7, #28]
 800bfdc:	440a      	add	r2, r1
 800bfde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bfe6:	6013      	str	r3, [r2, #0]
 800bfe8:	e00f      	b.n	800c00a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	015a      	lsls	r2, r3, #5
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	4413      	add	r3, r2
 800bff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	69ba      	ldr	r2, [r7, #24]
 800bffa:	0151      	lsls	r1, r2, #5
 800bffc:	69fa      	ldr	r2, [r7, #28]
 800bffe:	440a      	add	r2, r1
 800c000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c008:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	68d9      	ldr	r1, [r3, #12]
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	781a      	ldrb	r2, [r3, #0]
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	695b      	ldr	r3, [r3, #20]
 800c016:	b298      	uxth	r0, r3
 800c018:	79fb      	ldrb	r3, [r7, #7]
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	4603      	mov	r3, r0
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f000 fa2b 	bl	800c47a <USB_WritePacket>
 800c024:	e0ce      	b.n	800c1c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	015a      	lsls	r2, r3, #5
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	4413      	add	r3, r2
 800c02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	69ba      	ldr	r2, [r7, #24]
 800c036:	0151      	lsls	r1, r2, #5
 800c038:	69fa      	ldr	r2, [r7, #28]
 800c03a:	440a      	add	r2, r1
 800c03c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c040:	0cdb      	lsrs	r3, r3, #19
 800c042:	04db      	lsls	r3, r3, #19
 800c044:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	015a      	lsls	r2, r3, #5
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	4413      	add	r3, r2
 800c04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	69ba      	ldr	r2, [r7, #24]
 800c056:	0151      	lsls	r1, r2, #5
 800c058:	69fa      	ldr	r2, [r7, #28]
 800c05a:	440a      	add	r2, r1
 800c05c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c060:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c064:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c068:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	695b      	ldr	r3, [r3, #20]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d126      	bne.n	800c0c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	015a      	lsls	r2, r3, #5
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	4413      	add	r3, r2
 800c07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c07e:	691a      	ldr	r2, [r3, #16]
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c088:	69b9      	ldr	r1, [r7, #24]
 800c08a:	0148      	lsls	r0, r1, #5
 800c08c:	69f9      	ldr	r1, [r7, #28]
 800c08e:	4401      	add	r1, r0
 800c090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c094:	4313      	orrs	r3, r2
 800c096:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	015a      	lsls	r2, r3, #5
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	4413      	add	r3, r2
 800c0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	69ba      	ldr	r2, [r7, #24]
 800c0a8:	0151      	lsls	r1, r2, #5
 800c0aa:	69fa      	ldr	r2, [r7, #28]
 800c0ac:	440a      	add	r2, r1
 800c0ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0b6:	6113      	str	r3, [r2, #16]
 800c0b8:	e036      	b.n	800c128 <USB_EPStartXfer+0x3dc>
 800c0ba:	bf00      	nop
 800c0bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	695a      	ldr	r2, [r3, #20]
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	1e5a      	subs	r2, r3, #1
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	015a      	lsls	r2, r3, #5
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	4413      	add	r3, r2
 800c0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e2:	691a      	ldr	r2, [r3, #16]
 800c0e4:	8afb      	ldrh	r3, [r7, #22]
 800c0e6:	04d9      	lsls	r1, r3, #19
 800c0e8:	4b39      	ldr	r3, [pc, #228]	; (800c1d0 <USB_EPStartXfer+0x484>)
 800c0ea:	400b      	ands	r3, r1
 800c0ec:	69b9      	ldr	r1, [r7, #24]
 800c0ee:	0148      	lsls	r0, r1, #5
 800c0f0:	69f9      	ldr	r1, [r7, #28]
 800c0f2:	4401      	add	r1, r0
 800c0f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	015a      	lsls	r2, r3, #5
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	4413      	add	r3, r2
 800c104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c108:	691a      	ldr	r2, [r3, #16]
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	8af9      	ldrh	r1, [r7, #22]
 800c110:	fb01 f303 	mul.w	r3, r1, r3
 800c114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c118:	69b9      	ldr	r1, [r7, #24]
 800c11a:	0148      	lsls	r0, r1, #5
 800c11c:	69f9      	ldr	r1, [r7, #28]
 800c11e:	4401      	add	r1, r0
 800c120:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c124:	4313      	orrs	r3, r2
 800c126:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c128:	79fb      	ldrb	r3, [r7, #7]
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d10d      	bne.n	800c14a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d009      	beq.n	800c14a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	68d9      	ldr	r1, [r3, #12]
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	015a      	lsls	r2, r3, #5
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	4413      	add	r3, r2
 800c142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c146:	460a      	mov	r2, r1
 800c148:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	78db      	ldrb	r3, [r3, #3]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d128      	bne.n	800c1a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d110      	bne.n	800c184 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	015a      	lsls	r2, r3, #5
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	4413      	add	r3, r2
 800c16a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	69ba      	ldr	r2, [r7, #24]
 800c172:	0151      	lsls	r1, r2, #5
 800c174:	69fa      	ldr	r2, [r7, #28]
 800c176:	440a      	add	r2, r1
 800c178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c17c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c180:	6013      	str	r3, [r2, #0]
 800c182:	e00f      	b.n	800c1a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	015a      	lsls	r2, r3, #5
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	4413      	add	r3, r2
 800c18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	69ba      	ldr	r2, [r7, #24]
 800c194:	0151      	lsls	r1, r2, #5
 800c196:	69fa      	ldr	r2, [r7, #28]
 800c198:	440a      	add	r2, r1
 800c19a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c19e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	015a      	lsls	r2, r3, #5
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	69ba      	ldr	r2, [r7, #24]
 800c1b4:	0151      	lsls	r1, r2, #5
 800c1b6:	69fa      	ldr	r2, [r7, #28]
 800c1b8:	440a      	add	r2, r1
 800c1ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3720      	adds	r7, #32
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	1ff80000 	.word	0x1ff80000

0800c1d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b087      	sub	sp, #28
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	4613      	mov	r3, r2
 800c1e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	785b      	ldrb	r3, [r3, #1]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	f040 80cd 	bne.w	800c390 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	695b      	ldr	r3, [r3, #20]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d132      	bne.n	800c264 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	015a      	lsls	r2, r3, #5
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	4413      	add	r3, r2
 800c206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	693a      	ldr	r2, [r7, #16]
 800c20e:	0151      	lsls	r1, r2, #5
 800c210:	697a      	ldr	r2, [r7, #20]
 800c212:	440a      	add	r2, r1
 800c214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c218:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c21c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c220:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	015a      	lsls	r2, r3, #5
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	4413      	add	r3, r2
 800c22a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c22e:	691b      	ldr	r3, [r3, #16]
 800c230:	693a      	ldr	r2, [r7, #16]
 800c232:	0151      	lsls	r1, r2, #5
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	440a      	add	r2, r1
 800c238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c23c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c240:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	015a      	lsls	r2, r3, #5
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	4413      	add	r3, r2
 800c24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	693a      	ldr	r2, [r7, #16]
 800c252:	0151      	lsls	r1, r2, #5
 800c254:	697a      	ldr	r2, [r7, #20]
 800c256:	440a      	add	r2, r1
 800c258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c25c:	0cdb      	lsrs	r3, r3, #19
 800c25e:	04db      	lsls	r3, r3, #19
 800c260:	6113      	str	r3, [r2, #16]
 800c262:	e04e      	b.n	800c302 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	015a      	lsls	r2, r3, #5
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	4413      	add	r3, r2
 800c26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	0151      	lsls	r1, r2, #5
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	440a      	add	r2, r1
 800c27a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c27e:	0cdb      	lsrs	r3, r3, #19
 800c280:	04db      	lsls	r3, r3, #19
 800c282:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	015a      	lsls	r2, r3, #5
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	4413      	add	r3, r2
 800c28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	693a      	ldr	r2, [r7, #16]
 800c294:	0151      	lsls	r1, r2, #5
 800c296:	697a      	ldr	r2, [r7, #20]
 800c298:	440a      	add	r2, r1
 800c29a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c29e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c2a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c2a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	695a      	ldr	r2, [r3, #20]
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d903      	bls.n	800c2bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	015a      	lsls	r2, r3, #5
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	0151      	lsls	r1, r2, #5
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	440a      	add	r2, r1
 800c2d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	015a      	lsls	r2, r3, #5
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e8:	691a      	ldr	r2, [r3, #16]
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	695b      	ldr	r3, [r3, #20]
 800c2ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2f2:	6939      	ldr	r1, [r7, #16]
 800c2f4:	0148      	lsls	r0, r1, #5
 800c2f6:	6979      	ldr	r1, [r7, #20]
 800c2f8:	4401      	add	r1, r0
 800c2fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c2fe:	4313      	orrs	r3, r2
 800c300:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c302:	79fb      	ldrb	r3, [r7, #7]
 800c304:	2b01      	cmp	r3, #1
 800c306:	d11e      	bne.n	800c346 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d009      	beq.n	800c324 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	015a      	lsls	r2, r3, #5
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	4413      	add	r3, r2
 800c318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31c:	461a      	mov	r2, r3
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	015a      	lsls	r2, r3, #5
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	4413      	add	r3, r2
 800c32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	693a      	ldr	r2, [r7, #16]
 800c334:	0151      	lsls	r1, r2, #5
 800c336:	697a      	ldr	r2, [r7, #20]
 800c338:	440a      	add	r2, r1
 800c33a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c33e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	e092      	b.n	800c46c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	015a      	lsls	r2, r3, #5
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	4413      	add	r3, r2
 800c34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	693a      	ldr	r2, [r7, #16]
 800c356:	0151      	lsls	r1, r2, #5
 800c358:	697a      	ldr	r2, [r7, #20]
 800c35a:	440a      	add	r2, r1
 800c35c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c360:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c364:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d07e      	beq.n	800c46c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	f003 030f 	and.w	r3, r3, #15
 800c37e:	2101      	movs	r1, #1
 800c380:	fa01 f303 	lsl.w	r3, r1, r3
 800c384:	6979      	ldr	r1, [r7, #20]
 800c386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c38a:	4313      	orrs	r3, r2
 800c38c:	634b      	str	r3, [r1, #52]	; 0x34
 800c38e:	e06d      	b.n	800c46c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	015a      	lsls	r2, r3, #5
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	4413      	add	r3, r2
 800c398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c39c:	691b      	ldr	r3, [r3, #16]
 800c39e:	693a      	ldr	r2, [r7, #16]
 800c3a0:	0151      	lsls	r1, r2, #5
 800c3a2:	697a      	ldr	r2, [r7, #20]
 800c3a4:	440a      	add	r2, r1
 800c3a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3aa:	0cdb      	lsrs	r3, r3, #19
 800c3ac:	04db      	lsls	r3, r3, #19
 800c3ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	015a      	lsls	r2, r3, #5
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	0151      	lsls	r1, r2, #5
 800c3c2:	697a      	ldr	r2, [r7, #20]
 800c3c4:	440a      	add	r2, r1
 800c3c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c3ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c3d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	695b      	ldr	r3, [r3, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d003      	beq.n	800c3e4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	689a      	ldr	r2, [r3, #8]
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	015a      	lsls	r2, r3, #5
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	0151      	lsls	r1, r2, #5
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	440a      	add	r2, r1
 800c3fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c402:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	015a      	lsls	r2, r3, #5
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	4413      	add	r3, r2
 800c40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c410:	691a      	ldr	r2, [r3, #16]
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c41a:	6939      	ldr	r1, [r7, #16]
 800c41c:	0148      	lsls	r0, r1, #5
 800c41e:	6979      	ldr	r1, [r7, #20]
 800c420:	4401      	add	r1, r0
 800c422:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c426:	4313      	orrs	r3, r2
 800c428:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c42a:	79fb      	ldrb	r3, [r7, #7]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d10d      	bne.n	800c44c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d009      	beq.n	800c44c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	68d9      	ldr	r1, [r3, #12]
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	015a      	lsls	r2, r3, #5
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	4413      	add	r3, r2
 800c444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c448:	460a      	mov	r2, r1
 800c44a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	015a      	lsls	r2, r3, #5
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	4413      	add	r3, r2
 800c454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	693a      	ldr	r2, [r7, #16]
 800c45c:	0151      	lsls	r1, r2, #5
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	440a      	add	r2, r1
 800c462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c466:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c46a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	371c      	adds	r7, #28
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c47a:	b480      	push	{r7}
 800c47c:	b089      	sub	sp, #36	; 0x24
 800c47e:	af00      	add	r7, sp, #0
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	60b9      	str	r1, [r7, #8]
 800c484:	4611      	mov	r1, r2
 800c486:	461a      	mov	r2, r3
 800c488:	460b      	mov	r3, r1
 800c48a:	71fb      	strb	r3, [r7, #7]
 800c48c:	4613      	mov	r3, r2
 800c48e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c498:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d11a      	bne.n	800c4d6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c4a0:	88bb      	ldrh	r3, [r7, #4]
 800c4a2:	3303      	adds	r3, #3
 800c4a4:	089b      	lsrs	r3, r3, #2
 800c4a6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	61bb      	str	r3, [r7, #24]
 800c4ac:	e00f      	b.n	800c4ce <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c4ae:	79fb      	ldrb	r3, [r7, #7]
 800c4b0:	031a      	lsls	r2, r3, #12
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	61bb      	str	r3, [r7, #24]
 800c4ce:	69ba      	ldr	r2, [r7, #24]
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d3eb      	bcc.n	800c4ae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3724      	adds	r7, #36	; 0x24
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b089      	sub	sp, #36	; 0x24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c4fa:	88fb      	ldrh	r3, [r7, #6]
 800c4fc:	3303      	adds	r3, #3
 800c4fe:	089b      	lsrs	r3, r3, #2
 800c500:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c502:	2300      	movs	r3, #0
 800c504:	61bb      	str	r3, [r7, #24]
 800c506:	e00b      	b.n	800c520 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	601a      	str	r2, [r3, #0]
    pDest++;
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	3304      	adds	r3, #4
 800c518:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	3301      	adds	r3, #1
 800c51e:	61bb      	str	r3, [r7, #24]
 800c520:	69ba      	ldr	r2, [r7, #24]
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	429a      	cmp	r2, r3
 800c526:	d3ef      	bcc.n	800c508 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c528:	69fb      	ldr	r3, [r7, #28]
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3724      	adds	r7, #36	; 0x24
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr

0800c536 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c536:	b480      	push	{r7}
 800c538:	b085      	sub	sp, #20
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	785b      	ldrb	r3, [r3, #1]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d12c      	bne.n	800c5ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	015a      	lsls	r2, r3, #5
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	4413      	add	r3, r2
 800c55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	db12      	blt.n	800c58a <USB_EPSetStall+0x54>
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00f      	beq.n	800c58a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	015a      	lsls	r2, r3, #5
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	4413      	add	r3, r2
 800c572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	0151      	lsls	r1, r2, #5
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	440a      	add	r2, r1
 800c580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c584:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c588:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	015a      	lsls	r2, r3, #5
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	4413      	add	r3, r2
 800c592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68ba      	ldr	r2, [r7, #8]
 800c59a:	0151      	lsls	r1, r2, #5
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	440a      	add	r2, r1
 800c5a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c5a8:	6013      	str	r3, [r2, #0]
 800c5aa:	e02b      	b.n	800c604 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	015a      	lsls	r2, r3, #5
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	db12      	blt.n	800c5e4 <USB_EPSetStall+0xae>
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00f      	beq.n	800c5e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	015a      	lsls	r2, r3, #5
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68ba      	ldr	r2, [r7, #8]
 800c5d4:	0151      	lsls	r1, r2, #5
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	440a      	add	r2, r1
 800c5da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c5e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	015a      	lsls	r2, r3, #5
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	0151      	lsls	r1, r2, #5
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	440a      	add	r2, r1
 800c5fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c602:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c612:	b480      	push	{r7}
 800c614:	b085      	sub	sp, #20
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
 800c61a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	785b      	ldrb	r3, [r3, #1]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d128      	bne.n	800c680 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	015a      	lsls	r2, r3, #5
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	4413      	add	r3, r2
 800c636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68ba      	ldr	r2, [r7, #8]
 800c63e:	0151      	lsls	r1, r2, #5
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	440a      	add	r2, r1
 800c644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c648:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c64c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	78db      	ldrb	r3, [r3, #3]
 800c652:	2b03      	cmp	r3, #3
 800c654:	d003      	beq.n	800c65e <USB_EPClearStall+0x4c>
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	78db      	ldrb	r3, [r3, #3]
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d138      	bne.n	800c6d0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	015a      	lsls	r2, r3, #5
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	4413      	add	r3, r2
 800c666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	0151      	lsls	r1, r2, #5
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	440a      	add	r2, r1
 800c674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c67c:	6013      	str	r3, [r2, #0]
 800c67e:	e027      	b.n	800c6d0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	015a      	lsls	r2, r3, #5
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	4413      	add	r3, r2
 800c688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	0151      	lsls	r1, r2, #5
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	440a      	add	r2, r1
 800c696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c69a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c69e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	78db      	ldrb	r3, [r3, #3]
 800c6a4:	2b03      	cmp	r3, #3
 800c6a6:	d003      	beq.n	800c6b0 <USB_EPClearStall+0x9e>
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	78db      	ldrb	r3, [r3, #3]
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d10f      	bne.n	800c6d0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	015a      	lsls	r2, r3, #5
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68ba      	ldr	r2, [r7, #8]
 800c6c0:	0151      	lsls	r1, r2, #5
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	440a      	add	r2, r1
 800c6c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6ce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3714      	adds	r7, #20
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr

0800c6de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c6de:	b480      	push	{r7}
 800c6e0:	b085      	sub	sp, #20
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c700:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	78fb      	ldrb	r3, [r7, #3]
 800c70c:	011b      	lsls	r3, r3, #4
 800c70e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c712:	68f9      	ldr	r1, [r7, #12]
 800c714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c718:	4313      	orrs	r3, r2
 800c71a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b084      	sub	sp, #16
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c744:	f023 0302 	bic.w	r3, r3, #2
 800c748:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c74a:	2003      	movs	r0, #3
 800c74c:	f7f8 ff38 	bl	80055c0 <HAL_Delay>

  return HAL_OK;
 800c750:	2300      	movs	r3, #0
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b084      	sub	sp, #16
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c774:	f043 0302 	orr.w	r3, r3, #2
 800c778:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c77a:	2003      	movs	r0, #3
 800c77c:	f7f8 ff20 	bl	80055c0 <HAL_Delay>

  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c78a:	b480      	push	{r7}
 800c78c:	b085      	sub	sp, #20
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	699b      	ldr	r3, [r3, #24]
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	4013      	ands	r3, r2
 800c7a0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3714      	adds	r7, #20
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7cc:	69db      	ldr	r3, [r3, #28]
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	4013      	ands	r3, r2
 800c7d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	0c1b      	lsrs	r3, r3, #16
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	4013      	ands	r3, r2
 800c806:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	b29b      	uxth	r3, r3
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3714      	adds	r7, #20
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c828:	78fb      	ldrb	r3, [r7, #3]
 800c82a:	015a      	lsls	r2, r3, #5
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	4413      	add	r3, r2
 800c830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c83e:	695b      	ldr	r3, [r3, #20]
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	4013      	ands	r3, r2
 800c844:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c846:	68bb      	ldr	r3, [r7, #8]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c854:	b480      	push	{r7}
 800c856:	b087      	sub	sp, #28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	460b      	mov	r3, r1
 800c85e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c876:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c878:	78fb      	ldrb	r3, [r7, #3]
 800c87a:	f003 030f 	and.w	r3, r3, #15
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	fa22 f303 	lsr.w	r3, r2, r3
 800c884:	01db      	lsls	r3, r3, #7
 800c886:	b2db      	uxtb	r3, r3
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c88e:	78fb      	ldrb	r3, [r7, #3]
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	4413      	add	r3, r2
 800c896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	4013      	ands	r3, r2
 800c8a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c8a2:	68bb      	ldr	r3, [r7, #8]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	371c      	adds	r7, #28
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	f003 0301 	and.w	r3, r3, #1
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c8ea:	f023 0307 	bic.w	r3, r3, #7
 800c8ee:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	f003 0306 	and.w	r3, r3, #6
 800c8fc:	2b04      	cmp	r3, #4
 800c8fe:	d109      	bne.n	800c914 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c90e:	f043 0303 	orr.w	r3, r3, #3
 800c912:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c926:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3714      	adds	r7, #20
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
	...

0800c938 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c938:	b480      	push	{r7}
 800c93a:	b087      	sub	sp, #28
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	460b      	mov	r3, r1
 800c942:	607a      	str	r2, [r7, #4]
 800c944:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	333c      	adds	r3, #60	; 0x3c
 800c94e:	3304      	adds	r3, #4
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	4a26      	ldr	r2, [pc, #152]	; (800c9f0 <USB_EP0_OutStart+0xb8>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d90a      	bls.n	800c972 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c96c:	d101      	bne.n	800c972 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c96e:	2300      	movs	r3, #0
 800c970:	e037      	b.n	800c9e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c978:	461a      	mov	r2, r3
 800c97a:	2300      	movs	r3, #0
 800c97c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	697a      	ldr	r2, [r7, #20]
 800c988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c98c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	697a      	ldr	r2, [r7, #20]
 800c99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9a0:	f043 0318 	orr.w	r3, r3, #24
 800c9a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c9b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c9ba:	7afb      	ldrb	r3, [r7, #11]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d10f      	bne.n	800c9e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c9de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	371c      	adds	r7, #28
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	4f54300a 	.word	0x4f54300a

0800c9f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	3301      	adds	r3, #1
 800ca04:	60fb      	str	r3, [r7, #12]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	4a13      	ldr	r2, [pc, #76]	; (800ca58 <USB_CoreReset+0x64>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d901      	bls.n	800ca12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	e01b      	b.n	800ca4a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	daf2      	bge.n	800ca00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	691b      	ldr	r3, [r3, #16]
 800ca22:	f043 0201 	orr.w	r2, r3, #1
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4a09      	ldr	r2, [pc, #36]	; (800ca58 <USB_CoreReset+0x64>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d901      	bls.n	800ca3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	e006      	b.n	800ca4a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	f003 0301 	and.w	r3, r3, #1
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d0f0      	beq.n	800ca2a <USB_CoreReset+0x36>

  return HAL_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop
 800ca58:	00030d40 	.word	0x00030d40

0800ca5c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ca60:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <FatFsInit>:

/* USER CODE BEGIN Application */
     
SD_error FatFsInit(void) {
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af02      	add	r7, sp, #8
	// Initializing Fat Filesystem
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0) {
 800ca72:	4914      	ldr	r1, [pc, #80]	; (800cac4 <FatFsInit+0x58>)
 800ca74:	4814      	ldr	r0, [pc, #80]	; (800cac8 <FatFsInit+0x5c>)
 800ca76:	f009 fda7 	bl	80165c8 <FATFS_LinkDriver>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d11c      	bne.n	800caba <FatFsInit+0x4e>
		FRESULT res;
		/* Attempt to Mount SD Drive */
		 if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 1) != FR_OK) {
 800ca80:	2201      	movs	r2, #1
 800ca82:	4910      	ldr	r1, [pc, #64]	; (800cac4 <FatFsInit+0x58>)
 800ca84:	4811      	ldr	r0, [pc, #68]	; (800cacc <FatFsInit+0x60>)
 800ca86:	f008 fa73 	bl	8014f70 <f_mount>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00f      	beq.n	800cab0 <FatFsInit+0x44>
			 /* Failed to mount drive */
			 res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 800ca90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	4b0e      	ldr	r3, [pc, #56]	; (800cad0 <FatFsInit+0x64>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	2107      	movs	r1, #7
 800ca9c:	4809      	ldr	r0, [pc, #36]	; (800cac4 <FatFsInit+0x58>)
 800ca9e:	f009 f87f 	bl	8015ba0 <f_mkfs>
 800caa2:	4603      	mov	r3, r0
 800caa4:	71fb      	strb	r3, [r7, #7]
			 if (res != FR_OK) {
 800caa6:	79fb      	ldrb	r3, [r7, #7]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d001      	beq.n	800cab0 <FatFsInit+0x44>
				 /* Error, failed to initialize filesystem */
				 return SD_ERR;
 800caac:	2301      	movs	r3, #1
 800caae:	e005      	b.n	800cabc <FatFsInit+0x50>
			 }
		 }
		 fatFsModInit = true;
 800cab0:	4b08      	ldr	r3, [pc, #32]	; (800cad4 <FatFsInit+0x68>)
 800cab2:	2201      	movs	r2, #1
 800cab4:	701a      	strb	r2, [r3, #0]
	} else {
		// Failed to link SD Driver
		return SD_ERR;
	}
	return SD_OK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	e000      	b.n	800cabc <FatFsInit+0x50>
		return SD_ERR;
 800caba:	2301      	movs	r3, #1
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	20001348 	.word	0x20001348
 800cac8:	0801b6d4 	.word	0x0801b6d4
 800cacc:	2000157c 	.word	0x2000157c
 800cad0:	20001148 	.word	0x20001148
 800cad4:	20000744 	.word	0x20000744

0800cad8 <FatFsDeInit>:

SD_error FatFsDeInit(void) {
 800cad8:	b580      	push	{r7, lr}
 800cada:	af00      	add	r7, sp, #0
	fatFsModInit = false;
 800cadc:	4b04      	ldr	r3, [pc, #16]	; (800caf0 <FatFsDeInit+0x18>)
 800cade:	2200      	movs	r2, #0
 800cae0:	701a      	strb	r2, [r3, #0]
	return FATFS_UnLinkDriver(SDPath);
 800cae2:	4804      	ldr	r0, [pc, #16]	; (800caf4 <FatFsDeInit+0x1c>)
 800cae4:	f009 fdb8 	bl	8016658 <FATFS_UnLinkDriver>
 800cae8:	4603      	mov	r3, r0
}
 800caea:	4618      	mov	r0, r3
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	20000744 	.word	0x20000744
 800caf4:	20001348 	.word	0x20001348

0800caf8 <FatFsIsModuleInit>:

	// Success
	return SD_OK;
}

bool FatFsIsModuleInit(void) {
 800caf8:	b480      	push	{r7}
 800cafa:	af00      	add	r7, sp, #0
	return fatFsModInit;
 800cafc:	4b03      	ldr	r3, [pc, #12]	; (800cb0c <FatFsIsModuleInit+0x14>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	20000744 	.word	0x20000744

0800cb10 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cb16:	2300      	movs	r3, #0
 800cb18:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cb1a:	f000 f89e 	bl	800cc5a <BSP_SD_IsDetected>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d001      	beq.n	800cb28 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cb24:	2301      	movs	r3, #1
 800cb26:	e005      	b.n	800cb34 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cb28:	4804      	ldr	r0, [pc, #16]	; (800cb3c <BSP_SD_Init+0x2c>)
 800cb2a:	f7fc f851 	bl	8008bd0 <HAL_SD_Init>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cb32:	79fb      	ldrb	r3, [r7, #7]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	20001064 	.word	0x20001064

0800cb40 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b088      	sub	sp, #32
 800cb44:	af02      	add	r7, sp, #8
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
 800cb4c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	68ba      	ldr	r2, [r7, #8]
 800cb5a:	68f9      	ldr	r1, [r7, #12]
 800cb5c:	4806      	ldr	r0, [pc, #24]	; (800cb78 <BSP_SD_ReadBlocks+0x38>)
 800cb5e:	f7fc f8c7 	bl	8008cf0 <HAL_SD_ReadBlocks>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d001      	beq.n	800cb6c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800cb6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3718      	adds	r7, #24
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	20001064 	.word	0x20001064

0800cb7c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b088      	sub	sp, #32
 800cb80:	af02      	add	r7, sp, #8
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	607a      	str	r2, [r7, #4]
 800cb88:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	68f9      	ldr	r1, [r7, #12]
 800cb98:	4806      	ldr	r0, [pc, #24]	; (800cbb4 <BSP_SD_WriteBlocks+0x38>)
 800cb9a:	f7fc faa3 	bl	80090e4 <HAL_SD_WriteBlocks>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d001      	beq.n	800cba8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cba4:	2301      	movs	r3, #1
 800cba6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800cba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3718      	adds	r7, #24
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	20001064 	.word	0x20001064

0800cbb8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cbbc:	4805      	ldr	r0, [pc, #20]	; (800cbd4 <BSP_SD_GetCardState+0x1c>)
 800cbbe:	f7fc ff93 	bl	8009ae8 <HAL_SD_GetCardState>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b04      	cmp	r3, #4
 800cbc6:	bf14      	ite	ne
 800cbc8:	2301      	movne	r3, #1
 800cbca:	2300      	moveq	r3, #0
 800cbcc:	b2db      	uxtb	r3, r3
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	20001064 	.word	0x20001064

0800cbd8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cbe0:	6879      	ldr	r1, [r7, #4]
 800cbe2:	4803      	ldr	r0, [pc, #12]	; (800cbf0 <BSP_SD_GetCardInfo+0x18>)
 800cbe4:	f7fc ff54 	bl	8009a90 <HAL_SD_GetCardInfo>
}
 800cbe8:	bf00      	nop
 800cbea:	3708      	adds	r7, #8
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	20001064 	.word	0x20001064

0800cbf4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cbfc:	f000 f818 	bl	800cc30 <BSP_SD_AbortCallback>
}
 800cc00:	bf00      	nop
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cc10:	f000 f815 	bl	800cc3e <BSP_SD_WriteCpltCallback>
}
 800cc14:	bf00      	nop
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cc24:	f000 f812 	bl	800cc4c <BSP_SD_ReadCpltCallback>
}
 800cc28:	bf00      	nop
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800cc30:	b480      	push	{r7}
 800cc32:	af00      	add	r7, sp, #0

}
 800cc34:	bf00      	nop
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800cc3e:	b480      	push	{r7}
 800cc40:	af00      	add	r7, sp, #0

}
 800cc42:	bf00      	nop
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	af00      	add	r7, sp, #0

}
 800cc50:	bf00      	nop
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b083      	sub	sp, #12
 800cc5e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cc60:	2301      	movs	r3, #1
 800cc62:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 800cc64:	79fb      	ldrb	r3, [r7, #7]
 800cc66:	b2db      	uxtb	r3, r3
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	370c      	adds	r7, #12
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cc7e:	4b0b      	ldr	r3, [pc, #44]	; (800ccac <SD_CheckStatus+0x38>)
 800cc80:	2201      	movs	r2, #1
 800cc82:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cc84:	f7ff ff98 	bl	800cbb8 <BSP_SD_GetCardState>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d107      	bne.n	800cc9e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cc8e:	4b07      	ldr	r3, [pc, #28]	; (800ccac <SD_CheckStatus+0x38>)
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	f023 0301 	bic.w	r3, r3, #1
 800cc98:	b2da      	uxtb	r2, r3
 800cc9a:	4b04      	ldr	r3, [pc, #16]	; (800ccac <SD_CheckStatus+0x38>)
 800cc9c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cc9e:	4b03      	ldr	r3, [pc, #12]	; (800ccac <SD_CheckStatus+0x38>)
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	b2db      	uxtb	r3, r3
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	20000059 	.word	0x20000059

0800ccb0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800ccba:	4b0b      	ldr	r3, [pc, #44]	; (800cce8 <SD_initialize+0x38>)
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ccc0:	f7ff ff26 	bl	800cb10 <BSP_SD_Init>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d107      	bne.n	800ccda <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ccca:	79fb      	ldrb	r3, [r7, #7]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7ff ffd1 	bl	800cc74 <SD_CheckStatus>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	4b04      	ldr	r3, [pc, #16]	; (800cce8 <SD_initialize+0x38>)
 800ccd8:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800ccda:	4b03      	ldr	r3, [pc, #12]	; (800cce8 <SD_initialize+0x38>)
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	b2db      	uxtb	r3, r3
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20000059 	.word	0x20000059

0800ccec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ccf6:	79fb      	ldrb	r3, [r7, #7]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7ff ffbb 	bl	800cc74 <SD_CheckStatus>
 800ccfe:	4603      	mov	r3, r0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60b9      	str	r1, [r7, #8]
 800cd10:	607a      	str	r2, [r7, #4]
 800cd12:	603b      	str	r3, [r7, #0]
 800cd14:	4603      	mov	r3, r0
 800cd16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd20:	683a      	ldr	r2, [r7, #0]
 800cd22:	6879      	ldr	r1, [r7, #4]
 800cd24:	68b8      	ldr	r0, [r7, #8]
 800cd26:	f7ff ff0b 	bl	800cb40 <BSP_SD_ReadBlocks>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d107      	bne.n	800cd40 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cd30:	bf00      	nop
 800cd32:	f7ff ff41 	bl	800cbb8 <BSP_SD_GetCardState>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1fa      	bne.n	800cd32 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cd40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3718      	adds	r7, #24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b086      	sub	sp, #24
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
 800cd54:	603b      	str	r3, [r7, #0]
 800cd56:	4603      	mov	r3, r0
 800cd58:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd62:	683a      	ldr	r2, [r7, #0]
 800cd64:	6879      	ldr	r1, [r7, #4]
 800cd66:	68b8      	ldr	r0, [r7, #8]
 800cd68:	f7ff ff08 	bl	800cb7c <BSP_SD_WriteBlocks>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d107      	bne.n	800cd82 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cd72:	bf00      	nop
 800cd74:	f7ff ff20 	bl	800cbb8 <BSP_SD_GetCardState>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d1fa      	bne.n	800cd74 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cd82:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3718      	adds	r7, #24
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08c      	sub	sp, #48	; 0x30
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	4603      	mov	r3, r0
 800cd94:	603a      	str	r2, [r7, #0]
 800cd96:	71fb      	strb	r3, [r7, #7]
 800cd98:	460b      	mov	r3, r1
 800cd9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cda2:	4b25      	ldr	r3, [pc, #148]	; (800ce38 <SD_ioctl+0xac>)
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	f003 0301 	and.w	r3, r3, #1
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <SD_ioctl+0x28>
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	e03c      	b.n	800ce2e <SD_ioctl+0xa2>

  switch (cmd)
 800cdb4:	79bb      	ldrb	r3, [r7, #6]
 800cdb6:	2b03      	cmp	r3, #3
 800cdb8:	d834      	bhi.n	800ce24 <SD_ioctl+0x98>
 800cdba:	a201      	add	r2, pc, #4	; (adr r2, 800cdc0 <SD_ioctl+0x34>)
 800cdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc0:	0800cdd1 	.word	0x0800cdd1
 800cdc4:	0800cdd9 	.word	0x0800cdd9
 800cdc8:	0800cdf1 	.word	0x0800cdf1
 800cdcc:	0800ce0b 	.word	0x0800ce0b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cdd6:	e028      	b.n	800ce2a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cdd8:	f107 030c 	add.w	r3, r7, #12
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7ff fefb 	bl	800cbd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cde2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cdee:	e01c      	b.n	800ce2a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cdf0:	f107 030c 	add.w	r3, r7, #12
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7ff feef 	bl	800cbd8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ce02:	2300      	movs	r3, #0
 800ce04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce08:	e00f      	b.n	800ce2a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ce0a:	f107 030c 	add.w	r3, r7, #12
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7ff fee2 	bl	800cbd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ce14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce16:	0a5a      	lsrs	r2, r3, #9
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce22:	e002      	b.n	800ce2a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ce24:	2304      	movs	r3, #4
 800ce26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ce2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3730      	adds	r7, #48	; 0x30
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	20000059 	.word	0x20000059

0800ce3c <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 800ce40:	4b07      	ldr	r3, [pc, #28]	; (800ce60 <rfalAnalogConfigInitialize+0x24>)
 800ce42:	4a08      	ldr	r2, [pc, #32]	; (800ce64 <rfalAnalogConfigInitialize+0x28>)
 800ce44:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 800ce46:	4b06      	ldr	r3, [pc, #24]	; (800ce60 <rfalAnalogConfigInitialize+0x24>)
 800ce48:	f240 22bb 	movw	r2, #699	; 0x2bb
 800ce4c:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800ce4e:	4b04      	ldr	r3, [pc, #16]	; (800ce60 <rfalAnalogConfigInitialize+0x24>)
 800ce50:	2201      	movs	r2, #1
 800ce52:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 800ce54:	bf00      	nop
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	20000748 	.word	0x20000748
 800ce64:	0801b6e8 	.word	0x0801b6e8

0800ce68 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b086      	sub	sp, #24
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	4603      	mov	r3, r0
 800ce70:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 800ce76:	2300      	movs	r3, #0
 800ce78:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 800ce7a:	4b4b      	ldr	r3, [pc, #300]	; (800cfa8 <rfalSetAnalogConfig+0x140>)
 800ce7c:	799b      	ldrb	r3, [r3, #6]
 800ce7e:	f083 0301 	eor.w	r3, r3, #1
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d001      	beq.n	800ce8c <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 800ce88:	2305      	movs	r3, #5
 800ce8a:	e089      	b.n	800cfa0 <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800ce8c:	f107 020e 	add.w	r2, r7, #14
 800ce90:	88fb      	ldrh	r3, [r7, #6]
 800ce92:	4611      	mov	r1, r2
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 f889 	bl	800cfac <rfalAnalogConfigSearch>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800ce9e:	7d3b      	ldrb	r3, [r7, #20]
 800cea0:	2bff      	cmp	r3, #255	; 0xff
 800cea2:	d07b      	beq.n	800cf9c <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800cea4:	4b40      	ldr	r3, [pc, #256]	; (800cfa8 <rfalSetAnalogConfig+0x140>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	461a      	mov	r2, r3
 800ceaa:	89fb      	ldrh	r3, [r7, #14]
 800ceac:	4413      	add	r3, r2
 800ceae:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800ceb0:	7d3b      	ldrb	r3, [r7, #20]
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	89fb      	ldrh	r3, [r7, #14]
 800ceba:	4413      	add	r3, r2
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800cec0:	4b39      	ldr	r3, [pc, #228]	; (800cfa8 <rfalSetAnalogConfig+0x140>)
 800cec2:	889b      	ldrh	r3, [r3, #4]
 800cec4:	3301      	adds	r3, #1
 800cec6:	89fa      	ldrh	r2, [r7, #14]
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d201      	bcs.n	800ced0 <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 800cecc:	2301      	movs	r3, #1
 800cece:	e067      	b.n	800cfa0 <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 800ced0:	2300      	movs	r3, #0
 800ced2:	757b      	strb	r3, [r7, #21]
 800ced4:	e05d      	b.n	800cf92 <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800ced6:	7d7b      	ldrb	r3, [r7, #21]
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	693a      	ldr	r2, [r7, #16]
 800cedc:	4413      	add	r3, r2
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	021b      	lsls	r3, r3, #8
 800cee2:	7d7a      	ldrb	r2, [r7, #21]
 800cee4:	0092      	lsls	r2, r2, #2
 800cee6:	6939      	ldr	r1, [r7, #16]
 800cee8:	440a      	add	r2, r1
 800ceea:	7852      	ldrb	r2, [r2, #1]
 800ceec:	4313      	orrs	r3, r2
 800ceee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d026      	beq.n	800cf44 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800cef6:	7d7b      	ldrb	r3, [r7, #21]
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	693a      	ldr	r2, [r7, #16]
 800cefc:	4413      	add	r3, r2
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	021b      	lsls	r3, r3, #8
 800cf02:	b21a      	sxth	r2, r3
 800cf04:	7d7b      	ldrb	r3, [r7, #21]
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	6939      	ldr	r1, [r7, #16]
 800cf0a:	440b      	add	r3, r1
 800cf0c:	785b      	ldrb	r3, [r3, #1]
 800cf0e:	b21b      	sxth	r3, r3
 800cf10:	4313      	orrs	r3, r2
 800cf12:	b21b      	sxth	r3, r3
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf1a:	b298      	uxth	r0, r3
 800cf1c:	7d7b      	ldrb	r3, [r7, #21]
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	693a      	ldr	r2, [r7, #16]
 800cf22:	4413      	add	r3, r2
 800cf24:	7899      	ldrb	r1, [r3, #2]
 800cf26:	7d7b      	ldrb	r3, [r7, #21]
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	693a      	ldr	r2, [r7, #16]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	78db      	ldrb	r3, [r3, #3]
 800cf30:	461a      	mov	r2, r3
 800cf32:	f002 ffa1 	bl	800fe78 <rfalChipChangeTestRegBits>
 800cf36:	4603      	mov	r3, r0
 800cf38:	82fb      	strh	r3, [r7, #22]
 800cf3a:	8afb      	ldrh	r3, [r7, #22]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d025      	beq.n	800cf8c <rfalSetAnalogConfig+0x124>
 800cf40:	8afb      	ldrh	r3, [r7, #22]
 800cf42:	e02d      	b.n	800cfa0 <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800cf44:	7d7b      	ldrb	r3, [r7, #21]
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	693a      	ldr	r2, [r7, #16]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	021b      	lsls	r3, r3, #8
 800cf50:	b21a      	sxth	r2, r3
 800cf52:	7d7b      	ldrb	r3, [r7, #21]
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	6939      	ldr	r1, [r7, #16]
 800cf58:	440b      	add	r3, r1
 800cf5a:	785b      	ldrb	r3, [r3, #1]
 800cf5c:	b21b      	sxth	r3, r3
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	b21b      	sxth	r3, r3
 800cf62:	b298      	uxth	r0, r3
 800cf64:	7d7b      	ldrb	r3, [r7, #21]
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	693a      	ldr	r2, [r7, #16]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	7899      	ldrb	r1, [r3, #2]
 800cf6e:	7d7b      	ldrb	r3, [r7, #21]
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	693a      	ldr	r2, [r7, #16]
 800cf74:	4413      	add	r3, r2
 800cf76:	78db      	ldrb	r3, [r3, #3]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	f002 ff5b 	bl	800fe34 <rfalChipChangeRegBits>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	82fb      	strh	r3, [r7, #22]
 800cf82:	8afb      	ldrh	r3, [r7, #22]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <rfalSetAnalogConfig+0x124>
 800cf88:	8afb      	ldrh	r3, [r7, #22]
 800cf8a:	e009      	b.n	800cfa0 <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 800cf8c:	7d7b      	ldrb	r3, [r7, #21]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	757b      	strb	r3, [r7, #21]
 800cf92:	7d7a      	ldrb	r2, [r7, #21]
 800cf94:	7d3b      	ldrb	r3, [r7, #20]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d39d      	bcc.n	800ced6 <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800cf9a:	e777      	b.n	800ce8c <rfalSetAnalogConfig+0x24>
            break;
 800cf9c:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800cf9e:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3718      	adds	r7, #24
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	20000748 	.word	0x20000748

0800cfac <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 800cfac:	b480      	push	{r7}
 800cfae:	b087      	sub	sp, #28
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	6039      	str	r1, [r7, #0]
 800cfb6:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800cfb8:	4b31      	ldr	r3, [pc, #196]	; (800d080 <rfalAnalogConfigSearch+0xd4>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	613b      	str	r3, [r7, #16]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 800cfbe:	88fb      	ldrh	r3, [r7, #6]
 800cfc0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800cfc4:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00a      	beq.n	800cfe0 <rfalAnalogConfigSearch+0x34>
 800cfca:	88fb      	ldrh	r3, [r7, #6]
 800cfcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfd8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	e001      	b.n	800cfe4 <rfalAnalogConfigSearch+0x38>
 800cfe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfe4:	88fb      	ldrh	r3, [r7, #6]
 800cfe6:	f003 030f 	and.w	r3, r3, #15
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d001      	beq.n	800cff4 <rfalAnalogConfigSearch+0x48>
 800cff0:	88fb      	ldrh	r3, [r7, #6]
 800cff2:	e000      	b.n	800cff6 <rfalAnalogConfigSearch+0x4a>
 800cff4:	230f      	movs	r3, #15
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800cff6:	4313      	orrs	r3, r2
 800cff8:	82fb      	strh	r3, [r7, #22]
                       );
    
    
    /* When specific ConfigIDs are to be used, override search mask */
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 800cffa:	88fb      	ldrh	r3, [r7, #6]
 800cffc:	f003 030f 	and.w	r3, r3, #15
 800d000:	b29b      	uxth	r3, r3
 800d002:	2b04      	cmp	r3, #4
 800d004:	d102      	bne.n	800d00c <rfalAnalogConfigSearch+0x60>
    {
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
 800d006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d00a:	82fb      	strh	r3, [r7, #22]
    }
    
    
    i = *configOffset;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	881b      	ldrh	r3, [r3, #0]
 800d010:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800d012:	e029      	b.n	800d068 <rfalAnalogConfigSearch+0xbc>
    {
        configTbl = &currentConfigTbl[i];
 800d014:	8abb      	ldrh	r3, [r7, #20]
 800d016:	693a      	ldr	r2, [r7, #16]
 800d018:	4413      	add	r3, r2
 800d01a:	60fb      	str	r3, [r7, #12]
        foundConfigId = GETU16(configTbl);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	021b      	lsls	r3, r3, #8
 800d022:	b21a      	sxth	r2, r3
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	3301      	adds	r3, #1
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	b21b      	sxth	r3, r3
 800d02c:	4313      	orrs	r3, r2
 800d02e:	b21b      	sxth	r3, r3
 800d030:	817b      	strh	r3, [r7, #10]
        if (configId == (foundConfigId & configIdMaskVal))
 800d032:	897a      	ldrh	r2, [r7, #10]
 800d034:	8afb      	ldrh	r3, [r7, #22]
 800d036:	4013      	ands	r3, r2
 800d038:	b29b      	uxth	r3, r3
 800d03a:	88fa      	ldrh	r2, [r7, #6]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d108      	bne.n	800d052 <rfalAnalogConfigSearch+0xa6>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800d040:	8abb      	ldrh	r3, [r7, #20]
 800d042:	3303      	adds	r3, #3
 800d044:	b29a      	uxth	r2, r3
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	3302      	adds	r3, #2
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	e010      	b.n	800d074 <rfalAnalogConfigSearch+0xc8>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	3302      	adds	r3, #2
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	b29b      	uxth	r3, r3
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800d05e:	8abb      	ldrh	r3, [r7, #20]
 800d060:	4413      	add	r3, r2
 800d062:	b29b      	uxth	r3, r3
 800d064:	3303      	adds	r3, #3
 800d066:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800d068:	4b05      	ldr	r3, [pc, #20]	; (800d080 <rfalAnalogConfigSearch+0xd4>)
 800d06a:	889b      	ldrh	r3, [r3, #4]
 800d06c:	8aba      	ldrh	r2, [r7, #20]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d3d0      	bcc.n	800d014 <rfalAnalogConfigSearch+0x68>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 800d072:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 800d074:	4618      	mov	r0, r3
 800d076:	371c      	adds	r7, #28
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr
 800d080:	20000748 	.word	0x20000748

0800d084 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	4603      	mov	r3, r0
 800d08c:	6039      	str	r1, [r7, #0]
 800d08e:	80fb      	strh	r3, [r7, #6]
 800d090:	4613      	mov	r3, r2
 800d092:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 800d094:	88fb      	ldrh	r3, [r7, #6]
 800d096:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 800d098:	2300      	movs	r3, #0
 800d09a:	81bb      	strh	r3, [r7, #12]
 800d09c:	e00d      	b.n	800d0ba <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 800d09e:	89bb      	ldrh	r3, [r7, #12]
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	781a      	ldrb	r2, [r3, #0]
 800d0a6:	89fb      	ldrh	r3, [r7, #14]
 800d0a8:	4611      	mov	r1, r2
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f000 f80e 	bl	800d0cc <rfalCrcUpdateCcitt>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 800d0b4:	89bb      	ldrh	r3, [r7, #12]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	81bb      	strh	r3, [r7, #12]
 800d0ba:	89ba      	ldrh	r2, [r7, #12]
 800d0bc:	88bb      	ldrh	r3, [r7, #4]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d3ed      	bcc.n	800d09e <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 800d0c2:	89fb      	ldrh	r3, [r7, #14]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	460a      	mov	r2, r1
 800d0d6:	80fb      	strh	r3, [r7, #6]
 800d0d8:	4613      	mov	r3, r2
 800d0da:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 800d0dc:	88fb      	ldrh	r3, [r7, #6]
 800d0de:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 800d0e0:	797b      	ldrb	r3, [r7, #5]
 800d0e2:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800d0e4:	89fb      	ldrh	r3, [r7, #14]
 800d0e6:	b2da      	uxtb	r2, r3
 800d0e8:	7b7b      	ldrb	r3, [r7, #13]
 800d0ea:	4053      	eors	r3, r2
 800d0ec:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 800d0ee:	7b7b      	ldrb	r3, [r7, #13]
 800d0f0:	011b      	lsls	r3, r3, #4
 800d0f2:	b25a      	sxtb	r2, r3
 800d0f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d0f8:	4053      	eors	r3, r2
 800d0fa:	b25b      	sxtb	r3, r3
 800d0fc:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800d0fe:	89fb      	ldrh	r3, [r7, #14]
 800d100:	0a1b      	lsrs	r3, r3, #8
 800d102:	b29b      	uxth	r3, r3
 800d104:	b21a      	sxth	r2, r3
 800d106:	7b7b      	ldrb	r3, [r7, #13]
 800d108:	021b      	lsls	r3, r3, #8
 800d10a:	b21b      	sxth	r3, r3
 800d10c:	4053      	eors	r3, r2
 800d10e:	b21a      	sxth	r2, r3
 800d110:	7b7b      	ldrb	r3, [r7, #13]
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	b21b      	sxth	r3, r3
 800d116:	4053      	eors	r3, r2
 800d118:	b21a      	sxth	r2, r3
 800d11a:	7b7b      	ldrb	r3, [r7, #13]
 800d11c:	091b      	lsrs	r3, r3, #4
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	b21b      	sxth	r3, r3
 800d122:	4053      	eors	r3, r2
 800d124:	b21b      	sxth	r3, r3
 800d126:	81fb      	strh	r3, [r7, #14]

    return crc;
 800d128:	89fb      	ldrh	r3, [r7, #14]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3714      	adds	r7, #20
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr
	...

0800d138 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800d142:	2208      	movs	r2, #8
 800d144:	6879      	ldr	r1, [r7, #4]
 800d146:	480d      	ldr	r0, [pc, #52]	; (800d17c <iso15693PhyConfigure+0x44>)
 800d148:	f00a f8db 	bl	8017302 <memcpy>
    
    if ( config->speedMode <= 3U)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	2b03      	cmp	r3, #3
 800d152:	d808      	bhi.n	800d166 <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	f1c3 0303 	rsb	r3, r3, #3
 800d15e:	b2da      	uxtb	r2, r3
 800d160:	4b07      	ldr	r3, [pc, #28]	; (800d180 <iso15693PhyConfigure+0x48>)
 800d162:	70da      	strb	r2, [r3, #3]
 800d164:	e002      	b.n	800d16c <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 800d166:	4b06      	ldr	r3, [pc, #24]	; (800d180 <iso15693PhyConfigure+0x48>)
 800d168:	2203      	movs	r2, #3
 800d16a:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	4a04      	ldr	r2, [pc, #16]	; (800d180 <iso15693PhyConfigure+0x48>)
 800d170:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	20000750 	.word	0x20000750
 800d180:	2000005c 	.word	0x2000005c

0800d184 <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 800d184:	b590      	push	{r4, r7, lr}
 800d186:	b08b      	sub	sp, #44	; 0x2c
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	4608      	mov	r0, r1
 800d18e:	4611      	mov	r1, r2
 800d190:	461a      	mov	r2, r3
 800d192:	4603      	mov	r3, r0
 800d194:	807b      	strh	r3, [r7, #2]
 800d196:	460b      	mov	r3, r1
 800d198:	707b      	strb	r3, [r7, #1]
 800d19a:	4613      	mov	r3, r2
 800d19c:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 800d1a6:	787b      	ldrb	r3, [r7, #1]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <iso15693VCDCode+0x2c>
 800d1ac:	2302      	movs	r3, #2
 800d1ae:	e000      	b.n	800d1b2 <iso15693VCDCode+0x2e>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 800d1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 800d1ba:	4b94      	ldr	r3, [pc, #592]	; (800d40c <iso15693VCDCode+0x288>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d117      	bne.n	800d1f2 <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 800d1c2:	2321      	movs	r3, #33	; 0x21
 800d1c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 800d1c8:	2304      	movs	r3, #4
 800d1ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 800d1ce:	4b90      	ldr	r3, [pc, #576]	; (800d410 <iso15693VCDCode+0x28c>)
 800d1d0:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 800d1d2:	887a      	ldrh	r2, [r7, #2]
 800d1d4:	7d7b      	ldrb	r3, [r7, #21]
 800d1d6:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	3302      	adds	r3, #2
 800d1e0:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800d1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e4:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800d1e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d1ea:	2b04      	cmp	r3, #4
 800d1ec:	d823      	bhi.n	800d236 <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e13a      	b.n	800d468 <iso15693VCDCode+0x2e4>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 800d1f2:	2381      	movs	r3, #129	; 0x81
 800d1f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 800d1f8:	2304      	movs	r3, #4
 800d1fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 800d1fe:	4b85      	ldr	r3, [pc, #532]	; (800d414 <iso15693VCDCode+0x290>)
 800d200:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 800d202:	887a      	ldrh	r2, [r7, #2]
 800d204:	7d7b      	ldrb	r3, [r7, #21]
 800d206:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800d208:	b29b      	uxth	r3, r3
 800d20a:	019b      	lsls	r3, r3, #6
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	3302      	adds	r3, #2
 800d210:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800d212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d214:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 800d216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d218:	881b      	ldrh	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d005      	beq.n	800d22a <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800d21e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d222:	2b3f      	cmp	r3, #63	; 0x3f
 800d224:	d807      	bhi.n	800d236 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800d226:	2301      	movs	r3, #1
 800d228:	e11e      	b.n	800d468 <iso15693VCDCode+0x2e4>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800d22a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d22e:	2b40      	cmp	r3, #64	; 0x40
 800d230:	d801      	bhi.n	800d236 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800d232:	2301      	movs	r3, #1
 800d234:	e118      	b.n	800d468 <iso15693VCDCode+0x2e4>
            }
        }
    }

    if (length == 0U)
 800d236:	887b      	ldrh	r3, [r7, #2]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d102      	bne.n	800d242 <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 800d23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d23e:	2201      	movs	r2, #1
 800d240:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800d242:	887b      	ldrh	r3, [r7, #2]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d01b      	beq.n	800d280 <iso15693VCDCode+0xfc>
 800d248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d24a:	881b      	ldrh	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d117      	bne.n	800d280 <iso15693VCDCode+0xfc>
 800d250:	783b      	ldrb	r3, [r7, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d014      	beq.n	800d280 <iso15693VCDCode+0xfc>
 800d256:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d25a:	f083 0301 	eor.w	r3, r3, #1
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	2b00      	cmp	r3, #0
 800d262:	d00d      	beq.n	800d280 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	f043 0302 	orr.w	r3, r3, #2
 800d26c:	b2da      	uxtb	r2, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	f023 0301 	bic.w	r3, r3, #1
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 800d280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d282:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 800d284:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d288:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 800d28a:	887b      	ldrh	r3, [r7, #2]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d03b      	beq.n	800d308 <iso15693VCDCode+0x184>
 800d290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d292:	881b      	ldrh	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d137      	bne.n	800d308 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d29e:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800d2a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2a2:	881b      	ldrh	r3, [r3, #0]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2aa:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800d2ac:	8afb      	ldrh	r3, [r7, #22]
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 800d2b8:	e026      	b.n	800d308 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800d2ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2bc:	881b      	ldrh	r3, [r3, #0]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	7818      	ldrb	r0, [r3, #0]
 800d2c6:	f107 030e 	add.w	r3, r7, #14
 800d2ca:	8afa      	ldrh	r2, [r7, #22]
 800d2cc:	69fc      	ldr	r4, [r7, #28]
 800d2ce:	69b9      	ldr	r1, [r7, #24]
 800d2d0:	47a0      	blx	r4
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800d2d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2d8:	881a      	ldrh	r2, [r3, #0]
 800d2da:	89fb      	ldrh	r3, [r7, #14]
 800d2dc:	4413      	add	r3, r2
 800d2de:	b29a      	uxth	r2, r3
 800d2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2e2:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800d2e4:	89fb      	ldrh	r3, [r7, #14]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800d2ee:	89fb      	ldrh	r3, [r7, #14]
 800d2f0:	8afa      	ldrh	r2, [r7, #22]
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800d2f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d105      	bne.n	800d308 <iso15693VCDCode+0x184>
            (*offset)++;
 800d2fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2fe:	881b      	ldrh	r3, [r3, #0]
 800d300:	3301      	adds	r3, #1
 800d302:	b29a      	uxth	r2, r3
 800d304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d306:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 800d308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d30a:	881b      	ldrh	r3, [r3, #0]
 800d30c:	887a      	ldrh	r2, [r7, #2]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d902      	bls.n	800d318 <iso15693VCDCode+0x194>
 800d312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d314:	2b00      	cmp	r3, #0
 800d316:	d0d0      	beq.n	800d2ba <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 800d318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d063      	beq.n	800d3e6 <iso15693VCDCode+0x262>
        return ERR_AGAIN;
 800d31e:	230d      	movs	r3, #13
 800d320:	e0a2      	b.n	800d468 <iso15693VCDCode+0x2e4>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800d322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d324:	2b00      	cmp	r3, #0
 800d326:	d12b      	bne.n	800d380 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800d328:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d002      	beq.n	800d336 <iso15693VCDCode+0x1b2>
 800d330:	f24e 0012 	movw	r0, #57362	; 0xe012
 800d334:	e001      	b.n	800d33a <iso15693VCDCode+0x1b6>
 800d336:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d33a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d002      	beq.n	800d348 <iso15693VCDCode+0x1c4>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	3301      	adds	r3, #1
 800d346:	e000      	b.n	800d34a <iso15693VCDCode+0x1c6>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d34e:	2a00      	cmp	r2, #0
 800d350:	d003      	beq.n	800d35a <iso15693VCDCode+0x1d6>
 800d352:	887a      	ldrh	r2, [r7, #2]
 800d354:	3a01      	subs	r2, #1
 800d356:	b292      	uxth	r2, r2
 800d358:	e000      	b.n	800d35c <iso15693VCDCode+0x1d8>
 800d35a:	887a      	ldrh	r2, [r7, #2]
 800d35c:	4619      	mov	r1, r3
 800d35e:	f7ff fe91 	bl	800d084 <rfalCrcCalculateCcitt>
 800d362:	4603      	mov	r3, r0
 800d364:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800d366:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d36a:	f083 0301 	eor.w	r3, r3, #1
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	d003      	beq.n	800d37c <iso15693VCDCode+0x1f8>
 800d374:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d376:	43db      	mvns	r3, r3
 800d378:	b29b      	uxth	r3, r3
 800d37a:	e000      	b.n	800d37e <iso15693VCDCode+0x1fa>
 800d37c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d37e:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800d380:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d382:	b2db      	uxtb	r3, r3
 800d384:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 800d386:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d388:	0a1b      	lsrs	r3, r3, #8
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800d390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d392:	881b      	ldrh	r3, [r3, #0]
 800d394:	461a      	mov	r2, r3
 800d396:	887b      	ldrh	r3, [r7, #2]
 800d398:	1ad3      	subs	r3, r2, r3
 800d39a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d39e:	4413      	add	r3, r2
 800d3a0:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 800d3a4:	f107 030c 	add.w	r3, r7, #12
 800d3a8:	8afa      	ldrh	r2, [r7, #22]
 800d3aa:	69fc      	ldr	r4, [r7, #28]
 800d3ac:	69b9      	ldr	r1, [r7, #24]
 800d3ae:	47a0      	blx	r4
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800d3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3b6:	881a      	ldrh	r2, [r3, #0]
 800d3b8:	89bb      	ldrh	r3, [r7, #12]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3c0:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800d3c2:	89bb      	ldrh	r3, [r7, #12]
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800d3cc:	89bb      	ldrh	r3, [r7, #12]
 800d3ce:	8afa      	ldrh	r2, [r7, #22]
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800d3d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d105      	bne.n	800d3e6 <iso15693VCDCode+0x262>
            (*offset)++;
 800d3da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3dc:	881b      	ldrh	r3, [r3, #0]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3e4:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800d3e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d109      	bne.n	800d400 <iso15693VCDCode+0x27c>
 800d3ec:	787b      	ldrb	r3, [r7, #1]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d006      	beq.n	800d400 <iso15693VCDCode+0x27c>
 800d3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3f4:	881b      	ldrh	r3, [r3, #0]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	887b      	ldrh	r3, [r7, #2]
 800d3fa:	3302      	adds	r3, #2
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d390      	bcc.n	800d322 <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 800d400:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d402:	2b00      	cmp	r3, #0
 800d404:	d008      	beq.n	800d418 <iso15693VCDCode+0x294>
        return ERR_AGAIN;
 800d406:	230d      	movs	r3, #13
 800d408:	e02e      	b.n	800d468 <iso15693VCDCode+0x2e4>
 800d40a:	bf00      	nop
 800d40c:	20000750 	.word	0x20000750
 800d410:	0800d6ad 	.word	0x0800d6ad
 800d414:	0800d755 	.word	0x0800d755
    }

    if ((!sendCrc && (*offset == length))
 800d418:	787b      	ldrb	r3, [r7, #1]
 800d41a:	f083 0301 	eor.w	r3, r3, #1
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	2b00      	cmp	r3, #0
 800d422:	d004      	beq.n	800d42e <iso15693VCDCode+0x2aa>
 800d424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d426:	881b      	ldrh	r3, [r3, #0]
 800d428:	887a      	ldrh	r2, [r7, #2]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d009      	beq.n	800d442 <iso15693VCDCode+0x2be>
            || (sendCrc && (*offset == (length + 2U))))
 800d42e:	787b      	ldrb	r3, [r7, #1]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d018      	beq.n	800d466 <iso15693VCDCode+0x2e2>
 800d434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d436:	881b      	ldrh	r3, [r3, #0]
 800d438:	461a      	mov	r2, r3
 800d43a:	887b      	ldrh	r3, [r7, #2]
 800d43c:	3302      	adds	r3, #2
 800d43e:	429a      	cmp	r2, r3
 800d440:	d111      	bne.n	800d466 <iso15693VCDCode+0x2e2>
    {
        *outputBuf = eof; 
 800d442:	69bb      	ldr	r3, [r7, #24]
 800d444:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800d448:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800d44a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	3301      	adds	r3, #1
 800d450:	b29a      	uxth	r2, r3
 800d452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d454:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800d456:	8afb      	ldrh	r3, [r7, #22]
 800d458:	3b01      	subs	r3, #1
 800d45a:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	3301      	adds	r3, #1
 800d460:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 800d462:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d464:	e000      	b.n	800d468 <iso15693VCDCode+0x2e4>
        return ERR_AGAIN;
 800d466:	230d      	movs	r3, #13
}
 800d468:	4618      	mov	r0, r3
 800d46a:	372c      	adds	r7, #44	; 0x2c
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd90      	pop	{r4, r7, pc}

0800d470 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	607a      	str	r2, [r7, #4]
 800d47a:	461a      	mov	r2, r3
 800d47c:	460b      	mov	r3, r1
 800d47e:	817b      	strh	r3, [r7, #10]
 800d480:	4613      	mov	r3, r2
 800d482:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 800d484:	2300      	movs	r3, #0
 800d486:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	2200      	movs	r2, #0
 800d48c:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 800d48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d490:	2200      	movs	r2, #0
 800d492:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	f003 031f 	and.w	r3, r3, #31
 800d49c:	2b17      	cmp	r3, #23
 800d49e:	d001      	beq.n	800d4a4 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 800d4a0:	2309      	movs	r3, #9
 800d4a2:	e0ff      	b.n	800d6a4 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 800d4a4:	893b      	ldrh	r3, [r7, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d101      	bne.n	800d4ae <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	e0fa      	b.n	800d6a4 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800d4ae:	2305      	movs	r3, #5
 800d4b0:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 800d4b6:	893b      	ldrh	r3, [r7, #8]
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f009 ff2b 	bl	8017318 <memset>

    if (inBufLen == 0U)
 800d4c2:	897b      	ldrh	r3, [r7, #10]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f040 808e 	bne.w	800d5e6 <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 800d4ca:	2315      	movs	r3, #21
 800d4cc:	e0ea      	b.n	800d6a4 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800d4d2:	8bbb      	ldrh	r3, [r7, #28]
 800d4d4:	08db      	lsrs	r3, r3, #3
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	461a      	mov	r2, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	4413      	add	r3, r2
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	8bbb      	ldrh	r3, [r7, #28]
 800d4e4:	f003 0307 	and.w	r3, r3, #7
 800d4e8:	fa42 f303 	asr.w	r3, r2, r3
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	f003 0301 	and.w	r3, r3, #1
 800d4f2:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800d4f4:	8bbb      	ldrh	r3, [r7, #28]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	08db      	lsrs	r3, r3, #3
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	461a      	mov	r2, r3
 800d502:	8bbb      	ldrh	r3, [r7, #28]
 800d504:	3301      	adds	r3, #1
 800d506:	f003 0307 	and.w	r3, r3, #7
 800d50a:	fa42 f303 	asr.w	r3, r2, r3
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	005b      	lsls	r3, r3, #1
 800d512:	b2db      	uxtb	r3, r3
 800d514:	f003 0302 	and.w	r3, r3, #2
 800d518:	b2da      	uxtb	r2, r3
 800d51a:	7e3b      	ldrb	r3, [r7, #24]
 800d51c:	4313      	orrs	r3, r2
 800d51e:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 800d520:	7e3b      	ldrb	r3, [r7, #24]
 800d522:	2b01      	cmp	r3, #1
 800d524:	d102      	bne.n	800d52c <iso15693VICCDecode+0xbc>
        {
            bp++;
 800d526:	8b7b      	ldrh	r3, [r7, #26]
 800d528:	3301      	adds	r3, #1
 800d52a:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 800d52c:	7e3b      	ldrb	r3, [r7, #24]
 800d52e:	2b02      	cmp	r3, #2
 800d530:	d119      	bne.n	800d566 <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800d532:	8b7b      	ldrh	r3, [r7, #26]
 800d534:	08db      	lsrs	r3, r3, #3
 800d536:	b29b      	uxth	r3, r3
 800d538:	461a      	mov	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4413      	add	r3, r2
 800d53e:	7819      	ldrb	r1, [r3, #0]
 800d540:	8b7b      	ldrh	r3, [r7, #26]
 800d542:	f003 0307 	and.w	r3, r3, #7
 800d546:	2201      	movs	r2, #1
 800d548:	fa02 f303 	lsl.w	r3, r2, r3
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	8b7b      	ldrh	r3, [r7, #26]
 800d550:	08db      	lsrs	r3, r3, #3
 800d552:	b29b      	uxth	r3, r3
 800d554:	4618      	mov	r0, r3
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4403      	add	r3, r0
 800d55a:	430a      	orrs	r2, r1
 800d55c:	b2d2      	uxtb	r2, r2
 800d55e:	701a      	strb	r2, [r3, #0]
            bp++;
 800d560:	8b7b      	ldrh	r3, [r7, #26]
 800d562:	3301      	adds	r3, #1
 800d564:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800d566:	8b7b      	ldrh	r3, [r7, #26]
 800d568:	f003 0307 	and.w	r3, r3, #7
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d115      	bne.n	800d59e <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 800d572:	8bbb      	ldrh	r3, [r7, #28]
 800d574:	08db      	lsrs	r3, r3, #3
 800d576:	b29b      	uxth	r3, r3
 800d578:	461a      	mov	r2, r3
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	4413      	add	r3, r2
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d584:	2ba0      	cmp	r3, #160	; 0xa0
 800d586:	d10a      	bne.n	800d59e <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800d588:	8bbb      	ldrh	r3, [r7, #28]
 800d58a:	08db      	lsrs	r3, r3, #3
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	3301      	adds	r3, #1
 800d590:	68fa      	ldr	r2, [r7, #12]
 800d592:	4413      	add	r3, r2
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	2b03      	cmp	r3, #3
 800d598:	d101      	bne.n	800d59e <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 800d59a:	2301      	movs	r3, #1
 800d59c:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 800d59e:	7e3b      	ldrb	r3, [r7, #24]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d002      	beq.n	800d5aa <iso15693VICCDecode+0x13a>
 800d5a4:	7e3b      	ldrb	r3, [r7, #24]
 800d5a6:	2b03      	cmp	r3, #3
 800d5a8:	d10f      	bne.n	800d5ca <iso15693VICCDecode+0x15a>
 800d5aa:	7e7b      	ldrb	r3, [r7, #25]
 800d5ac:	f083 0301 	eor.w	r3, r3, #1
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d009      	beq.n	800d5ca <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 800d5b6:	8b7a      	ldrh	r2, [r7, #26]
 800d5b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d302      	bcc.n	800d5c4 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 800d5be:	231d      	movs	r3, #29
 800d5c0:	83fb      	strh	r3, [r7, #30]
 800d5c2:	e002      	b.n	800d5ca <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 800d5c4:	8b7b      	ldrh	r3, [r7, #26]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800d5ca:	8b7a      	ldrh	r2, [r7, #26]
 800d5cc:	893b      	ldrh	r3, [r7, #8]
 800d5ce:	00db      	lsls	r3, r3, #3
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d20f      	bcs.n	800d5f4 <iso15693VICCDecode+0x184>
 800d5d4:	8bfb      	ldrh	r3, [r7, #30]
 800d5d6:	2b1d      	cmp	r3, #29
 800d5d8:	d00c      	beq.n	800d5f4 <iso15693VICCDecode+0x184>
 800d5da:	7e7b      	ldrb	r3, [r7, #25]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d109      	bne.n	800d5f4 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800d5e0:	8bbb      	ldrh	r3, [r7, #28]
 800d5e2:	3302      	adds	r3, #2
 800d5e4:	83bb      	strh	r3, [r7, #28]
 800d5e6:	8bba      	ldrh	r2, [r7, #28]
 800d5e8:	897b      	ldrh	r3, [r7, #10]
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	3b02      	subs	r3, #2
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	f4ff af6d 	bcc.w	800d4ce <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 800d5f4:	8b7b      	ldrh	r3, [r7, #26]
 800d5f6:	08db      	lsrs	r3, r3, #3
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fc:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 800d5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d600:	8b7a      	ldrh	r2, [r7, #26]
 800d602:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 800d604:	8bfb      	ldrh	r3, [r7, #30]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d001      	beq.n	800d60e <iso15693VICCDecode+0x19e>
    {
        return err;
 800d60a:	8bfb      	ldrh	r3, [r7, #30]
 800d60c:	e04a      	b.n	800d6a4 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 800d60e:	8b7b      	ldrh	r3, [r7, #26]
 800d610:	f003 0307 	and.w	r3, r3, #7
 800d614:	b29b      	uxth	r3, r3
 800d616:	2b00      	cmp	r3, #0
 800d618:	d001      	beq.n	800d61e <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 800d61a:	2315      	movs	r3, #21
 800d61c:	e042      	b.n	800d6a4 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 800d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d620:	881b      	ldrh	r3, [r3, #0]
 800d622:	2b02      	cmp	r3, #2
 800d624:	d93b      	bls.n	800d69e <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800d626:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d002      	beq.n	800d634 <iso15693VICCDecode+0x1c4>
 800d62e:	f24e 0012 	movw	r0, #57362	; 0xe012
 800d632:	e001      	b.n	800d638 <iso15693VICCDecode+0x1c8>
 800d634:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	881b      	ldrh	r3, [r3, #0]
 800d63c:	3b02      	subs	r3, #2
 800d63e:	b29b      	uxth	r3, r3
 800d640:	461a      	mov	r2, r3
 800d642:	6879      	ldr	r1, [r7, #4]
 800d644:	f7ff fd1e 	bl	800d084 <rfalCrcCalculateCcitt>
 800d648:	4603      	mov	r3, r0
 800d64a:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800d64c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d650:	f083 0301 	eor.w	r3, r3, #1
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b00      	cmp	r3, #0
 800d658:	d003      	beq.n	800d662 <iso15693VICCDecode+0x1f2>
 800d65a:	8afb      	ldrh	r3, [r7, #22]
 800d65c:	43db      	mvns	r3, r3
 800d65e:	b29b      	uxth	r3, r3
 800d660:	e000      	b.n	800d664 <iso15693VICCDecode+0x1f4>
 800d662:	8afb      	ldrh	r3, [r7, #22]
 800d664:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800d666:	8afb      	ldrh	r3, [r7, #22]
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d66c:	8812      	ldrh	r2, [r2, #0]
 800d66e:	3a02      	subs	r2, #2
 800d670:	6879      	ldr	r1, [r7, #4]
 800d672:	440a      	add	r2, r1
 800d674:	7812      	ldrb	r2, [r2, #0]
 800d676:	4293      	cmp	r3, r2
 800d678:	d10e      	bne.n	800d698 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 800d67a:	8afb      	ldrh	r3, [r7, #22]
 800d67c:	0a1b      	lsrs	r3, r3, #8
 800d67e:	b29b      	uxth	r3, r3
 800d680:	b2db      	uxtb	r3, r3
 800d682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d684:	8812      	ldrh	r2, [r2, #0]
 800d686:	3a01      	subs	r2, #1
 800d688:	6879      	ldr	r1, [r7, #4]
 800d68a:	440a      	add	r2, r1
 800d68c:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800d68e:	4293      	cmp	r3, r2
 800d690:	d102      	bne.n	800d698 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 800d692:	2300      	movs	r3, #0
 800d694:	83fb      	strh	r3, [r7, #30]
 800d696:	e004      	b.n	800d6a2 <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 800d698:	2315      	movs	r3, #21
 800d69a:	83fb      	strh	r3, [r7, #30]
 800d69c:	e001      	b.n	800d6a2 <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 800d69e:	2315      	movs	r3, #21
 800d6a0:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 800d6a2:	8bfb      	ldrh	r3, [r7, #30]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3720      	adds	r7, #32
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b089      	sub	sp, #36	; 0x24
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60b9      	str	r1, [r7, #8]
 800d6b4:	607b      	str	r3, [r7, #4]
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	73fb      	strb	r3, [r7, #15]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 800d6cc:	89bb      	ldrh	r3, [r7, #12]
 800d6ce:	2b03      	cmp	r3, #3
 800d6d0:	d801      	bhi.n	800d6d6 <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e038      	b.n	800d748 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 800d6d6:	7bfb      	ldrb	r3, [r7, #15]
 800d6d8:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800d6da:	2300      	movs	r3, #0
 800d6dc:	83bb      	strh	r3, [r7, #28]
 800d6de:	e02f      	b.n	800d740 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 800d6e0:	7ffb      	ldrb	r3, [r7, #31]
 800d6e2:	f003 0303 	and.w	r3, r3, #3
 800d6e6:	2b03      	cmp	r3, #3
 800d6e8:	d81a      	bhi.n	800d720 <iso15693PhyVCDCode1Of4+0x74>
 800d6ea:	a201      	add	r2, pc, #4	; (adr r2, 800d6f0 <iso15693PhyVCDCode1Of4+0x44>)
 800d6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f0:	0800d701 	.word	0x0800d701
 800d6f4:	0800d709 	.word	0x0800d709
 800d6f8:	0800d711 	.word	0x0800d711
 800d6fc:	0800d719 	.word	0x0800d719
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	2202      	movs	r2, #2
 800d704:	701a      	strb	r2, [r3, #0]
                break;
 800d706:	e00c      	b.n	800d722 <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	2208      	movs	r2, #8
 800d70c:	701a      	strb	r2, [r3, #0]
                break;
 800d70e:	e008      	b.n	800d722 <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	2220      	movs	r2, #32
 800d714:	701a      	strb	r2, [r3, #0]
                break;
 800d716:	e004      	b.n	800d722 <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	2280      	movs	r2, #128	; 0x80
 800d71c:	701a      	strb	r2, [r3, #0]
                break;
 800d71e:	e000      	b.n	800d722 <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 800d720:	bf00      	nop
        }
        outbuf++;
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	3301      	adds	r3, #1
 800d726:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	881b      	ldrh	r3, [r3, #0]
 800d72c:	3301      	adds	r3, #1
 800d72e:	b29a      	uxth	r2, r3
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 800d734:	7ffb      	ldrb	r3, [r7, #31]
 800d736:	089b      	lsrs	r3, r3, #2
 800d738:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800d73a:	8bbb      	ldrh	r3, [r7, #28]
 800d73c:	3301      	adds	r3, #1
 800d73e:	83bb      	strh	r3, [r7, #28]
 800d740:	8bbb      	ldrh	r3, [r7, #28]
 800d742:	2b03      	cmp	r3, #3
 800d744:	d9cc      	bls.n	800d6e0 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 800d746:	8afb      	ldrh	r3, [r7, #22]
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3724      	adds	r7, #36	; 0x24
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d754:	b480      	push	{r7}
 800d756:	b089      	sub	sp, #36	; 0x24
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60b9      	str	r1, [r7, #8]
 800d75c:	607b      	str	r3, [r7, #4]
 800d75e:	4603      	mov	r3, r0
 800d760:	73fb      	strb	r3, [r7, #15]
 800d762:	4613      	mov	r3, r2
 800d764:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d766:	2300      	movs	r3, #0
 800d768:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 800d774:	89bb      	ldrh	r3, [r7, #12]
 800d776:	2b3f      	cmp	r3, #63	; 0x3f
 800d778:	d801      	bhi.n	800d77e <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 800d77a:	2301      	movs	r3, #1
 800d77c:	e039      	b.n	800d7f2 <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 800d77e:	7bfb      	ldrb	r3, [r7, #15]
 800d780:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d782:	2300      	movs	r3, #0
 800d784:	83bb      	strh	r3, [r7, #28]
 800d786:	e030      	b.n	800d7ea <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 800d788:	7ffb      	ldrb	r3, [r7, #31]
 800d78a:	2b03      	cmp	r3, #3
 800d78c:	d81a      	bhi.n	800d7c4 <iso15693PhyVCDCode1Of256+0x70>
 800d78e:	a201      	add	r2, pc, #4	; (adr r2, 800d794 <iso15693PhyVCDCode1Of256+0x40>)
 800d790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d794:	0800d7a5 	.word	0x0800d7a5
 800d798:	0800d7ad 	.word	0x0800d7ad
 800d79c:	0800d7b5 	.word	0x0800d7b5
 800d7a0:	0800d7bd 	.word	0x0800d7bd
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	2202      	movs	r2, #2
 800d7a8:	701a      	strb	r2, [r3, #0]
                break;
 800d7aa:	e00f      	b.n	800d7cc <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	2208      	movs	r2, #8
 800d7b0:	701a      	strb	r2, [r3, #0]
                break;
 800d7b2:	e00b      	b.n	800d7cc <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	2220      	movs	r2, #32
 800d7b8:	701a      	strb	r2, [r3, #0]
                break;
 800d7ba:	e007      	b.n	800d7cc <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	2280      	movs	r2, #128	; 0x80
 800d7c0:	701a      	strb	r2, [r3, #0]
                break;
 800d7c2:	e003      	b.n	800d7cc <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	701a      	strb	r2, [r3, #0]
                break;               
 800d7ca:	bf00      	nop
        }
        outbuf++;
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	881b      	ldrh	r3, [r3, #0]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 800d7de:	7ffb      	ldrb	r3, [r7, #31]
 800d7e0:	3b04      	subs	r3, #4
 800d7e2:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d7e4:	8bbb      	ldrh	r3, [r7, #28]
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	83bb      	strh	r3, [r7, #28]
 800d7ea:	8bbb      	ldrh	r3, [r7, #28]
 800d7ec:	2b3f      	cmp	r3, #63	; 0x3f
 800d7ee:	d9cb      	bls.n	800d788 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 800d7f0:	8afb      	ldrh	r3, [r7, #22]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3724      	adds	r7, #36	; 0x24
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr
 800d7fe:	bf00      	nop

0800d800 <rfalInitialize>:
*/


/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    EXIT_ON_ERR( err, st25r3916Initialize() );
 800d806:	f002 fbd9 	bl	800ffbc <st25r3916Initialize>
 800d80a:	4603      	mov	r3, r0
 800d80c:	80fb      	strh	r3, [r7, #6]
 800d80e:	88fb      	ldrh	r3, [r7, #6]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d001      	beq.n	800d818 <rfalInitialize+0x18>
 800d814:	88fb      	ldrh	r3, [r7, #6]
 800d816:	e047      	b.n	800d8a8 <rfalInitialize+0xa8>
    
    st25r3916ClearInterrupts();
 800d818:	f003 fe76 	bl	8011508 <st25r3916ClearInterrupts>
    
    /* Disable any previous observation mode */
    rfalST25R3916ObsModeDisable();
 800d81c:	2140      	movs	r1, #64	; 0x40
 800d81e:	2001      	movs	r0, #1
 800d820:	f003 fb8b 	bl	8010f3a <st25r3916WriteTestRegister>
    
    /*******************************************************************************/    
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 800d824:	2000      	movs	r0, #0
 800d826:	f7ff fb1f 	bl	800ce68 <rfalSetAnalogConfig>
    

    /*******************************************************************************/
    /* Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 800d82a:	2203      	movs	r2, #3
 800d82c:	2103      	movs	r1, #3
 800d82e:	2002      	movs	r0, #2
 800d830:	f003 fc0c 	bl	801104c <st25r3916ChangeRegisterBits>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800d834:	f001 feb2 	bl	800f59c <rfalFIFOStatusClear>
    
    
    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 800d838:	4b1d      	ldr	r3, [pc, #116]	; (800d8b0 <rfalInitialize+0xb0>)
 800d83a:	2201      	movs	r2, #1
 800d83c:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 800d83e:	4b1c      	ldr	r3, [pc, #112]	; (800d8b0 <rfalInitialize+0xb0>)
 800d840:	2200      	movs	r2, #0
 800d842:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 800d844:	4b1a      	ldr	r3, [pc, #104]	; (800d8b0 <rfalInitialize+0xb0>)
 800d846:	2200      	movs	r2, #0
 800d848:	711a      	strb	r2, [r3, #4]
    
    /* Set RFAL default configs */
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 800d84a:	4b19      	ldr	r3, [pc, #100]	; (800d8b0 <rfalInitialize+0xb0>)
 800d84c:	2200      	movs	r2, #0
 800d84e:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 800d850:	4b17      	ldr	r3, [pc, #92]	; (800d8b0 <rfalInitialize+0xb0>)
 800d852:	2200      	movs	r2, #0
 800d854:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 800d856:	4b16      	ldr	r3, [pc, #88]	; (800d8b0 <rfalInitialize+0xb0>)
 800d858:	2200      	movs	r2, #0
 800d85a:	71da      	strb	r2, [r3, #7]
    
    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 800d85c:	4b14      	ldr	r3, [pc, #80]	; (800d8b0 <rfalInitialize+0xb0>)
 800d85e:	2200      	movs	r2, #0
 800d860:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 800d862:	4b13      	ldr	r3, [pc, #76]	; (800d8b0 <rfalInitialize+0xb0>)
 800d864:	2200      	movs	r2, #0
 800d866:	751a      	strb	r2, [r3, #20]
    
    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 800d868:	4b11      	ldr	r3, [pc, #68]	; (800d8b0 <rfalInitialize+0xb0>)
 800d86a:	2200      	movs	r2, #0
 800d86c:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 800d86e:	4b10      	ldr	r3, [pc, #64]	; (800d8b0 <rfalInitialize+0xb0>)
 800d870:	2200      	movs	r2, #0
 800d872:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 800d874:	4b0e      	ldr	r3, [pc, #56]	; (800d8b0 <rfalInitialize+0xb0>)
 800d876:	2200      	movs	r2, #0
 800d878:	609a      	str	r2, [r3, #8]
    
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 800d87a:	4b0d      	ldr	r3, [pc, #52]	; (800d8b0 <rfalInitialize+0xb0>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	63da      	str	r2, [r3, #60]	; 0x3c
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800d880:	4b0b      	ldr	r3, [pc, #44]	; (800d8b0 <rfalInitialize+0xb0>)
 800d882:	2200      	movs	r2, #0
 800d884:	645a      	str	r2, [r3, #68]	; 0x44
    
    gRFAL.callbacks.preTxRx  = NULL;
 800d886:	4b0a      	ldr	r3, [pc, #40]	; (800d8b0 <rfalInitialize+0xb0>)
 800d888:	2200      	movs	r2, #0
 800d88a:	649a      	str	r2, [r3, #72]	; 0x48
    gRFAL.callbacks.postTxRx = NULL;
 800d88c:	4b08      	ldr	r3, [pc, #32]	; (800d8b0 <rfalInitialize+0xb0>)
 800d88e:	2200      	movs	r2, #0
 800d890:	64da      	str	r2, [r3, #76]	; 0x4c
    
#if RFAL_FEATURE_NFCV    
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 800d892:	4b07      	ldr	r3, [pc, #28]	; (800d8b0 <rfalInitialize+0xb0>)
 800d894:	2200      	movs	r2, #0
 800d896:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
    gRFAL.Lm.iniFlag         = false;
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800d89a:	4b05      	ldr	r3, [pc, #20]	; (800d8b0 <rfalInitialize+0xb0>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    
    /*******************************************************************************/    
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 800d8a2:	f000 f807 	bl	800d8b4 <rfalCalibrate>
    
    return ERR_NONE;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	20000758 	.word	0x20000758

0800d8b4 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d8ba:	4b0b      	ldr	r3, [pc, #44]	; (800d8e8 <rfalCalibrate+0x34>)
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d101      	bne.n	800d8c6 <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 800d8c2:	2321      	movs	r3, #33	; 0x21
 800d8c4:	e00c      	b.n	800d8e0 <rfalCalibrate+0x2c>
    /*******************************************************************************/
    /* Perform ST25R3916 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3916CheckReg( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	2180      	movs	r1, #128	; 0x80
 800d8ca:	202c      	movs	r0, #44	; 0x2c
 800d8cc:	f003 fc42 	bl	8011154 <st25r3916CheckReg>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d003      	beq.n	800d8de <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3916AdjustRegulators( &resValue );
 800d8d6:	1dbb      	adds	r3, r7, #6
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f002 fc13 	bl	8010104 <st25r3916AdjustRegulators>
    }
    
    return ERR_NONE;
 800d8de:	2300      	movs	r3, #0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3708      	adds	r7, #8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	20000758 	.word	0x20000758

0800d8ec <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	71fb      	strb	r3, [r7, #7]
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	71bb      	strb	r3, [r7, #6]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d8fe:	4b99      	ldr	r3, [pc, #612]	; (800db64 <rfalSetMode+0x278>)
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d101      	bne.n	800d90a <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 800d906:	2321      	movs	r3, #33	; 0x21
 800d908:	e127      	b.n	800db5a <rfalSetMode+0x26e>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 800d90a:	79bb      	ldrb	r3, [r7, #6]
 800d90c:	2bff      	cmp	r3, #255	; 0xff
 800d90e:	d002      	beq.n	800d916 <rfalSetMode+0x2a>
 800d910:	797b      	ldrb	r3, [r7, #5]
 800d912:	2bff      	cmp	r3, #255	; 0xff
 800d914:	d101      	bne.n	800d91a <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 800d916:	2307      	movs	r3, #7
 800d918:	e11f      	b.n	800db5a <rfalSetMode+0x26e>
    }
   
    switch( mode )
 800d91a:	79fb      	ldrb	r3, [r7, #7]
 800d91c:	3b01      	subs	r3, #1
 800d91e:	2b0c      	cmp	r3, #12
 800d920:	f200 8107 	bhi.w	800db32 <rfalSetMode+0x246>
 800d924:	a201      	add	r2, pc, #4	; (adr r2, 800d92c <rfalSetMode+0x40>)
 800d926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d92a:	bf00      	nop
 800d92c:	0800d961 	.word	0x0800d961
 800d930:	0800d983 	.word	0x0800d983
 800d934:	0800d9a5 	.word	0x0800d9a5
 800d938:	0800d9db 	.word	0x0800d9db
 800d93c:	0800da11 	.word	0x0800da11
 800d940:	0800da47 	.word	0x0800da47
 800d944:	0800da69 	.word	0x0800da69
 800d948:	0800da69 	.word	0x0800da69
 800d94c:	0800da83 	.word	0x0800da83
 800d950:	0800daeb 	.word	0x0800daeb
 800d954:	0800db2f 	.word	0x0800db2f
 800d958:	0800db0d 	.word	0x0800db0d
 800d95c:	0800dab7 	.word	0x0800dab7
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d960:	2104      	movs	r1, #4
 800d962:	2002      	movs	r0, #2
 800d964:	f003 fb0e 	bl	8010f84 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a );
 800d968:	2108      	movs	r1, #8
 800d96a:	2003      	movs	r0, #3
 800d96c:	f003 fa20 	bl	8010db0 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d970:	f240 1001 	movw	r0, #257	; 0x101
 800d974:	f7ff fa78 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d978:	f44f 7081 	mov.w	r0, #258	; 0x102
 800d97c:	f7ff fa74 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800d980:	e0d9      	b.n	800db36 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d982:	2104      	movs	r1, #4
 800d984:	2002      	movs	r0, #2
 800d986:	f003 fafd 	bl	8010f84 <st25r3916ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 800d98a:	2120      	movs	r1, #32
 800d98c:	2003      	movs	r0, #3
 800d98e:	f003 fa0f 	bl	8010db0 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d992:	f240 1001 	movw	r0, #257	; 0x101
 800d996:	f7ff fa67 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d99a:	f44f 7081 	mov.w	r0, #258	; 0x102
 800d99e:	f7ff fa63 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800d9a2:	e0c8      	b.n	800db36 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d9a4:	2104      	movs	r1, #4
 800d9a6:	2002      	movs	r0, #2
 800d9a8:	f003 faec 	bl	8010f84 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d9ac:	2110      	movs	r1, #16
 800d9ae:	2003      	movs	r0, #3
 800d9b0:	f003 f9fe 	bl	8010db0 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	21fc      	movs	r1, #252	; 0xfc
 800d9b8:	2006      	movs	r0, #6
 800d9ba:	f003 fb47 	bl	801104c <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d9be:	2200      	movs	r2, #0
 800d9c0:	21f0      	movs	r1, #240	; 0xf0
 800d9c2:	2007      	movs	r0, #7
 800d9c4:	f003 fb42 	bl	801104c <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d9c8:	f240 2001 	movw	r0, #513	; 0x201
 800d9cc:	f7ff fa4c 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d9d0:	f240 2002 	movw	r0, #514	; 0x202
 800d9d4:	f7ff fa48 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800d9d8:	e0ad      	b.n	800db36 <rfalSetMode+0x24a>
            
        /*******************************************************************************/    
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800d9da:	2104      	movs	r1, #4
 800d9dc:	2002      	movs	r0, #2
 800d9de:	f003 fad1 	bl	8010f84 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800d9e2:	2110      	movs	r1, #16
 800d9e4:	2003      	movs	r0, #3
 800d9e6:	f003 f9e3 	bl	8010db0 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	21fc      	movs	r1, #252	; 0xfc
 800d9ee:	2006      	movs	r0, #6
 800d9f0:	f003 fb2c 	bl	801104c <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800d9f4:	2220      	movs	r2, #32
 800d9f6:	21f0      	movs	r1, #240	; 0xf0
 800d9f8:	2007      	movs	r0, #7
 800d9fa:	f003 fb27 	bl	801104c <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof  ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d9fe:	f240 2001 	movw	r0, #513	; 0x201
 800da02:	f7ff fa31 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800da06:	f240 2002 	movw	r0, #514	; 0x202
 800da0a:	f7ff fa2d 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800da0e:	e092      	b.n	800db36 <rfalSetMode+0x24a>
            
            /*******************************************************************************/    
            case RFAL_MODE_POLL_B_CTS:
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800da10:	2104      	movs	r1, #4
 800da12:	2002      	movs	r0, #2
 800da14:	f003 fab6 	bl	8010f84 <st25r3916ClrRegisterBits>
                
                /* Enable ISO14443B mode */
                st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800da18:	2110      	movs	r1, #16
 800da1a:	2003      	movs	r0, #3
 800da1c:	f003 f9c8 	bl	8010db0 <st25r3916WriteRegister>
                
                /* Set the EGT, SOF, EOF and EOF */
                st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800da20:	2200      	movs	r2, #0
 800da22:	21fc      	movs	r1, #252	; 0xfc
 800da24:	2006      	movs	r0, #6
 800da26:	f003 fb11 	bl	801104c <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                          ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                            
                /* Set the minimum TR1, clear SOF, EOF and EOF12 */
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800da2a:	2230      	movs	r2, #48	; 0x30
 800da2c:	21f0      	movs	r1, #240	; 0xf0
 800da2e:	2007      	movs	r0, #7
 800da30:	f003 fb0c 	bl	801104c <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                          (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof ) );


                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800da34:	f240 2001 	movw	r0, #513	; 0x201
 800da38:	f7ff fa16 	bl	800ce68 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800da3c:	f240 2002 	movw	r0, #514	; 0x202
 800da40:	f7ff fa12 	bl	800ce68 <rfalSetAnalogConfig>
                break;
 800da44:	e077      	b.n	800db36 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800da46:	2104      	movs	r1, #4
 800da48:	2002      	movs	r0, #2
 800da4a:	f003 fa9b 	bl	8010f84 <st25r3916ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_felica );
 800da4e:	2118      	movs	r1, #24
 800da50:	2003      	movs	r0, #3
 800da52:	f003 f9ad 	bl	8010db0 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800da56:	f240 4001 	movw	r0, #1025	; 0x401
 800da5a:	f7ff fa05 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800da5e:	f240 4002 	movw	r0, #1026	; 0x402
 800da62:	f7ff fa01 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800da66:	e066      	b.n	800db36 <rfalSetMode+0x24a>
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800da68:	2104      	movs	r1, #4
 800da6a:	2002      	movs	r0, #2
 800da6c:	f003 fa8a 	bl	8010f84 <st25r3916ClrRegisterBits>
                
                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800da70:	f241 0001 	movw	r0, #4097	; 0x1001
 800da74:	f7ff f9f8 	bl	800ce68 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800da78:	f241 0002 	movw	r0, #4098	; 0x1002
 800da7c:	f7ff f9f4 	bl	800ce68 <rfalSetAnalogConfig>
                break;
 800da80:	e059      	b.n	800db36 <rfalSetMode+0x24a>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication Initiator mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_eof) );
 800da82:	2102      	movs	r1, #2
 800da84:	2003      	movs	r0, #3
 800da86:	f003 f993 	bl	8010db0 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */ 
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800da8a:	2200      	movs	r2, #0
 800da8c:	2104      	movs	r1, #4
 800da8e:	2012      	movs	r0, #18
 800da90:	f003 fadc 	bl	801104c <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800da94:	2160      	movs	r1, #96	; 0x60
 800da96:	2040      	movs	r0, #64	; 0x40
 800da98:	f002 fd05 	bl	80104a6 <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800da9c:	2180      	movs	r1, #128	; 0x80
 800da9e:	2015      	movs	r0, #21
 800daa0:	f003 f986 	bl	8010db0 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800daa4:	f640 0001 	movw	r0, #2049	; 0x801
 800daa8:	f7ff f9de 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800daac:	f640 0002 	movw	r0, #2050	; 0x802
 800dab0:	f7ff f9da 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800dab4:	e03f      	b.n	800db36 <rfalSetMode+0x24a>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication Target mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 800dab6:	21ba      	movs	r1, #186	; 0xba
 800dab8:	2003      	movs	r0, #3
 800daba:	f003 f979 	bl	8010db0 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800dabe:	2200      	movs	r2, #0
 800dac0:	2104      	movs	r1, #4
 800dac2:	2012      	movs	r0, #18
 800dac4:	f003 fac2 	bl	801104c <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800dac8:	2160      	movs	r1, #96	; 0x60
 800daca:	2040      	movs	r0, #64	; 0x40
 800dacc:	f002 fceb 	bl	80104a6 <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800dad0:	2180      	movs	r1, #128	; 0x80
 800dad2:	2015      	movs	r0, #21
 800dad4:	f003 f96c 	bl	8010db0 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800dad8:	f648 0001 	movw	r0, #34817	; 0x8801
 800dadc:	f7ff f9c4 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800dae0:	f648 0002 	movw	r0, #34818	; 0x8802
 800dae4:	f7ff f9c0 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800dae8:	e025      	b.n	800db36 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:

            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800daea:	2104      	movs	r1, #4
 800daec:	2002      	movs	r0, #2
 800daee:	f003 fa49 	bl	8010f84 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-A mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfca | ST25R3916_REG_MODE_nfc_ar_off) );
 800daf2:	2188      	movs	r1, #136	; 0x88
 800daf4:	2003      	movs	r0, #3
 800daf6:	f003 f95b 	bl	8010db0 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800dafa:	f248 1001 	movw	r0, #33025	; 0x8101
 800dafe:	f7ff f9b3 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800db02:	f248 1002 	movw	r0, #33026	; 0x8102
 800db06:	f7ff f9af 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800db0a:	e014      	b.n	800db36 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800db0c:	2104      	movs	r1, #4
 800db0e:	2002      	movs	r0, #2
 800db10:	f003 fa38 	bl	8010f84 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-F mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfcf | ST25R3916_REG_MODE_nfc_ar_off) );
 800db14:	21a0      	movs	r1, #160	; 0xa0
 800db16:	2003      	movs	r0, #3
 800db18:	f003 f94a 	bl	8010db0 <st25r3916WriteRegister>
            
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800db1c:	f248 4001 	movw	r0, #33793	; 0x8401
 800db20:	f7ff f9a2 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800db24:	f248 4002 	movw	r0, #33794	; 0x8402
 800db28:	f7ff f99e 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800db2c:	e003      	b.n	800db36 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
            return ERR_NOTSUPP;
 800db2e:	2318      	movs	r3, #24
 800db30:	e013      	b.n	800db5a <rfalSetMode+0x26e>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800db32:	230f      	movs	r3, #15
 800db34:	e011      	b.n	800db5a <rfalSetMode+0x26e>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800db36:	4b0b      	ldr	r3, [pc, #44]	; (800db64 <rfalSetMode+0x278>)
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	bf38      	it	cc
 800db3e:	2302      	movcc	r3, #2
 800db40:	b2da      	uxtb	r2, r3
 800db42:	4b08      	ldr	r3, [pc, #32]	; (800db64 <rfalSetMode+0x278>)
 800db44:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 800db46:	4a07      	ldr	r2, [pc, #28]	; (800db64 <rfalSetMode+0x278>)
 800db48:	79fb      	ldrb	r3, [r7, #7]
 800db4a:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 800db4c:	797a      	ldrb	r2, [r7, #5]
 800db4e:	79bb      	ldrb	r3, [r7, #6]
 800db50:	4611      	mov	r1, r2
 800db52:	4618      	mov	r0, r3
 800db54:	f000 f808 	bl	800db68 <rfalSetBitRate>
 800db58:	4603      	mov	r3, r0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3708      	adds	r7, #8
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	20000758 	.word	0x20000758

0800db68 <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	4603      	mov	r3, r0
 800db70:	460a      	mov	r2, r1
 800db72:	71fb      	strb	r3, [r7, #7]
 800db74:	4613      	mov	r3, r2
 800db76:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800db78:	4ba0      	ldr	r3, [pc, #640]	; (800ddfc <rfalSetBitRate+0x294>)
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d101      	bne.n	800db84 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 800db80:	2321      	movs	r3, #33	; 0x21
 800db82:	e2d2      	b.n	800e12a <rfalSetBitRate+0x5c2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800db84:	79fb      	ldrb	r3, [r7, #7]
 800db86:	2bff      	cmp	r3, #255	; 0xff
 800db88:	d102      	bne.n	800db90 <rfalSetBitRate+0x28>
 800db8a:	4b9c      	ldr	r3, [pc, #624]	; (800ddfc <rfalSetBitRate+0x294>)
 800db8c:	789b      	ldrb	r3, [r3, #2]
 800db8e:	e000      	b.n	800db92 <rfalSetBitRate+0x2a>
 800db90:	79fb      	ldrb	r3, [r7, #7]
 800db92:	4a9a      	ldr	r2, [pc, #616]	; (800ddfc <rfalSetBitRate+0x294>)
 800db94:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800db96:	79bb      	ldrb	r3, [r7, #6]
 800db98:	2bff      	cmp	r3, #255	; 0xff
 800db9a:	d102      	bne.n	800dba2 <rfalSetBitRate+0x3a>
 800db9c:	4b97      	ldr	r3, [pc, #604]	; (800ddfc <rfalSetBitRate+0x294>)
 800db9e:	78db      	ldrb	r3, [r3, #3]
 800dba0:	e000      	b.n	800dba4 <rfalSetBitRate+0x3c>
 800dba2:	79bb      	ldrb	r3, [r7, #6]
 800dba4:	4a95      	ldr	r2, [pc, #596]	; (800ddfc <rfalSetBitRate+0x294>)
 800dba6:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 800dba8:	4b94      	ldr	r3, [pc, #592]	; (800ddfc <rfalSetBitRate+0x294>)
 800dbaa:	785b      	ldrb	r3, [r3, #1]
 800dbac:	2b07      	cmp	r3, #7
 800dbae:	d012      	beq.n	800dbd6 <rfalSetBitRate+0x6e>
 800dbb0:	4b92      	ldr	r3, [pc, #584]	; (800ddfc <rfalSetBitRate+0x294>)
 800dbb2:	785b      	ldrb	r3, [r3, #1]
 800dbb4:	2b08      	cmp	r3, #8
 800dbb6:	d00e      	beq.n	800dbd6 <rfalSetBitRate+0x6e>
    {
        /* Set bit rate register */
        EXIT_ON_ERR( ret, st25r3916SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800dbb8:	4b90      	ldr	r3, [pc, #576]	; (800ddfc <rfalSetBitRate+0x294>)
 800dbba:	789a      	ldrb	r2, [r3, #2]
 800dbbc:	4b8f      	ldr	r3, [pc, #572]	; (800ddfc <rfalSetBitRate+0x294>)
 800dbbe:	78db      	ldrb	r3, [r3, #3]
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	4610      	mov	r0, r2
 800dbc4:	f002 fb43 	bl	801024e <st25r3916SetBitrate>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	83fb      	strh	r3, [r7, #30]
 800dbcc:	8bfb      	ldrh	r3, [r7, #30]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d001      	beq.n	800dbd6 <rfalSetBitRate+0x6e>
 800dbd2:	8bfb      	ldrh	r3, [r7, #30]
 800dbd4:	e2a9      	b.n	800e12a <rfalSetBitRate+0x5c2>
    }
    
    
    switch( gRFAL.mode )
 800dbd6:	4b89      	ldr	r3, [pc, #548]	; (800ddfc <rfalSetBitRate+0x294>)
 800dbd8:	785b      	ldrb	r3, [r3, #1]
 800dbda:	2b0d      	cmp	r3, #13
 800dbdc:	f200 82a2 	bhi.w	800e124 <rfalSetBitRate+0x5bc>
 800dbe0:	a201      	add	r2, pc, #4	; (adr r2, 800dbe8 <rfalSetBitRate+0x80>)
 800dbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe6:	bf00      	nop
 800dbe8:	0800e121 	.word	0x0800e121
 800dbec:	0800dc21 	.word	0x0800dc21
 800dbf0:	0800dc21 	.word	0x0800dc21
 800dbf4:	0800dca9 	.word	0x0800dca9
 800dbf8:	0800dca9 	.word	0x0800dca9
 800dbfc:	0800dca9 	.word	0x0800dca9
 800dc00:	0800dd39 	.word	0x0800dd39
 800dc04:	0800ddc9 	.word	0x0800ddc9
 800dc08:	0800ddc9 	.word	0x0800ddc9
 800dc0c:	0800defd 	.word	0x0800defd
 800dc10:	0800e00d 	.word	0x0800e00d
 800dc14:	0800e121 	.word	0x0800e121
 800dc18:	0800e0a1 	.word	0x0800e0a1
 800dc1c:	0800df8d 	.word	0x0800df8d
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800dc20:	2008      	movs	r0, #8
 800dc22:	f7ff f921 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dc26:	4b75      	ldr	r3, [pc, #468]	; (800ddfc <rfalSetBitRate+0x294>)
 800dc28:	789b      	ldrb	r3, [r3, #2]
 800dc2a:	2bea      	cmp	r3, #234	; 0xea
 800dc2c:	d90c      	bls.n	800dc48 <rfalSetBitRate+0xe0>
 800dc2e:	4b73      	ldr	r3, [pc, #460]	; (800ddfc <rfalSetBitRate+0x294>)
 800dc30:	789b      	ldrb	r3, [r3, #2]
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	011b      	lsls	r3, r3, #4
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc40:	f043 0301 	orr.w	r3, r3, #1
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	e00d      	b.n	800dc64 <rfalSetBitRate+0xfc>
 800dc48:	4b6c      	ldr	r3, [pc, #432]	; (800ddfc <rfalSetBitRate+0x294>)
 800dc4a:	789b      	ldrb	r3, [r3, #2]
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	3301      	adds	r3, #1
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	011b      	lsls	r3, r3, #4
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc5e:	f043 0301 	orr.w	r3, r3, #1
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7ff f8ff 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dc6a:	4b64      	ldr	r3, [pc, #400]	; (800ddfc <rfalSetBitRate+0x294>)
 800dc6c:	78db      	ldrb	r3, [r3, #3]
 800dc6e:	2bea      	cmp	r3, #234	; 0xea
 800dc70:	d90a      	bls.n	800dc88 <rfalSetBitRate+0x120>
 800dc72:	4b62      	ldr	r3, [pc, #392]	; (800ddfc <rfalSetBitRate+0x294>)
 800dc74:	78db      	ldrb	r3, [r3, #3]
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	011b      	lsls	r3, r3, #4
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	e00b      	b.n	800dca0 <rfalSetBitRate+0x138>
 800dc88:	4b5c      	ldr	r3, [pc, #368]	; (800ddfc <rfalSetBitRate+0x294>)
 800dc8a:	78db      	ldrb	r3, [r3, #3]
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	3301      	adds	r3, #1
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	011b      	lsls	r3, r3, #4
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7ff f8e1 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800dca6:	e23f      	b.n	800e128 <rfalSetBitRate+0x5c0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800dca8:	2008      	movs	r0, #8
 800dcaa:	f7ff f8dd 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dcae:	4b53      	ldr	r3, [pc, #332]	; (800ddfc <rfalSetBitRate+0x294>)
 800dcb0:	789b      	ldrb	r3, [r3, #2]
 800dcb2:	2bea      	cmp	r3, #234	; 0xea
 800dcb4:	d90c      	bls.n	800dcd0 <rfalSetBitRate+0x168>
 800dcb6:	4b51      	ldr	r3, [pc, #324]	; (800ddfc <rfalSetBitRate+0x294>)
 800dcb8:	789b      	ldrb	r3, [r3, #2]
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	011b      	lsls	r3, r3, #4
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dcc8:	f043 0301 	orr.w	r3, r3, #1
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	e00d      	b.n	800dcec <rfalSetBitRate+0x184>
 800dcd0:	4b4a      	ldr	r3, [pc, #296]	; (800ddfc <rfalSetBitRate+0x294>)
 800dcd2:	789b      	ldrb	r3, [r3, #2]
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	011b      	lsls	r3, r3, #4
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dce6:	f043 0301 	orr.w	r3, r3, #1
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7ff f8bb 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dcf2:	4b42      	ldr	r3, [pc, #264]	; (800ddfc <rfalSetBitRate+0x294>)
 800dcf4:	78db      	ldrb	r3, [r3, #3]
 800dcf6:	2bea      	cmp	r3, #234	; 0xea
 800dcf8:	d90c      	bls.n	800dd14 <rfalSetBitRate+0x1ac>
 800dcfa:	4b40      	ldr	r3, [pc, #256]	; (800ddfc <rfalSetBitRate+0x294>)
 800dcfc:	78db      	ldrb	r3, [r3, #3]
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	011b      	lsls	r3, r3, #4
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dd0c:	f043 0302 	orr.w	r3, r3, #2
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	e00d      	b.n	800dd30 <rfalSetBitRate+0x1c8>
 800dd14:	4b39      	ldr	r3, [pc, #228]	; (800ddfc <rfalSetBitRate+0x294>)
 800dd16:	78db      	ldrb	r3, [r3, #3]
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	011b      	lsls	r3, r3, #4
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dd2a:	f043 0302 	orr.w	r3, r3, #2
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff f899 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800dd36:	e1f7      	b.n	800e128 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800dd38:	2008      	movs	r0, #8
 800dd3a:	f7ff f895 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dd3e:	4b2f      	ldr	r3, [pc, #188]	; (800ddfc <rfalSetBitRate+0x294>)
 800dd40:	789b      	ldrb	r3, [r3, #2]
 800dd42:	2bea      	cmp	r3, #234	; 0xea
 800dd44:	d90c      	bls.n	800dd60 <rfalSetBitRate+0x1f8>
 800dd46:	4b2d      	ldr	r3, [pc, #180]	; (800ddfc <rfalSetBitRate+0x294>)
 800dd48:	789b      	ldrb	r3, [r3, #2]
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	011b      	lsls	r3, r3, #4
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd58:	f043 0301 	orr.w	r3, r3, #1
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	e00d      	b.n	800dd7c <rfalSetBitRate+0x214>
 800dd60:	4b26      	ldr	r3, [pc, #152]	; (800ddfc <rfalSetBitRate+0x294>)
 800dd62:	789b      	ldrb	r3, [r3, #2]
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	3301      	adds	r3, #1
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	011b      	lsls	r3, r3, #4
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd76:	f043 0301 	orr.w	r3, r3, #1
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7ff f873 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dd82:	4b1e      	ldr	r3, [pc, #120]	; (800ddfc <rfalSetBitRate+0x294>)
 800dd84:	78db      	ldrb	r3, [r3, #3]
 800dd86:	2bea      	cmp	r3, #234	; 0xea
 800dd88:	d90c      	bls.n	800dda4 <rfalSetBitRate+0x23c>
 800dd8a:	4b1c      	ldr	r3, [pc, #112]	; (800ddfc <rfalSetBitRate+0x294>)
 800dd8c:	78db      	ldrb	r3, [r3, #3]
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	011b      	lsls	r3, r3, #4
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd9c:	f043 0302 	orr.w	r3, r3, #2
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	e00d      	b.n	800ddc0 <rfalSetBitRate+0x258>
 800dda4:	4b15      	ldr	r3, [pc, #84]	; (800ddfc <rfalSetBitRate+0x294>)
 800dda6:	78db      	ldrb	r3, [r3, #3]
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	3301      	adds	r3, #1
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	011b      	lsls	r3, r3, #4
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ddba:	f043 0302 	orr.w	r3, r3, #2
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7ff f851 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800ddc6:	e1af      	b.n	800e128 <rfalSetBitRate+0x5c0>
            
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
            
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 800ddc8:	4b0c      	ldr	r3, [pc, #48]	; (800ddfc <rfalSetBitRate+0x294>)
 800ddca:	78db      	ldrb	r3, [r3, #3]
 800ddcc:	2bec      	cmp	r3, #236	; 0xec
 800ddce:	d00b      	beq.n	800dde8 <rfalSetBitRate+0x280>
 800ddd0:	4b0a      	ldr	r3, [pc, #40]	; (800ddfc <rfalSetBitRate+0x294>)
 800ddd2:	78db      	ldrb	r3, [r3, #3]
 800ddd4:	2beb      	cmp	r3, #235	; 0xeb
 800ddd6:	d007      	beq.n	800dde8 <rfalSetBitRate+0x280>
 800ddd8:	4b08      	ldr	r3, [pc, #32]	; (800ddfc <rfalSetBitRate+0x294>)
 800ddda:	78db      	ldrb	r3, [r3, #3]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d003      	beq.n	800dde8 <rfalSetBitRate+0x280>
 800dde0:	4b06      	ldr	r3, [pc, #24]	; (800ddfc <rfalSetBitRate+0x294>)
 800dde2:	78db      	ldrb	r3, [r3, #3]
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d107      	bne.n	800ddf8 <rfalSetBitRate+0x290>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 800dde8:	4b04      	ldr	r3, [pc, #16]	; (800ddfc <rfalSetBitRate+0x294>)
 800ddea:	789b      	ldrb	r3, [r3, #2]
 800ddec:	2bed      	cmp	r3, #237	; 0xed
 800ddee:	d007      	beq.n	800de00 <rfalSetBitRate+0x298>
 800ddf0:	4b02      	ldr	r3, [pc, #8]	; (800ddfc <rfalSetBitRate+0x294>)
 800ddf2:	789b      	ldrb	r3, [r3, #2]
 800ddf4:	2bec      	cmp	r3, #236	; 0xec
 800ddf6:	d003      	beq.n	800de00 <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 800ddf8:	2307      	movs	r3, #7
 800ddfa:	e196      	b.n	800e12a <rfalSetBitRate+0x5c2>
 800ddfc:	20000758 	.word	0x20000758
                {
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3916StreamConfig      streamConf;
                    iso15693PhyConfig_t                config;
                    
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 800de00:	4b9a      	ldr	r3, [pc, #616]	; (800e06c <rfalSetBitRate+0x504>)
 800de02:	789b      	ldrb	r3, [r3, #2]
 800de04:	2bed      	cmp	r3, #237	; 0xed
 800de06:	bf0c      	ite	eq
 800de08:	2301      	moveq	r3, #1
 800de0a:	2300      	movne	r3, #0
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 800de10:	4b96      	ldr	r3, [pc, #600]	; (800e06c <rfalSetBitRate+0x504>)
 800de12:	78db      	ldrb	r3, [r3, #3]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d00a      	beq.n	800de2e <rfalSetBitRate+0x2c6>
 800de18:	2beb      	cmp	r3, #235	; 0xeb
 800de1a:	d002      	beq.n	800de22 <rfalSetBitRate+0x2ba>
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d003      	beq.n	800de28 <rfalSetBitRate+0x2c0>
 800de20:	e008      	b.n	800de34 <rfalSetBitRate+0x2cc>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 800de22:	2301      	movs	r3, #1
 800de24:	613b      	str	r3, [r7, #16]
                            break;
 800de26:	e008      	b.n	800de3a <rfalSetBitRate+0x2d2>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 800de28:	2302      	movs	r3, #2
 800de2a:	613b      	str	r3, [r7, #16]
                            break;
 800de2c:	e005      	b.n	800de3a <rfalSetBitRate+0x2d2>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 800de2e:	2303      	movs	r3, #3
 800de30:	613b      	str	r3, [r7, #16]
                            break;
 800de32:	e002      	b.n	800de3a <rfalSetBitRate+0x2d2>
                        default:
                            config.speedMode = 0;
 800de34:	2300      	movs	r3, #0
 800de36:	613b      	str	r3, [r7, #16]
                            break;
 800de38:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);
 800de3a:	f107 0218 	add.w	r2, r7, #24
 800de3e:	f107 030c 	add.w	r3, r7, #12
 800de42:	4611      	mov	r1, r2
 800de44:	4618      	mov	r0, r3
 800de46:	f7ff f977 	bl	800d138 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	785b      	ldrb	r3, [r3, #1]
 800de4e:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 800de50:	69bb      	ldr	r3, [r7, #24]
 800de52:	789b      	ldrb	r3, [r3, #2]
 800de54:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	78db      	ldrb	r3, [r3, #3]
 800de5a:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	753b      	strb	r3, [r7, #20]
                    st25r3916StreamConfigure(&streamConf);
 800de62:	f107 0314 	add.w	r3, r7, #20
 800de66:	4618      	mov	r0, r3
 800de68:	f002 fb5b 	bl	8010522 <st25r3916StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800de6c:	2008      	movs	r0, #8
 800de6e:	f7fe fffb 	bl	800ce68 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800de72:	4b7e      	ldr	r3, [pc, #504]	; (800e06c <rfalSetBitRate+0x504>)
 800de74:	789b      	ldrb	r3, [r3, #2]
 800de76:	2bea      	cmp	r3, #234	; 0xea
 800de78:	d90c      	bls.n	800de94 <rfalSetBitRate+0x32c>
 800de7a:	4b7c      	ldr	r3, [pc, #496]	; (800e06c <rfalSetBitRate+0x504>)
 800de7c:	789b      	ldrb	r3, [r3, #2]
 800de7e:	b29b      	uxth	r3, r3
 800de80:	011b      	lsls	r3, r3, #4
 800de82:	b29b      	uxth	r3, r3
 800de84:	b2db      	uxtb	r3, r3
 800de86:	b29b      	uxth	r3, r3
 800de88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800de8c:	f043 0301 	orr.w	r3, r3, #1
 800de90:	b29b      	uxth	r3, r3
 800de92:	e00d      	b.n	800deb0 <rfalSetBitRate+0x348>
 800de94:	4b75      	ldr	r3, [pc, #468]	; (800e06c <rfalSetBitRate+0x504>)
 800de96:	789b      	ldrb	r3, [r3, #2]
 800de98:	b29b      	uxth	r3, r3
 800de9a:	3301      	adds	r3, #1
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	011b      	lsls	r3, r3, #4
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800deaa:	f043 0301 	orr.w	r3, r3, #1
 800deae:	b29b      	uxth	r3, r3
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7fe ffd9 	bl	800ce68 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800deb6:	4b6d      	ldr	r3, [pc, #436]	; (800e06c <rfalSetBitRate+0x504>)
 800deb8:	78db      	ldrb	r3, [r3, #3]
 800deba:	2bea      	cmp	r3, #234	; 0xea
 800debc:	d90c      	bls.n	800ded8 <rfalSetBitRate+0x370>
 800debe:	4b6b      	ldr	r3, [pc, #428]	; (800e06c <rfalSetBitRate+0x504>)
 800dec0:	78db      	ldrb	r3, [r3, #3]
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	011b      	lsls	r3, r3, #4
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	b29b      	uxth	r3, r3
 800decc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ded0:	f043 0302 	orr.w	r3, r3, #2
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	e00d      	b.n	800def4 <rfalSetBitRate+0x38c>
 800ded8:	4b64      	ldr	r3, [pc, #400]	; (800e06c <rfalSetBitRate+0x504>)
 800deda:	78db      	ldrb	r3, [r3, #3]
 800dedc:	b29b      	uxth	r3, r3
 800dede:	3301      	adds	r3, #1
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	011b      	lsls	r3, r3, #4
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	b29b      	uxth	r3, r3
 800deea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800deee:	f043 0302 	orr.w	r3, r3, #2
 800def2:	b29b      	uxth	r3, r3
 800def4:	4618      	mov	r0, r3
 800def6:	f7fe ffb7 	bl	800ce68 <rfalSetAnalogConfig>
                break;
 800defa:	e115      	b.n	800e128 <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800defc:	2008      	movs	r0, #8
 800defe:	f7fe ffb3 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800df02:	4b5a      	ldr	r3, [pc, #360]	; (800e06c <rfalSetBitRate+0x504>)
 800df04:	789b      	ldrb	r3, [r3, #2]
 800df06:	2bea      	cmp	r3, #234	; 0xea
 800df08:	d90c      	bls.n	800df24 <rfalSetBitRate+0x3bc>
 800df0a:	4b58      	ldr	r3, [pc, #352]	; (800e06c <rfalSetBitRate+0x504>)
 800df0c:	789b      	ldrb	r3, [r3, #2]
 800df0e:	b29b      	uxth	r3, r3
 800df10:	011b      	lsls	r3, r3, #4
 800df12:	b29b      	uxth	r3, r3
 800df14:	b2db      	uxtb	r3, r3
 800df16:	b29b      	uxth	r3, r3
 800df18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800df1c:	f043 0301 	orr.w	r3, r3, #1
 800df20:	b29b      	uxth	r3, r3
 800df22:	e00d      	b.n	800df40 <rfalSetBitRate+0x3d8>
 800df24:	4b51      	ldr	r3, [pc, #324]	; (800e06c <rfalSetBitRate+0x504>)
 800df26:	789b      	ldrb	r3, [r3, #2]
 800df28:	b29b      	uxth	r3, r3
 800df2a:	3301      	adds	r3, #1
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	011b      	lsls	r3, r3, #4
 800df30:	b29b      	uxth	r3, r3
 800df32:	b2db      	uxtb	r3, r3
 800df34:	b29b      	uxth	r3, r3
 800df36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800df3a:	f043 0301 	orr.w	r3, r3, #1
 800df3e:	b29b      	uxth	r3, r3
 800df40:	4618      	mov	r0, r3
 800df42:	f7fe ff91 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800df46:	4b49      	ldr	r3, [pc, #292]	; (800e06c <rfalSetBitRate+0x504>)
 800df48:	78db      	ldrb	r3, [r3, #3]
 800df4a:	2bea      	cmp	r3, #234	; 0xea
 800df4c:	d90c      	bls.n	800df68 <rfalSetBitRate+0x400>
 800df4e:	4b47      	ldr	r3, [pc, #284]	; (800e06c <rfalSetBitRate+0x504>)
 800df50:	78db      	ldrb	r3, [r3, #3]
 800df52:	b29b      	uxth	r3, r3
 800df54:	011b      	lsls	r3, r3, #4
 800df56:	b29b      	uxth	r3, r3
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800df60:	f043 0302 	orr.w	r3, r3, #2
 800df64:	b29b      	uxth	r3, r3
 800df66:	e00d      	b.n	800df84 <rfalSetBitRate+0x41c>
 800df68:	4b40      	ldr	r3, [pc, #256]	; (800e06c <rfalSetBitRate+0x504>)
 800df6a:	78db      	ldrb	r3, [r3, #3]
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	3301      	adds	r3, #1
 800df70:	b29b      	uxth	r3, r3
 800df72:	011b      	lsls	r3, r3, #4
 800df74:	b29b      	uxth	r3, r3
 800df76:	b2db      	uxtb	r3, r3
 800df78:	b29b      	uxth	r3, r3
 800df7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800df7e:	f043 0302 	orr.w	r3, r3, #2
 800df82:	b29b      	uxth	r3, r3
 800df84:	4618      	mov	r0, r3
 800df86:	f7fe ff6f 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800df8a:	e0cd      	b.n	800e128 <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800df8c:	2009      	movs	r0, #9
 800df8e:	f7fe ff6b 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800df92:	4b36      	ldr	r3, [pc, #216]	; (800e06c <rfalSetBitRate+0x504>)
 800df94:	789b      	ldrb	r3, [r3, #2]
 800df96:	2bea      	cmp	r3, #234	; 0xea
 800df98:	d90a      	bls.n	800dfb0 <rfalSetBitRate+0x448>
 800df9a:	4b34      	ldr	r3, [pc, #208]	; (800e06c <rfalSetBitRate+0x504>)
 800df9c:	789b      	ldrb	r3, [r3, #2]
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	011b      	lsls	r3, r3, #4
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	b29a      	uxth	r2, r3
 800dfa8:	4b31      	ldr	r3, [pc, #196]	; (800e070 <rfalSetBitRate+0x508>)
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	e00b      	b.n	800dfc8 <rfalSetBitRate+0x460>
 800dfb0:	4b2e      	ldr	r3, [pc, #184]	; (800e06c <rfalSetBitRate+0x504>)
 800dfb2:	789b      	ldrb	r3, [r3, #2]
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	011b      	lsls	r3, r3, #4
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	b29a      	uxth	r2, r3
 800dfc2:	4b2b      	ldr	r3, [pc, #172]	; (800e070 <rfalSetBitRate+0x508>)
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fe ff4d 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dfce:	4b27      	ldr	r3, [pc, #156]	; (800e06c <rfalSetBitRate+0x504>)
 800dfd0:	78db      	ldrb	r3, [r3, #3]
 800dfd2:	2bea      	cmp	r3, #234	; 0xea
 800dfd4:	d90a      	bls.n	800dfec <rfalSetBitRate+0x484>
 800dfd6:	4b25      	ldr	r3, [pc, #148]	; (800e06c <rfalSetBitRate+0x504>)
 800dfd8:	78db      	ldrb	r3, [r3, #3]
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	011b      	lsls	r3, r3, #4
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	4b23      	ldr	r3, [pc, #140]	; (800e074 <rfalSetBitRate+0x50c>)
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	e00b      	b.n	800e004 <rfalSetBitRate+0x49c>
 800dfec:	4b1f      	ldr	r3, [pc, #124]	; (800e06c <rfalSetBitRate+0x504>)
 800dfee:	78db      	ldrb	r3, [r3, #3]
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	3301      	adds	r3, #1
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	011b      	lsls	r3, r3, #4
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	4b1d      	ldr	r3, [pc, #116]	; (800e074 <rfalSetBitRate+0x50c>)
 800e000:	4313      	orrs	r3, r2
 800e002:	b29b      	uxth	r3, r3
 800e004:	4618      	mov	r0, r3
 800e006:	f7fe ff2f 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800e00a:	e08d      	b.n	800e128 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800e00c:	2009      	movs	r0, #9
 800e00e:	f7fe ff2b 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800e012:	4b16      	ldr	r3, [pc, #88]	; (800e06c <rfalSetBitRate+0x504>)
 800e014:	789b      	ldrb	r3, [r3, #2]
 800e016:	2bea      	cmp	r3, #234	; 0xea
 800e018:	d90a      	bls.n	800e030 <rfalSetBitRate+0x4c8>
 800e01a:	4b14      	ldr	r3, [pc, #80]	; (800e06c <rfalSetBitRate+0x504>)
 800e01c:	789b      	ldrb	r3, [r3, #2]
 800e01e:	b29b      	uxth	r3, r3
 800e020:	011b      	lsls	r3, r3, #4
 800e022:	b29b      	uxth	r3, r3
 800e024:	b2db      	uxtb	r3, r3
 800e026:	b29a      	uxth	r2, r3
 800e028:	4b13      	ldr	r3, [pc, #76]	; (800e078 <rfalSetBitRate+0x510>)
 800e02a:	4313      	orrs	r3, r2
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	e00b      	b.n	800e048 <rfalSetBitRate+0x4e0>
 800e030:	4b0e      	ldr	r3, [pc, #56]	; (800e06c <rfalSetBitRate+0x504>)
 800e032:	789b      	ldrb	r3, [r3, #2]
 800e034:	b29b      	uxth	r3, r3
 800e036:	3301      	adds	r3, #1
 800e038:	b29b      	uxth	r3, r3
 800e03a:	011b      	lsls	r3, r3, #4
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	b29a      	uxth	r2, r3
 800e042:	4b0d      	ldr	r3, [pc, #52]	; (800e078 <rfalSetBitRate+0x510>)
 800e044:	4313      	orrs	r3, r2
 800e046:	b29b      	uxth	r3, r3
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fe ff0d 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800e04e:	4b07      	ldr	r3, [pc, #28]	; (800e06c <rfalSetBitRate+0x504>)
 800e050:	78db      	ldrb	r3, [r3, #3]
 800e052:	2bea      	cmp	r3, #234	; 0xea
 800e054:	d914      	bls.n	800e080 <rfalSetBitRate+0x518>
 800e056:	4b05      	ldr	r3, [pc, #20]	; (800e06c <rfalSetBitRate+0x504>)
 800e058:	78db      	ldrb	r3, [r3, #3]
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	011b      	lsls	r3, r3, #4
 800e05e:	b29b      	uxth	r3, r3
 800e060:	b2db      	uxtb	r3, r3
 800e062:	b29a      	uxth	r2, r3
 800e064:	4b05      	ldr	r3, [pc, #20]	; (800e07c <rfalSetBitRate+0x514>)
 800e066:	4313      	orrs	r3, r2
 800e068:	b29b      	uxth	r3, r3
 800e06a:	e015      	b.n	800e098 <rfalSetBitRate+0x530>
 800e06c:	20000758 	.word	0x20000758
 800e070:	ffff8801 	.word	0xffff8801
 800e074:	ffff8802 	.word	0xffff8802
 800e078:	ffff8101 	.word	0xffff8101
 800e07c:	ffff8102 	.word	0xffff8102
 800e080:	4b2c      	ldr	r3, [pc, #176]	; (800e134 <rfalSetBitRate+0x5cc>)
 800e082:	78db      	ldrb	r3, [r3, #3]
 800e084:	b29b      	uxth	r3, r3
 800e086:	3301      	adds	r3, #1
 800e088:	b29b      	uxth	r3, r3
 800e08a:	011b      	lsls	r3, r3, #4
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	b29a      	uxth	r2, r3
 800e092:	4b29      	ldr	r3, [pc, #164]	; (800e138 <rfalSetBitRate+0x5d0>)
 800e094:	4313      	orrs	r3, r2
 800e096:	b29b      	uxth	r3, r3
 800e098:	4618      	mov	r0, r3
 800e09a:	f7fe fee5 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800e09e:	e043      	b.n	800e128 <rfalSetBitRate+0x5c0>
                
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
                        
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800e0a0:	2009      	movs	r0, #9
 800e0a2:	f7fe fee1 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800e0a6:	4b23      	ldr	r3, [pc, #140]	; (800e134 <rfalSetBitRate+0x5cc>)
 800e0a8:	789b      	ldrb	r3, [r3, #2]
 800e0aa:	2bea      	cmp	r3, #234	; 0xea
 800e0ac:	d90a      	bls.n	800e0c4 <rfalSetBitRate+0x55c>
 800e0ae:	4b21      	ldr	r3, [pc, #132]	; (800e134 <rfalSetBitRate+0x5cc>)
 800e0b0:	789b      	ldrb	r3, [r3, #2]
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	011b      	lsls	r3, r3, #4
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	b29a      	uxth	r2, r3
 800e0bc:	4b1f      	ldr	r3, [pc, #124]	; (800e13c <rfalSetBitRate+0x5d4>)
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	e00b      	b.n	800e0dc <rfalSetBitRate+0x574>
 800e0c4:	4b1b      	ldr	r3, [pc, #108]	; (800e134 <rfalSetBitRate+0x5cc>)
 800e0c6:	789b      	ldrb	r3, [r3, #2]
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	011b      	lsls	r3, r3, #4
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	4b19      	ldr	r3, [pc, #100]	; (800e13c <rfalSetBitRate+0x5d4>)
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fe fec3 	bl	800ce68 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800e0e2:	4b14      	ldr	r3, [pc, #80]	; (800e134 <rfalSetBitRate+0x5cc>)
 800e0e4:	78db      	ldrb	r3, [r3, #3]
 800e0e6:	2bea      	cmp	r3, #234	; 0xea
 800e0e8:	d90a      	bls.n	800e100 <rfalSetBitRate+0x598>
 800e0ea:	4b12      	ldr	r3, [pc, #72]	; (800e134 <rfalSetBitRate+0x5cc>)
 800e0ec:	78db      	ldrb	r3, [r3, #3]
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	011b      	lsls	r3, r3, #4
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	4b11      	ldr	r3, [pc, #68]	; (800e140 <rfalSetBitRate+0x5d8>)
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	e00b      	b.n	800e118 <rfalSetBitRate+0x5b0>
 800e100:	4b0c      	ldr	r3, [pc, #48]	; (800e134 <rfalSetBitRate+0x5cc>)
 800e102:	78db      	ldrb	r3, [r3, #3]
 800e104:	b29b      	uxth	r3, r3
 800e106:	3301      	adds	r3, #1
 800e108:	b29b      	uxth	r3, r3
 800e10a:	011b      	lsls	r3, r3, #4
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	b29a      	uxth	r2, r3
 800e112:	4b0b      	ldr	r3, [pc, #44]	; (800e140 <rfalSetBitRate+0x5d8>)
 800e114:	4313      	orrs	r3, r2
 800e116:	b29b      	uxth	r3, r3
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fe fea5 	bl	800ce68 <rfalSetAnalogConfig>
            break;
 800e11e:	e003      	b.n	800e128 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 800e120:	2321      	movs	r3, #33	; 0x21
 800e122:	e002      	b.n	800e12a <rfalSetBitRate+0x5c2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800e124:	230f      	movs	r3, #15
 800e126:	e000      	b.n	800e12a <rfalSetBitRate+0x5c2>
    }
    
    return ERR_NONE;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3720      	adds	r7, #32
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	20000758 	.word	0x20000758
 800e138:	ffff8102 	.word	0xffff8102
 800e13c:	ffff8401 	.word	0xffff8401
 800e140:	ffff8402 	.word	0xffff8402

0800e144 <rfalSetErrorHandling>:
}


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	4603      	mov	r3, r0
 800e14c:	71fb      	strb	r3, [r7, #7]
    switch(eHandling)
 800e14e:	79fb      	ldrb	r3, [r7, #7]
 800e150:	2b00      	cmp	r3, #0
 800e152:	db0f      	blt.n	800e174 <rfalSetErrorHandling+0x30>
 800e154:	2b01      	cmp	r3, #1
 800e156:	dd02      	ble.n	800e15e <rfalSetErrorHandling+0x1a>
 800e158:	2b02      	cmp	r3, #2
 800e15a:	d005      	beq.n	800e168 <rfalSetErrorHandling+0x24>
                                 (ST25R3916_REG_EMD_SUP_CONF_emd_emv_on | ST25R3916_REG_EMD_SUP_CONF_emd_crc_prot_off | ST25R3916_REG_EMD_SUP_CONF_emd_res_bits_off | RFAL_EMVCO_RX_MAXLEN) );
#endif /* RFAL_SW_EMD */
            break;
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800e15c:	e00a      	b.n	800e174 <rfalSetErrorHandling+0x30>
            st25r3916ClrRegisterBits( ST25R3916_REG_EMD_SUP_CONF, ST25R3916_REG_EMD_SUP_CONF_emd_emv );
 800e15e:	2180      	movs	r1, #128	; 0x80
 800e160:	2045      	movs	r0, #69	; 0x45
 800e162:	f002 ff0f 	bl	8010f84 <st25r3916ClrRegisterBits>
            break;
 800e166:	e006      	b.n	800e176 <rfalSetErrorHandling+0x32>
            st25r3916ModifyRegister( ST25R3916_REG_EMD_SUP_CONF, 
 800e168:	2284      	movs	r2, #132	; 0x84
 800e16a:	21bf      	movs	r1, #191	; 0xbf
 800e16c:	2045      	movs	r0, #69	; 0x45
 800e16e:	f002 ff84 	bl	801107a <st25r3916ModifyRegister>
            break;
 800e172:	e000      	b.n	800e176 <rfalSetErrorHandling+0x32>
            break;
 800e174:	bf00      	nop
    }

    gRFAL.conf.eHandling = eHandling;
 800e176:	4a03      	ldr	r2, [pc, #12]	; (800e184 <rfalSetErrorHandling+0x40>)
 800e178:	79fb      	ldrb	r3, [r7, #7]
 800e17a:	71d3      	strb	r3, [r2, #7]
}
 800e17c:	bf00      	nop
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	20000758 	.word	0x20000758

0800e188 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3916_GPT_MAX_1FC );
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a06      	ldr	r2, [pc, #24]	; (800e1ac <rfalSetFDTPoll+0x24>)
 800e194:	4293      	cmp	r3, r2
 800e196:	bf28      	it	cs
 800e198:	4613      	movcs	r3, r2
 800e19a:	4a05      	ldr	r2, [pc, #20]	; (800e1b0 <rfalSetFDTPoll+0x28>)
 800e19c:	6113      	str	r3, [r2, #16]
}
 800e19e:	bf00      	nop
 800e1a0:	370c      	adds	r7, #12
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop
 800e1ac:	0007fff8 	.word	0x0007fff8
 800e1b0:	20000758 	.word	0x20000758

0800e1b4 <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3916_MRT_MAX_1FC );
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 800e1c2:	bf28      	it	cs
 800e1c4:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 800e1c8:	4a03      	ldr	r2, [pc, #12]	; (800e1d8 <rfalSetFDTListen+0x24>)
 800e1ca:	60d3      	str	r3, [r2, #12]
}
 800e1cc:	bf00      	nop
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr
 800e1d8:	20000758 	.word	0x20000758

0800e1dc <rfalSetGT>:
}


/*******************************************************************************/
void rfalSetGT( uint32_t GT )
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3916_GT_MAX_1FC );
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	4a06      	ldr	r2, [pc, #24]	; (800e200 <rfalSetGT+0x24>)
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	bf28      	it	cs
 800e1ec:	4613      	movcs	r3, r2
 800e1ee:	4a05      	ldr	r2, [pc, #20]	; (800e204 <rfalSetGT+0x28>)
 800e1f0:	6093      	str	r3, [r2, #8]
}
 800e1f2:	bf00      	nop
 800e1f4:	370c      	adds	r7, #12
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop
 800e200:	040a8bc0 	.word	0x040a8bc0
 800e204:	20000758 	.word	0x20000758

0800e208 <rfalIsGTExpired>:
}


/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 800e20c:	4b09      	ldr	r3, [pc, #36]	; (800e234 <rfalIsGTExpired+0x2c>)
 800e20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e210:	2b00      	cmp	r3, #0
 800e212:	d00c      	beq.n	800e22e <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 800e214:	4b07      	ldr	r3, [pc, #28]	; (800e234 <rfalIsGTExpired+0x2c>)
 800e216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e218:	4618      	mov	r0, r3
 800e21a:	f7f6 fa9f 	bl	800475c <timerIsExpired>
 800e21e:	4603      	mov	r3, r0
 800e220:	f083 0301 	eor.w	r3, r3, #1
 800e224:	b2db      	uxtb	r3, r3
 800e226:	2b00      	cmp	r3, #0
 800e228:	d001      	beq.n	800e22e <rfalIsGTExpired+0x26>
        {
            return false;
 800e22a:	2300      	movs	r3, #0
 800e22c:	e000      	b.n	800e230 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 800e22e:	2301      	movs	r3, #1
}
 800e230:	4618      	mov	r0, r3
 800e232:	bd80      	pop	{r7, pc}
 800e234:	20000758 	.word	0x20000758

0800e238 <rfalFieldOnAndStartGT>:


/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3916IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 800e23e:	2280      	movs	r2, #128	; 0x80
 800e240:	2180      	movs	r1, #128	; 0x80
 800e242:	2002      	movs	r0, #2
 800e244:	f002 ff86 	bl	8011154 <st25r3916CheckReg>
 800e248:	4603      	mov	r3, r0
 800e24a:	f083 0301 	eor.w	r3, r3, #1
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	2b00      	cmp	r3, #0
 800e252:	d103      	bne.n	800e25c <rfalFieldOnAndStartGT+0x24>
 800e254:	4b2a      	ldr	r3, [pc, #168]	; (800e300 <rfalFieldOnAndStartGT+0xc8>)
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 800e25c:	2321      	movs	r3, #33	; 0x21
 800e25e:	e04a      	b.n	800e2f6 <rfalFieldOnAndStartGT+0xbe>
    }
    
    ret = ERR_NONE;
 800e260:	2300      	movs	r3, #0
 800e262:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 800e264:	2002      	movs	r0, #2
 800e266:	f7fe fdff 	bl	800ce68 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3916IsTxEnabled() || !gRFAL.field )
 800e26a:	2208      	movs	r2, #8
 800e26c:	2108      	movs	r1, #8
 800e26e:	2002      	movs	r0, #2
 800e270:	f002 ff70 	bl	8011154 <st25r3916CheckReg>
 800e274:	4603      	mov	r3, r0
 800e276:	f083 0301 	eor.w	r3, r3, #1
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d106      	bne.n	800e28e <rfalFieldOnAndStartGT+0x56>
 800e280:	4b1f      	ldr	r3, [pc, #124]	; (800e300 <rfalFieldOnAndStartGT+0xc8>)
 800e282:	791b      	ldrb	r3, [r3, #4]
 800e284:	f083 0301 	eor.w	r3, r3, #1
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d01c      	beq.n	800e2c8 <rfalFieldOnAndStartGT+0x90>
    {
        
        /* Set TARFG: 0 (75us+0ms=75us), GT is fulfilled using a SW timer */
        st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 800e28e:	2100      	movs	r1, #0
 800e290:	2055      	movs	r0, #85	; 0x55
 800e292:	f002 fd8d 	bl	8010db0 <st25r3916WriteRegister>
        
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, 0 );
 800e296:	2300      	movs	r3, #0
 800e298:	22ff      	movs	r2, #255	; 0xff
 800e29a:	21ff      	movs	r1, #255	; 0xff
 800e29c:	20c8      	movs	r0, #200	; 0xc8
 800e29e:	f002 f817 	bl	80102d0 <st25r3916PerformCollisionAvoidance>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3916IsTxEnabled(); //(ret == ERR_NONE);
 800e2a6:	2208      	movs	r2, #8
 800e2a8:	2108      	movs	r1, #8
 800e2aa:	2002      	movs	r0, #2
 800e2ac:	f002 ff52 	bl	8011154 <st25r3916CheckReg>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	4b12      	ldr	r3, [pc, #72]	; (800e300 <rfalFieldOnAndStartGT+0xc8>)
 800e2b6:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 800e2b8:	4b11      	ldr	r3, [pc, #68]	; (800e300 <rfalFieldOnAndStartGT+0xc8>)
 800e2ba:	791b      	ldrb	r3, [r3, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d003      	beq.n	800e2c8 <rfalFieldOnAndStartGT+0x90>
        {            
            st25r3916TxRxOn(); /* Enable Tx and Rx (Tx is already On)*/
 800e2c0:	2148      	movs	r1, #72	; 0x48
 800e2c2:	2002      	movs	r0, #2
 800e2c4:	f002 fe95 	bl	8010ff2 <st25r3916SetRegisterBits>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800e2c8:	4b0d      	ldr	r3, [pc, #52]	; (800e300 <rfalFieldOnAndStartGT+0xc8>)
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d011      	beq.n	800e2f4 <rfalFieldOnAndStartGT+0xbc>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3916_GT_MIN_1FC) ) );
 800e2d0:	4b0b      	ldr	r3, [pc, #44]	; (800e300 <rfalFieldOnAndStartGT+0xc8>)
 800e2d2:	689b      	ldr	r3, [r3, #8]
 800e2d4:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	bf38      	it	cc
 800e2dc:	4613      	movcc	r3, r2
 800e2de:	4a09      	ldr	r2, [pc, #36]	; (800e304 <rfalFieldOnAndStartGT+0xcc>)
 800e2e0:	fba2 2303 	umull	r2, r3, r2, r3
 800e2e4:	0b1b      	lsrs	r3, r3, #12
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7f6 fa29 	bl	8004740 <timerCalculateTimer>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	4b03      	ldr	r3, [pc, #12]	; (800e300 <rfalFieldOnAndStartGT+0xc8>)
 800e2f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    return ret;
 800e2f4:	88fb      	ldrh	r3, [r7, #6]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3708      	adds	r7, #8
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	20000758 	.word	0x20000758
 800e304:	4d542005 	.word	0x4d542005

0800e308 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 800e30c:	4b09      	ldr	r3, [pc, #36]	; (800e334 <rfalFieldOff+0x2c>)
 800e30e:	7d1b      	ldrb	r3, [r3, #20]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d001      	beq.n	800e318 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 800e314:	f000 fa9a 	bl	800e84c <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3916TxRxOff();
 800e318:	2148      	movs	r1, #72	; 0x48
 800e31a:	2002      	movs	r0, #2
 800e31c:	f002 fe32 	bl	8010f84 <st25r3916ClrRegisterBits>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 800e320:	2003      	movs	r0, #3
 800e322:	f7fe fda1 	bl	800ce68 <rfalSetAnalogConfig>
    gRFAL.field = false;
 800e326:	4b03      	ldr	r3, [pc, #12]	; (800e334 <rfalFieldOff+0x2c>)
 800e328:	2200      	movs	r2, #0
 800e32a:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	20000758 	.word	0x20000758

0800e338 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 800e338:	b5b0      	push	{r4, r5, r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d101      	bne.n	800e34a <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 800e346:	2307      	movs	r3, #7
 800e348:	e127      	b.n	800e59a <rfalStartTransceive+0x262>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800e34a:	4b96      	ldr	r3, [pc, #600]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	2b01      	cmp	r3, #1
 800e350:	f240 8122 	bls.w	800e598 <rfalStartTransceive+0x260>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3916IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800e354:	2208      	movs	r2, #8
 800e356:	2108      	movs	r1, #8
 800e358:	2002      	movs	r0, #2
 800e35a:	f002 fefb 	bl	8011154 <st25r3916CheckReg>
 800e35e:	4603      	mov	r3, r0
 800e360:	f083 0301 	eor.w	r3, r3, #1
 800e364:	b2db      	uxtb	r3, r3
 800e366:	2b00      	cmp	r3, #0
 800e368:	d011      	beq.n	800e38e <rfalStartTransceive+0x56>
 800e36a:	4b8e      	ldr	r3, [pc, #568]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e36c:	785b      	ldrb	r3, [r3, #1]
 800e36e:	2b0a      	cmp	r3, #10
 800e370:	d00d      	beq.n	800e38e <rfalStartTransceive+0x56>
 800e372:	4b8c      	ldr	r3, [pc, #560]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e374:	785b      	ldrb	r3, [r3, #1]
 800e376:	2b0b      	cmp	r3, #11
 800e378:	d009      	beq.n	800e38e <rfalStartTransceive+0x56>
 800e37a:	4b8a      	ldr	r3, [pc, #552]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e37c:	785b      	ldrb	r3, [r3, #1]
 800e37e:	2b0c      	cmp	r3, #12
 800e380:	d005      	beq.n	800e38e <rfalStartTransceive+0x56>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d001      	beq.n	800e38e <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 800e38a:	2321      	movs	r3, #33	; 0x21
 800e38c:	e105      	b.n	800e59a <rfalStartTransceive+0x262>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 800e38e:	4b85      	ldr	r3, [pc, #532]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	f103 0418 	add.w	r4, r3, #24
 800e396:	4615      	mov	r5, r2
 800e398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e39a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e39c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e3a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800e3a4:	4b7f      	ldr	r3, [pc, #508]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d04b      	beq.n	800e444 <rfalStartTransceive+0x10c>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 800e3ac:	2340      	movs	r3, #64	; 0x40
 800e3ae:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800e3b0:	4b7c      	ldr	r3, [pc, #496]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e3b2:	785b      	ldrb	r3, [r3, #1]
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d102      	bne.n	800e3be <rfalStartTransceive+0x86>
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	33d4      	adds	r3, #212	; 0xd4
 800e3bc:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800e3be:	4b79      	ldr	r3, [pc, #484]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e3c0:	785b      	ldrb	r3, [r3, #1]
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	d102      	bne.n	800e3cc <rfalStartTransceive+0x94>
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	33d4      	adds	r3, #212	; 0xd4
 800e3ca:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 800e3cc:	4b75      	ldr	r3, [pc, #468]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e3ce:	785b      	ldrb	r3, [r3, #1]
 800e3d0:	2b03      	cmp	r3, #3
 800e3d2:	d103      	bne.n	800e3dc <rfalStartTransceive+0xa4>
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e3da:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 800e3dc:	4b71      	ldr	r3, [pc, #452]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e3de:	785b      	ldrb	r3, [r3, #1]
 800e3e0:	2b07      	cmp	r3, #7
 800e3e2:	d102      	bne.n	800e3ea <rfalStartTransceive+0xb2>
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	3340      	adds	r3, #64	; 0x40
 800e3e8:	60fb      	str	r3, [r7, #12]
            
            /* Ensure that MRT is using 64/fc steps */
            st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 800e3ea:	2108      	movs	r1, #8
 800e3ec:	2012      	movs	r0, #18
 800e3ee:	f002 fdc9 	bl	8010f84 <st25r3916ClrRegisterBits>
            
            
            /* If Correlator is being used further adjustment is required for NFCB */
            if( (st25r3916CheckReg(ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, 0x00U)) && (gRFAL.mode == RFAL_MODE_POLL_NFCB) )
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	2104      	movs	r1, #4
 800e3f6:	200a      	movs	r0, #10
 800e3f8:	f002 feac 	bl	8011154 <st25r3916CheckReg>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00f      	beq.n	800e422 <rfalStartTransceive+0xea>
 800e402:	4b68      	ldr	r3, [pc, #416]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e404:	785b      	ldrb	r3, [r3, #1]
 800e406:	2b03      	cmp	r3, #3
 800e408:	d10b      	bne.n	800e422 <rfalStartTransceive+0xea>
            {
                FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJT_CORR;                                                                                        /* Reduce FDT(Listen)                   */
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	3380      	adds	r3, #128	; 0x80
 800e40e:	60fb      	str	r3, [r7, #12]
                st25r3916SetRegisterBits( ST25R3916_REG_CORR_CONF1, ST25R3916_REG_CORR_CONF1_corr_s3 );                                                 /* Ensure BPSK start to 33 pilot pulses */
 800e410:	2108      	movs	r1, #8
 800e412:	204c      	movs	r0, #76	; 0x4c
 800e414:	f002 fded 	bl	8010ff2 <st25r3916SetRegisterBits>
                st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 800e418:	2214      	movs	r2, #20
 800e41a:	211f      	movs	r1, #31
 800e41c:	2046      	movs	r0, #70	; 0x46
 800e41e:	f002 fe15 	bl	801104c <st25r3916ChangeRegisterBits>
            }
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 800e422:	4b60      	ldr	r3, [pc, #384]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d806      	bhi.n	800e43a <rfalStartTransceive+0x102>
 800e42c:	4b5d      	ldr	r3, [pc, #372]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e42e:	68da      	ldr	r2, [r3, #12]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	1ad3      	subs	r3, r2, r3
 800e434:	099b      	lsrs	r3, r3, #6
 800e436:	b2db      	uxtb	r3, r3
 800e438:	e000      	b.n	800e43c <rfalStartTransceive+0x104>
 800e43a:	2304      	movs	r3, #4
 800e43c:	4619      	mov	r1, r3
 800e43e:	200f      	movs	r0, #15
 800e440:	f002 fcb6 	bl	8010db0 <st25r3916WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800e444:	4b57      	ldr	r3, [pc, #348]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e44c:	d046      	beq.n	800e4dc <rfalStartTransceive+0x1a4>
 800e44e:	4b55      	ldr	r3, [pc, #340]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e452:	2b00      	cmp	r3, #0
 800e454:	d042      	beq.n	800e4dc <rfalStartTransceive+0x1a4>
        {
            /* Ensure proper timing configuration */
            if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 800e456:	4b53      	ldr	r3, [pc, #332]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e458:	68da      	ldr	r2, [r3, #12]
 800e45a:	4b52      	ldr	r3, [pc, #328]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e45e:	429a      	cmp	r2, r3
 800e460:	d301      	bcc.n	800e466 <rfalStartTransceive+0x12e>
            {
                return ERR_PARAM;
 800e462:	2307      	movs	r3, #7
 800e464:	e099      	b.n	800e59a <rfalStartTransceive+0x262>
            }
            
            FxTAdj = RFAL_FWT_ADJUSTMENT;
 800e466:	2340      	movs	r3, #64	; 0x40
 800e468:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800e46a:	4b4e      	ldr	r3, [pc, #312]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e46c:	785b      	ldrb	r3, [r3, #1]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d103      	bne.n	800e47a <rfalStartTransceive+0x142>
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800e478:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800e47a:	4b4a      	ldr	r3, [pc, #296]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e47c:	785b      	ldrb	r3, [r3, #1]
 800e47e:	2b02      	cmp	r3, #2
 800e480:	d103      	bne.n	800e48a <rfalStartTransceive+0x152>
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800e488:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 800e48a:	4b46      	ldr	r3, [pc, #280]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e48c:	785b      	ldrb	r3, [r3, #1]
 800e48e:	2b03      	cmp	r3, #3
 800e490:	d103      	bne.n	800e49a <rfalStartTransceive+0x162>
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e498:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 800e49a:	4b42      	ldr	r3, [pc, #264]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e49c:	785b      	ldrb	r3, [r3, #1]
 800e49e:	2b06      	cmp	r3, #6
 800e4a0:	d10b      	bne.n	800e4ba <rfalStartTransceive+0x182>
            {
                FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 800e4a2:	4b40      	ldr	r3, [pc, #256]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e4a4:	789b      	ldrb	r3, [r3, #2]
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d102      	bne.n	800e4b0 <rfalStartTransceive+0x178>
 800e4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4ae:	e001      	b.n	800e4b4 <rfalStartTransceive+0x17c>
 800e4b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	60fb      	str	r3, [r7, #12]
            }
            
            /* Ensure that the given FWT doesn't exceed NRT maximum */
            gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3916_NRT_MAX_1FC );
 800e4ba:	4b3a      	ldr	r3, [pc, #232]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e4bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	4a39      	ldr	r2, [pc, #228]	; (800e5a8 <rfalStartTransceive+0x270>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	bf28      	it	cs
 800e4c8:	4613      	movcs	r3, r2
 800e4ca:	4a36      	ldr	r2, [pc, #216]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e4cc:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* Set FWT in the NRT */
            st25r3916SetNoResponseTime( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 800e4ce:	4b35      	ldr	r3, [pc, #212]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4d2:	099b      	lsrs	r3, r3, #6
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f001 ff91 	bl	80103fc <st25r3916SetNoResponseTime>
 800e4da:	e002      	b.n	800e4e2 <rfalStartTransceive+0x1aa>
        }
        else
        {
            /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 800e4dc:	2000      	movs	r0, #0
 800e4de:	f001 ff8d 	bl	80103fc <st25r3916SetNoResponseTime>
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 800e4e2:	4b30      	ldr	r3, [pc, #192]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e4e4:	2203      	movs	r2, #3
 800e4e6:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 800e4e8:	4b2e      	ldr	r3, [pc, #184]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e4ea:	220b      	movs	r2, #11
 800e4ec:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800e4ee:	4b2d      	ldr	r3, [pc, #180]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e4f0:	2202      	movs	r2, #2
 800e4f2:	82da      	strh	r2, [r3, #22]
        
        
    #if RFAL_FEATURE_NFCV
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800e4f4:	4b2b      	ldr	r3, [pc, #172]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e4f6:	785b      	ldrb	r3, [r3, #1]
 800e4f8:	2b07      	cmp	r3, #7
 800e4fa:	d003      	beq.n	800e504 <rfalStartTransceive+0x1cc>
 800e4fc:	4b29      	ldr	r3, [pc, #164]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e4fe:	785b      	ldrb	r3, [r3, #1]
 800e500:	2b08      	cmp	r3, #8
 800e502:	d128      	bne.n	800e556 <rfalStartTransceive+0x21e>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 800e504:	4a27      	ldr	r2, [pc, #156]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e506:	4b27      	ldr	r3, [pc, #156]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e508:	f502 741d 	add.w	r4, r2, #628	; 0x274
 800e50c:	f103 0518 	add.w	r5, r3, #24
 800e510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e514:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e518:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 800e51c:	4b21      	ldr	r3, [pc, #132]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e51e:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800e522:	2b00      	cmp	r3, #0
 800e524:	d001      	beq.n	800e52a <rfalStartTransceive+0x1f2>
 800e526:	4b21      	ldr	r3, [pc, #132]	; (800e5ac <rfalStartTransceive+0x274>)
 800e528:	e000      	b.n	800e52c <rfalStartTransceive+0x1f4>
 800e52a:	2300      	movs	r3, #0
 800e52c:	4a1d      	ldr	r2, [pc, #116]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e52e:	6213      	str	r3, [r2, #32]
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 800e530:	4b1c      	ldr	r3, [pc, #112]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e532:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 800e536:	849a      	strh	r2, [r3, #36]	; 0x24
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 800e538:	4b1a      	ldr	r3, [pc, #104]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e53a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e53e:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800e542:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 800e546:	4a17      	ldr	r2, [pc, #92]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e548:	62d3      	str	r3, [r2, #44]	; 0x2c
          
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 800e54a:	4b16      	ldr	r3, [pc, #88]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e54c:	699b      	ldr	r3, [r3, #24]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d001      	beq.n	800e556 <rfalStartTransceive+0x21e>
            {
                return  ERR_NONE;
 800e552:	2300      	movs	r3, #0
 800e554:	e021      	b.n	800e59a <rfalStartTransceive+0x262>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 800e556:	4b13      	ldr	r3, [pc, #76]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e558:	699b      	ldr	r3, [r3, #24]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d003      	beq.n	800e566 <rfalStartTransceive+0x22e>
 800e55e:	4b11      	ldr	r3, [pc, #68]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e560:	8b9b      	ldrh	r3, [r3, #28]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d116      	bne.n	800e594 <rfalStartTransceive+0x25c>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800e566:	f000 f989 	bl	800e87c <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 800e56a:	4b0e      	ldr	r3, [pc, #56]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e56c:	785b      	ldrb	r3, [r3, #1]
 800e56e:	2b09      	cmp	r3, #9
 800e570:	d003      	beq.n	800e57a <rfalStartTransceive+0x242>
 800e572:	4b0c      	ldr	r3, [pc, #48]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e574:	785b      	ldrb	r3, [r3, #1]
 800e576:	2b0d      	cmp	r3, #13
 800e578:	d103      	bne.n	800e582 <rfalStartTransceive+0x24a>
            {
                st25r3916TxOff();
 800e57a:	2108      	movs	r1, #8
 800e57c:	2002      	movs	r0, #2
 800e57e:	f002 fd01 	bl	8010f84 <st25r3916ClrRegisterBits>
            } 
            
            /* No Tx done, enable the Receiver */
            st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800e582:	20d1      	movs	r0, #209	; 0xd1
 800e584:	f002 fc9d 	bl	8010ec2 <st25r3916ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3916ExecuteCommand( ST25R3916_CMD_START_NO_RESPONSE_TIMER );
 800e588:	20e3      	movs	r0, #227	; 0xe3
 800e58a:	f002 fc9a 	bl	8010ec2 <st25r3916ExecuteCommand>

            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800e58e:	4b05      	ldr	r3, [pc, #20]	; (800e5a4 <rfalStartTransceive+0x26c>)
 800e590:	2251      	movs	r2, #81	; 0x51
 800e592:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 800e594:	2300      	movs	r3, #0
 800e596:	e000      	b.n	800e59a <rfalStartTransceive+0x262>
    }
    
    return ERR_WRONG_STATE;
 800e598:	2321      	movs	r3, #33	; 0x21
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bdb0      	pop	{r4, r5, r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	20000758 	.word	0x20000758
 800e5a8:	0ffff000 	.word	0x0ffff000
 800e5ac:	200007c0 	.word	0x200007c0

0800e5b0 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800e5b4:	4b09      	ldr	r3, [pc, #36]	; (800e5dc <rfalIsTransceiveInTx+0x2c>)
 800e5b6:	7d1b      	ldrb	r3, [r3, #20]
 800e5b8:	2b0a      	cmp	r3, #10
 800e5ba:	d905      	bls.n	800e5c8 <rfalIsTransceiveInTx+0x18>
 800e5bc:	4b07      	ldr	r3, [pc, #28]	; (800e5dc <rfalIsTransceiveInTx+0x2c>)
 800e5be:	7d1b      	ldrb	r3, [r3, #20]
 800e5c0:	2b50      	cmp	r3, #80	; 0x50
 800e5c2:	d801      	bhi.n	800e5c8 <rfalIsTransceiveInTx+0x18>
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	e000      	b.n	800e5ca <rfalIsTransceiveInTx+0x1a>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	f003 0301 	and.w	r3, r3, #1
 800e5ce:	b2db      	uxtb	r3, r3
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop
 800e5dc:	20000758 	.word	0x20000758

0800e5e0 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800e5e4:	4b05      	ldr	r3, [pc, #20]	; (800e5fc <rfalIsTransceiveInRx+0x1c>)
 800e5e6:	7d1b      	ldrb	r3, [r3, #20]
 800e5e8:	2b50      	cmp	r3, #80	; 0x50
 800e5ea:	bf8c      	ite	hi
 800e5ec:	2301      	movhi	r3, #1
 800e5ee:	2300      	movls	r3, #0
 800e5f0:	b2db      	uxtb	r3, r3
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	20000758 	.word	0x20000758

0800e600 <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b08c      	sub	sp, #48	; 0x30
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	607a      	str	r2, [r7, #4]
 800e60a:	461a      	mov	r2, r3
 800e60c:	460b      	mov	r3, r1
 800e60e:	817b      	strh	r3, [r7, #10]
 800e610:	4613      	mov	r3, r2
 800e612:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	613b      	str	r3, [r7, #16]
 800e618:	897b      	ldrh	r3, [r7, #10]
 800e61a:	00db      	lsls	r3, r3, #3
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	82bb      	strh	r3, [r7, #20]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	61bb      	str	r3, [r7, #24]
 800e624:	893b      	ldrh	r3, [r7, #8]
 800e626:	00db      	lsls	r3, r3, #3
 800e628:	b29b      	uxth	r3, r3
 800e62a:	83bb      	strh	r3, [r7, #28]
 800e62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62e:	623b      	str	r3, [r7, #32]
 800e630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e632:	627b      	str	r3, [r7, #36]	; 0x24
 800e634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e636:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800e638:	f107 0310 	add.w	r3, r7, #16
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7ff fe7b 	bl	800e338 <rfalStartTransceive>
 800e642:	4603      	mov	r3, r0
 800e644:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e646:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d001      	beq.n	800e650 <rfalTransceiveBlockingTx+0x50>
 800e64c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e64e:	e002      	b.n	800e656 <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 800e650:	f000 f805 	bl	800e65e <rfalTransceiveRunBlockingTx>
 800e654:	4603      	mov	r3, r0
}
 800e656:	4618      	mov	r0, r3
 800e658:	3730      	adds	r7, #48	; 0x30
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b082      	sub	sp, #8
 800e662:	af00      	add	r7, sp, #0
    ReturnCode ret;
        
    do{
        rfalWorker();
 800e664:	f000 f8a6 	bl	800e7b4 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800e668:	f000 f892 	bl	800e790 <rfalGetTransceiveStatus>
 800e66c:	4603      	mov	r3, r0
 800e66e:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800e670:	f7ff ff9e 	bl	800e5b0 <rfalIsTransceiveInTx>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d002      	beq.n	800e680 <rfalTransceiveRunBlockingTx+0x22>
 800e67a:	88fb      	ldrh	r3, [r7, #6]
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d0f1      	beq.n	800e664 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 800e680:	f7ff ffae 	bl	800e5e0 <rfalIsTransceiveInRx>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d001      	beq.n	800e68e <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 800e68a:	2300      	movs	r3, #0
 800e68c:	e000      	b.n	800e690 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 800e68e:	88fb      	ldrh	r3, [r7, #6]
}
 800e690:	4618      	mov	r0, r3
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 800e69e:	f000 f889 	bl	800e7b4 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800e6a2:	f000 f875 	bl	800e790 <rfalGetTransceiveStatus>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );    
 800e6aa:	f7ff ff99 	bl	800e5e0 <rfalIsTransceiveInRx>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d002      	beq.n	800e6ba <rfalTransceiveBlockingRx+0x22>
 800e6b4:	88fb      	ldrh	r3, [r7, #6]
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d0f1      	beq.n	800e69e <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 800e6ba:	88fb      	ldrh	r3, [r7, #6]
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b08a      	sub	sp, #40	; 0x28
 800e6c8:	af04      	add	r7, sp, #16
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	607a      	str	r2, [r7, #4]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	817b      	strh	r3, [r7, #10]
 800e6d4:	4613      	mov	r3, r2
 800e6d6:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 800e6d8:	893a      	ldrh	r2, [r7, #8]
 800e6da:	8979      	ldrh	r1, [r7, #10]
 800e6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6de:	9302      	str	r3, [sp, #8]
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	9301      	str	r3, [sp, #4]
 800e6e4:	6a3b      	ldr	r3, [r7, #32]
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	68f8      	ldr	r0, [r7, #12]
 800e6ee:	f7ff ff87 	bl	800e600 <rfalTransceiveBlockingTx>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	82fb      	strh	r3, [r7, #22]
 800e6f6:	8afb      	ldrh	r3, [r7, #22]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d001      	beq.n	800e700 <rfalTransceiveBlockingTxRx+0x3c>
 800e6fc:	8afb      	ldrh	r3, [r7, #22]
 800e6fe:	e00e      	b.n	800e71e <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 800e700:	f7ff ffca 	bl	800e698 <rfalTransceiveBlockingRx>
 800e704:	4603      	mov	r3, r0
 800e706:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 800e708:	6a3b      	ldr	r3, [r7, #32]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d006      	beq.n	800e71c <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen = rfalConvBitsToBytes(*actLen);
 800e70e:	6a3b      	ldr	r3, [r7, #32]
 800e710:	881b      	ldrh	r3, [r3, #0]
 800e712:	3307      	adds	r3, #7
 800e714:	08db      	lsrs	r3, r3, #3
 800e716:	b29a      	uxth	r2, r3
 800e718:	6a3b      	ldr	r3, [r7, #32]
 800e71a:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 800e71c:	8afb      	ldrh	r3, [r7, #22]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3718      	adds	r7, #24
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
	...

0800e728 <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 800e72c:	4b17      	ldr	r3, [pc, #92]	; (800e78c <rfalRunTransceiveWorker+0x64>)
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	2b03      	cmp	r3, #3
 800e732:	d127      	bne.n	800e784 <rfalRunTransceiveWorker+0x5c>
    {
        /*******************************************************************************/
        /* Check Transceive Sanity Timer has expired */
        if( gRFAL.tmr.txRx != RFAL_TIMING_NONE )
 800e734:	4b15      	ldr	r3, [pc, #84]	; (800e78c <rfalRunTransceiveWorker+0x64>)
 800e736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00d      	beq.n	800e758 <rfalRunTransceiveWorker+0x30>
        {
            if( rfalTimerisExpired( gRFAL.tmr.txRx ) )
 800e73c:	4b13      	ldr	r3, [pc, #76]	; (800e78c <rfalRunTransceiveWorker+0x64>)
 800e73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e740:	4618      	mov	r0, r3
 800e742:	f7f6 f80b 	bl	800475c <timerIsExpired>
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d005      	beq.n	800e758 <rfalRunTransceiveWorker+0x30>
            {
                /* If sanity timer has expired abort ongoing transceive and signal error */
                gRFAL.TxRx.status = ERR_IO;
 800e74c:	4b0f      	ldr	r3, [pc, #60]	; (800e78c <rfalRunTransceiveWorker+0x64>)
 800e74e:	2203      	movs	r2, #3
 800e750:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e752:	4b0e      	ldr	r3, [pc, #56]	; (800e78c <rfalRunTransceiveWorker+0x64>)
 800e754:	225a      	movs	r2, #90	; 0x5a
 800e756:	751a      	strb	r2, [r3, #20]
            }
        }
        
        /*******************************************************************************/
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 800e758:	f7ff ff2a 	bl	800e5b0 <rfalIsTransceiveInTx>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d005      	beq.n	800e76e <rfalRunTransceiveWorker+0x46>
        {
            rfalTransceiveTx();
 800e762:	f000 f95d 	bl	800ea20 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 800e766:	f000 f813 	bl	800e790 <rfalGetTransceiveStatus>
 800e76a:	4603      	mov	r3, r0
 800e76c:	e00b      	b.n	800e786 <rfalRunTransceiveWorker+0x5e>
        }
        if( rfalIsTransceiveInRx() )
 800e76e:	f7ff ff37 	bl	800e5e0 <rfalIsTransceiveInRx>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d005      	beq.n	800e784 <rfalRunTransceiveWorker+0x5c>
        {
            rfalTransceiveRx();
 800e778:	f000 fb98 	bl	800eeac <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 800e77c:	f000 f808 	bl	800e790 <rfalGetTransceiveStatus>
 800e780:	4603      	mov	r3, r0
 800e782:	e000      	b.n	800e786 <rfalRunTransceiveWorker+0x5e>
        }
    }    
    return ERR_WRONG_STATE;
 800e784:	2321      	movs	r3, #33	; 0x21
}
 800e786:	4618      	mov	r0, r3
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	20000758 	.word	0x20000758

0800e790 <rfalGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalGetTransceiveStatus( void )
{
 800e790:	b480      	push	{r7}
 800e792:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800e794:	4b06      	ldr	r3, [pc, #24]	; (800e7b0 <rfalGetTransceiveStatus+0x20>)
 800e796:	7d1b      	ldrb	r3, [r3, #20]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d102      	bne.n	800e7a2 <rfalGetTransceiveStatus+0x12>
 800e79c:	4b04      	ldr	r3, [pc, #16]	; (800e7b0 <rfalGetTransceiveStatus+0x20>)
 800e79e:	8adb      	ldrh	r3, [r3, #22]
 800e7a0:	e000      	b.n	800e7a4 <rfalGetTransceiveStatus+0x14>
 800e7a2:	2302      	movs	r3, #2
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop
 800e7b0:	20000758 	.word	0x20000758

0800e7b4 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 800e7b8:	4b07      	ldr	r3, [pc, #28]	; (800e7d8 <rfalWorker+0x24>)
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	2b03      	cmp	r3, #3
 800e7be:	d002      	beq.n	800e7c6 <rfalWorker+0x12>
 800e7c0:	2b05      	cmp	r3, #5
 800e7c2:	d003      	beq.n	800e7cc <rfalWorker+0x18>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800e7c4:	e005      	b.n	800e7d2 <rfalWorker+0x1e>
            rfalRunTransceiveWorker();
 800e7c6:	f7ff ffaf 	bl	800e728 <rfalRunTransceiveWorker>
            break;
 800e7ca:	e002      	b.n	800e7d2 <rfalWorker+0x1e>
            rfalRunWakeUpModeWorker();
 800e7cc:	f001 fa34 	bl	800fc38 <rfalRunWakeUpModeWorker>
            break;
 800e7d0:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 800e7d2:	bf00      	nop
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	20000758 	.word	0x20000758

0800e7dc <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
    uint16_t fifoBytesToRead;
 
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 800e7e2:	f000 fee9 	bl	800f5b8 <rfalFIFOStatusGetNumBytes>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	80fb      	strh	r3, [r7, #6]
    

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 800e7ea:	4b17      	ldr	r3, [pc, #92]	; (800e848 <rfalErrorHandling+0x6c>)
 800e7ec:	785b      	ldrb	r3, [r3, #1]
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d125      	bne.n	800e83e <rfalErrorHandling+0x62>
        
        /*******************************************************************************/
        /* If we received a frame with a incomplete byte we`ll raise a specific error  *
         * ( support for T2T 4 bit ACK / NAK, MIFARE and Kovio )                       */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 800e7f2:	4b15      	ldr	r3, [pc, #84]	; (800e848 <rfalErrorHandling+0x6c>)
 800e7f4:	8adb      	ldrh	r3, [r3, #22]
 800e7f6:	2b1b      	cmp	r3, #27
 800e7f8:	d003      	beq.n	800e802 <rfalErrorHandling+0x26>
 800e7fa:	4b13      	ldr	r3, [pc, #76]	; (800e848 <rfalErrorHandling+0x6c>)
 800e7fc:	8adb      	ldrh	r3, [r3, #22]
 800e7fe:	2b15      	cmp	r3, #21
 800e800:	d11d      	bne.n	800e83e <rfalErrorHandling+0x62>
        {
            if( rfalFIFOStatusIsIncompleteByte() )
 800e802:	f000 fef5 	bl	800f5f0 <rfalFIFOStatusIsIncompleteByte>
 800e806:	4603      	mov	r3, r0
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d018      	beq.n	800e83e <rfalErrorHandling+0x62>
            {
                st25r3916ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 800e80c:	4b0e      	ldr	r3, [pc, #56]	; (800e848 <rfalErrorHandling+0x6c>)
 800e80e:	6a1b      	ldr	r3, [r3, #32]
 800e810:	88fa      	ldrh	r2, [r7, #6]
 800e812:	4611      	mov	r1, r2
 800e814:	4618      	mov	r0, r3
 800e816:	f002 fb38 	bl	8010e8a <st25r3916ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 800e81a:	4b0b      	ldr	r3, [pc, #44]	; (800e848 <rfalErrorHandling+0x6c>)
 800e81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d007      	beq.n	800e832 <rfalErrorHandling+0x56>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 800e822:	f000 ff09 	bl	800f638 <rfalFIFOGetNumIncompleteBits>
 800e826:	4603      	mov	r3, r0
 800e828:	461a      	mov	r2, r3
 800e82a:	4b07      	ldr	r3, [pc, #28]	; (800e848 <rfalErrorHandling+0x6c>)
 800e82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e82e:	b292      	uxth	r2, r2
 800e830:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800e832:	4b05      	ldr	r3, [pc, #20]	; (800e848 <rfalErrorHandling+0x6c>)
 800e834:	2228      	movs	r2, #40	; 0x28
 800e836:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e838:	4b03      	ldr	r3, [pc, #12]	; (800e848 <rfalErrorHandling+0x6c>)
 800e83a:	225a      	movs	r2, #90	; 0x5a
 800e83c:	751a      	strb	r2, [r3, #20]
            }
        }
    }
    
}
 800e83e:	bf00      	nop
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	20000758 	.word	0x20000758

0800e84c <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 800e850:	21e0      	movs	r1, #224	; 0xe0
 800e852:	2005      	movs	r0, #5
 800e854:	f002 fb96 	bl	8010f84 <st25r3916ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e858:	2108      	movs	r1, #8
 800e85a:	200c      	movs	r0, #12
 800e85c:	f002 fbc9 	bl	8010ff2 <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Transceive timers                                                           */
    /*******************************************************************************/
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800e860:	4b05      	ldr	r3, [pc, #20]	; (800e878 <rfalCleanupTransceive+0x2c>)
 800e862:	2200      	movs	r2, #0
 800e864:	645a      	str	r2, [r3, #68]	; 0x44
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 800e866:	4b04      	ldr	r3, [pc, #16]	; (800e878 <rfalCleanupTransceive+0x2c>)
 800e868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d002      	beq.n	800e874 <rfalCleanupTransceive+0x28>
    {
        gRFAL.callbacks.postTxRx();
 800e86e:	4b02      	ldr	r3, [pc, #8]	; (800e878 <rfalCleanupTransceive+0x2c>)
 800e870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e872:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 800e874:	bf00      	nop
 800e876:	bd80      	pop	{r7, pc}
 800e878:	20000758 	.word	0x20000758

0800e87c <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
    uint32_t maskInterrupts;
    uint8_t  reg;
    
    /* If we are in RW or AP2P mode */
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 800e882:	4b64      	ldr	r3, [pc, #400]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e884:	785b      	ldrb	r3, [r3, #1]
 800e886:	2b0a      	cmp	r3, #10
 800e888:	d00e      	beq.n	800e8a8 <rfalPrepareTransceive+0x2c>
 800e88a:	4b62      	ldr	r3, [pc, #392]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e88c:	785b      	ldrb	r3, [r3, #1]
 800e88e:	2b0b      	cmp	r3, #11
 800e890:	d00a      	beq.n	800e8a8 <rfalPrepareTransceive+0x2c>
 800e892:	4b60      	ldr	r3, [pc, #384]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e894:	785b      	ldrb	r3, [r3, #1]
 800e896:	2b0c      	cmp	r3, #12
 800e898:	d006      	beq.n	800e8a8 <rfalPrepareTransceive+0x2c>
    {
        /* Reset receive logic with STOP command */
        st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 800e89a:	20c2      	movs	r0, #194	; 0xc2
 800e89c:	f002 fb11 	bl	8010ec2 <st25r3916ExecuteCommand>
    
        /* Reset Rx Gain */
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 800e8a0:	20d5      	movs	r0, #213	; 0xd5
 800e8a2:	f002 fb0e 	bl	8010ec2 <st25r3916ExecuteCommand>
 800e8a6:	e002      	b.n	800e8ae <rfalPrepareTransceive+0x32>
    }
    else
    {
        /* In Passive Listen Mode do not use STOP as it stops FDT timer */
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800e8a8:	20db      	movs	r0, #219	; 0xdb
 800e8aa:	f002 fb0a 	bl	8010ec2 <st25r3916ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800e8ae:	4b59      	ldr	r3, [pc, #356]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e8b0:	785b      	ldrb	r3, [r3, #1]
 800e8b2:	2b09      	cmp	r3, #9
 800e8b4:	d01c      	beq.n	800e8f0 <rfalPrepareTransceive+0x74>
 800e8b6:	4b57      	ldr	r3, [pc, #348]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e8b8:	785b      	ldrb	r3, [r3, #1]
 800e8ba:	2b0d      	cmp	r3, #13
 800e8bc:	d018      	beq.n	800e8f0 <rfalPrepareTransceive+0x74>
    {
        /* In Passive communications General Purpose Timer is used to measure FDT Poll */
        if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800e8be:	4b55      	ldr	r3, [pc, #340]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d014      	beq.n	800e8f0 <rfalPrepareTransceive+0x74>
        {
            /* Configure GPT to start at RX end */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 800e8c6:	4b53      	ldr	r3, [pc, #332]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e8c8:	691b      	ldr	r3, [r3, #16]
 800e8ca:	f240 423b 	movw	r2, #1083	; 0x43b
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d804      	bhi.n	800e8dc <rfalPrepareTransceive+0x60>
 800e8d2:	4b50      	ldr	r3, [pc, #320]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	08db      	lsrs	r3, r3, #3
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	e005      	b.n	800e8e8 <rfalPrepareTransceive+0x6c>
 800e8dc:	4b4d      	ldr	r3, [pc, #308]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e8de:	691b      	ldr	r3, [r3, #16]
 800e8e0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800e8e4:	08db      	lsrs	r3, r3, #3
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	2120      	movs	r1, #32
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f001 fddb 	bl	80104a6 <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 800e8f0:	4b48      	ldr	r3, [pc, #288]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e8f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d002      	beq.n	800e8fe <rfalPrepareTransceive+0x82>
    {
        gRFAL.callbacks.preTxRx();
 800e8f8:	4b46      	ldr	r3, [pc, #280]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e8fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8fc:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    
    maskInterrupts = ( ST25R3916_IRQ_MASK_FWL  | ST25R3916_IRQ_MASK_TXE  |
 800e8fe:	4b46      	ldr	r3, [pc, #280]	; (800ea18 <rfalPrepareTransceive+0x19c>)
 800e900:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3916_REG_ISO14443A_NFC_no_tx_par_off | ST25R3916_REG_ISO14443A_NFC_no_rx_par_off | ST25R3916_REG_ISO14443A_NFC_nfc_f0_off);
 800e902:	2300      	movs	r3, #0
 800e904:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 800e906:	4b43      	ldr	r3, [pc, #268]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90a:	f003 0304 	and.w	r3, r3, #4
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d003      	beq.n	800e91a <rfalPrepareTransceive+0x9e>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_nfc_f0;
 800e912:	78fb      	ldrb	r3, [r7, #3]
 800e914:	f043 0320 	orr.w	r3, r3, #32
 800e918:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 800e91a:	4b3e      	ldr	r3, [pc, #248]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e91e:	f003 0310 	and.w	r3, r3, #16
 800e922:	2b00      	cmp	r3, #0
 800e924:	d003      	beq.n	800e92e <rfalPrepareTransceive+0xb2>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_rx_par;
 800e926:	78fb      	ldrb	r3, [r7, #3]
 800e928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e92c:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 800e92e:	4b39      	ldr	r3, [pc, #228]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e932:	f003 0320 	and.w	r3, r3, #32
 800e936:	2b00      	cmp	r3, #0
 800e938:	d003      	beq.n	800e942 <rfalPrepareTransceive+0xc6>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_tx_par;
 800e93a:	78fb      	ldrb	r3, [r7, #3]
 800e93c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e940:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0), reg );
 800e942:	78fb      	ldrb	r3, [r7, #3]
 800e944:	461a      	mov	r2, r3
 800e946:	21e0      	movs	r1, #224	; 0xe0
 800e948:	2005      	movs	r0, #5
 800e94a:	f002 fb7f 	bl	801104c <st25r3916ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 800e94e:	4b31      	ldr	r3, [pc, #196]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e952:	f003 0308 	and.w	r3, r3, #8
 800e956:	2b00      	cmp	r3, #0
 800e958:	d004      	beq.n	800e964 <rfalPrepareTransceive+0xe8>
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e95a:	2108      	movs	r1, #8
 800e95c:	200c      	movs	r0, #12
 800e95e:	f002 fb11 	bl	8010f84 <st25r3916ClrRegisterBits>
 800e962:	e003      	b.n	800e96c <rfalPrepareTransceive+0xf0>
    }
    else
    {
        st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800e964:	2108      	movs	r1, #8
 800e966:	200c      	movs	r0, #12
 800e968:	f002 fb43 	bl	8010ff2 <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800e96c:	4b29      	ldr	r3, [pc, #164]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e96e:	79db      	ldrb	r3, [r3, #7]
 800e970:	2b02      	cmp	r3, #2
 800e972:	d108      	bne.n	800e986 <rfalPrepareTransceive+0x10a>
    {
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800e974:	2102      	movs	r1, #2
 800e976:	2012      	movs	r0, #18
 800e978:	f002 fb3b 	bl	8010ff2 <st25r3916SetRegisterBits>
        maskInterrupts |= ST25R3916_IRQ_MASK_RX_REST;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f043 0302 	orr.w	r3, r3, #2
 800e982:	607b      	str	r3, [r7, #4]
 800e984:	e003      	b.n	800e98e <rfalPrepareTransceive+0x112>
    }
    else
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800e986:	2102      	movs	r1, #2
 800e988:	2012      	movs	r0, #18
 800e98a:	f002 fafb 	bl	8010f84 <st25r3916ClrRegisterBits>
    }
    /*******************************************************************************/
    
    /* In Passive Listen mode additionally enable External Field interrupts  */    
    if( rfalIsModePassiveListen( gRFAL.mode ) )
 800e98e:	4b21      	ldr	r3, [pc, #132]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e990:	785b      	ldrb	r3, [r3, #1]
 800e992:	2b0a      	cmp	r3, #10
 800e994:	d007      	beq.n	800e9a6 <rfalPrepareTransceive+0x12a>
 800e996:	4b1f      	ldr	r3, [pc, #124]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e998:	785b      	ldrb	r3, [r3, #1]
 800e99a:	2b0b      	cmp	r3, #11
 800e99c:	d003      	beq.n	800e9a6 <rfalPrepareTransceive+0x12a>
 800e99e:	4b1d      	ldr	r3, [pc, #116]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e9a0:	785b      	ldrb	r3, [r3, #1]
 800e9a2:	2b0c      	cmp	r3, #12
 800e9a4:	d103      	bne.n	800e9ae <rfalPrepareTransceive+0x132>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_F );      /* Enable external Field interrupts to detect Link Loss and SENF_REQ auto responses */
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
 800e9ac:	607b      	str	r3, [r7, #4]
    }
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 800e9ae:	4b19      	ldr	r3, [pc, #100]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e9b0:	785b      	ldrb	r3, [r3, #1]
 800e9b2:	2b09      	cmp	r3, #9
 800e9b4:	d003      	beq.n	800e9be <rfalPrepareTransceive+0x142>
 800e9b6:	4b17      	ldr	r3, [pc, #92]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e9b8:	785b      	ldrb	r3, [r3, #1]
 800e9ba:	2b0d      	cmp	r3, #13
 800e9bc:	d105      	bne.n	800e9ca <rfalPrepareTransceive+0x14e>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e9c4:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800e9c8:	607b      	str	r3, [r7, #4]
    }
    
    /*******************************************************************************/
    /* Start transceive Sanity Timer if a FWT is used */
    if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800e9ca:	4b12      	ldr	r3, [pc, #72]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d2:	d013      	beq.n	800e9fc <rfalPrepareTransceive+0x180>
 800e9d4:	4b0f      	ldr	r3, [pc, #60]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00f      	beq.n	800e9fc <rfalPrepareTransceive+0x180>
    {
        rfalTimerStart( gRFAL.tmr.txRx, rfalCalcSanityTmr( gRFAL.TxRx.ctx.fwt ) );
 800e9dc:	4b0d      	ldr	r3, [pc, #52]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9e0:	4a0e      	ldr	r2, [pc, #56]	; (800ea1c <rfalPrepareTransceive+0x1a0>)
 800e9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9e6:	0b1b      	lsrs	r3, r3, #12
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7f5 fea5 	bl	8004740 <timerCalculateTimer>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	4b06      	ldr	r3, [pc, #24]	; (800ea14 <rfalPrepareTransceive+0x198>)
 800e9fa:	645a      	str	r2, [r3, #68]	; 0x44
    /*******************************************************************************/
    
    
    /*******************************************************************************/
    /* Clear and enable these interrupts */
    st25r3916GetInterrupt( maskInterrupts );
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f002 fd33 	bl	8011468 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( maskInterrupts );
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f002 fd68 	bl	80114d8 <st25r3916EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800ea08:	f000 fdc8 	bl	800f59c <rfalFIFOStatusClear>
}
 800ea0c:	bf00      	nop
 800ea0e:	3708      	adds	r7, #8
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	20000758 	.word	0x20000758
 800ea18:	00f04078 	.word	0x00f04078
 800ea1c:	4d542005 	.word	0x4d542005

0800ea20 <rfalTransceiveTx>:


/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 800ea20:	b5b0      	push	{r4, r5, r7, lr}
 800ea22:	b08a      	sub	sp, #40	; 0x28
 800ea24:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 800ea26:	2300      	movs	r3, #0
 800ea28:	81fb      	strh	r3, [r7, #14]
    NO_WARNING( ret );
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800ea2e:	4ba1      	ldr	r3, [pc, #644]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ea30:	7d1a      	ldrb	r2, [r3, #20]
 800ea32:	4ba0      	ldr	r3, [pc, #640]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ea34:	7d5b      	ldrb	r3, [r3, #21]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d003      	beq.n	800ea42 <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800ea3a:	4b9e      	ldr	r3, [pc, #632]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ea3c:	7d1a      	ldrb	r2, [r3, #20]
 800ea3e:	4b9d      	ldr	r3, [pc, #628]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ea40:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800ea42:	4b9c      	ldr	r3, [pc, #624]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ea44:	7d1b      	ldrb	r3, [r3, #20]
 800ea46:	3b0b      	subs	r3, #11
 800ea48:	2b08      	cmp	r3, #8
 800ea4a:	f200 8212 	bhi.w	800ee72 <rfalTransceiveTx+0x452>
 800ea4e:	a201      	add	r2, pc, #4	; (adr r2, 800ea54 <rfalTransceiveTx+0x34>)
 800ea50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea54:	0800ea79 	.word	0x0800ea79
 800ea58:	0800ea7f 	.word	0x0800ea7f
 800ea5c:	0800ea9d 	.word	0x0800ea9d
 800ea60:	0800eac5 	.word	0x0800eac5
 800ea64:	0800ec45 	.word	0x0800ec45
 800ea68:	0800ec81 	.word	0x0800ec81
 800ea6c:	0800edc3 	.word	0x0800edc3
 800ea70:	0800edfd 	.word	0x0800edfd
 800ea74:	0800ee49 	.word	0x0800ee49
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 800ea78:	4b8e      	ldr	r3, [pc, #568]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ea7a:	220c      	movs	r2, #12
 800ea7c:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 800ea7e:	f7ff fbc3 	bl	800e208 <rfalIsGTExpired>
 800ea82:	4603      	mov	r3, r0
 800ea84:	f083 0301 	eor.w	r3, r3, #1
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f040 81f8 	bne.w	800ee80 <rfalTransceiveTx+0x460>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800ea90:	4b88      	ldr	r3, [pc, #544]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	63da      	str	r2, [r3, #60]	; 0x3c
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 800ea96:	4b87      	ldr	r3, [pc, #540]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ea98:	220d      	movs	r2, #13
 800ea9a:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 800ea9c:	4b85      	ldr	r3, [pc, #532]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ea9e:	785b      	ldrb	r3, [r3, #1]
 800eaa0:	2b09      	cmp	r3, #9
 800eaa2:	d00c      	beq.n	800eabe <rfalTransceiveTx+0x9e>
 800eaa4:	4b83      	ldr	r3, [pc, #524]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eaa6:	785b      	ldrb	r3, [r3, #1]
 800eaa8:	2b0d      	cmp	r3, #13
 800eaaa:	d008      	beq.n	800eabe <rfalTransceiveTx+0x9e>
            {
                if( st25r3916IsGPTRunning() )
 800eaac:	2204      	movs	r2, #4
 800eaae:	2104      	movs	r1, #4
 800eab0:	2024      	movs	r0, #36	; 0x24
 800eab2:	f002 fb4f 	bl	8011154 <st25r3916CheckReg>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f040 81e3 	bne.w	800ee84 <rfalTransceiveTx+0x464>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 800eabe:	4b7d      	ldr	r3, [pc, #500]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eac0:	220e      	movs	r2, #14
 800eac2:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800eac4:	f7ff feda 	bl	800e87c <rfalPrepareTransceive>

            /* ST25R3916 has a fixed FIFO water level */
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 800eac8:	4b7a      	ldr	r3, [pc, #488]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eaca:	f44f 729c 	mov.w	r2, #312	; 0x138
 800eace:	869a      	strh	r2, [r3, #52]	; 0x34

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800ead0:	4b78      	ldr	r3, [pc, #480]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ead2:	785b      	ldrb	r3, [r3, #1]
 800ead4:	2b07      	cmp	r3, #7
 800ead6:	d003      	beq.n	800eae0 <rfalTransceiveTx+0xc0>
 800ead8:	4b76      	ldr	r3, [pc, #472]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eada:	785b      	ldrb	r3, [r3, #1]
 800eadc:	2b08      	cmp	r3, #8
 800eade:	d152      	bne.n	800eb86 <rfalTransceiveTx+0x166>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3916WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
#endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 800eae0:	4b74      	ldr	r3, [pc, #464]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800eae8:	4b72      	ldr	r3, [pc, #456]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eaea:	6998      	ldr	r0, [r3, #24]
 800eaec:	4b71      	ldr	r3, [pc, #452]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eaee:	8b9b      	ldrh	r3, [r3, #28]
 800eaf0:	3307      	adds	r3, #7
 800eaf2:	08db      	lsrs	r3, r3, #3
 800eaf4:	b299      	uxth	r1, r3
 800eaf6:	4b6f      	ldr	r3, [pc, #444]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eaf8:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800eafc:	f003 0301 	and.w	r3, r3, #1
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	bf0c      	ite	eq
 800eb04:	2301      	moveq	r3, #1
 800eb06:	2300      	movne	r3, #0
 800eb08:	b2dc      	uxtb	r4, r3
 800eb0a:	4b6a      	ldr	r3, [pc, #424]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eb0c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800eb10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	bf0c      	ite	eq
 800eb18:	2301      	moveq	r3, #1
 800eb1a:	2300      	movne	r3, #0
 800eb1c:	b2dd      	uxtb	r5, r3
 800eb1e:	4b65      	ldr	r3, [pc, #404]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eb20:	785b      	ldrb	r3, [r3, #1]
 800eb22:	2b08      	cmp	r3, #8
 800eb24:	bf0c      	ite	eq
 800eb26:	2301      	moveq	r3, #1
 800eb28:	2300      	movne	r3, #0
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	4a62      	ldr	r2, [pc, #392]	; (800ecb8 <rfalTransceiveTx+0x298>)
 800eb2e:	9205      	str	r2, [sp, #20]
 800eb30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb34:	9204      	str	r2, [sp, #16]
 800eb36:	4a61      	ldr	r2, [pc, #388]	; (800ecbc <rfalTransceiveTx+0x29c>)
 800eb38:	9203      	str	r2, [sp, #12]
 800eb3a:	4a61      	ldr	r2, [pc, #388]	; (800ecc0 <rfalTransceiveTx+0x2a0>)
 800eb3c:	9202      	str	r2, [sp, #8]
 800eb3e:	4a61      	ldr	r2, [pc, #388]	; (800ecc4 <rfalTransceiveTx+0x2a4>)
 800eb40:	9201      	str	r2, [sp, #4]
 800eb42:	9300      	str	r3, [sp, #0]
 800eb44:	462b      	mov	r3, r5
 800eb46:	4622      	mov	r2, r4
 800eb48:	f7fe fb1c 	bl	800d184 <iso15693VCDCode>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3916_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800eb50:	89fb      	ldrh	r3, [r7, #14]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d009      	beq.n	800eb6a <rfalTransceiveTx+0x14a>
 800eb56:	89fb      	ldrh	r3, [r7, #14]
 800eb58:	2b0d      	cmp	r3, #13
 800eb5a:	d006      	beq.n	800eb6a <rfalTransceiveTx+0x14a>
                {
                    gRFAL.TxRx.status = ret;
 800eb5c:	4a55      	ldr	r2, [pc, #340]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eb5e:	89fb      	ldrh	r3, [r7, #14]
 800eb60:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800eb62:	4b54      	ldr	r3, [pc, #336]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eb64:	2213      	movs	r2, #19
 800eb66:	751a      	strb	r2, [r3, #20]
                    break;
 800eb68:	e193      	b.n	800ee92 <rfalTransceiveTx+0x472>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( (uint16_t)rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 800eb6a:	4b52      	ldr	r3, [pc, #328]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eb6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb6e:	00db      	lsls	r3, r3, #3
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	4618      	mov	r0, r3
 800eb74:	f001 fc2a 	bl	80103cc <st25r3916SetNumTxBits>

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, gRFAL.fifo.bytesWritten );
 800eb78:	4b4e      	ldr	r3, [pc, #312]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eb7a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	484f      	ldr	r0, [pc, #316]	; (800ecbc <rfalTransceiveTx+0x29c>)
 800eb80:	f002 f960 	bl	8010e44 <st25r3916WriteFifo>
 800eb84:	e01d      	b.n	800ebc2 <rfalTransceiveTx+0x1a2>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 800eb86:	4b4b      	ldr	r3, [pc, #300]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eb88:	8b9b      	ldrh	r3, [r3, #28]
 800eb8a:	3307      	adds	r3, #7
 800eb8c:	08db      	lsrs	r3, r3, #3
 800eb8e:	b29a      	uxth	r2, r3
 800eb90:	4b48      	ldr	r3, [pc, #288]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eb92:	86da      	strh	r2, [r3, #54]	; 0x36
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 800eb94:	4b47      	ldr	r3, [pc, #284]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eb96:	8b9b      	ldrh	r3, [r3, #28]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f001 fc17 	bl	80103cc <st25r3916SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 800eb9e:	4b45      	ldr	r3, [pc, #276]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eba6:	bf28      	it	cs
 800eba8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ebac:	b29a      	uxth	r2, r3
 800ebae:	4b41      	ldr	r3, [pc, #260]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ebb0:	871a      	strh	r2, [r3, #56]	; 0x38
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 800ebb2:	4b40      	ldr	r3, [pc, #256]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ebb4:	699a      	ldr	r2, [r3, #24]
 800ebb6:	4b3f      	ldr	r3, [pc, #252]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ebb8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ebba:	4619      	mov	r1, r3
 800ebbc:	4610      	mov	r0, r2
 800ebbe:	f002 f941 	bl	8010e44 <st25r3916WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx();
 800ebc2:	4b3c      	ldr	r3, [pc, #240]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ebc4:	795b      	ldrb	r3, [r3, #5]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d008      	beq.n	800ebdc <rfalTransceiveTx+0x1bc>
 800ebca:	4b3a      	ldr	r3, [pc, #232]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ebcc:	795b      	ldrb	r3, [r3, #5]
 800ebce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	2001      	movs	r0, #1
 800ebd8:	f002 f9af 	bl	8010f3a <st25r3916WriteTestRegister>
            
            
            /*******************************************************************************/
            /* If we're in Passive Listen mode ensure that the external field is still On  */
            if( rfalIsModePassiveListen(gRFAL.mode) )
 800ebdc:	4b35      	ldr	r3, [pc, #212]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ebde:	785b      	ldrb	r3, [r3, #1]
 800ebe0:	2b0a      	cmp	r3, #10
 800ebe2:	d007      	beq.n	800ebf4 <rfalTransceiveTx+0x1d4>
 800ebe4:	4b33      	ldr	r3, [pc, #204]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ebe6:	785b      	ldrb	r3, [r3, #1]
 800ebe8:	2b0b      	cmp	r3, #11
 800ebea:	d003      	beq.n	800ebf4 <rfalTransceiveTx+0x1d4>
 800ebec:	4b31      	ldr	r3, [pc, #196]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ebee:	785b      	ldrb	r3, [r3, #1]
 800ebf0:	2b0c      	cmp	r3, #12
 800ebf2:	d10e      	bne.n	800ec12 <rfalTransceiveTx+0x1f2>
            {
                if( !rfalIsExtFieldOn() )
 800ebf4:	f000 fdfe 	bl	800f7f4 <rfalIsExtFieldOn>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	f083 0301 	eor.w	r3, r3, #1
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d006      	beq.n	800ec12 <rfalTransceiveTx+0x1f2>
                {
                    gRFAL.TxRx.status = ERR_LINK_LOSS;
 800ec04:	4b2b      	ldr	r3, [pc, #172]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec06:	2225      	movs	r2, #37	; 0x25
 800ec08:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ec0a:	4b2a      	ldr	r3, [pc, #168]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec0c:	2213      	movs	r2, #19
 800ec0e:	751a      	strb	r2, [r3, #20]
                    break;
 800ec10:	e13f      	b.n	800ee92 <rfalTransceiveTx+0x472>
                }
            }
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 800ec12:	4b28      	ldr	r3, [pc, #160]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec16:	f003 0301 	and.w	r3, r3, #1
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d003      	beq.n	800ec26 <rfalTransceiveTx+0x206>
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITHOUT_CRC );
 800ec1e:	20c5      	movs	r0, #197	; 0xc5
 800ec20:	f002 f94f 	bl	8010ec2 <st25r3916ExecuteCommand>
 800ec24:	e002      	b.n	800ec2c <rfalTransceiveTx+0x20c>
            }
            else
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITH_CRC );
 800ec26:	20c4      	movs	r0, #196	; 0xc4
 800ec28:	f002 f94b 	bl	8010ec2 <st25r3916ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800ec2c:	4b21      	ldr	r3, [pc, #132]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec2e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800ec30:	4b20      	ldr	r3, [pc, #128]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d201      	bcs.n	800ec3c <rfalTransceiveTx+0x21c>
 800ec38:	220f      	movs	r2, #15
 800ec3a:	e000      	b.n	800ec3e <rfalTransceiveTx+0x21e>
 800ec3c:	2211      	movs	r2, #17
 800ec3e:	4b1d      	ldr	r3, [pc, #116]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec40:	751a      	strb	r2, [r3, #20]
            break;
 800ec42:	e126      	b.n	800ee92 <rfalTransceiveTx+0x472>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800ec44:	2048      	movs	r0, #72	; 0x48
 800ec46:	f002 fc0f 	bl	8011468 <st25r3916GetInterrupt>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	f000 8119 	beq.w	800ee88 <rfalTransceiveTx+0x468>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_TXE) == 0U) )
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d008      	beq.n	800ec72 <rfalTransceiveTx+0x252>
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	f003 0308 	and.w	r3, r3, #8
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d103      	bne.n	800ec72 <rfalTransceiveTx+0x252>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 800ec6a:	4b12      	ldr	r3, [pc, #72]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec6c:	2210      	movs	r2, #16
 800ec6e:	751a      	strb	r2, [r3, #20]
 800ec70:	e006      	b.n	800ec80 <rfalTransceiveTx+0x260>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800ec72:	4b10      	ldr	r3, [pc, #64]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec74:	2203      	movs	r2, #3
 800ec76:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ec78:	4b0e      	ldr	r3, [pc, #56]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec7a:	2213      	movs	r2, #19
 800ec7c:	751a      	strb	r2, [r3, #20]
                break;
 800ec7e:	e108      	b.n	800ee92 <rfalTransceiveTx+0x472>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800ec80:	4b0c      	ldr	r3, [pc, #48]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec82:	785b      	ldrb	r3, [r3, #1]
 800ec84:	2b07      	cmp	r3, #7
 800ec86:	d003      	beq.n	800ec90 <rfalTransceiveTx+0x270>
 800ec88:	4b0a      	ldr	r3, [pc, #40]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec8a:	785b      	ldrb	r3, [r3, #1]
 800ec8c:	2b08      	cmp	r3, #8
 800ec8e:	d16d      	bne.n	800ed6c <rfalTransceiveTx+0x34c>
            {
                uint16_t maxLen;
                                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 800ec90:	4b08      	ldr	r3, [pc, #32]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec94:	461a      	mov	r2, r3
 800ec96:	4b07      	ldr	r3, [pc, #28]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec98:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	4a05      	ldr	r2, [pc, #20]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ec9e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800eca0:	4293      	cmp	r3, r2
 800eca2:	da11      	bge.n	800ecc8 <rfalTransceiveTx+0x2a8>
 800eca4:	4b03      	ldr	r3, [pc, #12]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800eca6:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800eca8:	4b02      	ldr	r3, [pc, #8]	; (800ecb4 <rfalTransceiveTx+0x294>)
 800ecaa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	e00c      	b.n	800eccc <rfalTransceiveTx+0x2ac>
 800ecb2:	bf00      	nop
 800ecb4:	20000758 	.word	0x20000758
 800ecb8:	20000790 	.word	0x20000790
 800ecbc:	200007c0 	.word	0x200007c0
 800ecc0:	200009c8 	.word	0x200009c8
 800ecc4:	2000078e 	.word	0x2000078e
 800ecc8:	4b74      	ldr	r3, [pc, #464]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ecca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800eccc:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 800ecce:	89bb      	ldrh	r3, [r7, #12]
 800ecd0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800ecd4:	bf28      	it	cs
 800ecd6:	f44f 7302 	movcs.w	r3, #520	; 0x208
 800ecda:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800ece0:	4b6e      	ldr	r3, [pc, #440]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ece2:	6998      	ldr	r0, [r3, #24]
 800ece4:	4b6d      	ldr	r3, [pc, #436]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ece6:	8b9b      	ldrh	r3, [r3, #28]
 800ece8:	3307      	adds	r3, #7
 800ecea:	08db      	lsrs	r3, r3, #3
 800ecec:	b299      	uxth	r1, r3
 800ecee:	4b6b      	ldr	r3, [pc, #428]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ecf0:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ecf4:	f003 0301 	and.w	r3, r3, #1
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	bf0c      	ite	eq
 800ecfc:	2301      	moveq	r3, #1
 800ecfe:	2300      	movne	r3, #0
 800ed00:	b2dc      	uxtb	r4, r3
 800ed02:	4b66      	ldr	r3, [pc, #408]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ed04:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ed08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	bf0c      	ite	eq
 800ed10:	2301      	moveq	r3, #1
 800ed12:	2300      	movne	r3, #0
 800ed14:	b2dd      	uxtb	r5, r3
 800ed16:	4b61      	ldr	r3, [pc, #388]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ed18:	785b      	ldrb	r3, [r3, #1]
 800ed1a:	2b08      	cmp	r3, #8
 800ed1c:	bf0c      	ite	eq
 800ed1e:	2301      	moveq	r3, #1
 800ed20:	2300      	movne	r3, #0
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	1dba      	adds	r2, r7, #6
 800ed26:	9205      	str	r2, [sp, #20]
 800ed28:	89ba      	ldrh	r2, [r7, #12]
 800ed2a:	9204      	str	r2, [sp, #16]
 800ed2c:	4a5c      	ldr	r2, [pc, #368]	; (800eea0 <rfalTransceiveTx+0x480>)
 800ed2e:	9203      	str	r2, [sp, #12]
 800ed30:	4a5c      	ldr	r2, [pc, #368]	; (800eea4 <rfalTransceiveTx+0x484>)
 800ed32:	9202      	str	r2, [sp, #8]
 800ed34:	4a5c      	ldr	r2, [pc, #368]	; (800eea8 <rfalTransceiveTx+0x488>)
 800ed36:	9201      	str	r2, [sp, #4]
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	462b      	mov	r3, r5
 800ed3c:	4622      	mov	r2, r4
 800ed3e:	f7fe fa21 	bl	800d184 <iso15693VCDCode>
 800ed42:	4603      	mov	r3, r0
 800ed44:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800ed46:	89fb      	ldrh	r3, [r7, #14]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d009      	beq.n	800ed60 <rfalTransceiveTx+0x340>
 800ed4c:	89fb      	ldrh	r3, [r7, #14]
 800ed4e:	2b0d      	cmp	r3, #13
 800ed50:	d006      	beq.n	800ed60 <rfalTransceiveTx+0x340>
                {
                    gRFAL.TxRx.status = ret;
 800ed52:	4a52      	ldr	r2, [pc, #328]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ed54:	89fb      	ldrh	r3, [r7, #14]
 800ed56:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ed58:	4b50      	ldr	r3, [pc, #320]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ed5a:	2213      	movs	r2, #19
 800ed5c:	751a      	strb	r2, [r3, #20]
                    break;
 800ed5e:	e098      	b.n	800ee92 <rfalTransceiveTx+0x472>
                }

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, tmp );
 800ed60:	88fb      	ldrh	r3, [r7, #6]
 800ed62:	4619      	mov	r1, r3
 800ed64:	484e      	ldr	r0, [pc, #312]	; (800eea0 <rfalTransceiveTx+0x480>)
 800ed66:	f002 f86d 	bl	8010e44 <st25r3916WriteFifo>
            {
 800ed6a:	e017      	b.n	800ed9c <rfalTransceiveTx+0x37c>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 800ed6c:	4b4b      	ldr	r3, [pc, #300]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ed6e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ed70:	461a      	mov	r2, r3
 800ed72:	4b4a      	ldr	r3, [pc, #296]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ed74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed76:	4619      	mov	r1, r3
 800ed78:	4b48      	ldr	r3, [pc, #288]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ed7a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ed7c:	1acb      	subs	r3, r1, r3
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	bfa8      	it	ge
 800ed82:	4613      	movge	r3, r2
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	80fb      	strh	r3, [r7, #6]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 800ed88:	4b44      	ldr	r3, [pc, #272]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ed8a:	699b      	ldr	r3, [r3, #24]
 800ed8c:	4a43      	ldr	r2, [pc, #268]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ed8e:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800ed90:	4413      	add	r3, r2
 800ed92:	88fa      	ldrh	r2, [r7, #6]
 800ed94:	4611      	mov	r1, r2
 800ed96:	4618      	mov	r0, r3
 800ed98:	f002 f854 	bl	8010e44 <st25r3916WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 800ed9c:	4b3f      	ldr	r3, [pc, #252]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ed9e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800eda0:	88fb      	ldrh	r3, [r7, #6]
 800eda2:	4413      	add	r3, r2
 800eda4:	b29a      	uxth	r2, r3
 800eda6:	4b3d      	ldr	r3, [pc, #244]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800eda8:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800edaa:	4b3c      	ldr	r3, [pc, #240]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800edac:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800edae:	4b3b      	ldr	r3, [pc, #236]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800edb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d201      	bcs.n	800edba <rfalTransceiveTx+0x39a>
 800edb6:	220f      	movs	r2, #15
 800edb8:	e000      	b.n	800edbc <rfalTransceiveTx+0x39c>
 800edba:	2211      	movs	r2, #17
 800edbc:	4b37      	ldr	r3, [pc, #220]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800edbe:	751a      	strb	r2, [r3, #20]
            break;
 800edc0:	e067      	b.n	800ee92 <rfalTransceiveTx+0x472>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800edc2:	2048      	movs	r0, #72	; 0x48
 800edc4:	f002 fb50 	bl	8011468 <st25r3916GetInterrupt>
 800edc8:	4603      	mov	r3, r0
 800edca:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d05c      	beq.n	800ee8c <rfalTransceiveTx+0x46c>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3916_IRQ_MASK_TXE) != 0U )
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	f003 0308 	and.w	r3, r3, #8
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d003      	beq.n	800ede4 <rfalTransceiveTx+0x3c4>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 800eddc:	4b2f      	ldr	r3, [pc, #188]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800edde:	2212      	movs	r2, #18
 800ede0:	751a      	strb	r2, [r3, #20]
 800ede2:	e00b      	b.n	800edfc <rfalTransceiveTx+0x3dc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_FWL) != 0U )
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edea:	2b00      	cmp	r3, #0
 800edec:	d150      	bne.n	800ee90 <rfalTransceiveTx+0x470>
            {
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800edee:	4b2b      	ldr	r3, [pc, #172]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800edf0:	2203      	movs	r2, #3
 800edf2:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800edf4:	4b29      	ldr	r3, [pc, #164]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800edf6:	2213      	movs	r2, #19
 800edf8:	751a      	strb	r2, [r3, #20]
               break;
 800edfa:	e04a      	b.n	800ee92 <rfalTransceiveTx+0x472>
                           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 800edfc:	4b27      	ldr	r3, [pc, #156]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800edfe:	6a1b      	ldr	r3, [r3, #32]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d110      	bne.n	800ee26 <rfalTransceiveTx+0x406>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 800ee04:	4b25      	ldr	r3, [pc, #148]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ee06:	799b      	ldrb	r3, [r3, #6]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d003      	beq.n	800ee14 <rfalTransceiveTx+0x3f4>
 800ee0c:	2140      	movs	r1, #64	; 0x40
 800ee0e:	2001      	movs	r0, #1
 800ee10:	f002 f893 	bl	8010f3a <st25r3916WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 800ee14:	f7ff fd1a 	bl	800e84c <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 800ee18:	4b20      	ldr	r3, [pc, #128]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 800ee1e:	4b1f      	ldr	r3, [pc, #124]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ee20:	2200      	movs	r2, #0
 800ee22:	751a      	strb	r2, [r3, #20]
                break;
 800ee24:	e035      	b.n	800ee92 <rfalTransceiveTx+0x472>
            }
            
            rfalCheckEnableObsModeRx();
 800ee26:	4b1d      	ldr	r3, [pc, #116]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ee28:	799b      	ldrb	r3, [r3, #6]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d008      	beq.n	800ee40 <rfalTransceiveTx+0x420>
 800ee2e:	4b1b      	ldr	r3, [pc, #108]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ee30:	799b      	ldrb	r3, [r3, #6]
 800ee32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	4619      	mov	r1, r3
 800ee3a:	2001      	movs	r0, #1
 800ee3c:	f002 f87d 	bl	8010f3a <st25r3916WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 800ee40:	4b16      	ldr	r3, [pc, #88]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ee42:	2251      	movs	r2, #81	; 0x51
 800ee44:	751a      	strb	r2, [r3, #20]
            break;
 800ee46:	e024      	b.n	800ee92 <rfalTransceiveTx+0x472>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800ee48:	4b14      	ldr	r3, [pc, #80]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ee4a:	8adb      	ldrh	r3, [r3, #22]
 800ee4c:	2b02      	cmp	r3, #2
 800ee4e:	d102      	bne.n	800ee56 <rfalTransceiveTx+0x436>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800ee50:	4b12      	ldr	r3, [pc, #72]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ee52:	2208      	movs	r2, #8
 800ee54:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800ee56:	4b11      	ldr	r3, [pc, #68]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ee58:	799b      	ldrb	r3, [r3, #6]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d003      	beq.n	800ee66 <rfalTransceiveTx+0x446>
 800ee5e:	2140      	movs	r1, #64	; 0x40
 800ee60:	2001      	movs	r0, #1
 800ee62:	f002 f86a 	bl	8010f3a <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800ee66:	f7ff fcf1 	bl	800e84c <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800ee6a:	4b0c      	ldr	r3, [pc, #48]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	751a      	strb	r2, [r3, #20]
            break;
 800ee70:	e00f      	b.n	800ee92 <rfalTransceiveTx+0x472>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800ee72:	4b0a      	ldr	r3, [pc, #40]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ee74:	2208      	movs	r2, #8
 800ee76:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ee78:	4b08      	ldr	r3, [pc, #32]	; (800ee9c <rfalTransceiveTx+0x47c>)
 800ee7a:	2213      	movs	r2, #19
 800ee7c:	751a      	strb	r2, [r3, #20]
            break;
 800ee7e:	e008      	b.n	800ee92 <rfalTransceiveTx+0x472>
                break;
 800ee80:	bf00      	nop
 800ee82:	e006      	b.n	800ee92 <rfalTransceiveTx+0x472>
                   break;
 800ee84:	bf00      	nop
 800ee86:	e004      	b.n	800ee92 <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800ee88:	bf00      	nop
 800ee8a:	e002      	b.n	800ee92 <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800ee8c:	bf00      	nop
 800ee8e:	e000      	b.n	800ee92 <rfalTransceiveTx+0x472>
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
 800ee90:	bf00      	nop
    }
}
 800ee92:	bf00      	nop
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bdb0      	pop	{r4, r5, r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	20000758 	.word	0x20000758
 800eea0:	200007c0 	.word	0x200007c0
 800eea4:	200009c8 	.word	0x200009c8
 800eea8:	2000078e 	.word	0x2000078e

0800eeac <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 800eeac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeae:	b089      	sub	sp, #36	; 0x24
 800eeb0:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint16_t          tmp;
    uint16_t          aux;
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	607b      	str	r3, [r7, #4]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800eeb6:	4baf      	ldr	r3, [pc, #700]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800eeb8:	7d1a      	ldrb	r2, [r3, #20]
 800eeba:	4bae      	ldr	r3, [pc, #696]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800eebc:	7d5b      	ldrb	r3, [r3, #21]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d003      	beq.n	800eeca <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800eec2:	4bac      	ldr	r3, [pc, #688]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800eec4:	7d1a      	ldrb	r2, [r3, #20]
 800eec6:	4bab      	ldr	r3, [pc, #684]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800eec8:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800eeca:	4baa      	ldr	r3, [pc, #680]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800eecc:	7d1b      	ldrb	r3, [r3, #20]
 800eece:	3b51      	subs	r3, #81	; 0x51
 800eed0:	2b09      	cmp	r3, #9
 800eed2:	f200 8339 	bhi.w	800f548 <rfalTransceiveRx+0x69c>
 800eed6:	a201      	add	r2, pc, #4	; (adr r2, 800eedc <rfalTransceiveRx+0x30>)
 800eed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eedc:	0800ef05 	.word	0x0800ef05
 800eee0:	0800f4b5 	.word	0x0800f4b5
 800eee4:	0800ef3d 	.word	0x0800ef3d
 800eee8:	0800efe1 	.word	0x0800efe1
 800eeec:	0800f3f9 	.word	0x0800f3f9
 800eef0:	0800f0bf 	.word	0x0800f0bf
 800eef4:	0800f1f3 	.word	0x0800f1f3
 800eef8:	0800f4ff 	.word	0x0800f4ff
 800eefc:	0800f3d1 	.word	0x0800f3d1
 800ef00:	0800f48b 	.word	0x0800f48b
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 800ef04:	4b9b      	ldr	r3, [pc, #620]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800ef06:	2200      	movs	r2, #0
 800ef08:	871a      	strh	r2, [r3, #56]	; 0x38
            gRFAL.fifo.bytesTotal     = 0;            /* Total bytes in FIFO will now be from Rx */
 800ef0a:	4b9a      	ldr	r3, [pc, #616]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	86da      	strh	r2, [r3, #54]	; 0x36
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800ef10:	4b98      	ldr	r3, [pc, #608]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800ef12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d003      	beq.n	800ef20 <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 800ef18:	4b96      	ldr	r3, [pc, #600]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800ef1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	801a      	strh	r2, [r3, #0]
            }
           
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 800ef20:	4b94      	ldr	r3, [pc, #592]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800ef22:	785b      	ldrb	r3, [r3, #1]
 800ef24:	2b09      	cmp	r3, #9
 800ef26:	d003      	beq.n	800ef30 <rfalTransceiveRx+0x84>
 800ef28:	4b92      	ldr	r3, [pc, #584]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800ef2a:	785b      	ldrb	r3, [r3, #1]
 800ef2c:	2b0d      	cmp	r3, #13
 800ef2e:	d101      	bne.n	800ef34 <rfalTransceiveRx+0x88>
 800ef30:	2252      	movs	r2, #82	; 0x52
 800ef32:	e000      	b.n	800ef36 <rfalTransceiveRx+0x8a>
 800ef34:	2253      	movs	r2, #83	; 0x53
 800ef36:	4b8f      	ldr	r3, [pc, #572]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800ef38:	751a      	strb	r2, [r3, #20]
            break;
 800ef3a:	e315      	b.n	800f568 <rfalTransceiveRx+0x6bc>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
            
            /*******************************************************************************/
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_EOF) );
 800ef3c:	f644 0020 	movw	r0, #18464	; 0x4820
 800ef40:	f002 fa92 	bl	8011468 <st25r3916GetInterrupt>
 800ef44:	4603      	mov	r3, r0
 800ef46:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	f000 8303 	beq.w	800f556 <rfalTransceiveRx+0x6aa>
            {
                break;  /* No interrupt to process */
            }
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode) */
            if( ((irqs & ST25R3916_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d00b      	beq.n	800ef72 <rfalTransceiveRx+0xc6>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f003 0320 	and.w	r3, r3, #32
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d106      	bne.n	800ef72 <rfalTransceiveRx+0xc6>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800ef64:	4b83      	ldr	r3, [pc, #524]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800ef66:	2204      	movs	r2, #4
 800ef68:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ef6a:	4b82      	ldr	r3, [pc, #520]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800ef6c:	225a      	movs	r2, #90	; 0x5a
 800ef6e:	751a      	strb	r2, [r3, #20]
                break;
 800ef70:	e2fa      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d015      	beq.n	800efa8 <rfalTransceiveRx+0xfc>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f003 0320 	and.w	r3, r3, #32
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d110      	bne.n	800efa8 <rfalTransceiveRx+0xfc>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800ef86:	4b7b      	ldr	r3, [pc, #492]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800ef88:	785b      	ldrb	r3, [r3, #1]
 800ef8a:	2b09      	cmp	r3, #9
 800ef8c:	d003      	beq.n	800ef96 <rfalTransceiveRx+0xea>
 800ef8e:	4b79      	ldr	r3, [pc, #484]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800ef90:	785b      	ldrb	r3, [r3, #1]
 800ef92:	2b0d      	cmp	r3, #13
 800ef94:	d101      	bne.n	800ef9a <rfalTransceiveRx+0xee>
 800ef96:	2204      	movs	r2, #4
 800ef98:	e000      	b.n	800ef9c <rfalTransceiveRx+0xf0>
 800ef9a:	2225      	movs	r2, #37	; 0x25
 800ef9c:	4b75      	ldr	r3, [pc, #468]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800ef9e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800efa0:	4b74      	ldr	r3, [pc, #464]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800efa2:	225a      	movs	r2, #90	; 0x5a
 800efa4:	751a      	strb	r2, [r3, #20]
                break;
 800efa6:	e2df      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RXS) != 0U )
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f003 0320 	and.w	r3, r3, #32
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d00f      	beq.n	800efd2 <rfalTransceiveRx+0x126>
            {
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
                /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                /* Use a SW timer to handle an eventual missing RXE                            */
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800efb2:	2032      	movs	r0, #50	; 0x32
 800efb4:	f7f5 fbc4 	bl	8004740 <timerCalculateTimer>
 800efb8:	4602      	mov	r2, r0
 800efba:	4b6e      	ldr	r3, [pc, #440]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800efbc:	641a      	str	r2, [r3, #64]	; 0x40
                /*******************************************************************************/
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800efbe:	4b6d      	ldr	r3, [pc, #436]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800efc0:	2254      	movs	r2, #84	; 0x54
 800efc2:	751a      	strb	r2, [r3, #20]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
                break;
            }
            
            /* remove NRE that might appear together (NRT EMV mode), and remove RXS, but keep EOF if present for next state */
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800efca:	f023 0320 	bic.w	r3, r3, #32
 800efce:	607b      	str	r3, [r7, #4]
 800efd0:	e006      	b.n	800efe0 <rfalTransceiveRx+0x134>
                gRFAL.TxRx.status = ERR_IO;
 800efd2:	4b68      	ldr	r3, [pc, #416]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800efd4:	2203      	movs	r2, #3
 800efd6:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800efd8:	4b66      	ldr	r3, [pc, #408]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800efda:	225a      	movs	r2, #90	; 0x5a
 800efdc:	751a      	strb	r2, [r3, #20]
                break;
 800efde:	e2c3      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* ST25R396 may indicate RXS without RXE afterwards, this happens rarely on    */
            /* corrupted frames.                                                           */
            /* SW timer is used to timeout upon a missing RXE                              */
            if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 800efe0:	4b64      	ldr	r3, [pc, #400]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800efe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7f5 fbb9 	bl	800475c <timerIsExpired>
 800efea:	4603      	mov	r3, r0
 800efec:	2b00      	cmp	r3, #0
 800efee:	d005      	beq.n	800effc <rfalTransceiveRx+0x150>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800eff0:	4b60      	ldr	r3, [pc, #384]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800eff2:	2209      	movs	r2, #9
 800eff4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800eff6:	4b5f      	ldr	r3, [pc, #380]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800eff8:	225a      	movs	r2, #90	; 0x5a
 800effa:	751a      	strb	r2, [r3, #20]
            }
            /*******************************************************************************/
            
            irqs |= st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_WU_F ) );
 800effc:	485e      	ldr	r0, [pc, #376]	; (800f178 <rfalTransceiveRx+0x2cc>)
 800effe:	f002 fa33 	bl	8011468 <st25r3916GetInterrupt>
 800f002:	4602      	mov	r2, r0
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4313      	orrs	r3, r2
 800f008:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	f000 82a4 	beq.w	800f55a <rfalTransceiveRx+0x6ae>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RX_REST) != 0U )
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f003 0302 	and.w	r3, r3, #2
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d02f      	beq.n	800f07c <rfalTransceiveRx+0x1d0>
            {
                /* RX_REST indicates that Receiver has been reseted due to EMD, therefore a RXS + RXE should *
                 * follow if a good reception is followed within the valid initial timeout                   */
                
                /* Check whether NRT has expired already, if so signal a timeout */
                if( st25r3916GetInterrupt( ST25R3916_IRQ_MASK_NRE ) != 0U )
 800f01c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f020:	f002 fa22 	bl	8011468 <st25r3916GetInterrupt>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d006      	beq.n	800f038 <rfalTransceiveRx+0x18c>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800f02a:	4b52      	ldr	r3, [pc, #328]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f02c:	2204      	movs	r2, #4
 800f02e:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f030:	4b50      	ldr	r3, [pc, #320]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f032:	225a      	movs	r2, #90	; 0x5a
 800f034:	751a      	strb	r2, [r3, #20]
                    break;
 800f036:	e297      	b.n	800f568 <rfalTransceiveRx+0x6bc>
                }
                if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0 ) )   /* MISRA 13.5 */
 800f038:	2200      	movs	r2, #0
 800f03a:	2102      	movs	r1, #2
 800f03c:	2024      	movs	r0, #36	; 0x24
 800f03e:	f002 f889 	bl	8011154 <st25r3916CheckReg>
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d006      	beq.n	800f056 <rfalTransceiveRx+0x1aa>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800f048:	4b4a      	ldr	r3, [pc, #296]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f04a:	2204      	movs	r2, #4
 800f04c:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f04e:	4b49      	ldr	r3, [pc, #292]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f050:	225a      	movs	r2, #90	; 0x5a
 800f052:	751a      	strb	r2, [r3, #20]
                    break;
 800f054:	e288      	b.n	800f568 <rfalTransceiveRx+0x6bc>
                }
                
                /* Discard any previous RXS */
                st25r3916GetInterrupt( ST25R3916_IRQ_MASK_RXS );
 800f056:	2020      	movs	r0, #32
 800f058:	f002 fa06 	bl	8011468 <st25r3916GetInterrupt>
                
                /* Check whether a following reception has already started */
                if( st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_rx_act, ST25R3916_REG_AUX_DISPLAY_rx_act) )
 800f05c:	2204      	movs	r2, #4
 800f05e:	2104      	movs	r1, #4
 800f060:	2031      	movs	r0, #49	; 0x31
 800f062:	f002 f877 	bl	8011154 <st25r3916CheckReg>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d003      	beq.n	800f074 <rfalTransceiveRx+0x1c8>
                {
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800f06c:	4b41      	ldr	r3, [pc, #260]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f06e:	2254      	movs	r2, #84	; 0x54
 800f070:	751a      	strb	r2, [r3, #20]
                    break;
 800f072:	e279      	b.n	800f568 <rfalTransceiveRx+0x6bc>
                }
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800f074:	4b3f      	ldr	r3, [pc, #252]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f076:	2253      	movs	r2, #83	; 0x53
 800f078:	751a      	strb	r2, [r3, #20]
                break;
 800f07a:	e275      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXE) == 0U) )
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f082:	2b00      	cmp	r3, #0
 800f084:	d008      	beq.n	800f098 <rfalTransceiveRx+0x1ec>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f003 0310 	and.w	r3, r3, #16
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d103      	bne.n	800f098 <rfalTransceiveRx+0x1ec>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 800f090:	4b38      	ldr	r3, [pc, #224]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f092:	2255      	movs	r2, #85	; 0x55
 800f094:	751a      	strb	r2, [r3, #20]
                break;
 800f096:	e267      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            }
            
            /* Automatic responses allowed during TxRx only for the SENSF_REQ */
            if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d003      	beq.n	800f0aa <rfalTransceiveRx+0x1fe>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800f0a2:	4b34      	ldr	r3, [pc, #208]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f0a4:	2253      	movs	r2, #83	; 0x53
 800f0a6:	751a      	strb	r2, [r3, #20]
                break;
 800f0a8:	e25e      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            }
            
            /* After RXE retrieve and check for any error irqs */
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 800f0aa:	4834      	ldr	r0, [pc, #208]	; (800f17c <rfalTransceiveRx+0x2d0>)
 800f0ac:	f002 f9dc 	bl	8011468 <st25r3916GetInterrupt>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	607b      	str	r3, [r7, #4]
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800f0b8:	4b2e      	ldr	r3, [pc, #184]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f0ba:	2256      	movs	r2, #86	; 0x56
 800f0bc:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( (irqs & ST25R3916_IRQ_MASK_ERR1) != 0U )
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d008      	beq.n	800f0da <rfalTransceiveRx+0x22e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800f0c8:	4b2a      	ldr	r3, [pc, #168]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f0ca:	2209      	movs	r2, #9
 800f0cc:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f0ce:	4b29      	ldr	r3, [pc, #164]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f0d0:	2257      	movs	r2, #87	; 0x57
 800f0d2:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f0d4:	f7ff fb82 	bl	800e7dc <rfalErrorHandling>
                break;
 800f0d8:	e246      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            }
            /* Discard Soft Framing errors in AP2P and CE */
            else if( rfalIsModePassivePoll( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_ERR2) != 0U) )
 800f0da:	4b26      	ldr	r3, [pc, #152]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f0dc:	785b      	ldrb	r3, [r3, #1]
 800f0de:	2b09      	cmp	r3, #9
 800f0e0:	d01d      	beq.n	800f11e <rfalTransceiveRx+0x272>
 800f0e2:	4b24      	ldr	r3, [pc, #144]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f0e4:	785b      	ldrb	r3, [r3, #1]
 800f0e6:	2b0d      	cmp	r3, #13
 800f0e8:	d019      	beq.n	800f11e <rfalTransceiveRx+0x272>
 800f0ea:	4b22      	ldr	r3, [pc, #136]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f0ec:	785b      	ldrb	r3, [r3, #1]
 800f0ee:	2b0a      	cmp	r3, #10
 800f0f0:	d015      	beq.n	800f11e <rfalTransceiveRx+0x272>
 800f0f2:	4b20      	ldr	r3, [pc, #128]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f0f4:	785b      	ldrb	r3, [r3, #1]
 800f0f6:	2b0b      	cmp	r3, #11
 800f0f8:	d011      	beq.n	800f11e <rfalTransceiveRx+0x272>
 800f0fa:	4b1e      	ldr	r3, [pc, #120]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f0fc:	785b      	ldrb	r3, [r3, #1]
 800f0fe:	2b0c      	cmp	r3, #12
 800f100:	d00d      	beq.n	800f11e <rfalTransceiveRx+0x272>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d008      	beq.n	800f11e <rfalTransceiveRx+0x272>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800f10c:	4b19      	ldr	r3, [pc, #100]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f10e:	2209      	movs	r2, #9
 800f110:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f112:	4b18      	ldr	r3, [pc, #96]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f114:	2257      	movs	r2, #87	; 0x57
 800f116:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f118:	f7ff fb60 	bl	800e7dc <rfalErrorHandling>
                break;
 800f11c:	e224      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_PAR) != 0U )
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f124:	2b00      	cmp	r3, #0
 800f126:	d008      	beq.n	800f13a <rfalTransceiveRx+0x28e>
            {
                gRFAL.TxRx.status = ERR_PAR;
 800f128:	4b12      	ldr	r3, [pc, #72]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f12a:	221b      	movs	r2, #27
 800f12c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f12e:	4b11      	ldr	r3, [pc, #68]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f130:	2257      	movs	r2, #87	; 0x57
 800f132:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f134:	f7ff fb52 	bl	800e7dc <rfalErrorHandling>
                break;
 800f138:	e216      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_CRC) != 0U )
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f140:	2b00      	cmp	r3, #0
 800f142:	d008      	beq.n	800f156 <rfalTransceiveRx+0x2aa>
            {
                gRFAL.TxRx.status = ERR_CRC;
 800f144:	4b0b      	ldr	r3, [pc, #44]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f146:	2215      	movs	r2, #21
 800f148:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f14a:	4b0a      	ldr	r3, [pc, #40]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f14c:	2257      	movs	r2, #87	; 0x57
 800f14e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f150:	f7ff fb44 	bl	800e7dc <rfalErrorHandling>
                break;
 800f154:	e208      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_COL) != 0U )
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f003 0304 	and.w	r3, r3, #4
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00f      	beq.n	800f180 <rfalTransceiveRx+0x2d4>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 800f160:	4b04      	ldr	r3, [pc, #16]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f162:	221d      	movs	r2, #29
 800f164:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f166:	4b03      	ldr	r3, [pc, #12]	; (800f174 <rfalTransceiveRx+0x2c8>)
 800f168:	2257      	movs	r2, #87	; 0x57
 800f16a:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f16c:	f7ff fb36 	bl	800e7dc <rfalErrorHandling>
                break;
 800f170:	e1fa      	b.n	800f568 <rfalTransceiveRx+0x6bc>
 800f172:	bf00      	nop
 800f174:	20000758 	.word	0x20000758
 800f178:	08000852 	.word	0x08000852
 800f17c:	00f00004 	.word	0x00f00004
            }
            else if( rfalIsModePassiveListen( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) )
 800f180:	4b9c      	ldr	r3, [pc, #624]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f182:	785b      	ldrb	r3, [r3, #1]
 800f184:	2b0a      	cmp	r3, #10
 800f186:	d007      	beq.n	800f198 <rfalTransceiveRx+0x2ec>
 800f188:	4b9a      	ldr	r3, [pc, #616]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f18a:	785b      	ldrb	r3, [r3, #1]
 800f18c:	2b0b      	cmp	r3, #11
 800f18e:	d003      	beq.n	800f198 <rfalTransceiveRx+0x2ec>
 800f190:	4b98      	ldr	r3, [pc, #608]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f192:	785b      	ldrb	r3, [r3, #1]
 800f194:	2b0c      	cmp	r3, #12
 800f196:	d10b      	bne.n	800f1b0 <rfalTransceiveRx+0x304>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d006      	beq.n	800f1b0 <rfalTransceiveRx+0x304>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 800f1a2:	4b94      	ldr	r3, [pc, #592]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f1a4:	2225      	movs	r2, #37	; 0x25
 800f1a6:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f1a8:	4b92      	ldr	r3, [pc, #584]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f1aa:	225a      	movs	r2, #90	; 0x5a
 800f1ac:	751a      	strb	r2, [r3, #20]
                 break;
 800f1ae:	e1db      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f003 0310 	and.w	r3, r3, #16
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d014      	beq.n	800f1e4 <rfalTransceiveRx+0x338>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 800f1ba:	f000 fa19 	bl	800f5f0 <rfalFIFOStatusIsIncompleteByte>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d003      	beq.n	800f1cc <rfalTransceiveRx+0x320>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800f1c4:	4b8b      	ldr	r3, [pc, #556]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f1c6:	2228      	movs	r2, #40	; 0x28
 800f1c8:	82da      	strh	r2, [r3, #22]
 800f1ca:	e007      	b.n	800f1dc <rfalTransceiveRx+0x330>
                }
                /* Check if the reception ends missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 800f1cc:	f000 fa22 	bl	800f614 <rfalFIFOStatusIsMissingPar>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d002      	beq.n	800f1dc <rfalTransceiveRx+0x330>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 800f1d6:	4b87      	ldr	r3, [pc, #540]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f1d8:	2209      	movs	r2, #9
 800f1da:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 800f1dc:	4b85      	ldr	r3, [pc, #532]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f1de:	2257      	movs	r2, #87	; 0x57
 800f1e0:	751a      	strb	r2, [r3, #20]
 800f1e2:	e006      	b.n	800f1f2 <rfalTransceiveRx+0x346>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800f1e4:	4b83      	ldr	r3, [pc, #524]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f1e6:	2203      	movs	r2, #3
 800f1e8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f1ea:	4b82      	ldr	r3, [pc, #520]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f1ec:	225a      	movs	r2, #90	; 0x5a
 800f1ee:	751a      	strb	r2, [r3, #20]
                break;
 800f1f0:	e1ba      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                      
            tmp = rfalFIFOStatusGetNumBytes();
 800f1f2:	f000 f9e1 	bl	800f5b8 <rfalFIFOStatusGetNumBytes>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	81fb      	strh	r3, [r7, #14]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 800f1fa:	4b7e      	ldr	r3, [pc, #504]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fe:	f003 0302 	and.w	r3, r3, #2
 800f202:	2b00      	cmp	r3, #0
 800f204:	d117      	bne.n	800f236 <rfalTransceiveRx+0x38a>
            {
                /* if received frame was bigger than CRC */
                if( (uint16_t)(gRFAL.fifo.bytesTotal + tmp) > 0U )
 800f206:	4b7b      	ldr	r3, [pc, #492]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f208:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f20a:	89fb      	ldrh	r3, [r7, #14]
 800f20c:	4413      	add	r3, r2
 800f20e:	b29b      	uxth	r3, r3
 800f210:	2b00      	cmp	r3, #0
 800f212:	d010      	beq.n	800f236 <rfalTransceiveRx+0x38a>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > RFAL_CRC_LEN) )  
 800f214:	89fb      	ldrh	r3, [r7, #14]
 800f216:	2b02      	cmp	r3, #2
 800f218:	d903      	bls.n	800f222 <rfalTransceiveRx+0x376>
                    {
                        tmp -= RFAL_CRC_LEN;
 800f21a:	89fb      	ldrh	r3, [r7, #14]
 800f21c:	3b02      	subs	r3, #2
 800f21e:	81fb      	strh	r3, [r7, #14]
 800f220:	e009      	b.n	800f236 <rfalTransceiveRx+0x38a>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > RFAL_CRC_LEN)                       
 800f222:	4b74      	ldr	r3, [pc, #464]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f226:	2b02      	cmp	r3, #2
 800f228:	d905      	bls.n	800f236 <rfalTransceiveRx+0x38a>
                    {                        
                        gRFAL.fifo.bytesTotal -= RFAL_CRC_LEN;
 800f22a:	4b72      	ldr	r3, [pc, #456]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f22c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f22e:	3b02      	subs	r3, #2
 800f230:	b29a      	uxth	r2, r3
 800f232:	4b70      	ldr	r3, [pc, #448]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f234:	86da      	strh	r2, [r3, #54]	; 0x36
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 800f236:	4b6f      	ldr	r3, [pc, #444]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f238:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f23a:	89fb      	ldrh	r3, [r7, #14]
 800f23c:	4413      	add	r3, r2
 800f23e:	b29a      	uxth	r2, r3
 800f240:	4b6c      	ldr	r3, [pc, #432]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f242:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 800f244:	4b6b      	ldr	r3, [pc, #428]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f246:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f248:	4b6a      	ldr	r3, [pc, #424]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f24a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f24c:	3307      	adds	r3, #7
 800f24e:	08db      	lsrs	r3, r3, #3
 800f250:	b29b      	uxth	r3, r3
 800f252:	429a      	cmp	r2, r3
 800f254:	d90f      	bls.n	800f276 <rfalTransceiveRx+0x3ca>
            {
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 800f256:	4b67      	ldr	r3, [pc, #412]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f258:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f25a:	3307      	adds	r3, #7
 800f25c:	08db      	lsrs	r3, r3, #3
 800f25e:	b29a      	uxth	r2, r3
 800f260:	4b64      	ldr	r3, [pc, #400]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f262:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800f264:	1ad3      	subs	r3, r2, r3
 800f266:	81fb      	strh	r3, [r7, #14]
                
                /* Transmission errors have precedence over buffer error */
                if( gRFAL.TxRx.status == ERR_BUSY )
 800f268:	4b62      	ldr	r3, [pc, #392]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f26a:	8adb      	ldrh	r3, [r3, #22]
 800f26c:	2b02      	cmp	r3, #2
 800f26e:	d102      	bne.n	800f276 <rfalTransceiveRx+0x3ca>
                {
                    gRFAL.TxRx.status = ERR_NOMEM;
 800f270:	4b60      	ldr	r3, [pc, #384]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f272:	2201      	movs	r2, #1
 800f274:	82da      	strh	r2, [r3, #22]
                }
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 800f276:	4b5f      	ldr	r3, [pc, #380]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f278:	6a1b      	ldr	r3, [r3, #32]
 800f27a:	4a5e      	ldr	r2, [pc, #376]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f27c:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800f27e:	4413      	add	r3, r2
 800f280:	89fa      	ldrh	r2, [r7, #14]
 800f282:	4611      	mov	r1, r2
 800f284:	4618      	mov	r0, r3
 800f286:	f001 fe00 	bl	8010e8a <st25r3916ReadFifo>
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800f28a:	4b5a      	ldr	r3, [pc, #360]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d019      	beq.n	800f2c6 <rfalTransceiveRx+0x41a>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 800f292:	4b58      	ldr	r3, [pc, #352]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f294:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f296:	4b57      	ldr	r3, [pc, #348]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f29a:	00d2      	lsls	r2, r2, #3
 800f29c:	b292      	uxth	r2, r2
 800f29e:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 800f2a0:	f000 f9a6 	bl	800f5f0 <rfalFIFOStatusIsIncompleteByte>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00d      	beq.n	800f2c6 <rfalTransceiveRx+0x41a>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 800f2aa:	f000 f9c5 	bl	800f638 <rfalFIFOGetNumIncompleteBits>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	f1c3 0208 	rsb	r2, r3, #8
 800f2b4:	4b4f      	ldr	r3, [pc, #316]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b8:	8819      	ldrh	r1, [r3, #0]
 800f2ba:	b292      	uxth	r2, r2
 800f2bc:	4b4d      	ldr	r3, [pc, #308]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c0:	1a8a      	subs	r2, r1, r2
 800f2c2:	b292      	uxth	r2, r2
 800f2c4:	801a      	strh	r2, [r3, #0]
            }

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 800f2c6:	4b4b      	ldr	r3, [pc, #300]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f2c8:	785b      	ldrb	r3, [r3, #1]
 800f2ca:	2b07      	cmp	r3, #7
 800f2cc:	d003      	beq.n	800f2d6 <rfalTransceiveRx+0x42a>
 800f2ce:	4b49      	ldr	r3, [pc, #292]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f2d0:	785b      	ldrb	r3, [r3, #1]
 800f2d2:	2b08      	cmp	r3, #8
 800f2d4:	d165      	bne.n	800f3a2 <rfalTransceiveRx+0x4f6>
 800f2d6:	4b47      	ldr	r3, [pc, #284]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f2d8:	8adb      	ldrh	r3, [r3, #22]
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	d161      	bne.n	800f3a2 <rfalTransceiveRx+0x4f6>
            {
                ReturnCode ret;
                uint16_t offset = 0; /* REMARK offset not currently used */
 800f2de:	2300      	movs	r3, #0
 800f2e0:	807b      	strh	r3, [r7, #2]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800f2e2:	4b44      	ldr	r3, [pc, #272]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f2e4:	6a18      	ldr	r0, [r3, #32]
 800f2e6:	4b43      	ldr	r3, [pc, #268]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f2e8:	8edc      	ldrh	r4, [r3, #54]	; 0x36
 800f2ea:	4b42      	ldr	r3, [pc, #264]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f2ec:	f8d3 527c 	ldr.w	r5, [r3, #636]	; 0x27c
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800f2f0:	4b40      	ldr	r3, [pc, #256]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f2f2:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 800f2f6:	3307      	adds	r3, #7
 800f2f8:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800f2fa:	b29e      	uxth	r6, r3
 800f2fc:	4b3d      	ldr	r3, [pc, #244]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f2fe:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f302:	4a3c      	ldr	r2, [pc, #240]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f304:	f8b2 2290 	ldrh.w	r2, [r2, #656]	; 0x290
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800f308:	493a      	ldr	r1, [pc, #232]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f30a:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800f30c:	2908      	cmp	r1, #8
 800f30e:	bf0c      	ite	eq
 800f310:	2101      	moveq	r1, #1
 800f312:	2100      	movne	r1, #0
 800f314:	b2c9      	uxtb	r1, r1
 800f316:	9103      	str	r1, [sp, #12]
 800f318:	9202      	str	r2, [sp, #8]
 800f31a:	9301      	str	r3, [sp, #4]
 800f31c:	1cbb      	adds	r3, r7, #2
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	4633      	mov	r3, r6
 800f322:	462a      	mov	r2, r5
 800f324:	4621      	mov	r1, r4
 800f326:	f7fe f8a3 	bl	800d470 <iso15693VICCDecode>
 800f32a:	4603      	mov	r3, r0
 800f32c:	817b      	strh	r3, [r7, #10]
                
                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 800f32e:	897b      	ldrh	r3, [r7, #10]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d002      	beq.n	800f33a <rfalTransceiveRx+0x48e>
 800f334:	897b      	ldrh	r3, [r7, #10]
 800f336:	2b15      	cmp	r3, #21
 800f338:	d11f      	bne.n	800f37a <rfalTransceiveRx+0x4ce>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800f33a:	4b2e      	ldr	r3, [pc, #184]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f33c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f340:	f003 0302 	and.w	r3, r3, #2
 800f344:	2b00      	cmp	r3, #0
 800f346:	d118      	bne.n	800f37a <rfalTransceiveRx+0x4ce>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 800f348:	4b2a      	ldr	r3, [pc, #168]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f34a:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f34e:	881b      	ldrh	r3, [r3, #0]
 800f350:	f003 0307 	and.w	r3, r3, #7
 800f354:	b29b      	uxth	r3, r3
 800f356:	2b00      	cmp	r3, #0
 800f358:	d10f      	bne.n	800f37a <rfalTransceiveRx+0x4ce>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800f35a:	4b26      	ldr	r3, [pc, #152]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f35c:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f360:	881b      	ldrh	r3, [r3, #0]
 800f362:	2b0f      	cmp	r3, #15
 800f364:	d909      	bls.n	800f37a <rfalTransceiveRx+0x4ce>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800f366:	4b23      	ldr	r3, [pc, #140]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f368:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f36c:	881a      	ldrh	r2, [r3, #0]
 800f36e:	4b21      	ldr	r3, [pc, #132]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f370:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f374:	3a10      	subs	r2, #16
 800f376:	b292      	uxth	r2, r2
 800f378:	801a      	strh	r2, [r3, #0]
                st25r3916WriteFifo(gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes( *gRFAL.nfcvData.origCtx.rxRcvdLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
            #endif
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800f37a:	4a1e      	ldr	r2, [pc, #120]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f37c:	4b1d      	ldr	r3, [pc, #116]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f37e:	f102 0418 	add.w	r4, r2, #24
 800f382:	f503 751d 	add.w	r5, r3, #628	; 0x274
 800f386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f38a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f38e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800f392:	897b      	ldrh	r3, [r7, #10]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d001      	beq.n	800f39c <rfalTransceiveRx+0x4f0>
 800f398:	897b      	ldrh	r3, [r7, #10]
 800f39a:	e000      	b.n	800f39e <rfalTransceiveRx+0x4f2>
 800f39c:	2302      	movs	r3, #2
 800f39e:	4a15      	ldr	r2, [pc, #84]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f3a0:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 800f3a2:	4b14      	ldr	r3, [pc, #80]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f3a4:	8adb      	ldrh	r3, [r3, #22]
 800f3a6:	2b02      	cmp	r3, #2
 800f3a8:	d003      	beq.n	800f3b2 <rfalTransceiveRx+0x506>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 800f3aa:	4b12      	ldr	r3, [pc, #72]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f3ac:	225a      	movs	r2, #90	; 0x5a
 800f3ae:	751a      	strb	r2, [r3, #20]
                break;
 800f3b0:	e0da      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 800f3b2:	4b10      	ldr	r3, [pc, #64]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f3b4:	785b      	ldrb	r3, [r3, #1]
 800f3b6:	2b09      	cmp	r3, #9
 800f3b8:	d003      	beq.n	800f3c2 <rfalTransceiveRx+0x516>
 800f3ba:	4b0e      	ldr	r3, [pc, #56]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f3bc:	785b      	ldrb	r3, [r3, #1]
 800f3be:	2b0d      	cmp	r3, #13
 800f3c0:	d103      	bne.n	800f3ca <rfalTransceiveRx+0x51e>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 800f3c2:	4b0c      	ldr	r3, [pc, #48]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f3c4:	2258      	movs	r2, #88	; 0x58
 800f3c6:	751a      	strb	r2, [r3, #20]
                break;
 800f3c8:	e0ce      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800f3ca:	4b0a      	ldr	r3, [pc, #40]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f3cc:	2259      	movs	r2, #89	; 0x59
 800f3ce:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800f3d0:	4b08      	ldr	r3, [pc, #32]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f3d2:	799b      	ldrb	r3, [r3, #6]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d003      	beq.n	800f3e0 <rfalTransceiveRx+0x534>
 800f3d8:	2140      	movs	r1, #64	; 0x40
 800f3da:	2001      	movs	r0, #1
 800f3dc:	f001 fdad 	bl	8010f3a <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800f3e0:	f7ff fa34 	bl	800e84c <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 800f3e4:	4b03      	ldr	r3, [pc, #12]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 800f3ea:	4b02      	ldr	r3, [pc, #8]	; (800f3f4 <rfalTransceiveRx+0x548>)
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	751a      	strb	r2, [r3, #20]
            break;
 800f3f0:	e0ba      	b.n	800f568 <rfalTransceiveRx+0x6bc>
 800f3f2:	bf00      	nop
 800f3f4:	20000758 	.word	0x20000758
            
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
            /* Use a SW timer to handle an eventual missing RXE                            */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800f3f8:	2032      	movs	r0, #50	; 0x32
 800f3fa:	f7f5 f9a1 	bl	8004740 <timerCalculateTimer>
 800f3fe:	4602      	mov	r2, r0
 800f400:	4b5b      	ldr	r3, [pc, #364]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f402:	641a      	str	r2, [r3, #64]	; 0x40
            /*******************************************************************************/
            
            tmp = rfalFIFOStatusGetNumBytes();
 800f404:	f000 f8d8 	bl	800f5b8 <rfalFIFOStatusGetNumBytes>
 800f408:	4603      	mov	r3, r0
 800f40a:	81fb      	strh	r3, [r7, #14]
            gRFAL.fifo.bytesTotal += tmp;
 800f40c:	4b58      	ldr	r3, [pc, #352]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f40e:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f410:	89fb      	ldrh	r3, [r7, #14]
 800f412:	4413      	add	r3, r2
 800f414:	b29a      	uxth	r2, r3
 800f416:	4b56      	ldr	r3, [pc, #344]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f418:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800f41a:	4b55      	ldr	r3, [pc, #340]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f41c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800f41e:	4b54      	ldr	r3, [pc, #336]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f420:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f422:	3307      	adds	r3, #7
 800f424:	08db      	lsrs	r3, r3, #3
 800f426:	b29b      	uxth	r3, r3
 800f428:	429a      	cmp	r2, r3
 800f42a:	d909      	bls.n	800f440 <rfalTransceiveRx+0x594>
 800f42c:	4b50      	ldr	r3, [pc, #320]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f42e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f430:	3307      	adds	r3, #7
 800f432:	08db      	lsrs	r3, r3, #3
 800f434:	b29a      	uxth	r2, r3
 800f436:	4b4e      	ldr	r3, [pc, #312]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f438:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800f43a:	1ad3      	subs	r3, r2, r3
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	e000      	b.n	800f442 <rfalTransceiveRx+0x596>
 800f440:	89fb      	ldrh	r3, [r7, #14]
 800f442:	81bb      	strh	r3, [r7, #12]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800f444:	4b4a      	ldr	r3, [pc, #296]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f446:	6a1b      	ldr	r3, [r3, #32]
 800f448:	4a49      	ldr	r2, [pc, #292]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f44a:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800f44c:	4413      	add	r3, r2
 800f44e:	89ba      	ldrh	r2, [r7, #12]
 800f450:	4611      	mov	r1, r2
 800f452:	4618      	mov	r0, r3
 800f454:	f001 fd19 	bl	8010e8a <st25r3916ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 800f458:	4b45      	ldr	r3, [pc, #276]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f45a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800f45c:	89bb      	ldrh	r3, [r7, #12]
 800f45e:	4413      	add	r3, r2
 800f460:	b29a      	uxth	r2, r3
 800f462:	4b43      	ldr	r3, [pc, #268]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f464:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 800f466:	89ba      	ldrh	r2, [r7, #12]
 800f468:	89fb      	ldrh	r3, [r7, #14]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d207      	bcs.n	800f47e <rfalTransceiveRx+0x5d2>
            {
                st25r3916ReadFifo( NULL, (tmp - aux) );
 800f46e:	89fa      	ldrh	r2, [r7, #14]
 800f470:	89bb      	ldrh	r3, [r7, #12]
 800f472:	1ad3      	subs	r3, r2, r3
 800f474:	b29b      	uxth	r3, r3
 800f476:	4619      	mov	r1, r3
 800f478:	2000      	movs	r0, #0
 800f47a:	f001 fd06 	bl	8010e8a <st25r3916ReadFifo>
            }
            
            rfalFIFOStatusClear();
 800f47e:	f000 f88d 	bl	800f59c <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800f482:	4b3b      	ldr	r3, [pc, #236]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f484:	2254      	movs	r2, #84	; 0x54
 800f486:	751a      	strb	r2, [r3, #20]
            break;
 800f488:	e06e      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800f48a:	4b39      	ldr	r3, [pc, #228]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f48c:	799b      	ldrb	r3, [r3, #6]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d003      	beq.n	800f49a <rfalTransceiveRx+0x5ee>
 800f492:	2140      	movs	r1, #64	; 0x40
 800f494:	2001      	movs	r0, #1
 800f496:	f001 fd50 	bl	8010f3a <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800f49a:	f7ff f9d7 	bl	800e84c <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800f49e:	4b34      	ldr	r3, [pc, #208]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f4a0:	8adb      	ldrh	r3, [r3, #22]
 800f4a2:	2b02      	cmp	r3, #2
 800f4a4:	d102      	bne.n	800f4ac <rfalTransceiveRx+0x600>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800f4a6:	4b32      	ldr	r3, [pc, #200]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f4a8:	2208      	movs	r2, #8
 800f4aa:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800f4ac:	4b30      	ldr	r3, [pc, #192]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	751a      	strb	r2, [r3, #20]
            break;
 800f4b2:	e059      	b.n	800f568 <rfalTransceiveRx+0x6bc>
        
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_PPON2) );
 800f4b4:	482f      	ldr	r0, [pc, #188]	; (800f574 <rfalTransceiveRx+0x6c8>)
 800f4b6:	f001 ffd7 	bl	8011468 <st25r3916GetInterrupt>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d04c      	beq.n	800f55e <rfalTransceiveRx+0x6b2>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d002      	beq.n	800f4d4 <rfalTransceiveRx+0x628>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800f4ce:	4b28      	ldr	r3, [pc, #160]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f4d0:	2253      	movs	r2, #83	; 0x53
 800f4d2:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_NRE) != 0U )
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d005      	beq.n	800f4ea <rfalTransceiveRx+0x63e>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800f4de:	4b24      	ldr	r3, [pc, #144]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f4e0:	2204      	movs	r2, #4
 800f4e2:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f4e4:	4b22      	ldr	r3, [pc, #136]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f4e6:	225a      	movs	r2, #90	; 0x5a
 800f4e8:	751a      	strb	r2, [r3, #20]
            }
            if( (irqs & ST25R3916_IRQ_MASK_PPON2) != 0U )
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	da38      	bge.n	800f562 <rfalTransceiveRx+0x6b6>
            {
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 800f4f0:	4b1f      	ldr	r3, [pc, #124]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f4f2:	2225      	movs	r2, #37	; 0x25
 800f4f4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f4f6:	4b1e      	ldr	r3, [pc, #120]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f4f8:	225a      	movs	r2, #90	; 0x5a
 800f4fa:	751a      	strb	r2, [r3, #20]
            }
            break;
 800f4fc:	e031      	b.n	800f562 <rfalTransceiveRx+0x6b6>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC) );
 800f4fe:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800f502:	f001 ffb1 	bl	8011468 <st25r3916GetInterrupt>
 800f506:	4603      	mov	r3, r0
 800f508:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d02a      	beq.n	800f566 <rfalTransceiveRx+0x6ba>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_CAT) != 0U )
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f516:	2b00      	cmp	r3, #0
 800f518:	d003      	beq.n	800f522 <rfalTransceiveRx+0x676>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800f51a:	4b15      	ldr	r3, [pc, #84]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f51c:	2259      	movs	r2, #89	; 0x59
 800f51e:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 800f520:	e022      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            else if( (irqs & ST25R3916_IRQ_MASK_CAC) != 0U )
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d006      	beq.n	800f53a <rfalTransceiveRx+0x68e>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 800f52c:	4b10      	ldr	r3, [pc, #64]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f52e:	221d      	movs	r2, #29
 800f530:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f532:	4b0f      	ldr	r3, [pc, #60]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f534:	225a      	movs	r2, #90	; 0x5a
 800f536:	751a      	strb	r2, [r3, #20]
            break;
 800f538:	e016      	b.n	800f568 <rfalTransceiveRx+0x6bc>
               gRFAL.TxRx.status = ERR_IO;
 800f53a:	4b0d      	ldr	r3, [pc, #52]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f53c:	2203      	movs	r2, #3
 800f53e:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f540:	4b0b      	ldr	r3, [pc, #44]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f542:	225a      	movs	r2, #90	; 0x5a
 800f544:	751a      	strb	r2, [r3, #20]
            break;
 800f546:	e00f      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800f548:	4b09      	ldr	r3, [pc, #36]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f54a:	2208      	movs	r2, #8
 800f54c:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f54e:	4b08      	ldr	r3, [pc, #32]	; (800f570 <rfalTransceiveRx+0x6c4>)
 800f550:	225a      	movs	r2, #90	; 0x5a
 800f552:	751a      	strb	r2, [r3, #20]
            break;           
 800f554:	e008      	b.n	800f568 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800f556:	bf00      	nop
 800f558:	e006      	b.n	800f568 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800f55a:	bf00      	nop
 800f55c:	e004      	b.n	800f568 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800f55e:	bf00      	nop
 800f560:	e002      	b.n	800f568 <rfalTransceiveRx+0x6bc>
            break;
 800f562:	bf00      	nop
 800f564:	e000      	b.n	800f568 <rfalTransceiveRx+0x6bc>
               break;  /* No interrupt to process */
 800f566:	bf00      	nop
    }    
}
 800f568:	bf00      	nop
 800f56a:	3714      	adds	r7, #20
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f570:	20000758 	.word	0x20000758
 800f574:	80005000 	.word	0x80005000

0800f578 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800f57c:	4b05      	ldr	r3, [pc, #20]	; (800f594 <rfalFIFOStatusUpdate+0x1c>)
 800f57e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f582:	2bff      	cmp	r3, #255	; 0xff
 800f584:	d104      	bne.n	800f590 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3916ReadMultipleRegisters( ST25R3916_REG_FIFO_STATUS1, gRFAL.fifo.status, ST25R3916_FIFO_STATUS_LEN );
 800f586:	2202      	movs	r2, #2
 800f588:	4903      	ldr	r1, [pc, #12]	; (800f598 <rfalFIFOStatusUpdate+0x20>)
 800f58a:	201e      	movs	r0, #30
 800f58c:	f001 fbe3 	bl	8010d56 <st25r3916ReadMultipleRegisters>
    }
}
 800f590:	bf00      	nop
 800f592:	bd80      	pop	{r7, pc}
 800f594:	20000758 	.word	0x20000758
 800f598:	20000792 	.word	0x20000792

0800f59c <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 800f59c:	b480      	push	{r7}
 800f59e:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800f5a0:	4b04      	ldr	r3, [pc, #16]	; (800f5b4 <rfalFIFOStatusClear+0x18>)
 800f5a2:	22ff      	movs	r2, #255	; 0xff
 800f5a4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 800f5a8:	bf00      	nop
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	20000758 	.word	0x20000758

0800f5b8 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint16_t rfalFIFOStatusGetNumBytes( void )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
    uint16_t result;
    
    rfalFIFOStatusUpdate();
 800f5be:	f7ff ffdb 	bl	800f578 <rfalFIFOStatusUpdate>
    
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 800f5c2:	4b0a      	ldr	r3, [pc, #40]	; (800f5ec <rfalFIFOStatusGetNumBytes+0x34>)
 800f5c4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f5c8:	099b      	lsrs	r3, r3, #6
 800f5ca:	b2db      	uxtb	r3, r3
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	021b      	lsls	r3, r3, #8
 800f5d0:	80fb      	strh	r3, [r7, #6]
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 800f5d2:	4b06      	ldr	r3, [pc, #24]	; (800f5ec <rfalFIFOStatusGetNumBytes+0x34>)
 800f5d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	88fb      	ldrh	r3, [r7, #6]
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	80fb      	strh	r3, [r7, #6]
    return result;
 800f5e0:	88fb      	ldrh	r3, [r7, #6]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3708      	adds	r7, #8
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	20000758 	.word	0x20000758

0800f5f0 <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f5f4:	f7ff ffc0 	bl	800f578 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 800f5f8:	4b05      	ldr	r3, [pc, #20]	; (800f610 <rfalFIFOStatusIsIncompleteByte+0x20>)
 800f5fa:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f5fe:	f003 030e 	and.w	r3, r3, #14
 800f602:	2b00      	cmp	r3, #0
 800f604:	bf14      	ite	ne
 800f606:	2301      	movne	r3, #1
 800f608:	2300      	moveq	r3, #0
 800f60a:	b2db      	uxtb	r3, r3
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	20000758 	.word	0x20000758

0800f614 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f618:	f7ff ffae 	bl	800f578 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_np_lb) != 0U);
 800f61c:	4b05      	ldr	r3, [pc, #20]	; (800f634 <rfalFIFOStatusIsMissingPar+0x20>)
 800f61e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f622:	f003 0301 	and.w	r3, r3, #1
 800f626:	2b00      	cmp	r3, #0
 800f628:	bf14      	ite	ne
 800f62a:	2301      	movne	r3, #1
 800f62c:	2300      	moveq	r3, #0
 800f62e:	b2db      	uxtb	r3, r3
}
 800f630:	4618      	mov	r0, r3
 800f632:	bd80      	pop	{r7, pc}
 800f634:	20000758 	.word	0x20000758

0800f638 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f63c:	f7ff ff9c 	bl	800f578 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 800f640:	4b04      	ldr	r3, [pc, #16]	; (800f654 <rfalFIFOGetNumIncompleteBits+0x1c>)
 800f642:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f646:	085b      	lsrs	r3, r3, #1
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	f003 0307 	and.w	r3, r3, #7
 800f64e:	b2db      	uxtb	r3, r3
}
 800f650:	4618      	mov	r0, r3
 800f652:	bd80      	pop	{r7, pc}
 800f654:	20000758 	.word	0x20000758

0800f658 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08c      	sub	sp, #48	; 0x30
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	607a      	str	r2, [r7, #4]
 800f662:	461a      	mov	r2, r3
 800f664:	460b      	mov	r3, r1
 800f666:	72fb      	strb	r3, [r7, #11]
 800f668:	4613      	mov	r3, r2
 800f66a:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800f66c:	4b55      	ldr	r3, [pc, #340]	; (800f7c4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	2b01      	cmp	r3, #1
 800f672:	d903      	bls.n	800f67c <rfalISO15693TransceiveAnticollisionFrame+0x24>
 800f674:	4b53      	ldr	r3, [pc, #332]	; (800f7c4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f676:	785b      	ldrb	r3, [r3, #1]
 800f678:	2b07      	cmp	r3, #7
 800f67a:	d001      	beq.n	800f680 <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 800f67c:	2321      	movs	r3, #33	; 0x21
 800f67e:	e09d      	b.n	800f7bc <rfalISO15693TransceiveAnticollisionFrame+0x164>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800f680:	f241 0003 	movw	r0, #4099	; 0x1003
 800f684:	f7fd fbf0 	bl	800ce68 <rfalSetAnalogConfig>
    
    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800f688:	4b4e      	ldr	r3, [pc, #312]	; (800f7c4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f68a:	2210      	movs	r2, #16
 800f68c:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800f690:	7afb      	ldrb	r3, [r7, #11]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d101      	bne.n	800f69a <rfalISO15693TransceiveAnticollisionFrame+0x42>
 800f696:	220b      	movs	r2, #11
 800f698:	e000      	b.n	800f69c <rfalISO15693TransceiveAnticollisionFrame+0x44>
 800f69a:	220a      	movs	r2, #10
 800f69c:	7afb      	ldrb	r3, [r7, #11]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d101      	bne.n	800f6a6 <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 800f6a2:	2340      	movs	r3, #64	; 0x40
 800f6a4:	e000      	b.n	800f6a8 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 800f6b0:	7afb      	ldrb	r3, [r7, #11]
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	00db      	lsls	r3, r3, #3
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 800f6be:	7abb      	ldrb	r3, [r7, #10]
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	00db      	lsls	r3, r3, #3
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 800f6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ca:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 800f6cc:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800f6d0:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 800f6d2:	f107 0310 	add.w	r3, r7, #16
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fe fe2e 	bl	800e338 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 800f6dc:	f7fe ffbf 	bl	800e65e <rfalTransceiveRunBlockingTx>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 800f6e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d103      	bne.n	800f6f2 <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 800f6ea:	f7fe ffd5 	bl	800e698 <rfalTransceiveBlockingRx>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Check if a Transmission error and received data is less then expected */
    if( ((ret == ERR_RF_COLLISION) || (ret == ERR_CRC) || (ret == ERR_FRAMING)) && (rfalConvBitsToBytes(*ctx.rxRcvdLen) < RFAL_ISO15693_INV_RES_LEN) )
 800f6f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6f4:	2b1d      	cmp	r3, #29
 800f6f6:	d005      	beq.n	800f704 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800f6f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6fa:	2b15      	cmp	r3, #21
 800f6fc:	d002      	beq.n	800f704 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800f6fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f700:	2b09      	cmp	r3, #9
 800f702:	d112      	bne.n	800f72a <rfalISO15693TransceiveAnticollisionFrame+0xd2>
 800f704:	6a3b      	ldr	r3, [r7, #32]
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	3307      	adds	r3, #7
 800f70a:	08db      	lsrs	r3, r3, #3
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	2b0b      	cmp	r3, #11
 800f710:	d80b      	bhi.n	800f72a <rfalISO15693TransceiveAnticollisionFrame+0xd2>
    {
        /* If INVENTORY_RES is shorter than expected, tag is still modulating *
         * Ensure that response is complete before next frame                 */
        platformDelay( (uint8_t)( (RFAL_ISO15693_INV_RES_LEN - rfalConvBitsToBytes(*ctx.rxRcvdLen)) / ((RFAL_ISO15693_INV_RES_LEN / RFAL_ISO15693_INV_RES_DUR)+1U) ));
 800f712:	6a3b      	ldr	r3, [r7, #32]
 800f714:	881b      	ldrh	r3, [r3, #0]
 800f716:	3307      	adds	r3, #7
 800f718:	08db      	lsrs	r3, r3, #3
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	f1c3 030c 	rsb	r3, r3, #12
 800f720:	089b      	lsrs	r3, r3, #2
 800f722:	b2db      	uxtb	r3, r3
 800f724:	4618      	mov	r0, r3
 800f726:	f7f5 ff4b 	bl	80055c0 <HAL_Delay>
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 800f72a:	4b26      	ldr	r3, [pc, #152]	; (800f7c4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f72c:	789b      	ldrb	r3, [r3, #2]
 800f72e:	2bea      	cmp	r3, #234	; 0xea
 800f730:	d90c      	bls.n	800f74c <rfalISO15693TransceiveAnticollisionFrame+0xf4>
 800f732:	4b24      	ldr	r3, [pc, #144]	; (800f7c4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f734:	789b      	ldrb	r3, [r3, #2]
 800f736:	b29b      	uxth	r3, r3
 800f738:	011b      	lsls	r3, r3, #4
 800f73a:	b29b      	uxth	r3, r3
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	b29b      	uxth	r3, r3
 800f740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f744:	f043 0301 	orr.w	r3, r3, #1
 800f748:	b29b      	uxth	r3, r3
 800f74a:	e00d      	b.n	800f768 <rfalISO15693TransceiveAnticollisionFrame+0x110>
 800f74c:	4b1d      	ldr	r3, [pc, #116]	; (800f7c4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f74e:	789b      	ldrb	r3, [r3, #2]
 800f750:	b29b      	uxth	r3, r3
 800f752:	3301      	adds	r3, #1
 800f754:	b29b      	uxth	r3, r3
 800f756:	011b      	lsls	r3, r3, #4
 800f758:	b29b      	uxth	r3, r3
 800f75a:	b2db      	uxtb	r3, r3
 800f75c:	b29b      	uxth	r3, r3
 800f75e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f762:	f043 0301 	orr.w	r3, r3, #1
 800f766:	b29b      	uxth	r3, r3
 800f768:	4618      	mov	r0, r3
 800f76a:	f7fd fb7d 	bl	800ce68 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 800f76e:	4b15      	ldr	r3, [pc, #84]	; (800f7c4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f770:	78db      	ldrb	r3, [r3, #3]
 800f772:	2bea      	cmp	r3, #234	; 0xea
 800f774:	d90c      	bls.n	800f790 <rfalISO15693TransceiveAnticollisionFrame+0x138>
 800f776:	4b13      	ldr	r3, [pc, #76]	; (800f7c4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f778:	78db      	ldrb	r3, [r3, #3]
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	011b      	lsls	r3, r3, #4
 800f77e:	b29b      	uxth	r3, r3
 800f780:	b2db      	uxtb	r3, r3
 800f782:	b29b      	uxth	r3, r3
 800f784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f788:	f043 0302 	orr.w	r3, r3, #2
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	e00d      	b.n	800f7ac <rfalISO15693TransceiveAnticollisionFrame+0x154>
 800f790:	4b0c      	ldr	r3, [pc, #48]	; (800f7c4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f792:	78db      	ldrb	r3, [r3, #3]
 800f794:	b29b      	uxth	r3, r3
 800f796:	3301      	adds	r3, #1
 800f798:	b29b      	uxth	r3, r3
 800f79a:	011b      	lsls	r3, r3, #4
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f7a6:	f043 0302 	orr.w	r3, r3, #2
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7fd fb5b 	bl	800ce68 <rfalSetAnalogConfig>
    
    gRFAL.nfcvData.ignoreBits = 0;
 800f7b2:	4b04      	ldr	r3, [pc, #16]	; (800f7c4 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
    return ret;
 800f7ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3730      	adds	r7, #48	; 0x30
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	20000758 	.word	0x20000758

0800f7c8 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b088      	sub	sp, #32
 800f7cc:	af02      	add	r7, sp, #8
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	460b      	mov	r3, r1
 800f7d2:	607a      	str	r2, [r7, #4]
 800f7d4:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 800f7d6:	7afa      	ldrb	r2, [r7, #11]
 800f7d8:	f107 0017 	add.w	r0, r7, #23
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	9300      	str	r3, [sp, #0]
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	68fa      	ldr	r2, [r7, #12]
 800f7e4:	2100      	movs	r1, #0
 800f7e6:	f7ff ff37 	bl	800f658 <rfalISO15693TransceiveAnticollisionFrame>
 800f7ea:	4603      	mov	r3, r0
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3718      	adds	r7, #24
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	af00      	add	r7, sp, #0
    return st25r3916IsExtFieldOn();
 800f7f8:	2240      	movs	r2, #64	; 0x40
 800f7fa:	2140      	movs	r1, #64	; 0x40
 800f7fc:	2031      	movs	r0, #49	; 0x31
 800f7fe:	f001 fca9 	bl	8011154 <st25r3916CheckReg>
 800f802:	4603      	mov	r3, r0
}
 800f804:	4618      	mov	r0, r3
 800f806:	bd80      	pop	{r7, pc}

0800f808 <rfalWakeUpModeStart>:

#if RFAL_FEATURE_WAKEUP_MODE

/*******************************************************************************/
ReturnCode rfalWakeUpModeStart( const rfalWakeUpConfig *config )
{
 800f808:	b5b0      	push	{r4, r5, r7, lr}
 800f80a:	b086      	sub	sp, #24
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
    uint8_t                reg;
    uint32_t               irqs;
    
    /* The Wake-Up procedure is explained in detail in Application Note: AN4985 */
    
    if( config == NULL )
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d124      	bne.n	800f860 <rfalWakeUpModeStart+0x58>
    {
        gRFAL.wum.cfg.period      = RFAL_WUM_PERIOD_500MS;
 800f816:	4bc2      	ldr	r3, [pc, #776]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f818:	2214      	movs	r2, #20
 800f81a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        gRFAL.wum.cfg.irqTout     = false;
 800f81e:	4bc0      	ldr	r3, [pc, #768]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f820:	2200      	movs	r2, #0
 800f822:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        gRFAL.wum.cfg.swTagDetect = true;
 800f826:	4bbe      	ldr	r3, [pc, #760]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f828:	2201      	movs	r2, #1
 800f82a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
      
        gRFAL.wum.cfg.indAmp.enabled   = true;
 800f82e:	4bbc      	ldr	r3, [pc, #752]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f830:	2201      	movs	r2, #1
 800f832:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        gRFAL.wum.cfg.indPha.enabled   = false;
 800f836:	4bba      	ldr	r3, [pc, #744]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f838:	2200      	movs	r2, #0
 800f83a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        gRFAL.wum.cfg.cap.enabled      = false;
 800f83e:	4bb8      	ldr	r3, [pc, #736]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f840:	2200      	movs	r2, #0
 800f842:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        gRFAL.wum.cfg.indAmp.delta     = 2U;
 800f846:	4bb6      	ldr	r3, [pc, #728]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f848:	2202      	movs	r2, #2
 800f84a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 800f84e:	4bb4      	ldr	r3, [pc, #720]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f850:	22ff      	movs	r2, #255	; 0xff
 800f852:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 800f856:	4bb2      	ldr	r3, [pc, #712]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f858:	2200      	movs	r2, #0
 800f85a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800f85e:	e00e      	b.n	800f87e <rfalWakeUpModeStart+0x76>
    }
    else
    {
        gRFAL.wum.cfg = *config;
 800f860:	4baf      	ldr	r3, [pc, #700]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f862:	687a      	ldr	r2, [r7, #4]
 800f864:	3351      	adds	r3, #81	; 0x51
 800f866:	6811      	ldr	r1, [r2, #0]
 800f868:	6855      	ldr	r5, [r2, #4]
 800f86a:	6894      	ldr	r4, [r2, #8]
 800f86c:	68d0      	ldr	r0, [r2, #12]
 800f86e:	6019      	str	r1, [r3, #0]
 800f870:	605d      	str	r5, [r3, #4]
 800f872:	609c      	str	r4, [r3, #8]
 800f874:	60d8      	str	r0, [r3, #12]
 800f876:	6911      	ldr	r1, [r2, #16]
 800f878:	6119      	str	r1, [r3, #16]
 800f87a:	7d12      	ldrb	r2, [r2, #20]
 800f87c:	751a      	strb	r2, [r3, #20]
    }
    
    /* Check for valid configuration */
    if( (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 800f87e:	4ba8      	ldr	r3, [pc, #672]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f880:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f884:	f083 0301 	eor.w	r3, r3, #1
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d00f      	beq.n	800f8ae <rfalWakeUpModeStart+0xa6>
 800f88e:	4ba4      	ldr	r3, [pc, #656]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f890:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f894:	f083 0301 	eor.w	r3, r3, #1
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d007      	beq.n	800f8ae <rfalWakeUpModeStart+0xa6>
 800f89e:	4ba0      	ldr	r3, [pc, #640]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f8a0:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800f8a4:	f083 0301 	eor.w	r3, r3, #1
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d118      	bne.n	800f8e0 <rfalWakeUpModeStart+0xd8>
        (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  ||
 800f8ae:	4b9c      	ldr	r3, [pc, #624]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f8b0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d009      	beq.n	800f8cc <rfalWakeUpModeStart+0xc4>
        (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  ||
 800f8b8:	4b99      	ldr	r3, [pc, #612]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f8ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d10e      	bne.n	800f8e0 <rfalWakeUpModeStart+0xd8>
 800f8c2:	4b97      	ldr	r3, [pc, #604]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f8c4:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d109      	bne.n	800f8e0 <rfalWakeUpModeStart+0xd8>
        (gRFAL.wum.cfg.cap.enabled  &&  gRFAL.wum.cfg.swTagDetect)                                        )
 800f8cc:	4b94      	ldr	r3, [pc, #592]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f8ce:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
        (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  ||
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d006      	beq.n	800f8e4 <rfalWakeUpModeStart+0xdc>
        (gRFAL.wum.cfg.cap.enabled  &&  gRFAL.wum.cfg.swTagDetect)                                        )
 800f8d6:	4b92      	ldr	r3, [pc, #584]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f8d8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d001      	beq.n	800f8e4 <rfalWakeUpModeStart+0xdc>
    {
        return ERR_PARAM;
 800f8e0:	2307      	movs	r3, #7
 800f8e2:	e18e      	b.n	800fc02 <rfalWakeUpModeStart+0x3fa>
    }
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	613b      	str	r3, [r7, #16]
    
    /* Disable Tx, Rx, External Field Detector and set default ISO14443A mode */
    st25r3916TxRxOff();
 800f8e8:	2148      	movs	r1, #72	; 0x48
 800f8ea:	2002      	movs	r0, #2
 800f8ec:	f001 fb4a 	bl	8010f84 <st25r3916ClrRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask );
 800f8f0:	2103      	movs	r1, #3
 800f8f2:	2002      	movs	r0, #2
 800f8f4:	f001 fb46 	bl	8010f84 <st25r3916ClrRegisterBits>
    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask), (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_iso14443a) );
 800f8f8:	2208      	movs	r2, #8
 800f8fa:	21f8      	movs	r1, #248	; 0xf8
 800f8fc:	2003      	movs	r0, #3
 800f8fe:	f001 fba5 	bl	801104c <st25r3916ChangeRegisterBits>
    
    /* Set Analog configurations for Wake-up On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 800f902:	2004      	movs	r0, #4
 800f904:	f7fd fab0 	bl	800ce68 <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Check if AAT is enabled. If so disable en bit to give time for the Voltage  *
     * on the to varicaps to settle and have a stable reference measurment         */
    if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_aat_en, ST25R3916_REG_IO_CONF2_aat_en ) && !gRFAL.wum.cfg.swTagDetect )
 800f908:	2220      	movs	r2, #32
 800f90a:	2120      	movs	r1, #32
 800f90c:	2001      	movs	r0, #1
 800f90e:	f001 fc21 	bl	8011154 <st25r3916CheckReg>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d00f      	beq.n	800f938 <rfalWakeUpModeStart+0x130>
 800f918:	4b81      	ldr	r3, [pc, #516]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f91a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f91e:	f083 0301 	eor.w	r3, r3, #1
 800f922:	b2db      	uxtb	r3, r3
 800f924:	2b00      	cmp	r3, #0
 800f926:	d007      	beq.n	800f938 <rfalWakeUpModeStart+0x130>
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 800f928:	2180      	movs	r1, #128	; 0x80
 800f92a:	2002      	movs	r0, #2
 800f92c:	f001 fb2a 	bl	8010f84 <st25r3916ClrRegisterBits>
        platformDelay( RFAL_ST25R3916_AAT_SETTLE_OFF );
 800f930:	2014      	movs	r0, #20
 800f932:	f7f5 fe45 	bl	80055c0 <HAL_Delay>
 800f936:	e007      	b.n	800f948 <rfalWakeUpModeStart+0x140>
    }
    /* In SW Tag detection remain in ready let the varicaps settle  */
    else if( gRFAL.wum.cfg.swTagDetect )
 800f938:	4b79      	ldr	r3, [pc, #484]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f93a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d002      	beq.n	800f948 <rfalWakeUpModeStart+0x140>
    {
        platformDelay( RFAL_ST25R3916_AAT_SETTLE_ON );
 800f942:	2005      	movs	r0, #5
 800f944:	f7f5 fe3c 	bl	80055c0 <HAL_Delay>
    }
    
    
    /*******************************************************************************/
    /* Prepare Wake-Up Timer Control Register */
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3916_REG_WUP_TIMER_CONTROL_wut_shift);
 800f948:	4b75      	ldr	r3, [pc, #468]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f94a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f94e:	011b      	lsls	r3, r3, #4
 800f950:	75fb      	strb	r3, [r7, #23]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3916_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 800f952:	4b73      	ldr	r3, [pc, #460]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f958:	2b0f      	cmp	r3, #15
 800f95a:	d802      	bhi.n	800f962 <rfalWakeUpModeStart+0x15a>
 800f95c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800f960:	e000      	b.n	800f964 <rfalWakeUpModeStart+0x15c>
 800f962:	2200      	movs	r2, #0
 800f964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f968:	4313      	orrs	r3, r2
 800f96a:	b25b      	sxtb	r3, r3
 800f96c:	75fb      	strb	r3, [r7, #23]
    
    if( gRFAL.wum.cfg.irqTout || gRFAL.wum.cfg.swTagDetect )
 800f96e:	4b6c      	ldr	r3, [pc, #432]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f970:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800f974:	2b00      	cmp	r3, #0
 800f976:	d104      	bne.n	800f982 <rfalWakeUpModeStart+0x17a>
 800f978:	4b69      	ldr	r3, [pc, #420]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f97a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d007      	beq.n	800f992 <rfalWakeUpModeStart+0x18a>
    {
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wto;
 800f982:	7dfb      	ldrb	r3, [r7, #23]
 800f984:	f043 0308 	orr.w	r3, r3, #8
 800f988:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3916_IRQ_MASK_WT;
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f990:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Amplitude is to be performed */
    if( gRFAL.wum.cfg.indAmp.enabled )
 800f992:	4b63      	ldr	r3, [pc, #396]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f994:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d051      	beq.n	800fa40 <rfalWakeUpModeStart+0x238>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_d_shift);
 800f99c:	4b60      	ldr	r3, [pc, #384]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f99e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f9a2:	011b      	lsls	r3, r3, #4
 800f9a4:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 800f9a6:	4b5e      	ldr	r3, [pc, #376]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f9a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d001      	beq.n	800f9b4 <rfalWakeUpModeStart+0x1ac>
 800f9b0:	2208      	movs	r2, #8
 800f9b2:	e000      	b.n	800f9b6 <rfalWakeUpModeStart+0x1ae>
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9ba:	4313      	orrs	r3, r2
 800f9bc:	b25b      	sxtb	r3, r3
 800f9be:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_shift) & ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_mask);
 800f9c0:	4b57      	ldr	r3, [pc, #348]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f9c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f9c6:	005b      	lsls	r3, r3, #1
 800f9c8:	b2db      	uxtb	r3, r3
 800f9ca:	b25b      	sxtb	r3, r3
 800f9cc:	f003 0306 	and.w	r3, r3, #6
 800f9d0:	b25a      	sxtb	r2, r3
 800f9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	b25b      	sxtb	r3, r3
 800f9da:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 800f9dc:	4b50      	ldr	r3, [pc, #320]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f9de:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800f9e2:	b25a      	sxtb	r2, r3
 800f9e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9e8:	4313      	orrs	r3, r2
 800f9ea:	b25b      	sxtb	r3, r3
 800f9ec:	73fb      	strb	r3, [r7, #15]
        
        st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_CONF, aux );
 800f9ee:	7bfb      	ldrb	r3, [r7, #15]
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	2033      	movs	r0, #51	; 0x33
 800f9f4:	f001 f9dc 	bl	8010db0 <st25r3916WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indAmp.autoAvg || gRFAL.wum.cfg.swTagDetect )
 800f9f8:	4b49      	ldr	r3, [pc, #292]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800f9fa:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800f9fe:	f083 0301 	eor.w	r3, r3, #1
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d104      	bne.n	800fa12 <rfalWakeUpModeStart+0x20a>
 800fa08:	4b45      	ldr	r3, [pc, #276]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fa0a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d00e      	beq.n	800fa30 <rfalWakeUpModeStart+0x228>
        {
            if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 800fa12:	4b43      	ldr	r3, [pc, #268]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fa14:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800fa18:	2bff      	cmp	r3, #255	; 0xff
 800fa1a:	d102      	bne.n	800fa22 <rfalWakeUpModeStart+0x21a>
            {
                st25r3916MeasureAmplitude( &gRFAL.wum.cfg.indAmp.reference );
 800fa1c:	4841      	ldr	r0, [pc, #260]	; (800fb24 <rfalWakeUpModeStart+0x31c>)
 800fa1e:	f000 fbbc 	bl	801019a <st25r3916MeasureAmplitude>
            }
            st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_REF, gRFAL.wum.cfg.indAmp.reference );
 800fa22:	4b3f      	ldr	r3, [pc, #252]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fa24:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800fa28:	4619      	mov	r1, r3
 800fa2a:	2034      	movs	r0, #52	; 0x34
 800fa2c:	f001 f9c0 	bl	8010db0 <st25r3916WriteRegister>
        }
        
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wam;
 800fa30:	7dfb      	ldrb	r3, [r7, #23]
 800fa32:	f043 0304 	orr.w	r3, r3, #4
 800fa36:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3916_IRQ_MASK_WAM;
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fa3e:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Phase is to be performed */
    if( gRFAL.wum.cfg.indPha.enabled )
 800fa40:	4b37      	ldr	r3, [pc, #220]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fa42:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d051      	beq.n	800faee <rfalWakeUpModeStart+0x2e6>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3916_REG_PHASE_MEASURE_CONF_pm_d_shift);
 800fa4a:	4b35      	ldr	r3, [pc, #212]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fa4c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800fa50:	011b      	lsls	r3, r3, #4
 800fa52:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 800fa54:	4b32      	ldr	r3, [pc, #200]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fa56:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d001      	beq.n	800fa62 <rfalWakeUpModeStart+0x25a>
 800fa5e:	2208      	movs	r2, #8
 800fa60:	e000      	b.n	800fa64 <rfalWakeUpModeStart+0x25c>
 800fa62:	2200      	movs	r2, #0
 800fa64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa68:	4313      	orrs	r3, r2
 800fa6a:	b25b      	sxtb	r3, r3
 800fa6c:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_shift) & ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_mask);
 800fa6e:	4b2c      	ldr	r3, [pc, #176]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fa70:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800fa74:	005b      	lsls	r3, r3, #1
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	b25b      	sxtb	r3, r3
 800fa7a:	f003 0306 	and.w	r3, r3, #6
 800fa7e:	b25a      	sxtb	r2, r3
 800fa80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa84:	4313      	orrs	r3, r2
 800fa86:	b25b      	sxtb	r3, r3
 800fa88:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 800fa8a:	4b25      	ldr	r3, [pc, #148]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fa8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fa90:	b25a      	sxtb	r2, r3
 800fa92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa96:	4313      	orrs	r3, r2
 800fa98:	b25b      	sxtb	r3, r3
 800fa9a:	73fb      	strb	r3, [r7, #15]
        
        st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_CONF, aux );
 800fa9c:	7bfb      	ldrb	r3, [r7, #15]
 800fa9e:	4619      	mov	r1, r3
 800faa0:	2037      	movs	r0, #55	; 0x37
 800faa2:	f001 f985 	bl	8010db0 <st25r3916WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indPha.autoAvg || gRFAL.wum.cfg.swTagDetect )
 800faa6:	4b1e      	ldr	r3, [pc, #120]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800faa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800faac:	f083 0301 	eor.w	r3, r3, #1
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d104      	bne.n	800fac0 <rfalWakeUpModeStart+0x2b8>
 800fab6:	4b1a      	ldr	r3, [pc, #104]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fab8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00e      	beq.n	800fade <rfalWakeUpModeStart+0x2d6>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 800fac0:	4b17      	ldr	r3, [pc, #92]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fac2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fac6:	2bff      	cmp	r3, #255	; 0xff
 800fac8:	d102      	bne.n	800fad0 <rfalWakeUpModeStart+0x2c8>
            {
                st25r3916MeasurePhase( &gRFAL.wum.cfg.indPha.reference );
 800faca:	4817      	ldr	r0, [pc, #92]	; (800fb28 <rfalWakeUpModeStart+0x320>)
 800facc:	f000 fb74 	bl	80101b8 <st25r3916MeasurePhase>
            
            }
            st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_REF, gRFAL.wum.cfg.indPha.reference );
 800fad0:	4b13      	ldr	r3, [pc, #76]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fad2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fad6:	4619      	mov	r1, r3
 800fad8:	2038      	movs	r0, #56	; 0x38
 800fada:	f001 f969 	bl	8010db0 <st25r3916WriteRegister>
        }
        
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wph;
 800fade:	7dfb      	ldrb	r3, [r7, #23]
 800fae0:	f043 0302 	orr.w	r3, r3, #2
 800fae4:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3916_IRQ_MASK_WPH;
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800faec:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Capacitive is to be performed */
    if( gRFAL.wum.cfg.cap.enabled )
 800faee:	4b0c      	ldr	r3, [pc, #48]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800faf0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d05f      	beq.n	800fbb8 <rfalWakeUpModeStart+0x3b0>
    {
        /*******************************************************************************/
        /* Perform Capacitive sensor calibration */
        
        /* Disable Oscillator and Field */
        st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_tx_en) );
 800faf8:	2188      	movs	r1, #136	; 0x88
 800fafa:	2002      	movs	r0, #2
 800fafc:	f001 fa42 	bl	8010f84 <st25r3916ClrRegisterBits>
        
        /* Sensor gain should be configured on Analog Config: RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON */
        
        /* Perform calibration procedure */
        st25r3916CalibrateCapacitiveSensor( NULL );
 800fb00:	2000      	movs	r0, #0
 800fb02:	f000 fb77 	bl	80101f4 <st25r3916CalibrateCapacitiveSensor>
        
        
        /*******************************************************************************/
        aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_d_shift);
 800fb06:	4b06      	ldr	r3, [pc, #24]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fb08:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fb0c:	011b      	lsls	r3, r3, #4
 800fb0e:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 800fb10:	4b03      	ldr	r3, [pc, #12]	; (800fb20 <rfalWakeUpModeStart+0x318>)
 800fb12:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d008      	beq.n	800fb2c <rfalWakeUpModeStart+0x324>
 800fb1a:	2208      	movs	r2, #8
 800fb1c:	e007      	b.n	800fb2e <rfalWakeUpModeStart+0x326>
 800fb1e:	bf00      	nop
 800fb20:	20000758 	.word	0x20000758
 800fb24:	200007ae 	.word	0x200007ae
 800fb28:	200007b4 	.word	0x200007b4
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb32:	4313      	orrs	r3, r2
 800fb34:	b25b      	sxtb	r3, r3
 800fb36:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_shift) & ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_mask);
 800fb38:	4b34      	ldr	r3, [pc, #208]	; (800fc0c <rfalWakeUpModeStart+0x404>)
 800fb3a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800fb3e:	005b      	lsls	r3, r3, #1
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	b25b      	sxtb	r3, r3
 800fb44:	f003 0306 	and.w	r3, r3, #6
 800fb48:	b25a      	sxtb	r2, r3
 800fb4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb4e:	4313      	orrs	r3, r2
 800fb50:	b25b      	sxtb	r3, r3
 800fb52:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 800fb54:	4b2d      	ldr	r3, [pc, #180]	; (800fc0c <rfalWakeUpModeStart+0x404>)
 800fb56:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800fb5a:	b25a      	sxtb	r2, r3
 800fb5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb60:	4313      	orrs	r3, r2
 800fb62:	b25b      	sxtb	r3, r3
 800fb64:	73fb      	strb	r3, [r7, #15]
        
        st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_CONF, aux );
 800fb66:	7bfb      	ldrb	r3, [r7, #15]
 800fb68:	4619      	mov	r1, r3
 800fb6a:	203b      	movs	r0, #59	; 0x3b
 800fb6c:	f001 f920 	bl	8010db0 <st25r3916WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.cap.autoAvg || gRFAL.wum.cfg.swTagDetect )
 800fb70:	4b26      	ldr	r3, [pc, #152]	; (800fc0c <rfalWakeUpModeStart+0x404>)
 800fb72:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800fb76:	f083 0301 	eor.w	r3, r3, #1
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d104      	bne.n	800fb8a <rfalWakeUpModeStart+0x382>
 800fb80:	4b22      	ldr	r3, [pc, #136]	; (800fc0c <rfalWakeUpModeStart+0x404>)
 800fb82:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d00e      	beq.n	800fba8 <rfalWakeUpModeStart+0x3a0>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 800fb8a:	4b20      	ldr	r3, [pc, #128]	; (800fc0c <rfalWakeUpModeStart+0x404>)
 800fb8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fb90:	2bff      	cmp	r3, #255	; 0xff
 800fb92:	d102      	bne.n	800fb9a <rfalWakeUpModeStart+0x392>
            {
                st25r3916MeasureCapacitance( &gRFAL.wum.cfg.cap.reference );
 800fb94:	481e      	ldr	r0, [pc, #120]	; (800fc10 <rfalWakeUpModeStart+0x408>)
 800fb96:	f000 fb1e 	bl	80101d6 <st25r3916MeasureCapacitance>
            }
            st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_REF, gRFAL.wum.cfg.cap.reference );
 800fb9a:	4b1c      	ldr	r3, [pc, #112]	; (800fc0c <rfalWakeUpModeStart+0x404>)
 800fb9c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800fba0:	4619      	mov	r1, r3
 800fba2:	203c      	movs	r0, #60	; 0x3c
 800fba4:	f001 f904 	bl	8010db0 <st25r3916WriteRegister>
        }
        
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wcap;
 800fba8:	7dfb      	ldrb	r3, [r7, #23]
 800fbaa:	f043 0301 	orr.w	r3, r3, #1
 800fbae:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3916_IRQ_MASK_WCAP;
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fbb6:	613b      	str	r3, [r7, #16]
    }

    
    /* Disable and clear all interrupts except Wake-Up IRQs */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 800fbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbbc:	f001 fc98 	bl	80114f0 <st25r3916DisableInterrupts>
    st25r3916GetInterrupt( irqs );
 800fbc0:	6938      	ldr	r0, [r7, #16]
 800fbc2:	f001 fc51 	bl	8011468 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( irqs );
 800fbc6:	6938      	ldr	r0, [r7, #16]
 800fbc8:	f001 fc86 	bl	80114d8 <st25r3916EnableInterrupts>
    
    /* On SW Tag Detection no HW automatic measurements are to be performed, only make use of WTO */
    if( gRFAL.wum.cfg.swTagDetect )
 800fbcc:	4b0f      	ldr	r3, [pc, #60]	; (800fc0c <rfalWakeUpModeStart+0x404>)
 800fbce:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d003      	beq.n	800fbde <rfalWakeUpModeStart+0x3d6>
    {
        reg &= ~(ST25R3916_REG_WUP_TIMER_CONTROL_wam | ST25R3916_REG_WUP_TIMER_CONTROL_wph | ST25R3916_REG_WUP_TIMER_CONTROL_wcap);
 800fbd6:	7dfb      	ldrb	r3, [r7, #23]
 800fbd8:	f023 0307 	bic.w	r3, r3, #7
 800fbdc:	75fb      	strb	r3, [r7, #23]
    }
    
    /* Enable Low Power Wake-Up Mode (Disable: Oscilattor, Tx, Rx and External Field Detector)*/
    st25r3916WriteRegister( ST25R3916_REG_WUP_TIMER_CONTROL, reg );
 800fbde:	7dfb      	ldrb	r3, [r7, #23]
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	2032      	movs	r0, #50	; 0x32
 800fbe4:	f001 f8e4 	bl	8010db0 <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL , 
 800fbe8:	2204      	movs	r2, #4
 800fbea:	21cf      	movs	r1, #207	; 0xcf
 800fbec:	2002      	movs	r0, #2
 800fbee:	f001 fa2d 	bl	801104c <st25r3916ChangeRegisterBits>
                                (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_rx_en | ST25R3916_REG_OP_CONTROL_tx_en | 
                                 ST25R3916_REG_OP_CONTROL_en_fd_mask | ST25R3916_REG_OP_CONTROL_wu                              ) , 
                                 ST25R3916_REG_OP_CONTROL_wu );
    
    
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 800fbf2:	4b06      	ldr	r3, [pc, #24]	; (800fc0c <rfalWakeUpModeStart+0x404>)
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    gRFAL.state     = RFAL_STATE_WUM;
 800fbfa:	4b04      	ldr	r3, [pc, #16]	; (800fc0c <rfalWakeUpModeStart+0x404>)
 800fbfc:	2205      	movs	r2, #5
 800fbfe:	701a      	strb	r2, [r3, #0]
      
    return ERR_NONE;
 800fc00:	2300      	movs	r3, #0
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3718      	adds	r7, #24
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bdb0      	pop	{r4, r5, r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	20000758 	.word	0x20000758
 800fc10:	200007ba 	.word	0x200007ba

0800fc14 <rfalWakeUpModeHasWoke>:


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 800fc14:	b480      	push	{r7}
 800fc16:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 800fc18:	4b06      	ldr	r3, [pc, #24]	; (800fc34 <rfalWakeUpModeHasWoke+0x20>)
 800fc1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	bf8c      	ite	hi
 800fc22:	2301      	movhi	r3, #1
 800fc24:	2300      	movls	r3, #0
 800fc26:	b2db      	uxtb	r3, r3
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr
 800fc32:	bf00      	nop
 800fc34:	20000758 	.word	0x20000758

0800fc38 <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
    uint32_t irqs;
    uint8_t  reg;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 800fc3e:	4b6a      	ldr	r3, [pc, #424]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	2b05      	cmp	r3, #5
 800fc44:	f040 80c6 	bne.w	800fdd4 <rfalRunWakeUpModeWorker+0x19c>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 800fc48:	4b67      	ldr	r3, [pc, #412]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fc4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fc4e:	3b01      	subs	r3, #1
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	f200 80c1 	bhi.w	800fdd8 <rfalRunWakeUpModeWorker+0x1a0>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP ) );
 800fc56:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800fc5a:	f001 fc05 	bl	8011468 <st25r3916GetInterrupt>
 800fc5e:	6078      	str	r0, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	f000 80ba 	beq.w	800fddc <rfalRunWakeUpModeWorker+0x1a4>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3916_IRQ_MASK_WAM) != 0U)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d008      	beq.n	800fc84 <rfalRunWakeUpModeWorker+0x4c>
            {
                st25r3916ReadRegister( ST25R3916_REG_AMPLITUDE_MEASURE_RESULT, &reg );
 800fc72:	1cfb      	adds	r3, r7, #3
 800fc74:	4619      	mov	r1, r3
 800fc76:	2036      	movs	r0, #54	; 0x36
 800fc78:	f001 f85c 	bl	8010d34 <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fc7c:	4b5a      	ldr	r3, [pc, #360]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fc7e:	2202      	movs	r2, #2
 800fc80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WPH) != 0U)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d008      	beq.n	800fca0 <rfalRunWakeUpModeWorker+0x68>
            {
                st25r3916ReadRegister( ST25R3916_REG_PHASE_MEASURE_RESULT, &reg );
 800fc8e:	1cfb      	adds	r3, r7, #3
 800fc90:	4619      	mov	r1, r3
 800fc92:	203a      	movs	r0, #58	; 0x3a
 800fc94:	f001 f84e 	bl	8010d34 <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fc98:	4b53      	ldr	r3, [pc, #332]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fc9a:	2202      	movs	r2, #2
 800fc9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WCAP) != 0U)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d008      	beq.n	800fcbc <rfalRunWakeUpModeWorker+0x84>
            {
                st25r3916ReadRegister( ST25R3916_REG_CAPACITANCE_MEASURE_RESULT, &reg );
 800fcaa:	1cfb      	adds	r3, r7, #3
 800fcac:	4619      	mov	r1, r3
 800fcae:	203e      	movs	r0, #62	; 0x3e
 800fcb0:	f001 f840 	bl	8010d34 <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;                
 800fcb4:	4b4c      	ldr	r3, [pc, #304]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fcb6:	2202      	movs	r2, #2
 800fcb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WT) != 0U)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	f000 808c 	beq.w	800fde0 <rfalRunWakeUpModeWorker+0x1a8>
            {
                /*******************************************************************************/
                if( gRFAL.wum.cfg.swTagDetect )
 800fcc8:	4b47      	ldr	r3, [pc, #284]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fcca:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f000 8086 	beq.w	800fde0 <rfalRunWakeUpModeWorker+0x1a8>
                {
                    /* Enable Ready mode */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), (ST25R3916_REG_OP_CONTROL_en) );
 800fcd4:	2280      	movs	r2, #128	; 0x80
 800fcd6:	2184      	movs	r1, #132	; 0x84
 800fcd8:	2002      	movs	r0, #2
 800fcda:	f001 f9b7 	bl	801104c <st25r3916ChangeRegisterBits>
                    platformDelay( RFAL_ST25R3916_AAT_SETTLE_ON );
 800fcde:	2005      	movs	r0, #5
 800fce0:	f7f5 fc6e 	bl	80055c0 <HAL_Delay>
                    
                    
                    if( gRFAL.wum.cfg.indAmp.enabled )
 800fce4:	4b40      	ldr	r3, [pc, #256]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fce6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d020      	beq.n	800fd30 <rfalRunWakeUpModeWorker+0xf8>
                    {
                        st25r3916MeasureAmplitude( &reg );
 800fcee:	1cfb      	adds	r3, r7, #3
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f000 fa52 	bl	801019a <st25r3916MeasureAmplitude>
                        if( (reg >= (gRFAL.wum.cfg.indAmp.reference + gRFAL.wum.cfg.indAmp.delta)) || ( reg <= (gRFAL.wum.cfg.indAmp.reference - gRFAL.wum.cfg.indAmp.delta)) )
 800fcf6:	78fb      	ldrb	r3, [r7, #3]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	4b3b      	ldr	r3, [pc, #236]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fcfc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800fd00:	4619      	mov	r1, r3
 800fd02:	4b39      	ldr	r3, [pc, #228]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd04:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fd08:	440b      	add	r3, r1
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	da0b      	bge.n	800fd26 <rfalRunWakeUpModeWorker+0xee>
 800fd0e:	78fb      	ldrb	r3, [r7, #3]
 800fd10:	461a      	mov	r2, r3
 800fd12:	4b35      	ldr	r3, [pc, #212]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd14:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800fd18:	4619      	mov	r1, r3
 800fd1a:	4b33      	ldr	r3, [pc, #204]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd1c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fd20:	1acb      	subs	r3, r1, r3
 800fd22:	429a      	cmp	r2, r3
 800fd24:	dc04      	bgt.n	800fd30 <rfalRunWakeUpModeWorker+0xf8>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fd26:	4b30      	ldr	r3, [pc, #192]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd28:	2202      	movs	r2, #2
 800fd2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            break;
 800fd2e:	e058      	b.n	800fde2 <rfalRunWakeUpModeWorker+0x1aa>
                        }
                    }
                    
                    if( gRFAL.wum.cfg.indPha.enabled )
 800fd30:	4b2d      	ldr	r3, [pc, #180]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd32:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d020      	beq.n	800fd7c <rfalRunWakeUpModeWorker+0x144>
                    {
                        st25r3916MeasurePhase( &reg );
 800fd3a:	1cfb      	adds	r3, r7, #3
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f000 fa3b 	bl	80101b8 <st25r3916MeasurePhase>
                        if( (reg >= (gRFAL.wum.cfg.indPha.reference + gRFAL.wum.cfg.indPha.delta)) || ( reg <= (gRFAL.wum.cfg.indPha.reference - gRFAL.wum.cfg.indPha.delta)) )
 800fd42:	78fb      	ldrb	r3, [r7, #3]
 800fd44:	461a      	mov	r2, r3
 800fd46:	4b28      	ldr	r3, [pc, #160]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	4b26      	ldr	r3, [pc, #152]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd50:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800fd54:	440b      	add	r3, r1
 800fd56:	429a      	cmp	r2, r3
 800fd58:	da0b      	bge.n	800fd72 <rfalRunWakeUpModeWorker+0x13a>
 800fd5a:	78fb      	ldrb	r3, [r7, #3]
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	4b22      	ldr	r3, [pc, #136]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fd64:	4619      	mov	r1, r3
 800fd66:	4b20      	ldr	r3, [pc, #128]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd68:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800fd6c:	1acb      	subs	r3, r1, r3
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	dc04      	bgt.n	800fd7c <rfalRunWakeUpModeWorker+0x144>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fd72:	4b1d      	ldr	r3, [pc, #116]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd74:	2202      	movs	r2, #2
 800fd76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            break;
 800fd7a:	e032      	b.n	800fde2 <rfalRunWakeUpModeWorker+0x1aa>
                        }
                    }
                    
                    if( gRFAL.wum.cfg.cap.enabled )
 800fd7c:	4b1a      	ldr	r3, [pc, #104]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd7e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d020      	beq.n	800fdc8 <rfalRunWakeUpModeWorker+0x190>
                    {
                        st25r3916MeasureCapacitance( &reg );
 800fd86:	1cfb      	adds	r3, r7, #3
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f000 fa24 	bl	80101d6 <st25r3916MeasureCapacitance>
                        if( (reg >= (gRFAL.wum.cfg.cap.reference + gRFAL.wum.cfg.cap.delta)) || ( reg <= (gRFAL.wum.cfg.cap.reference - gRFAL.wum.cfg.cap.delta)) )
 800fd8e:	78fb      	ldrb	r3, [r7, #3]
 800fd90:	461a      	mov	r2, r3
 800fd92:	4b15      	ldr	r3, [pc, #84]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd94:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800fd98:	4619      	mov	r1, r3
 800fd9a:	4b13      	ldr	r3, [pc, #76]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fd9c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fda0:	440b      	add	r3, r1
 800fda2:	429a      	cmp	r2, r3
 800fda4:	da0b      	bge.n	800fdbe <rfalRunWakeUpModeWorker+0x186>
 800fda6:	78fb      	ldrb	r3, [r7, #3]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	4b0f      	ldr	r3, [pc, #60]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fdac:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	4b0d      	ldr	r3, [pc, #52]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fdb4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fdb8:	1acb      	subs	r3, r1, r3
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	dc04      	bgt.n	800fdc8 <rfalRunWakeUpModeWorker+0x190>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fdbe:	4b0a      	ldr	r3, [pc, #40]	; (800fde8 <rfalRunWakeUpModeWorker+0x1b0>)
 800fdc0:	2202      	movs	r2, #2
 800fdc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            break;
 800fdc6:	e00c      	b.n	800fde2 <rfalRunWakeUpModeWorker+0x1aa>
                        }
                    }
                    
                    /* Re-Enable low power Wake-Up mode for wto to trigger another measurement(s) */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), (ST25R3916_REG_OP_CONTROL_wu) );
 800fdc8:	2204      	movs	r2, #4
 800fdca:	2184      	movs	r1, #132	; 0x84
 800fdcc:	2002      	movs	r0, #2
 800fdce:	f001 f93d 	bl	801104c <st25r3916ChangeRegisterBits>
                }
            }
            break;
 800fdd2:	e005      	b.n	800fde0 <rfalRunWakeUpModeWorker+0x1a8>
        return;
 800fdd4:	bf00      	nop
 800fdd6:	e004      	b.n	800fde2 <rfalRunWakeUpModeWorker+0x1aa>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800fdd8:	bf00      	nop
 800fdda:	e002      	b.n	800fde2 <rfalRunWakeUpModeWorker+0x1aa>
               break;  /* No interrupt to process */
 800fddc:	bf00      	nop
 800fdde:	e000      	b.n	800fde2 <rfalRunWakeUpModeWorker+0x1aa>
            break;
 800fde0:	bf00      	nop
    }
}
 800fde2:	3708      	adds	r7, #8
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	20000758 	.word	0x20000758

0800fdec <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	af00      	add	r7, sp, #0
    if( gRFAL.wum.state == RFAL_WUM_STATE_NOT_INIT )
 800fdf0:	4b0f      	ldr	r3, [pc, #60]	; (800fe30 <rfalWakeUpModeStop+0x44>)
 800fdf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d101      	bne.n	800fdfe <rfalWakeUpModeStop+0x12>
    {
        return ERR_WRONG_STATE;
 800fdfa:	2321      	movs	r3, #33	; 0x21
 800fdfc:	e016      	b.n	800fe2c <rfalWakeUpModeStop+0x40>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800fdfe:	4b0c      	ldr	r3, [pc, #48]	; (800fe30 <rfalWakeUpModeStop+0x44>)
 800fe00:	2200      	movs	r2, #0
 800fe02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    /* Disable Wake-Up Mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800fe06:	2104      	movs	r1, #4
 800fe08:	2002      	movs	r0, #2
 800fe0a:	f001 f8bb 	bl	8010f84 <st25r3916ClrRegisterBits>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP) );
 800fe0e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800fe12:	f001 fb6d 	bl	80114f0 <st25r3916DisableInterrupts>
    
    /* Re-Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 800fe16:	2203      	movs	r2, #3
 800fe18:	2103      	movs	r1, #3
 800fe1a:	2002      	movs	r0, #2
 800fe1c:	f001 f916 	bl	801104c <st25r3916ChangeRegisterBits>
    
    /* Re-Enable the Oscillator */
    st25r3916OscOn();
 800fe20:	f000 f916 	bl	8010050 <st25r3916OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 800fe24:	2005      	movs	r0, #5
 800fe26:	f7fd f81f 	bl	800ce68 <rfalSetAnalogConfig>
      
    return ERR_NONE;
 800fe2a:	2300      	movs	r3, #0
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	20000758 	.word	0x20000758

0800fe34 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	80fb      	strh	r3, [r7, #6]
 800fe3e:	460b      	mov	r3, r1
 800fe40:	717b      	strb	r3, [r7, #5]
 800fe42:	4613      	mov	r3, r2
 800fe44:	713b      	strb	r3, [r7, #4]
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 800fe46:	88fb      	ldrh	r3, [r7, #6]
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f001 f9a2 	bl	8011194 <st25r3916IsRegValid>
 800fe50:	4603      	mov	r3, r0
 800fe52:	f083 0301 	eor.w	r3, r3, #1
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d001      	beq.n	800fe60 <rfalChipChangeRegBits+0x2c>
    {
        return ERR_PARAM;
 800fe5c:	2307      	movs	r3, #7
 800fe5e:	e007      	b.n	800fe70 <rfalChipChangeRegBits+0x3c>
    }
    
    return st25r3916ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 800fe60:	88fb      	ldrh	r3, [r7, #6]
 800fe62:	b2db      	uxtb	r3, r3
 800fe64:	793a      	ldrb	r2, [r7, #4]
 800fe66:	7979      	ldrb	r1, [r7, #5]
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f001 f8ef 	bl	801104c <st25r3916ChangeRegisterBits>
 800fe6e:	4603      	mov	r3, r0
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	4603      	mov	r3, r0
 800fe80:	80fb      	strh	r3, [r7, #6]
 800fe82:	460b      	mov	r3, r1
 800fe84:	717b      	strb	r3, [r7, #5]
 800fe86:	4613      	mov	r3, r2
 800fe88:	713b      	strb	r3, [r7, #4]
    st25r3916ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 800fe8a:	88fb      	ldrh	r3, [r7, #6]
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	793a      	ldrb	r2, [r7, #4]
 800fe90:	7979      	ldrb	r1, [r7, #5]
 800fe92:	4618      	mov	r0, r3
 800fe94:	f001 f926 	bl	80110e4 <st25r3916ChangeTestRegisterBits>
    return ERR_NONE;
 800fe98:	2300      	movs	r3, #0
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3708      	adds	r7, #8
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}

0800fea2 <rfalChipMeasureAmplitude>:
}


/*******************************************************************************/
ReturnCode rfalChipMeasureAmplitude( uint8_t* result )
{
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b084      	sub	sp, #16
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
    ReturnCode err;
    uint8_t reg_opc, reg_mode, reg_conf1, reg_conf2;

    /* Save registers which will be adjusted below */
    st25r3916ReadRegister(ST25R3916_REG_OP_CONTROL, &reg_opc);
 800feaa:	f107 030d 	add.w	r3, r7, #13
 800feae:	4619      	mov	r1, r3
 800feb0:	2002      	movs	r0, #2
 800feb2:	f000 ff3f 	bl	8010d34 <st25r3916ReadRegister>
    st25r3916ReadRegister(ST25R3916_REG_MODE, &reg_mode);
 800feb6:	f107 030c 	add.w	r3, r7, #12
 800feba:	4619      	mov	r1, r3
 800febc:	2003      	movs	r0, #3
 800febe:	f000 ff39 	bl	8010d34 <st25r3916ReadRegister>
    st25r3916ReadRegister(ST25R3916_REG_RX_CONF1, &reg_conf1);
 800fec2:	f107 030b 	add.w	r3, r7, #11
 800fec6:	4619      	mov	r1, r3
 800fec8:	200b      	movs	r0, #11
 800feca:	f000 ff33 	bl	8010d34 <st25r3916ReadRegister>
    st25r3916ReadRegister(ST25R3916_REG_RX_CONF2, &reg_conf2);
 800fece:	f107 030a 	add.w	r3, r7, #10
 800fed2:	4619      	mov	r1, r3
 800fed4:	200c      	movs	r0, #12
 800fed6:	f000 ff2d 	bl	8010d34 <st25r3916ReadRegister>

    /* Set values as per defaults of DS. These regs/bits influence receiver chain and change amplitude */
    /* Doing so achieves an amplitude comparable over a complete polling cylce */
    st25r3916WriteRegister(ST25R3916_REG_OP_CONTROL, (reg_opc & ~ST25R3916_REG_OP_CONTROL_rx_chn));
 800feda:	7b7b      	ldrb	r3, [r7, #13]
 800fedc:	f023 0320 	bic.w	r3, r3, #32
 800fee0:	b2db      	uxtb	r3, r3
 800fee2:	4619      	mov	r1, r3
 800fee4:	2002      	movs	r0, #2
 800fee6:	f000 ff63 	bl	8010db0 <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a
 800feea:	2108      	movs	r1, #8
 800feec:	2003      	movs	r0, #3
 800feee:	f000 ff5f 	bl	8010db0 <st25r3916WriteRegister>
                                             | ST25R3916_REG_MODE_targ_init
                                             | ST25R3916_REG_MODE_tr_am_ook
                                             | ST25R3916_REG_MODE_nfc_ar_off);
    st25r3916WriteRegister(ST25R3916_REG_RX_CONF1, (reg_conf1 & ~ST25R3916_REG_RX_CONF1_ch_sel_AM));
 800fef2:	7afb      	ldrb	r3, [r7, #11]
 800fef4:	4619      	mov	r1, r3
 800fef6:	200b      	movs	r0, #11
 800fef8:	f000 ff5a 	bl	8010db0 <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_RX_CONF2, ((reg_conf2 & ~(ST25R3916_REG_RX_CONF2_demod_mode | ST25R3916_REG_RX_CONF2_amd_sel))
 800fefc:	7abb      	ldrb	r3, [r7, #10]
 800fefe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	4619      	mov	r1, r3
 800ff06:	200c      	movs	r0, #12
 800ff08:	f000 ff52 	bl	8010db0 <st25r3916WriteRegister>
                                                 | ST25R3916_REG_RX_CONF2_amd_sel_peak));

    /* Perform the actual measurement */
    err = st25r3916MeasureAmplitude( result );
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f000 f944 	bl	801019a <st25r3916MeasureAmplitude>
 800ff12:	4603      	mov	r3, r0
 800ff14:	81fb      	strh	r3, [r7, #14]

    /* Restore values */
    st25r3916WriteRegister(ST25R3916_REG_OP_CONTROL, reg_opc);
 800ff16:	7b7b      	ldrb	r3, [r7, #13]
 800ff18:	4619      	mov	r1, r3
 800ff1a:	2002      	movs	r0, #2
 800ff1c:	f000 ff48 	bl	8010db0 <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_MODE, reg_mode);
 800ff20:	7b3b      	ldrb	r3, [r7, #12]
 800ff22:	4619      	mov	r1, r3
 800ff24:	2003      	movs	r0, #3
 800ff26:	f000 ff43 	bl	8010db0 <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_RX_CONF1, reg_conf1);
 800ff2a:	7afb      	ldrb	r3, [r7, #11]
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	200b      	movs	r0, #11
 800ff30:	f000 ff3e 	bl	8010db0 <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_RX_CONF2, reg_conf2);
 800ff34:	7abb      	ldrb	r3, [r7, #10]
 800ff36:	4619      	mov	r1, r3
 800ff38:	200c      	movs	r0, #12
 800ff3a:	f000 ff39 	bl	8010db0 <st25r3916WriteRegister>

    return err;
 800ff3e:	89fb      	ldrh	r3, [r7, #14]
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3710      	adds	r7, #16
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <rfalChipMeasurePhase>:


/*******************************************************************************/
ReturnCode rfalChipMeasurePhase( uint8_t* result )
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
    st25r3916MeasurePhase( result );
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 f931 	bl	80101b8 <st25r3916MeasurePhase>

    return ERR_NONE;
 800ff56:	2300      	movs	r3, #0
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <st25r3916ExecuteCommandAndGetResult>:
 * LOCAL FUNCTION
 ******************************************************************************
 */

ReturnCode st25r3916ExecuteCommandAndGetResult( uint8_t cmd, uint8_t resReg, uint8_t tout, uint8_t* result )
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	603b      	str	r3, [r7, #0]
 800ff68:	4603      	mov	r3, r0
 800ff6a:	71fb      	strb	r3, [r7, #7]
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	71bb      	strb	r3, [r7, #6]
 800ff70:	4613      	mov	r3, r2
 800ff72:	717b      	strb	r3, [r7, #5]
    /* Clear and enable Direct Command interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 800ff74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ff78:	f001 fa76 	bl	8011468 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800ff7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ff80:	f001 faaa 	bl	80114d8 <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( cmd );
 800ff84:	79fb      	ldrb	r3, [r7, #7]
 800ff86:	4618      	mov	r0, r3
 800ff88:	f000 ff9b 	bl	8010ec2 <st25r3916ExecuteCommand>

    st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_DCT, tout );
 800ff8c:	797b      	ldrb	r3, [r7, #5]
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	4619      	mov	r1, r3
 800ff92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ff96:	f001 fa17 	bl	80113c8 <st25r3916WaitForInterruptsTimed>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800ff9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ff9e:	f001 faa7 	bl	80114f0 <st25r3916DisableInterrupts>

    /* After execution read out the result if the pointer is not NULL */
    if( result != NULL )
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d004      	beq.n	800ffb2 <st25r3916ExecuteCommandAndGetResult+0x52>
    {
        st25r3916ReadRegister( resReg, result);
 800ffa8:	79bb      	ldrb	r3, [r7, #6]
 800ffaa:	6839      	ldr	r1, [r7, #0]
 800ffac:	4618      	mov	r0, r3
 800ffae:	f000 fec1 	bl	8010d34 <st25r3916ReadRegister>
    }

    return ERR_NONE;
 800ffb2:	2300      	movs	r3, #0

}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <st25r3916Initialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode st25r3916Initialize( void )
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;
    
    /* Set default state on the ST25R3916 */
    st25r3916ExecuteCommand( ST25R3916_CMD_SET_DEFAULT );
 800ffc2:	20c1      	movs	r0, #193	; 0xc1
 800ffc4:	f000 ff7d 	bl	8010ec2 <st25r3916ExecuteCommand>

#ifndef RFAL_USE_I2C    
    /* Increase MISO driving level as SPI can go up to 10MHz */
    st25r3916WriteRegister(ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_io_18);
 800ffc8:	2104      	movs	r1, #4
 800ffca:	2001      	movs	r0, #1
 800ffcc:	f000 fef0 	bl	8010db0 <st25r3916WriteRegister>
#endif /* RFAL_USE_I2C */
    
    if( !st25r3916CheckChipID( NULL ) )
 800ffd0:	2000      	movs	r0, #0
 800ffd2:	f000 fa85 	bl	80104e0 <st25r3916CheckChipID>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	f083 0301 	eor.w	r3, r3, #1
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <st25r3916Initialize+0x2a>
    {
        return ERR_HW_MISMATCH;
 800ffe2:	2324      	movs	r3, #36	; 0x24
 800ffe4:	e02d      	b.n	8010042 <st25r3916Initialize+0x86>
    }
    
    st25r3916InitInterrupts();
 800ffe6:	f001 f927 	bl	8011238 <st25r3916InitInterrupts>
    st25r3916ledInit();
 800ffea:	f001 fabf 	bl	801156c <st25r3916ledInit>
    
    gST25R3916NRT_64fcs = 0;
 800ffee:	4b17      	ldr	r3, [pc, #92]	; (801004c <st25r3916Initialize+0x90>)
 800fff0:	2200      	movs	r2, #0
 800fff2:	601a      	str	r2, [r3, #0]

#ifndef RFAL_USE_I2C
    /* Enable pull downs on MISO line */
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 800fff4:	2118      	movs	r1, #24
 800fff6:	2001      	movs	r0, #1
 800fff8:	f000 fffb 	bl	8010ff2 <st25r3916SetRegisterBits>
#endif /* RFAL_USE_I2C */
    
    /* Disable internal overheat protection */
    st25r3916ChangeTestRegisterBits( 0x04, 0x10, 0x10 );
 800fffc:	2210      	movs	r2, #16
 800fffe:	2110      	movs	r1, #16
 8010000:	2004      	movs	r0, #4
 8010002:	f001 f86f 	bl	80110e4 <st25r3916ChangeTestRegisterBits>

    /* Enable Oscillator and wait until it gets stable */
    st25r3916OscOn();        
 8010006:	f000 f823 	bl	8010050 <st25r3916OscOn>
    
    /* Measure VDD and set sup3V bit according to Power supplied  */
    vdd_mV = st25r3916MeasureVoltage( ST25R3916_REG_REGULATOR_CONTROL_mpsv_vdd );
 801000a:	2000      	movs	r0, #0
 801000c:	f000 f854 	bl	80100b8 <st25r3916MeasureVoltage>
 8010010:	4603      	mov	r3, r0
 8010012:	80fb      	strh	r3, [r7, #6]
    st25r3916ChangeRegisterBits( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ((vdd_mV < ST25R3916_SUPPLY_THRESHOLD) ? ST25R3916_REG_IO_CONF2_sup3V_3V : ST25R3916_REG_IO_CONF2_sup3V_5V) );
 8010014:	88fb      	ldrh	r3, [r7, #6]
 8010016:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801001a:	d201      	bcs.n	8010020 <st25r3916Initialize+0x64>
 801001c:	2380      	movs	r3, #128	; 0x80
 801001e:	e000      	b.n	8010022 <st25r3916Initialize+0x66>
 8010020:	2300      	movs	r3, #0
 8010022:	461a      	mov	r2, r3
 8010024:	2180      	movs	r1, #128	; 0x80
 8010026:	2001      	movs	r0, #1
 8010028:	f001 f810 	bl	801104c <st25r3916ChangeRegisterBits>
            
    /* Make sure Transmitter and Receiver are disabled */
    st25r3916TxRxOff();
 801002c:	2148      	movs	r1, #72	; 0x48
 801002e:	2002      	movs	r0, #2
 8010030:	f000 ffa8 	bl	8010f84 <st25r3916ClrRegisterBits>
    
    /* After reset all interrupts are enabled, so disable them at first */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 8010034:	f04f 30ff 	mov.w	r0, #4294967295
 8010038:	f001 fa5a 	bl	80114f0 <st25r3916DisableInterrupts>
    
    /* And clear them, just to be sure */
    st25r3916ClearInterrupts();
 801003c:	f001 fa64 	bl	8011508 <st25r3916ClearInterrupts>
    
    return ERR_NONE;
 8010040:	2300      	movs	r3, #0
}
 8010042:	4618      	mov	r0, r3
 8010044:	3708      	adds	r7, #8
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
 801004a:	bf00      	nop
 801004c:	200009ec 	.word	0x200009ec

08010050 <st25r3916OscOn>:
}


/*******************************************************************************/
void st25r3916OscOn( void )
{
 8010050:	b580      	push	{r7, lr}
 8010052:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3916_REG_OP_CONTROL_en instead of ST25R3916_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 8010054:	2280      	movs	r2, #128	; 0x80
 8010056:	2180      	movs	r1, #128	; 0x80
 8010058:	2002      	movs	r0, #2
 801005a:	f001 f87b 	bl	8011154 <st25r3916CheckReg>
 801005e:	4603      	mov	r3, r0
 8010060:	f083 0301 	eor.w	r3, r3, #1
 8010064:	b2db      	uxtb	r3, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	d00c      	beq.n	8010084 <st25r3916OscOn+0x34>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3916GetInterrupt( ST25R3916_IRQ_MASK_OSC );
 801006a:	2080      	movs	r0, #128	; 0x80
 801006c:	f001 f9fc 	bl	8011468 <st25r3916GetInterrupt>
      
        /* Enable oscillator frequency stable interrupt */
        st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_OSC );
 8010070:	2080      	movs	r0, #128	; 0x80
 8010072:	f001 fa31 	bl	80114d8 <st25r3916EnableInterrupts>

        /* Enable oscillator and regulator output */
        st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 8010076:	2180      	movs	r1, #128	; 0x80
 8010078:	2002      	movs	r0, #2
 801007a:	f000 ffba 	bl	8010ff2 <st25r3916SetRegisterBits>

        /* Wait for the oscillator interrupt */
//        st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE );
        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_OSC );
 801007e:	2080      	movs	r0, #128	; 0x80
 8010080:	f001 fa36 	bl	80114f0 <st25r3916DisableInterrupts>
    }
}
 8010084:	bf00      	nop
 8010086:	bd80      	pop	{r7, pc}

08010088 <st25r3916MeasurePowerSupply>:


/*******************************************************************************/
uint8_t st25r3916MeasurePowerSupply( uint8_t mpsv )
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	4603      	mov	r3, r0
 8010090:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3916ChangeRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_mpsv_mask, mpsv );
 8010092:	79fb      	ldrb	r3, [r7, #7]
 8010094:	461a      	mov	r2, r3
 8010096:	2107      	movs	r1, #7
 8010098:	202c      	movs	r0, #44	; 0x2c
 801009a:	f000 ffd7 	bl	801104c <st25r3916ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_VDD, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_VDD, &result);
 801009e:	f107 030f 	add.w	r3, r7, #15
 80100a2:	2264      	movs	r2, #100	; 0x64
 80100a4:	2125      	movs	r1, #37	; 0x25
 80100a6:	20df      	movs	r0, #223	; 0xdf
 80100a8:	f7ff ff5a 	bl	800ff60 <st25r3916ExecuteCommandAndGetResult>

    return result;
 80100ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3710      	adds	r7, #16
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
	...

080100b8 <st25r3916MeasureVoltage>:


/*******************************************************************************/
uint16_t st25r3916MeasureVoltage( uint8_t mpsv )
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	4603      	mov	r3, r0
 80100c0:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3916MeasurePowerSupply(mpsv);
 80100c2:	79fb      	ldrb	r3, [r7, #7]
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7ff ffdf 	bl	8010088 <st25r3916MeasurePowerSupply>
 80100ca:	4603      	mov	r3, r0
 80100cc:	73fb      	strb	r3, [r7, #15]
   
    /* Convert cmd output into mV (each step represents 23.4 mV )*/
    mV  = ((uint16_t)result) * 23U;
 80100ce:	7bfb      	ldrb	r3, [r7, #15]
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	461a      	mov	r2, r3
 80100d4:	0052      	lsls	r2, r2, #1
 80100d6:	441a      	add	r2, r3
 80100d8:	00d2      	lsls	r2, r2, #3
 80100da:	1ad3      	subs	r3, r2, r3
 80100dc:	81bb      	strh	r3, [r7, #12]
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 80100de:	7bfb      	ldrb	r3, [r7, #15]
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	3305      	adds	r3, #5
 80100e4:	4a06      	ldr	r2, [pc, #24]	; (8010100 <st25r3916MeasureVoltage+0x48>)
 80100e6:	fba2 2303 	umull	r2, r3, r2, r3
 80100ea:	08db      	lsrs	r3, r3, #3
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	89bb      	ldrh	r3, [r7, #12]
 80100f0:	4413      	add	r3, r2
 80100f2:	81bb      	strh	r3, [r7, #12]

    return mV;
 80100f4:	89bb      	ldrh	r3, [r7, #12]
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	3710      	adds	r7, #16
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}
 80100fe:	bf00      	nop
 8010100:	cccccccd 	.word	0xcccccccd

08010104 <st25r3916AdjustRegulators>:


/*******************************************************************************/
ReturnCode st25r3916AdjustRegulators( uint16_t* result_mV )
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
    uint8_t result;

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 801010c:	2180      	movs	r1, #128	; 0x80
 801010e:	202c      	movs	r0, #44	; 0x2c
 8010110:	f000 ff6f 	bl	8010ff2 <st25r3916SetRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 8010114:	2180      	movs	r1, #128	; 0x80
 8010116:	202c      	movs	r0, #44	; 0x2c
 8010118:	f000 ff34 	bl	8010f84 <st25r3916ClrRegisterBits>

    /* Execute Adjust regulators cmd and retrieve result */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_ADJUST_REGULATORS, ST25R3916_REG_REGULATOR_RESULT, ST25R3916_TOUT_ADJUST_REGULATORS, &result );
 801011c:	f107 030f 	add.w	r3, r7, #15
 8010120:	2206      	movs	r2, #6
 8010122:	216c      	movs	r1, #108	; 0x6c
 8010124:	20d6      	movs	r0, #214	; 0xd6
 8010126:	f7ff ff1b 	bl	800ff60 <st25r3916ExecuteCommandAndGetResult>

    /* Calculate result in mV */
    result >>= ST25R3916_REG_REGULATOR_RESULT_reg_shift;
 801012a:	7bfb      	ldrb	r3, [r7, #15]
 801012c:	091b      	lsrs	r3, r3, #4
 801012e:	b2db      	uxtb	r3, r3
 8010130:	73fb      	strb	r3, [r7, #15]
    
    if( result_mV != NULL )
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d02b      	beq.n	8010190 <st25r3916AdjustRegulators+0x8c>
    {
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ST25R3916_REG_IO_CONF2_sup3V )  )
 8010138:	2280      	movs	r2, #128	; 0x80
 801013a:	2180      	movs	r1, #128	; 0x80
 801013c:	2001      	movs	r0, #1
 801013e:	f001 f809 	bl	8011154 <st25r3916CheckReg>
 8010142:	4603      	mov	r3, r0
 8010144:	2b00      	cmp	r3, #0
 8010146:	d00d      	beq.n	8010164 <st25r3916AdjustRegulators+0x60>
        {
            result = MIN( result, (uint8_t)(result-5U) );/* In 3.3V mode [0,4] are not used                       */
 8010148:	7bfb      	ldrb	r3, [r7, #15]
 801014a:	2b04      	cmp	r3, #4
 801014c:	d903      	bls.n	8010156 <st25r3916AdjustRegulators+0x52>
 801014e:	7bfb      	ldrb	r3, [r7, #15]
 8010150:	3b05      	subs	r3, #5
 8010152:	b2db      	uxtb	r3, r3
 8010154:	e000      	b.n	8010158 <st25r3916AdjustRegulators+0x54>
 8010156:	7bfb      	ldrb	r3, [r7, #15]
 8010158:	73fb      	strb	r3, [r7, #15]
            *result_mV = 2400U;                          /* Minimum regulated voltage 2.4V in case of 3.3V supply */
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8010160:	801a      	strh	r2, [r3, #0]
 8010162:	e003      	b.n	801016c <st25r3916AdjustRegulators+0x68>
        }
        else
        {
            *result_mV = 3600U;                          /* Minimum regulated voltage 3.6V in case of 5V supply   */
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 801016a:	801a      	strh	r2, [r3, #0]
        }
        
        *result_mV += (uint16_t)result * 100U;           /* 100mV steps in both 3.3V and 5V supply                */
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	881a      	ldrh	r2, [r3, #0]
 8010170:	7bfb      	ldrb	r3, [r7, #15]
 8010172:	b29b      	uxth	r3, r3
 8010174:	4619      	mov	r1, r3
 8010176:	0089      	lsls	r1, r1, #2
 8010178:	440b      	add	r3, r1
 801017a:	4619      	mov	r1, r3
 801017c:	0088      	lsls	r0, r1, #2
 801017e:	4619      	mov	r1, r3
 8010180:	4603      	mov	r3, r0
 8010182:	440b      	add	r3, r1
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	b29b      	uxth	r3, r3
 8010188:	4413      	add	r3, r2
 801018a:	b29a      	uxth	r2, r3
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	801a      	strh	r2, [r3, #0]
    }
    return ERR_NONE;
 8010190:	2300      	movs	r3, #0
}
 8010192:	4618      	mov	r0, r3
 8010194:	3710      	adds	r7, #16
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <st25r3916MeasureAmplitude>:


/*******************************************************************************/
ReturnCode st25r3916MeasureAmplitude( uint8_t* result )
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b082      	sub	sp, #8
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_AMPLITUDE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_AMPLITUDE, result );
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	220a      	movs	r2, #10
 80101a6:	2125      	movs	r1, #37	; 0x25
 80101a8:	20d3      	movs	r0, #211	; 0xd3
 80101aa:	f7ff fed9 	bl	800ff60 <st25r3916ExecuteCommandAndGetResult>
 80101ae:	4603      	mov	r3, r0
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	3708      	adds	r7, #8
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <st25r3916MeasurePhase>:


/*******************************************************************************/
ReturnCode st25r3916MeasurePhase( uint8_t* result )
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_PHASE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_PHASE, result );
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	220a      	movs	r2, #10
 80101c4:	2125      	movs	r1, #37	; 0x25
 80101c6:	20d9      	movs	r0, #217	; 0xd9
 80101c8:	f7ff feca 	bl	800ff60 <st25r3916ExecuteCommandAndGetResult>
 80101cc:	4603      	mov	r3, r0
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3708      	adds	r7, #8
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}

080101d6 <st25r3916MeasureCapacitance>:


/*******************************************************************************/
ReturnCode st25r3916MeasureCapacitance( uint8_t* result )
{
 80101d6:	b580      	push	{r7, lr}
 80101d8:	b082      	sub	sp, #8
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_CAPACITANCE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_CAPACITANCE, result );
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	220a      	movs	r2, #10
 80101e2:	2125      	movs	r1, #37	; 0x25
 80101e4:	20de      	movs	r0, #222	; 0xde
 80101e6:	f7ff febb 	bl	800ff60 <st25r3916ExecuteCommandAndGetResult>
 80101ea:	4603      	mov	r3, r0
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3708      	adds	r7, #8
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <st25r3916CalibrateCapacitiveSensor>:


/*******************************************************************************/
ReturnCode st25r3916CalibrateCapacitiveSensor( uint8_t* result )
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    res;
    
    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_cs_mcal_mask );
 80101fc:	21f8      	movs	r1, #248	; 0xf8
 80101fe:	202f      	movs	r0, #47	; 0x2f
 8010200:	f000 fec0 	bl	8010f84 <st25r3916ClrRegisterBits>
    
    /* Execute automatic calibration */
    ret = st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_CALIBRATE_C_SENSOR, ST25R3916_REG_CAP_SENSOR_RESULT, ST25R3916_TOUT_CALIBRATE_CAP_SENSOR, &res );
 8010204:	f107 030d 	add.w	r3, r7, #13
 8010208:	2204      	movs	r2, #4
 801020a:	2130      	movs	r1, #48	; 0x30
 801020c:	20dd      	movs	r0, #221	; 0xdd
 801020e:	f7ff fea7 	bl	800ff60 <st25r3916ExecuteCommandAndGetResult>
 8010212:	4603      	mov	r3, r0
 8010214:	81fb      	strh	r3, [r7, #14]
    
    /* Check wether the calibration was successull */
    if( ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 8010216:	7b7b      	ldrb	r3, [r7, #13]
 8010218:	f003 0304 	and.w	r3, r3, #4
 801021c:	2b00      	cmp	r3, #0
 801021e:	d007      	beq.n	8010230 <st25r3916CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 8010220:	7b7b      	ldrb	r3, [r7, #13]
 8010222:	f003 0302 	and.w	r3, r3, #2
    if( ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 8010226:	2b00      	cmp	r3, #0
 8010228:	d102      	bne.n	8010230 <st25r3916CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 801022a:	89fb      	ldrh	r3, [r7, #14]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d001      	beq.n	8010234 <st25r3916CalibrateCapacitiveSensor+0x40>
    {
        return ERR_IO;
 8010230:	2303      	movs	r3, #3
 8010232:	e008      	b.n	8010246 <st25r3916CalibrateCapacitiveSensor+0x52>
    }
    
    if( result != NULL )
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d004      	beq.n	8010244 <st25r3916CalibrateCapacitiveSensor+0x50>
    {
        (*result) = (uint8_t)(res >> ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_shift);
 801023a:	7b7b      	ldrb	r3, [r7, #13]
 801023c:	08db      	lsrs	r3, r3, #3
 801023e:	b2da      	uxtb	r2, r3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8010244:	2300      	movs	r3, #0
}
 8010246:	4618      	mov	r0, r3
 8010248:	3710      	adds	r7, #16
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}

0801024e <st25r3916SetBitrate>:


/*******************************************************************************/
ReturnCode st25r3916SetBitrate(uint8_t txrate, uint8_t rxrate)
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b084      	sub	sp, #16
 8010252:	af00      	add	r7, sp, #0
 8010254:	4603      	mov	r3, r0
 8010256:	460a      	mov	r2, r1
 8010258:	71fb      	strb	r3, [r7, #7]
 801025a:	4613      	mov	r3, r2
 801025c:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 801025e:	f107 030f 	add.w	r3, r7, #15
 8010262:	4619      	mov	r1, r3
 8010264:	2004      	movs	r0, #4
 8010266:	f000 fd65 	bl	8010d34 <st25r3916ReadRegister>
    if( rxrate != ST25R3916_BR_DO_NOT_SET )
 801026a:	79bb      	ldrb	r3, [r7, #6]
 801026c:	2bff      	cmp	r3, #255	; 0xff
 801026e:	d00e      	beq.n	801028e <st25r3916SetBitrate+0x40>
    {
        if(rxrate > ST25R3916_BR_848)
 8010270:	79bb      	ldrb	r3, [r7, #6]
 8010272:	2b03      	cmp	r3, #3
 8010274:	d901      	bls.n	801027a <st25r3916SetBitrate+0x2c>
        {
            return ERR_PARAM;
 8010276:	2307      	movs	r3, #7
 8010278:	e025      	b.n	80102c6 <st25r3916SetBitrate+0x78>
        }

        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_rxrate_mask);     /* MISRA 10.3 */
 801027a:	7bfb      	ldrb	r3, [r7, #15]
 801027c:	f023 030f 	bic.w	r3, r3, #15
 8010280:	b2db      	uxtb	r3, r3
 8010282:	73fb      	strb	r3, [r7, #15]
        reg |= rxrate << ST25R3916_REG_BIT_RATE_rxrate_shift;
 8010284:	7bfa      	ldrb	r2, [r7, #15]
 8010286:	79bb      	ldrb	r3, [r7, #6]
 8010288:	4313      	orrs	r3, r2
 801028a:	b2db      	uxtb	r3, r3
 801028c:	73fb      	strb	r3, [r7, #15]
    }
    if( txrate != ST25R3916_BR_DO_NOT_SET )
 801028e:	79fb      	ldrb	r3, [r7, #7]
 8010290:	2bff      	cmp	r3, #255	; 0xff
 8010292:	d012      	beq.n	80102ba <st25r3916SetBitrate+0x6c>
    {
        if(txrate > ST25R3916_BR_6780)
 8010294:	79fb      	ldrb	r3, [r7, #7]
 8010296:	2b07      	cmp	r3, #7
 8010298:	d901      	bls.n	801029e <st25r3916SetBitrate+0x50>
        {
            return ERR_PARAM;
 801029a:	2307      	movs	r3, #7
 801029c:	e013      	b.n	80102c6 <st25r3916SetBitrate+0x78>
        }
        
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 801029e:	7bfb      	ldrb	r3, [r7, #15]
 80102a0:	f003 030f 	and.w	r3, r3, #15
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	73fb      	strb	r3, [r7, #15]
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 80102a8:	79fb      	ldrb	r3, [r7, #7]
 80102aa:	011b      	lsls	r3, r3, #4
 80102ac:	b25a      	sxtb	r2, r3
 80102ae:	7bfb      	ldrb	r3, [r7, #15]
 80102b0:	b25b      	sxtb	r3, r3
 80102b2:	4313      	orrs	r3, r2
 80102b4:	b25b      	sxtb	r3, r3
 80102b6:	b2db      	uxtb	r3, r3
 80102b8:	73fb      	strb	r3, [r7, #15]

    }
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );    
 80102ba:	7bfb      	ldrb	r3, [r7, #15]
 80102bc:	4619      	mov	r1, r3
 80102be:	2004      	movs	r0, #4
 80102c0:	f000 fd76 	bl	8010db0 <st25r3916WriteRegister>
 80102c4:	4603      	mov	r3, r0
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3710      	adds	r7, #16
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
	...

080102d0 <st25r3916PerformCollisionAvoidance>:


/*******************************************************************************/
ReturnCode st25r3916PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 80102d0:	b590      	push	{r4, r7, lr}
 80102d2:	b085      	sub	sp, #20
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	4604      	mov	r4, r0
 80102d8:	4608      	mov	r0, r1
 80102da:	4611      	mov	r1, r2
 80102dc:	461a      	mov	r2, r3
 80102de:	4623      	mov	r3, r4
 80102e0:	71fb      	strb	r3, [r7, #7]
 80102e2:	4603      	mov	r3, r0
 80102e4:	71bb      	strb	r3, [r7, #6]
 80102e6:	460b      	mov	r3, r1
 80102e8:	717b      	strb	r3, [r7, #5]
 80102ea:	4613      	mov	r3, r2
 80102ec:	713b      	strb	r3, [r7, #4]
    uint8_t    treMask;
    uint32_t   irqs;
    ReturnCode err;
    
    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 80102ee:	79fb      	ldrb	r3, [r7, #7]
 80102f0:	2bc8      	cmp	r3, #200	; 0xc8
 80102f2:	d004      	beq.n	80102fe <st25r3916PerformCollisionAvoidance+0x2e>
 80102f4:	79fb      	ldrb	r3, [r7, #7]
 80102f6:	2bc9      	cmp	r3, #201	; 0xc9
 80102f8:	d001      	beq.n	80102fe <st25r3916PerformCollisionAvoidance+0x2e>
    {
        return ERR_PARAM;
 80102fa:	2307      	movs	r3, #7
 80102fc:	e05d      	b.n	80103ba <st25r3916PerformCollisionAvoidance+0xea>
    }
    
    err = ERR_INTERNAL;
 80102fe:	230c      	movs	r3, #12
 8010300:	81bb      	strh	r3, [r7, #12]
    
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 8010302:	79bb      	ldrb	r3, [r7, #6]
 8010304:	2bff      	cmp	r3, #255	; 0xff
 8010306:	d102      	bne.n	801030e <st25r3916PerformCollisionAvoidance+0x3e>
 8010308:	797b      	ldrb	r3, [r7, #5]
 801030a:	2bff      	cmp	r3, #255	; 0xff
 801030c:	d01e      	beq.n	801034c <st25r3916PerformCollisionAvoidance+0x7c>
    {
        treMask = 0;
 801030e:	2300      	movs	r3, #0
 8010310:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 8010312:	79bb      	ldrb	r3, [r7, #6]
 8010314:	2bff      	cmp	r3, #255	; 0xff
 8010316:	d003      	beq.n	8010320 <st25r3916PerformCollisionAvoidance+0x50>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask;
 8010318:	7bfb      	ldrb	r3, [r7, #15]
 801031a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801031e:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 8010320:	797b      	ldrb	r3, [r7, #5]
 8010322:	2bff      	cmp	r3, #255	; 0xff
 8010324:	d003      	beq.n	801032e <st25r3916PerformCollisionAvoidance+0x5e>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask;
 8010326:	7bfb      	ldrb	r3, [r7, #15]
 8010328:	f043 030f 	orr.w	r3, r3, #15
 801032c:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
 801032e:	79bb      	ldrb	r3, [r7, #6]
 8010330:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010334:	b2da      	uxtb	r2, r3
 8010336:	797b      	ldrb	r3, [r7, #5]
 8010338:	f003 030f 	and.w	r3, r3, #15
 801033c:	b2db      	uxtb	r3, r3
 801033e:	4313      	orrs	r3, r2
 8010340:	b2da      	uxtb	r2, r3
 8010342:	7bfb      	ldrb	r3, [r7, #15]
 8010344:	4619      	mov	r1, r3
 8010346:	202a      	movs	r0, #42	; 0x2a
 8010348:	f000 fe80 	bl	801104c <st25r3916ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, nTRFW );
 801034c:	793b      	ldrb	r3, [r7, #4]
 801034e:	461a      	mov	r2, r3
 8010350:	2103      	movs	r1, #3
 8010352:	200a      	movs	r0, #10
 8010354:	f000 fe7a 	bl	801104c <st25r3916ChangeRegisterBits>
        
    /*******************************************************************************/
    /* Enable and clear CA specific interrupts and execute command */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 8010358:	481a      	ldr	r0, [pc, #104]	; (80103c4 <st25r3916PerformCollisionAvoidance+0xf4>)
 801035a:	f001 f885 	bl	8011468 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 801035e:	4819      	ldr	r0, [pc, #100]	; (80103c4 <st25r3916PerformCollisionAvoidance+0xf4>)
 8010360:	f001 f8ba 	bl	80114d8 <st25r3916EnableInterrupts>
    
    st25r3916ExecuteCommand( FieldONCmd );
 8010364:	79fb      	ldrb	r3, [r7, #7]
 8010366:	4618      	mov	r0, r3
 8010368:	f000 fdab 	bl	8010ec2 <st25r3916ExecuteCommand>
    
    /*******************************************************************************/
    /* Wait for initial APON interrupt, indicating anticollision avoidance done and ST25R3916's 
     * field is now on, or a CAC indicating a collision */   
    irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_APON ), ST25R3916_TOUT_CA );    
 801036c:	210a      	movs	r1, #10
 801036e:	4816      	ldr	r0, [pc, #88]	; (80103c8 <st25r3916PerformCollisionAvoidance+0xf8>)
 8010370:	f001 f82a 	bl	80113c8 <st25r3916WaitForInterruptsTimed>
 8010374:	60b8      	str	r0, [r7, #8]
   
    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801037c:	2b00      	cmp	r3, #0
 801037e:	d002      	beq.n	8010386 <st25r3916PerformCollisionAvoidance+0xb6>
    {        
        err = ERR_RF_COLLISION;
 8010380:	231d      	movs	r3, #29
 8010382:	81bb      	strh	r3, [r7, #12]
 8010384:	e011      	b.n	80103aa <st25r3916PerformCollisionAvoidance+0xda>
    }
    else if( (ST25R3916_IRQ_MASK_APON & irqs) != 0U )
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00c      	beq.n	80103aa <st25r3916PerformCollisionAvoidance+0xda>
    {
        /* After APON wait for CAT interrupt, indication field was switched on minimum guard time has been fulfilled */            
        irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAT ), ST25R3916_TOUT_CA );        
 8010390:	210a      	movs	r1, #10
 8010392:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010396:	f001 f817 	bl	80113c8 <st25r3916WaitForInterruptsTimed>
 801039a:	60b8      	str	r0, [r7, #8]
                
        if( (ST25R3916_IRQ_MASK_CAT & irqs) != 0U )                             /* No Collision detected, Field On */
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d001      	beq.n	80103aa <st25r3916PerformCollisionAvoidance+0xda>
        {
            err = ERR_NONE;
 80103a6:	2300      	movs	r3, #0
 80103a8:	81bb      	strh	r3, [r7, #12]
    {
        /* MISRA 15.7 - Empty else */
    }

    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_EON) );
 80103aa:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80103ae:	f001 f85b 	bl	8011468 <st25r3916GetInterrupt>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 80103b2:	4804      	ldr	r0, [pc, #16]	; (80103c4 <st25r3916PerformCollisionAvoidance+0xf4>)
 80103b4:	f001 f89c 	bl	80114f0 <st25r3916DisableInterrupts>
    
    return err;
 80103b8:	89bb      	ldrh	r3, [r7, #12]
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3714      	adds	r7, #20
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd90      	pop	{r4, r7, pc}
 80103c2:	bf00      	nop
 80103c4:	20000600 	.word	0x20000600
 80103c8:	20000400 	.word	0x20000400

080103cc <st25r3916SetNumTxBits>:


/*******************************************************************************/
void st25r3916SetNumTxBits( uint16_t nBits )
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	4603      	mov	r3, r0
 80103d4:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xFFU) );
 80103d6:	88fb      	ldrh	r3, [r7, #6]
 80103d8:	b2db      	uxtb	r3, r3
 80103da:	4619      	mov	r1, r3
 80103dc:	2023      	movs	r0, #35	; 0x23
 80103de:	f000 fce7 	bl	8010db0 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xFFU) );
 80103e2:	88fb      	ldrh	r3, [r7, #6]
 80103e4:	0a1b      	lsrs	r3, r3, #8
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	4619      	mov	r1, r3
 80103ec:	2022      	movs	r0, #34	; 0x22
 80103ee:	f000 fcdf 	bl	8010db0 <st25r3916WriteRegister>
}
 80103f2:	bf00      	nop
 80103f4:	3708      	adds	r7, #8
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
	...

080103fc <st25r3916SetNoResponseTime>:
}


/*******************************************************************************/
ReturnCode st25r3916SetNoResponseTime( uint32_t nrt_64fcs )
{    
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
    ReturnCode err;
    uint8_t    nrt_step;    
    uint32_t   tmpNRT;

    tmpNRT = nrt_64fcs;       /* MISRA 17.8 */
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	60bb      	str	r3, [r7, #8]
    err    = ERR_NONE;
 8010408:	2300      	movs	r3, #0
 801040a:	81fb      	strh	r3, [r7, #14]
    
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 801040c:	4a19      	ldr	r2, [pc, #100]	; (8010474 <st25r3916SetNoResponseTime+0x78>)
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	6013      	str	r3, [r2, #0]
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
 8010412:	2300      	movs	r3, #0
 8010414:	737b      	strb	r3, [r7, #13]
    
    
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801041c:	d312      	bcc.n	8010444 <st25r3916SetNoResponseTime+0x48>
    {
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
 801041e:	2301      	movs	r3, #1
 8010420:	737b      	strb	r3, [r7, #13]
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	333f      	adds	r3, #63	; 0x3f
 8010426:	099b      	lsrs	r3, r3, #6
 8010428:	60bb      	str	r3, [r7, #8]
        
        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010430:	d304      	bcc.n	801043c <st25r3916SetNoResponseTime+0x40>
        {
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
 8010432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010436:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;                                           /* Signal parameter error                              */
 8010438:	2307      	movs	r3, #7
 801043a:	81fb      	strh	r3, [r7, #14]
        }
        gST25R3916NRT_64fcs = (64U * tmpNRT);
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	019b      	lsls	r3, r3, #6
 8010440:	4a0c      	ldr	r2, [pc, #48]	; (8010474 <st25r3916SetNoResponseTime+0x78>)
 8010442:	6013      	str	r3, [r2, #0]
    }

    /* Set the ST25R3916 NRT step units and the value */
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 8010444:	7b7b      	ldrb	r3, [r7, #13]
 8010446:	461a      	mov	r2, r3
 8010448:	2101      	movs	r1, #1
 801044a:	2012      	movs	r0, #18
 801044c:	f000 fdfe 	bl	801104c <st25r3916ChangeRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER1, (uint8_t)(tmpNRT >> 8U) );
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	0a1b      	lsrs	r3, r3, #8
 8010454:	b2db      	uxtb	r3, r3
 8010456:	4619      	mov	r1, r3
 8010458:	2010      	movs	r0, #16
 801045a:	f000 fca9 	bl	8010db0 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER2, (uint8_t)(tmpNRT & 0xFFU) );
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	b2db      	uxtb	r3, r3
 8010462:	4619      	mov	r1, r3
 8010464:	2011      	movs	r0, #17
 8010466:	f000 fca3 	bl	8010db0 <st25r3916WriteRegister>

    return err;
 801046a:	89fb      	ldrh	r3, [r7, #14]
}
 801046c:	4618      	mov	r0, r3
 801046e:	3710      	adds	r7, #16
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	200009ec 	.word	0x200009ec

08010478 <st25r3916SetGPTime>:
}


/*******************************************************************************/
void st25r3916SetGPTime( uint16_t gpt_8fcs )
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	4603      	mov	r3, r0
 8010480:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_GPT1, (uint8_t)(gpt_8fcs >> 8) );
 8010482:	88fb      	ldrh	r3, [r7, #6]
 8010484:	0a1b      	lsrs	r3, r3, #8
 8010486:	b29b      	uxth	r3, r3
 8010488:	b2db      	uxtb	r3, r3
 801048a:	4619      	mov	r1, r3
 801048c:	2013      	movs	r0, #19
 801048e:	f000 fc8f 	bl	8010db0 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_GPT2, (uint8_t)(gpt_8fcs & 0xFFU) );
 8010492:	88fb      	ldrh	r3, [r7, #6]
 8010494:	b2db      	uxtb	r3, r3
 8010496:	4619      	mov	r1, r3
 8010498:	2014      	movs	r0, #20
 801049a:	f000 fc89 	bl	8010db0 <st25r3916WriteRegister>
}
 801049e:	bf00      	nop
 80104a0:	3708      	adds	r7, #8
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <st25r3916SetStartGPTimer>:


/*******************************************************************************/
ReturnCode st25r3916SetStartGPTimer( uint16_t gpt_8fcs, uint8_t trigger_source )
{
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b082      	sub	sp, #8
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	4603      	mov	r3, r0
 80104ae:	460a      	mov	r2, r1
 80104b0:	80fb      	strh	r3, [r7, #6]
 80104b2:	4613      	mov	r3, r2
 80104b4:	717b      	strb	r3, [r7, #5]
    st25r3916SetGPTime( gpt_8fcs );
 80104b6:	88fb      	ldrh	r3, [r7, #6]
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7ff ffdd 	bl	8010478 <st25r3916SetGPTime>
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, trigger_source );
 80104be:	797b      	ldrb	r3, [r7, #5]
 80104c0:	461a      	mov	r2, r3
 80104c2:	21e0      	movs	r1, #224	; 0xe0
 80104c4:	2012      	movs	r0, #18
 80104c6:	f000 fdc1 	bl	801104c <st25r3916ChangeRegisterBits>
    
    /* If there's no trigger source, start GPT immediately */
    if( trigger_source == ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger )
 80104ca:	797b      	ldrb	r3, [r7, #5]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d102      	bne.n	80104d6 <st25r3916SetStartGPTimer+0x30>
    {
        st25r3916ExecuteCommand( ST25R3916_CMD_START_GP_TIMER );
 80104d0:	20e0      	movs	r0, #224	; 0xe0
 80104d2:	f000 fcf6 	bl	8010ec2 <st25r3916ExecuteCommand>
    }

    return ERR_NONE;
 80104d6:	2300      	movs	r3, #0
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3708      	adds	r7, #8
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <st25r3916CheckChipID>:


/*******************************************************************************/
bool st25r3916CheckChipID( uint8_t *rev )
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 80104e8:	2300      	movs	r3, #0
 80104ea:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 80104ec:	f107 030f 	add.w	r3, r7, #15
 80104f0:	4619      	mov	r1, r3
 80104f2:	203f      	movs	r0, #63	; 0x3f
 80104f4:	f000 fc1e 	bl	8010d34 <st25r3916ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3916's IC type code */
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 80104f8:	7bfb      	ldrb	r3, [r7, #15]
 80104fa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80104fe:	2b28      	cmp	r3, #40	; 0x28
 8010500:	d001      	beq.n	8010506 <st25r3916CheckChipID+0x26>
    {
        return false;
 8010502:	2300      	movs	r3, #0
 8010504:	e009      	b.n	801051a <st25r3916CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d005      	beq.n	8010518 <st25r3916CheckChipID+0x38>
    {
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
 801050c:	7bfb      	ldrb	r3, [r7, #15]
 801050e:	f003 0307 	and.w	r3, r3, #7
 8010512:	b2da      	uxtb	r2, r3
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 8010518:	2301      	movs	r3, #1
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <st25r3916StreamConfigure>:
}


/*******************************************************************************/
ReturnCode st25r3916StreamConfigure(const struct st25r3916StreamConfig *config)
{
 8010522:	b580      	push	{r7, lr}
 8010524:	b084      	sub	sp, #16
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
    uint8_t smd;
    uint8_t mode;

    smd = 0;
 801052a:	2300      	movs	r3, #0
 801052c:	73fb      	strb	r3, [r7, #15]
    
    if( config->useBPSK != 0U )
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d016      	beq.n	8010564 <st25r3916StreamConfigure+0x42>
    {
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
 8010536:	2378      	movs	r3, #120	; 0x78
 8010538:	73bb      	strb	r3, [r7, #14]
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	785b      	ldrb	r3, [r3, #1]
 801053e:	2b01      	cmp	r3, #1
 8010540:	d903      	bls.n	801054a <st25r3916StreamConfigure+0x28>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	785b      	ldrb	r3, [r3, #1]
 8010546:	2b04      	cmp	r3, #4
 8010548:	d901      	bls.n	801054e <st25r3916StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 801054a:	2307      	movs	r3, #7
 801054c:	e053      	b.n	80105f6 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	785b      	ldrb	r3, [r3, #1]
 8010552:	f1c3 0304 	rsb	r3, r3, #4
 8010556:	b2db      	uxtb	r3, r3
 8010558:	015b      	lsls	r3, r3, #5
 801055a:	b2da      	uxtb	r2, r3
 801055c:	7bfb      	ldrb	r3, [r7, #15]
 801055e:	4313      	orrs	r3, r2
 8010560:	73fb      	strb	r3, [r7, #15]
 8010562:	e01b      	b.n	801059c <st25r3916StreamConfigure+0x7a>
    }
    else
    {
        mode = ST25R3916_REG_MODE_om_subcarrier_stream;
 8010564:	2370      	movs	r3, #112	; 0x70
 8010566:	73bb      	strb	r3, [r7, #14]
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	785b      	ldrb	r3, [r3, #1]
 801056c:	2b02      	cmp	r3, #2
 801056e:	d903      	bls.n	8010578 <st25r3916StreamConfigure+0x56>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	785b      	ldrb	r3, [r3, #1]
 8010574:	2b06      	cmp	r3, #6
 8010576:	d901      	bls.n	801057c <st25r3916StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 8010578:	2307      	movs	r3, #7
 801057a:	e03c      	b.n	80105f6 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	785b      	ldrb	r3, [r3, #1]
 8010580:	f1c3 0306 	rsb	r3, r3, #6
 8010584:	b2db      	uxtb	r3, r3
 8010586:	015b      	lsls	r3, r3, #5
 8010588:	b2da      	uxtb	r2, r3
 801058a:	7bfb      	ldrb	r3, [r7, #15]
 801058c:	4313      	orrs	r3, r2
 801058e:	73fb      	strb	r3, [r7, #15]
        if( config->report_period_length == 0U )
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	78db      	ldrb	r3, [r3, #3]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d101      	bne.n	801059c <st25r3916StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 8010598:	2307      	movs	r3, #7
 801059a:	e02c      	b.n	80105f6 <st25r3916StreamConfigure+0xd4>
        }
    }

    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	789b      	ldrb	r3, [r3, #2]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d003      	beq.n	80105ac <st25r3916StreamConfigure+0x8a>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	789b      	ldrb	r3, [r3, #2]
 80105a8:	2b07      	cmp	r3, #7
 80105aa:	d901      	bls.n	80105b0 <st25r3916StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 80105ac:	2307      	movs	r3, #7
 80105ae:	e022      	b.n	80105f6 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	789b      	ldrb	r3, [r3, #2]
 80105b4:	f1c3 0307 	rsb	r3, r3, #7
 80105b8:	b2da      	uxtb	r2, r3
 80105ba:	7bfb      	ldrb	r3, [r7, #15]
 80105bc:	4313      	orrs	r3, r2
 80105be:	73fb      	strb	r3, [r7, #15]

    if( config->report_period_length > 3U )
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	78db      	ldrb	r3, [r3, #3]
 80105c4:	2b03      	cmp	r3, #3
 80105c6:	d901      	bls.n	80105cc <st25r3916StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 80105c8:	2307      	movs	r3, #7
 80105ca:	e014      	b.n	80105f6 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	78db      	ldrb	r3, [r3, #3]
 80105d0:	00db      	lsls	r3, r3, #3
 80105d2:	b25a      	sxtb	r2, r3
 80105d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105d8:	4313      	orrs	r3, r2
 80105da:	b25b      	sxtb	r3, r3
 80105dc:	73fb      	strb	r3, [r7, #15]

    st25r3916WriteRegister(ST25R3916_REG_STREAM_MODE, smd);
 80105de:	7bfb      	ldrb	r3, [r7, #15]
 80105e0:	4619      	mov	r1, r3
 80105e2:	2009      	movs	r0, #9
 80105e4:	f000 fbe4 	bl	8010db0 <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_mask, mode);
 80105e8:	7bbb      	ldrb	r3, [r7, #14]
 80105ea:	461a      	mov	r2, r3
 80105ec:	2178      	movs	r1, #120	; 0x78
 80105ee:	2003      	movs	r0, #3
 80105f0:	f000 fd2c 	bl	801104c <st25r3916ChangeRegisterBits>

    return ERR_NONE;
 80105f4:	2300      	movs	r3, #0
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3710      	adds	r7, #16
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
	...

08010600 <st25r3916AatTune>:

 

/*******************************************************************************/
ReturnCode st25r3916AatTune(const struct st25r3916AatTuneParams *tuningParams, struct st25r3916AatTuneResult *tuningStatus)
{
 8010600:	b590      	push	{r4, r7, lr}
 8010602:	b08b      	sub	sp, #44	; 0x2c
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    const struct st25r3916AatTuneParams *tp = tuningParams;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	627b      	str	r3, [r7, #36]	; 0x24
    struct st25r3916AatTuneResult *ts = tuningStatus;
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	623b      	str	r3, [r7, #32]
    struct st25r3916AatTuneParams defaultTuningParams = 
 8010612:	4b2b      	ldr	r3, [pc, #172]	; (80106c0 <st25r3916AatTune+0xc0>)
 8010614:	f107 0410 	add.w	r4, r7, #16
 8010618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801061a:	c407      	stmia	r4!, {r0, r1, r2}
 801061c:	8023      	strh	r3, [r4, #0]
        .doDynamicSteps=true,
        .measureLimit=50,
    };
    struct st25r3916AatTuneResult defaultTuneResult;
    
    if ((NULL != tp) && (
 801061e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010620:	2b00      	cmp	r3, #0
 8010622:	d025      	beq.n	8010670 <st25r3916AatTune+0x70>
          (tp->aat_a_min > tp->aat_a_max   )
 8010624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010626:	781a      	ldrb	r2, [r3, #0]
 8010628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062a:	785b      	ldrb	r3, [r3, #1]
    if ((NULL != tp) && (
 801062c:	429a      	cmp	r2, r3
 801062e:	d81d      	bhi.n	801066c <st25r3916AatTune+0x6c>
       || (tp->aat_a_start < tp->aat_a_min )
 8010630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010632:	789a      	ldrb	r2, [r3, #2]
 8010634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	429a      	cmp	r2, r3
 801063a:	d317      	bcc.n	801066c <st25r3916AatTune+0x6c>
       || (tp->aat_a_start > tp->aat_a_max )
 801063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063e:	789a      	ldrb	r2, [r3, #2]
 8010640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010642:	785b      	ldrb	r3, [r3, #1]
 8010644:	429a      	cmp	r2, r3
 8010646:	d811      	bhi.n	801066c <st25r3916AatTune+0x6c>
       || (tp->aat_b_min > tp->aat_b_max   )
 8010648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064a:	791a      	ldrb	r2, [r3, #4]
 801064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064e:	795b      	ldrb	r3, [r3, #5]
 8010650:	429a      	cmp	r2, r3
 8010652:	d80b      	bhi.n	801066c <st25r3916AatTune+0x6c>
       || (tp->aat_b_start < tp->aat_b_min )
 8010654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010656:	799a      	ldrb	r2, [r3, #6]
 8010658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065a:	791b      	ldrb	r3, [r3, #4]
 801065c:	429a      	cmp	r2, r3
 801065e:	d305      	bcc.n	801066c <st25r3916AatTune+0x6c>
       || (tp->aat_b_start > tp->aat_b_max )
 8010660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010662:	799a      	ldrb	r2, [r3, #6]
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	795b      	ldrb	r3, [r3, #5]
 8010668:	429a      	cmp	r2, r3
 801066a:	d901      	bls.n	8010670 <st25r3916AatTune+0x70>
       ))
    {
        return ERR_PARAM;
 801066c:	2307      	movs	r3, #7
 801066e:	e023      	b.n	80106b8 <st25r3916AatTune+0xb8>
    }

    if (NULL == tp)
 8010670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010672:	2b00      	cmp	r3, #0
 8010674:	d110      	bne.n	8010698 <st25r3916AatTune+0x98>
    { /* Start from current caps with default params */
        st25r3916ReadRegister(ST25R3916_REG_ANT_TUNE_A, &defaultTuningParams.aat_a_start);
 8010676:	f107 0310 	add.w	r3, r7, #16
 801067a:	3302      	adds	r3, #2
 801067c:	4619      	mov	r1, r3
 801067e:	2026      	movs	r0, #38	; 0x26
 8010680:	f000 fb58 	bl	8010d34 <st25r3916ReadRegister>
        st25r3916ReadRegister(ST25R3916_REG_ANT_TUNE_B, &defaultTuningParams.aat_b_start);
 8010684:	f107 0310 	add.w	r3, r7, #16
 8010688:	3306      	adds	r3, #6
 801068a:	4619      	mov	r1, r3
 801068c:	2027      	movs	r0, #39	; 0x27
 801068e:	f000 fb51 	bl	8010d34 <st25r3916ReadRegister>
        tp = &defaultTuningParams;
 8010692:	f107 0310 	add.w	r3, r7, #16
 8010696:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (NULL == ts){ts = &defaultTuneResult;}
 8010698:	6a3b      	ldr	r3, [r7, #32]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d102      	bne.n	80106a4 <st25r3916AatTune+0xa4>
 801069e:	f107 0308 	add.w	r3, r7, #8
 80106a2:	623b      	str	r3, [r7, #32]

    ts->measureCnt = 0; /* Clear current measure count */
 80106a4:	6a3b      	ldr	r3, [r7, #32]
 80106a6:	2200      	movs	r2, #0
 80106a8:	809a      	strh	r2, [r3, #4]
 
    err = aatHillClimb(tp, ts);
 80106aa:	6a39      	ldr	r1, [r7, #32]
 80106ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106ae:	f000 f809 	bl	80106c4 <aatHillClimb>
 80106b2:	4603      	mov	r3, r0
 80106b4:	83fb      	strh	r3, [r7, #30]

    return err;
 80106b6:	8bfb      	ldrh	r3, [r7, #30]
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	372c      	adds	r7, #44	; 0x2c
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd90      	pop	{r4, r7, pc}
 80106c0:	08017cc4 	.word	0x08017cc4

080106c4 <aatHillClimb>:

/*******************************************************************************/
static ReturnCode aatHillClimb(const struct st25r3916AatTuneParams *tuningParams, struct st25r3916AatTuneResult *tuningStatus)
{
 80106c4:	b590      	push	{r4, r7, lr}
 80106c6:	b08d      	sub	sp, #52	; 0x34
 80106c8:	af02      	add	r7, sp, #8
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
    ReturnCode  err = ERR_NONE;
 80106ce:	2300      	movs	r3, #0
 80106d0:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t f_min;
    int32_t direction, gdirection;
    uint8_t amp,phs;
    struct st25r3916AatTuneParams tp = *tuningParams; // local copy to obey const
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	f107 0308 	add.w	r3, r7, #8
 80106d8:	4614      	mov	r4, r2
 80106da:	6820      	ldr	r0, [r4, #0]
 80106dc:	6861      	ldr	r1, [r4, #4]
 80106de:	68a2      	ldr	r2, [r4, #8]
 80106e0:	c307      	stmia	r3!, {r0, r1, r2}
 80106e2:	89a2      	ldrh	r2, [r4, #12]
 80106e4:	801a      	strh	r2, [r3, #0]

    tuningStatus->aat_a = tuningParams->aat_a_start;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	789a      	ldrb	r2, [r3, #2]
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	701a      	strb	r2, [r3, #0]
    tuningStatus->aat_b = tuningParams->aat_b_start;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	799a      	ldrb	r2, [r3, #6]
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	705a      	strb	r2, [r3, #1]

    /* Get a proper start value */
    aatMeasure(tuningStatus->aat_a,tuningStatus->aat_b,&amp,&phs,&tuningStatus->measureCnt);
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	7818      	ldrb	r0, [r3, #0]
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	7859      	ldrb	r1, [r3, #1]
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	3304      	adds	r3, #4
 8010702:	f107 0416 	add.w	r4, r7, #22
 8010706:	f107 0217 	add.w	r2, r7, #23
 801070a:	9300      	str	r3, [sp, #0]
 801070c:	4623      	mov	r3, r4
 801070e:	f000 f9bc 	bl	8010a8a <aatMeasure>
    f_min = aatCalcF(&tp, amp, phs);
 8010712:	7df9      	ldrb	r1, [r7, #23]
 8010714:	7dba      	ldrb	r2, [r7, #22]
 8010716:	f107 0308 	add.w	r3, r7, #8
 801071a:	4618      	mov	r0, r3
 801071c:	f000 f8ec 	bl	80108f8 <aatCalcF>
 8010720:	4603      	mov	r3, r0
 8010722:	61bb      	str	r3, [r7, #24]
    direction = 0;
 8010724:	2300      	movs	r3, #0
 8010726:	623b      	str	r3, [r7, #32]

    st25r3916AatLog("%d %d: %d***\n",tuningStatus->aat_a,tuningStatus->aat_b,f_min);

    do {
        direction = 0; /* Initially and after reducing step sizes we don't have a previous direction */
 8010728:	2300      	movs	r3, #0
 801072a:	623b      	str	r3, [r7, #32]
        do {
            /* With the greedy step below always executed aftwards the -direction does never need to be investigated */
            direction = aatSteepestDescent(&f_min, &tp, tuningStatus, direction, -direction);
 801072c:	6a3b      	ldr	r3, [r7, #32]
 801072e:	425b      	negs	r3, r3
 8010730:	f107 0108 	add.w	r1, r7, #8
 8010734:	f107 0018 	add.w	r0, r7, #24
 8010738:	9300      	str	r3, [sp, #0]
 801073a:	6a3b      	ldr	r3, [r7, #32]
 801073c:	683a      	ldr	r2, [r7, #0]
 801073e:	f000 f838 	bl	80107b2 <aatSteepestDescent>
 8010742:	6238      	str	r0, [r7, #32]
            if (tuningStatus->measureCnt > tp.measureLimit)
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	889a      	ldrh	r2, [r3, #4]
 8010748:	7d7b      	ldrb	r3, [r7, #21]
 801074a:	b29b      	uxth	r3, r3
 801074c:	429a      	cmp	r2, r3
 801074e:	d902      	bls.n	8010756 <aatHillClimb+0x92>
            {
                err = ERR_OVERRUN;
 8010750:	230a      	movs	r3, #10
 8010752:	84fb      	strh	r3, [r7, #38]	; 0x26
                break;
 8010754:	e017      	b.n	8010786 <aatHillClimb+0xc2>
            }
            do
            {
                gdirection = aatGreedyDescent(&f_min, &tp, tuningStatus, direction);
 8010756:	f107 0108 	add.w	r1, r7, #8
 801075a:	f107 0018 	add.w	r0, r7, #24
 801075e:	6a3b      	ldr	r3, [r7, #32]
 8010760:	683a      	ldr	r2, [r7, #0]
 8010762:	f000 f887 	bl	8010874 <aatGreedyDescent>
 8010766:	61f8      	str	r0, [r7, #28]
                if (tuningStatus->measureCnt > tp.measureLimit) {
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	889a      	ldrh	r2, [r3, #4]
 801076c:	7d7b      	ldrb	r3, [r7, #21]
 801076e:	b29b      	uxth	r3, r3
 8010770:	429a      	cmp	r2, r3
 8010772:	d902      	bls.n	801077a <aatHillClimb+0xb6>
                    err = ERR_OVERRUN;
 8010774:	230a      	movs	r3, #10
 8010776:	84fb      	strh	r3, [r7, #38]	; 0x26
                    break;
 8010778:	e002      	b.n	8010780 <aatHillClimb+0xbc>
                }
            } while (0 != gdirection);
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d1ea      	bne.n	8010756 <aatHillClimb+0x92>
        } while (0 != direction);
 8010780:	6a3b      	ldr	r3, [r7, #32]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d1d2      	bne.n	801072c <aatHillClimb+0x68>
        tp.aat_a_stepWidth /= 2U; /* Reduce step sizes */
 8010786:	7afb      	ldrb	r3, [r7, #11]
 8010788:	085b      	lsrs	r3, r3, #1
 801078a:	b2db      	uxtb	r3, r3
 801078c:	72fb      	strb	r3, [r7, #11]
        tp.aat_b_stepWidth /= 2U;
 801078e:	7bfb      	ldrb	r3, [r7, #15]
 8010790:	085b      	lsrs	r3, r3, #1
 8010792:	b2db      	uxtb	r3, r3
 8010794:	73fb      	strb	r3, [r7, #15]
    } while (tp.doDynamicSteps && ((tp.aat_a_stepWidth>0U) || (tp.aat_b_stepWidth>0U)));
 8010796:	7d3b      	ldrb	r3, [r7, #20]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d005      	beq.n	80107a8 <aatHillClimb+0xe4>
 801079c:	7afb      	ldrb	r3, [r7, #11]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d1c2      	bne.n	8010728 <aatHillClimb+0x64>
 80107a2:	7bfb      	ldrb	r3, [r7, #15]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d1bf      	bne.n	8010728 <aatHillClimb+0x64>
    
    return err;
 80107a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	372c      	adds	r7, #44	; 0x2c
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd90      	pop	{r4, r7, pc}

080107b2 <aatSteepestDescent>:

/*******************************************************************************/
static int32_t aatSteepestDescent(uint32_t *f_min, const struct st25r3916AatTuneParams *tuningParams, struct st25r3916AatTuneResult *tuningStatus, int32_t previousDir, int32_t previousDir2)
{
 80107b2:	b590      	push	{r4, r7, lr}
 80107b4:	b08b      	sub	sp, #44	; 0x2c
 80107b6:	af02      	add	r7, sp, #8
 80107b8:	60f8      	str	r0, [r7, #12]
 80107ba:	60b9      	str	r1, [r7, #8]
 80107bc:	607a      	str	r2, [r7, #4]
 80107be:	603b      	str	r3, [r7, #0]
    int32_t i;
    uint8_t amp,phs;
    uint32_t f;
    int32_t bestdir = 0; /* Negative direction: decrease, Positive: increase. (-)1: aat_a, (-)2: aat_b */
 80107c0:	2300      	movs	r3, #0
 80107c2:	61bb      	str	r3, [r7, #24]

    for (i = -2; i <= 2; i++)
 80107c4:	f06f 0301 	mvn.w	r3, #1
 80107c8:	61fb      	str	r3, [r7, #28]
 80107ca:	e041      	b.n	8010850 <aatSteepestDescent+0x9e>
    {
        uint8_t a = tuningStatus->aat_a , b = tuningStatus->aat_b;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	747b      	strb	r3, [r7, #17]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	785b      	ldrb	r3, [r3, #1]
 80107d6:	743b      	strb	r3, [r7, #16]

        if ((0==i) || (i==-previousDir) || (i==-previousDir2))
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d032      	beq.n	8010844 <aatSteepestDescent+0x92>
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	425b      	negs	r3, r3
 80107e2:	69fa      	ldr	r2, [r7, #28]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d02d      	beq.n	8010844 <aatSteepestDescent+0x92>
 80107e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ea:	425b      	negs	r3, r3
 80107ec:	69fa      	ldr	r2, [r7, #28]
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d028      	beq.n	8010844 <aatSteepestDescent+0x92>
        { /* Skip no direction and avoid going backwards */
            continue;
        }
        if (0U!=aatStepDacVals(tuningParams, &a, &b, i))
 80107f2:	f107 0210 	add.w	r2, r7, #16
 80107f6:	f107 0111 	add.w	r1, r7, #17
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	68b8      	ldr	r0, [r7, #8]
 80107fe:	f000 f8be 	bl	801097e <aatStepDacVals>
 8010802:	4603      	mov	r3, r0
 8010804:	2b00      	cmp	r3, #0
 8010806:	d11f      	bne.n	8010848 <aatSteepestDescent+0x96>
        { /* If stepping did not change the value, omit this direction */
            continue;
        }

        aatMeasure(a,b,&amp,&phs,&tuningStatus->measureCnt);
 8010808:	7c78      	ldrb	r0, [r7, #17]
 801080a:	7c39      	ldrb	r1, [r7, #16]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	3304      	adds	r3, #4
 8010810:	f107 0412 	add.w	r4, r7, #18
 8010814:	f107 0213 	add.w	r2, r7, #19
 8010818:	9300      	str	r3, [sp, #0]
 801081a:	4623      	mov	r3, r4
 801081c:	f000 f935 	bl	8010a8a <aatMeasure>
        f = aatCalcF(tuningParams, amp, phs);
 8010820:	7cfb      	ldrb	r3, [r7, #19]
 8010822:	7cba      	ldrb	r2, [r7, #18]
 8010824:	4619      	mov	r1, r3
 8010826:	68b8      	ldr	r0, [r7, #8]
 8010828:	f000 f866 	bl	80108f8 <aatCalcF>
 801082c:	6178      	str	r0, [r7, #20]
        st25r3916AatLog("%d : %d %d: %d",i,a, b, f);
        if (f < *f_min)
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	697a      	ldr	r2, [r7, #20]
 8010834:	429a      	cmp	r2, r3
 8010836:	d208      	bcs.n	801084a <aatSteepestDescent+0x98>
        { /* Value is better than all previous ones */
            st25r3916AatLog("*");
            *f_min = f;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	697a      	ldr	r2, [r7, #20]
 801083c:	601a      	str	r2, [r3, #0]
            bestdir = i;
 801083e:	69fb      	ldr	r3, [r7, #28]
 8010840:	61bb      	str	r3, [r7, #24]
 8010842:	e002      	b.n	801084a <aatSteepestDescent+0x98>
            continue;
 8010844:	bf00      	nop
 8010846:	e000      	b.n	801084a <aatSteepestDescent+0x98>
            continue;
 8010848:	bf00      	nop
    for (i = -2; i <= 2; i++)
 801084a:	69fb      	ldr	r3, [r7, #28]
 801084c:	3301      	adds	r3, #1
 801084e:	61fb      	str	r3, [r7, #28]
 8010850:	69fb      	ldr	r3, [r7, #28]
 8010852:	2b02      	cmp	r3, #2
 8010854:	ddba      	ble.n	80107cc <aatSteepestDescent+0x1a>
        }
        st25r3916AatLog("\n");
    }
    if (0!=bestdir) 
 8010856:	69bb      	ldr	r3, [r7, #24]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d006      	beq.n	801086a <aatSteepestDescent+0xb8>
    { /* Walk into the best direction */
        aatStepDacVals(tuningParams, &tuningStatus->aat_a, &tuningStatus->aat_b, bestdir);
 801085c:	6879      	ldr	r1, [r7, #4]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	1c5a      	adds	r2, r3, #1
 8010862:	69bb      	ldr	r3, [r7, #24]
 8010864:	68b8      	ldr	r0, [r7, #8]
 8010866:	f000 f88a 	bl	801097e <aatStepDacVals>
    }
    return bestdir;
 801086a:	69bb      	ldr	r3, [r7, #24]
}
 801086c:	4618      	mov	r0, r3
 801086e:	3724      	adds	r7, #36	; 0x24
 8010870:	46bd      	mov	sp, r7
 8010872:	bd90      	pop	{r4, r7, pc}

08010874 <aatGreedyDescent>:

/*******************************************************************************/
static int32_t aatGreedyDescent(uint32_t *f_min, const struct st25r3916AatTuneParams *tuningParams, struct st25r3916AatTuneResult *tuningStatus, int32_t previousDir)
{
 8010874:	b590      	push	{r4, r7, lr}
 8010876:	b089      	sub	sp, #36	; 0x24
 8010878:	af02      	add	r7, sp, #8
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
 8010880:	603b      	str	r3, [r7, #0]
    uint8_t amp,phs;
    uint32_t f;
    uint8_t a = tuningStatus->aat_a , b = tuningStatus->aat_b;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	747b      	strb	r3, [r7, #17]
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	785b      	ldrb	r3, [r3, #1]
 801088c:	743b      	strb	r3, [r7, #16]

    if (0U != aatStepDacVals(tuningParams, &a, &b, previousDir))
 801088e:	f107 0210 	add.w	r2, r7, #16
 8010892:	f107 0111 	add.w	r1, r7, #17
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	68b8      	ldr	r0, [r7, #8]
 801089a:	f000 f870 	bl	801097e <aatStepDacVals>
 801089e:	4603      	mov	r3, r0
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d001      	beq.n	80108a8 <aatGreedyDescent+0x34>
    { /* If stepping did not change the value, omit this direction */
        return 0;
 80108a4:	2300      	movs	r3, #0
 80108a6:	e023      	b.n	80108f0 <aatGreedyDescent+0x7c>
    }

    aatMeasure(a,b,&amp,&phs,&tuningStatus->measureCnt);
 80108a8:	7c78      	ldrb	r0, [r7, #17]
 80108aa:	7c39      	ldrb	r1, [r7, #16]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	3304      	adds	r3, #4
 80108b0:	f107 0412 	add.w	r4, r7, #18
 80108b4:	f107 0213 	add.w	r2, r7, #19
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	4623      	mov	r3, r4
 80108bc:	f000 f8e5 	bl	8010a8a <aatMeasure>
    f = aatCalcF(tuningParams, amp, phs);
 80108c0:	7cfb      	ldrb	r3, [r7, #19]
 80108c2:	7cba      	ldrb	r2, [r7, #18]
 80108c4:	4619      	mov	r1, r3
 80108c6:	68b8      	ldr	r0, [r7, #8]
 80108c8:	f000 f816 	bl	80108f8 <aatCalcF>
 80108cc:	6178      	str	r0, [r7, #20]
    st25r3916AatLog("g : %d %d: %d",a, b, f);
    if (f < *f_min)
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	697a      	ldr	r2, [r7, #20]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d20a      	bcs.n	80108ee <aatGreedyDescent+0x7a>
    { /* Value is better than previous one */
        st25r3916AatLog("*\n");
        tuningStatus->aat_a = a;
 80108d8:	7c7a      	ldrb	r2, [r7, #17]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	701a      	strb	r2, [r3, #0]
        tuningStatus->aat_b = b;
 80108de:	7c3a      	ldrb	r2, [r7, #16]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	705a      	strb	r2, [r3, #1]
        *f_min = f;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	697a      	ldr	r2, [r7, #20]
 80108e8:	601a      	str	r2, [r3, #0]
        return previousDir;
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	e000      	b.n	80108f0 <aatGreedyDescent+0x7c>
    }
    
    st25r3916AatLog("\n");
    return 0;
 80108ee:	2300      	movs	r3, #0
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	371c      	adds	r7, #28
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd90      	pop	{r4, r7, pc}

080108f8 <aatCalcF>:

/*******************************************************************************/
static uint32_t aatCalcF(const struct st25r3916AatTuneParams *tuningParams, uint8_t amplitude, uint8_t phase)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b089      	sub	sp, #36	; 0x24
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	460b      	mov	r3, r1
 8010902:	70fb      	strb	r3, [r7, #3]
 8010904:	4613      	mov	r3, r2
 8010906:	70bb      	strb	r3, [r7, #2]
    /* f(amp, pha) = (ampWeight * |amp - ampTarget|) + (phaWeight * |pha - phaTarget|) */
    uint8_t ampTarget = tuningParams->ampTarget;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	7a9b      	ldrb	r3, [r3, #10]
 801090c:	77fb      	strb	r3, [r7, #31]
    uint8_t phaTarget = tuningParams->phaTarget;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	7a1b      	ldrb	r3, [r3, #8]
 8010912:	77bb      	strb	r3, [r7, #30]

    uint32_t ampWeight = tuningParams->ampWeight;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	7adb      	ldrb	r3, [r3, #11]
 8010918:	61bb      	str	r3, [r7, #24]
    uint32_t phaWeight = tuningParams->phaWeight;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	7a5b      	ldrb	r3, [r3, #9]
 801091e:	617b      	str	r3, [r7, #20]

    /* Temp variables to avoid MISRA R10.8 (cast on composite expression) */
    uint8_t ad = ((amplitude > ampTarget)  ? (amplitude - ampTarget) : (ampTarget - amplitude));
 8010920:	78fa      	ldrb	r2, [r7, #3]
 8010922:	7ffb      	ldrb	r3, [r7, #31]
 8010924:	429a      	cmp	r2, r3
 8010926:	d904      	bls.n	8010932 <aatCalcF+0x3a>
 8010928:	78fa      	ldrb	r2, [r7, #3]
 801092a:	7ffb      	ldrb	r3, [r7, #31]
 801092c:	1ad3      	subs	r3, r2, r3
 801092e:	b2db      	uxtb	r3, r3
 8010930:	e003      	b.n	801093a <aatCalcF+0x42>
 8010932:	7ffa      	ldrb	r2, [r7, #31]
 8010934:	78fb      	ldrb	r3, [r7, #3]
 8010936:	1ad3      	subs	r3, r2, r3
 8010938:	b2db      	uxtb	r3, r3
 801093a:	74fb      	strb	r3, [r7, #19]
    uint8_t pd = ((phase > phaTarget)      ? (phase - phaTarget)     : (phaTarget - phase));
 801093c:	78ba      	ldrb	r2, [r7, #2]
 801093e:	7fbb      	ldrb	r3, [r7, #30]
 8010940:	429a      	cmp	r2, r3
 8010942:	d904      	bls.n	801094e <aatCalcF+0x56>
 8010944:	78ba      	ldrb	r2, [r7, #2]
 8010946:	7fbb      	ldrb	r3, [r7, #30]
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	b2db      	uxtb	r3, r3
 801094c:	e003      	b.n	8010956 <aatCalcF+0x5e>
 801094e:	7fba      	ldrb	r2, [r7, #30]
 8010950:	78bb      	ldrb	r3, [r7, #2]
 8010952:	1ad3      	subs	r3, r2, r3
 8010954:	b2db      	uxtb	r3, r3
 8010956:	74bb      	strb	r3, [r7, #18]

    uint32_t ampDelta = (uint32_t)ad;
 8010958:	7cfb      	ldrb	r3, [r7, #19]
 801095a:	60fb      	str	r3, [r7, #12]
    uint32_t phaDelta = (uint32_t)pd;
 801095c:	7cbb      	ldrb	r3, [r7, #18]
 801095e:	60bb      	str	r3, [r7, #8]

    return ((ampWeight * ampDelta) + (phaWeight * phaDelta));
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	68fa      	ldr	r2, [r7, #12]
 8010964:	fb02 f203 	mul.w	r2, r2, r3
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	68b9      	ldr	r1, [r7, #8]
 801096c:	fb01 f303 	mul.w	r3, r1, r3
 8010970:	4413      	add	r3, r2
}
 8010972:	4618      	mov	r0, r3
 8010974:	3724      	adds	r7, #36	; 0x24
 8010976:	46bd      	mov	sp, r7
 8010978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097c:	4770      	bx	lr

0801097e <aatStepDacVals>:

/*******************************************************************************/
static ReturnCode aatStepDacVals(const struct st25r3916AatTuneParams *tuningParams,uint8_t *a, uint8_t *b, int32_t dir)
{
 801097e:	b480      	push	{r7}
 8010980:	b087      	sub	sp, #28
 8010982:	af00      	add	r7, sp, #0
 8010984:	60f8      	str	r0, [r7, #12]
 8010986:	60b9      	str	r1, [r7, #8]
 8010988:	607a      	str	r2, [r7, #4]
 801098a:	603b      	str	r3, [r7, #0]
    int16_t aat_a = (int16_t)*a, aat_b = (int16_t)*b;
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	82fb      	strh	r3, [r7, #22]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	82bb      	strh	r3, [r7, #20]
    
    switch (abs(dir))
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	2b00      	cmp	r3, #0
 801099c:	bfb8      	it	lt
 801099e:	425b      	neglt	r3, r3
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d002      	beq.n	80109aa <aatStepDacVals+0x2c>
 80109a4:	2b02      	cmp	r3, #2
 80109a6:	d02e      	beq.n	8010a06 <aatStepDacVals+0x88>
 80109a8:	e05b      	b.n	8010a62 <aatStepDacVals+0xe4>
    { /* Advance by steps size in requested direction */
        case 1:
            aat_a = (dir<0)?(aat_a - (int16_t)tuningParams->aat_a_stepWidth):(aat_a + (int16_t)tuningParams->aat_a_stepWidth);
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	da07      	bge.n	80109c0 <aatStepDacVals+0x42>
 80109b0:	8afa      	ldrh	r2, [r7, #22]
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	78db      	ldrb	r3, [r3, #3]
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	1ad3      	subs	r3, r2, r3
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	b21b      	sxth	r3, r3
 80109be:	e006      	b.n	80109ce <aatStepDacVals+0x50>
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	78db      	ldrb	r3, [r3, #3]
 80109c4:	b29a      	uxth	r2, r3
 80109c6:	8afb      	ldrh	r3, [r7, #22]
 80109c8:	4413      	add	r3, r2
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	b21b      	sxth	r3, r3
 80109ce:	82fb      	strh	r3, [r7, #22]
            if(aat_a < (int16_t)tuningParams->aat_a_min){ aat_a = (int16_t)tuningParams->aat_a_min; }
 80109d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80109d4:	68fa      	ldr	r2, [r7, #12]
 80109d6:	7812      	ldrb	r2, [r2, #0]
 80109d8:	4293      	cmp	r3, r2
 80109da:	da02      	bge.n	80109e2 <aatStepDacVals+0x64>
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	82fb      	strh	r3, [r7, #22]
            if(aat_a > (int16_t)tuningParams->aat_a_max){ aat_a = (int16_t)tuningParams->aat_a_max; }
 80109e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80109e6:	68fa      	ldr	r2, [r7, #12]
 80109e8:	7852      	ldrb	r2, [r2, #1]
 80109ea:	4293      	cmp	r3, r2
 80109ec:	dd02      	ble.n	80109f4 <aatStepDacVals+0x76>
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	785b      	ldrb	r3, [r3, #1]
 80109f2:	82fb      	strh	r3, [r7, #22]
            if ((int16_t)*a == aat_a) {return ERR_PARAM;}
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	461a      	mov	r2, r3
 80109fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d131      	bne.n	8010a66 <aatStepDacVals+0xe8>
 8010a02:	2307      	movs	r3, #7
 8010a04:	e03b      	b.n	8010a7e <aatStepDacVals+0x100>
            break;
        case 2:
            aat_b = (dir<0)?(aat_b - (int16_t)tuningParams->aat_b_stepWidth):(aat_b + (int16_t)tuningParams->aat_b_stepWidth);
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	da07      	bge.n	8010a1c <aatStepDacVals+0x9e>
 8010a0c:	8aba      	ldrh	r2, [r7, #20]
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	79db      	ldrb	r3, [r3, #7]
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	1ad3      	subs	r3, r2, r3
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	b21b      	sxth	r3, r3
 8010a1a:	e006      	b.n	8010a2a <aatStepDacVals+0xac>
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	79db      	ldrb	r3, [r3, #7]
 8010a20:	b29a      	uxth	r2, r3
 8010a22:	8abb      	ldrh	r3, [r7, #20]
 8010a24:	4413      	add	r3, r2
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	b21b      	sxth	r3, r3
 8010a2a:	82bb      	strh	r3, [r7, #20]
            if(aat_b < (int16_t)tuningParams->aat_b_min){ aat_b = (int16_t)tuningParams->aat_b_min; }
 8010a2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010a30:	68fa      	ldr	r2, [r7, #12]
 8010a32:	7912      	ldrb	r2, [r2, #4]
 8010a34:	4293      	cmp	r3, r2
 8010a36:	da02      	bge.n	8010a3e <aatStepDacVals+0xc0>
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	791b      	ldrb	r3, [r3, #4]
 8010a3c:	82bb      	strh	r3, [r7, #20]
            if(aat_b > (int16_t)tuningParams->aat_b_max){ aat_b = (int16_t)tuningParams->aat_b_max; }
 8010a3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010a42:	68fa      	ldr	r2, [r7, #12]
 8010a44:	7952      	ldrb	r2, [r2, #5]
 8010a46:	4293      	cmp	r3, r2
 8010a48:	dd02      	ble.n	8010a50 <aatStepDacVals+0xd2>
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	795b      	ldrb	r3, [r3, #5]
 8010a4e:	82bb      	strh	r3, [r7, #20]
            if ((int16_t)*b == aat_b) {return ERR_PARAM;}
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	461a      	mov	r2, r3
 8010a56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d105      	bne.n	8010a6a <aatStepDacVals+0xec>
 8010a5e:	2307      	movs	r3, #7
 8010a60:	e00d      	b.n	8010a7e <aatStepDacVals+0x100>
            break;
        default:
            return ERR_REQUEST;
 8010a62:	2305      	movs	r3, #5
 8010a64:	e00b      	b.n	8010a7e <aatStepDacVals+0x100>
            break;
 8010a66:	bf00      	nop
 8010a68:	e000      	b.n	8010a6c <aatStepDacVals+0xee>
            break;
 8010a6a:	bf00      	nop
    }
    /* We only get here if actual values have changed. In all other cases an error is returned */
    *a = (uint8_t)aat_a; 
 8010a6c:	8afb      	ldrh	r3, [r7, #22]
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	701a      	strb	r2, [r3, #0]
    *b = (uint8_t)aat_b;
 8010a74:	8abb      	ldrh	r3, [r7, #20]
 8010a76:	b2da      	uxtb	r2, r3
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8010a7c:	2300      	movs	r3, #0

}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	371c      	adds	r7, #28
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr

08010a8a <aatMeasure>:

/*******************************************************************************/
static ReturnCode aatMeasure(uint8_t serCap, uint8_t parCap, uint8_t *amplitude, uint8_t *phase, uint16_t *measureCnt)
{
 8010a8a:	b580      	push	{r7, lr}
 8010a8c:	b086      	sub	sp, #24
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	60ba      	str	r2, [r7, #8]
 8010a92:	607b      	str	r3, [r7, #4]
 8010a94:	4603      	mov	r3, r0
 8010a96:	73fb      	strb	r3, [r7, #15]
 8010a98:	460b      	mov	r3, r1
 8010a9a:	73bb      	strb	r3, [r7, #14]
    ReturnCode err;

    *amplitude = 0; 
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	701a      	strb	r2, [r3, #0]
    *phase     = 0;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	701a      	strb	r2, [r3, #0]

    st25r3916WriteRegister(ST25R3916_REG_ANT_TUNE_A, serCap);
 8010aa8:	7bfb      	ldrb	r3, [r7, #15]
 8010aaa:	4619      	mov	r1, r3
 8010aac:	2026      	movs	r0, #38	; 0x26
 8010aae:	f000 f97f 	bl	8010db0 <st25r3916WriteRegister>
    st25r3916WriteRegister(ST25R3916_REG_ANT_TUNE_B, parCap);
 8010ab2:	7bbb      	ldrb	r3, [r7, #14]
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	2027      	movs	r0, #39	; 0x27
 8010ab8:	f000 f97a 	bl	8010db0 <st25r3916WriteRegister>

    /* Wait till caps have settled.. */
    platformDelay( ST25R3916_AAT_CAP_DELAY_MAX );
 8010abc:	200a      	movs	r0, #10
 8010abe:	f7f4 fd7f 	bl	80055c0 <HAL_Delay>
    
    /* Get amplitude and phase .. */
    err = rfalChipMeasureAmplitude(amplitude);
 8010ac2:	68b8      	ldr	r0, [r7, #8]
 8010ac4:	f7ff f9ed 	bl	800fea2 <rfalChipMeasureAmplitude>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	82fb      	strh	r3, [r7, #22]
    if (ERR_NONE == err)
 8010acc:	8afb      	ldrh	r3, [r7, #22]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d104      	bne.n	8010adc <aatMeasure+0x52>
    {
        err = rfalChipMeasurePhase(phase);
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f7ff fa38 	bl	800ff48 <rfalChipMeasurePhase>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	82fb      	strh	r3, [r7, #22]
    }
      
    if( measureCnt != NULL )
 8010adc:	6a3b      	ldr	r3, [r7, #32]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d005      	beq.n	8010aee <aatMeasure+0x64>
    {
        (*measureCnt)++;
 8010ae2:	6a3b      	ldr	r3, [r7, #32]
 8010ae4:	881b      	ldrh	r3, [r3, #0]
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	b29a      	uxth	r2, r3
 8010aea:	6a3b      	ldr	r3, [r7, #32]
 8010aec:	801a      	strh	r2, [r3, #0]
    }
    return err;
 8010aee:	8afb      	ldrh	r3, [r7, #22]
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3718      	adds	r7, #24
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <__NVIC_EnableIRQ>:
{
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	4603      	mov	r3, r0
 8010b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	db0b      	blt.n	8010b22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010b0a:	79fb      	ldrb	r3, [r7, #7]
 8010b0c:	f003 021f 	and.w	r2, r3, #31
 8010b10:	4907      	ldr	r1, [pc, #28]	; (8010b30 <__NVIC_EnableIRQ+0x38>)
 8010b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b16:	095b      	lsrs	r3, r3, #5
 8010b18:	2001      	movs	r0, #1
 8010b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8010b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010b22:	bf00      	nop
 8010b24:	370c      	adds	r7, #12
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop
 8010b30:	e000e100 	.word	0xe000e100

08010b34 <__NVIC_DisableIRQ>:
{
 8010b34:	b480      	push	{r7}
 8010b36:	b083      	sub	sp, #12
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	db10      	blt.n	8010b68 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010b46:	79fb      	ldrb	r3, [r7, #7]
 8010b48:	f003 021f 	and.w	r2, r3, #31
 8010b4c:	4909      	ldr	r1, [pc, #36]	; (8010b74 <__NVIC_DisableIRQ+0x40>)
 8010b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b52:	095b      	lsrs	r3, r3, #5
 8010b54:	2001      	movs	r0, #1
 8010b56:	fa00 f202 	lsl.w	r2, r0, r2
 8010b5a:	3320      	adds	r3, #32
 8010b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010b60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010b64:	f3bf 8f6f 	isb	sy
}
 8010b68:	bf00      	nop
 8010b6a:	370c      	adds	r7, #12
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr
 8010b74:	e000e100 	.word	0xe000e100

08010b78 <st25r3916comStart>:
 ******************************************************************************
 * LOCAL FUNCTION
 ******************************************************************************
 */
static void st25r3916comStart( void )
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	af00      	add	r7, sp, #0
    /* Make this operation atomic, disabling ST25R3916 interrupt during communications*/
    platformProtectST25R391xComm();
 8010b7c:	4b0b      	ldr	r3, [pc, #44]	; (8010bac <st25r3916comStart+0x34>)
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	3301      	adds	r3, #1
 8010b82:	b2da      	uxtb	r2, r3
 8010b84:	4b09      	ldr	r3, [pc, #36]	; (8010bac <st25r3916comStart+0x34>)
 8010b86:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8010b88:	f3bf 8f4f 	dsb	sy
 8010b8c:	200a      	movs	r0, #10
 8010b8e:	f7ff ffd1 	bl	8010b34 <__NVIC_DisableIRQ>
 8010b92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010b96:	f3bf 8f6f 	isb	sy
    /* I2C Start and send Slave Address */
    st25r3916I2CStart();
    st25r3916I2CSlaveAddrWR( ST25R3916_I2C_ADDR );
#else
    /* Perform the chip select */
    platformSpiSelect();
 8010b9a:	2110      	movs	r1, #16
 8010b9c:	4804      	ldr	r0, [pc, #16]	; (8010bb0 <st25r3916comStart+0x38>)
 8010b9e:	f7f3 fd71 	bl	8004684 <spiSelect>
    
    #if defined(ST25R391X_COM_SINGLETXRX)
        comBufIt = 0;                                  /* reset local buffer position   */
 8010ba2:	4b04      	ldr	r3, [pc, #16]	; (8010bb4 <st25r3916comStart+0x3c>)
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	801a      	strh	r2, [r3, #0]
    #endif /* ST25R391X_COM_SINGLETXRX */
    
#endif /* RFAL_USE_I2C */
    
}
 8010ba8:	bf00      	nop
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	20000f89 	.word	0x20000f89
 8010bb0:	40020000 	.word	0x40020000
 8010bb4:	20000bf2 	.word	0x20000bf2

08010bb8 <st25r3916comStop>:


/*******************************************************************************/
static void st25r3916comStop( void )
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	af00      	add	r7, sp, #0
#ifdef RFAL_USE_I2C
    /* Generate Stop signal */
    st25r3916I2CStop();
#else
    /* Release the chip select */
    platformSpiDeselect();
 8010bbc:	2110      	movs	r1, #16
 8010bbe:	4809      	ldr	r0, [pc, #36]	; (8010be4 <st25r3916comStop+0x2c>)
 8010bc0:	f7f3 fd70 	bl	80046a4 <spiDeselect>
#endif /* RFAL_USE_I2C */
    
    /* reEnable the ST25R3916 interrupt */
    platformUnprotectST25R391xComm();
 8010bc4:	4b08      	ldr	r3, [pc, #32]	; (8010be8 <st25r3916comStop+0x30>)
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	b2da      	uxtb	r2, r3
 8010bcc:	4b06      	ldr	r3, [pc, #24]	; (8010be8 <st25r3916comStop+0x30>)
 8010bce:	701a      	strb	r2, [r3, #0]
 8010bd0:	4b05      	ldr	r3, [pc, #20]	; (8010be8 <st25r3916comStop+0x30>)
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d102      	bne.n	8010bde <st25r3916comStop+0x26>
 8010bd8:	200a      	movs	r0, #10
 8010bda:	f7ff ff8d 	bl	8010af8 <__NVIC_EnableIRQ>
}
 8010bde:	bf00      	nop
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	40020000 	.word	0x40020000
 8010be8:	20000f89 	.word	0x20000f89

08010bec <st25r3916comTx>:
#endif /* RFAL_USE_I2C */


/*******************************************************************************/
static void st25r3916comTx( const uint8_t* txBuf, uint16_t txLen, bool last, bool txOnly )
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	4608      	mov	r0, r1
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	807b      	strh	r3, [r7, #2]
 8010bfe:	460b      	mov	r3, r1
 8010c00:	707b      	strb	r3, [r7, #1]
 8010c02:	4613      	mov	r3, r2
 8010c04:	703b      	strb	r3, [r7, #0]
    NO_WARNING(last);
    NO_WARNING(txOnly);
    
    if( txLen > 0U )
 8010c06:	887b      	ldrh	r3, [r7, #2]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d02e      	beq.n	8010c6a <st25r3916comTx+0x7e>
        platformI2CTx( txBuf, txLen, last, txOnly );
#else /* RFAL_USE_I2C */
    
        #ifdef ST25R391X_COM_SINGLETXRX
            
            ST_MEMCPY( &comBuf[comBufIt], txBuf, MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy tx data to local buffer                      */
 8010c0c:	4b19      	ldr	r3, [pc, #100]	; (8010c74 <st25r3916comTx+0x88>)
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	461a      	mov	r2, r3
 8010c12:	4b19      	ldr	r3, [pc, #100]	; (8010c78 <st25r3916comTx+0x8c>)
 8010c14:	18d0      	adds	r0, r2, r3
 8010c16:	4b17      	ldr	r3, [pc, #92]	; (8010c74 <st25r3916comTx+0x88>)
 8010c18:	881b      	ldrh	r3, [r3, #0]
 8010c1a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010c1e:	3301      	adds	r3, #1
 8010c20:	887a      	ldrh	r2, [r7, #2]
 8010c22:	4293      	cmp	r3, r2
 8010c24:	bf28      	it	cs
 8010c26:	4613      	movcs	r3, r2
 8010c28:	461a      	mov	r2, r3
 8010c2a:	6879      	ldr	r1, [r7, #4]
 8010c2c:	f006 fb69 	bl	8017302 <memcpy>
            comBufIt += MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) );                               /* store position on local buffer                    */
 8010c30:	4b10      	ldr	r3, [pc, #64]	; (8010c74 <st25r3916comTx+0x88>)
 8010c32:	881b      	ldrh	r3, [r3, #0]
 8010c34:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010c38:	3301      	adds	r3, #1
 8010c3a:	887a      	ldrh	r2, [r7, #2]
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	bf28      	it	cs
 8010c40:	4613      	movcs	r3, r2
 8010c42:	b29a      	uxth	r2, r3
 8010c44:	4b0b      	ldr	r3, [pc, #44]	; (8010c74 <st25r3916comTx+0x88>)
 8010c46:	881b      	ldrh	r3, [r3, #0]
 8010c48:	4413      	add	r3, r2
 8010c4a:	b29a      	uxth	r2, r3
 8010c4c:	4b09      	ldr	r3, [pc, #36]	; (8010c74 <st25r3916comTx+0x88>)
 8010c4e:	801a      	strh	r2, [r3, #0]
                
            if( last && txOnly )                                                                 /* only perform SPI transaction if no Rx will follow */
 8010c50:	787b      	ldrb	r3, [r7, #1]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d009      	beq.n	8010c6a <st25r3916comTx+0x7e>
 8010c56:	783b      	ldrb	r3, [r7, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d006      	beq.n	8010c6a <st25r3916comTx+0x7e>
            {
                platformSpiTxRx( comBuf, NULL, comBufIt );
 8010c5c:	4b05      	ldr	r3, [pc, #20]	; (8010c74 <st25r3916comTx+0x88>)
 8010c5e:	881b      	ldrh	r3, [r3, #0]
 8010c60:	461a      	mov	r2, r3
 8010c62:	2100      	movs	r1, #0
 8010c64:	4804      	ldr	r0, [pc, #16]	; (8010c78 <st25r3916comTx+0x8c>)
 8010c66:	f7f3 fd2d 	bl	80046c4 <spiTxRx>
            platformSpiTxRx( txBuf, NULL, txLen );
        #endif /* ST25R391X_COM_SINGLETXRX */
            
#endif /* RFAL_USE_I2C */
    }
}
 8010c6a:	bf00      	nop
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	20000bf2 	.word	0x20000bf2
 8010c78:	200009f0 	.word	0x200009f0

08010c7c <st25r3916comRx>:


/*******************************************************************************/
static void st25r3916comRx( uint8_t* rxBuf, uint16_t rxLen )
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	460b      	mov	r3, r1
 8010c86:	807b      	strh	r3, [r7, #2]
    if( rxLen > 0U )
 8010c88:	887b      	ldrh	r3, [r7, #2]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d034      	beq.n	8010cf8 <st25r3916comRx+0x7c>
#ifdef RFAL_USE_I2C
        platformI2CRx( rxBuf, rxLen );
#else /* RFAL_USE_I2C */
        
    #ifdef ST25R391X_COM_SINGLETXRX
        ST_MEMSET( &comBuf[comBufIt], 0x00, MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );     /* clear outgoing buffer                                  */
 8010c8e:	4b1c      	ldr	r3, [pc, #112]	; (8010d00 <st25r3916comRx+0x84>)
 8010c90:	881b      	ldrh	r3, [r3, #0]
 8010c92:	461a      	mov	r2, r3
 8010c94:	4b1b      	ldr	r3, [pc, #108]	; (8010d04 <st25r3916comRx+0x88>)
 8010c96:	18d0      	adds	r0, r2, r3
 8010c98:	4b19      	ldr	r3, [pc, #100]	; (8010d00 <st25r3916comRx+0x84>)
 8010c9a:	881b      	ldrh	r3, [r3, #0]
 8010c9c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	887a      	ldrh	r2, [r7, #2]
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	bf28      	it	cs
 8010ca8:	4613      	movcs	r3, r2
 8010caa:	461a      	mov	r2, r3
 8010cac:	2100      	movs	r1, #0
 8010cae:	f006 fb33 	bl	8017318 <memset>
        platformSpiTxRx( comBuf, comBuf, MIN( (comBufIt + rxLen), ST25R3916_BUF_LEN ) );        /* transceive as a single SPI call                        */
 8010cb2:	4b13      	ldr	r3, [pc, #76]	; (8010d00 <st25r3916comRx+0x84>)
 8010cb4:	881b      	ldrh	r3, [r3, #0]
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	887b      	ldrh	r3, [r7, #2]
 8010cba:	4413      	add	r3, r2
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	f240 2301 	movw	r3, #513	; 0x201
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	bf28      	it	cs
 8010cc6:	4613      	movcs	r3, r2
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	461a      	mov	r2, r3
 8010ccc:	490d      	ldr	r1, [pc, #52]	; (8010d04 <st25r3916comRx+0x88>)
 8010cce:	480d      	ldr	r0, [pc, #52]	; (8010d04 <st25r3916comRx+0x88>)
 8010cd0:	f7f3 fcf8 	bl	80046c4 <spiTxRx>
        ST_MEMCPY( rxBuf, &comBuf[comBufIt], MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy from local buf to output buffer and skip cmd byte */
 8010cd4:	4b0a      	ldr	r3, [pc, #40]	; (8010d00 <st25r3916comRx+0x84>)
 8010cd6:	881b      	ldrh	r3, [r3, #0]
 8010cd8:	461a      	mov	r2, r3
 8010cda:	4b0a      	ldr	r3, [pc, #40]	; (8010d04 <st25r3916comRx+0x88>)
 8010cdc:	18d1      	adds	r1, r2, r3
 8010cde:	4b08      	ldr	r3, [pc, #32]	; (8010d00 <st25r3916comRx+0x84>)
 8010ce0:	881b      	ldrh	r3, [r3, #0]
 8010ce2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	887a      	ldrh	r2, [r7, #2]
 8010cea:	4293      	cmp	r3, r2
 8010cec:	bf28      	it	cs
 8010cee:	4613      	movcs	r3, r2
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f006 fb05 	bl	8017302 <memcpy>
    #else
        platformSpiTxRx( NULL, rxBuf, rxLen );
    #endif /* ST25R391X_COM_SINGLETXRX */
#endif /* RFAL_USE_I2C */
    }
}
 8010cf8:	bf00      	nop
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	20000bf2 	.word	0x20000bf2
 8010d04:	200009f0 	.word	0x200009f0

08010d08 <st25r3916comTxByte>:


/*******************************************************************************/
static void st25r3916comTxByte( uint8_t txByte, bool last, bool txOnly )
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b084      	sub	sp, #16
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	4603      	mov	r3, r0
 8010d10:	71fb      	strb	r3, [r7, #7]
 8010d12:	460b      	mov	r3, r1
 8010d14:	71bb      	strb	r3, [r7, #6]
 8010d16:	4613      	mov	r3, r2
 8010d18:	717b      	strb	r3, [r7, #5]
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8010d1a:	79fb      	ldrb	r3, [r7, #7]
 8010d1c:	73fb      	strb	r3, [r7, #15]
    st25r3916comTx( &val, ST25R3916_REG_LEN, last, txOnly );
 8010d1e:	797b      	ldrb	r3, [r7, #5]
 8010d20:	79ba      	ldrb	r2, [r7, #6]
 8010d22:	f107 000f 	add.w	r0, r7, #15
 8010d26:	2101      	movs	r1, #1
 8010d28:	f7ff ff60 	bl	8010bec <st25r3916comTx>
}
 8010d2c:	bf00      	nop
 8010d2e:	3710      	adds	r7, #16
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <st25r3916ReadRegister>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode st25r3916ReadRegister( uint8_t reg, uint8_t* val )
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	6039      	str	r1, [r7, #0]
 8010d3e:	71fb      	strb	r3, [r7, #7]
    return st25r3916ReadMultipleRegisters( reg, val, ST25R3916_REG_LEN );
 8010d40:	79fb      	ldrb	r3, [r7, #7]
 8010d42:	2201      	movs	r2, #1
 8010d44:	6839      	ldr	r1, [r7, #0]
 8010d46:	4618      	mov	r0, r3
 8010d48:	f000 f805 	bl	8010d56 <st25r3916ReadMultipleRegisters>
 8010d4c:	4603      	mov	r3, r0
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}

08010d56 <st25r3916ReadMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916ReadMultipleRegisters( uint8_t reg, uint8_t* values, uint8_t length )
{
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b082      	sub	sp, #8
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	6039      	str	r1, [r7, #0]
 8010d60:	71fb      	strb	r3, [r7, #7]
 8010d62:	4613      	mov	r3, r2
 8010d64:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 8010d66:	79bb      	ldrb	r3, [r7, #6]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d01c      	beq.n	8010da6 <st25r3916ReadMultipleRegisters+0x50>
    {
        st25r3916comStart();
 8010d6c:	f7ff ff04 	bl	8010b78 <st25r3916comStart>
        
        /* If is a space-B register send a direct command first */
        if( (reg & ST25R3916_SPACE_B) != 0U )
 8010d70:	79fb      	ldrb	r3, [r7, #7]
 8010d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d004      	beq.n	8010d84 <st25r3916ReadMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, false );
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	2100      	movs	r1, #0
 8010d7e:	20fb      	movs	r0, #251	; 0xfb
 8010d80:	f7ff ffc2 	bl	8010d08 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 8010d84:	79fb      	ldrb	r3, [r7, #7]
 8010d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	2101      	movs	r1, #1
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7ff ffb9 	bl	8010d08 <st25r3916comTxByte>
        st25r3916comRepeatStart();
        st25r3916comRx( values, length );
 8010d96:	79bb      	ldrb	r3, [r7, #6]
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	6838      	ldr	r0, [r7, #0]
 8010d9e:	f7ff ff6d 	bl	8010c7c <st25r3916comRx>
        st25r3916comStop();
 8010da2:	f7ff ff09 	bl	8010bb8 <st25r3916comStop>
    }
    
    return ERR_NONE;
 8010da6:	2300      	movs	r3, #0
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3708      	adds	r7, #8
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <st25r3916WriteRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteRegister( uint8_t reg, uint8_t val )
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	4603      	mov	r3, r0
 8010db8:	460a      	mov	r2, r1
 8010dba:	71fb      	strb	r3, [r7, #7]
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 8010dc0:	79bb      	ldrb	r3, [r7, #6]
 8010dc2:	73fb      	strb	r3, [r7, #15]
    return st25r3916WriteMultipleRegisters( reg, &value, ST25R3916_REG_LEN );
 8010dc4:	f107 010f 	add.w	r1, r7, #15
 8010dc8:	79fb      	ldrb	r3, [r7, #7]
 8010dca:	2201      	movs	r2, #1
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f000 f805 	bl	8010ddc <st25r3916WriteMultipleRegisters>
 8010dd2:	4603      	mov	r3, r0
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3710      	adds	r7, #16
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <st25r3916WriteMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916WriteMultipleRegisters( uint8_t reg, const uint8_t* values, uint8_t length )
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	4603      	mov	r3, r0
 8010de4:	6039      	str	r1, [r7, #0]
 8010de6:	71fb      	strb	r3, [r7, #7]
 8010de8:	4613      	mov	r3, r2
 8010dea:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 8010dec:	79bb      	ldrb	r3, [r7, #6]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d023      	beq.n	8010e3a <st25r3916WriteMultipleRegisters+0x5e>
    {
        st25r3916comStart();
 8010df2:	f7ff fec1 	bl	8010b78 <st25r3916comStart>
        
        if( (reg & ST25R3916_SPACE_B) != 0U )
 8010df6:	79fb      	ldrb	r3, [r7, #7]
 8010df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d004      	beq.n	8010e0a <st25r3916WriteMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, true );
 8010e00:	2201      	movs	r2, #1
 8010e02:	2100      	movs	r1, #0
 8010e04:	20fb      	movs	r0, #251	; 0xfb
 8010e06:	f7ff ff7f 	bl	8010d08 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_WRITE_MODE), false, true );
 8010e0a:	79fb      	ldrb	r3, [r7, #7]
 8010e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e10:	b2db      	uxtb	r3, r3
 8010e12:	2201      	movs	r2, #1
 8010e14:	2100      	movs	r1, #0
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7ff ff76 	bl	8010d08 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 8010e1c:	79bb      	ldrb	r3, [r7, #6]
 8010e1e:	b299      	uxth	r1, r3
 8010e20:	2301      	movs	r3, #1
 8010e22:	2201      	movs	r2, #1
 8010e24:	6838      	ldr	r0, [r7, #0]
 8010e26:	f7ff fee1 	bl	8010bec <st25r3916comTx>
        st25r3916comStop();
 8010e2a:	f7ff fec5 	bl	8010bb8 <st25r3916comStop>
        
        /* Send a WriteMultiReg event to LED handling */
        st25r3916ledEvtWrMultiReg( reg, values, length);
 8010e2e:	79ba      	ldrb	r2, [r7, #6]
 8010e30:	79fb      	ldrb	r3, [r7, #7]
 8010e32:	6839      	ldr	r1, [r7, #0]
 8010e34:	4618      	mov	r0, r3
 8010e36:	f000 fbba 	bl	80115ae <st25r3916ledEvtWrMultiReg>
    }
    
    return ERR_NONE;
 8010e3a:	2300      	movs	r3, #0
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3708      	adds	r7, #8
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}

08010e44 <st25r3916WriteFifo>:


/*******************************************************************************/
ReturnCode st25r3916WriteFifo( const uint8_t* values, uint16_t length )
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b082      	sub	sp, #8
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	460b      	mov	r3, r1
 8010e4e:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_FIFO_DEPTH )
 8010e50:	887b      	ldrh	r3, [r7, #2]
 8010e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e56:	d901      	bls.n	8010e5c <st25r3916WriteFifo+0x18>
    {
        return ERR_PARAM;
 8010e58:	2307      	movs	r3, #7
 8010e5a:	e012      	b.n	8010e82 <st25r3916WriteFifo+0x3e>
    }
    
    if( length > 0U )
 8010e5c:	887b      	ldrh	r3, [r7, #2]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d00e      	beq.n	8010e80 <st25r3916WriteFifo+0x3c>
    {
        st25r3916comStart();
 8010e62:	f7ff fe89 	bl	8010b78 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_LOAD, false, true );
 8010e66:	2201      	movs	r2, #1
 8010e68:	2100      	movs	r1, #0
 8010e6a:	2080      	movs	r0, #128	; 0x80
 8010e6c:	f7ff ff4c 	bl	8010d08 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 8010e70:	8879      	ldrh	r1, [r7, #2]
 8010e72:	2301      	movs	r3, #1
 8010e74:	2201      	movs	r2, #1
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f7ff feb8 	bl	8010bec <st25r3916comTx>
        st25r3916comStop();
 8010e7c:	f7ff fe9c 	bl	8010bb8 <st25r3916comStop>
    }

    return ERR_NONE;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <st25r3916ReadFifo>:


/*******************************************************************************/
ReturnCode st25r3916ReadFifo( uint8_t* buf, uint16_t length )
{
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b082      	sub	sp, #8
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
 8010e92:	460b      	mov	r3, r1
 8010e94:	807b      	strh	r3, [r7, #2]
    if( length > 0U )
 8010e96:	887b      	ldrh	r3, [r7, #2]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d00d      	beq.n	8010eb8 <st25r3916ReadFifo+0x2e>
    {
        st25r3916comStart();
 8010e9c:	f7ff fe6c 	bl	8010b78 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_READ, true, false );
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	2101      	movs	r1, #1
 8010ea4:	209f      	movs	r0, #159	; 0x9f
 8010ea6:	f7ff ff2f 	bl	8010d08 <st25r3916comTxByte>
        
        st25r3916comRepeatStart();
        st25r3916comRx( buf, length );
 8010eaa:	887b      	ldrh	r3, [r7, #2]
 8010eac:	4619      	mov	r1, r3
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f7ff fee4 	bl	8010c7c <st25r3916comRx>
        st25r3916comStop();
 8010eb4:	f7ff fe80 	bl	8010bb8 <st25r3916comStop>
    }

    return ERR_NONE;
 8010eb8:	2300      	movs	r3, #0
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3708      	adds	r7, #8
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <st25r3916ExecuteCommand>:
}


/*******************************************************************************/
ReturnCode st25r3916ExecuteCommand( uint8_t cmd )
{
 8010ec2:	b580      	push	{r7, lr}
 8010ec4:	b082      	sub	sp, #8
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	4603      	mov	r3, r0
 8010eca:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 8010ecc:	f7ff fe54 	bl	8010b78 <st25r3916comStart>
    st25r3916comTxByte( (cmd | ST25R3916_CMD_MODE ), true, true );
 8010ed0:	79fb      	ldrb	r3, [r7, #7]
 8010ed2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	2201      	movs	r2, #1
 8010eda:	2101      	movs	r1, #1
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7ff ff13 	bl	8010d08 <st25r3916comTxByte>
    st25r3916comStop();
 8010ee2:	f7ff fe69 	bl	8010bb8 <st25r3916comStop>
    
    /* Send a cmd event to LED handling */
    st25r3916ledEvtCmd(cmd);
 8010ee6:	79fb      	ldrb	r3, [r7, #7]
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f000 fb81 	bl	80115f0 <st25r3916ledEvtCmd>
    
    return ERR_NONE;
 8010eee:	2300      	movs	r3, #0
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <st25r3916ReadTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916ReadTestRegister( uint8_t reg, uint8_t* val )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	4603      	mov	r3, r0
 8010f00:	6039      	str	r1, [r7, #0]
 8010f02:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 8010f04:	f7ff fe38 	bl	8010b78 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, false );
 8010f08:	2200      	movs	r2, #0
 8010f0a:	2100      	movs	r1, #0
 8010f0c:	20fc      	movs	r0, #252	; 0xfc
 8010f0e:	f7ff fefb 	bl	8010d08 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 8010f12:	79fb      	ldrb	r3, [r7, #7]
 8010f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	2101      	movs	r1, #1
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7ff fef2 	bl	8010d08 <st25r3916comTxByte>
    st25r3916comRepeatStart();
    st25r3916comRx( val, ST25R3916_REG_LEN );
 8010f24:	2101      	movs	r1, #1
 8010f26:	6838      	ldr	r0, [r7, #0]
 8010f28:	f7ff fea8 	bl	8010c7c <st25r3916comRx>
    st25r3916comStop();
 8010f2c:	f7ff fe44 	bl	8010bb8 <st25r3916comStop>
    
    return ERR_NONE;
 8010f30:	2300      	movs	r3, #0
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3708      	adds	r7, #8
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}

08010f3a <st25r3916WriteTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteTestRegister( uint8_t reg, uint8_t val )
{
 8010f3a:	b580      	push	{r7, lr}
 8010f3c:	b084      	sub	sp, #16
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	4603      	mov	r3, r0
 8010f42:	460a      	mov	r2, r1
 8010f44:	71fb      	strb	r3, [r7, #7]
 8010f46:	4613      	mov	r3, r2
 8010f48:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 8010f4a:	79bb      	ldrb	r3, [r7, #6]
 8010f4c:	73fb      	strb	r3, [r7, #15]

    st25r3916comStart();
 8010f4e:	f7ff fe13 	bl	8010b78 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, true );
 8010f52:	2201      	movs	r2, #1
 8010f54:	2100      	movs	r1, #0
 8010f56:	20fc      	movs	r0, #252	; 0xfc
 8010f58:	f7ff fed6 	bl	8010d08 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_WRITE_MODE), false, true );
 8010f5c:	79fb      	ldrb	r3, [r7, #7]
 8010f5e:	2201      	movs	r2, #1
 8010f60:	2100      	movs	r1, #0
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7ff fed0 	bl	8010d08 <st25r3916comTxByte>
    st25r3916comTx( &value, ST25R3916_REG_LEN, true, true );
 8010f68:	f107 000f 	add.w	r0, r7, #15
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	2201      	movs	r2, #1
 8010f70:	2101      	movs	r1, #1
 8010f72:	f7ff fe3b 	bl	8010bec <st25r3916comTx>
    st25r3916comStop();
 8010f76:	f7ff fe1f 	bl	8010bb8 <st25r3916comStop>
    
    return ERR_NONE;
 8010f7a:	2300      	movs	r3, #0
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3710      	adds	r7, #16
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}

08010f84 <st25r3916ClrRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b084      	sub	sp, #16
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	460a      	mov	r2, r1
 8010f8e:	71fb      	strb	r3, [r7, #7]
 8010f90:	4613      	mov	r3, r2
 8010f92:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8010f94:	f107 020d 	add.w	r2, r7, #13
 8010f98:	79fb      	ldrb	r3, [r7, #7]
 8010f9a:	4611      	mov	r1, r2
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7ff fec9 	bl	8010d34 <st25r3916ReadRegister>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	81fb      	strh	r3, [r7, #14]
 8010fa6:	89fb      	ldrh	r3, [r7, #14]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d001      	beq.n	8010fb0 <st25r3916ClrRegisterBits+0x2c>
 8010fac:	89fb      	ldrh	r3, [r7, #14]
 8010fae:	e01c      	b.n	8010fea <st25r3916ClrRegisterBits+0x66>
    
    /* Only perform a Write if value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 8010fb0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010fb4:	43db      	mvns	r3, r3
 8010fb6:	b25a      	sxtb	r2, r3
 8010fb8:	7b7b      	ldrb	r3, [r7, #13]
 8010fba:	b25b      	sxtb	r3, r3
 8010fbc:	4013      	ands	r3, r2
 8010fbe:	b25b      	sxtb	r3, r3
 8010fc0:	b2da      	uxtb	r2, r3
 8010fc2:	7b7b      	ldrb	r3, [r7, #13]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d101      	bne.n	8010fcc <st25r3916ClrRegisterBits+0x48>
    {
        return ERR_NONE;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	e00e      	b.n	8010fea <st25r3916ClrRegisterBits+0x66>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (uint8_t)(rdVal & ~clr_mask) );
 8010fcc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010fd0:	43db      	mvns	r3, r3
 8010fd2:	b25a      	sxtb	r2, r3
 8010fd4:	7b7b      	ldrb	r3, [r7, #13]
 8010fd6:	b25b      	sxtb	r3, r3
 8010fd8:	4013      	ands	r3, r2
 8010fda:	b25b      	sxtb	r3, r3
 8010fdc:	b2da      	uxtb	r2, r3
 8010fde:	79fb      	ldrb	r3, [r7, #7]
 8010fe0:	4611      	mov	r1, r2
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7ff fee4 	bl	8010db0 <st25r3916WriteRegister>
 8010fe8:	4603      	mov	r3, r0
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3710      	adds	r7, #16
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}

08010ff2 <st25r3916SetRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8010ff2:	b580      	push	{r7, lr}
 8010ff4:	b084      	sub	sp, #16
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	460a      	mov	r2, r1
 8010ffc:	71fb      	strb	r3, [r7, #7]
 8010ffe:	4613      	mov	r3, r2
 8011000:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8011002:	f107 020d 	add.w	r2, r7, #13
 8011006:	79fb      	ldrb	r3, [r7, #7]
 8011008:	4611      	mov	r1, r2
 801100a:	4618      	mov	r0, r3
 801100c:	f7ff fe92 	bl	8010d34 <st25r3916ReadRegister>
 8011010:	4603      	mov	r3, r0
 8011012:	81fb      	strh	r3, [r7, #14]
 8011014:	89fb      	ldrh	r3, [r7, #14]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d001      	beq.n	801101e <st25r3916SetRegisterBits+0x2c>
 801101a:	89fb      	ldrh	r3, [r7, #14]
 801101c:	e012      	b.n	8011044 <st25r3916SetRegisterBits+0x52>
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 801101e:	7b7a      	ldrb	r2, [r7, #13]
 8011020:	79bb      	ldrb	r3, [r7, #6]
 8011022:	4313      	orrs	r3, r2
 8011024:	b2da      	uxtb	r2, r3
 8011026:	7b7b      	ldrb	r3, [r7, #13]
 8011028:	429a      	cmp	r2, r3
 801102a:	d101      	bne.n	8011030 <st25r3916SetRegisterBits+0x3e>
    {
        return ERR_NONE;
 801102c:	2300      	movs	r3, #0
 801102e:	e009      	b.n	8011044 <st25r3916SetRegisterBits+0x52>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (rdVal | set_mask) );
 8011030:	7b7a      	ldrb	r2, [r7, #13]
 8011032:	79bb      	ldrb	r3, [r7, #6]
 8011034:	4313      	orrs	r3, r2
 8011036:	b2da      	uxtb	r2, r3
 8011038:	79fb      	ldrb	r3, [r7, #7]
 801103a:	4611      	mov	r1, r2
 801103c:	4618      	mov	r0, r3
 801103e:	f7ff feb7 	bl	8010db0 <st25r3916WriteRegister>
 8011042:	4603      	mov	r3, r0
}
 8011044:	4618      	mov	r0, r3
 8011046:	3710      	adds	r7, #16
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}

0801104c <st25r3916ChangeRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b082      	sub	sp, #8
 8011050:	af00      	add	r7, sp, #0
 8011052:	4603      	mov	r3, r0
 8011054:	71fb      	strb	r3, [r7, #7]
 8011056:	460b      	mov	r3, r1
 8011058:	71bb      	strb	r3, [r7, #6]
 801105a:	4613      	mov	r3, r2
 801105c:	717b      	strb	r3, [r7, #5]
    return st25r3916ModifyRegister(reg, valueMask, (valueMask & value) );
 801105e:	79ba      	ldrb	r2, [r7, #6]
 8011060:	797b      	ldrb	r3, [r7, #5]
 8011062:	4013      	ands	r3, r2
 8011064:	b2da      	uxtb	r2, r3
 8011066:	79b9      	ldrb	r1, [r7, #6]
 8011068:	79fb      	ldrb	r3, [r7, #7]
 801106a:	4618      	mov	r0, r3
 801106c:	f000 f805 	bl	801107a <st25r3916ModifyRegister>
 8011070:	4603      	mov	r3, r0
}
 8011072:	4618      	mov	r0, r3
 8011074:	3708      	adds	r7, #8
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}

0801107a <st25r3916ModifyRegister>:


/*******************************************************************************/
ReturnCode st25r3916ModifyRegister( uint8_t reg, uint8_t clr_mask, uint8_t set_mask )
{
 801107a:	b580      	push	{r7, lr}
 801107c:	b084      	sub	sp, #16
 801107e:	af00      	add	r7, sp, #0
 8011080:	4603      	mov	r3, r0
 8011082:	71fb      	strb	r3, [r7, #7]
 8011084:	460b      	mov	r3, r1
 8011086:	71bb      	strb	r3, [r7, #6]
 8011088:	4613      	mov	r3, r2
 801108a:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 801108c:	f107 020c 	add.w	r2, r7, #12
 8011090:	79fb      	ldrb	r3, [r7, #7]
 8011092:	4611      	mov	r1, r2
 8011094:	4618      	mov	r0, r3
 8011096:	f7ff fe4d 	bl	8010d34 <st25r3916ReadRegister>
 801109a:	4603      	mov	r3, r0
 801109c:	81fb      	strh	r3, [r7, #14]
 801109e:	89fb      	ldrh	r3, [r7, #14]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d001      	beq.n	80110a8 <st25r3916ModifyRegister+0x2e>
 80110a4:	89fb      	ldrh	r3, [r7, #14]
 80110a6:	e019      	b.n	80110dc <st25r3916ModifyRegister+0x62>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 80110a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80110ac:	43db      	mvns	r3, r3
 80110ae:	b25a      	sxtb	r2, r3
 80110b0:	7b3b      	ldrb	r3, [r7, #12]
 80110b2:	b25b      	sxtb	r3, r3
 80110b4:	4013      	ands	r3, r2
 80110b6:	b25b      	sxtb	r3, r3
 80110b8:	737b      	strb	r3, [r7, #13]
    wrVal |= set_mask;
 80110ba:	7b7a      	ldrb	r2, [r7, #13]
 80110bc:	797b      	ldrb	r3, [r7, #5]
 80110be:	4313      	orrs	r3, r2
 80110c0:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 80110c2:	7b3b      	ldrb	r3, [r7, #12]
 80110c4:	7b7a      	ldrb	r2, [r7, #13]
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d101      	bne.n	80110ce <st25r3916ModifyRegister+0x54>
    {
        return ERR_NONE;
 80110ca:	2300      	movs	r3, #0
 80110cc:	e006      	b.n	80110dc <st25r3916ModifyRegister+0x62>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, wrVal );
 80110ce:	7b7a      	ldrb	r2, [r7, #13]
 80110d0:	79fb      	ldrb	r3, [r7, #7]
 80110d2:	4611      	mov	r1, r2
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7ff fe6b 	bl	8010db0 <st25r3916WriteRegister>
 80110da:	4603      	mov	r3, r0
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3710      	adds	r7, #16
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}

080110e4 <st25r3916ChangeTestRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	4603      	mov	r3, r0
 80110ec:	71fb      	strb	r3, [r7, #7]
 80110ee:	460b      	mov	r3, r1
 80110f0:	71bb      	strb	r3, [r7, #6]
 80110f2:	4613      	mov	r3, r2
 80110f4:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 80110f6:	f107 020c 	add.w	r2, r7, #12
 80110fa:	79fb      	ldrb	r3, [r7, #7]
 80110fc:	4611      	mov	r1, r2
 80110fe:	4618      	mov	r0, r3
 8011100:	f7ff fefa 	bl	8010ef8 <st25r3916ReadTestRegister>
 8011104:	4603      	mov	r3, r0
 8011106:	81fb      	strh	r3, [r7, #14]
 8011108:	89fb      	ldrh	r3, [r7, #14]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d001      	beq.n	8011112 <st25r3916ChangeTestRegisterBits+0x2e>
 801110e:	89fb      	ldrh	r3, [r7, #14]
 8011110:	e01c      	b.n	801114c <st25r3916ChangeTestRegisterBits+0x68>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 8011112:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011116:	43db      	mvns	r3, r3
 8011118:	b25a      	sxtb	r2, r3
 801111a:	7b3b      	ldrb	r3, [r7, #12]
 801111c:	b25b      	sxtb	r3, r3
 801111e:	4013      	ands	r3, r2
 8011120:	b25b      	sxtb	r3, r3
 8011122:	737b      	strb	r3, [r7, #13]
    wrVal |= (uint8_t)(value & valueMask);
 8011124:	797a      	ldrb	r2, [r7, #5]
 8011126:	79bb      	ldrb	r3, [r7, #6]
 8011128:	4013      	ands	r3, r2
 801112a:	b2da      	uxtb	r2, r3
 801112c:	7b7b      	ldrb	r3, [r7, #13]
 801112e:	4313      	orrs	r3, r2
 8011130:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 8011132:	7b3b      	ldrb	r3, [r7, #12]
 8011134:	7b7a      	ldrb	r2, [r7, #13]
 8011136:	429a      	cmp	r2, r3
 8011138:	d101      	bne.n	801113e <st25r3916ChangeTestRegisterBits+0x5a>
    {
        return ERR_NONE;
 801113a:	2300      	movs	r3, #0
 801113c:	e006      	b.n	801114c <st25r3916ChangeTestRegisterBits+0x68>
    }
    
    /* Write new reg value */
    return st25r3916WriteTestRegister(reg, wrVal );
 801113e:	7b7a      	ldrb	r2, [r7, #13]
 8011140:	79fb      	ldrb	r3, [r7, #7]
 8011142:	4611      	mov	r1, r2
 8011144:	4618      	mov	r0, r3
 8011146:	f7ff fef8 	bl	8010f3a <st25r3916WriteTestRegister>
 801114a:	4603      	mov	r3, r0
}
 801114c:	4618      	mov	r0, r3
 801114e:	3710      	adds	r7, #16
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}

08011154 <st25r3916CheckReg>:


/*******************************************************************************/
bool st25r3916CheckReg( uint8_t reg, uint8_t mask, uint8_t val )
{    
 8011154:	b580      	push	{r7, lr}
 8011156:	b084      	sub	sp, #16
 8011158:	af00      	add	r7, sp, #0
 801115a:	4603      	mov	r3, r0
 801115c:	71fb      	strb	r3, [r7, #7]
 801115e:	460b      	mov	r3, r1
 8011160:	71bb      	strb	r3, [r7, #6]
 8011162:	4613      	mov	r3, r2
 8011164:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 8011166:	2300      	movs	r3, #0
 8011168:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( reg, &regVal );
 801116a:	f107 020f 	add.w	r2, r7, #15
 801116e:	79fb      	ldrb	r3, [r7, #7]
 8011170:	4611      	mov	r1, r2
 8011172:	4618      	mov	r0, r3
 8011174:	f7ff fdde 	bl	8010d34 <st25r3916ReadRegister>
    
    return ( (regVal & mask) == val );
 8011178:	7bfa      	ldrb	r2, [r7, #15]
 801117a:	79bb      	ldrb	r3, [r7, #6]
 801117c:	4013      	ands	r3, r2
 801117e:	b2db      	uxtb	r3, r3
 8011180:	797a      	ldrb	r2, [r7, #5]
 8011182:	429a      	cmp	r2, r3
 8011184:	bf0c      	ite	eq
 8011186:	2301      	moveq	r3, #1
 8011188:	2300      	movne	r3, #0
 801118a:	b2db      	uxtb	r3, r3
}
 801118c:	4618      	mov	r0, r3
 801118e:	3710      	adds	r7, #16
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}

08011194 <st25r3916IsRegValid>:


/*******************************************************************************/
bool st25r3916IsRegValid( uint8_t reg )
{
 8011194:	b480      	push	{r7}
 8011196:	b083      	sub	sp, #12
 8011198:	af00      	add	r7, sp, #0
 801119a:	4603      	mov	r3, r0
 801119c:	71fb      	strb	r3, [r7, #7]
    if( !(( (int16_t)reg >= (int16_t)ST25R3916_REG_IO_CONF1) && (reg <= (ST25R3916_SPACE_B | ST25R3916_REG_IC_IDENTITY)) ))
 801119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	da01      	bge.n	80111aa <st25r3916IsRegValid+0x16>
    {
        return false;
 80111a6:	2300      	movs	r3, #0
 80111a8:	e000      	b.n	80111ac <st25r3916IsRegValid+0x18>
    }    
    return true;
 80111aa:	2301      	movs	r3, #1
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	370c      	adds	r7, #12
 80111b0:	46bd      	mov	sp, r7
 80111b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b6:	4770      	bx	lr

080111b8 <__NVIC_EnableIRQ>:
{
 80111b8:	b480      	push	{r7}
 80111ba:	b083      	sub	sp, #12
 80111bc:	af00      	add	r7, sp, #0
 80111be:	4603      	mov	r3, r0
 80111c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80111c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	db0b      	blt.n	80111e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80111ca:	79fb      	ldrb	r3, [r7, #7]
 80111cc:	f003 021f 	and.w	r2, r3, #31
 80111d0:	4907      	ldr	r1, [pc, #28]	; (80111f0 <__NVIC_EnableIRQ+0x38>)
 80111d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80111d6:	095b      	lsrs	r3, r3, #5
 80111d8:	2001      	movs	r0, #1
 80111da:	fa00 f202 	lsl.w	r2, r0, r2
 80111de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80111e2:	bf00      	nop
 80111e4:	370c      	adds	r7, #12
 80111e6:	46bd      	mov	sp, r7
 80111e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop
 80111f0:	e000e100 	.word	0xe000e100

080111f4 <__NVIC_DisableIRQ>:
{
 80111f4:	b480      	push	{r7}
 80111f6:	b083      	sub	sp, #12
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	4603      	mov	r3, r0
 80111fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80111fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011202:	2b00      	cmp	r3, #0
 8011204:	db10      	blt.n	8011228 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011206:	79fb      	ldrb	r3, [r7, #7]
 8011208:	f003 021f 	and.w	r2, r3, #31
 801120c:	4909      	ldr	r1, [pc, #36]	; (8011234 <__NVIC_DisableIRQ+0x40>)
 801120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011212:	095b      	lsrs	r3, r3, #5
 8011214:	2001      	movs	r0, #1
 8011216:	fa00 f202 	lsl.w	r2, r0, r2
 801121a:	3320      	adds	r3, #32
 801121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011220:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011224:	f3bf 8f6f 	isb	sy
}
 8011228:	bf00      	nop
 801122a:	370c      	adds	r7, #12
 801122c:	46bd      	mov	sp, r7
 801122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011232:	4770      	bx	lr
 8011234:	e000e100 	.word	0xe000e100

08011238 <st25r3916InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3916InitInterrupts( void )
{
 8011238:	b480      	push	{r7}
 801123a:	af00      	add	r7, sp, #0
    platformIrqST25R3916PinInitialize();
    platformIrqST25R3916SetCallback( st25r3916Isr );
    
    
    st25r3916interrupt.callback     = NULL;
 801123c:	4b08      	ldr	r3, [pc, #32]	; (8011260 <st25r3916InitInterrupts+0x28>)
 801123e:	2200      	movs	r2, #0
 8011240:	605a      	str	r2, [r3, #4]
    st25r3916interrupt.prevCallback = NULL;
 8011242:	4b07      	ldr	r3, [pc, #28]	; (8011260 <st25r3916InitInterrupts+0x28>)
 8011244:	2200      	movs	r2, #0
 8011246:	601a      	str	r2, [r3, #0]
    st25r3916interrupt.status       = ST25R3916_IRQ_MASK_NONE;
 8011248:	4b05      	ldr	r3, [pc, #20]	; (8011260 <st25r3916InitInterrupts+0x28>)
 801124a:	2200      	movs	r2, #0
 801124c:	609a      	str	r2, [r3, #8]
    st25r3916interrupt.mask         = ST25R3916_IRQ_MASK_NONE;
 801124e:	4b04      	ldr	r3, [pc, #16]	; (8011260 <st25r3916InitInterrupts+0x28>)
 8011250:	2200      	movs	r2, #0
 8011252:	60da      	str	r2, [r3, #12]
}
 8011254:	bf00      	nop
 8011256:	46bd      	mov	sp, r7
 8011258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop
 8011260:	20000bf4 	.word	0x20000bf4

08011264 <st25r3916Isr>:


/*******************************************************************************/
void st25r3916Isr( void )
{
 8011264:	b580      	push	{r7, lr}
 8011266:	af00      	add	r7, sp, #0
    st25r3916CheckForReceivedInterrupts();
 8011268:	f000 f80c 	bl	8011284 <st25r3916CheckForReceivedInterrupts>
    
    // Check if callback is set and run it
    if( NULL != st25r3916interrupt.callback )
 801126c:	4b04      	ldr	r3, [pc, #16]	; (8011280 <st25r3916Isr+0x1c>)
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d002      	beq.n	801127a <st25r3916Isr+0x16>
    {
        st25r3916interrupt.callback();
 8011274:	4b02      	ldr	r3, [pc, #8]	; (8011280 <st25r3916Isr+0x1c>)
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	4798      	blx	r3
    }
}
 801127a:	bf00      	nop
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	20000bf4 	.word	0x20000bf4

08011284 <st25r3916CheckForReceivedInterrupts>:


/*******************************************************************************/
void st25r3916CheckForReceivedInterrupts( void )
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3916_INT_REGS_LEN];
    uint32_t irqStatus;

    /* Initialize iregs */
    irqStatus = ST25R3916_IRQ_MASK_NONE;
 801128a:	2300      	movs	r3, #0
 801128c:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 801128e:	463b      	mov	r3, r7
 8011290:	2204      	movs	r2, #4
 8011292:	21ff      	movs	r1, #255	; 0xff
 8011294:	4618      	mov	r0, r3
 8011296:	f006 f83f 	bl	8017318 <memset>
    
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 801129a:	e019      	b.n	80112d0 <st25r3916CheckForReceivedInterrupts+0x4c>
   {
       st25r3916ReadMultipleRegisters( ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN );
 801129c:	463b      	mov	r3, r7
 801129e:	2204      	movs	r2, #4
 80112a0:	4619      	mov	r1, r3
 80112a2:	201a      	movs	r0, #26
 80112a4:	f7ff fd57 	bl	8010d56 <st25r3916ReadMultipleRegisters>

       irqStatus |= (uint32_t)iregs[0];
 80112a8:	783b      	ldrb	r3, [r7, #0]
 80112aa:	461a      	mov	r2, r3
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	4313      	orrs	r3, r2
 80112b0:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[1]<<8;
 80112b2:	787b      	ldrb	r3, [r7, #1]
 80112b4:	021b      	lsls	r3, r3, #8
 80112b6:	687a      	ldr	r2, [r7, #4]
 80112b8:	4313      	orrs	r3, r2
 80112ba:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[2]<<16;
 80112bc:	78bb      	ldrb	r3, [r7, #2]
 80112be:	041b      	lsls	r3, r3, #16
 80112c0:	687a      	ldr	r2, [r7, #4]
 80112c2:	4313      	orrs	r3, r2
 80112c4:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[3]<<24;
 80112c6:	78fb      	ldrb	r3, [r7, #3]
 80112c8:	061b      	lsls	r3, r3, #24
 80112ca:	687a      	ldr	r2, [r7, #4]
 80112cc:	4313      	orrs	r3, r2
 80112ce:	607b      	str	r3, [r7, #4]
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 80112d0:	2110      	movs	r1, #16
 80112d2:	4818      	ldr	r0, [pc, #96]	; (8011334 <st25r3916CheckForReceivedInterrupts+0xb0>)
 80112d4:	f7f4 fc4c 	bl	8005b70 <HAL_GPIO_ReadPin>
 80112d8:	4603      	mov	r3, r0
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d0de      	beq.n	801129c <st25r3916CheckForReceivedInterrupts+0x18>
   }
   
   /* Forward all interrupts, even masked ones to application */
   platformProtectST25R391xIrqStatus();
 80112de:	4b16      	ldr	r3, [pc, #88]	; (8011338 <st25r3916CheckForReceivedInterrupts+0xb4>)
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	3301      	adds	r3, #1
 80112e4:	b2da      	uxtb	r2, r3
 80112e6:	4b14      	ldr	r3, [pc, #80]	; (8011338 <st25r3916CheckForReceivedInterrupts+0xb4>)
 80112e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80112ea:	f3bf 8f4f 	dsb	sy
 80112ee:	200a      	movs	r0, #10
 80112f0:	f7ff ff80 	bl	80111f4 <__NVIC_DisableIRQ>
 80112f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80112f8:	f3bf 8f6f 	isb	sy
   st25r3916interrupt.status |= irqStatus;
 80112fc:	4b0f      	ldr	r3, [pc, #60]	; (801133c <st25r3916CheckForReceivedInterrupts+0xb8>)
 80112fe:	689a      	ldr	r2, [r3, #8]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	4313      	orrs	r3, r2
 8011304:	4a0d      	ldr	r2, [pc, #52]	; (801133c <st25r3916CheckForReceivedInterrupts+0xb8>)
 8011306:	6093      	str	r3, [r2, #8]
   platformUnprotectST25R391xIrqStatus();
 8011308:	4b0b      	ldr	r3, [pc, #44]	; (8011338 <st25r3916CheckForReceivedInterrupts+0xb4>)
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	3b01      	subs	r3, #1
 801130e:	b2da      	uxtb	r2, r3
 8011310:	4b09      	ldr	r3, [pc, #36]	; (8011338 <st25r3916CheckForReceivedInterrupts+0xb4>)
 8011312:	701a      	strb	r2, [r3, #0]
 8011314:	4b08      	ldr	r3, [pc, #32]	; (8011338 <st25r3916CheckForReceivedInterrupts+0xb4>)
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d102      	bne.n	8011322 <st25r3916CheckForReceivedInterrupts+0x9e>
 801131c:	200a      	movs	r0, #10
 801131e:	f7ff ff4b 	bl	80111b8 <__NVIC_EnableIRQ>

   /* Send an IRQ event to LED handling */
   st25r3916ledEvtIrq( st25r3916interrupt.status );
 8011322:	4b06      	ldr	r3, [pc, #24]	; (801133c <st25r3916CheckForReceivedInterrupts+0xb8>)
 8011324:	689b      	ldr	r3, [r3, #8]
 8011326:	4618      	mov	r0, r3
 8011328:	f000 f927 	bl	801157a <st25r3916ledEvtIrq>
}
 801132c:	bf00      	nop
 801132e:	3708      	adds	r7, #8
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	40020800 	.word	0x40020800
 8011338:	20000f89 	.word	0x20000f89
 801133c:	20000bf4 	.word	0x20000bf4

08011340 <st25r3916ModifyInterrupts>:


/*******************************************************************************/
void st25r3916ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b086      	sub	sp, #24
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	6039      	str	r1, [r7, #0]
    uint8_t  i;
    uint32_t old_mask;
    uint32_t new_mask;
    

    old_mask = st25r3916interrupt.mask;
 801134a:	4b1e      	ldr	r3, [pc, #120]	; (80113c4 <st25r3916ModifyInterrupts+0x84>)
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	613b      	str	r3, [r7, #16]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	43da      	mvns	r2, r3
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	401a      	ands	r2, r3
 8011358:	6939      	ldr	r1, [r7, #16]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	400b      	ands	r3, r1
 801135e:	4313      	orrs	r3, r2
 8011360:	60fb      	str	r3, [r7, #12]
    st25r3916interrupt.mask &= ~clr_mask;
 8011362:	4b18      	ldr	r3, [pc, #96]	; (80113c4 <st25r3916ModifyInterrupts+0x84>)
 8011364:	68da      	ldr	r2, [r3, #12]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	43db      	mvns	r3, r3
 801136a:	4013      	ands	r3, r2
 801136c:	4a15      	ldr	r2, [pc, #84]	; (80113c4 <st25r3916ModifyInterrupts+0x84>)
 801136e:	60d3      	str	r3, [r2, #12]
    st25r3916interrupt.mask |= set_mask;
 8011370:	4b14      	ldr	r3, [pc, #80]	; (80113c4 <st25r3916ModifyInterrupts+0x84>)
 8011372:	68da      	ldr	r2, [r3, #12]
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	4313      	orrs	r3, r2
 8011378:	4a12      	ldr	r2, [pc, #72]	; (80113c4 <st25r3916ModifyInterrupts+0x84>)
 801137a:	60d3      	str	r3, [r2, #12]
    
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 801137c:	2300      	movs	r3, #0
 801137e:	75fb      	strb	r3, [r7, #23]
 8011380:	e019      	b.n	80113b6 <st25r3916ModifyInterrupts+0x76>
    { 
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 8011382:	7dfb      	ldrb	r3, [r7, #23]
 8011384:	00db      	lsls	r3, r3, #3
 8011386:	68fa      	ldr	r2, [r7, #12]
 8011388:	fa22 f303 	lsr.w	r3, r2, r3
 801138c:	b2db      	uxtb	r3, r3
 801138e:	2b00      	cmp	r3, #0
 8011390:	d00d      	beq.n	80113ae <st25r3916ModifyInterrupts+0x6e>
        {
            continue;
        }
        
        st25r3916WriteRegister(ST25R3916_REG_IRQ_MASK_MAIN + i, (uint8_t)((st25r3916interrupt.mask>>(8U*i)) & 0xFFU) );
 8011392:	7dfb      	ldrb	r3, [r7, #23]
 8011394:	3316      	adds	r3, #22
 8011396:	b2d8      	uxtb	r0, r3
 8011398:	4b0a      	ldr	r3, [pc, #40]	; (80113c4 <st25r3916ModifyInterrupts+0x84>)
 801139a:	68da      	ldr	r2, [r3, #12]
 801139c:	7dfb      	ldrb	r3, [r7, #23]
 801139e:	00db      	lsls	r3, r3, #3
 80113a0:	fa22 f303 	lsr.w	r3, r2, r3
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	4619      	mov	r1, r3
 80113a8:	f7ff fd02 	bl	8010db0 <st25r3916WriteRegister>
 80113ac:	e000      	b.n	80113b0 <st25r3916ModifyInterrupts+0x70>
            continue;
 80113ae:	bf00      	nop
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 80113b0:	7dfb      	ldrb	r3, [r7, #23]
 80113b2:	3301      	adds	r3, #1
 80113b4:	75fb      	strb	r3, [r7, #23]
 80113b6:	7dfb      	ldrb	r3, [r7, #23]
 80113b8:	2b03      	cmp	r3, #3
 80113ba:	d9e2      	bls.n	8011382 <st25r3916ModifyInterrupts+0x42>
    }
    return;
 80113bc:	bf00      	nop
}
 80113be:	3718      	adds	r7, #24
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	20000bf4 	.word	0x20000bf4

080113c8 <st25r3916WaitForInterruptsTimed>:


/*******************************************************************************/
uint32_t st25r3916WaitForInterruptsTimed( uint32_t mask, uint16_t tmo )
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b084      	sub	sp, #16
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	460b      	mov	r3, r1
 80113d2:	807b      	strh	r3, [r7, #2]
    uint32_t tmrDelay;
    uint32_t status;
    
    tmrDelay = platformTimerCreate( tmo );
 80113d4:	887b      	ldrh	r3, [r7, #2]
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7f3 f9b2 	bl	8004740 <timerCalculateTimer>
 80113dc:	60f8      	str	r0, [r7, #12]
    
    /* Run until specific interrupt has happen or the timer has expired */
    do 
    {
        status = (st25r3916interrupt.status & mask);
 80113de:	4b20      	ldr	r3, [pc, #128]	; (8011460 <st25r3916WaitForInterruptsTimed+0x98>)
 80113e0:	689b      	ldr	r3, [r3, #8]
 80113e2:	687a      	ldr	r2, [r7, #4]
 80113e4:	4013      	ands	r3, r2
 80113e6:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmrDelay ) || (tmo == 0U)) && (status == 0U) );
 80113e8:	68f8      	ldr	r0, [r7, #12]
 80113ea:	f7f3 f9b7 	bl	800475c <timerIsExpired>
 80113ee:	4603      	mov	r3, r0
 80113f0:	f083 0301 	eor.w	r3, r3, #1
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d102      	bne.n	8011400 <st25r3916WaitForInterruptsTimed+0x38>
 80113fa:	887b      	ldrh	r3, [r7, #2]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d102      	bne.n	8011406 <st25r3916WaitForInterruptsTimed+0x3e>
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d0eb      	beq.n	80113de <st25r3916WaitForInterruptsTimed+0x16>

    status = st25r3916interrupt.status & mask;
 8011406:	4b16      	ldr	r3, [pc, #88]	; (8011460 <st25r3916WaitForInterruptsTimed+0x98>)
 8011408:	689b      	ldr	r3, [r3, #8]
 801140a:	687a      	ldr	r2, [r7, #4]
 801140c:	4013      	ands	r3, r2
 801140e:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 8011410:	4b14      	ldr	r3, [pc, #80]	; (8011464 <st25r3916WaitForInterruptsTimed+0x9c>)
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	3301      	adds	r3, #1
 8011416:	b2da      	uxtb	r2, r3
 8011418:	4b12      	ldr	r3, [pc, #72]	; (8011464 <st25r3916WaitForInterruptsTimed+0x9c>)
 801141a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801141c:	f3bf 8f4f 	dsb	sy
 8011420:	200a      	movs	r0, #10
 8011422:	f7ff fee7 	bl	80111f4 <__NVIC_DisableIRQ>
 8011426:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801142a:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status &= ~status;
 801142e:	4b0c      	ldr	r3, [pc, #48]	; (8011460 <st25r3916WaitForInterruptsTimed+0x98>)
 8011430:	689a      	ldr	r2, [r3, #8]
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	43db      	mvns	r3, r3
 8011436:	4013      	ands	r3, r2
 8011438:	4a09      	ldr	r2, [pc, #36]	; (8011460 <st25r3916WaitForInterruptsTimed+0x98>)
 801143a:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 801143c:	4b09      	ldr	r3, [pc, #36]	; (8011464 <st25r3916WaitForInterruptsTimed+0x9c>)
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	3b01      	subs	r3, #1
 8011442:	b2da      	uxtb	r2, r3
 8011444:	4b07      	ldr	r3, [pc, #28]	; (8011464 <st25r3916WaitForInterruptsTimed+0x9c>)
 8011446:	701a      	strb	r2, [r3, #0]
 8011448:	4b06      	ldr	r3, [pc, #24]	; (8011464 <st25r3916WaitForInterruptsTimed+0x9c>)
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d102      	bne.n	8011456 <st25r3916WaitForInterruptsTimed+0x8e>
 8011450:	200a      	movs	r0, #10
 8011452:	f7ff feb1 	bl	80111b8 <__NVIC_EnableIRQ>
    
    return status;
 8011456:	68bb      	ldr	r3, [r7, #8]
}
 8011458:	4618      	mov	r0, r3
 801145a:	3710      	adds	r7, #16
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}
 8011460:	20000bf4 	.word	0x20000bf4
 8011464:	20000f89 	.word	0x20000f89

08011468 <st25r3916GetInterrupt>:


/*******************************************************************************/
uint32_t st25r3916GetInterrupt( uint32_t mask )
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b084      	sub	sp, #16
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3916interrupt.status & mask);
 8011470:	4b17      	ldr	r3, [pc, #92]	; (80114d0 <st25r3916GetInterrupt+0x68>)
 8011472:	689b      	ldr	r3, [r3, #8]
 8011474:	687a      	ldr	r2, [r7, #4]
 8011476:	4013      	ands	r3, r2
 8011478:	60fb      	str	r3, [r7, #12]
    if(irqs != ST25R3916_IRQ_MASK_NONE)
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d022      	beq.n	80114c6 <st25r3916GetInterrupt+0x5e>
    {
        platformProtectST25R391xIrqStatus();
 8011480:	4b14      	ldr	r3, [pc, #80]	; (80114d4 <st25r3916GetInterrupt+0x6c>)
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	3301      	adds	r3, #1
 8011486:	b2da      	uxtb	r2, r3
 8011488:	4b12      	ldr	r3, [pc, #72]	; (80114d4 <st25r3916GetInterrupt+0x6c>)
 801148a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801148c:	f3bf 8f4f 	dsb	sy
 8011490:	200a      	movs	r0, #10
 8011492:	f7ff feaf 	bl	80111f4 <__NVIC_DisableIRQ>
 8011496:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801149a:	f3bf 8f6f 	isb	sy
        st25r3916interrupt.status &= ~irqs;
 801149e:	4b0c      	ldr	r3, [pc, #48]	; (80114d0 <st25r3916GetInterrupt+0x68>)
 80114a0:	689a      	ldr	r2, [r3, #8]
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	43db      	mvns	r3, r3
 80114a6:	4013      	ands	r3, r2
 80114a8:	4a09      	ldr	r2, [pc, #36]	; (80114d0 <st25r3916GetInterrupt+0x68>)
 80114aa:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 80114ac:	4b09      	ldr	r3, [pc, #36]	; (80114d4 <st25r3916GetInterrupt+0x6c>)
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	3b01      	subs	r3, #1
 80114b2:	b2da      	uxtb	r2, r3
 80114b4:	4b07      	ldr	r3, [pc, #28]	; (80114d4 <st25r3916GetInterrupt+0x6c>)
 80114b6:	701a      	strb	r2, [r3, #0]
 80114b8:	4b06      	ldr	r3, [pc, #24]	; (80114d4 <st25r3916GetInterrupt+0x6c>)
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d102      	bne.n	80114c6 <st25r3916GetInterrupt+0x5e>
 80114c0:	200a      	movs	r0, #10
 80114c2:	f7ff fe79 	bl	80111b8 <__NVIC_EnableIRQ>
    }

    return irqs;
 80114c6:	68fb      	ldr	r3, [r7, #12]
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3710      	adds	r7, #16
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	20000bf4 	.word	0x20000bf4
 80114d4:	20000f89 	.word	0x20000f89

080114d8 <st25r3916EnableInterrupts>:
}


/*******************************************************************************/
void st25r3916EnableInterrupts(uint32_t mask)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b082      	sub	sp, #8
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(mask, 0);
 80114e0:	2100      	movs	r1, #0
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f7ff ff2c 	bl	8011340 <st25r3916ModifyInterrupts>
}
 80114e8:	bf00      	nop
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <st25r3916DisableInterrupts>:


/*******************************************************************************/
void st25r3916DisableInterrupts(uint32_t mask)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b082      	sub	sp, #8
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(0, mask);
 80114f8:	6879      	ldr	r1, [r7, #4]
 80114fa:	2000      	movs	r0, #0
 80114fc:	f7ff ff20 	bl	8011340 <st25r3916ModifyInterrupts>
}
 8011500:	bf00      	nop
 8011502:	3708      	adds	r7, #8
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <st25r3916ClearInterrupts>:

/*******************************************************************************/
void st25r3916ClearInterrupts( void )
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b082      	sub	sp, #8
 801150c:	af00      	add	r7, sp, #0
    uint8_t iregs[ST25R3916_INT_REGS_LEN];

    st25r3916ReadMultipleRegisters(ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN);
 801150e:	1d3b      	adds	r3, r7, #4
 8011510:	2204      	movs	r2, #4
 8011512:	4619      	mov	r1, r3
 8011514:	201a      	movs	r0, #26
 8011516:	f7ff fc1e 	bl	8010d56 <st25r3916ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 801151a:	4b12      	ldr	r3, [pc, #72]	; (8011564 <st25r3916ClearInterrupts+0x5c>)
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	3301      	adds	r3, #1
 8011520:	b2da      	uxtb	r2, r3
 8011522:	4b10      	ldr	r3, [pc, #64]	; (8011564 <st25r3916ClearInterrupts+0x5c>)
 8011524:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011526:	f3bf 8f4f 	dsb	sy
 801152a:	200a      	movs	r0, #10
 801152c:	f7ff fe62 	bl	80111f4 <__NVIC_DisableIRQ>
 8011530:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011534:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status = ST25R3916_IRQ_MASK_NONE;
 8011538:	4b0b      	ldr	r3, [pc, #44]	; (8011568 <st25r3916ClearInterrupts+0x60>)
 801153a:	2200      	movs	r2, #0
 801153c:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 801153e:	4b09      	ldr	r3, [pc, #36]	; (8011564 <st25r3916ClearInterrupts+0x5c>)
 8011540:	781b      	ldrb	r3, [r3, #0]
 8011542:	3b01      	subs	r3, #1
 8011544:	b2da      	uxtb	r2, r3
 8011546:	4b07      	ldr	r3, [pc, #28]	; (8011564 <st25r3916ClearInterrupts+0x5c>)
 8011548:	701a      	strb	r2, [r3, #0]
 801154a:	4b06      	ldr	r3, [pc, #24]	; (8011564 <st25r3916ClearInterrupts+0x5c>)
 801154c:	781b      	ldrb	r3, [r3, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d103      	bne.n	801155a <st25r3916ClearInterrupts+0x52>
 8011552:	200a      	movs	r0, #10
 8011554:	f7ff fe30 	bl	80111b8 <__NVIC_EnableIRQ>
    return;
 8011558:	bf00      	nop
 801155a:	bf00      	nop
}
 801155c:	3708      	adds	r7, #8
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	20000f89 	.word	0x20000f89
 8011568:	20000bf4 	.word	0x20000bf4

0801156c <st25r3916ledInit>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3916ledInit( void )
{
 801156c:	b480      	push	{r7}
 801156e:	af00      	add	r7, sp, #0
    /* Initialize LEDs if existing and defined */
    platformLedsInitialize();
    
    st25r3916ledRxOff();
    st25r3916ledFieldOff();
}
 8011570:	bf00      	nop
 8011572:	46bd      	mov	sp, r7
 8011574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011578:	4770      	bx	lr

0801157a <st25r3916ledEvtIrq>:


/*******************************************************************************/
void st25r3916ledEvtIrq( uint32_t irqs )
{
 801157a:	b480      	push	{r7}
 801157c:	b083      	sub	sp, #12
 801157e:	af00      	add	r7, sp, #0
 8011580:	6078      	str	r0, [r7, #4]
    if( (irqs & (ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_NRE    | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_RXE_PTA |                                                 
                 ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_WU_F    | ST25R3916_IRQ_MASK_RFU2)   ) != 0U ) 
    {
        st25r3916ledRxOff();
    }
}
 8011582:	bf00      	nop
 8011584:	370c      	adds	r7, #12
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr

0801158e <st25r3916ledEvtWrReg>:


/*******************************************************************************/
void st25r3916ledEvtWrReg( uint8_t reg, uint8_t val )
{
 801158e:	b480      	push	{r7}
 8011590:	b083      	sub	sp, #12
 8011592:	af00      	add	r7, sp, #0
 8011594:	4603      	mov	r3, r0
 8011596:	460a      	mov	r2, r1
 8011598:	71fb      	strb	r3, [r7, #7]
 801159a:	4613      	mov	r3, r2
 801159c:	71bb      	strb	r3, [r7, #6]
    if( reg == ST25R3916_REG_OP_CONTROL )
 801159e:	79fb      	ldrb	r3, [r7, #7]
 80115a0:	2b02      	cmp	r3, #2
        else
        {
            st25r3916ledFieldOff();
        }
    }
}
 80115a2:	bf00      	nop
 80115a4:	370c      	adds	r7, #12
 80115a6:	46bd      	mov	sp, r7
 80115a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ac:	4770      	bx	lr

080115ae <st25r3916ledEvtWrMultiReg>:


/*******************************************************************************/
void st25r3916ledEvtWrMultiReg( uint8_t reg, const uint8_t* vals, uint8_t len )
{
 80115ae:	b580      	push	{r7, lr}
 80115b0:	b084      	sub	sp, #16
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	4603      	mov	r3, r0
 80115b6:	6039      	str	r1, [r7, #0]
 80115b8:	71fb      	strb	r3, [r7, #7]
 80115ba:	4613      	mov	r3, r2
 80115bc:	71bb      	strb	r3, [r7, #6]
    uint8_t i;
    
    for(i=0; i<(len); i++)
 80115be:	2300      	movs	r3, #0
 80115c0:	73fb      	strb	r3, [r7, #15]
 80115c2:	e00d      	b.n	80115e0 <st25r3916ledEvtWrMultiReg+0x32>
    {
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
 80115c4:	79fa      	ldrb	r2, [r7, #7]
 80115c6:	7bfb      	ldrb	r3, [r7, #15]
 80115c8:	4413      	add	r3, r2
 80115ca:	b2d8      	uxtb	r0, r3
 80115cc:	7bfb      	ldrb	r3, [r7, #15]
 80115ce:	683a      	ldr	r2, [r7, #0]
 80115d0:	4413      	add	r3, r2
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	4619      	mov	r1, r3
 80115d6:	f7ff ffda 	bl	801158e <st25r3916ledEvtWrReg>
    for(i=0; i<(len); i++)
 80115da:	7bfb      	ldrb	r3, [r7, #15]
 80115dc:	3301      	adds	r3, #1
 80115de:	73fb      	strb	r3, [r7, #15]
 80115e0:	7bfa      	ldrb	r2, [r7, #15]
 80115e2:	79bb      	ldrb	r3, [r7, #6]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d3ed      	bcc.n	80115c4 <st25r3916ledEvtWrMultiReg+0x16>
    }
}
 80115e8:	bf00      	nop
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <st25r3916ledEvtCmd>:


/*******************************************************************************/
void st25r3916ledEvtCmd( uint8_t cmd )
{
 80115f0:	b480      	push	{r7}
 80115f2:	b083      	sub	sp, #12
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	4603      	mov	r3, r0
 80115f8:	71fb      	strb	r3, [r7, #7]
    if( cmd == ST25R3916_CMD_SET_DEFAULT )
    {
        st25r3916ledFieldOff();
        st25r3916ledRxOff();
    }
}
 80115fa:	bf00      	nop
 80115fc:	370c      	adds	r7, #12
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr

08011606 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011606:	b580      	push	{r7, lr}
 8011608:	b084      	sub	sp, #16
 801160a:	af00      	add	r7, sp, #0
 801160c:	6078      	str	r0, [r7, #4]
 801160e:	460b      	mov	r3, r1
 8011610:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011612:	2300      	movs	r3, #0
 8011614:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	7c1b      	ldrb	r3, [r3, #16]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d115      	bne.n	801164a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801161e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011622:	2202      	movs	r2, #2
 8011624:	2181      	movs	r1, #129	; 0x81
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f005 fccf 	bl	8016fca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2201      	movs	r2, #1
 8011630:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011636:	2202      	movs	r2, #2
 8011638:	2101      	movs	r1, #1
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f005 fcc5 	bl	8016fca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2201      	movs	r2, #1
 8011644:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8011648:	e012      	b.n	8011670 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801164a:	2340      	movs	r3, #64	; 0x40
 801164c:	2202      	movs	r2, #2
 801164e:	2181      	movs	r1, #129	; 0x81
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f005 fcba 	bl	8016fca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2201      	movs	r2, #1
 801165a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801165c:	2340      	movs	r3, #64	; 0x40
 801165e:	2202      	movs	r2, #2
 8011660:	2101      	movs	r1, #1
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f005 fcb1 	bl	8016fca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2201      	movs	r2, #1
 801166c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011670:	2308      	movs	r3, #8
 8011672:	2203      	movs	r2, #3
 8011674:	2182      	movs	r1, #130	; 0x82
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f005 fca7 	bl	8016fca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2201      	movs	r2, #1
 8011680:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8011682:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011686:	f005 fe1d 	bl	80172c4 <malloc>
 801168a:	4603      	mov	r3, r0
 801168c:	461a      	mov	r2, r3
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801169a:	2b00      	cmp	r3, #0
 801169c:	d102      	bne.n	80116a4 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 801169e:	2301      	movs	r3, #1
 80116a0:	73fb      	strb	r3, [r7, #15]
 80116a2:	e026      	b.n	80116f2 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80116aa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	2200      	movs	r2, #0
 80116ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	2200      	movs	r2, #0
 80116c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	7c1b      	ldrb	r3, [r3, #16]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d109      	bne.n	80116e2 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80116d8:	2101      	movs	r1, #1
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f005 fd66 	bl	80171ac <USBD_LL_PrepareReceive>
 80116e0:	e007      	b.n	80116f2 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116e8:	2340      	movs	r3, #64	; 0x40
 80116ea:	2101      	movs	r1, #1
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f005 fd5d 	bl	80171ac <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80116f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80116f4:	4618      	mov	r0, r3
 80116f6:	3710      	adds	r7, #16
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}

080116fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b084      	sub	sp, #16
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
 8011704:	460b      	mov	r3, r1
 8011706:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011708:	2300      	movs	r3, #0
 801170a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801170c:	2181      	movs	r1, #129	; 0x81
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f005 fc81 	bl	8017016 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801171a:	2101      	movs	r1, #1
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f005 fc7a 	bl	8017016 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2200      	movs	r2, #0
 8011726:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801172a:	2182      	movs	r1, #130	; 0x82
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f005 fc72 	bl	8017016 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	2200      	movs	r2, #0
 8011736:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801173e:	2b00      	cmp	r3, #0
 8011740:	d00e      	beq.n	8011760 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011752:	4618      	mov	r0, r3
 8011754:	f005 fdbe 	bl	80172d4 <free>
    pdev->pClassData = NULL;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2200      	movs	r2, #0
 801175c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8011760:	7bfb      	ldrb	r3, [r7, #15]
}
 8011762:	4618      	mov	r0, r3
 8011764:	3710      	adds	r7, #16
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}

0801176a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 801176a:	b580      	push	{r7, lr}
 801176c:	b086      	sub	sp, #24
 801176e:	af00      	add	r7, sp, #0
 8011770:	6078      	str	r0, [r7, #4]
 8011772:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801177a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801177c:	2300      	movs	r3, #0
 801177e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8011780:	2300      	movs	r3, #0
 8011782:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8011784:	2300      	movs	r3, #0
 8011786:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011790:	2b00      	cmp	r3, #0
 8011792:	d039      	beq.n	8011808 <USBD_CDC_Setup+0x9e>
 8011794:	2b20      	cmp	r3, #32
 8011796:	d17c      	bne.n	8011892 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	88db      	ldrh	r3, [r3, #6]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d029      	beq.n	80117f4 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	b25b      	sxtb	r3, r3
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	da11      	bge.n	80117ce <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80117b0:	689b      	ldr	r3, [r3, #8]
 80117b2:	683a      	ldr	r2, [r7, #0]
 80117b4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80117b6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80117b8:	683a      	ldr	r2, [r7, #0]
 80117ba:	88d2      	ldrh	r2, [r2, #6]
 80117bc:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80117be:	6939      	ldr	r1, [r7, #16]
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	88db      	ldrh	r3, [r3, #6]
 80117c4:	461a      	mov	r2, r3
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f001 f9ca 	bl	8012b60 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80117cc:	e068      	b.n	80118a0 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	785a      	ldrb	r2, [r3, #1]
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	88db      	ldrh	r3, [r3, #6]
 80117dc:	b2da      	uxtb	r2, r3
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80117e4:	6939      	ldr	r1, [r7, #16]
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	88db      	ldrh	r3, [r3, #6]
 80117ea:	461a      	mov	r2, r3
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f001 f9e5 	bl	8012bbc <USBD_CtlPrepareRx>
    break;
 80117f2:	e055      	b.n	80118a0 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80117fa:	689b      	ldr	r3, [r3, #8]
 80117fc:	683a      	ldr	r2, [r7, #0]
 80117fe:	7850      	ldrb	r0, [r2, #1]
 8011800:	2200      	movs	r2, #0
 8011802:	6839      	ldr	r1, [r7, #0]
 8011804:	4798      	blx	r3
    break;
 8011806:	e04b      	b.n	80118a0 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	785b      	ldrb	r3, [r3, #1]
 801180c:	2b0a      	cmp	r3, #10
 801180e:	d017      	beq.n	8011840 <USBD_CDC_Setup+0xd6>
 8011810:	2b0b      	cmp	r3, #11
 8011812:	d029      	beq.n	8011868 <USBD_CDC_Setup+0xfe>
 8011814:	2b00      	cmp	r3, #0
 8011816:	d133      	bne.n	8011880 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801181e:	2b03      	cmp	r3, #3
 8011820:	d107      	bne.n	8011832 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8011822:	f107 030c 	add.w	r3, r7, #12
 8011826:	2202      	movs	r2, #2
 8011828:	4619      	mov	r1, r3
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f001 f998 	bl	8012b60 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8011830:	e02e      	b.n	8011890 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8011832:	6839      	ldr	r1, [r7, #0]
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f001 f928 	bl	8012a8a <USBD_CtlError>
			  ret = USBD_FAIL;
 801183a:	2302      	movs	r3, #2
 801183c:	75fb      	strb	r3, [r7, #23]
      break;
 801183e:	e027      	b.n	8011890 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011846:	2b03      	cmp	r3, #3
 8011848:	d107      	bne.n	801185a <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 801184a:	f107 030f 	add.w	r3, r7, #15
 801184e:	2201      	movs	r2, #1
 8011850:	4619      	mov	r1, r3
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	f001 f984 	bl	8012b60 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8011858:	e01a      	b.n	8011890 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 801185a:	6839      	ldr	r1, [r7, #0]
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f001 f914 	bl	8012a8a <USBD_CtlError>
			  ret = USBD_FAIL;
 8011862:	2302      	movs	r3, #2
 8011864:	75fb      	strb	r3, [r7, #23]
      break;
 8011866:	e013      	b.n	8011890 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801186e:	2b03      	cmp	r3, #3
 8011870:	d00d      	beq.n	801188e <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8011872:	6839      	ldr	r1, [r7, #0]
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f001 f908 	bl	8012a8a <USBD_CtlError>
			  ret = USBD_FAIL;
 801187a:	2302      	movs	r3, #2
 801187c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801187e:	e006      	b.n	801188e <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8011880:	6839      	ldr	r1, [r7, #0]
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f001 f901 	bl	8012a8a <USBD_CtlError>
      ret = USBD_FAIL;
 8011888:	2302      	movs	r3, #2
 801188a:	75fb      	strb	r3, [r7, #23]
      break;
 801188c:	e000      	b.n	8011890 <USBD_CDC_Setup+0x126>
      break;
 801188e:	bf00      	nop
    }
    break;
 8011890:	e006      	b.n	80118a0 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8011892:	6839      	ldr	r1, [r7, #0]
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f001 f8f8 	bl	8012a8a <USBD_CtlError>
    ret = USBD_FAIL;
 801189a:	2302      	movs	r3, #2
 801189c:	75fb      	strb	r3, [r7, #23]
    break;
 801189e:	bf00      	nop
  }

  return ret;
 80118a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3718      	adds	r7, #24
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}

080118aa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80118aa:	b580      	push	{r7, lr}
 80118ac:	b084      	sub	sp, #16
 80118ae:	af00      	add	r7, sp, #0
 80118b0:	6078      	str	r0, [r7, #4]
 80118b2:	460b      	mov	r3, r1
 80118b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80118bc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80118c4:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d03a      	beq.n	8011946 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80118d0:	78fa      	ldrb	r2, [r7, #3]
 80118d2:	6879      	ldr	r1, [r7, #4]
 80118d4:	4613      	mov	r3, r2
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	4413      	add	r3, r2
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	440b      	add	r3, r1
 80118de:	331c      	adds	r3, #28
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d029      	beq.n	801193a <USBD_CDC_DataIn+0x90>
 80118e6:	78fa      	ldrb	r2, [r7, #3]
 80118e8:	6879      	ldr	r1, [r7, #4]
 80118ea:	4613      	mov	r3, r2
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	4413      	add	r3, r2
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	440b      	add	r3, r1
 80118f4:	331c      	adds	r3, #28
 80118f6:	681a      	ldr	r2, [r3, #0]
 80118f8:	78f9      	ldrb	r1, [r7, #3]
 80118fa:	68b8      	ldr	r0, [r7, #8]
 80118fc:	460b      	mov	r3, r1
 80118fe:	00db      	lsls	r3, r3, #3
 8011900:	1a5b      	subs	r3, r3, r1
 8011902:	009b      	lsls	r3, r3, #2
 8011904:	4403      	add	r3, r0
 8011906:	3344      	adds	r3, #68	; 0x44
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	fbb2 f1f3 	udiv	r1, r2, r3
 801190e:	fb03 f301 	mul.w	r3, r3, r1
 8011912:	1ad3      	subs	r3, r2, r3
 8011914:	2b00      	cmp	r3, #0
 8011916:	d110      	bne.n	801193a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8011918:	78fa      	ldrb	r2, [r7, #3]
 801191a:	6879      	ldr	r1, [r7, #4]
 801191c:	4613      	mov	r3, r2
 801191e:	009b      	lsls	r3, r3, #2
 8011920:	4413      	add	r3, r2
 8011922:	009b      	lsls	r3, r3, #2
 8011924:	440b      	add	r3, r1
 8011926:	331c      	adds	r3, #28
 8011928:	2200      	movs	r2, #0
 801192a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 801192c:	78f9      	ldrb	r1, [r7, #3]
 801192e:	2300      	movs	r3, #0
 8011930:	2200      	movs	r2, #0
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f005 fc17 	bl	8017166 <USBD_LL_Transmit>
 8011938:	e003      	b.n	8011942 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	2200      	movs	r2, #0
 801193e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8011942:	2300      	movs	r3, #0
 8011944:	e000      	b.n	8011948 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8011946:	2302      	movs	r3, #2
  }
}
 8011948:	4618      	mov	r0, r3
 801194a:	3710      	adds	r7, #16
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}

08011950 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b084      	sub	sp, #16
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	460b      	mov	r3, r1
 801195a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011962:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8011964:	78fb      	ldrb	r3, [r7, #3]
 8011966:	4619      	mov	r1, r3
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f005 fc42 	bl	80171f2 <USBD_LL_GetRxDataSize>
 801196e:	4602      	mov	r2, r0
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801197c:	2b00      	cmp	r3, #0
 801197e:	d00d      	beq.n	801199c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011986:	68db      	ldr	r3, [r3, #12]
 8011988:	68fa      	ldr	r2, [r7, #12]
 801198a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801198e:	68fa      	ldr	r2, [r7, #12]
 8011990:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011994:	4611      	mov	r1, r2
 8011996:	4798      	blx	r3

    return USBD_OK;
 8011998:	2300      	movs	r3, #0
 801199a:	e000      	b.n	801199e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801199c:	2302      	movs	r3, #2
  }
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3710      	adds	r7, #16
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}

080119a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80119a6:	b580      	push	{r7, lr}
 80119a8:	b084      	sub	sp, #16
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80119b4:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d015      	beq.n	80119ec <USBD_CDC_EP0_RxReady+0x46>
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80119c6:	2bff      	cmp	r3, #255	; 0xff
 80119c8:	d010      	beq.n	80119ec <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80119d0:	689b      	ldr	r3, [r3, #8]
 80119d2:	68fa      	ldr	r2, [r7, #12]
 80119d4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80119d8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80119da:	68fa      	ldr	r2, [r7, #12]
 80119dc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80119e0:	b292      	uxth	r2, r2
 80119e2:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	22ff      	movs	r2, #255	; 0xff
 80119e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80119ec:	2300      	movs	r3, #0
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3710      	adds	r7, #16
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
	...

080119f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2243      	movs	r2, #67	; 0x43
 8011a04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8011a06:	4b03      	ldr	r3, [pc, #12]	; (8011a14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	370c      	adds	r7, #12
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a12:	4770      	bx	lr
 8011a14:	200000e8 	.word	0x200000e8

08011a18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b083      	sub	sp, #12
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2243      	movs	r2, #67	; 0x43
 8011a24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8011a26:	4b03      	ldr	r3, [pc, #12]	; (8011a34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	370c      	adds	r7, #12
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr
 8011a34:	200000a4 	.word	0x200000a4

08011a38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2243      	movs	r2, #67	; 0x43
 8011a44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8011a46:	4b03      	ldr	r3, [pc, #12]	; (8011a54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	370c      	adds	r7, #12
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a52:	4770      	bx	lr
 8011a54:	2000012c 	.word	0x2000012c

08011a58 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b083      	sub	sp, #12
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	220a      	movs	r2, #10
 8011a64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8011a66:	4b03      	ldr	r3, [pc, #12]	; (8011a74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	370c      	adds	r7, #12
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr
 8011a74:	20000060 	.word	0x20000060

08011a78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8011a78:	b480      	push	{r7}
 8011a7a:	b085      	sub	sp, #20
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8011a82:	2302      	movs	r3, #2
 8011a84:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d005      	beq.n	8011a98 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	683a      	ldr	r2, [r7, #0]
 8011a90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8011a94:	2300      	movs	r3, #0
 8011a96:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3714      	adds	r7, #20
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa4:	4770      	bx	lr

08011aa6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8011aa6:	b480      	push	{r7}
 8011aa8:	b087      	sub	sp, #28
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	60f8      	str	r0, [r7, #12]
 8011aae:	60b9      	str	r1, [r7, #8]
 8011ab0:	4613      	mov	r3, r2
 8011ab2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011aba:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	68ba      	ldr	r2, [r7, #8]
 8011ac0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011ac4:	88fa      	ldrh	r2, [r7, #6]
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8011acc:	2300      	movs	r3, #0
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	371c      	adds	r7, #28
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad8:	4770      	bx	lr

08011ada <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8011ada:	b480      	push	{r7}
 8011adc:	b085      	sub	sp, #20
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
 8011ae2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011aea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	683a      	ldr	r2, [r7, #0]
 8011af0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8011af4:	2300      	movs	r3, #0
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3714      	adds	r7, #20
 8011afa:	46bd      	mov	sp, r7
 8011afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b00:	4770      	bx	lr

08011b02 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011b02:	b580      	push	{r7, lr}
 8011b04:	b084      	sub	sp, #16
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011b10:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d01c      	beq.n	8011b56 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d115      	bne.n	8011b52 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	2201      	movs	r2, #1
 8011b2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	2181      	movs	r1, #129	; 0x81
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f005 fb0c 	bl	8017166 <USBD_LL_Transmit>

      return USBD_OK;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	e002      	b.n	8011b58 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8011b52:	2301      	movs	r3, #1
 8011b54:	e000      	b.n	8011b58 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8011b56:	2302      	movs	r3, #2
  }
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3710      	adds	r7, #16
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}

08011b60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b084      	sub	sp, #16
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011b6e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d017      	beq.n	8011baa <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	7c1b      	ldrb	r3, [r3, #16]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d109      	bne.n	8011b96 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b8c:	2101      	movs	r1, #1
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f005 fb0c 	bl	80171ac <USBD_LL_PrepareReceive>
 8011b94:	e007      	b.n	8011ba6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b9c:	2340      	movs	r3, #64	; 0x40
 8011b9e:	2101      	movs	r1, #1
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f005 fb03 	bl	80171ac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	e000      	b.n	8011bac <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8011baa:	2302      	movs	r3, #2
  }
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3710      	adds	r7, #16
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b084      	sub	sp, #16
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	60f8      	str	r0, [r7, #12]
 8011bbc:	60b9      	str	r1, [r7, #8]
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d101      	bne.n	8011bcc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011bc8:	2302      	movs	r3, #2
 8011bca:	e01a      	b.n	8011c02 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d003      	beq.n	8011bde <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	2200      	movs	r2, #0
 8011bda:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d003      	beq.n	8011bec <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	68ba      	ldr	r2, [r7, #8]
 8011be8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	2201      	movs	r2, #1
 8011bf0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	79fa      	ldrb	r2, [r7, #7]
 8011bf8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8011bfa:	68f8      	ldr	r0, [r7, #12]
 8011bfc:	f005 f97e 	bl	8016efc <USBD_LL_Init>

  return USBD_OK;
 8011c00:	2300      	movs	r3, #0
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3710      	adds	r7, #16
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}

08011c0a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011c0a:	b480      	push	{r7}
 8011c0c:	b085      	sub	sp, #20
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	6078      	str	r0, [r7, #4]
 8011c12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8011c14:	2300      	movs	r3, #0
 8011c16:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d006      	beq.n	8011c2c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	683a      	ldr	r2, [r7, #0]
 8011c22:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8011c26:	2300      	movs	r3, #0
 8011c28:	73fb      	strb	r3, [r7, #15]
 8011c2a:	e001      	b.n	8011c30 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8011c2c:	2302      	movs	r3, #2
 8011c2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3714      	adds	r7, #20
 8011c36:	46bd      	mov	sp, r7
 8011c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3c:	4770      	bx	lr

08011c3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b082      	sub	sp, #8
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f005 f9a4 	bl	8016f94 <USBD_LL_Start>

  return USBD_OK;
 8011c4c:	2300      	movs	r3, #0
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3708      	adds	r7, #8
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}

08011c56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8011c56:	b480      	push	{r7}
 8011c58:	b083      	sub	sp, #12
 8011c5a:	af00      	add	r7, sp, #0
 8011c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011c5e:	2300      	movs	r3, #0
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	370c      	adds	r7, #12
 8011c64:	46bd      	mov	sp, r7
 8011c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6a:	4770      	bx	lr

08011c6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b084      	sub	sp, #16
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	460b      	mov	r3, r1
 8011c76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8011c78:	2302      	movs	r3, #2
 8011c7a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d00c      	beq.n	8011ca0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	78fa      	ldrb	r2, [r7, #3]
 8011c90:	4611      	mov	r1, r2
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	4798      	blx	r3
 8011c96:	4603      	mov	r3, r0
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d101      	bne.n	8011ca0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3710      	adds	r7, #16
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}

08011caa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011caa:	b580      	push	{r7, lr}
 8011cac:	b082      	sub	sp, #8
 8011cae:	af00      	add	r7, sp, #0
 8011cb0:	6078      	str	r0, [r7, #4]
 8011cb2:	460b      	mov	r3, r1
 8011cb4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	78fa      	ldrb	r2, [r7, #3]
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	4798      	blx	r3
  return USBD_OK;
 8011cc6:	2300      	movs	r3, #0
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3708      	adds	r7, #8
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011ce0:	6839      	ldr	r1, [r7, #0]
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f000 fe94 	bl	8012a10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2201      	movs	r2, #1
 8011cec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8011d04:	f003 031f 	and.w	r3, r3, #31
 8011d08:	2b01      	cmp	r3, #1
 8011d0a:	d00c      	beq.n	8011d26 <USBD_LL_SetupStage+0x56>
 8011d0c:	2b01      	cmp	r3, #1
 8011d0e:	d302      	bcc.n	8011d16 <USBD_LL_SetupStage+0x46>
 8011d10:	2b02      	cmp	r3, #2
 8011d12:	d010      	beq.n	8011d36 <USBD_LL_SetupStage+0x66>
 8011d14:	e017      	b.n	8011d46 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f000 fa04 	bl	801212c <USBD_StdDevReq>
    break;
 8011d24:	e01a      	b.n	8011d5c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f000 fa66 	bl	8012200 <USBD_StdItfReq>
    break;
 8011d34:	e012      	b.n	8011d5c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f000 faa4 	bl	801228c <USBD_StdEPReq>
    break;
 8011d44:	e00a      	b.n	8011d5c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8011d4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	4619      	mov	r1, r3
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f005 f97d 	bl	8017054 <USBD_LL_StallEP>
    break;
 8011d5a:	bf00      	nop
  }

  return USBD_OK;
 8011d5c:	2300      	movs	r3, #0
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3708      	adds	r7, #8
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}

08011d66 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011d66:	b580      	push	{r7, lr}
 8011d68:	b086      	sub	sp, #24
 8011d6a:	af00      	add	r7, sp, #0
 8011d6c:	60f8      	str	r0, [r7, #12]
 8011d6e:	460b      	mov	r3, r1
 8011d70:	607a      	str	r2, [r7, #4]
 8011d72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8011d74:	7afb      	ldrb	r3, [r7, #11]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d14b      	bne.n	8011e12 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011d80:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8011d88:	2b03      	cmp	r3, #3
 8011d8a:	d134      	bne.n	8011df6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	68da      	ldr	r2, [r3, #12]
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	691b      	ldr	r3, [r3, #16]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d919      	bls.n	8011dcc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	68da      	ldr	r2, [r3, #12]
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	691b      	ldr	r3, [r3, #16]
 8011da0:	1ad2      	subs	r2, r2, r3
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	68da      	ldr	r2, [r3, #12]
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d203      	bcs.n	8011dba <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011db2:	697b      	ldr	r3, [r7, #20]
 8011db4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8011db6:	b29b      	uxth	r3, r3
 8011db8:	e002      	b.n	8011dc0 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	6879      	ldr	r1, [r7, #4]
 8011dc4:	68f8      	ldr	r0, [r7, #12]
 8011dc6:	f000 ff17 	bl	8012bf8 <USBD_CtlContinueRx>
 8011dca:	e038      	b.n	8011e3e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011dd2:	691b      	ldr	r3, [r3, #16]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d00a      	beq.n	8011dee <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8011dde:	2b03      	cmp	r3, #3
 8011de0:	d105      	bne.n	8011dee <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011de8:	691b      	ldr	r3, [r3, #16]
 8011dea:	68f8      	ldr	r0, [r7, #12]
 8011dec:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	f000 ff14 	bl	8012c1c <USBD_CtlSendStatus>
 8011df4:	e023      	b.n	8011e3e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8011dfc:	2b05      	cmp	r3, #5
 8011dfe:	d11e      	bne.n	8011e3e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	2200      	movs	r2, #0
 8011e04:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8011e08:	2100      	movs	r1, #0
 8011e0a:	68f8      	ldr	r0, [r7, #12]
 8011e0c:	f005 f922 	bl	8017054 <USBD_LL_StallEP>
 8011e10:	e015      	b.n	8011e3e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011e18:	699b      	ldr	r3, [r3, #24]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d00d      	beq.n	8011e3a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8011e24:	2b03      	cmp	r3, #3
 8011e26:	d108      	bne.n	8011e3a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011e2e:	699b      	ldr	r3, [r3, #24]
 8011e30:	7afa      	ldrb	r2, [r7, #11]
 8011e32:	4611      	mov	r1, r2
 8011e34:	68f8      	ldr	r0, [r7, #12]
 8011e36:	4798      	blx	r3
 8011e38:	e001      	b.n	8011e3e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011e3a:	2302      	movs	r3, #2
 8011e3c:	e000      	b.n	8011e40 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8011e3e:	2300      	movs	r3, #0
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3718      	adds	r7, #24
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b086      	sub	sp, #24
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	60f8      	str	r0, [r7, #12]
 8011e50:	460b      	mov	r3, r1
 8011e52:	607a      	str	r2, [r7, #4]
 8011e54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8011e56:	7afb      	ldrb	r3, [r7, #11]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d17f      	bne.n	8011f5c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	3314      	adds	r3, #20
 8011e60:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8011e68:	2b02      	cmp	r3, #2
 8011e6a:	d15c      	bne.n	8011f26 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	68da      	ldr	r2, [r3, #12]
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	691b      	ldr	r3, [r3, #16]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d915      	bls.n	8011ea4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	68da      	ldr	r2, [r3, #12]
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	691b      	ldr	r3, [r3, #16]
 8011e80:	1ad2      	subs	r2, r2, r3
 8011e82:	697b      	ldr	r3, [r7, #20]
 8011e84:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	6879      	ldr	r1, [r7, #4]
 8011e90:	68f8      	ldr	r0, [r7, #12]
 8011e92:	f000 fe81 	bl	8012b98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8011e96:	2300      	movs	r3, #0
 8011e98:	2200      	movs	r2, #0
 8011e9a:	2100      	movs	r1, #0
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f005 f985 	bl	80171ac <USBD_LL_PrepareReceive>
 8011ea2:	e04e      	b.n	8011f42 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	689b      	ldr	r3, [r3, #8]
 8011ea8:	697a      	ldr	r2, [r7, #20]
 8011eaa:	6912      	ldr	r2, [r2, #16]
 8011eac:	fbb3 f1f2 	udiv	r1, r3, r2
 8011eb0:	fb02 f201 	mul.w	r2, r2, r1
 8011eb4:	1a9b      	subs	r3, r3, r2
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d11c      	bne.n	8011ef4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	689a      	ldr	r2, [r3, #8]
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d316      	bcc.n	8011ef4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8011ec6:	697b      	ldr	r3, [r7, #20]
 8011ec8:	689a      	ldr	r2, [r3, #8]
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d20f      	bcs.n	8011ef4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	68f8      	ldr	r0, [r7, #12]
 8011eda:	f000 fe5d 	bl	8012b98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	2200      	movs	r2, #0
 8011eea:	2100      	movs	r1, #0
 8011eec:	68f8      	ldr	r0, [r7, #12]
 8011eee:	f005 f95d 	bl	80171ac <USBD_LL_PrepareReceive>
 8011ef2:	e026      	b.n	8011f42 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d00a      	beq.n	8011f16 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8011f06:	2b03      	cmp	r3, #3
 8011f08:	d105      	bne.n	8011f16 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011f10:	68db      	ldr	r3, [r3, #12]
 8011f12:	68f8      	ldr	r0, [r7, #12]
 8011f14:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8011f16:	2180      	movs	r1, #128	; 0x80
 8011f18:	68f8      	ldr	r0, [r7, #12]
 8011f1a:	f005 f89b 	bl	8017054 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8011f1e:	68f8      	ldr	r0, [r7, #12]
 8011f20:	f000 fe8f 	bl	8012c42 <USBD_CtlReceiveStatus>
 8011f24:	e00d      	b.n	8011f42 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8011f2c:	2b04      	cmp	r3, #4
 8011f2e:	d004      	beq.n	8011f3a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d103      	bne.n	8011f42 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8011f3a:	2180      	movs	r1, #128	; 0x80
 8011f3c:	68f8      	ldr	r0, [r7, #12]
 8011f3e:	f005 f889 	bl	8017054 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8011f48:	2b01      	cmp	r3, #1
 8011f4a:	d11d      	bne.n	8011f88 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8011f4c:	68f8      	ldr	r0, [r7, #12]
 8011f4e:	f7ff fe82 	bl	8011c56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	2200      	movs	r2, #0
 8011f56:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8011f5a:	e015      	b.n	8011f88 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011f62:	695b      	ldr	r3, [r3, #20]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d00d      	beq.n	8011f84 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8011f6e:	2b03      	cmp	r3, #3
 8011f70:	d108      	bne.n	8011f84 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011f78:	695b      	ldr	r3, [r3, #20]
 8011f7a:	7afa      	ldrb	r2, [r7, #11]
 8011f7c:	4611      	mov	r1, r2
 8011f7e:	68f8      	ldr	r0, [r7, #12]
 8011f80:	4798      	blx	r3
 8011f82:	e001      	b.n	8011f88 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011f84:	2302      	movs	r3, #2
 8011f86:	e000      	b.n	8011f8a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8011f88:	2300      	movs	r3, #0
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3718      	adds	r7, #24
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}

08011f92 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8011f92:	b580      	push	{r7, lr}
 8011f94:	b082      	sub	sp, #8
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f9a:	2340      	movs	r3, #64	; 0x40
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	2100      	movs	r1, #0
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f005 f812 	bl	8016fca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2201      	movs	r2, #1
 8011faa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2240      	movs	r2, #64	; 0x40
 8011fb2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011fb6:	2340      	movs	r3, #64	; 0x40
 8011fb8:	2200      	movs	r2, #0
 8011fba:	2180      	movs	r1, #128	; 0x80
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f005 f804 	bl	8016fca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2240      	movs	r2, #64	; 0x40
 8011fcc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d009      	beq.n	801200a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	6852      	ldr	r2, [r2, #4]
 8012002:	b2d2      	uxtb	r2, r2
 8012004:	4611      	mov	r1, r2
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	4798      	blx	r3
  }

  return USBD_OK;
 801200a:	2300      	movs	r3, #0
}
 801200c:	4618      	mov	r0, r3
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8012014:	b480      	push	{r7}
 8012016:	b083      	sub	sp, #12
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
 801201c:	460b      	mov	r3, r1
 801201e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	78fa      	ldrb	r2, [r7, #3]
 8012024:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8012026:	2300      	movs	r3, #0
}
 8012028:	4618      	mov	r0, r3
 801202a:	370c      	adds	r7, #12
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr

08012034 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8012034:	b480      	push	{r7}
 8012036:	b083      	sub	sp, #12
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2204      	movs	r2, #4
 801204c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8012050:	2300      	movs	r3, #0
}
 8012052:	4618      	mov	r0, r3
 8012054:	370c      	adds	r7, #12
 8012056:	46bd      	mov	sp, r7
 8012058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205c:	4770      	bx	lr

0801205e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 801205e:	b480      	push	{r7}
 8012060:	b083      	sub	sp, #12
 8012062:	af00      	add	r7, sp, #0
 8012064:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8012072:	2300      	movs	r3, #0
}
 8012074:	4618      	mov	r0, r3
 8012076:	370c      	adds	r7, #12
 8012078:	46bd      	mov	sp, r7
 801207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207e:	4770      	bx	lr

08012080 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b082      	sub	sp, #8
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801208e:	2b03      	cmp	r3, #3
 8012090:	d10b      	bne.n	80120aa <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8012098:	69db      	ldr	r3, [r3, #28]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d005      	beq.n	80120aa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80120a4:	69db      	ldr	r3, [r3, #28]
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80120aa:	2300      	movs	r3, #0
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3708      	adds	r7, #8
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80120b4:	b480      	push	{r7}
 80120b6:	b083      	sub	sp, #12
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
 80120bc:	460b      	mov	r3, r1
 80120be:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80120c0:	2300      	movs	r3, #0
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	370c      	adds	r7, #12
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr

080120ce <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80120ce:	b480      	push	{r7}
 80120d0:	b083      	sub	sp, #12
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	6078      	str	r0, [r7, #4]
 80120d6:	460b      	mov	r3, r1
 80120d8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80120da:	2300      	movs	r3, #0
}
 80120dc:	4618      	mov	r0, r3
 80120de:	370c      	adds	r7, #12
 80120e0:	46bd      	mov	sp, r7
 80120e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e6:	4770      	bx	lr

080120e8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80120e8:	b480      	push	{r7}
 80120ea:	b083      	sub	sp, #12
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80120f0:	2300      	movs	r3, #0
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	370c      	adds	r7, #12
 80120f6:	46bd      	mov	sp, r7
 80120f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fc:	4770      	bx	lr

080120fe <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80120fe:	b580      	push	{r7, lr}
 8012100:	b082      	sub	sp, #8
 8012102:	af00      	add	r7, sp, #0
 8012104:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2201      	movs	r2, #1
 801210a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8012114:	685b      	ldr	r3, [r3, #4]
 8012116:	687a      	ldr	r2, [r7, #4]
 8012118:	6852      	ldr	r2, [r2, #4]
 801211a:	b2d2      	uxtb	r2, r2
 801211c:	4611      	mov	r1, r2
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	4798      	blx	r3

  return USBD_OK;
 8012122:	2300      	movs	r3, #0
}
 8012124:	4618      	mov	r0, r3
 8012126:	3708      	adds	r7, #8
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012136:	2300      	movs	r3, #0
 8012138:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	781b      	ldrb	r3, [r3, #0]
 801213e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012142:	2b20      	cmp	r3, #32
 8012144:	d004      	beq.n	8012150 <USBD_StdDevReq+0x24>
 8012146:	2b40      	cmp	r3, #64	; 0x40
 8012148:	d002      	beq.n	8012150 <USBD_StdDevReq+0x24>
 801214a:	2b00      	cmp	r3, #0
 801214c:	d008      	beq.n	8012160 <USBD_StdDevReq+0x34>
 801214e:	e04c      	b.n	80121ea <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8012156:	689b      	ldr	r3, [r3, #8]
 8012158:	6839      	ldr	r1, [r7, #0]
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	4798      	blx	r3
    break;
 801215e:	e049      	b.n	80121f4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	785b      	ldrb	r3, [r3, #1]
 8012164:	2b09      	cmp	r3, #9
 8012166:	d83a      	bhi.n	80121de <USBD_StdDevReq+0xb2>
 8012168:	a201      	add	r2, pc, #4	; (adr r2, 8012170 <USBD_StdDevReq+0x44>)
 801216a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801216e:	bf00      	nop
 8012170:	080121c1 	.word	0x080121c1
 8012174:	080121d5 	.word	0x080121d5
 8012178:	080121df 	.word	0x080121df
 801217c:	080121cb 	.word	0x080121cb
 8012180:	080121df 	.word	0x080121df
 8012184:	080121a3 	.word	0x080121a3
 8012188:	08012199 	.word	0x08012199
 801218c:	080121df 	.word	0x080121df
 8012190:	080121b7 	.word	0x080121b7
 8012194:	080121ad 	.word	0x080121ad
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8012198:	6839      	ldr	r1, [r7, #0]
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f000 f9d2 	bl	8012544 <USBD_GetDescriptor>
      break;
 80121a0:	e022      	b.n	80121e8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80121a2:	6839      	ldr	r1, [r7, #0]
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f000 fac7 	bl	8012738 <USBD_SetAddress>
      break;
 80121aa:	e01d      	b.n	80121e8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80121ac:	6839      	ldr	r1, [r7, #0]
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f000 fb04 	bl	80127bc <USBD_SetConfig>
      break;
 80121b4:	e018      	b.n	80121e8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80121b6:	6839      	ldr	r1, [r7, #0]
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f000 fb8d 	bl	80128d8 <USBD_GetConfig>
      break;
 80121be:	e013      	b.n	80121e8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f000 fbbc 	bl	8012940 <USBD_GetStatus>
      break;
 80121c8:	e00e      	b.n	80121e8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80121ca:	6839      	ldr	r1, [r7, #0]
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f000 fbea 	bl	80129a6 <USBD_SetFeature>
      break;
 80121d2:	e009      	b.n	80121e8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80121d4:	6839      	ldr	r1, [r7, #0]
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f000 fbf9 	bl	80129ce <USBD_ClrFeature>
      break;
 80121dc:	e004      	b.n	80121e8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80121de:	6839      	ldr	r1, [r7, #0]
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f000 fc52 	bl	8012a8a <USBD_CtlError>
      break;
 80121e6:	bf00      	nop
    }
    break;
 80121e8:	e004      	b.n	80121f4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80121ea:	6839      	ldr	r1, [r7, #0]
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f000 fc4c 	bl	8012a8a <USBD_CtlError>
    break;
 80121f2:	bf00      	nop
  }

  return ret;
 80121f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3710      	adds	r7, #16
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop

08012200 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801220a:	2300      	movs	r3, #0
 801220c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012216:	2b20      	cmp	r3, #32
 8012218:	d003      	beq.n	8012222 <USBD_StdItfReq+0x22>
 801221a:	2b40      	cmp	r3, #64	; 0x40
 801221c:	d001      	beq.n	8012222 <USBD_StdItfReq+0x22>
 801221e:	2b00      	cmp	r3, #0
 8012220:	d12a      	bne.n	8012278 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8012228:	3b01      	subs	r3, #1
 801222a:	2b02      	cmp	r3, #2
 801222c:	d81d      	bhi.n	801226a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	889b      	ldrh	r3, [r3, #4]
 8012232:	b2db      	uxtb	r3, r3
 8012234:	2b01      	cmp	r3, #1
 8012236:	d813      	bhi.n	8012260 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801223e:	689b      	ldr	r3, [r3, #8]
 8012240:	6839      	ldr	r1, [r7, #0]
 8012242:	6878      	ldr	r0, [r7, #4]
 8012244:	4798      	blx	r3
 8012246:	4603      	mov	r3, r0
 8012248:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	88db      	ldrh	r3, [r3, #6]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d110      	bne.n	8012274 <USBD_StdItfReq+0x74>
 8012252:	7bfb      	ldrb	r3, [r7, #15]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d10d      	bne.n	8012274 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f000 fcdf 	bl	8012c1c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801225e:	e009      	b.n	8012274 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8012260:	6839      	ldr	r1, [r7, #0]
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f000 fc11 	bl	8012a8a <USBD_CtlError>
      break;
 8012268:	e004      	b.n	8012274 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 801226a:	6839      	ldr	r1, [r7, #0]
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f000 fc0c 	bl	8012a8a <USBD_CtlError>
      break;
 8012272:	e000      	b.n	8012276 <USBD_StdItfReq+0x76>
      break;
 8012274:	bf00      	nop
    }
    break;
 8012276:	e004      	b.n	8012282 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8012278:	6839      	ldr	r1, [r7, #0]
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f000 fc05 	bl	8012a8a <USBD_CtlError>
    break;
 8012280:	bf00      	nop
  }

  return USBD_OK;
 8012282:	2300      	movs	r3, #0
}
 8012284:	4618      	mov	r0, r3
 8012286:	3710      	adds	r7, #16
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012296:	2300      	movs	r3, #0
 8012298:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	889b      	ldrh	r3, [r3, #4]
 801229e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80122a8:	2b20      	cmp	r3, #32
 80122aa:	d004      	beq.n	80122b6 <USBD_StdEPReq+0x2a>
 80122ac:	2b40      	cmp	r3, #64	; 0x40
 80122ae:	d002      	beq.n	80122b6 <USBD_StdEPReq+0x2a>
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d008      	beq.n	80122c6 <USBD_StdEPReq+0x3a>
 80122b4:	e13b      	b.n	801252e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80122bc:	689b      	ldr	r3, [r3, #8]
 80122be:	6839      	ldr	r1, [r7, #0]
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	4798      	blx	r3
    break;
 80122c4:	e138      	b.n	8012538 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80122ce:	2b20      	cmp	r3, #32
 80122d0:	d10a      	bne.n	80122e8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80122d8:	689b      	ldr	r3, [r3, #8]
 80122da:	6839      	ldr	r1, [r7, #0]
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	4798      	blx	r3
 80122e0:	4603      	mov	r3, r0
 80122e2:	73fb      	strb	r3, [r7, #15]

      return ret;
 80122e4:	7bfb      	ldrb	r3, [r7, #15]
 80122e6:	e128      	b.n	801253a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	785b      	ldrb	r3, [r3, #1]
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d03e      	beq.n	801236e <USBD_StdEPReq+0xe2>
 80122f0:	2b03      	cmp	r3, #3
 80122f2:	d002      	beq.n	80122fa <USBD_StdEPReq+0x6e>
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d070      	beq.n	80123da <USBD_StdEPReq+0x14e>
 80122f8:	e113      	b.n	8012522 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8012300:	2b02      	cmp	r3, #2
 8012302:	d002      	beq.n	801230a <USBD_StdEPReq+0x7e>
 8012304:	2b03      	cmp	r3, #3
 8012306:	d015      	beq.n	8012334 <USBD_StdEPReq+0xa8>
 8012308:	e02b      	b.n	8012362 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801230a:	7bbb      	ldrb	r3, [r7, #14]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d00c      	beq.n	801232a <USBD_StdEPReq+0x9e>
 8012310:	7bbb      	ldrb	r3, [r7, #14]
 8012312:	2b80      	cmp	r3, #128	; 0x80
 8012314:	d009      	beq.n	801232a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8012316:	7bbb      	ldrb	r3, [r7, #14]
 8012318:	4619      	mov	r1, r3
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f004 fe9a 	bl	8017054 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8012320:	2180      	movs	r1, #128	; 0x80
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f004 fe96 	bl	8017054 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8012328:	e020      	b.n	801236c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 801232a:	6839      	ldr	r1, [r7, #0]
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f000 fbac 	bl	8012a8a <USBD_CtlError>
        break;
 8012332:	e01b      	b.n	801236c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	885b      	ldrh	r3, [r3, #2]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d10e      	bne.n	801235a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801233c:	7bbb      	ldrb	r3, [r7, #14]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d00b      	beq.n	801235a <USBD_StdEPReq+0xce>
 8012342:	7bbb      	ldrb	r3, [r7, #14]
 8012344:	2b80      	cmp	r3, #128	; 0x80
 8012346:	d008      	beq.n	801235a <USBD_StdEPReq+0xce>
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	88db      	ldrh	r3, [r3, #6]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d104      	bne.n	801235a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8012350:	7bbb      	ldrb	r3, [r7, #14]
 8012352:	4619      	mov	r1, r3
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f004 fe7d 	bl	8017054 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f000 fc5e 	bl	8012c1c <USBD_CtlSendStatus>

        break;
 8012360:	e004      	b.n	801236c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8012362:	6839      	ldr	r1, [r7, #0]
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f000 fb90 	bl	8012a8a <USBD_CtlError>
        break;
 801236a:	bf00      	nop
      }
      break;
 801236c:	e0de      	b.n	801252c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8012374:	2b02      	cmp	r3, #2
 8012376:	d002      	beq.n	801237e <USBD_StdEPReq+0xf2>
 8012378:	2b03      	cmp	r3, #3
 801237a:	d015      	beq.n	80123a8 <USBD_StdEPReq+0x11c>
 801237c:	e026      	b.n	80123cc <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801237e:	7bbb      	ldrb	r3, [r7, #14]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d00c      	beq.n	801239e <USBD_StdEPReq+0x112>
 8012384:	7bbb      	ldrb	r3, [r7, #14]
 8012386:	2b80      	cmp	r3, #128	; 0x80
 8012388:	d009      	beq.n	801239e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 801238a:	7bbb      	ldrb	r3, [r7, #14]
 801238c:	4619      	mov	r1, r3
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f004 fe60 	bl	8017054 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8012394:	2180      	movs	r1, #128	; 0x80
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f004 fe5c 	bl	8017054 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801239c:	e01c      	b.n	80123d8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 801239e:	6839      	ldr	r1, [r7, #0]
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f000 fb72 	bl	8012a8a <USBD_CtlError>
        break;
 80123a6:	e017      	b.n	80123d8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	885b      	ldrh	r3, [r3, #2]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d112      	bne.n	80123d6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80123b0:	7bbb      	ldrb	r3, [r7, #14]
 80123b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d004      	beq.n	80123c4 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80123ba:	7bbb      	ldrb	r3, [r7, #14]
 80123bc:	4619      	mov	r1, r3
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f004 fe67 	bl	8017092 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f000 fc29 	bl	8012c1c <USBD_CtlSendStatus>
        }
        break;
 80123ca:	e004      	b.n	80123d6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80123cc:	6839      	ldr	r1, [r7, #0]
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 fb5b 	bl	8012a8a <USBD_CtlError>
        break;
 80123d4:	e000      	b.n	80123d8 <USBD_StdEPReq+0x14c>
        break;
 80123d6:	bf00      	nop
      }
      break;
 80123d8:	e0a8      	b.n	801252c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80123e0:	2b02      	cmp	r3, #2
 80123e2:	d002      	beq.n	80123ea <USBD_StdEPReq+0x15e>
 80123e4:	2b03      	cmp	r3, #3
 80123e6:	d031      	beq.n	801244c <USBD_StdEPReq+0x1c0>
 80123e8:	e095      	b.n	8012516 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80123ea:	7bbb      	ldrb	r3, [r7, #14]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d007      	beq.n	8012400 <USBD_StdEPReq+0x174>
 80123f0:	7bbb      	ldrb	r3, [r7, #14]
 80123f2:	2b80      	cmp	r3, #128	; 0x80
 80123f4:	d004      	beq.n	8012400 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80123f6:	6839      	ldr	r1, [r7, #0]
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f000 fb46 	bl	8012a8a <USBD_CtlError>
          break;
 80123fe:	e08f      	b.n	8012520 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8012400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012404:	2b00      	cmp	r3, #0
 8012406:	da0b      	bge.n	8012420 <USBD_StdEPReq+0x194>
 8012408:	7bbb      	ldrb	r3, [r7, #14]
 801240a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801240e:	4613      	mov	r3, r2
 8012410:	009b      	lsls	r3, r3, #2
 8012412:	4413      	add	r3, r2
 8012414:	009b      	lsls	r3, r3, #2
 8012416:	3310      	adds	r3, #16
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	4413      	add	r3, r2
 801241c:	3304      	adds	r3, #4
 801241e:	e00a      	b.n	8012436 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8012420:	7bbb      	ldrb	r3, [r7, #14]
 8012422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8012426:	4613      	mov	r3, r2
 8012428:	009b      	lsls	r3, r3, #2
 801242a:	4413      	add	r3, r2
 801242c:	009b      	lsls	r3, r3, #2
 801242e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	4413      	add	r3, r2
 8012436:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	2200      	movs	r2, #0
 801243c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	2202      	movs	r2, #2
 8012442:	4619      	mov	r1, r3
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f000 fb8b 	bl	8012b60 <USBD_CtlSendData>
          break;
 801244a:	e069      	b.n	8012520 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 801244c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012450:	2b00      	cmp	r3, #0
 8012452:	da11      	bge.n	8012478 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012454:	7bbb      	ldrb	r3, [r7, #14]
 8012456:	f003 020f 	and.w	r2, r3, #15
 801245a:	6879      	ldr	r1, [r7, #4]
 801245c:	4613      	mov	r3, r2
 801245e:	009b      	lsls	r3, r3, #2
 8012460:	4413      	add	r3, r2
 8012462:	009b      	lsls	r3, r3, #2
 8012464:	440b      	add	r3, r1
 8012466:	3318      	adds	r3, #24
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d117      	bne.n	801249e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 801246e:	6839      	ldr	r1, [r7, #0]
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f000 fb0a 	bl	8012a8a <USBD_CtlError>
            break;
 8012476:	e053      	b.n	8012520 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012478:	7bbb      	ldrb	r3, [r7, #14]
 801247a:	f003 020f 	and.w	r2, r3, #15
 801247e:	6879      	ldr	r1, [r7, #4]
 8012480:	4613      	mov	r3, r2
 8012482:	009b      	lsls	r3, r3, #2
 8012484:	4413      	add	r3, r2
 8012486:	009b      	lsls	r3, r3, #2
 8012488:	440b      	add	r3, r1
 801248a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d104      	bne.n	801249e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8012494:	6839      	ldr	r1, [r7, #0]
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f000 faf7 	bl	8012a8a <USBD_CtlError>
            break;
 801249c:	e040      	b.n	8012520 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801249e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	da0b      	bge.n	80124be <USBD_StdEPReq+0x232>
 80124a6:	7bbb      	ldrb	r3, [r7, #14]
 80124a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80124ac:	4613      	mov	r3, r2
 80124ae:	009b      	lsls	r3, r3, #2
 80124b0:	4413      	add	r3, r2
 80124b2:	009b      	lsls	r3, r3, #2
 80124b4:	3310      	adds	r3, #16
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	4413      	add	r3, r2
 80124ba:	3304      	adds	r3, #4
 80124bc:	e00a      	b.n	80124d4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80124be:	7bbb      	ldrb	r3, [r7, #14]
 80124c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80124c4:	4613      	mov	r3, r2
 80124c6:	009b      	lsls	r3, r3, #2
 80124c8:	4413      	add	r3, r2
 80124ca:	009b      	lsls	r3, r3, #2
 80124cc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80124d0:	687a      	ldr	r2, [r7, #4]
 80124d2:	4413      	add	r3, r2
 80124d4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80124d6:	7bbb      	ldrb	r3, [r7, #14]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d002      	beq.n	80124e2 <USBD_StdEPReq+0x256>
 80124dc:	7bbb      	ldrb	r3, [r7, #14]
 80124de:	2b80      	cmp	r3, #128	; 0x80
 80124e0:	d103      	bne.n	80124ea <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	2200      	movs	r2, #0
 80124e6:	601a      	str	r2, [r3, #0]
 80124e8:	e00e      	b.n	8012508 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80124ea:	7bbb      	ldrb	r3, [r7, #14]
 80124ec:	4619      	mov	r1, r3
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f004 fdee 	bl	80170d0 <USBD_LL_IsStallEP>
 80124f4:	4603      	mov	r3, r0
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d003      	beq.n	8012502 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	2201      	movs	r2, #1
 80124fe:	601a      	str	r2, [r3, #0]
 8012500:	e002      	b.n	8012508 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	2200      	movs	r2, #0
 8012506:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	2202      	movs	r2, #2
 801250c:	4619      	mov	r1, r3
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f000 fb26 	bl	8012b60 <USBD_CtlSendData>
          break;
 8012514:	e004      	b.n	8012520 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8012516:	6839      	ldr	r1, [r7, #0]
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f000 fab6 	bl	8012a8a <USBD_CtlError>
        break;
 801251e:	bf00      	nop
      }
      break;
 8012520:	e004      	b.n	801252c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8012522:	6839      	ldr	r1, [r7, #0]
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f000 fab0 	bl	8012a8a <USBD_CtlError>
      break;
 801252a:	bf00      	nop
    }
    break;
 801252c:	e004      	b.n	8012538 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 801252e:	6839      	ldr	r1, [r7, #0]
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f000 faaa 	bl	8012a8a <USBD_CtlError>
    break;
 8012536:	bf00      	nop
  }

  return ret;
 8012538:	7bfb      	ldrb	r3, [r7, #15]
}
 801253a:	4618      	mov	r0, r3
 801253c:	3710      	adds	r7, #16
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
	...

08012544 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	885b      	ldrh	r3, [r3, #2]
 8012552:	0a1b      	lsrs	r3, r3, #8
 8012554:	b29b      	uxth	r3, r3
 8012556:	3b01      	subs	r3, #1
 8012558:	2b06      	cmp	r3, #6
 801255a:	f200 80c9 	bhi.w	80126f0 <USBD_GetDescriptor+0x1ac>
 801255e:	a201      	add	r2, pc, #4	; (adr r2, 8012564 <USBD_GetDescriptor+0x20>)
 8012560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012564:	08012581 	.word	0x08012581
 8012568:	08012599 	.word	0x08012599
 801256c:	080125d9 	.word	0x080125d9
 8012570:	080126f1 	.word	0x080126f1
 8012574:	080126f1 	.word	0x080126f1
 8012578:	0801269d 	.word	0x0801269d
 801257c:	080126c3 	.word	0x080126c3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	7c12      	ldrb	r2, [r2, #16]
 801258c:	f107 010a 	add.w	r1, r7, #10
 8012590:	4610      	mov	r0, r2
 8012592:	4798      	blx	r3
 8012594:	60f8      	str	r0, [r7, #12]
    break;
 8012596:	e0b0      	b.n	80126fa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	7c1b      	ldrb	r3, [r3, #16]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d10d      	bne.n	80125bc <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80125a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125a8:	f107 020a 	add.w	r2, r7, #10
 80125ac:	4610      	mov	r0, r2
 80125ae:	4798      	blx	r3
 80125b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	3301      	adds	r3, #1
 80125b6:	2202      	movs	r2, #2
 80125b8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80125ba:	e09e      	b.n	80126fa <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80125c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125c4:	f107 020a 	add.w	r2, r7, #10
 80125c8:	4610      	mov	r0, r2
 80125ca:	4798      	blx	r3
 80125cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	3301      	adds	r3, #1
 80125d2:	2202      	movs	r2, #2
 80125d4:	701a      	strb	r2, [r3, #0]
    break;
 80125d6:	e090      	b.n	80126fa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	885b      	ldrh	r3, [r3, #2]
 80125dc:	b2db      	uxtb	r3, r3
 80125de:	2b05      	cmp	r3, #5
 80125e0:	d856      	bhi.n	8012690 <USBD_GetDescriptor+0x14c>
 80125e2:	a201      	add	r2, pc, #4	; (adr r2, 80125e8 <USBD_GetDescriptor+0xa4>)
 80125e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125e8:	08012601 	.word	0x08012601
 80125ec:	08012619 	.word	0x08012619
 80125f0:	08012631 	.word	0x08012631
 80125f4:	08012649 	.word	0x08012649
 80125f8:	08012661 	.word	0x08012661
 80125fc:	08012679 	.word	0x08012679
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	687a      	ldr	r2, [r7, #4]
 801260a:	7c12      	ldrb	r2, [r2, #16]
 801260c:	f107 010a 	add.w	r1, r7, #10
 8012610:	4610      	mov	r0, r2
 8012612:	4798      	blx	r3
 8012614:	60f8      	str	r0, [r7, #12]
      break;
 8012616:	e040      	b.n	801269a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801261e:	689b      	ldr	r3, [r3, #8]
 8012620:	687a      	ldr	r2, [r7, #4]
 8012622:	7c12      	ldrb	r2, [r2, #16]
 8012624:	f107 010a 	add.w	r1, r7, #10
 8012628:	4610      	mov	r0, r2
 801262a:	4798      	blx	r3
 801262c:	60f8      	str	r0, [r7, #12]
      break;
 801262e:	e034      	b.n	801269a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8012636:	68db      	ldr	r3, [r3, #12]
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	7c12      	ldrb	r2, [r2, #16]
 801263c:	f107 010a 	add.w	r1, r7, #10
 8012640:	4610      	mov	r0, r2
 8012642:	4798      	blx	r3
 8012644:	60f8      	str	r0, [r7, #12]
      break;
 8012646:	e028      	b.n	801269a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801264e:	691b      	ldr	r3, [r3, #16]
 8012650:	687a      	ldr	r2, [r7, #4]
 8012652:	7c12      	ldrb	r2, [r2, #16]
 8012654:	f107 010a 	add.w	r1, r7, #10
 8012658:	4610      	mov	r0, r2
 801265a:	4798      	blx	r3
 801265c:	60f8      	str	r0, [r7, #12]
      break;
 801265e:	e01c      	b.n	801269a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8012666:	695b      	ldr	r3, [r3, #20]
 8012668:	687a      	ldr	r2, [r7, #4]
 801266a:	7c12      	ldrb	r2, [r2, #16]
 801266c:	f107 010a 	add.w	r1, r7, #10
 8012670:	4610      	mov	r0, r2
 8012672:	4798      	blx	r3
 8012674:	60f8      	str	r0, [r7, #12]
      break;
 8012676:	e010      	b.n	801269a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801267e:	699b      	ldr	r3, [r3, #24]
 8012680:	687a      	ldr	r2, [r7, #4]
 8012682:	7c12      	ldrb	r2, [r2, #16]
 8012684:	f107 010a 	add.w	r1, r7, #10
 8012688:	4610      	mov	r0, r2
 801268a:	4798      	blx	r3
 801268c:	60f8      	str	r0, [r7, #12]
      break;
 801268e:	e004      	b.n	801269a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8012690:	6839      	ldr	r1, [r7, #0]
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f000 f9f9 	bl	8012a8a <USBD_CtlError>
      return;
 8012698:	e04b      	b.n	8012732 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 801269a:	e02e      	b.n	80126fa <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	7c1b      	ldrb	r3, [r3, #16]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d109      	bne.n	80126b8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80126aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126ac:	f107 020a 	add.w	r2, r7, #10
 80126b0:	4610      	mov	r0, r2
 80126b2:	4798      	blx	r3
 80126b4:	60f8      	str	r0, [r7, #12]
      break;
 80126b6:	e020      	b.n	80126fa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80126b8:	6839      	ldr	r1, [r7, #0]
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f000 f9e5 	bl	8012a8a <USBD_CtlError>
      return;
 80126c0:	e037      	b.n	8012732 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	7c1b      	ldrb	r3, [r3, #16]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d10d      	bne.n	80126e6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80126d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126d2:	f107 020a 	add.w	r2, r7, #10
 80126d6:	4610      	mov	r0, r2
 80126d8:	4798      	blx	r3
 80126da:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	3301      	adds	r3, #1
 80126e0:	2207      	movs	r2, #7
 80126e2:	701a      	strb	r2, [r3, #0]
      break;
 80126e4:	e009      	b.n	80126fa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80126e6:	6839      	ldr	r1, [r7, #0]
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f000 f9ce 	bl	8012a8a <USBD_CtlError>
      return;
 80126ee:	e020      	b.n	8012732 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80126f0:	6839      	ldr	r1, [r7, #0]
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 f9c9 	bl	8012a8a <USBD_CtlError>
    return;
 80126f8:	e01b      	b.n	8012732 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80126fa:	897b      	ldrh	r3, [r7, #10]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d011      	beq.n	8012724 <USBD_GetDescriptor+0x1e0>
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	88db      	ldrh	r3, [r3, #6]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d00d      	beq.n	8012724 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	88da      	ldrh	r2, [r3, #6]
 801270c:	897b      	ldrh	r3, [r7, #10]
 801270e:	4293      	cmp	r3, r2
 8012710:	bf28      	it	cs
 8012712:	4613      	movcs	r3, r2
 8012714:	b29b      	uxth	r3, r3
 8012716:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8012718:	897b      	ldrh	r3, [r7, #10]
 801271a:	461a      	mov	r2, r3
 801271c:	68f9      	ldr	r1, [r7, #12]
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f000 fa1e 	bl	8012b60 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	88db      	ldrh	r3, [r3, #6]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d102      	bne.n	8012732 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f000 fa75 	bl	8012c1c <USBD_CtlSendStatus>
  }
}
 8012732:	3710      	adds	r7, #16
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}

08012738 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	889b      	ldrh	r3, [r3, #4]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d130      	bne.n	80127ac <USBD_SetAddress+0x74>
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	88db      	ldrh	r3, [r3, #6]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d12c      	bne.n	80127ac <USBD_SetAddress+0x74>
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	885b      	ldrh	r3, [r3, #2]
 8012756:	2b7f      	cmp	r3, #127	; 0x7f
 8012758:	d828      	bhi.n	80127ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	885b      	ldrh	r3, [r3, #2]
 801275e:	b2db      	uxtb	r3, r3
 8012760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012764:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801276c:	2b03      	cmp	r3, #3
 801276e:	d104      	bne.n	801277a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8012770:	6839      	ldr	r1, [r7, #0]
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f000 f989 	bl	8012a8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012778:	e01c      	b.n	80127b4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	7bfa      	ldrb	r2, [r7, #15]
 801277e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012782:	7bfb      	ldrb	r3, [r7, #15]
 8012784:	4619      	mov	r1, r3
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f004 fcce 	bl	8017128 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f000 fa45 	bl	8012c1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012792:	7bfb      	ldrb	r3, [r7, #15]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d004      	beq.n	80127a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	2202      	movs	r2, #2
 801279c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127a0:	e008      	b.n	80127b4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2201      	movs	r2, #1
 80127a6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127aa:	e003      	b.n	80127b4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80127ac:	6839      	ldr	r1, [r7, #0]
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f000 f96b 	bl	8012a8a <USBD_CtlError>
  }
}
 80127b4:	bf00      	nop
 80127b6:	3710      	adds	r7, #16
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	885b      	ldrh	r3, [r3, #2]
 80127ca:	b2da      	uxtb	r2, r3
 80127cc:	4b41      	ldr	r3, [pc, #260]	; (80128d4 <USBD_SetConfig+0x118>)
 80127ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80127d0:	4b40      	ldr	r3, [pc, #256]	; (80128d4 <USBD_SetConfig+0x118>)
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	2b01      	cmp	r3, #1
 80127d6:	d904      	bls.n	80127e2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80127d8:	6839      	ldr	r1, [r7, #0]
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f000 f955 	bl	8012a8a <USBD_CtlError>
 80127e0:	e075      	b.n	80128ce <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80127e8:	2b02      	cmp	r3, #2
 80127ea:	d002      	beq.n	80127f2 <USBD_SetConfig+0x36>
 80127ec:	2b03      	cmp	r3, #3
 80127ee:	d023      	beq.n	8012838 <USBD_SetConfig+0x7c>
 80127f0:	e062      	b.n	80128b8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80127f2:	4b38      	ldr	r3, [pc, #224]	; (80128d4 <USBD_SetConfig+0x118>)
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d01a      	beq.n	8012830 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80127fa:	4b36      	ldr	r3, [pc, #216]	; (80128d4 <USBD_SetConfig+0x118>)
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	461a      	mov	r2, r3
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2203      	movs	r2, #3
 8012808:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801280c:	4b31      	ldr	r3, [pc, #196]	; (80128d4 <USBD_SetConfig+0x118>)
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	4619      	mov	r1, r3
 8012812:	6878      	ldr	r0, [r7, #4]
 8012814:	f7ff fa2a 	bl	8011c6c <USBD_SetClassConfig>
 8012818:	4603      	mov	r3, r0
 801281a:	2b02      	cmp	r3, #2
 801281c:	d104      	bne.n	8012828 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 801281e:	6839      	ldr	r1, [r7, #0]
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	f000 f932 	bl	8012a8a <USBD_CtlError>
          return;
 8012826:	e052      	b.n	80128ce <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 f9f7 	bl	8012c1c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 801282e:	e04e      	b.n	80128ce <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f000 f9f3 	bl	8012c1c <USBD_CtlSendStatus>
      break;
 8012836:	e04a      	b.n	80128ce <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012838:	4b26      	ldr	r3, [pc, #152]	; (80128d4 <USBD_SetConfig+0x118>)
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d112      	bne.n	8012866 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2202      	movs	r2, #2
 8012844:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8012848:	4b22      	ldr	r3, [pc, #136]	; (80128d4 <USBD_SetConfig+0x118>)
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	461a      	mov	r2, r3
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8012852:	4b20      	ldr	r3, [pc, #128]	; (80128d4 <USBD_SetConfig+0x118>)
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	4619      	mov	r1, r3
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f7ff fa26 	bl	8011caa <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	f000 f9dc 	bl	8012c1c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8012864:	e033      	b.n	80128ce <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8012866:	4b1b      	ldr	r3, [pc, #108]	; (80128d4 <USBD_SetConfig+0x118>)
 8012868:	781b      	ldrb	r3, [r3, #0]
 801286a:	461a      	mov	r2, r3
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	429a      	cmp	r2, r3
 8012872:	d01d      	beq.n	80128b0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	685b      	ldr	r3, [r3, #4]
 8012878:	b2db      	uxtb	r3, r3
 801287a:	4619      	mov	r1, r3
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f7ff fa14 	bl	8011caa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012882:	4b14      	ldr	r3, [pc, #80]	; (80128d4 <USBD_SetConfig+0x118>)
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	461a      	mov	r2, r3
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801288c:	4b11      	ldr	r3, [pc, #68]	; (80128d4 <USBD_SetConfig+0x118>)
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	4619      	mov	r1, r3
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f7ff f9ea 	bl	8011c6c <USBD_SetClassConfig>
 8012898:	4603      	mov	r3, r0
 801289a:	2b02      	cmp	r3, #2
 801289c:	d104      	bne.n	80128a8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 801289e:	6839      	ldr	r1, [r7, #0]
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f000 f8f2 	bl	8012a8a <USBD_CtlError>
          return;
 80128a6:	e012      	b.n	80128ce <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f000 f9b7 	bl	8012c1c <USBD_CtlSendStatus>
      break;
 80128ae:	e00e      	b.n	80128ce <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f000 f9b3 	bl	8012c1c <USBD_CtlSendStatus>
      break;
 80128b6:	e00a      	b.n	80128ce <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80128b8:	6839      	ldr	r1, [r7, #0]
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f000 f8e5 	bl	8012a8a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80128c0:	4b04      	ldr	r3, [pc, #16]	; (80128d4 <USBD_SetConfig+0x118>)
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	4619      	mov	r1, r3
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f7ff f9ef 	bl	8011caa <USBD_ClrClassConfig>
      break;
 80128cc:	bf00      	nop
    }
  }
}
 80128ce:	3708      	adds	r7, #8
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}
 80128d4:	20000c04 	.word	0x20000c04

080128d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	88db      	ldrh	r3, [r3, #6]
 80128e6:	2b01      	cmp	r3, #1
 80128e8:	d004      	beq.n	80128f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80128ea:	6839      	ldr	r1, [r7, #0]
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f000 f8cc 	bl	8012a8a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80128f2:	e021      	b.n	8012938 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80128fa:	2b01      	cmp	r3, #1
 80128fc:	db17      	blt.n	801292e <USBD_GetConfig+0x56>
 80128fe:	2b02      	cmp	r3, #2
 8012900:	dd02      	ble.n	8012908 <USBD_GetConfig+0x30>
 8012902:	2b03      	cmp	r3, #3
 8012904:	d00b      	beq.n	801291e <USBD_GetConfig+0x46>
 8012906:	e012      	b.n	801292e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2200      	movs	r2, #0
 801290c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	3308      	adds	r3, #8
 8012912:	2201      	movs	r2, #1
 8012914:	4619      	mov	r1, r3
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f000 f922 	bl	8012b60 <USBD_CtlSendData>
      break;
 801291c:	e00c      	b.n	8012938 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	3304      	adds	r3, #4
 8012922:	2201      	movs	r2, #1
 8012924:	4619      	mov	r1, r3
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f000 f91a 	bl	8012b60 <USBD_CtlSendData>
      break;
 801292c:	e004      	b.n	8012938 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 801292e:	6839      	ldr	r1, [r7, #0]
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f000 f8aa 	bl	8012a8a <USBD_CtlError>
      break;
 8012936:	bf00      	nop
}
 8012938:	bf00      	nop
 801293a:	3708      	adds	r7, #8
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8012950:	3b01      	subs	r3, #1
 8012952:	2b02      	cmp	r3, #2
 8012954:	d81e      	bhi.n	8012994 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	88db      	ldrh	r3, [r3, #6]
 801295a:	2b02      	cmp	r3, #2
 801295c:	d004      	beq.n	8012968 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801295e:	6839      	ldr	r1, [r7, #0]
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f000 f892 	bl	8012a8a <USBD_CtlError>
      break;
 8012966:	e01a      	b.n	801299e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2201      	movs	r2, #1
 801296c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8012974:	2b00      	cmp	r3, #0
 8012976:	d005      	beq.n	8012984 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	68db      	ldr	r3, [r3, #12]
 801297c:	f043 0202 	orr.w	r2, r3, #2
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	330c      	adds	r3, #12
 8012988:	2202      	movs	r2, #2
 801298a:	4619      	mov	r1, r3
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f000 f8e7 	bl	8012b60 <USBD_CtlSendData>
    break;
 8012992:	e004      	b.n	801299e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8012994:	6839      	ldr	r1, [r7, #0]
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f000 f877 	bl	8012a8a <USBD_CtlError>
    break;
 801299c:	bf00      	nop
  }
}
 801299e:	bf00      	nop
 80129a0:	3708      	adds	r7, #8
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}

080129a6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80129a6:	b580      	push	{r7, lr}
 80129a8:	b082      	sub	sp, #8
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]
 80129ae:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	885b      	ldrh	r3, [r3, #2]
 80129b4:	2b01      	cmp	r3, #1
 80129b6:	d106      	bne.n	80129c6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2201      	movs	r2, #1
 80129bc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f000 f92b 	bl	8012c1c <USBD_CtlSendStatus>
  }

}
 80129c6:	bf00      	nop
 80129c8:	3708      	adds	r7, #8
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}

080129ce <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b082      	sub	sp, #8
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
 80129d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80129de:	3b01      	subs	r3, #1
 80129e0:	2b02      	cmp	r3, #2
 80129e2:	d80b      	bhi.n	80129fc <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	885b      	ldrh	r3, [r3, #2]
 80129e8:	2b01      	cmp	r3, #1
 80129ea:	d10c      	bne.n	8012a06 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2200      	movs	r2, #0
 80129f0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f000 f911 	bl	8012c1c <USBD_CtlSendStatus>
    }
    break;
 80129fa:	e004      	b.n	8012a06 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80129fc:	6839      	ldr	r1, [r7, #0]
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f000 f843 	bl	8012a8a <USBD_CtlError>
    break;
 8012a04:	e000      	b.n	8012a08 <USBD_ClrFeature+0x3a>
    break;
 8012a06:	bf00      	nop
  }
}
 8012a08:	bf00      	nop
 8012a0a:	3708      	adds	r7, #8
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}

08012a10 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012a10:	b480      	push	{r7}
 8012a12:	b083      	sub	sp, #12
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	781a      	ldrb	r2, [r3, #0]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	785a      	ldrb	r2, [r3, #1]
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	3302      	adds	r3, #2
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	b29a      	uxth	r2, r3
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	3303      	adds	r3, #3
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	021b      	lsls	r3, r3, #8
 8012a3c:	b29b      	uxth	r3, r3
 8012a3e:	4413      	add	r3, r2
 8012a40:	b29a      	uxth	r2, r3
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	3304      	adds	r3, #4
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	b29a      	uxth	r2, r3
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	3305      	adds	r3, #5
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	021b      	lsls	r3, r3, #8
 8012a58:	b29b      	uxth	r3, r3
 8012a5a:	4413      	add	r3, r2
 8012a5c:	b29a      	uxth	r2, r3
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	3306      	adds	r3, #6
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	b29a      	uxth	r2, r3
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	3307      	adds	r3, #7
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	021b      	lsls	r3, r3, #8
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	4413      	add	r3, r2
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	80da      	strh	r2, [r3, #6]

}
 8012a7e:	bf00      	nop
 8012a80:	370c      	adds	r7, #12
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr

08012a8a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8012a8a:	b580      	push	{r7, lr}
 8012a8c:	b082      	sub	sp, #8
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
 8012a92:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8012a94:	2180      	movs	r1, #128	; 0x80
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f004 fadc 	bl	8017054 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8012a9c:	2100      	movs	r1, #0
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f004 fad8 	bl	8017054 <USBD_LL_StallEP>
}
 8012aa4:	bf00      	nop
 8012aa6:	3708      	adds	r7, #8
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}

08012aac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b086      	sub	sp, #24
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	60f8      	str	r0, [r7, #12]
 8012ab4:	60b9      	str	r1, [r7, #8]
 8012ab6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d032      	beq.n	8012b28 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8012ac2:	68f8      	ldr	r0, [r7, #12]
 8012ac4:	f000 f834 	bl	8012b30 <USBD_GetLen>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	3301      	adds	r3, #1
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	005b      	lsls	r3, r3, #1
 8012ad0:	b29a      	uxth	r2, r3
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8012ad6:	7dfb      	ldrb	r3, [r7, #23]
 8012ad8:	1c5a      	adds	r2, r3, #1
 8012ada:	75fa      	strb	r2, [r7, #23]
 8012adc:	461a      	mov	r2, r3
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	4413      	add	r3, r2
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	7812      	ldrb	r2, [r2, #0]
 8012ae6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8012ae8:	7dfb      	ldrb	r3, [r7, #23]
 8012aea:	1c5a      	adds	r2, r3, #1
 8012aec:	75fa      	strb	r2, [r7, #23]
 8012aee:	461a      	mov	r2, r3
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	4413      	add	r3, r2
 8012af4:	2203      	movs	r2, #3
 8012af6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8012af8:	e012      	b.n	8012b20 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	1c5a      	adds	r2, r3, #1
 8012afe:	60fa      	str	r2, [r7, #12]
 8012b00:	7dfa      	ldrb	r2, [r7, #23]
 8012b02:	1c51      	adds	r1, r2, #1
 8012b04:	75f9      	strb	r1, [r7, #23]
 8012b06:	4611      	mov	r1, r2
 8012b08:	68ba      	ldr	r2, [r7, #8]
 8012b0a:	440a      	add	r2, r1
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8012b10:	7dfb      	ldrb	r3, [r7, #23]
 8012b12:	1c5a      	adds	r2, r3, #1
 8012b14:	75fa      	strb	r2, [r7, #23]
 8012b16:	461a      	mov	r2, r3
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	4413      	add	r3, r2
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d1e8      	bne.n	8012afa <USBD_GetString+0x4e>
    }
  }
}
 8012b28:	bf00      	nop
 8012b2a:	3718      	adds	r7, #24
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}

08012b30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b085      	sub	sp, #20
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8012b38:	2300      	movs	r3, #0
 8012b3a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8012b3c:	e005      	b.n	8012b4a <USBD_GetLen+0x1a>
    {
        len++;
 8012b3e:	7bfb      	ldrb	r3, [r7, #15]
 8012b40:	3301      	adds	r3, #1
 8012b42:	73fb      	strb	r3, [r7, #15]
        buf++;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	3301      	adds	r3, #1
 8012b48:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d1f5      	bne.n	8012b3e <USBD_GetLen+0xe>
    }

    return len;
 8012b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	3714      	adds	r7, #20
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	4613      	mov	r3, r2
 8012b6c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	2202      	movs	r2, #2
 8012b72:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8012b76:	88fa      	ldrh	r2, [r7, #6]
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8012b7c:	88fa      	ldrh	r2, [r7, #6]
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8012b82:	88fb      	ldrh	r3, [r7, #6]
 8012b84:	68ba      	ldr	r2, [r7, #8]
 8012b86:	2100      	movs	r1, #0
 8012b88:	68f8      	ldr	r0, [r7, #12]
 8012b8a:	f004 faec 	bl	8017166 <USBD_LL_Transmit>

  return USBD_OK;
 8012b8e:	2300      	movs	r3, #0
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3710      	adds	r7, #16
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}

08012b98 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b084      	sub	sp, #16
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	60f8      	str	r0, [r7, #12]
 8012ba0:	60b9      	str	r1, [r7, #8]
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8012ba6:	88fb      	ldrh	r3, [r7, #6]
 8012ba8:	68ba      	ldr	r2, [r7, #8]
 8012baa:	2100      	movs	r1, #0
 8012bac:	68f8      	ldr	r0, [r7, #12]
 8012bae:	f004 fada 	bl	8017166 <USBD_LL_Transmit>

  return USBD_OK;
 8012bb2:	2300      	movs	r3, #0
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3710      	adds	r7, #16
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b084      	sub	sp, #16
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	60f8      	str	r0, [r7, #12]
 8012bc4:	60b9      	str	r1, [r7, #8]
 8012bc6:	4613      	mov	r3, r2
 8012bc8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	2203      	movs	r2, #3
 8012bce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8012bd2:	88fa      	ldrh	r2, [r7, #6]
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8012bda:	88fa      	ldrh	r2, [r7, #6]
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8012be2:	88fb      	ldrh	r3, [r7, #6]
 8012be4:	68ba      	ldr	r2, [r7, #8]
 8012be6:	2100      	movs	r1, #0
 8012be8:	68f8      	ldr	r0, [r7, #12]
 8012bea:	f004 fadf 	bl	80171ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012bee:	2300      	movs	r3, #0
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3710      	adds	r7, #16
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}

08012bf8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b084      	sub	sp, #16
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	60f8      	str	r0, [r7, #12]
 8012c00:	60b9      	str	r1, [r7, #8]
 8012c02:	4613      	mov	r3, r2
 8012c04:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012c06:	88fb      	ldrh	r3, [r7, #6]
 8012c08:	68ba      	ldr	r2, [r7, #8]
 8012c0a:	2100      	movs	r1, #0
 8012c0c:	68f8      	ldr	r0, [r7, #12]
 8012c0e:	f004 facd 	bl	80171ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c12:	2300      	movs	r3, #0
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3710      	adds	r7, #16
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}

08012c1c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b082      	sub	sp, #8
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2204      	movs	r2, #4
 8012c28:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	2200      	movs	r2, #0
 8012c30:	2100      	movs	r1, #0
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f004 fa97 	bl	8017166 <USBD_LL_Transmit>

  return USBD_OK;
 8012c38:	2300      	movs	r3, #0
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3708      	adds	r7, #8
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}

08012c42 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8012c42:	b580      	push	{r7, lr}
 8012c44:	b082      	sub	sp, #8
 8012c46:	af00      	add	r7, sp, #0
 8012c48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2205      	movs	r2, #5
 8012c4e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8012c52:	2300      	movs	r3, #0
 8012c54:	2200      	movs	r2, #0
 8012c56:	2100      	movs	r1, #0
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f004 faa7 	bl	80171ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c5e:	2300      	movs	r3, #0
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	3708      	adds	r7, #8
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}

08012c68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	4603      	mov	r3, r0
 8012c70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012c72:	79fb      	ldrb	r3, [r7, #7]
 8012c74:	4a08      	ldr	r2, [pc, #32]	; (8012c98 <disk_status+0x30>)
 8012c76:	009b      	lsls	r3, r3, #2
 8012c78:	4413      	add	r3, r2
 8012c7a:	685b      	ldr	r3, [r3, #4]
 8012c7c:	685b      	ldr	r3, [r3, #4]
 8012c7e:	79fa      	ldrb	r2, [r7, #7]
 8012c80:	4905      	ldr	r1, [pc, #20]	; (8012c98 <disk_status+0x30>)
 8012c82:	440a      	add	r2, r1
 8012c84:	7a12      	ldrb	r2, [r2, #8]
 8012c86:	4610      	mov	r0, r2
 8012c88:	4798      	blx	r3
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3710      	adds	r7, #16
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	20000e30 	.word	0x20000e30

08012c9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b084      	sub	sp, #16
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012caa:	79fb      	ldrb	r3, [r7, #7]
 8012cac:	4a0d      	ldr	r2, [pc, #52]	; (8012ce4 <disk_initialize+0x48>)
 8012cae:	5cd3      	ldrb	r3, [r2, r3]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d111      	bne.n	8012cd8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012cb4:	79fb      	ldrb	r3, [r7, #7]
 8012cb6:	4a0b      	ldr	r2, [pc, #44]	; (8012ce4 <disk_initialize+0x48>)
 8012cb8:	2101      	movs	r1, #1
 8012cba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012cbc:	79fb      	ldrb	r3, [r7, #7]
 8012cbe:	4a09      	ldr	r2, [pc, #36]	; (8012ce4 <disk_initialize+0x48>)
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	4413      	add	r3, r2
 8012cc4:	685b      	ldr	r3, [r3, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	79fa      	ldrb	r2, [r7, #7]
 8012cca:	4906      	ldr	r1, [pc, #24]	; (8012ce4 <disk_initialize+0x48>)
 8012ccc:	440a      	add	r2, r1
 8012cce:	7a12      	ldrb	r2, [r2, #8]
 8012cd0:	4610      	mov	r0, r2
 8012cd2:	4798      	blx	r3
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	3710      	adds	r7, #16
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}
 8012ce2:	bf00      	nop
 8012ce4:	20000e30 	.word	0x20000e30

08012ce8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012ce8:	b590      	push	{r4, r7, lr}
 8012cea:	b087      	sub	sp, #28
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	60b9      	str	r1, [r7, #8]
 8012cf0:	607a      	str	r2, [r7, #4]
 8012cf2:	603b      	str	r3, [r7, #0]
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012cf8:	7bfb      	ldrb	r3, [r7, #15]
 8012cfa:	4a0a      	ldr	r2, [pc, #40]	; (8012d24 <disk_read+0x3c>)
 8012cfc:	009b      	lsls	r3, r3, #2
 8012cfe:	4413      	add	r3, r2
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	689c      	ldr	r4, [r3, #8]
 8012d04:	7bfb      	ldrb	r3, [r7, #15]
 8012d06:	4a07      	ldr	r2, [pc, #28]	; (8012d24 <disk_read+0x3c>)
 8012d08:	4413      	add	r3, r2
 8012d0a:	7a18      	ldrb	r0, [r3, #8]
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	68b9      	ldr	r1, [r7, #8]
 8012d12:	47a0      	blx	r4
 8012d14:	4603      	mov	r3, r0
 8012d16:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	371c      	adds	r7, #28
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd90      	pop	{r4, r7, pc}
 8012d22:	bf00      	nop
 8012d24:	20000e30 	.word	0x20000e30

08012d28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012d28:	b590      	push	{r4, r7, lr}
 8012d2a:	b087      	sub	sp, #28
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	60b9      	str	r1, [r7, #8]
 8012d30:	607a      	str	r2, [r7, #4]
 8012d32:	603b      	str	r3, [r7, #0]
 8012d34:	4603      	mov	r3, r0
 8012d36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012d38:	7bfb      	ldrb	r3, [r7, #15]
 8012d3a:	4a0a      	ldr	r2, [pc, #40]	; (8012d64 <disk_write+0x3c>)
 8012d3c:	009b      	lsls	r3, r3, #2
 8012d3e:	4413      	add	r3, r2
 8012d40:	685b      	ldr	r3, [r3, #4]
 8012d42:	68dc      	ldr	r4, [r3, #12]
 8012d44:	7bfb      	ldrb	r3, [r7, #15]
 8012d46:	4a07      	ldr	r2, [pc, #28]	; (8012d64 <disk_write+0x3c>)
 8012d48:	4413      	add	r3, r2
 8012d4a:	7a18      	ldrb	r0, [r3, #8]
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	687a      	ldr	r2, [r7, #4]
 8012d50:	68b9      	ldr	r1, [r7, #8]
 8012d52:	47a0      	blx	r4
 8012d54:	4603      	mov	r3, r0
 8012d56:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	371c      	adds	r7, #28
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd90      	pop	{r4, r7, pc}
 8012d62:	bf00      	nop
 8012d64:	20000e30 	.word	0x20000e30

08012d68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	4603      	mov	r3, r0
 8012d70:	603a      	str	r2, [r7, #0]
 8012d72:	71fb      	strb	r3, [r7, #7]
 8012d74:	460b      	mov	r3, r1
 8012d76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012d78:	79fb      	ldrb	r3, [r7, #7]
 8012d7a:	4a09      	ldr	r2, [pc, #36]	; (8012da0 <disk_ioctl+0x38>)
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	4413      	add	r3, r2
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	691b      	ldr	r3, [r3, #16]
 8012d84:	79fa      	ldrb	r2, [r7, #7]
 8012d86:	4906      	ldr	r1, [pc, #24]	; (8012da0 <disk_ioctl+0x38>)
 8012d88:	440a      	add	r2, r1
 8012d8a:	7a10      	ldrb	r0, [r2, #8]
 8012d8c:	79b9      	ldrb	r1, [r7, #6]
 8012d8e:	683a      	ldr	r2, [r7, #0]
 8012d90:	4798      	blx	r3
 8012d92:	4603      	mov	r3, r0
 8012d94:	73fb      	strb	r3, [r7, #15]
  return res;
 8012d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3710      	adds	r7, #16
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	20000e30 	.word	0x20000e30

08012da4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	3301      	adds	r3, #1
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012db4:	89fb      	ldrh	r3, [r7, #14]
 8012db6:	021b      	lsls	r3, r3, #8
 8012db8:	b21a      	sxth	r2, r3
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	b21b      	sxth	r3, r3
 8012dc0:	4313      	orrs	r3, r2
 8012dc2:	b21b      	sxth	r3, r3
 8012dc4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012dc6:	89fb      	ldrh	r3, [r7, #14]
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3714      	adds	r7, #20
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd2:	4770      	bx	lr

08012dd4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b085      	sub	sp, #20
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	3303      	adds	r3, #3
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	021b      	lsls	r3, r3, #8
 8012de8:	687a      	ldr	r2, [r7, #4]
 8012dea:	3202      	adds	r2, #2
 8012dec:	7812      	ldrb	r2, [r2, #0]
 8012dee:	4313      	orrs	r3, r2
 8012df0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	021b      	lsls	r3, r3, #8
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	3201      	adds	r2, #1
 8012dfa:	7812      	ldrb	r2, [r2, #0]
 8012dfc:	4313      	orrs	r3, r2
 8012dfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	021b      	lsls	r3, r3, #8
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	7812      	ldrb	r2, [r2, #0]
 8012e08:	4313      	orrs	r3, r2
 8012e0a:	60fb      	str	r3, [r7, #12]
	return rv;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3714      	adds	r7, #20
 8012e12:	46bd      	mov	sp, r7
 8012e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e18:	4770      	bx	lr

08012e1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012e1a:	b480      	push	{r7}
 8012e1c:	b083      	sub	sp, #12
 8012e1e:	af00      	add	r7, sp, #0
 8012e20:	6078      	str	r0, [r7, #4]
 8012e22:	460b      	mov	r3, r1
 8012e24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	1c5a      	adds	r2, r3, #1
 8012e2a:	607a      	str	r2, [r7, #4]
 8012e2c:	887a      	ldrh	r2, [r7, #2]
 8012e2e:	b2d2      	uxtb	r2, r2
 8012e30:	701a      	strb	r2, [r3, #0]
 8012e32:	887b      	ldrh	r3, [r7, #2]
 8012e34:	0a1b      	lsrs	r3, r3, #8
 8012e36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	1c5a      	adds	r2, r3, #1
 8012e3c:	607a      	str	r2, [r7, #4]
 8012e3e:	887a      	ldrh	r2, [r7, #2]
 8012e40:	b2d2      	uxtb	r2, r2
 8012e42:	701a      	strb	r2, [r3, #0]
}
 8012e44:	bf00      	nop
 8012e46:	370c      	adds	r7, #12
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012e50:	b480      	push	{r7}
 8012e52:	b083      	sub	sp, #12
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	1c5a      	adds	r2, r3, #1
 8012e5e:	607a      	str	r2, [r7, #4]
 8012e60:	683a      	ldr	r2, [r7, #0]
 8012e62:	b2d2      	uxtb	r2, r2
 8012e64:	701a      	strb	r2, [r3, #0]
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	0a1b      	lsrs	r3, r3, #8
 8012e6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	1c5a      	adds	r2, r3, #1
 8012e70:	607a      	str	r2, [r7, #4]
 8012e72:	683a      	ldr	r2, [r7, #0]
 8012e74:	b2d2      	uxtb	r2, r2
 8012e76:	701a      	strb	r2, [r3, #0]
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	0a1b      	lsrs	r3, r3, #8
 8012e7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	1c5a      	adds	r2, r3, #1
 8012e82:	607a      	str	r2, [r7, #4]
 8012e84:	683a      	ldr	r2, [r7, #0]
 8012e86:	b2d2      	uxtb	r2, r2
 8012e88:	701a      	strb	r2, [r3, #0]
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	0a1b      	lsrs	r3, r3, #8
 8012e8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	1c5a      	adds	r2, r3, #1
 8012e94:	607a      	str	r2, [r7, #4]
 8012e96:	683a      	ldr	r2, [r7, #0]
 8012e98:	b2d2      	uxtb	r2, r2
 8012e9a:	701a      	strb	r2, [r3, #0]
}
 8012e9c:	bf00      	nop
 8012e9e:	370c      	adds	r7, #12
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea6:	4770      	bx	lr

08012ea8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012ea8:	b480      	push	{r7}
 8012eaa:	b087      	sub	sp, #28
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	60f8      	str	r0, [r7, #12]
 8012eb0:	60b9      	str	r1, [r7, #8]
 8012eb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d00d      	beq.n	8012ede <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012ec2:	693a      	ldr	r2, [r7, #16]
 8012ec4:	1c53      	adds	r3, r2, #1
 8012ec6:	613b      	str	r3, [r7, #16]
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	1c59      	adds	r1, r3, #1
 8012ecc:	6179      	str	r1, [r7, #20]
 8012ece:	7812      	ldrb	r2, [r2, #0]
 8012ed0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	3b01      	subs	r3, #1
 8012ed6:	607b      	str	r3, [r7, #4]
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d1f1      	bne.n	8012ec2 <mem_cpy+0x1a>
	}
}
 8012ede:	bf00      	nop
 8012ee0:	371c      	adds	r7, #28
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee8:	4770      	bx	lr

08012eea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012eea:	b480      	push	{r7}
 8012eec:	b087      	sub	sp, #28
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	60f8      	str	r0, [r7, #12]
 8012ef2:	60b9      	str	r1, [r7, #8]
 8012ef4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	1c5a      	adds	r2, r3, #1
 8012efe:	617a      	str	r2, [r7, #20]
 8012f00:	68ba      	ldr	r2, [r7, #8]
 8012f02:	b2d2      	uxtb	r2, r2
 8012f04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	3b01      	subs	r3, #1
 8012f0a:	607b      	str	r3, [r7, #4]
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d1f3      	bne.n	8012efa <mem_set+0x10>
}
 8012f12:	bf00      	nop
 8012f14:	371c      	adds	r7, #28
 8012f16:	46bd      	mov	sp, r7
 8012f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1c:	4770      	bx	lr

08012f1e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012f1e:	b480      	push	{r7}
 8012f20:	b089      	sub	sp, #36	; 0x24
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	60f8      	str	r0, [r7, #12]
 8012f26:	60b9      	str	r1, [r7, #8]
 8012f28:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	61fb      	str	r3, [r7, #28]
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012f32:	2300      	movs	r3, #0
 8012f34:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012f36:	69fb      	ldr	r3, [r7, #28]
 8012f38:	1c5a      	adds	r2, r3, #1
 8012f3a:	61fa      	str	r2, [r7, #28]
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	4619      	mov	r1, r3
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	1c5a      	adds	r2, r3, #1
 8012f44:	61ba      	str	r2, [r7, #24]
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	1acb      	subs	r3, r1, r3
 8012f4a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	3b01      	subs	r3, #1
 8012f50:	607b      	str	r3, [r7, #4]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d002      	beq.n	8012f5e <mem_cmp+0x40>
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d0eb      	beq.n	8012f36 <mem_cmp+0x18>

	return r;
 8012f5e:	697b      	ldr	r3, [r7, #20]
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3724      	adds	r7, #36	; 0x24
 8012f64:	46bd      	mov	sp, r7
 8012f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6a:	4770      	bx	lr

08012f6c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012f6c:	b480      	push	{r7}
 8012f6e:	b083      	sub	sp, #12
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012f76:	e002      	b.n	8012f7e <chk_chr+0x12>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	607b      	str	r3, [r7, #4]
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	781b      	ldrb	r3, [r3, #0]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d005      	beq.n	8012f92 <chk_chr+0x26>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	461a      	mov	r2, r3
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d1f2      	bne.n	8012f78 <chk_chr+0xc>
	return *str;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	781b      	ldrb	r3, [r3, #0]
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	370c      	adds	r7, #12
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa0:	4770      	bx	lr
	...

08012fa4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012fa4:	b480      	push	{r7}
 8012fa6:	b085      	sub	sp, #20
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012fae:	2300      	movs	r3, #0
 8012fb0:	60bb      	str	r3, [r7, #8]
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	60fb      	str	r3, [r7, #12]
 8012fb6:	e029      	b.n	801300c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012fb8:	4a27      	ldr	r2, [pc, #156]	; (8013058 <chk_lock+0xb4>)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	011b      	lsls	r3, r3, #4
 8012fbe:	4413      	add	r3, r2
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d01d      	beq.n	8013002 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012fc6:	4a24      	ldr	r2, [pc, #144]	; (8013058 <chk_lock+0xb4>)
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	011b      	lsls	r3, r3, #4
 8012fcc:	4413      	add	r3, r2
 8012fce:	681a      	ldr	r2, [r3, #0]
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d116      	bne.n	8013006 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012fd8:	4a1f      	ldr	r2, [pc, #124]	; (8013058 <chk_lock+0xb4>)
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	011b      	lsls	r3, r3, #4
 8012fde:	4413      	add	r3, r2
 8012fe0:	3304      	adds	r3, #4
 8012fe2:	681a      	ldr	r2, [r3, #0]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d10c      	bne.n	8013006 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012fec:	4a1a      	ldr	r2, [pc, #104]	; (8013058 <chk_lock+0xb4>)
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	011b      	lsls	r3, r3, #4
 8012ff2:	4413      	add	r3, r2
 8012ff4:	3308      	adds	r3, #8
 8012ff6:	681a      	ldr	r2, [r3, #0]
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d102      	bne.n	8013006 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013000:	e007      	b.n	8013012 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013002:	2301      	movs	r3, #1
 8013004:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	3301      	adds	r3, #1
 801300a:	60fb      	str	r3, [r7, #12]
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2b01      	cmp	r3, #1
 8013010:	d9d2      	bls.n	8012fb8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	2b02      	cmp	r3, #2
 8013016:	d109      	bne.n	801302c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d102      	bne.n	8013024 <chk_lock+0x80>
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	2b02      	cmp	r3, #2
 8013022:	d101      	bne.n	8013028 <chk_lock+0x84>
 8013024:	2300      	movs	r3, #0
 8013026:	e010      	b.n	801304a <chk_lock+0xa6>
 8013028:	2312      	movs	r3, #18
 801302a:	e00e      	b.n	801304a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d108      	bne.n	8013044 <chk_lock+0xa0>
 8013032:	4a09      	ldr	r2, [pc, #36]	; (8013058 <chk_lock+0xb4>)
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	011b      	lsls	r3, r3, #4
 8013038:	4413      	add	r3, r2
 801303a:	330c      	adds	r3, #12
 801303c:	881b      	ldrh	r3, [r3, #0]
 801303e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013042:	d101      	bne.n	8013048 <chk_lock+0xa4>
 8013044:	2310      	movs	r3, #16
 8013046:	e000      	b.n	801304a <chk_lock+0xa6>
 8013048:	2300      	movs	r3, #0
}
 801304a:	4618      	mov	r0, r3
 801304c:	3714      	adds	r7, #20
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr
 8013056:	bf00      	nop
 8013058:	20000c10 	.word	0x20000c10

0801305c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013062:	2300      	movs	r3, #0
 8013064:	607b      	str	r3, [r7, #4]
 8013066:	e002      	b.n	801306e <enq_lock+0x12>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	3301      	adds	r3, #1
 801306c:	607b      	str	r3, [r7, #4]
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2b01      	cmp	r3, #1
 8013072:	d806      	bhi.n	8013082 <enq_lock+0x26>
 8013074:	4a09      	ldr	r2, [pc, #36]	; (801309c <enq_lock+0x40>)
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	011b      	lsls	r3, r3, #4
 801307a:	4413      	add	r3, r2
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d1f2      	bne.n	8013068 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2b02      	cmp	r3, #2
 8013086:	bf14      	ite	ne
 8013088:	2301      	movne	r3, #1
 801308a:	2300      	moveq	r3, #0
 801308c:	b2db      	uxtb	r3, r3
}
 801308e:	4618      	mov	r0, r3
 8013090:	370c      	adds	r7, #12
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop
 801309c:	20000c10 	.word	0x20000c10

080130a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80130a0:	b480      	push	{r7}
 80130a2:	b085      	sub	sp, #20
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80130aa:	2300      	movs	r3, #0
 80130ac:	60fb      	str	r3, [r7, #12]
 80130ae:	e01f      	b.n	80130f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80130b0:	4a41      	ldr	r2, [pc, #260]	; (80131b8 <inc_lock+0x118>)
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	011b      	lsls	r3, r3, #4
 80130b6:	4413      	add	r3, r2
 80130b8:	681a      	ldr	r2, [r3, #0]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	429a      	cmp	r2, r3
 80130c0:	d113      	bne.n	80130ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80130c2:	4a3d      	ldr	r2, [pc, #244]	; (80131b8 <inc_lock+0x118>)
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	011b      	lsls	r3, r3, #4
 80130c8:	4413      	add	r3, r2
 80130ca:	3304      	adds	r3, #4
 80130cc:	681a      	ldr	r2, [r3, #0]
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d109      	bne.n	80130ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80130d6:	4a38      	ldr	r2, [pc, #224]	; (80131b8 <inc_lock+0x118>)
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	011b      	lsls	r3, r3, #4
 80130dc:	4413      	add	r3, r2
 80130de:	3308      	adds	r3, #8
 80130e0:	681a      	ldr	r2, [r3, #0]
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d006      	beq.n	80130f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	3301      	adds	r3, #1
 80130ee:	60fb      	str	r3, [r7, #12]
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2b01      	cmp	r3, #1
 80130f4:	d9dc      	bls.n	80130b0 <inc_lock+0x10>
 80130f6:	e000      	b.n	80130fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80130f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	2b02      	cmp	r3, #2
 80130fe:	d132      	bne.n	8013166 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013100:	2300      	movs	r3, #0
 8013102:	60fb      	str	r3, [r7, #12]
 8013104:	e002      	b.n	801310c <inc_lock+0x6c>
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	3301      	adds	r3, #1
 801310a:	60fb      	str	r3, [r7, #12]
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	2b01      	cmp	r3, #1
 8013110:	d806      	bhi.n	8013120 <inc_lock+0x80>
 8013112:	4a29      	ldr	r2, [pc, #164]	; (80131b8 <inc_lock+0x118>)
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	011b      	lsls	r3, r3, #4
 8013118:	4413      	add	r3, r2
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d1f2      	bne.n	8013106 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	2b02      	cmp	r3, #2
 8013124:	d101      	bne.n	801312a <inc_lock+0x8a>
 8013126:	2300      	movs	r3, #0
 8013128:	e040      	b.n	80131ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681a      	ldr	r2, [r3, #0]
 801312e:	4922      	ldr	r1, [pc, #136]	; (80131b8 <inc_lock+0x118>)
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	011b      	lsls	r3, r3, #4
 8013134:	440b      	add	r3, r1
 8013136:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	689a      	ldr	r2, [r3, #8]
 801313c:	491e      	ldr	r1, [pc, #120]	; (80131b8 <inc_lock+0x118>)
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	011b      	lsls	r3, r3, #4
 8013142:	440b      	add	r3, r1
 8013144:	3304      	adds	r3, #4
 8013146:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	695a      	ldr	r2, [r3, #20]
 801314c:	491a      	ldr	r1, [pc, #104]	; (80131b8 <inc_lock+0x118>)
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	011b      	lsls	r3, r3, #4
 8013152:	440b      	add	r3, r1
 8013154:	3308      	adds	r3, #8
 8013156:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013158:	4a17      	ldr	r2, [pc, #92]	; (80131b8 <inc_lock+0x118>)
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	011b      	lsls	r3, r3, #4
 801315e:	4413      	add	r3, r2
 8013160:	330c      	adds	r3, #12
 8013162:	2200      	movs	r2, #0
 8013164:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d009      	beq.n	8013180 <inc_lock+0xe0>
 801316c:	4a12      	ldr	r2, [pc, #72]	; (80131b8 <inc_lock+0x118>)
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	011b      	lsls	r3, r3, #4
 8013172:	4413      	add	r3, r2
 8013174:	330c      	adds	r3, #12
 8013176:	881b      	ldrh	r3, [r3, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d001      	beq.n	8013180 <inc_lock+0xe0>
 801317c:	2300      	movs	r3, #0
 801317e:	e015      	b.n	80131ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d108      	bne.n	8013198 <inc_lock+0xf8>
 8013186:	4a0c      	ldr	r2, [pc, #48]	; (80131b8 <inc_lock+0x118>)
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	011b      	lsls	r3, r3, #4
 801318c:	4413      	add	r3, r2
 801318e:	330c      	adds	r3, #12
 8013190:	881b      	ldrh	r3, [r3, #0]
 8013192:	3301      	adds	r3, #1
 8013194:	b29a      	uxth	r2, r3
 8013196:	e001      	b.n	801319c <inc_lock+0xfc>
 8013198:	f44f 7280 	mov.w	r2, #256	; 0x100
 801319c:	4906      	ldr	r1, [pc, #24]	; (80131b8 <inc_lock+0x118>)
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	011b      	lsls	r3, r3, #4
 80131a2:	440b      	add	r3, r1
 80131a4:	330c      	adds	r3, #12
 80131a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	3301      	adds	r3, #1
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3714      	adds	r7, #20
 80131b0:	46bd      	mov	sp, r7
 80131b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b6:	4770      	bx	lr
 80131b8:	20000c10 	.word	0x20000c10

080131bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80131bc:	b480      	push	{r7}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	3b01      	subs	r3, #1
 80131c8:	607b      	str	r3, [r7, #4]
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2b01      	cmp	r3, #1
 80131ce:	d825      	bhi.n	801321c <dec_lock+0x60>
		n = Files[i].ctr;
 80131d0:	4a17      	ldr	r2, [pc, #92]	; (8013230 <dec_lock+0x74>)
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	011b      	lsls	r3, r3, #4
 80131d6:	4413      	add	r3, r2
 80131d8:	330c      	adds	r3, #12
 80131da:	881b      	ldrh	r3, [r3, #0]
 80131dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80131de:	89fb      	ldrh	r3, [r7, #14]
 80131e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80131e4:	d101      	bne.n	80131ea <dec_lock+0x2e>
 80131e6:	2300      	movs	r3, #0
 80131e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80131ea:	89fb      	ldrh	r3, [r7, #14]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d002      	beq.n	80131f6 <dec_lock+0x3a>
 80131f0:	89fb      	ldrh	r3, [r7, #14]
 80131f2:	3b01      	subs	r3, #1
 80131f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80131f6:	4a0e      	ldr	r2, [pc, #56]	; (8013230 <dec_lock+0x74>)
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	011b      	lsls	r3, r3, #4
 80131fc:	4413      	add	r3, r2
 80131fe:	330c      	adds	r3, #12
 8013200:	89fa      	ldrh	r2, [r7, #14]
 8013202:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013204:	89fb      	ldrh	r3, [r7, #14]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d105      	bne.n	8013216 <dec_lock+0x5a>
 801320a:	4a09      	ldr	r2, [pc, #36]	; (8013230 <dec_lock+0x74>)
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	011b      	lsls	r3, r3, #4
 8013210:	4413      	add	r3, r2
 8013212:	2200      	movs	r2, #0
 8013214:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013216:	2300      	movs	r3, #0
 8013218:	737b      	strb	r3, [r7, #13]
 801321a:	e001      	b.n	8013220 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801321c:	2302      	movs	r3, #2
 801321e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013220:	7b7b      	ldrb	r3, [r7, #13]
}
 8013222:	4618      	mov	r0, r3
 8013224:	3714      	adds	r7, #20
 8013226:	46bd      	mov	sp, r7
 8013228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322c:	4770      	bx	lr
 801322e:	bf00      	nop
 8013230:	20000c10 	.word	0x20000c10

08013234 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013234:	b480      	push	{r7}
 8013236:	b085      	sub	sp, #20
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801323c:	2300      	movs	r3, #0
 801323e:	60fb      	str	r3, [r7, #12]
 8013240:	e010      	b.n	8013264 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013242:	4a0d      	ldr	r2, [pc, #52]	; (8013278 <clear_lock+0x44>)
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	011b      	lsls	r3, r3, #4
 8013248:	4413      	add	r3, r2
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	687a      	ldr	r2, [r7, #4]
 801324e:	429a      	cmp	r2, r3
 8013250:	d105      	bne.n	801325e <clear_lock+0x2a>
 8013252:	4a09      	ldr	r2, [pc, #36]	; (8013278 <clear_lock+0x44>)
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	011b      	lsls	r3, r3, #4
 8013258:	4413      	add	r3, r2
 801325a:	2200      	movs	r2, #0
 801325c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	3301      	adds	r3, #1
 8013262:	60fb      	str	r3, [r7, #12]
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	2b01      	cmp	r3, #1
 8013268:	d9eb      	bls.n	8013242 <clear_lock+0xe>
	}
}
 801326a:	bf00      	nop
 801326c:	3714      	adds	r7, #20
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr
 8013276:	bf00      	nop
 8013278:	20000c10 	.word	0x20000c10

0801327c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b086      	sub	sp, #24
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013284:	2300      	movs	r3, #0
 8013286:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	78db      	ldrb	r3, [r3, #3]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d034      	beq.n	80132fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013294:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	7858      	ldrb	r0, [r3, #1]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80132a0:	2301      	movs	r3, #1
 80132a2:	697a      	ldr	r2, [r7, #20]
 80132a4:	f7ff fd40 	bl	8012d28 <disk_write>
 80132a8:	4603      	mov	r3, r0
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d002      	beq.n	80132b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80132ae:	2301      	movs	r3, #1
 80132b0:	73fb      	strb	r3, [r7, #15]
 80132b2:	e022      	b.n	80132fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2200      	movs	r2, #0
 80132b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132be:	697a      	ldr	r2, [r7, #20]
 80132c0:	1ad2      	subs	r2, r2, r3
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6a1b      	ldr	r3, [r3, #32]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d217      	bcs.n	80132fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	789b      	ldrb	r3, [r3, #2]
 80132ce:	613b      	str	r3, [r7, #16]
 80132d0:	e010      	b.n	80132f4 <sync_window+0x78>
					wsect += fs->fsize;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	6a1b      	ldr	r3, [r3, #32]
 80132d6:	697a      	ldr	r2, [r7, #20]
 80132d8:	4413      	add	r3, r2
 80132da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	7858      	ldrb	r0, [r3, #1]
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80132e6:	2301      	movs	r3, #1
 80132e8:	697a      	ldr	r2, [r7, #20]
 80132ea:	f7ff fd1d 	bl	8012d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	3b01      	subs	r3, #1
 80132f2:	613b      	str	r3, [r7, #16]
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d8eb      	bhi.n	80132d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80132fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80132fc:	4618      	mov	r0, r3
 80132fe:	3718      	adds	r7, #24
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}

08013304 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b084      	sub	sp, #16
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801330e:	2300      	movs	r3, #0
 8013310:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013316:	683a      	ldr	r2, [r7, #0]
 8013318:	429a      	cmp	r2, r3
 801331a:	d01b      	beq.n	8013354 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f7ff ffad 	bl	801327c <sync_window>
 8013322:	4603      	mov	r3, r0
 8013324:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013326:	7bfb      	ldrb	r3, [r7, #15]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d113      	bne.n	8013354 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	7858      	ldrb	r0, [r3, #1]
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013336:	2301      	movs	r3, #1
 8013338:	683a      	ldr	r2, [r7, #0]
 801333a:	f7ff fcd5 	bl	8012ce8 <disk_read>
 801333e:	4603      	mov	r3, r0
 8013340:	2b00      	cmp	r3, #0
 8013342:	d004      	beq.n	801334e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013344:	f04f 33ff 	mov.w	r3, #4294967295
 8013348:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801334a:	2301      	movs	r3, #1
 801334c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	683a      	ldr	r2, [r7, #0]
 8013352:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8013354:	7bfb      	ldrb	r3, [r7, #15]
}
 8013356:	4618      	mov	r0, r3
 8013358:	3710      	adds	r7, #16
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}
	...

08013360 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f7ff ff87 	bl	801327c <sync_window>
 801336e:	4603      	mov	r3, r0
 8013370:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013372:	7bfb      	ldrb	r3, [r7, #15]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d158      	bne.n	801342a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	781b      	ldrb	r3, [r3, #0]
 801337c:	2b03      	cmp	r3, #3
 801337e:	d148      	bne.n	8013412 <sync_fs+0xb2>
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	791b      	ldrb	r3, [r3, #4]
 8013384:	2b01      	cmp	r3, #1
 8013386:	d144      	bne.n	8013412 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	3338      	adds	r3, #56	; 0x38
 801338c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013390:	2100      	movs	r1, #0
 8013392:	4618      	mov	r0, r3
 8013394:	f7ff fda9 	bl	8012eea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	3338      	adds	r3, #56	; 0x38
 801339c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80133a0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7ff fd38 	bl	8012e1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	3338      	adds	r3, #56	; 0x38
 80133ae:	4921      	ldr	r1, [pc, #132]	; (8013434 <sync_fs+0xd4>)
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7ff fd4d 	bl	8012e50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	3338      	adds	r3, #56	; 0x38
 80133ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80133be:	491e      	ldr	r1, [pc, #120]	; (8013438 <sync_fs+0xd8>)
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7ff fd45 	bl	8012e50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	3338      	adds	r3, #56	; 0x38
 80133ca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	695b      	ldr	r3, [r3, #20]
 80133d2:	4619      	mov	r1, r3
 80133d4:	4610      	mov	r0, r2
 80133d6:	f7ff fd3b 	bl	8012e50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	3338      	adds	r3, #56	; 0x38
 80133de:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	691b      	ldr	r3, [r3, #16]
 80133e6:	4619      	mov	r1, r3
 80133e8:	4610      	mov	r0, r2
 80133ea:	f7ff fd31 	bl	8012e50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133f2:	1c5a      	adds	r2, r3, #1
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	7858      	ldrb	r0, [r3, #1]
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013406:	2301      	movs	r3, #1
 8013408:	f7ff fc8e 	bl	8012d28 <disk_write>
			fs->fsi_flag = 0;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2200      	movs	r2, #0
 8013410:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	785b      	ldrb	r3, [r3, #1]
 8013416:	2200      	movs	r2, #0
 8013418:	2100      	movs	r1, #0
 801341a:	4618      	mov	r0, r3
 801341c:	f7ff fca4 	bl	8012d68 <disk_ioctl>
 8013420:	4603      	mov	r3, r0
 8013422:	2b00      	cmp	r3, #0
 8013424:	d001      	beq.n	801342a <sync_fs+0xca>
 8013426:	2301      	movs	r3, #1
 8013428:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801342a:	7bfb      	ldrb	r3, [r7, #15]
}
 801342c:	4618      	mov	r0, r3
 801342e:	3710      	adds	r7, #16
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}
 8013434:	41615252 	.word	0x41615252
 8013438:	61417272 	.word	0x61417272

0801343c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801343c:	b480      	push	{r7}
 801343e:	b083      	sub	sp, #12
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	3b02      	subs	r3, #2
 801344a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	69db      	ldr	r3, [r3, #28]
 8013450:	3b02      	subs	r3, #2
 8013452:	683a      	ldr	r2, [r7, #0]
 8013454:	429a      	cmp	r2, r3
 8013456:	d301      	bcc.n	801345c <clust2sect+0x20>
 8013458:	2300      	movs	r3, #0
 801345a:	e008      	b.n	801346e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	895b      	ldrh	r3, [r3, #10]
 8013460:	461a      	mov	r2, r3
 8013462:	683b      	ldr	r3, [r7, #0]
 8013464:	fb03 f202 	mul.w	r2, r3, r2
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801346c:	4413      	add	r3, r2
}
 801346e:	4618      	mov	r0, r3
 8013470:	370c      	adds	r7, #12
 8013472:	46bd      	mov	sp, r7
 8013474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013478:	4770      	bx	lr

0801347a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801347a:	b580      	push	{r7, lr}
 801347c:	b086      	sub	sp, #24
 801347e:	af00      	add	r7, sp, #0
 8013480:	6078      	str	r0, [r7, #4]
 8013482:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	2b01      	cmp	r3, #1
 801348e:	d904      	bls.n	801349a <get_fat+0x20>
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	69db      	ldr	r3, [r3, #28]
 8013494:	683a      	ldr	r2, [r7, #0]
 8013496:	429a      	cmp	r2, r3
 8013498:	d302      	bcc.n	80134a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 801349a:	2301      	movs	r3, #1
 801349c:	617b      	str	r3, [r7, #20]
 801349e:	e08c      	b.n	80135ba <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80134a0:	f04f 33ff 	mov.w	r3, #4294967295
 80134a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	2b02      	cmp	r3, #2
 80134ac:	d045      	beq.n	801353a <get_fat+0xc0>
 80134ae:	2b03      	cmp	r3, #3
 80134b0:	d05d      	beq.n	801356e <get_fat+0xf4>
 80134b2:	2b01      	cmp	r3, #1
 80134b4:	d177      	bne.n	80135a6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	60fb      	str	r3, [r7, #12]
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	085b      	lsrs	r3, r3, #1
 80134be:	68fa      	ldr	r2, [r7, #12]
 80134c0:	4413      	add	r3, r2
 80134c2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	0a5b      	lsrs	r3, r3, #9
 80134cc:	4413      	add	r3, r2
 80134ce:	4619      	mov	r1, r3
 80134d0:	6938      	ldr	r0, [r7, #16]
 80134d2:	f7ff ff17 	bl	8013304 <move_window>
 80134d6:	4603      	mov	r3, r0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d167      	bne.n	80135ac <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	1c5a      	adds	r2, r3, #1
 80134e0:	60fa      	str	r2, [r7, #12]
 80134e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134e6:	693a      	ldr	r2, [r7, #16]
 80134e8:	4413      	add	r3, r2
 80134ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80134ee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	0a5b      	lsrs	r3, r3, #9
 80134f8:	4413      	add	r3, r2
 80134fa:	4619      	mov	r1, r3
 80134fc:	6938      	ldr	r0, [r7, #16]
 80134fe:	f7ff ff01 	bl	8013304 <move_window>
 8013502:	4603      	mov	r3, r0
 8013504:	2b00      	cmp	r3, #0
 8013506:	d153      	bne.n	80135b0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801350e:	693a      	ldr	r2, [r7, #16]
 8013510:	4413      	add	r3, r2
 8013512:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013516:	021b      	lsls	r3, r3, #8
 8013518:	461a      	mov	r2, r3
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	4313      	orrs	r3, r2
 801351e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	f003 0301 	and.w	r3, r3, #1
 8013526:	2b00      	cmp	r3, #0
 8013528:	d002      	beq.n	8013530 <get_fat+0xb6>
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	091b      	lsrs	r3, r3, #4
 801352e:	e002      	b.n	8013536 <get_fat+0xbc>
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013536:	617b      	str	r3, [r7, #20]
			break;
 8013538:	e03f      	b.n	80135ba <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801353a:	693b      	ldr	r3, [r7, #16]
 801353c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	0a1b      	lsrs	r3, r3, #8
 8013542:	4413      	add	r3, r2
 8013544:	4619      	mov	r1, r3
 8013546:	6938      	ldr	r0, [r7, #16]
 8013548:	f7ff fedc 	bl	8013304 <move_window>
 801354c:	4603      	mov	r3, r0
 801354e:	2b00      	cmp	r3, #0
 8013550:	d130      	bne.n	80135b4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013552:	693b      	ldr	r3, [r7, #16]
 8013554:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	005b      	lsls	r3, r3, #1
 801355c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013560:	4413      	add	r3, r2
 8013562:	4618      	mov	r0, r3
 8013564:	f7ff fc1e 	bl	8012da4 <ld_word>
 8013568:	4603      	mov	r3, r0
 801356a:	617b      	str	r3, [r7, #20]
			break;
 801356c:	e025      	b.n	80135ba <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	09db      	lsrs	r3, r3, #7
 8013576:	4413      	add	r3, r2
 8013578:	4619      	mov	r1, r3
 801357a:	6938      	ldr	r0, [r7, #16]
 801357c:	f7ff fec2 	bl	8013304 <move_window>
 8013580:	4603      	mov	r3, r0
 8013582:	2b00      	cmp	r3, #0
 8013584:	d118      	bne.n	80135b8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	009b      	lsls	r3, r3, #2
 8013590:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013594:	4413      	add	r3, r2
 8013596:	4618      	mov	r0, r3
 8013598:	f7ff fc1c 	bl	8012dd4 <ld_dword>
 801359c:	4603      	mov	r3, r0
 801359e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80135a2:	617b      	str	r3, [r7, #20]
			break;
 80135a4:	e009      	b.n	80135ba <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80135a6:	2301      	movs	r3, #1
 80135a8:	617b      	str	r3, [r7, #20]
 80135aa:	e006      	b.n	80135ba <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80135ac:	bf00      	nop
 80135ae:	e004      	b.n	80135ba <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80135b0:	bf00      	nop
 80135b2:	e002      	b.n	80135ba <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80135b4:	bf00      	nop
 80135b6:	e000      	b.n	80135ba <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80135b8:	bf00      	nop
		}
	}

	return val;
 80135ba:	697b      	ldr	r3, [r7, #20]
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3718      	adds	r7, #24
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80135c4:	b590      	push	{r4, r7, lr}
 80135c6:	b089      	sub	sp, #36	; 0x24
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80135d0:	2302      	movs	r3, #2
 80135d2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	2b01      	cmp	r3, #1
 80135d8:	f240 80d6 	bls.w	8013788 <put_fat+0x1c4>
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	69db      	ldr	r3, [r3, #28]
 80135e0:	68ba      	ldr	r2, [r7, #8]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	f080 80d0 	bcs.w	8013788 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	2b02      	cmp	r3, #2
 80135ee:	d073      	beq.n	80136d8 <put_fat+0x114>
 80135f0:	2b03      	cmp	r3, #3
 80135f2:	f000 8091 	beq.w	8013718 <put_fat+0x154>
 80135f6:	2b01      	cmp	r3, #1
 80135f8:	f040 80c6 	bne.w	8013788 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	61bb      	str	r3, [r7, #24]
 8013600:	69bb      	ldr	r3, [r7, #24]
 8013602:	085b      	lsrs	r3, r3, #1
 8013604:	69ba      	ldr	r2, [r7, #24]
 8013606:	4413      	add	r3, r2
 8013608:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	0a5b      	lsrs	r3, r3, #9
 8013612:	4413      	add	r3, r2
 8013614:	4619      	mov	r1, r3
 8013616:	68f8      	ldr	r0, [r7, #12]
 8013618:	f7ff fe74 	bl	8013304 <move_window>
 801361c:	4603      	mov	r3, r0
 801361e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013620:	7ffb      	ldrb	r3, [r7, #31]
 8013622:	2b00      	cmp	r3, #0
 8013624:	f040 80a9 	bne.w	801377a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801362e:	69bb      	ldr	r3, [r7, #24]
 8013630:	1c59      	adds	r1, r3, #1
 8013632:	61b9      	str	r1, [r7, #24]
 8013634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013638:	4413      	add	r3, r2
 801363a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	f003 0301 	and.w	r3, r3, #1
 8013642:	2b00      	cmp	r3, #0
 8013644:	d00d      	beq.n	8013662 <put_fat+0x9e>
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	781b      	ldrb	r3, [r3, #0]
 801364a:	b25b      	sxtb	r3, r3
 801364c:	f003 030f 	and.w	r3, r3, #15
 8013650:	b25a      	sxtb	r2, r3
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	b2db      	uxtb	r3, r3
 8013656:	011b      	lsls	r3, r3, #4
 8013658:	b25b      	sxtb	r3, r3
 801365a:	4313      	orrs	r3, r2
 801365c:	b25b      	sxtb	r3, r3
 801365e:	b2db      	uxtb	r3, r3
 8013660:	e001      	b.n	8013666 <put_fat+0xa2>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	b2db      	uxtb	r3, r3
 8013666:	697a      	ldr	r2, [r7, #20]
 8013668:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	2201      	movs	r2, #1
 801366e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013674:	69bb      	ldr	r3, [r7, #24]
 8013676:	0a5b      	lsrs	r3, r3, #9
 8013678:	4413      	add	r3, r2
 801367a:	4619      	mov	r1, r3
 801367c:	68f8      	ldr	r0, [r7, #12]
 801367e:	f7ff fe41 	bl	8013304 <move_window>
 8013682:	4603      	mov	r3, r0
 8013684:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013686:	7ffb      	ldrb	r3, [r7, #31]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d178      	bne.n	801377e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013692:	69bb      	ldr	r3, [r7, #24]
 8013694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013698:	4413      	add	r3, r2
 801369a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	f003 0301 	and.w	r3, r3, #1
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d003      	beq.n	80136ae <put_fat+0xea>
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	091b      	lsrs	r3, r3, #4
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	e00e      	b.n	80136cc <put_fat+0x108>
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	781b      	ldrb	r3, [r3, #0]
 80136b2:	b25b      	sxtb	r3, r3
 80136b4:	f023 030f 	bic.w	r3, r3, #15
 80136b8:	b25a      	sxtb	r2, r3
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	0a1b      	lsrs	r3, r3, #8
 80136be:	b25b      	sxtb	r3, r3
 80136c0:	f003 030f 	and.w	r3, r3, #15
 80136c4:	b25b      	sxtb	r3, r3
 80136c6:	4313      	orrs	r3, r2
 80136c8:	b25b      	sxtb	r3, r3
 80136ca:	b2db      	uxtb	r3, r3
 80136cc:	697a      	ldr	r2, [r7, #20]
 80136ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	2201      	movs	r2, #1
 80136d4:	70da      	strb	r2, [r3, #3]
			break;
 80136d6:	e057      	b.n	8013788 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	0a1b      	lsrs	r3, r3, #8
 80136e0:	4413      	add	r3, r2
 80136e2:	4619      	mov	r1, r3
 80136e4:	68f8      	ldr	r0, [r7, #12]
 80136e6:	f7ff fe0d 	bl	8013304 <move_window>
 80136ea:	4603      	mov	r3, r0
 80136ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80136ee:	7ffb      	ldrb	r3, [r7, #31]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d146      	bne.n	8013782 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	005b      	lsls	r3, r3, #1
 80136fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013702:	4413      	add	r3, r2
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	b292      	uxth	r2, r2
 8013708:	4611      	mov	r1, r2
 801370a:	4618      	mov	r0, r3
 801370c:	f7ff fb85 	bl	8012e1a <st_word>
			fs->wflag = 1;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	2201      	movs	r2, #1
 8013714:	70da      	strb	r2, [r3, #3]
			break;
 8013716:	e037      	b.n	8013788 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	09db      	lsrs	r3, r3, #7
 8013720:	4413      	add	r3, r2
 8013722:	4619      	mov	r1, r3
 8013724:	68f8      	ldr	r0, [r7, #12]
 8013726:	f7ff fded 	bl	8013304 <move_window>
 801372a:	4603      	mov	r3, r0
 801372c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801372e:	7ffb      	ldrb	r3, [r7, #31]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d128      	bne.n	8013786 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	009b      	lsls	r3, r3, #2
 8013744:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013748:	4413      	add	r3, r2
 801374a:	4618      	mov	r0, r3
 801374c:	f7ff fb42 	bl	8012dd4 <ld_dword>
 8013750:	4603      	mov	r3, r0
 8013752:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013756:	4323      	orrs	r3, r4
 8013758:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	009b      	lsls	r3, r3, #2
 8013764:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013768:	4413      	add	r3, r2
 801376a:	6879      	ldr	r1, [r7, #4]
 801376c:	4618      	mov	r0, r3
 801376e:	f7ff fb6f 	bl	8012e50 <st_dword>
			fs->wflag = 1;
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	2201      	movs	r2, #1
 8013776:	70da      	strb	r2, [r3, #3]
			break;
 8013778:	e006      	b.n	8013788 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801377a:	bf00      	nop
 801377c:	e004      	b.n	8013788 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801377e:	bf00      	nop
 8013780:	e002      	b.n	8013788 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013782:	bf00      	nop
 8013784:	e000      	b.n	8013788 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013786:	bf00      	nop
		}
	}
	return res;
 8013788:	7ffb      	ldrb	r3, [r7, #31]
}
 801378a:	4618      	mov	r0, r3
 801378c:	3724      	adds	r7, #36	; 0x24
 801378e:	46bd      	mov	sp, r7
 8013790:	bd90      	pop	{r4, r7, pc}

08013792 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013792:	b580      	push	{r7, lr}
 8013794:	b088      	sub	sp, #32
 8013796:	af00      	add	r7, sp, #0
 8013798:	60f8      	str	r0, [r7, #12]
 801379a:	60b9      	str	r1, [r7, #8]
 801379c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801379e:	2300      	movs	r3, #0
 80137a0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d904      	bls.n	80137b8 <remove_chain+0x26>
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	69db      	ldr	r3, [r3, #28]
 80137b2:	68ba      	ldr	r2, [r7, #8]
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d301      	bcc.n	80137bc <remove_chain+0x2a>
 80137b8:	2302      	movs	r3, #2
 80137ba:	e04b      	b.n	8013854 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d00c      	beq.n	80137dc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80137c2:	f04f 32ff 	mov.w	r2, #4294967295
 80137c6:	6879      	ldr	r1, [r7, #4]
 80137c8:	69b8      	ldr	r0, [r7, #24]
 80137ca:	f7ff fefb 	bl	80135c4 <put_fat>
 80137ce:	4603      	mov	r3, r0
 80137d0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80137d2:	7ffb      	ldrb	r3, [r7, #31]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d001      	beq.n	80137dc <remove_chain+0x4a>
 80137d8:	7ffb      	ldrb	r3, [r7, #31]
 80137da:	e03b      	b.n	8013854 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80137dc:	68b9      	ldr	r1, [r7, #8]
 80137de:	68f8      	ldr	r0, [r7, #12]
 80137e0:	f7ff fe4b 	bl	801347a <get_fat>
 80137e4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d031      	beq.n	8013850 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	2b01      	cmp	r3, #1
 80137f0:	d101      	bne.n	80137f6 <remove_chain+0x64>
 80137f2:	2302      	movs	r3, #2
 80137f4:	e02e      	b.n	8013854 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137fc:	d101      	bne.n	8013802 <remove_chain+0x70>
 80137fe:	2301      	movs	r3, #1
 8013800:	e028      	b.n	8013854 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013802:	2200      	movs	r2, #0
 8013804:	68b9      	ldr	r1, [r7, #8]
 8013806:	69b8      	ldr	r0, [r7, #24]
 8013808:	f7ff fedc 	bl	80135c4 <put_fat>
 801380c:	4603      	mov	r3, r0
 801380e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013810:	7ffb      	ldrb	r3, [r7, #31]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d001      	beq.n	801381a <remove_chain+0x88>
 8013816:	7ffb      	ldrb	r3, [r7, #31]
 8013818:	e01c      	b.n	8013854 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	695a      	ldr	r2, [r3, #20]
 801381e:	69bb      	ldr	r3, [r7, #24]
 8013820:	69db      	ldr	r3, [r3, #28]
 8013822:	3b02      	subs	r3, #2
 8013824:	429a      	cmp	r2, r3
 8013826:	d20b      	bcs.n	8013840 <remove_chain+0xae>
			fs->free_clst++;
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	695b      	ldr	r3, [r3, #20]
 801382c:	1c5a      	adds	r2, r3, #1
 801382e:	69bb      	ldr	r3, [r7, #24]
 8013830:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8013832:	69bb      	ldr	r3, [r7, #24]
 8013834:	791b      	ldrb	r3, [r3, #4]
 8013836:	f043 0301 	orr.w	r3, r3, #1
 801383a:	b2da      	uxtb	r2, r3
 801383c:	69bb      	ldr	r3, [r7, #24]
 801383e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	69db      	ldr	r3, [r3, #28]
 8013848:	68ba      	ldr	r2, [r7, #8]
 801384a:	429a      	cmp	r2, r3
 801384c:	d3c6      	bcc.n	80137dc <remove_chain+0x4a>
 801384e:	e000      	b.n	8013852 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013850:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013852:	2300      	movs	r3, #0
}
 8013854:	4618      	mov	r0, r3
 8013856:	3720      	adds	r7, #32
 8013858:	46bd      	mov	sp, r7
 801385a:	bd80      	pop	{r7, pc}

0801385c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b088      	sub	sp, #32
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d10d      	bne.n	801388e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	691b      	ldr	r3, [r3, #16]
 8013876:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013878:	69bb      	ldr	r3, [r7, #24]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d004      	beq.n	8013888 <create_chain+0x2c>
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	69db      	ldr	r3, [r3, #28]
 8013882:	69ba      	ldr	r2, [r7, #24]
 8013884:	429a      	cmp	r2, r3
 8013886:	d31b      	bcc.n	80138c0 <create_chain+0x64>
 8013888:	2301      	movs	r3, #1
 801388a:	61bb      	str	r3, [r7, #24]
 801388c:	e018      	b.n	80138c0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801388e:	6839      	ldr	r1, [r7, #0]
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f7ff fdf2 	bl	801347a <get_fat>
 8013896:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	2b01      	cmp	r3, #1
 801389c:	d801      	bhi.n	80138a2 <create_chain+0x46>
 801389e:	2301      	movs	r3, #1
 80138a0:	e070      	b.n	8013984 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138a8:	d101      	bne.n	80138ae <create_chain+0x52>
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	e06a      	b.n	8013984 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	69db      	ldr	r3, [r3, #28]
 80138b2:	68fa      	ldr	r2, [r7, #12]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d201      	bcs.n	80138bc <create_chain+0x60>
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	e063      	b.n	8013984 <create_chain+0x128>
		scl = clst;
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80138c0:	69bb      	ldr	r3, [r7, #24]
 80138c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80138c4:	69fb      	ldr	r3, [r7, #28]
 80138c6:	3301      	adds	r3, #1
 80138c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	69db      	ldr	r3, [r3, #28]
 80138ce:	69fa      	ldr	r2, [r7, #28]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d307      	bcc.n	80138e4 <create_chain+0x88>
				ncl = 2;
 80138d4:	2302      	movs	r3, #2
 80138d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80138d8:	69fa      	ldr	r2, [r7, #28]
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	429a      	cmp	r2, r3
 80138de:	d901      	bls.n	80138e4 <create_chain+0x88>
 80138e0:	2300      	movs	r3, #0
 80138e2:	e04f      	b.n	8013984 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80138e4:	69f9      	ldr	r1, [r7, #28]
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7ff fdc7 	bl	801347a <get_fat>
 80138ec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d00e      	beq.n	8013912 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2b01      	cmp	r3, #1
 80138f8:	d003      	beq.n	8013902 <create_chain+0xa6>
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013900:	d101      	bne.n	8013906 <create_chain+0xaa>
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	e03e      	b.n	8013984 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013906:	69fa      	ldr	r2, [r7, #28]
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	429a      	cmp	r2, r3
 801390c:	d1da      	bne.n	80138c4 <create_chain+0x68>
 801390e:	2300      	movs	r3, #0
 8013910:	e038      	b.n	8013984 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013912:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013914:	f04f 32ff 	mov.w	r2, #4294967295
 8013918:	69f9      	ldr	r1, [r7, #28]
 801391a:	6938      	ldr	r0, [r7, #16]
 801391c:	f7ff fe52 	bl	80135c4 <put_fat>
 8013920:	4603      	mov	r3, r0
 8013922:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013924:	7dfb      	ldrb	r3, [r7, #23]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d109      	bne.n	801393e <create_chain+0xe2>
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d006      	beq.n	801393e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013930:	69fa      	ldr	r2, [r7, #28]
 8013932:	6839      	ldr	r1, [r7, #0]
 8013934:	6938      	ldr	r0, [r7, #16]
 8013936:	f7ff fe45 	bl	80135c4 <put_fat>
 801393a:	4603      	mov	r3, r0
 801393c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801393e:	7dfb      	ldrb	r3, [r7, #23]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d116      	bne.n	8013972 <create_chain+0x116>
		fs->last_clst = ncl;
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	69fa      	ldr	r2, [r7, #28]
 8013948:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	695a      	ldr	r2, [r3, #20]
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	69db      	ldr	r3, [r3, #28]
 8013952:	3b02      	subs	r3, #2
 8013954:	429a      	cmp	r2, r3
 8013956:	d804      	bhi.n	8013962 <create_chain+0x106>
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	695b      	ldr	r3, [r3, #20]
 801395c:	1e5a      	subs	r2, r3, #1
 801395e:	693b      	ldr	r3, [r7, #16]
 8013960:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	791b      	ldrb	r3, [r3, #4]
 8013966:	f043 0301 	orr.w	r3, r3, #1
 801396a:	b2da      	uxtb	r2, r3
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	711a      	strb	r2, [r3, #4]
 8013970:	e007      	b.n	8013982 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013972:	7dfb      	ldrb	r3, [r7, #23]
 8013974:	2b01      	cmp	r3, #1
 8013976:	d102      	bne.n	801397e <create_chain+0x122>
 8013978:	f04f 33ff 	mov.w	r3, #4294967295
 801397c:	e000      	b.n	8013980 <create_chain+0x124>
 801397e:	2301      	movs	r3, #1
 8013980:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013982:	69fb      	ldr	r3, [r7, #28]
}
 8013984:	4618      	mov	r0, r3
 8013986:	3720      	adds	r7, #32
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}

0801398c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801398c:	b480      	push	{r7}
 801398e:	b087      	sub	sp, #28
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
 8013994:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139a0:	3304      	adds	r3, #4
 80139a2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	0a5b      	lsrs	r3, r3, #9
 80139a8:	68fa      	ldr	r2, [r7, #12]
 80139aa:	8952      	ldrh	r2, [r2, #10]
 80139ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80139b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80139b2:	693b      	ldr	r3, [r7, #16]
 80139b4:	1d1a      	adds	r2, r3, #4
 80139b6:	613a      	str	r2, [r7, #16]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d101      	bne.n	80139c6 <clmt_clust+0x3a>
 80139c2:	2300      	movs	r3, #0
 80139c4:	e010      	b.n	80139e8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80139c6:	697a      	ldr	r2, [r7, #20]
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	429a      	cmp	r2, r3
 80139cc:	d307      	bcc.n	80139de <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80139ce:	697a      	ldr	r2, [r7, #20]
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	1ad3      	subs	r3, r2, r3
 80139d4:	617b      	str	r3, [r7, #20]
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	3304      	adds	r3, #4
 80139da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80139dc:	e7e9      	b.n	80139b2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80139de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	681a      	ldr	r2, [r3, #0]
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	4413      	add	r3, r2
}
 80139e8:	4618      	mov	r0, r3
 80139ea:	371c      	adds	r7, #28
 80139ec:	46bd      	mov	sp, r7
 80139ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f2:	4770      	bx	lr

080139f4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b086      	sub	sp, #24
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013a0a:	d204      	bcs.n	8013a16 <dir_sdi+0x22>
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	f003 031f 	and.w	r3, r3, #31
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d001      	beq.n	8013a1a <dir_sdi+0x26>
		return FR_INT_ERR;
 8013a16:	2302      	movs	r3, #2
 8013a18:	e063      	b.n	8013ae2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	683a      	ldr	r2, [r7, #0]
 8013a1e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	689b      	ldr	r3, [r3, #8]
 8013a24:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d106      	bne.n	8013a3a <dir_sdi+0x46>
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	2b02      	cmp	r3, #2
 8013a32:	d902      	bls.n	8013a3a <dir_sdi+0x46>
		clst = fs->dirbase;
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a38:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d10c      	bne.n	8013a5a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	095b      	lsrs	r3, r3, #5
 8013a44:	693a      	ldr	r2, [r7, #16]
 8013a46:	8912      	ldrh	r2, [r2, #8]
 8013a48:	4293      	cmp	r3, r2
 8013a4a:	d301      	bcc.n	8013a50 <dir_sdi+0x5c>
 8013a4c:	2302      	movs	r3, #2
 8013a4e:	e048      	b.n	8013ae2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	61da      	str	r2, [r3, #28]
 8013a58:	e029      	b.n	8013aae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	895b      	ldrh	r3, [r3, #10]
 8013a5e:	025b      	lsls	r3, r3, #9
 8013a60:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013a62:	e019      	b.n	8013a98 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	6979      	ldr	r1, [r7, #20]
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7ff fd06 	bl	801347a <get_fat>
 8013a6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a76:	d101      	bne.n	8013a7c <dir_sdi+0x88>
 8013a78:	2301      	movs	r3, #1
 8013a7a:	e032      	b.n	8013ae2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	2b01      	cmp	r3, #1
 8013a80:	d904      	bls.n	8013a8c <dir_sdi+0x98>
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	69db      	ldr	r3, [r3, #28]
 8013a86:	697a      	ldr	r2, [r7, #20]
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	d301      	bcc.n	8013a90 <dir_sdi+0x9c>
 8013a8c:	2302      	movs	r3, #2
 8013a8e:	e028      	b.n	8013ae2 <dir_sdi+0xee>
			ofs -= csz;
 8013a90:	683a      	ldr	r2, [r7, #0]
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	1ad3      	subs	r3, r2, r3
 8013a96:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013a98:	683a      	ldr	r2, [r7, #0]
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d2e1      	bcs.n	8013a64 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013aa0:	6979      	ldr	r1, [r7, #20]
 8013aa2:	6938      	ldr	r0, [r7, #16]
 8013aa4:	f7ff fcca 	bl	801343c <clust2sect>
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	697a      	ldr	r2, [r7, #20]
 8013ab2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	69db      	ldr	r3, [r3, #28]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d101      	bne.n	8013ac0 <dir_sdi+0xcc>
 8013abc:	2302      	movs	r3, #2
 8013abe:	e010      	b.n	8013ae2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	69da      	ldr	r2, [r3, #28]
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	0a5b      	lsrs	r3, r3, #9
 8013ac8:	441a      	add	r2, r3
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ada:	441a      	add	r2, r3
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013ae0:	2300      	movs	r3, #0
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3718      	adds	r7, #24
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}

08013aea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013aea:	b580      	push	{r7, lr}
 8013aec:	b086      	sub	sp, #24
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	6078      	str	r0, [r7, #4]
 8013af2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	695b      	ldr	r3, [r3, #20]
 8013afe:	3320      	adds	r3, #32
 8013b00:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	69db      	ldr	r3, [r3, #28]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d003      	beq.n	8013b12 <dir_next+0x28>
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013b10:	d301      	bcc.n	8013b16 <dir_next+0x2c>
 8013b12:	2304      	movs	r3, #4
 8013b14:	e0aa      	b.n	8013c6c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f040 8098 	bne.w	8013c52 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	69db      	ldr	r3, [r3, #28]
 8013b26:	1c5a      	adds	r2, r3, #1
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	699b      	ldr	r3, [r3, #24]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d10b      	bne.n	8013b4c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	095b      	lsrs	r3, r3, #5
 8013b38:	68fa      	ldr	r2, [r7, #12]
 8013b3a:	8912      	ldrh	r2, [r2, #8]
 8013b3c:	4293      	cmp	r3, r2
 8013b3e:	f0c0 8088 	bcc.w	8013c52 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	2200      	movs	r2, #0
 8013b46:	61da      	str	r2, [r3, #28]
 8013b48:	2304      	movs	r3, #4
 8013b4a:	e08f      	b.n	8013c6c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	0a5b      	lsrs	r3, r3, #9
 8013b50:	68fa      	ldr	r2, [r7, #12]
 8013b52:	8952      	ldrh	r2, [r2, #10]
 8013b54:	3a01      	subs	r2, #1
 8013b56:	4013      	ands	r3, r2
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d17a      	bne.n	8013c52 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	699b      	ldr	r3, [r3, #24]
 8013b62:	4619      	mov	r1, r3
 8013b64:	4610      	mov	r0, r2
 8013b66:	f7ff fc88 	bl	801347a <get_fat>
 8013b6a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	2b01      	cmp	r3, #1
 8013b70:	d801      	bhi.n	8013b76 <dir_next+0x8c>
 8013b72:	2302      	movs	r3, #2
 8013b74:	e07a      	b.n	8013c6c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b7c:	d101      	bne.n	8013b82 <dir_next+0x98>
 8013b7e:	2301      	movs	r3, #1
 8013b80:	e074      	b.n	8013c6c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	69db      	ldr	r3, [r3, #28]
 8013b86:	697a      	ldr	r2, [r7, #20]
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d358      	bcc.n	8013c3e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d104      	bne.n	8013b9c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2200      	movs	r2, #0
 8013b96:	61da      	str	r2, [r3, #28]
 8013b98:	2304      	movs	r3, #4
 8013b9a:	e067      	b.n	8013c6c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	699b      	ldr	r3, [r3, #24]
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	4610      	mov	r0, r2
 8013ba6:	f7ff fe59 	bl	801385c <create_chain>
 8013baa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d101      	bne.n	8013bb6 <dir_next+0xcc>
 8013bb2:	2307      	movs	r3, #7
 8013bb4:	e05a      	b.n	8013c6c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	2b01      	cmp	r3, #1
 8013bba:	d101      	bne.n	8013bc0 <dir_next+0xd6>
 8013bbc:	2302      	movs	r3, #2
 8013bbe:	e055      	b.n	8013c6c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc6:	d101      	bne.n	8013bcc <dir_next+0xe2>
 8013bc8:	2301      	movs	r3, #1
 8013bca:	e04f      	b.n	8013c6c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013bcc:	68f8      	ldr	r0, [r7, #12]
 8013bce:	f7ff fb55 	bl	801327c <sync_window>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d001      	beq.n	8013bdc <dir_next+0xf2>
 8013bd8:	2301      	movs	r3, #1
 8013bda:	e047      	b.n	8013c6c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	3338      	adds	r3, #56	; 0x38
 8013be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013be4:	2100      	movs	r1, #0
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7ff f97f 	bl	8012eea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013bec:	2300      	movs	r3, #0
 8013bee:	613b      	str	r3, [r7, #16]
 8013bf0:	6979      	ldr	r1, [r7, #20]
 8013bf2:	68f8      	ldr	r0, [r7, #12]
 8013bf4:	f7ff fc22 	bl	801343c <clust2sect>
 8013bf8:	4602      	mov	r2, r0
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8013bfe:	e012      	b.n	8013c26 <dir_next+0x13c>
						fs->wflag = 1;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	2201      	movs	r2, #1
 8013c04:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013c06:	68f8      	ldr	r0, [r7, #12]
 8013c08:	f7ff fb38 	bl	801327c <sync_window>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d001      	beq.n	8013c16 <dir_next+0x12c>
 8013c12:	2301      	movs	r3, #1
 8013c14:	e02a      	b.n	8013c6c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	3301      	adds	r3, #1
 8013c1a:	613b      	str	r3, [r7, #16]
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c20:	1c5a      	adds	r2, r3, #1
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	635a      	str	r2, [r3, #52]	; 0x34
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	895b      	ldrh	r3, [r3, #10]
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	4293      	cmp	r3, r2
 8013c30:	d3e6      	bcc.n	8013c00 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	1ad2      	subs	r2, r2, r3
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	697a      	ldr	r2, [r7, #20]
 8013c42:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013c44:	6979      	ldr	r1, [r7, #20]
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f7ff fbf8 	bl	801343c <clust2sect>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	68ba      	ldr	r2, [r7, #8]
 8013c56:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c64:	441a      	add	r2, r3
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013c6a:	2300      	movs	r3, #0
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3718      	adds	r7, #24
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}

08013c74 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b086      	sub	sp, #24
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013c84:	2100      	movs	r1, #0
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f7ff feb4 	bl	80139f4 <dir_sdi>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c90:	7dfb      	ldrb	r3, [r7, #23]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d12b      	bne.n	8013cee <dir_alloc+0x7a>
		n = 0;
 8013c96:	2300      	movs	r3, #0
 8013c98:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	69db      	ldr	r3, [r3, #28]
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	68f8      	ldr	r0, [r7, #12]
 8013ca2:	f7ff fb2f 	bl	8013304 <move_window>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013caa:	7dfb      	ldrb	r3, [r7, #23]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d11d      	bne.n	8013cec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	6a1b      	ldr	r3, [r3, #32]
 8013cb4:	781b      	ldrb	r3, [r3, #0]
 8013cb6:	2be5      	cmp	r3, #229	; 0xe5
 8013cb8:	d004      	beq.n	8013cc4 <dir_alloc+0x50>
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6a1b      	ldr	r3, [r3, #32]
 8013cbe:	781b      	ldrb	r3, [r3, #0]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d107      	bne.n	8013cd4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013cc4:	693b      	ldr	r3, [r7, #16]
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	613b      	str	r3, [r7, #16]
 8013cca:	693a      	ldr	r2, [r7, #16]
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d102      	bne.n	8013cd8 <dir_alloc+0x64>
 8013cd2:	e00c      	b.n	8013cee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013cd8:	2101      	movs	r1, #1
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f7ff ff05 	bl	8013aea <dir_next>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013ce4:	7dfb      	ldrb	r3, [r7, #23]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d0d7      	beq.n	8013c9a <dir_alloc+0x26>
 8013cea:	e000      	b.n	8013cee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013cec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013cee:	7dfb      	ldrb	r3, [r7, #23]
 8013cf0:	2b04      	cmp	r3, #4
 8013cf2:	d101      	bne.n	8013cf8 <dir_alloc+0x84>
 8013cf4:	2307      	movs	r3, #7
 8013cf6:	75fb      	strb	r3, [r7, #23]
	return res;
 8013cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	3718      	adds	r7, #24
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}

08013d02 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013d02:	b580      	push	{r7, lr}
 8013d04:	b084      	sub	sp, #16
 8013d06:	af00      	add	r7, sp, #0
 8013d08:	6078      	str	r0, [r7, #4]
 8013d0a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	331a      	adds	r3, #26
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7ff f847 	bl	8012da4 <ld_word>
 8013d16:	4603      	mov	r3, r0
 8013d18:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	2b03      	cmp	r3, #3
 8013d20:	d109      	bne.n	8013d36 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	3314      	adds	r3, #20
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7ff f83c 	bl	8012da4 <ld_word>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	041b      	lsls	r3, r3, #16
 8013d30:	68fa      	ldr	r2, [r7, #12]
 8013d32:	4313      	orrs	r3, r2
 8013d34:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013d36:	68fb      	ldr	r3, [r7, #12]
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3710      	adds	r7, #16
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}

08013d40 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b084      	sub	sp, #16
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	331a      	adds	r3, #26
 8013d50:	687a      	ldr	r2, [r7, #4]
 8013d52:	b292      	uxth	r2, r2
 8013d54:	4611      	mov	r1, r2
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7ff f85f 	bl	8012e1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	2b03      	cmp	r3, #3
 8013d62:	d109      	bne.n	8013d78 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	f103 0214 	add.w	r2, r3, #20
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	0c1b      	lsrs	r3, r3, #16
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	4619      	mov	r1, r3
 8013d72:	4610      	mov	r0, r2
 8013d74:	f7ff f851 	bl	8012e1a <st_word>
	}
}
 8013d78:	bf00      	nop
 8013d7a:	3710      	adds	r7, #16
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8013d80:	b590      	push	{r4, r7, lr}
 8013d82:	b087      	sub	sp, #28
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	331a      	adds	r3, #26
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7ff f808 	bl	8012da4 <ld_word>
 8013d94:	4603      	mov	r3, r0
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d001      	beq.n	8013d9e <cmp_lfn+0x1e>
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	e059      	b.n	8013e52 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	781b      	ldrb	r3, [r3, #0]
 8013da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013da6:	1e5a      	subs	r2, r3, #1
 8013da8:	4613      	mov	r3, r2
 8013daa:	005b      	lsls	r3, r3, #1
 8013dac:	4413      	add	r3, r2
 8013dae:	009b      	lsls	r3, r3, #2
 8013db0:	4413      	add	r3, r2
 8013db2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013db4:	2301      	movs	r3, #1
 8013db6:	81fb      	strh	r3, [r7, #14]
 8013db8:	2300      	movs	r3, #0
 8013dba:	613b      	str	r3, [r7, #16]
 8013dbc:	e033      	b.n	8013e26 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8013dbe:	4a27      	ldr	r2, [pc, #156]	; (8013e5c <cmp_lfn+0xdc>)
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	4413      	add	r3, r2
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	4413      	add	r3, r2
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7fe ffe9 	bl	8012da4 <ld_word>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8013dd6:	89fb      	ldrh	r3, [r7, #14]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d01a      	beq.n	8013e12 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	2bfe      	cmp	r3, #254	; 0xfe
 8013de0:	d812      	bhi.n	8013e08 <cmp_lfn+0x88>
 8013de2:	89bb      	ldrh	r3, [r7, #12]
 8013de4:	4618      	mov	r0, r3
 8013de6:	f002 fc81 	bl	80166ec <ff_wtoupper>
 8013dea:	4603      	mov	r3, r0
 8013dec:	461c      	mov	r4, r3
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	1c5a      	adds	r2, r3, #1
 8013df2:	617a      	str	r2, [r7, #20]
 8013df4:	005b      	lsls	r3, r3, #1
 8013df6:	687a      	ldr	r2, [r7, #4]
 8013df8:	4413      	add	r3, r2
 8013dfa:	881b      	ldrh	r3, [r3, #0]
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f002 fc75 	bl	80166ec <ff_wtoupper>
 8013e02:	4603      	mov	r3, r0
 8013e04:	429c      	cmp	r4, r3
 8013e06:	d001      	beq.n	8013e0c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8013e08:	2300      	movs	r3, #0
 8013e0a:	e022      	b.n	8013e52 <cmp_lfn+0xd2>
			}
			wc = uc;
 8013e0c:	89bb      	ldrh	r3, [r7, #12]
 8013e0e:	81fb      	strh	r3, [r7, #14]
 8013e10:	e006      	b.n	8013e20 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013e12:	89bb      	ldrh	r3, [r7, #12]
 8013e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e18:	4293      	cmp	r3, r2
 8013e1a:	d001      	beq.n	8013e20 <cmp_lfn+0xa0>
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	e018      	b.n	8013e52 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	3301      	adds	r3, #1
 8013e24:	613b      	str	r3, [r7, #16]
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	2b0c      	cmp	r3, #12
 8013e2a:	d9c8      	bls.n	8013dbe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d00b      	beq.n	8013e50 <cmp_lfn+0xd0>
 8013e38:	89fb      	ldrh	r3, [r7, #14]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d008      	beq.n	8013e50 <cmp_lfn+0xd0>
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	005b      	lsls	r3, r3, #1
 8013e42:	687a      	ldr	r2, [r7, #4]
 8013e44:	4413      	add	r3, r2
 8013e46:	881b      	ldrh	r3, [r3, #0]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d001      	beq.n	8013e50 <cmp_lfn+0xd0>
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	e000      	b.n	8013e52 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8013e50:	2301      	movs	r3, #1
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	371c      	adds	r7, #28
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd90      	pop	{r4, r7, pc}
 8013e5a:	bf00      	nop
 8013e5c:	0801ba24 	.word	0x0801ba24

08013e60 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b088      	sub	sp, #32
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	60b9      	str	r1, [r7, #8]
 8013e6a:	4611      	mov	r1, r2
 8013e6c:	461a      	mov	r2, r3
 8013e6e:	460b      	mov	r3, r1
 8013e70:	71fb      	strb	r3, [r7, #7]
 8013e72:	4613      	mov	r3, r2
 8013e74:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8013e76:	68bb      	ldr	r3, [r7, #8]
 8013e78:	330d      	adds	r3, #13
 8013e7a:	79ba      	ldrb	r2, [r7, #6]
 8013e7c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	330b      	adds	r3, #11
 8013e82:	220f      	movs	r2, #15
 8013e84:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	330c      	adds	r3, #12
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	331a      	adds	r3, #26
 8013e92:	2100      	movs	r1, #0
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7fe ffc0 	bl	8012e1a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8013e9a:	79fb      	ldrb	r3, [r7, #7]
 8013e9c:	1e5a      	subs	r2, r3, #1
 8013e9e:	4613      	mov	r3, r2
 8013ea0:	005b      	lsls	r3, r3, #1
 8013ea2:	4413      	add	r3, r2
 8013ea4:	009b      	lsls	r3, r3, #2
 8013ea6:	4413      	add	r3, r2
 8013ea8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	82fb      	strh	r3, [r7, #22]
 8013eae:	2300      	movs	r3, #0
 8013eb0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013eb2:	8afb      	ldrh	r3, [r7, #22]
 8013eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013eb8:	4293      	cmp	r3, r2
 8013eba:	d007      	beq.n	8013ecc <put_lfn+0x6c>
 8013ebc:	69fb      	ldr	r3, [r7, #28]
 8013ebe:	1c5a      	adds	r2, r3, #1
 8013ec0:	61fa      	str	r2, [r7, #28]
 8013ec2:	005b      	lsls	r3, r3, #1
 8013ec4:	68fa      	ldr	r2, [r7, #12]
 8013ec6:	4413      	add	r3, r2
 8013ec8:	881b      	ldrh	r3, [r3, #0]
 8013eca:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8013ecc:	4a17      	ldr	r2, [pc, #92]	; (8013f2c <put_lfn+0xcc>)
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	4413      	add	r3, r2
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	4413      	add	r3, r2
 8013eda:	8afa      	ldrh	r2, [r7, #22]
 8013edc:	4611      	mov	r1, r2
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f7fe ff9b 	bl	8012e1a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013ee4:	8afb      	ldrh	r3, [r7, #22]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d102      	bne.n	8013ef0 <put_lfn+0x90>
 8013eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013eee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8013ef0:	69bb      	ldr	r3, [r7, #24]
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	61bb      	str	r3, [r7, #24]
 8013ef6:	69bb      	ldr	r3, [r7, #24]
 8013ef8:	2b0c      	cmp	r3, #12
 8013efa:	d9da      	bls.n	8013eb2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8013efc:	8afb      	ldrh	r3, [r7, #22]
 8013efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f02:	4293      	cmp	r3, r2
 8013f04:	d006      	beq.n	8013f14 <put_lfn+0xb4>
 8013f06:	69fb      	ldr	r3, [r7, #28]
 8013f08:	005b      	lsls	r3, r3, #1
 8013f0a:	68fa      	ldr	r2, [r7, #12]
 8013f0c:	4413      	add	r3, r2
 8013f0e:	881b      	ldrh	r3, [r3, #0]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d103      	bne.n	8013f1c <put_lfn+0xbc>
 8013f14:	79fb      	ldrb	r3, [r7, #7]
 8013f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f1a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	79fa      	ldrb	r2, [r7, #7]
 8013f20:	701a      	strb	r2, [r3, #0]
}
 8013f22:	bf00      	nop
 8013f24:	3720      	adds	r7, #32
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	0801ba24 	.word	0x0801ba24

08013f30 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b08c      	sub	sp, #48	; 0x30
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	60f8      	str	r0, [r7, #12]
 8013f38:	60b9      	str	r1, [r7, #8]
 8013f3a:	607a      	str	r2, [r7, #4]
 8013f3c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8013f3e:	220b      	movs	r2, #11
 8013f40:	68b9      	ldr	r1, [r7, #8]
 8013f42:	68f8      	ldr	r0, [r7, #12]
 8013f44:	f7fe ffb0 	bl	8012ea8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	2b05      	cmp	r3, #5
 8013f4c:	d92b      	bls.n	8013fa6 <gen_numname+0x76>
		sr = seq;
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8013f52:	e022      	b.n	8013f9a <gen_numname+0x6a>
			wc = *lfn++;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	1c9a      	adds	r2, r3, #2
 8013f58:	607a      	str	r2, [r7, #4]
 8013f5a:	881b      	ldrh	r3, [r3, #0]
 8013f5c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8013f5e:	2300      	movs	r3, #0
 8013f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f62:	e017      	b.n	8013f94 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8013f64:	69fb      	ldr	r3, [r7, #28]
 8013f66:	005a      	lsls	r2, r3, #1
 8013f68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f6a:	f003 0301 	and.w	r3, r3, #1
 8013f6e:	4413      	add	r3, r2
 8013f70:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8013f72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f74:	085b      	lsrs	r3, r3, #1
 8013f76:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8013f78:	69fb      	ldr	r3, [r7, #28]
 8013f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d005      	beq.n	8013f8e <gen_numname+0x5e>
 8013f82:	69fb      	ldr	r3, [r7, #28]
 8013f84:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8013f88:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8013f8c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8013f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f90:	3301      	adds	r3, #1
 8013f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f96:	2b0f      	cmp	r3, #15
 8013f98:	d9e4      	bls.n	8013f64 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	881b      	ldrh	r3, [r3, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d1d8      	bne.n	8013f54 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8013fa2:	69fb      	ldr	r3, [r7, #28]
 8013fa4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8013fa6:	2307      	movs	r3, #7
 8013fa8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	b2db      	uxtb	r3, r3
 8013fae:	f003 030f 	and.w	r3, r3, #15
 8013fb2:	b2db      	uxtb	r3, r3
 8013fb4:	3330      	adds	r3, #48	; 0x30
 8013fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8013fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013fbe:	2b39      	cmp	r3, #57	; 0x39
 8013fc0:	d904      	bls.n	8013fcc <gen_numname+0x9c>
 8013fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013fc6:	3307      	adds	r3, #7
 8013fc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8013fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fce:	1e5a      	subs	r2, r3, #1
 8013fd0:	62ba      	str	r2, [r7, #40]	; 0x28
 8013fd2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013fd6:	4413      	add	r3, r2
 8013fd8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013fdc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	091b      	lsrs	r3, r3, #4
 8013fe4:	603b      	str	r3, [r7, #0]
	} while (seq);
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d1de      	bne.n	8013faa <gen_numname+0x7a>
	ns[i] = '~';
 8013fec:	f107 0214 	add.w	r2, r7, #20
 8013ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff2:	4413      	add	r3, r2
 8013ff4:	227e      	movs	r2, #126	; 0x7e
 8013ff6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8013ffc:	e002      	b.n	8014004 <gen_numname+0xd4>
 8013ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014000:	3301      	adds	r3, #1
 8014002:	627b      	str	r3, [r7, #36]	; 0x24
 8014004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014008:	429a      	cmp	r2, r3
 801400a:	d205      	bcs.n	8014018 <gen_numname+0xe8>
 801400c:	68fa      	ldr	r2, [r7, #12]
 801400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014010:	4413      	add	r3, r2
 8014012:	781b      	ldrb	r3, [r3, #0]
 8014014:	2b20      	cmp	r3, #32
 8014016:	d1f2      	bne.n	8013ffe <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801401a:	2b07      	cmp	r3, #7
 801401c:	d808      	bhi.n	8014030 <gen_numname+0x100>
 801401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014020:	1c5a      	adds	r2, r3, #1
 8014022:	62ba      	str	r2, [r7, #40]	; 0x28
 8014024:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014028:	4413      	add	r3, r2
 801402a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801402e:	e000      	b.n	8014032 <gen_numname+0x102>
 8014030:	2120      	movs	r1, #32
 8014032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014034:	1c5a      	adds	r2, r3, #1
 8014036:	627a      	str	r2, [r7, #36]	; 0x24
 8014038:	68fa      	ldr	r2, [r7, #12]
 801403a:	4413      	add	r3, r2
 801403c:	460a      	mov	r2, r1
 801403e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8014040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014042:	2b07      	cmp	r3, #7
 8014044:	d9e8      	bls.n	8014018 <gen_numname+0xe8>
}
 8014046:	bf00      	nop
 8014048:	3730      	adds	r7, #48	; 0x30
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}

0801404e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801404e:	b480      	push	{r7}
 8014050:	b085      	sub	sp, #20
 8014052:	af00      	add	r7, sp, #0
 8014054:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8014056:	2300      	movs	r3, #0
 8014058:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801405a:	230b      	movs	r3, #11
 801405c:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801405e:	7bfb      	ldrb	r3, [r7, #15]
 8014060:	b2da      	uxtb	r2, r3
 8014062:	0852      	lsrs	r2, r2, #1
 8014064:	01db      	lsls	r3, r3, #7
 8014066:	4313      	orrs	r3, r2
 8014068:	b2da      	uxtb	r2, r3
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	1c59      	adds	r1, r3, #1
 801406e:	6079      	str	r1, [r7, #4]
 8014070:	781b      	ldrb	r3, [r3, #0]
 8014072:	4413      	add	r3, r2
 8014074:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	3b01      	subs	r3, #1
 801407a:	60bb      	str	r3, [r7, #8]
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d1ed      	bne.n	801405e <sum_sfn+0x10>
	return sum;
 8014082:	7bfb      	ldrb	r3, [r7, #15]
}
 8014084:	4618      	mov	r0, r3
 8014086:	3714      	adds	r7, #20
 8014088:	46bd      	mov	sp, r7
 801408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408e:	4770      	bx	lr

08014090 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b086      	sub	sp, #24
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801409e:	2100      	movs	r1, #0
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f7ff fca7 	bl	80139f4 <dir_sdi>
 80140a6:	4603      	mov	r3, r0
 80140a8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80140aa:	7dfb      	ldrb	r3, [r7, #23]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d001      	beq.n	80140b4 <dir_find+0x24>
 80140b0:	7dfb      	ldrb	r3, [r7, #23]
 80140b2:	e0a9      	b.n	8014208 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80140b4:	23ff      	movs	r3, #255	; 0xff
 80140b6:	753b      	strb	r3, [r7, #20]
 80140b8:	7d3b      	ldrb	r3, [r7, #20]
 80140ba:	757b      	strb	r3, [r7, #21]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f04f 32ff 	mov.w	r2, #4294967295
 80140c2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	69db      	ldr	r3, [r3, #28]
 80140c8:	4619      	mov	r1, r3
 80140ca:	6938      	ldr	r0, [r7, #16]
 80140cc:	f7ff f91a 	bl	8013304 <move_window>
 80140d0:	4603      	mov	r3, r0
 80140d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80140d4:	7dfb      	ldrb	r3, [r7, #23]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	f040 8090 	bne.w	80141fc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	6a1b      	ldr	r3, [r3, #32]
 80140e0:	781b      	ldrb	r3, [r3, #0]
 80140e2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80140e4:	7dbb      	ldrb	r3, [r7, #22]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d102      	bne.n	80140f0 <dir_find+0x60>
 80140ea:	2304      	movs	r3, #4
 80140ec:	75fb      	strb	r3, [r7, #23]
 80140ee:	e08a      	b.n	8014206 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6a1b      	ldr	r3, [r3, #32]
 80140f4:	330b      	adds	r3, #11
 80140f6:	781b      	ldrb	r3, [r3, #0]
 80140f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80140fc:	73fb      	strb	r3, [r7, #15]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	7bfa      	ldrb	r2, [r7, #15]
 8014102:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8014104:	7dbb      	ldrb	r3, [r7, #22]
 8014106:	2be5      	cmp	r3, #229	; 0xe5
 8014108:	d007      	beq.n	801411a <dir_find+0x8a>
 801410a:	7bfb      	ldrb	r3, [r7, #15]
 801410c:	f003 0308 	and.w	r3, r3, #8
 8014110:	2b00      	cmp	r3, #0
 8014112:	d009      	beq.n	8014128 <dir_find+0x98>
 8014114:	7bfb      	ldrb	r3, [r7, #15]
 8014116:	2b0f      	cmp	r3, #15
 8014118:	d006      	beq.n	8014128 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801411a:	23ff      	movs	r3, #255	; 0xff
 801411c:	757b      	strb	r3, [r7, #21]
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f04f 32ff 	mov.w	r2, #4294967295
 8014124:	631a      	str	r2, [r3, #48]	; 0x30
 8014126:	e05e      	b.n	80141e6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8014128:	7bfb      	ldrb	r3, [r7, #15]
 801412a:	2b0f      	cmp	r3, #15
 801412c:	d136      	bne.n	801419c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014138:	2b00      	cmp	r3, #0
 801413a:	d154      	bne.n	80141e6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801413c:	7dbb      	ldrb	r3, [r7, #22]
 801413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014142:	2b00      	cmp	r3, #0
 8014144:	d00d      	beq.n	8014162 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	6a1b      	ldr	r3, [r3, #32]
 801414a:	7b5b      	ldrb	r3, [r3, #13]
 801414c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801414e:	7dbb      	ldrb	r3, [r7, #22]
 8014150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014154:	75bb      	strb	r3, [r7, #22]
 8014156:	7dbb      	ldrb	r3, [r7, #22]
 8014158:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	695a      	ldr	r2, [r3, #20]
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014162:	7dba      	ldrb	r2, [r7, #22]
 8014164:	7d7b      	ldrb	r3, [r7, #21]
 8014166:	429a      	cmp	r2, r3
 8014168:	d115      	bne.n	8014196 <dir_find+0x106>
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6a1b      	ldr	r3, [r3, #32]
 801416e:	330d      	adds	r3, #13
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	7d3a      	ldrb	r2, [r7, #20]
 8014174:	429a      	cmp	r2, r3
 8014176:	d10e      	bne.n	8014196 <dir_find+0x106>
 8014178:	693b      	ldr	r3, [r7, #16]
 801417a:	68da      	ldr	r2, [r3, #12]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6a1b      	ldr	r3, [r3, #32]
 8014180:	4619      	mov	r1, r3
 8014182:	4610      	mov	r0, r2
 8014184:	f7ff fdfc 	bl	8013d80 <cmp_lfn>
 8014188:	4603      	mov	r3, r0
 801418a:	2b00      	cmp	r3, #0
 801418c:	d003      	beq.n	8014196 <dir_find+0x106>
 801418e:	7d7b      	ldrb	r3, [r7, #21]
 8014190:	3b01      	subs	r3, #1
 8014192:	b2db      	uxtb	r3, r3
 8014194:	e000      	b.n	8014198 <dir_find+0x108>
 8014196:	23ff      	movs	r3, #255	; 0xff
 8014198:	757b      	strb	r3, [r7, #21]
 801419a:	e024      	b.n	80141e6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801419c:	7d7b      	ldrb	r3, [r7, #21]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d109      	bne.n	80141b6 <dir_find+0x126>
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	6a1b      	ldr	r3, [r3, #32]
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7ff ff51 	bl	801404e <sum_sfn>
 80141ac:	4603      	mov	r3, r0
 80141ae:	461a      	mov	r2, r3
 80141b0:	7d3b      	ldrb	r3, [r7, #20]
 80141b2:	4293      	cmp	r3, r2
 80141b4:	d024      	beq.n	8014200 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80141bc:	f003 0301 	and.w	r3, r3, #1
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d10a      	bne.n	80141da <dir_find+0x14a>
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6a18      	ldr	r0, [r3, #32]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	3324      	adds	r3, #36	; 0x24
 80141cc:	220b      	movs	r2, #11
 80141ce:	4619      	mov	r1, r3
 80141d0:	f7fe fea5 	bl	8012f1e <mem_cmp>
 80141d4:	4603      	mov	r3, r0
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d014      	beq.n	8014204 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80141da:	23ff      	movs	r3, #255	; 0xff
 80141dc:	757b      	strb	r3, [r7, #21]
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f04f 32ff 	mov.w	r2, #4294967295
 80141e4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80141e6:	2100      	movs	r1, #0
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f7ff fc7e 	bl	8013aea <dir_next>
 80141ee:	4603      	mov	r3, r0
 80141f0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80141f2:	7dfb      	ldrb	r3, [r7, #23]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	f43f af65 	beq.w	80140c4 <dir_find+0x34>
 80141fa:	e004      	b.n	8014206 <dir_find+0x176>
		if (res != FR_OK) break;
 80141fc:	bf00      	nop
 80141fe:	e002      	b.n	8014206 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8014200:	bf00      	nop
 8014202:	e000      	b.n	8014206 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8014204:	bf00      	nop

	return res;
 8014206:	7dfb      	ldrb	r3, [r7, #23]
}
 8014208:	4618      	mov	r0, r3
 801420a:	3718      	adds	r7, #24
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b08c      	sub	sp, #48	; 0x30
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014224:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8014228:	2b00      	cmp	r3, #0
 801422a:	d001      	beq.n	8014230 <dir_register+0x20>
 801422c:	2306      	movs	r3, #6
 801422e:	e0e0      	b.n	80143f2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8014230:	2300      	movs	r3, #0
 8014232:	627b      	str	r3, [r7, #36]	; 0x24
 8014234:	e002      	b.n	801423c <dir_register+0x2c>
 8014236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014238:	3301      	adds	r3, #1
 801423a:	627b      	str	r3, [r7, #36]	; 0x24
 801423c:	69fb      	ldr	r3, [r7, #28]
 801423e:	68da      	ldr	r2, [r3, #12]
 8014240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014242:	005b      	lsls	r3, r3, #1
 8014244:	4413      	add	r3, r2
 8014246:	881b      	ldrh	r3, [r3, #0]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d1f4      	bne.n	8014236 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8014252:	f107 030c 	add.w	r3, r7, #12
 8014256:	220c      	movs	r2, #12
 8014258:	4618      	mov	r0, r3
 801425a:	f7fe fe25 	bl	8012ea8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801425e:	7dfb      	ldrb	r3, [r7, #23]
 8014260:	f003 0301 	and.w	r3, r3, #1
 8014264:	2b00      	cmp	r3, #0
 8014266:	d032      	beq.n	80142ce <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2240      	movs	r2, #64	; 0x40
 801426c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8014270:	2301      	movs	r3, #1
 8014272:	62bb      	str	r3, [r7, #40]	; 0x28
 8014274:	e016      	b.n	80142a4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801427c:	69fb      	ldr	r3, [r7, #28]
 801427e:	68da      	ldr	r2, [r3, #12]
 8014280:	f107 010c 	add.w	r1, r7, #12
 8014284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014286:	f7ff fe53 	bl	8013f30 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f7ff ff00 	bl	8014090 <dir_find>
 8014290:	4603      	mov	r3, r0
 8014292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8014296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801429a:	2b00      	cmp	r3, #0
 801429c:	d106      	bne.n	80142ac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a0:	3301      	adds	r3, #1
 80142a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80142a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a6:	2b63      	cmp	r3, #99	; 0x63
 80142a8:	d9e5      	bls.n	8014276 <dir_register+0x66>
 80142aa:	e000      	b.n	80142ae <dir_register+0x9e>
			if (res != FR_OK) break;
 80142ac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80142ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142b0:	2b64      	cmp	r3, #100	; 0x64
 80142b2:	d101      	bne.n	80142b8 <dir_register+0xa8>
 80142b4:	2307      	movs	r3, #7
 80142b6:	e09c      	b.n	80143f2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80142b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142bc:	2b04      	cmp	r3, #4
 80142be:	d002      	beq.n	80142c6 <dir_register+0xb6>
 80142c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142c4:	e095      	b.n	80143f2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80142c6:	7dfa      	ldrb	r2, [r7, #23]
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80142ce:	7dfb      	ldrb	r3, [r7, #23]
 80142d0:	f003 0302 	and.w	r3, r3, #2
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d007      	beq.n	80142e8 <dir_register+0xd8>
 80142d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142da:	330c      	adds	r3, #12
 80142dc:	4a47      	ldr	r2, [pc, #284]	; (80143fc <dir_register+0x1ec>)
 80142de:	fba2 2303 	umull	r2, r3, r2, r3
 80142e2:	089b      	lsrs	r3, r3, #2
 80142e4:	3301      	adds	r3, #1
 80142e6:	e000      	b.n	80142ea <dir_register+0xda>
 80142e8:	2301      	movs	r3, #1
 80142ea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80142ec:	6a39      	ldr	r1, [r7, #32]
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f7ff fcc0 	bl	8013c74 <dir_alloc>
 80142f4:	4603      	mov	r3, r0
 80142f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80142fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d148      	bne.n	8014394 <dir_register+0x184>
 8014302:	6a3b      	ldr	r3, [r7, #32]
 8014304:	3b01      	subs	r3, #1
 8014306:	623b      	str	r3, [r7, #32]
 8014308:	6a3b      	ldr	r3, [r7, #32]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d042      	beq.n	8014394 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	695a      	ldr	r2, [r3, #20]
 8014312:	6a3b      	ldr	r3, [r7, #32]
 8014314:	015b      	lsls	r3, r3, #5
 8014316:	1ad3      	subs	r3, r2, r3
 8014318:	4619      	mov	r1, r3
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f7ff fb6a 	bl	80139f4 <dir_sdi>
 8014320:	4603      	mov	r3, r0
 8014322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8014326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801432a:	2b00      	cmp	r3, #0
 801432c:	d132      	bne.n	8014394 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	3324      	adds	r3, #36	; 0x24
 8014332:	4618      	mov	r0, r3
 8014334:	f7ff fe8b 	bl	801404e <sum_sfn>
 8014338:	4603      	mov	r3, r0
 801433a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	69db      	ldr	r3, [r3, #28]
 8014340:	4619      	mov	r1, r3
 8014342:	69f8      	ldr	r0, [r7, #28]
 8014344:	f7fe ffde 	bl	8013304 <move_window>
 8014348:	4603      	mov	r3, r0
 801434a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801434e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014352:	2b00      	cmp	r3, #0
 8014354:	d11d      	bne.n	8014392 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8014356:	69fb      	ldr	r3, [r7, #28]
 8014358:	68d8      	ldr	r0, [r3, #12]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	6a19      	ldr	r1, [r3, #32]
 801435e:	6a3b      	ldr	r3, [r7, #32]
 8014360:	b2da      	uxtb	r2, r3
 8014362:	7efb      	ldrb	r3, [r7, #27]
 8014364:	f7ff fd7c 	bl	8013e60 <put_lfn>
				fs->wflag = 1;
 8014368:	69fb      	ldr	r3, [r7, #28]
 801436a:	2201      	movs	r2, #1
 801436c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801436e:	2100      	movs	r1, #0
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f7ff fbba 	bl	8013aea <dir_next>
 8014376:	4603      	mov	r3, r0
 8014378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801437c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014380:	2b00      	cmp	r3, #0
 8014382:	d107      	bne.n	8014394 <dir_register+0x184>
 8014384:	6a3b      	ldr	r3, [r7, #32]
 8014386:	3b01      	subs	r3, #1
 8014388:	623b      	str	r3, [r7, #32]
 801438a:	6a3b      	ldr	r3, [r7, #32]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d1d5      	bne.n	801433c <dir_register+0x12c>
 8014390:	e000      	b.n	8014394 <dir_register+0x184>
				if (res != FR_OK) break;
 8014392:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8014394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014398:	2b00      	cmp	r3, #0
 801439a:	d128      	bne.n	80143ee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	69db      	ldr	r3, [r3, #28]
 80143a0:	4619      	mov	r1, r3
 80143a2:	69f8      	ldr	r0, [r7, #28]
 80143a4:	f7fe ffae 	bl	8013304 <move_window>
 80143a8:	4603      	mov	r3, r0
 80143aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80143ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d11b      	bne.n	80143ee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6a1b      	ldr	r3, [r3, #32]
 80143ba:	2220      	movs	r2, #32
 80143bc:	2100      	movs	r1, #0
 80143be:	4618      	mov	r0, r3
 80143c0:	f7fe fd93 	bl	8012eea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6a18      	ldr	r0, [r3, #32]
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	3324      	adds	r3, #36	; 0x24
 80143cc:	220b      	movs	r2, #11
 80143ce:	4619      	mov	r1, r3
 80143d0:	f7fe fd6a 	bl	8012ea8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6a1b      	ldr	r3, [r3, #32]
 80143de:	330c      	adds	r3, #12
 80143e0:	f002 0218 	and.w	r2, r2, #24
 80143e4:	b2d2      	uxtb	r2, r2
 80143e6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80143e8:	69fb      	ldr	r3, [r7, #28]
 80143ea:	2201      	movs	r2, #1
 80143ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80143ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3730      	adds	r7, #48	; 0x30
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
 80143fa:	bf00      	nop
 80143fc:	4ec4ec4f 	.word	0x4ec4ec4f

08014400 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b08a      	sub	sp, #40	; 0x28
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
 8014408:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	613b      	str	r3, [r7, #16]
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	68db      	ldr	r3, [r3, #12]
 8014416:	60fb      	str	r3, [r7, #12]
 8014418:	2300      	movs	r3, #0
 801441a:	617b      	str	r3, [r7, #20]
 801441c:	697b      	ldr	r3, [r7, #20]
 801441e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8014420:	69bb      	ldr	r3, [r7, #24]
 8014422:	1c5a      	adds	r2, r3, #1
 8014424:	61ba      	str	r2, [r7, #24]
 8014426:	693a      	ldr	r2, [r7, #16]
 8014428:	4413      	add	r3, r2
 801442a:	781b      	ldrb	r3, [r3, #0]
 801442c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801442e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014430:	2b1f      	cmp	r3, #31
 8014432:	d940      	bls.n	80144b6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8014434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014436:	2b2f      	cmp	r3, #47	; 0x2f
 8014438:	d006      	beq.n	8014448 <create_name+0x48>
 801443a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801443c:	2b5c      	cmp	r3, #92	; 0x5c
 801443e:	d110      	bne.n	8014462 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014440:	e002      	b.n	8014448 <create_name+0x48>
 8014442:	69bb      	ldr	r3, [r7, #24]
 8014444:	3301      	adds	r3, #1
 8014446:	61bb      	str	r3, [r7, #24]
 8014448:	693a      	ldr	r2, [r7, #16]
 801444a:	69bb      	ldr	r3, [r7, #24]
 801444c:	4413      	add	r3, r2
 801444e:	781b      	ldrb	r3, [r3, #0]
 8014450:	2b2f      	cmp	r3, #47	; 0x2f
 8014452:	d0f6      	beq.n	8014442 <create_name+0x42>
 8014454:	693a      	ldr	r2, [r7, #16]
 8014456:	69bb      	ldr	r3, [r7, #24]
 8014458:	4413      	add	r3, r2
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	2b5c      	cmp	r3, #92	; 0x5c
 801445e:	d0f0      	beq.n	8014442 <create_name+0x42>
			break;
 8014460:	e02a      	b.n	80144b8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	2bfe      	cmp	r3, #254	; 0xfe
 8014466:	d901      	bls.n	801446c <create_name+0x6c>
 8014468:	2306      	movs	r3, #6
 801446a:	e1c9      	b.n	8014800 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 801446c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801446e:	b2db      	uxtb	r3, r3
 8014470:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8014472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014474:	2101      	movs	r1, #1
 8014476:	4618      	mov	r0, r3
 8014478:	f002 f8fc 	bl	8016674 <ff_convert>
 801447c:	4603      	mov	r3, r0
 801447e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8014480:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014482:	2b00      	cmp	r3, #0
 8014484:	d101      	bne.n	801448a <create_name+0x8a>
 8014486:	2306      	movs	r3, #6
 8014488:	e1ba      	b.n	8014800 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801448a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801448c:	2b7f      	cmp	r3, #127	; 0x7f
 801448e:	d809      	bhi.n	80144a4 <create_name+0xa4>
 8014490:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014492:	4619      	mov	r1, r3
 8014494:	48a5      	ldr	r0, [pc, #660]	; (801472c <create_name+0x32c>)
 8014496:	f7fe fd69 	bl	8012f6c <chk_chr>
 801449a:	4603      	mov	r3, r0
 801449c:	2b00      	cmp	r3, #0
 801449e:	d001      	beq.n	80144a4 <create_name+0xa4>
 80144a0:	2306      	movs	r3, #6
 80144a2:	e1ad      	b.n	8014800 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	1c5a      	adds	r2, r3, #1
 80144a8:	617a      	str	r2, [r7, #20]
 80144aa:	005b      	lsls	r3, r3, #1
 80144ac:	68fa      	ldr	r2, [r7, #12]
 80144ae:	4413      	add	r3, r2
 80144b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80144b2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80144b4:	e7b4      	b.n	8014420 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80144b6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80144b8:	693a      	ldr	r2, [r7, #16]
 80144ba:	69bb      	ldr	r3, [r7, #24]
 80144bc:	441a      	add	r2, r3
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80144c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80144c4:	2b1f      	cmp	r3, #31
 80144c6:	d801      	bhi.n	80144cc <create_name+0xcc>
 80144c8:	2304      	movs	r3, #4
 80144ca:	e000      	b.n	80144ce <create_name+0xce>
 80144cc:	2300      	movs	r3, #0
 80144ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	2b01      	cmp	r3, #1
 80144d6:	d109      	bne.n	80144ec <create_name+0xec>
 80144d8:	697b      	ldr	r3, [r7, #20]
 80144da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80144de:	3b01      	subs	r3, #1
 80144e0:	005b      	lsls	r3, r3, #1
 80144e2:	68fa      	ldr	r2, [r7, #12]
 80144e4:	4413      	add	r3, r2
 80144e6:	881b      	ldrh	r3, [r3, #0]
 80144e8:	2b2e      	cmp	r3, #46	; 0x2e
 80144ea:	d016      	beq.n	801451a <create_name+0x11a>
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	2b02      	cmp	r3, #2
 80144f0:	d14e      	bne.n	8014590 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80144f8:	3b01      	subs	r3, #1
 80144fa:	005b      	lsls	r3, r3, #1
 80144fc:	68fa      	ldr	r2, [r7, #12]
 80144fe:	4413      	add	r3, r2
 8014500:	881b      	ldrh	r3, [r3, #0]
 8014502:	2b2e      	cmp	r3, #46	; 0x2e
 8014504:	d144      	bne.n	8014590 <create_name+0x190>
 8014506:	697b      	ldr	r3, [r7, #20]
 8014508:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801450c:	3b02      	subs	r3, #2
 801450e:	005b      	lsls	r3, r3, #1
 8014510:	68fa      	ldr	r2, [r7, #12]
 8014512:	4413      	add	r3, r2
 8014514:	881b      	ldrh	r3, [r3, #0]
 8014516:	2b2e      	cmp	r3, #46	; 0x2e
 8014518:	d13a      	bne.n	8014590 <create_name+0x190>
		lfn[di] = 0;
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	005b      	lsls	r3, r3, #1
 801451e:	68fa      	ldr	r2, [r7, #12]
 8014520:	4413      	add	r3, r2
 8014522:	2200      	movs	r2, #0
 8014524:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8014526:	2300      	movs	r3, #0
 8014528:	623b      	str	r3, [r7, #32]
 801452a:	e00f      	b.n	801454c <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 801452c:	6a3a      	ldr	r2, [r7, #32]
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	429a      	cmp	r2, r3
 8014532:	d201      	bcs.n	8014538 <create_name+0x138>
 8014534:	212e      	movs	r1, #46	; 0x2e
 8014536:	e000      	b.n	801453a <create_name+0x13a>
 8014538:	2120      	movs	r1, #32
 801453a:	687a      	ldr	r2, [r7, #4]
 801453c:	6a3b      	ldr	r3, [r7, #32]
 801453e:	4413      	add	r3, r2
 8014540:	3324      	adds	r3, #36	; 0x24
 8014542:	460a      	mov	r2, r1
 8014544:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8014546:	6a3b      	ldr	r3, [r7, #32]
 8014548:	3301      	adds	r3, #1
 801454a:	623b      	str	r3, [r7, #32]
 801454c:	6a3b      	ldr	r3, [r7, #32]
 801454e:	2b0a      	cmp	r3, #10
 8014550:	d9ec      	bls.n	801452c <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8014552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014556:	f043 0320 	orr.w	r3, r3, #32
 801455a:	b2d9      	uxtb	r1, r3
 801455c:	687a      	ldr	r2, [r7, #4]
 801455e:	6a3b      	ldr	r3, [r7, #32]
 8014560:	4413      	add	r3, r2
 8014562:	3324      	adds	r3, #36	; 0x24
 8014564:	460a      	mov	r2, r1
 8014566:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8014568:	2300      	movs	r3, #0
 801456a:	e149      	b.n	8014800 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014572:	3b01      	subs	r3, #1
 8014574:	005b      	lsls	r3, r3, #1
 8014576:	68fa      	ldr	r2, [r7, #12]
 8014578:	4413      	add	r3, r2
 801457a:	881b      	ldrh	r3, [r3, #0]
 801457c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801457e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014580:	2b20      	cmp	r3, #32
 8014582:	d002      	beq.n	801458a <create_name+0x18a>
 8014584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014586:	2b2e      	cmp	r3, #46	; 0x2e
 8014588:	d106      	bne.n	8014598 <create_name+0x198>
		di--;
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	3b01      	subs	r3, #1
 801458e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d1ea      	bne.n	801456c <create_name+0x16c>
 8014596:	e000      	b.n	801459a <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 8014598:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	005b      	lsls	r3, r3, #1
 801459e:	68fa      	ldr	r2, [r7, #12]
 80145a0:	4413      	add	r3, r2
 80145a2:	2200      	movs	r2, #0
 80145a4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d101      	bne.n	80145b0 <create_name+0x1b0>
 80145ac:	2306      	movs	r3, #6
 80145ae:	e127      	b.n	8014800 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	3324      	adds	r3, #36	; 0x24
 80145b4:	220b      	movs	r2, #11
 80145b6:	2120      	movs	r1, #32
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7fe fc96 	bl	8012eea <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80145be:	2300      	movs	r3, #0
 80145c0:	61bb      	str	r3, [r7, #24]
 80145c2:	e002      	b.n	80145ca <create_name+0x1ca>
 80145c4:	69bb      	ldr	r3, [r7, #24]
 80145c6:	3301      	adds	r3, #1
 80145c8:	61bb      	str	r3, [r7, #24]
 80145ca:	69bb      	ldr	r3, [r7, #24]
 80145cc:	005b      	lsls	r3, r3, #1
 80145ce:	68fa      	ldr	r2, [r7, #12]
 80145d0:	4413      	add	r3, r2
 80145d2:	881b      	ldrh	r3, [r3, #0]
 80145d4:	2b20      	cmp	r3, #32
 80145d6:	d0f5      	beq.n	80145c4 <create_name+0x1c4>
 80145d8:	69bb      	ldr	r3, [r7, #24]
 80145da:	005b      	lsls	r3, r3, #1
 80145dc:	68fa      	ldr	r2, [r7, #12]
 80145de:	4413      	add	r3, r2
 80145e0:	881b      	ldrh	r3, [r3, #0]
 80145e2:	2b2e      	cmp	r3, #46	; 0x2e
 80145e4:	d0ee      	beq.n	80145c4 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 80145e6:	69bb      	ldr	r3, [r7, #24]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d009      	beq.n	8014600 <create_name+0x200>
 80145ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145f0:	f043 0303 	orr.w	r3, r3, #3
 80145f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80145f8:	e002      	b.n	8014600 <create_name+0x200>
 80145fa:	697b      	ldr	r3, [r7, #20]
 80145fc:	3b01      	subs	r3, #1
 80145fe:	617b      	str	r3, [r7, #20]
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d009      	beq.n	801461a <create_name+0x21a>
 8014606:	697b      	ldr	r3, [r7, #20]
 8014608:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801460c:	3b01      	subs	r3, #1
 801460e:	005b      	lsls	r3, r3, #1
 8014610:	68fa      	ldr	r2, [r7, #12]
 8014612:	4413      	add	r3, r2
 8014614:	881b      	ldrh	r3, [r3, #0]
 8014616:	2b2e      	cmp	r3, #46	; 0x2e
 8014618:	d1ef      	bne.n	80145fa <create_name+0x1fa>

	i = b = 0; ni = 8;
 801461a:	2300      	movs	r3, #0
 801461c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014620:	2300      	movs	r3, #0
 8014622:	623b      	str	r3, [r7, #32]
 8014624:	2308      	movs	r3, #8
 8014626:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8014628:	69bb      	ldr	r3, [r7, #24]
 801462a:	1c5a      	adds	r2, r3, #1
 801462c:	61ba      	str	r2, [r7, #24]
 801462e:	005b      	lsls	r3, r3, #1
 8014630:	68fa      	ldr	r2, [r7, #12]
 8014632:	4413      	add	r3, r2
 8014634:	881b      	ldrh	r3, [r3, #0]
 8014636:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8014638:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801463a:	2b00      	cmp	r3, #0
 801463c:	f000 8096 	beq.w	801476c <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8014640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014642:	2b20      	cmp	r3, #32
 8014644:	d006      	beq.n	8014654 <create_name+0x254>
 8014646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014648:	2b2e      	cmp	r3, #46	; 0x2e
 801464a:	d10a      	bne.n	8014662 <create_name+0x262>
 801464c:	69ba      	ldr	r2, [r7, #24]
 801464e:	697b      	ldr	r3, [r7, #20]
 8014650:	429a      	cmp	r2, r3
 8014652:	d006      	beq.n	8014662 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 8014654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014658:	f043 0303 	orr.w	r3, r3, #3
 801465c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014660:	e083      	b.n	801476a <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8014662:	6a3a      	ldr	r2, [r7, #32]
 8014664:	69fb      	ldr	r3, [r7, #28]
 8014666:	429a      	cmp	r2, r3
 8014668:	d203      	bcs.n	8014672 <create_name+0x272>
 801466a:	69ba      	ldr	r2, [r7, #24]
 801466c:	697b      	ldr	r3, [r7, #20]
 801466e:	429a      	cmp	r2, r3
 8014670:	d123      	bne.n	80146ba <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 8014672:	69fb      	ldr	r3, [r7, #28]
 8014674:	2b0b      	cmp	r3, #11
 8014676:	d106      	bne.n	8014686 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 8014678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801467c:	f043 0303 	orr.w	r3, r3, #3
 8014680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014684:	e075      	b.n	8014772 <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8014686:	69ba      	ldr	r2, [r7, #24]
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	429a      	cmp	r2, r3
 801468c:	d005      	beq.n	801469a <create_name+0x29a>
 801468e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014692:	f043 0303 	orr.w	r3, r3, #3
 8014696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801469a:	69ba      	ldr	r2, [r7, #24]
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d866      	bhi.n	8014770 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80146a2:	697b      	ldr	r3, [r7, #20]
 80146a4:	61bb      	str	r3, [r7, #24]
 80146a6:	2308      	movs	r3, #8
 80146a8:	623b      	str	r3, [r7, #32]
 80146aa:	230b      	movs	r3, #11
 80146ac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80146ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80146b2:	009b      	lsls	r3, r3, #2
 80146b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80146b8:	e057      	b.n	801476a <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80146ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146bc:	2b7f      	cmp	r3, #127	; 0x7f
 80146be:	d914      	bls.n	80146ea <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80146c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146c2:	2100      	movs	r1, #0
 80146c4:	4618      	mov	r0, r3
 80146c6:	f001 ffd5 	bl	8016674 <ff_convert>
 80146ca:	4603      	mov	r3, r0
 80146cc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80146ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d004      	beq.n	80146de <create_name+0x2de>
 80146d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146d6:	3b80      	subs	r3, #128	; 0x80
 80146d8:	4a15      	ldr	r2, [pc, #84]	; (8014730 <create_name+0x330>)
 80146da:	5cd3      	ldrb	r3, [r2, r3]
 80146dc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80146de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80146e2:	f043 0302 	orr.w	r3, r3, #2
 80146e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80146ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d007      	beq.n	8014700 <create_name+0x300>
 80146f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146f2:	4619      	mov	r1, r3
 80146f4:	480f      	ldr	r0, [pc, #60]	; (8014734 <create_name+0x334>)
 80146f6:	f7fe fc39 	bl	8012f6c <chk_chr>
 80146fa:	4603      	mov	r3, r0
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d008      	beq.n	8014712 <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8014700:	235f      	movs	r3, #95	; 0x5f
 8014702:	84bb      	strh	r3, [r7, #36]	; 0x24
 8014704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014708:	f043 0303 	orr.w	r3, r3, #3
 801470c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014710:	e021      	b.n	8014756 <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8014712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014714:	2b40      	cmp	r3, #64	; 0x40
 8014716:	d90f      	bls.n	8014738 <create_name+0x338>
 8014718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801471a:	2b5a      	cmp	r3, #90	; 0x5a
 801471c:	d80c      	bhi.n	8014738 <create_name+0x338>
					b |= 2;
 801471e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014722:	f043 0302 	orr.w	r3, r3, #2
 8014726:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801472a:	e014      	b.n	8014756 <create_name+0x356>
 801472c:	08017cd4 	.word	0x08017cd4
 8014730:	0801b9a4 	.word	0x0801b9a4
 8014734:	08017ce0 	.word	0x08017ce0
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8014738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801473a:	2b60      	cmp	r3, #96	; 0x60
 801473c:	d90b      	bls.n	8014756 <create_name+0x356>
 801473e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014740:	2b7a      	cmp	r3, #122	; 0x7a
 8014742:	d808      	bhi.n	8014756 <create_name+0x356>
						b |= 1; w -= 0x20;
 8014744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014748:	f043 0301 	orr.w	r3, r3, #1
 801474c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014752:	3b20      	subs	r3, #32
 8014754:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8014756:	6a3b      	ldr	r3, [r7, #32]
 8014758:	1c5a      	adds	r2, r3, #1
 801475a:	623a      	str	r2, [r7, #32]
 801475c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801475e:	b2d1      	uxtb	r1, r2
 8014760:	687a      	ldr	r2, [r7, #4]
 8014762:	4413      	add	r3, r2
 8014764:	460a      	mov	r2, r1
 8014766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801476a:	e75d      	b.n	8014628 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 801476c:	bf00      	nop
 801476e:	e000      	b.n	8014772 <create_name+0x372>
			if (si > di) break;			/* No extension */
 8014770:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014778:	2be5      	cmp	r3, #229	; 0xe5
 801477a:	d103      	bne.n	8014784 <create_name+0x384>
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2205      	movs	r2, #5
 8014780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8014784:	69fb      	ldr	r3, [r7, #28]
 8014786:	2b08      	cmp	r3, #8
 8014788:	d104      	bne.n	8014794 <create_name+0x394>
 801478a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801478e:	009b      	lsls	r3, r3, #2
 8014790:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8014794:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014798:	f003 030c 	and.w	r3, r3, #12
 801479c:	2b0c      	cmp	r3, #12
 801479e:	d005      	beq.n	80147ac <create_name+0x3ac>
 80147a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80147a4:	f003 0303 	and.w	r3, r3, #3
 80147a8:	2b03      	cmp	r3, #3
 80147aa:	d105      	bne.n	80147b8 <create_name+0x3b8>
 80147ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147b0:	f043 0302 	orr.w	r3, r3, #2
 80147b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80147b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147bc:	f003 0302 	and.w	r3, r3, #2
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d117      	bne.n	80147f4 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80147c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80147c8:	f003 0303 	and.w	r3, r3, #3
 80147cc:	2b01      	cmp	r3, #1
 80147ce:	d105      	bne.n	80147dc <create_name+0x3dc>
 80147d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147d4:	f043 0310 	orr.w	r3, r3, #16
 80147d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80147dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80147e0:	f003 030c 	and.w	r3, r3, #12
 80147e4:	2b04      	cmp	r3, #4
 80147e6:	d105      	bne.n	80147f4 <create_name+0x3f4>
 80147e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147ec:	f043 0308 	orr.w	r3, r3, #8
 80147f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80147fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80147fe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8014800:	4618      	mov	r0, r3
 8014802:	3728      	adds	r7, #40	; 0x28
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}

08014808 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b086      	sub	sp, #24
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
 8014810:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	2b2f      	cmp	r3, #47	; 0x2f
 8014822:	d00b      	beq.n	801483c <follow_path+0x34>
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	2b5c      	cmp	r3, #92	; 0x5c
 801482a:	d007      	beq.n	801483c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	699a      	ldr	r2, [r3, #24]
 8014830:	693b      	ldr	r3, [r7, #16]
 8014832:	609a      	str	r2, [r3, #8]
 8014834:	e00d      	b.n	8014852 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	3301      	adds	r3, #1
 801483a:	603b      	str	r3, [r7, #0]
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	781b      	ldrb	r3, [r3, #0]
 8014840:	2b2f      	cmp	r3, #47	; 0x2f
 8014842:	d0f8      	beq.n	8014836 <follow_path+0x2e>
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	2b5c      	cmp	r3, #92	; 0x5c
 801484a:	d0f4      	beq.n	8014836 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801484c:	693b      	ldr	r3, [r7, #16]
 801484e:	2200      	movs	r2, #0
 8014850:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	2b1f      	cmp	r3, #31
 8014858:	d80a      	bhi.n	8014870 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	2280      	movs	r2, #128	; 0x80
 801485e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8014862:	2100      	movs	r1, #0
 8014864:	6878      	ldr	r0, [r7, #4]
 8014866:	f7ff f8c5 	bl	80139f4 <dir_sdi>
 801486a:	4603      	mov	r3, r0
 801486c:	75fb      	strb	r3, [r7, #23]
 801486e:	e056      	b.n	801491e <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014870:	463b      	mov	r3, r7
 8014872:	4619      	mov	r1, r3
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f7ff fdc3 	bl	8014400 <create_name>
 801487a:	4603      	mov	r3, r0
 801487c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801487e:	7dfb      	ldrb	r3, [r7, #23]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d147      	bne.n	8014914 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f7ff fc03 	bl	8014090 <dir_find>
 801488a:	4603      	mov	r3, r0
 801488c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014894:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014896:	7dfb      	ldrb	r3, [r7, #23]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d01b      	beq.n	80148d4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801489c:	7dfb      	ldrb	r3, [r7, #23]
 801489e:	2b04      	cmp	r3, #4
 80148a0:	d13a      	bne.n	8014918 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80148a2:	7afb      	ldrb	r3, [r7, #11]
 80148a4:	f003 0320 	and.w	r3, r3, #32
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d00b      	beq.n	80148c4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80148ac:	7afb      	ldrb	r3, [r7, #11]
 80148ae:	f003 0304 	and.w	r3, r3, #4
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d02c      	beq.n	8014910 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2280      	movs	r2, #128	; 0x80
 80148ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80148be:	2300      	movs	r3, #0
 80148c0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80148c2:	e029      	b.n	8014918 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80148c4:	7afb      	ldrb	r3, [r7, #11]
 80148c6:	f003 0304 	and.w	r3, r3, #4
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d124      	bne.n	8014918 <follow_path+0x110>
 80148ce:	2305      	movs	r3, #5
 80148d0:	75fb      	strb	r3, [r7, #23]
				break;
 80148d2:	e021      	b.n	8014918 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80148d4:	7afb      	ldrb	r3, [r7, #11]
 80148d6:	f003 0304 	and.w	r3, r3, #4
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d11e      	bne.n	801491c <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	799b      	ldrb	r3, [r3, #6]
 80148e2:	f003 0310 	and.w	r3, r3, #16
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d102      	bne.n	80148f0 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80148ea:	2305      	movs	r3, #5
 80148ec:	75fb      	strb	r3, [r7, #23]
 80148ee:	e016      	b.n	801491e <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	695b      	ldr	r3, [r3, #20]
 80148fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148fe:	4413      	add	r3, r2
 8014900:	4619      	mov	r1, r3
 8014902:	68f8      	ldr	r0, [r7, #12]
 8014904:	f7ff f9fd 	bl	8013d02 <ld_clust>
 8014908:	4602      	mov	r2, r0
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	609a      	str	r2, [r3, #8]
 801490e:	e7af      	b.n	8014870 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8014910:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014912:	e7ad      	b.n	8014870 <follow_path+0x68>
			if (res != FR_OK) break;
 8014914:	bf00      	nop
 8014916:	e002      	b.n	801491e <follow_path+0x116>
				break;
 8014918:	bf00      	nop
 801491a:	e000      	b.n	801491e <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801491c:	bf00      	nop
			}
		}
	}

	return res;
 801491e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014920:	4618      	mov	r0, r3
 8014922:	3718      	adds	r7, #24
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014928:	b480      	push	{r7}
 801492a:	b087      	sub	sp, #28
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014930:	f04f 33ff 	mov.w	r3, #4294967295
 8014934:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d031      	beq.n	80149a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	617b      	str	r3, [r7, #20]
 8014944:	e002      	b.n	801494c <get_ldnumber+0x24>
 8014946:	697b      	ldr	r3, [r7, #20]
 8014948:	3301      	adds	r3, #1
 801494a:	617b      	str	r3, [r7, #20]
 801494c:	697b      	ldr	r3, [r7, #20]
 801494e:	781b      	ldrb	r3, [r3, #0]
 8014950:	2b1f      	cmp	r3, #31
 8014952:	d903      	bls.n	801495c <get_ldnumber+0x34>
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	781b      	ldrb	r3, [r3, #0]
 8014958:	2b3a      	cmp	r3, #58	; 0x3a
 801495a:	d1f4      	bne.n	8014946 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801495c:	697b      	ldr	r3, [r7, #20]
 801495e:	781b      	ldrb	r3, [r3, #0]
 8014960:	2b3a      	cmp	r3, #58	; 0x3a
 8014962:	d11c      	bne.n	801499e <get_ldnumber+0x76>
			tp = *path;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	1c5a      	adds	r2, r3, #1
 801496e:	60fa      	str	r2, [r7, #12]
 8014970:	781b      	ldrb	r3, [r3, #0]
 8014972:	3b30      	subs	r3, #48	; 0x30
 8014974:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	2b09      	cmp	r3, #9
 801497a:	d80e      	bhi.n	801499a <get_ldnumber+0x72>
 801497c:	68fa      	ldr	r2, [r7, #12]
 801497e:	697b      	ldr	r3, [r7, #20]
 8014980:	429a      	cmp	r2, r3
 8014982:	d10a      	bne.n	801499a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d107      	bne.n	801499a <get_ldnumber+0x72>
					vol = (int)i;
 801498a:	68bb      	ldr	r3, [r7, #8]
 801498c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	3301      	adds	r3, #1
 8014992:	617b      	str	r3, [r7, #20]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	697a      	ldr	r2, [r7, #20]
 8014998:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801499a:	693b      	ldr	r3, [r7, #16]
 801499c:	e002      	b.n	80149a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801499e:	2300      	movs	r3, #0
 80149a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80149a2:	693b      	ldr	r3, [r7, #16]
}
 80149a4:	4618      	mov	r0, r3
 80149a6:	371c      	adds	r7, #28
 80149a8:	46bd      	mov	sp, r7
 80149aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ae:	4770      	bx	lr

080149b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b082      	sub	sp, #8
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
 80149b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	2200      	movs	r2, #0
 80149be:	70da      	strb	r2, [r3, #3]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f04f 32ff 	mov.w	r2, #4294967295
 80149c6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80149c8:	6839      	ldr	r1, [r7, #0]
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f7fe fc9a 	bl	8013304 <move_window>
 80149d0:	4603      	mov	r3, r0
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d001      	beq.n	80149da <check_fs+0x2a>
 80149d6:	2304      	movs	r3, #4
 80149d8:	e038      	b.n	8014a4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	3338      	adds	r3, #56	; 0x38
 80149de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7fe f9de 	bl	8012da4 <ld_word>
 80149e8:	4603      	mov	r3, r0
 80149ea:	461a      	mov	r2, r3
 80149ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80149f0:	429a      	cmp	r2, r3
 80149f2:	d001      	beq.n	80149f8 <check_fs+0x48>
 80149f4:	2303      	movs	r3, #3
 80149f6:	e029      	b.n	8014a4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80149fe:	2be9      	cmp	r3, #233	; 0xe9
 8014a00:	d009      	beq.n	8014a16 <check_fs+0x66>
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014a08:	2beb      	cmp	r3, #235	; 0xeb
 8014a0a:	d11e      	bne.n	8014a4a <check_fs+0x9a>
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014a12:	2b90      	cmp	r3, #144	; 0x90
 8014a14:	d119      	bne.n	8014a4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	3338      	adds	r3, #56	; 0x38
 8014a1a:	3336      	adds	r3, #54	; 0x36
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f7fe f9d9 	bl	8012dd4 <ld_dword>
 8014a22:	4603      	mov	r3, r0
 8014a24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014a28:	4a0a      	ldr	r2, [pc, #40]	; (8014a54 <check_fs+0xa4>)
 8014a2a:	4293      	cmp	r3, r2
 8014a2c:	d101      	bne.n	8014a32 <check_fs+0x82>
 8014a2e:	2300      	movs	r3, #0
 8014a30:	e00c      	b.n	8014a4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	3338      	adds	r3, #56	; 0x38
 8014a36:	3352      	adds	r3, #82	; 0x52
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f7fe f9cb 	bl	8012dd4 <ld_dword>
 8014a3e:	4602      	mov	r2, r0
 8014a40:	4b05      	ldr	r3, [pc, #20]	; (8014a58 <check_fs+0xa8>)
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d101      	bne.n	8014a4a <check_fs+0x9a>
 8014a46:	2300      	movs	r3, #0
 8014a48:	e000      	b.n	8014a4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014a4a:	2302      	movs	r3, #2
}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	3708      	adds	r7, #8
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}
 8014a54:	00544146 	.word	0x00544146
 8014a58:	33544146 	.word	0x33544146

08014a5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b096      	sub	sp, #88	; 0x58
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	60f8      	str	r0, [r7, #12]
 8014a64:	60b9      	str	r1, [r7, #8]
 8014a66:	4613      	mov	r3, r2
 8014a68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014a70:	68f8      	ldr	r0, [r7, #12]
 8014a72:	f7ff ff59 	bl	8014928 <get_ldnumber>
 8014a76:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	da01      	bge.n	8014a82 <find_volume+0x26>
 8014a7e:	230b      	movs	r3, #11
 8014a80:	e234      	b.n	8014eec <find_volume+0x490>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014a82:	4aa8      	ldr	r2, [pc, #672]	; (8014d24 <find_volume+0x2c8>)
 8014a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a8a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d101      	bne.n	8014a96 <find_volume+0x3a>
 8014a92:	230c      	movs	r3, #12
 8014a94:	e22a      	b.n	8014eec <find_volume+0x490>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014a9c:	79fb      	ldrb	r3, [r7, #7]
 8014a9e:	f023 0301 	bic.w	r3, r3, #1
 8014aa2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d01a      	beq.n	8014ae2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aae:	785b      	ldrb	r3, [r3, #1]
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7fe f8d9 	bl	8012c68 <disk_status>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014abc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014ac0:	f003 0301 	and.w	r3, r3, #1
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d10c      	bne.n	8014ae2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014ac8:	79fb      	ldrb	r3, [r7, #7]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d007      	beq.n	8014ade <find_volume+0x82>
 8014ace:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014ad2:	f003 0304 	and.w	r3, r3, #4
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d001      	beq.n	8014ade <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014ada:	230a      	movs	r3, #10
 8014adc:	e206      	b.n	8014eec <find_volume+0x490>
			}
			return FR_OK;				/* The file system object is valid */
 8014ade:	2300      	movs	r3, #0
 8014ae0:	e204      	b.n	8014eec <find_volume+0x490>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014aea:	b2da      	uxtb	r2, r3
 8014aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014af2:	785b      	ldrb	r3, [r3, #1]
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7fe f8d1 	bl	8012c9c <disk_initialize>
 8014afa:	4603      	mov	r3, r0
 8014afc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b04:	f003 0301 	and.w	r3, r3, #1
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d001      	beq.n	8014b10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014b0c:	2303      	movs	r3, #3
 8014b0e:	e1ed      	b.n	8014eec <find_volume+0x490>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014b10:	79fb      	ldrb	r3, [r7, #7]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d007      	beq.n	8014b26 <find_volume+0xca>
 8014b16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b1a:	f003 0304 	and.w	r3, r3, #4
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d001      	beq.n	8014b26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8014b22:	230a      	movs	r3, #10
 8014b24:	e1e2      	b.n	8014eec <find_volume+0x490>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014b26:	2300      	movs	r3, #0
 8014b28:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014b2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014b2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014b2e:	f7ff ff3f 	bl	80149b0 <check_fs>
 8014b32:	4603      	mov	r3, r0
 8014b34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014b38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014b3c:	2b02      	cmp	r3, #2
 8014b3e:	d14b      	bne.n	8014bd8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014b40:	2300      	movs	r3, #0
 8014b42:	643b      	str	r3, [r7, #64]	; 0x40
 8014b44:	e01f      	b.n	8014b86 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b48:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b4e:	011b      	lsls	r3, r3, #4
 8014b50:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014b54:	4413      	add	r3, r2
 8014b56:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b5a:	3304      	adds	r3, #4
 8014b5c:	781b      	ldrb	r3, [r3, #0]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d006      	beq.n	8014b70 <find_volume+0x114>
 8014b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b64:	3308      	adds	r3, #8
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7fe f934 	bl	8012dd4 <ld_dword>
 8014b6c:	4602      	mov	r2, r0
 8014b6e:	e000      	b.n	8014b72 <find_volume+0x116>
 8014b70:	2200      	movs	r2, #0
 8014b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b74:	009b      	lsls	r3, r3, #2
 8014b76:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014b7a:	440b      	add	r3, r1
 8014b7c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b82:	3301      	adds	r3, #1
 8014b84:	643b      	str	r3, [r7, #64]	; 0x40
 8014b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b88:	2b03      	cmp	r3, #3
 8014b8a:	d9dc      	bls.n	8014b46 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d002      	beq.n	8014b9c <find_volume+0x140>
 8014b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b98:	3b01      	subs	r3, #1
 8014b9a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b9e:	009b      	lsls	r3, r3, #2
 8014ba0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014ba4:	4413      	add	r3, r2
 8014ba6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014baa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d005      	beq.n	8014bbe <find_volume+0x162>
 8014bb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014bb6:	f7ff fefb 	bl	80149b0 <check_fs>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	e000      	b.n	8014bc0 <find_volume+0x164>
 8014bbe:	2303      	movs	r3, #3
 8014bc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014bc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014bc8:	2b01      	cmp	r3, #1
 8014bca:	d905      	bls.n	8014bd8 <find_volume+0x17c>
 8014bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014bce:	3301      	adds	r3, #1
 8014bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8014bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014bd4:	2b03      	cmp	r3, #3
 8014bd6:	d9e1      	bls.n	8014b9c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014bd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014bdc:	2b04      	cmp	r3, #4
 8014bde:	d101      	bne.n	8014be4 <find_volume+0x188>
 8014be0:	2301      	movs	r3, #1
 8014be2:	e183      	b.n	8014eec <find_volume+0x490>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014be4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014be8:	2b01      	cmp	r3, #1
 8014bea:	d901      	bls.n	8014bf0 <find_volume+0x194>
 8014bec:	230d      	movs	r3, #13
 8014bee:	e17d      	b.n	8014eec <find_volume+0x490>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bf2:	3338      	adds	r3, #56	; 0x38
 8014bf4:	330b      	adds	r3, #11
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7fe f8d4 	bl	8012da4 <ld_word>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c02:	d001      	beq.n	8014c08 <find_volume+0x1ac>
 8014c04:	230d      	movs	r3, #13
 8014c06:	e171      	b.n	8014eec <find_volume+0x490>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c0a:	3338      	adds	r3, #56	; 0x38
 8014c0c:	3316      	adds	r3, #22
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7fe f8c8 	bl	8012da4 <ld_word>
 8014c14:	4603      	mov	r3, r0
 8014c16:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d106      	bne.n	8014c2c <find_volume+0x1d0>
 8014c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c20:	3338      	adds	r3, #56	; 0x38
 8014c22:	3324      	adds	r3, #36	; 0x24
 8014c24:	4618      	mov	r0, r3
 8014c26:	f7fe f8d5 	bl	8012dd4 <ld_dword>
 8014c2a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c30:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c34:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c3a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c3e:	789b      	ldrb	r3, [r3, #2]
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d005      	beq.n	8014c50 <find_volume+0x1f4>
 8014c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c46:	789b      	ldrb	r3, [r3, #2]
 8014c48:	2b02      	cmp	r3, #2
 8014c4a:	d001      	beq.n	8014c50 <find_volume+0x1f4>
 8014c4c:	230d      	movs	r3, #13
 8014c4e:	e14d      	b.n	8014eec <find_volume+0x490>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c52:	789b      	ldrb	r3, [r3, #2]
 8014c54:	461a      	mov	r2, r3
 8014c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c58:	fb02 f303 	mul.w	r3, r2, r3
 8014c5c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014c64:	b29a      	uxth	r2, r3
 8014c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c68:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c6c:	895b      	ldrh	r3, [r3, #10]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d008      	beq.n	8014c84 <find_volume+0x228>
 8014c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c74:	895b      	ldrh	r3, [r3, #10]
 8014c76:	461a      	mov	r2, r3
 8014c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c7a:	895b      	ldrh	r3, [r3, #10]
 8014c7c:	3b01      	subs	r3, #1
 8014c7e:	4013      	ands	r3, r2
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d001      	beq.n	8014c88 <find_volume+0x22c>
 8014c84:	230d      	movs	r3, #13
 8014c86:	e131      	b.n	8014eec <find_volume+0x490>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c8a:	3338      	adds	r3, #56	; 0x38
 8014c8c:	3311      	adds	r3, #17
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f7fe f888 	bl	8012da4 <ld_word>
 8014c94:	4603      	mov	r3, r0
 8014c96:	461a      	mov	r2, r3
 8014c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c9a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c9e:	891b      	ldrh	r3, [r3, #8]
 8014ca0:	f003 030f 	and.w	r3, r3, #15
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d001      	beq.n	8014cae <find_volume+0x252>
 8014caa:	230d      	movs	r3, #13
 8014cac:	e11e      	b.n	8014eec <find_volume+0x490>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cb0:	3338      	adds	r3, #56	; 0x38
 8014cb2:	3313      	adds	r3, #19
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7fe f875 	bl	8012da4 <ld_word>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d106      	bne.n	8014cd2 <find_volume+0x276>
 8014cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cc6:	3338      	adds	r3, #56	; 0x38
 8014cc8:	3320      	adds	r3, #32
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7fe f882 	bl	8012dd4 <ld_dword>
 8014cd0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cd4:	3338      	adds	r3, #56	; 0x38
 8014cd6:	330e      	adds	r3, #14
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f7fe f863 	bl	8012da4 <ld_word>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014ce2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d101      	bne.n	8014cec <find_volume+0x290>
 8014ce8:	230d      	movs	r3, #13
 8014cea:	e0ff      	b.n	8014eec <find_volume+0x490>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014cec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cf0:	4413      	add	r3, r2
 8014cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014cf4:	8912      	ldrh	r2, [r2, #8]
 8014cf6:	0912      	lsrs	r2, r2, #4
 8014cf8:	b292      	uxth	r2, r2
 8014cfa:	4413      	add	r3, r2
 8014cfc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d02:	429a      	cmp	r2, r3
 8014d04:	d201      	bcs.n	8014d0a <find_volume+0x2ae>
 8014d06:	230d      	movs	r3, #13
 8014d08:	e0f0      	b.n	8014eec <find_volume+0x490>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014d0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d0e:	1ad3      	subs	r3, r2, r3
 8014d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d12:	8952      	ldrh	r2, [r2, #10]
 8014d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8014d18:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d103      	bne.n	8014d28 <find_volume+0x2cc>
 8014d20:	230d      	movs	r3, #13
 8014d22:	e0e3      	b.n	8014eec <find_volume+0x490>
 8014d24:	20000c08 	.word	0x20000c08
		fmt = FS_FAT32;
 8014d28:	2303      	movs	r3, #3
 8014d2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d30:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014d34:	4293      	cmp	r3, r2
 8014d36:	d802      	bhi.n	8014d3e <find_volume+0x2e2>
 8014d38:	2302      	movs	r3, #2
 8014d3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d40:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014d44:	4293      	cmp	r3, r2
 8014d46:	d802      	bhi.n	8014d4e <find_volume+0x2f2>
 8014d48:	2301      	movs	r3, #1
 8014d4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d50:	1c9a      	adds	r2, r3, #2
 8014d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d54:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8014d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014d5a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014d5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d60:	441a      	add	r2, r3
 8014d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d64:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8014d66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d6a:	441a      	add	r2, r3
 8014d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d6e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8014d70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014d74:	2b03      	cmp	r3, #3
 8014d76:	d11e      	bne.n	8014db6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d7a:	3338      	adds	r3, #56	; 0x38
 8014d7c:	332a      	adds	r3, #42	; 0x2a
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7fe f810 	bl	8012da4 <ld_word>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d001      	beq.n	8014d8e <find_volume+0x332>
 8014d8a:	230d      	movs	r3, #13
 8014d8c:	e0ae      	b.n	8014eec <find_volume+0x490>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d90:	891b      	ldrh	r3, [r3, #8]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d001      	beq.n	8014d9a <find_volume+0x33e>
 8014d96:	230d      	movs	r3, #13
 8014d98:	e0a8      	b.n	8014eec <find_volume+0x490>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d9c:	3338      	adds	r3, #56	; 0x38
 8014d9e:	332c      	adds	r3, #44	; 0x2c
 8014da0:	4618      	mov	r0, r3
 8014da2:	f7fe f817 	bl	8012dd4 <ld_dword>
 8014da6:	4602      	mov	r2, r0
 8014da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014daa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dae:	69db      	ldr	r3, [r3, #28]
 8014db0:	009b      	lsls	r3, r3, #2
 8014db2:	647b      	str	r3, [r7, #68]	; 0x44
 8014db4:	e01f      	b.n	8014df6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014db8:	891b      	ldrh	r3, [r3, #8]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d101      	bne.n	8014dc2 <find_volume+0x366>
 8014dbe:	230d      	movs	r3, #13
 8014dc0:	e094      	b.n	8014eec <find_volume+0x490>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dc8:	441a      	add	r2, r3
 8014dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dcc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014dce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014dd2:	2b02      	cmp	r3, #2
 8014dd4:	d103      	bne.n	8014dde <find_volume+0x382>
 8014dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dd8:	69db      	ldr	r3, [r3, #28]
 8014dda:	005b      	lsls	r3, r3, #1
 8014ddc:	e00a      	b.n	8014df4 <find_volume+0x398>
 8014dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014de0:	69da      	ldr	r2, [r3, #28]
 8014de2:	4613      	mov	r3, r2
 8014de4:	005b      	lsls	r3, r3, #1
 8014de6:	4413      	add	r3, r2
 8014de8:	085a      	lsrs	r2, r3, #1
 8014dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dec:	69db      	ldr	r3, [r3, #28]
 8014dee:	f003 0301 	and.w	r3, r3, #1
 8014df2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014df4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014df8:	6a1a      	ldr	r2, [r3, #32]
 8014dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014dfc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014e00:	0a5b      	lsrs	r3, r3, #9
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d201      	bcs.n	8014e0a <find_volume+0x3ae>
 8014e06:	230d      	movs	r3, #13
 8014e08:	e070      	b.n	8014eec <find_volume+0x490>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8014e10:	615a      	str	r2, [r3, #20]
 8014e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e14:	695a      	ldr	r2, [r3, #20]
 8014e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e18:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8014e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e1c:	2280      	movs	r2, #128	; 0x80
 8014e1e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014e20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014e24:	2b03      	cmp	r3, #3
 8014e26:	d149      	bne.n	8014ebc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e2a:	3338      	adds	r3, #56	; 0x38
 8014e2c:	3330      	adds	r3, #48	; 0x30
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f7fd ffb8 	bl	8012da4 <ld_word>
 8014e34:	4603      	mov	r3, r0
 8014e36:	2b01      	cmp	r3, #1
 8014e38:	d140      	bne.n	8014ebc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e3c:	3301      	adds	r3, #1
 8014e3e:	4619      	mov	r1, r3
 8014e40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014e42:	f7fe fa5f 	bl	8013304 <move_window>
 8014e46:	4603      	mov	r3, r0
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d137      	bne.n	8014ebc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8014e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e4e:	2200      	movs	r2, #0
 8014e50:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e54:	3338      	adds	r3, #56	; 0x38
 8014e56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7fd ffa2 	bl	8012da4 <ld_word>
 8014e60:	4603      	mov	r3, r0
 8014e62:	461a      	mov	r2, r3
 8014e64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014e68:	429a      	cmp	r2, r3
 8014e6a:	d127      	bne.n	8014ebc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e6e:	3338      	adds	r3, #56	; 0x38
 8014e70:	4618      	mov	r0, r3
 8014e72:	f7fd ffaf 	bl	8012dd4 <ld_dword>
 8014e76:	4602      	mov	r2, r0
 8014e78:	4b1e      	ldr	r3, [pc, #120]	; (8014ef4 <find_volume+0x498>)
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d11e      	bne.n	8014ebc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e80:	3338      	adds	r3, #56	; 0x38
 8014e82:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7fd ffa4 	bl	8012dd4 <ld_dword>
 8014e8c:	4602      	mov	r2, r0
 8014e8e:	4b1a      	ldr	r3, [pc, #104]	; (8014ef8 <find_volume+0x49c>)
 8014e90:	429a      	cmp	r2, r3
 8014e92:	d113      	bne.n	8014ebc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e96:	3338      	adds	r3, #56	; 0x38
 8014e98:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7fd ff99 	bl	8012dd4 <ld_dword>
 8014ea2:	4602      	mov	r2, r0
 8014ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ea6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eaa:	3338      	adds	r3, #56	; 0x38
 8014eac:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7fd ff8f 	bl	8012dd4 <ld_dword>
 8014eb6:	4602      	mov	r2, r0
 8014eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eba:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ebe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014ec2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014ec4:	4b0d      	ldr	r3, [pc, #52]	; (8014efc <find_volume+0x4a0>)
 8014ec6:	881b      	ldrh	r3, [r3, #0]
 8014ec8:	3301      	adds	r3, #1
 8014eca:	b29a      	uxth	r2, r3
 8014ecc:	4b0b      	ldr	r3, [pc, #44]	; (8014efc <find_volume+0x4a0>)
 8014ece:	801a      	strh	r2, [r3, #0]
 8014ed0:	4b0a      	ldr	r3, [pc, #40]	; (8014efc <find_volume+0x4a0>)
 8014ed2:	881a      	ldrh	r2, [r3, #0]
 8014ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8014ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eda:	4a09      	ldr	r2, [pc, #36]	; (8014f00 <find_volume+0x4a4>)
 8014edc:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8014ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014ee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014ee6:	f7fe f9a5 	bl	8013234 <clear_lock>
#endif
	return FR_OK;
 8014eea:	2300      	movs	r3, #0
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	3758      	adds	r7, #88	; 0x58
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd80      	pop	{r7, pc}
 8014ef4:	41615252 	.word	0x41615252
 8014ef8:	61417272 	.word	0x61417272
 8014efc:	20000c0c 	.word	0x20000c0c
 8014f00:	20000c30 	.word	0x20000c30

08014f04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b084      	sub	sp, #16
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
 8014f0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014f0e:	2309      	movs	r3, #9
 8014f10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d01c      	beq.n	8014f52 <validate+0x4e>
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d018      	beq.n	8014f52 <validate+0x4e>
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	781b      	ldrb	r3, [r3, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d013      	beq.n	8014f52 <validate+0x4e>
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	889a      	ldrh	r2, [r3, #4]
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	88db      	ldrh	r3, [r3, #6]
 8014f34:	429a      	cmp	r2, r3
 8014f36:	d10c      	bne.n	8014f52 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	785b      	ldrb	r3, [r3, #1]
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f7fd fe92 	bl	8012c68 <disk_status>
 8014f44:	4603      	mov	r3, r0
 8014f46:	f003 0301 	and.w	r3, r3, #1
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d101      	bne.n	8014f52 <validate+0x4e>
			res = FR_OK;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014f52:	7bfb      	ldrb	r3, [r7, #15]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d102      	bne.n	8014f5e <validate+0x5a>
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	e000      	b.n	8014f60 <validate+0x5c>
 8014f5e:	2300      	movs	r3, #0
 8014f60:	683a      	ldr	r2, [r7, #0]
 8014f62:	6013      	str	r3, [r2, #0]
	return res;
 8014f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	3710      	adds	r7, #16
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
	...

08014f70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b088      	sub	sp, #32
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	4613      	mov	r3, r2
 8014f7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014f7e:	68bb      	ldr	r3, [r7, #8]
 8014f80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014f82:	f107 0310 	add.w	r3, r7, #16
 8014f86:	4618      	mov	r0, r3
 8014f88:	f7ff fcce 	bl	8014928 <get_ldnumber>
 8014f8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	da01      	bge.n	8014f98 <f_mount+0x28>
 8014f94:	230b      	movs	r3, #11
 8014f96:	e02b      	b.n	8014ff0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014f98:	4a17      	ldr	r2, [pc, #92]	; (8014ff8 <f_mount+0x88>)
 8014f9a:	69fb      	ldr	r3, [r7, #28]
 8014f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014fa0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014fa2:	69bb      	ldr	r3, [r7, #24]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d005      	beq.n	8014fb4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014fa8:	69b8      	ldr	r0, [r7, #24]
 8014faa:	f7fe f943 	bl	8013234 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014fae:	69bb      	ldr	r3, [r7, #24]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d002      	beq.n	8014fc0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014fc0:	68fa      	ldr	r2, [r7, #12]
 8014fc2:	490d      	ldr	r1, [pc, #52]	; (8014ff8 <f_mount+0x88>)
 8014fc4:	69fb      	ldr	r3, [r7, #28]
 8014fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d002      	beq.n	8014fd6 <f_mount+0x66>
 8014fd0:	79fb      	ldrb	r3, [r7, #7]
 8014fd2:	2b01      	cmp	r3, #1
 8014fd4:	d001      	beq.n	8014fda <f_mount+0x6a>
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	e00a      	b.n	8014ff0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014fda:	f107 010c 	add.w	r1, r7, #12
 8014fde:	f107 0308 	add.w	r3, r7, #8
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f7ff fd39 	bl	8014a5c <find_volume>
 8014fea:	4603      	mov	r3, r0
 8014fec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3720      	adds	r7, #32
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}
 8014ff8:	20000c08 	.word	0x20000c08

08014ffc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b09a      	sub	sp, #104	; 0x68
 8015000:	af00      	add	r7, sp, #0
 8015002:	60f8      	str	r0, [r7, #12]
 8015004:	60b9      	str	r1, [r7, #8]
 8015006:	4613      	mov	r3, r2
 8015008:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d101      	bne.n	8015014 <f_open+0x18>
 8015010:	2309      	movs	r3, #9
 8015012:	e1ad      	b.n	8015370 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8015014:	79fb      	ldrb	r3, [r7, #7]
 8015016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801501a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801501c:	79fa      	ldrb	r2, [r7, #7]
 801501e:	f107 0114 	add.w	r1, r7, #20
 8015022:	f107 0308 	add.w	r3, r7, #8
 8015026:	4618      	mov	r0, r3
 8015028:	f7ff fd18 	bl	8014a5c <find_volume>
 801502c:	4603      	mov	r3, r0
 801502e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8015032:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015036:	2b00      	cmp	r3, #0
 8015038:	f040 8191 	bne.w	801535e <f_open+0x362>
		dj.obj.fs = fs;
 801503c:	697b      	ldr	r3, [r7, #20]
 801503e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015040:	68ba      	ldr	r2, [r7, #8]
 8015042:	f107 0318 	add.w	r3, r7, #24
 8015046:	4611      	mov	r1, r2
 8015048:	4618      	mov	r0, r3
 801504a:	f7ff fbdd 	bl	8014808 <follow_path>
 801504e:	4603      	mov	r3, r0
 8015050:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015054:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015058:	2b00      	cmp	r3, #0
 801505a:	d11a      	bne.n	8015092 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801505c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015060:	b25b      	sxtb	r3, r3
 8015062:	2b00      	cmp	r3, #0
 8015064:	da03      	bge.n	801506e <f_open+0x72>
				res = FR_INVALID_NAME;
 8015066:	2306      	movs	r3, #6
 8015068:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801506c:	e011      	b.n	8015092 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801506e:	79fb      	ldrb	r3, [r7, #7]
 8015070:	f023 0301 	bic.w	r3, r3, #1
 8015074:	2b00      	cmp	r3, #0
 8015076:	bf14      	ite	ne
 8015078:	2301      	movne	r3, #1
 801507a:	2300      	moveq	r3, #0
 801507c:	b2db      	uxtb	r3, r3
 801507e:	461a      	mov	r2, r3
 8015080:	f107 0318 	add.w	r3, r7, #24
 8015084:	4611      	mov	r1, r2
 8015086:	4618      	mov	r0, r3
 8015088:	f7fd ff8c 	bl	8012fa4 <chk_lock>
 801508c:	4603      	mov	r3, r0
 801508e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015092:	79fb      	ldrb	r3, [r7, #7]
 8015094:	f003 031c 	and.w	r3, r3, #28
 8015098:	2b00      	cmp	r3, #0
 801509a:	d07f      	beq.n	801519c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801509c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d017      	beq.n	80150d4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80150a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80150a8:	2b04      	cmp	r3, #4
 80150aa:	d10e      	bne.n	80150ca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80150ac:	f7fd ffd6 	bl	801305c <enq_lock>
 80150b0:	4603      	mov	r3, r0
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d006      	beq.n	80150c4 <f_open+0xc8>
 80150b6:	f107 0318 	add.w	r3, r7, #24
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7ff f8a8 	bl	8014210 <dir_register>
 80150c0:	4603      	mov	r3, r0
 80150c2:	e000      	b.n	80150c6 <f_open+0xca>
 80150c4:	2312      	movs	r3, #18
 80150c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80150ca:	79fb      	ldrb	r3, [r7, #7]
 80150cc:	f043 0308 	orr.w	r3, r3, #8
 80150d0:	71fb      	strb	r3, [r7, #7]
 80150d2:	e010      	b.n	80150f6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80150d4:	7fbb      	ldrb	r3, [r7, #30]
 80150d6:	f003 0311 	and.w	r3, r3, #17
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d003      	beq.n	80150e6 <f_open+0xea>
					res = FR_DENIED;
 80150de:	2307      	movs	r3, #7
 80150e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80150e4:	e007      	b.n	80150f6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80150e6:	79fb      	ldrb	r3, [r7, #7]
 80150e8:	f003 0304 	and.w	r3, r3, #4
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d002      	beq.n	80150f6 <f_open+0xfa>
 80150f0:	2308      	movs	r3, #8
 80150f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80150f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d168      	bne.n	80151d0 <f_open+0x1d4>
 80150fe:	79fb      	ldrb	r3, [r7, #7]
 8015100:	f003 0308 	and.w	r3, r3, #8
 8015104:	2b00      	cmp	r3, #0
 8015106:	d063      	beq.n	80151d0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8015108:	f7f7 fca8 	bl	800ca5c <get_fattime>
 801510c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015110:	330e      	adds	r3, #14
 8015112:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015114:	4618      	mov	r0, r3
 8015116:	f7fd fe9b 	bl	8012e50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801511c:	3316      	adds	r3, #22
 801511e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015120:	4618      	mov	r0, r3
 8015122:	f7fd fe95 	bl	8012e50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8015126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015128:	330b      	adds	r3, #11
 801512a:	2220      	movs	r2, #32
 801512c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015132:	4611      	mov	r1, r2
 8015134:	4618      	mov	r0, r3
 8015136:	f7fe fde4 	bl	8013d02 <ld_clust>
 801513a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015140:	2200      	movs	r2, #0
 8015142:	4618      	mov	r0, r3
 8015144:	f7fe fdfc 	bl	8013d40 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8015148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801514a:	331c      	adds	r3, #28
 801514c:	2100      	movs	r1, #0
 801514e:	4618      	mov	r0, r3
 8015150:	f7fd fe7e 	bl	8012e50 <st_dword>
					fs->wflag = 1;
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	2201      	movs	r2, #1
 8015158:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801515a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801515c:	2b00      	cmp	r3, #0
 801515e:	d037      	beq.n	80151d0 <f_open+0x1d4>
						dw = fs->winsect;
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015164:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8015166:	f107 0318 	add.w	r3, r7, #24
 801516a:	2200      	movs	r2, #0
 801516c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801516e:	4618      	mov	r0, r3
 8015170:	f7fe fb0f 	bl	8013792 <remove_chain>
 8015174:	4603      	mov	r3, r0
 8015176:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801517a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801517e:	2b00      	cmp	r3, #0
 8015180:	d126      	bne.n	80151d0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015186:	4618      	mov	r0, r3
 8015188:	f7fe f8bc 	bl	8013304 <move_window>
 801518c:	4603      	mov	r3, r0
 801518e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8015192:	697b      	ldr	r3, [r7, #20]
 8015194:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015196:	3a01      	subs	r2, #1
 8015198:	611a      	str	r2, [r3, #16]
 801519a:	e019      	b.n	80151d0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801519c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d115      	bne.n	80151d0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80151a4:	7fbb      	ldrb	r3, [r7, #30]
 80151a6:	f003 0310 	and.w	r3, r3, #16
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d003      	beq.n	80151b6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80151ae:	2304      	movs	r3, #4
 80151b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80151b4:	e00c      	b.n	80151d0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80151b6:	79fb      	ldrb	r3, [r7, #7]
 80151b8:	f003 0302 	and.w	r3, r3, #2
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d007      	beq.n	80151d0 <f_open+0x1d4>
 80151c0:	7fbb      	ldrb	r3, [r7, #30]
 80151c2:	f003 0301 	and.w	r3, r3, #1
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d002      	beq.n	80151d0 <f_open+0x1d4>
						res = FR_DENIED;
 80151ca:	2307      	movs	r3, #7
 80151cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80151d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d128      	bne.n	801522a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80151d8:	79fb      	ldrb	r3, [r7, #7]
 80151da:	f003 0308 	and.w	r3, r3, #8
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d003      	beq.n	80151ea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80151e2:	79fb      	ldrb	r3, [r7, #7]
 80151e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80151ea:	697b      	ldr	r3, [r7, #20]
 80151ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80151f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80151f8:	79fb      	ldrb	r3, [r7, #7]
 80151fa:	f023 0301 	bic.w	r3, r3, #1
 80151fe:	2b00      	cmp	r3, #0
 8015200:	bf14      	ite	ne
 8015202:	2301      	movne	r3, #1
 8015204:	2300      	moveq	r3, #0
 8015206:	b2db      	uxtb	r3, r3
 8015208:	461a      	mov	r2, r3
 801520a:	f107 0318 	add.w	r3, r7, #24
 801520e:	4611      	mov	r1, r2
 8015210:	4618      	mov	r0, r3
 8015212:	f7fd ff45 	bl	80130a0 <inc_lock>
 8015216:	4602      	mov	r2, r0
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	691b      	ldr	r3, [r3, #16]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d102      	bne.n	801522a <f_open+0x22e>
 8015224:	2302      	movs	r3, #2
 8015226:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801522a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801522e:	2b00      	cmp	r3, #0
 8015230:	f040 8095 	bne.w	801535e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015234:	697b      	ldr	r3, [r7, #20]
 8015236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015238:	4611      	mov	r1, r2
 801523a:	4618      	mov	r0, r3
 801523c:	f7fe fd61 	bl	8013d02 <ld_clust>
 8015240:	4602      	mov	r2, r0
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015248:	331c      	adds	r3, #28
 801524a:	4618      	mov	r0, r3
 801524c:	f7fd fdc2 	bl	8012dd4 <ld_dword>
 8015250:	4602      	mov	r2, r0
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	2200      	movs	r2, #0
 801525a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801525c:	697a      	ldr	r2, [r7, #20]
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	88da      	ldrh	r2, [r3, #6]
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	79fa      	ldrb	r2, [r7, #7]
 801526e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	2200      	movs	r2, #0
 8015274:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	2200      	movs	r2, #0
 801527a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	2200      	movs	r2, #0
 8015280:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	3330      	adds	r3, #48	; 0x30
 8015286:	f44f 7200 	mov.w	r2, #512	; 0x200
 801528a:	2100      	movs	r1, #0
 801528c:	4618      	mov	r0, r3
 801528e:	f7fd fe2c 	bl	8012eea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8015292:	79fb      	ldrb	r3, [r7, #7]
 8015294:	f003 0320 	and.w	r3, r3, #32
 8015298:	2b00      	cmp	r3, #0
 801529a:	d060      	beq.n	801535e <f_open+0x362>
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d05c      	beq.n	801535e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	68da      	ldr	r2, [r3, #12]
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	895b      	ldrh	r3, [r3, #10]
 80152b0:	025b      	lsls	r3, r3, #9
 80152b2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	689b      	ldr	r3, [r3, #8]
 80152b8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	68db      	ldr	r3, [r3, #12]
 80152be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80152c0:	e016      	b.n	80152f0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7fe f8d7 	bl	801347a <get_fat>
 80152cc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80152ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80152d0:	2b01      	cmp	r3, #1
 80152d2:	d802      	bhi.n	80152da <f_open+0x2de>
 80152d4:	2302      	movs	r3, #2
 80152d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80152da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80152dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152e0:	d102      	bne.n	80152e8 <f_open+0x2ec>
 80152e2:	2301      	movs	r3, #1
 80152e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80152e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80152ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152ec:	1ad3      	subs	r3, r2, r3
 80152ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80152f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d103      	bne.n	8015300 <f_open+0x304>
 80152f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80152fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d8e0      	bhi.n	80152c2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015304:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015306:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801530a:	2b00      	cmp	r3, #0
 801530c:	d127      	bne.n	801535e <f_open+0x362>
 801530e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015314:	2b00      	cmp	r3, #0
 8015316:	d022      	beq.n	801535e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801531c:	4618      	mov	r0, r3
 801531e:	f7fe f88d 	bl	801343c <clust2sect>
 8015322:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015326:	2b00      	cmp	r3, #0
 8015328:	d103      	bne.n	8015332 <f_open+0x336>
						res = FR_INT_ERR;
 801532a:	2302      	movs	r3, #2
 801532c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8015330:	e015      	b.n	801535e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8015332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015334:	0a5a      	lsrs	r2, r3, #9
 8015336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015338:	441a      	add	r2, r3
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	7858      	ldrb	r0, [r3, #1]
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	6a1a      	ldr	r2, [r3, #32]
 801534c:	2301      	movs	r3, #1
 801534e:	f7fd fccb 	bl	8012ce8 <disk_read>
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d002      	beq.n	801535e <f_open+0x362>
 8015358:	2301      	movs	r3, #1
 801535a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801535e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015362:	2b00      	cmp	r3, #0
 8015364:	d002      	beq.n	801536c <f_open+0x370>
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	2200      	movs	r2, #0
 801536a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801536c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8015370:	4618      	mov	r0, r3
 8015372:	3768      	adds	r7, #104	; 0x68
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}

08015378 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8015378:	b580      	push	{r7, lr}
 801537a:	b08c      	sub	sp, #48	; 0x30
 801537c:	af00      	add	r7, sp, #0
 801537e:	60f8      	str	r0, [r7, #12]
 8015380:	60b9      	str	r1, [r7, #8]
 8015382:	607a      	str	r2, [r7, #4]
 8015384:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	2200      	movs	r2, #0
 801538e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	f107 0210 	add.w	r2, r7, #16
 8015396:	4611      	mov	r1, r2
 8015398:	4618      	mov	r0, r3
 801539a:	f7ff fdb3 	bl	8014f04 <validate>
 801539e:	4603      	mov	r3, r0
 80153a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80153a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d107      	bne.n	80153bc <f_write+0x44>
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	7d5b      	ldrb	r3, [r3, #21]
 80153b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80153b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d002      	beq.n	80153c2 <f_write+0x4a>
 80153bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153c0:	e14b      	b.n	801565a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	7d1b      	ldrb	r3, [r3, #20]
 80153c6:	f003 0302 	and.w	r3, r3, #2
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d101      	bne.n	80153d2 <f_write+0x5a>
 80153ce:	2307      	movs	r3, #7
 80153d0:	e143      	b.n	801565a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	699a      	ldr	r2, [r3, #24]
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	441a      	add	r2, r3
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	699b      	ldr	r3, [r3, #24]
 80153de:	429a      	cmp	r2, r3
 80153e0:	f080 812d 	bcs.w	801563e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	699b      	ldr	r3, [r3, #24]
 80153e8:	43db      	mvns	r3, r3
 80153ea:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80153ec:	e127      	b.n	801563e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	699b      	ldr	r3, [r3, #24]
 80153f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	f040 80e3 	bne.w	80155c2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	699b      	ldr	r3, [r3, #24]
 8015400:	0a5b      	lsrs	r3, r3, #9
 8015402:	693a      	ldr	r2, [r7, #16]
 8015404:	8952      	ldrh	r2, [r2, #10]
 8015406:	3a01      	subs	r2, #1
 8015408:	4013      	ands	r3, r2
 801540a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801540c:	69bb      	ldr	r3, [r7, #24]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d143      	bne.n	801549a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	699b      	ldr	r3, [r3, #24]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d10c      	bne.n	8015434 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	689b      	ldr	r3, [r3, #8]
 801541e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015422:	2b00      	cmp	r3, #0
 8015424:	d11a      	bne.n	801545c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	2100      	movs	r1, #0
 801542a:	4618      	mov	r0, r3
 801542c:	f7fe fa16 	bl	801385c <create_chain>
 8015430:	62b8      	str	r0, [r7, #40]	; 0x28
 8015432:	e013      	b.n	801545c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015438:	2b00      	cmp	r3, #0
 801543a:	d007      	beq.n	801544c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	699b      	ldr	r3, [r3, #24]
 8015440:	4619      	mov	r1, r3
 8015442:	68f8      	ldr	r0, [r7, #12]
 8015444:	f7fe faa2 	bl	801398c <clmt_clust>
 8015448:	62b8      	str	r0, [r7, #40]	; 0x28
 801544a:	e007      	b.n	801545c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801544c:	68fa      	ldr	r2, [r7, #12]
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	69db      	ldr	r3, [r3, #28]
 8015452:	4619      	mov	r1, r3
 8015454:	4610      	mov	r0, r2
 8015456:	f7fe fa01 	bl	801385c <create_chain>
 801545a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801545e:	2b00      	cmp	r3, #0
 8015460:	f000 80f2 	beq.w	8015648 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015466:	2b01      	cmp	r3, #1
 8015468:	d104      	bne.n	8015474 <f_write+0xfc>
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	2202      	movs	r2, #2
 801546e:	755a      	strb	r2, [r3, #21]
 8015470:	2302      	movs	r3, #2
 8015472:	e0f2      	b.n	801565a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015476:	f1b3 3fff 	cmp.w	r3, #4294967295
 801547a:	d104      	bne.n	8015486 <f_write+0x10e>
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	2201      	movs	r2, #1
 8015480:	755a      	strb	r2, [r3, #21]
 8015482:	2301      	movs	r3, #1
 8015484:	e0e9      	b.n	801565a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801548a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	689b      	ldr	r3, [r3, #8]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d102      	bne.n	801549a <f_write+0x122>
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015498:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	7d1b      	ldrb	r3, [r3, #20]
 801549e:	b25b      	sxtb	r3, r3
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	da18      	bge.n	80154d6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80154a4:	693b      	ldr	r3, [r7, #16]
 80154a6:	7858      	ldrb	r0, [r3, #1]
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	6a1a      	ldr	r2, [r3, #32]
 80154b2:	2301      	movs	r3, #1
 80154b4:	f7fd fc38 	bl	8012d28 <disk_write>
 80154b8:	4603      	mov	r3, r0
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d004      	beq.n	80154c8 <f_write+0x150>
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2201      	movs	r2, #1
 80154c2:	755a      	strb	r2, [r3, #21]
 80154c4:	2301      	movs	r3, #1
 80154c6:	e0c8      	b.n	801565a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	7d1b      	ldrb	r3, [r3, #20]
 80154cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80154d0:	b2da      	uxtb	r2, r3
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80154d6:	693a      	ldr	r2, [r7, #16]
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	69db      	ldr	r3, [r3, #28]
 80154dc:	4619      	mov	r1, r3
 80154de:	4610      	mov	r0, r2
 80154e0:	f7fd ffac 	bl	801343c <clust2sect>
 80154e4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d104      	bne.n	80154f6 <f_write+0x17e>
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	2202      	movs	r2, #2
 80154f0:	755a      	strb	r2, [r3, #21]
 80154f2:	2302      	movs	r3, #2
 80154f4:	e0b1      	b.n	801565a <f_write+0x2e2>
			sect += csect;
 80154f6:	697a      	ldr	r2, [r7, #20]
 80154f8:	69bb      	ldr	r3, [r7, #24]
 80154fa:	4413      	add	r3, r2
 80154fc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	0a5b      	lsrs	r3, r3, #9
 8015502:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015504:	6a3b      	ldr	r3, [r7, #32]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d03c      	beq.n	8015584 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801550a:	69ba      	ldr	r2, [r7, #24]
 801550c:	6a3b      	ldr	r3, [r7, #32]
 801550e:	4413      	add	r3, r2
 8015510:	693a      	ldr	r2, [r7, #16]
 8015512:	8952      	ldrh	r2, [r2, #10]
 8015514:	4293      	cmp	r3, r2
 8015516:	d905      	bls.n	8015524 <f_write+0x1ac>
					cc = fs->csize - csect;
 8015518:	693b      	ldr	r3, [r7, #16]
 801551a:	895b      	ldrh	r3, [r3, #10]
 801551c:	461a      	mov	r2, r3
 801551e:	69bb      	ldr	r3, [r7, #24]
 8015520:	1ad3      	subs	r3, r2, r3
 8015522:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	7858      	ldrb	r0, [r3, #1]
 8015528:	6a3b      	ldr	r3, [r7, #32]
 801552a:	697a      	ldr	r2, [r7, #20]
 801552c:	69f9      	ldr	r1, [r7, #28]
 801552e:	f7fd fbfb 	bl	8012d28 <disk_write>
 8015532:	4603      	mov	r3, r0
 8015534:	2b00      	cmp	r3, #0
 8015536:	d004      	beq.n	8015542 <f_write+0x1ca>
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	2201      	movs	r2, #1
 801553c:	755a      	strb	r2, [r3, #21]
 801553e:	2301      	movs	r3, #1
 8015540:	e08b      	b.n	801565a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	6a1a      	ldr	r2, [r3, #32]
 8015546:	697b      	ldr	r3, [r7, #20]
 8015548:	1ad3      	subs	r3, r2, r3
 801554a:	6a3a      	ldr	r2, [r7, #32]
 801554c:	429a      	cmp	r2, r3
 801554e:	d915      	bls.n	801557c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	6a1a      	ldr	r2, [r3, #32]
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	1ad3      	subs	r3, r2, r3
 801555e:	025b      	lsls	r3, r3, #9
 8015560:	69fa      	ldr	r2, [r7, #28]
 8015562:	4413      	add	r3, r2
 8015564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015568:	4619      	mov	r1, r3
 801556a:	f7fd fc9d 	bl	8012ea8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	7d1b      	ldrb	r3, [r3, #20]
 8015572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015576:	b2da      	uxtb	r2, r3
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801557c:	6a3b      	ldr	r3, [r7, #32]
 801557e:	025b      	lsls	r3, r3, #9
 8015580:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015582:	e03f      	b.n	8015604 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	6a1b      	ldr	r3, [r3, #32]
 8015588:	697a      	ldr	r2, [r7, #20]
 801558a:	429a      	cmp	r2, r3
 801558c:	d016      	beq.n	80155bc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	699a      	ldr	r2, [r3, #24]
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015596:	429a      	cmp	r2, r3
 8015598:	d210      	bcs.n	80155bc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	7858      	ldrb	r0, [r3, #1]
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80155a4:	2301      	movs	r3, #1
 80155a6:	697a      	ldr	r2, [r7, #20]
 80155a8:	f7fd fb9e 	bl	8012ce8 <disk_read>
 80155ac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d004      	beq.n	80155bc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	2201      	movs	r2, #1
 80155b6:	755a      	strb	r2, [r3, #21]
 80155b8:	2301      	movs	r3, #1
 80155ba:	e04e      	b.n	801565a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	697a      	ldr	r2, [r7, #20]
 80155c0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	699b      	ldr	r3, [r3, #24]
 80155c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80155ca:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80155ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80155d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	429a      	cmp	r2, r3
 80155d6:	d901      	bls.n	80155dc <f_write+0x264>
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	699b      	ldr	r3, [r3, #24]
 80155e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80155ea:	4413      	add	r3, r2
 80155ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155ee:	69f9      	ldr	r1, [r7, #28]
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7fd fc59 	bl	8012ea8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	7d1b      	ldrb	r3, [r3, #20]
 80155fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80155fe:	b2da      	uxtb	r2, r3
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015604:	69fa      	ldr	r2, [r7, #28]
 8015606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015608:	4413      	add	r3, r2
 801560a:	61fb      	str	r3, [r7, #28]
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	699a      	ldr	r2, [r3, #24]
 8015610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015612:	441a      	add	r2, r3
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	619a      	str	r2, [r3, #24]
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	68da      	ldr	r2, [r3, #12]
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	699b      	ldr	r3, [r3, #24]
 8015620:	429a      	cmp	r2, r3
 8015622:	bf38      	it	cc
 8015624:	461a      	movcc	r2, r3
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	60da      	str	r2, [r3, #12]
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	681a      	ldr	r2, [r3, #0]
 801562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015630:	441a      	add	r2, r3
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	601a      	str	r2, [r3, #0]
 8015636:	687a      	ldr	r2, [r7, #4]
 8015638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563a:	1ad3      	subs	r3, r2, r3
 801563c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	2b00      	cmp	r3, #0
 8015642:	f47f aed4 	bne.w	80153ee <f_write+0x76>
 8015646:	e000      	b.n	801564a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015648:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	7d1b      	ldrb	r3, [r3, #20]
 801564e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015652:	b2da      	uxtb	r2, r3
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015658:	2300      	movs	r3, #0
}
 801565a:	4618      	mov	r0, r3
 801565c:	3730      	adds	r7, #48	; 0x30
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}

08015662 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015662:	b580      	push	{r7, lr}
 8015664:	b086      	sub	sp, #24
 8015666:	af00      	add	r7, sp, #0
 8015668:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	f107 0208 	add.w	r2, r7, #8
 8015670:	4611      	mov	r1, r2
 8015672:	4618      	mov	r0, r3
 8015674:	f7ff fc46 	bl	8014f04 <validate>
 8015678:	4603      	mov	r3, r0
 801567a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801567c:	7dfb      	ldrb	r3, [r7, #23]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d168      	bne.n	8015754 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	7d1b      	ldrb	r3, [r3, #20]
 8015686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801568a:	2b00      	cmp	r3, #0
 801568c:	d062      	beq.n	8015754 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	7d1b      	ldrb	r3, [r3, #20]
 8015692:	b25b      	sxtb	r3, r3
 8015694:	2b00      	cmp	r3, #0
 8015696:	da15      	bge.n	80156c4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	7858      	ldrb	r0, [r3, #1]
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	6a1a      	ldr	r2, [r3, #32]
 80156a6:	2301      	movs	r3, #1
 80156a8:	f7fd fb3e 	bl	8012d28 <disk_write>
 80156ac:	4603      	mov	r3, r0
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d001      	beq.n	80156b6 <f_sync+0x54>
 80156b2:	2301      	movs	r3, #1
 80156b4:	e04f      	b.n	8015756 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	7d1b      	ldrb	r3, [r3, #20]
 80156ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80156be:	b2da      	uxtb	r2, r3
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80156c4:	f7f7 f9ca 	bl	800ca5c <get_fattime>
 80156c8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80156ca:	68ba      	ldr	r2, [r7, #8]
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156d0:	4619      	mov	r1, r3
 80156d2:	4610      	mov	r0, r2
 80156d4:	f7fd fe16 	bl	8013304 <move_window>
 80156d8:	4603      	mov	r3, r0
 80156da:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80156dc:	7dfb      	ldrb	r3, [r7, #23]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d138      	bne.n	8015754 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156e6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	330b      	adds	r3, #11
 80156ec:	781a      	ldrb	r2, [r3, #0]
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	330b      	adds	r3, #11
 80156f2:	f042 0220 	orr.w	r2, r2, #32
 80156f6:	b2d2      	uxtb	r2, r2
 80156f8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	6818      	ldr	r0, [r3, #0]
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	689b      	ldr	r3, [r3, #8]
 8015702:	461a      	mov	r2, r3
 8015704:	68f9      	ldr	r1, [r7, #12]
 8015706:	f7fe fb1b 	bl	8013d40 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	f103 021c 	add.w	r2, r3, #28
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	68db      	ldr	r3, [r3, #12]
 8015714:	4619      	mov	r1, r3
 8015716:	4610      	mov	r0, r2
 8015718:	f7fd fb9a 	bl	8012e50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	3316      	adds	r3, #22
 8015720:	6939      	ldr	r1, [r7, #16]
 8015722:	4618      	mov	r0, r3
 8015724:	f7fd fb94 	bl	8012e50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	3312      	adds	r3, #18
 801572c:	2100      	movs	r1, #0
 801572e:	4618      	mov	r0, r3
 8015730:	f7fd fb73 	bl	8012e1a <st_word>
					fs->wflag = 1;
 8015734:	68bb      	ldr	r3, [r7, #8]
 8015736:	2201      	movs	r2, #1
 8015738:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	4618      	mov	r0, r3
 801573e:	f7fd fe0f 	bl	8013360 <sync_fs>
 8015742:	4603      	mov	r3, r0
 8015744:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	7d1b      	ldrb	r3, [r3, #20]
 801574a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801574e:	b2da      	uxtb	r2, r3
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015754:	7dfb      	ldrb	r3, [r7, #23]
}
 8015756:	4618      	mov	r0, r3
 8015758:	3718      	adds	r7, #24
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}

0801575e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801575e:	b580      	push	{r7, lr}
 8015760:	b084      	sub	sp, #16
 8015762:	af00      	add	r7, sp, #0
 8015764:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015766:	6878      	ldr	r0, [r7, #4]
 8015768:	f7ff ff7b 	bl	8015662 <f_sync>
 801576c:	4603      	mov	r3, r0
 801576e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015770:	7bfb      	ldrb	r3, [r7, #15]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d118      	bne.n	80157a8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	f107 0208 	add.w	r2, r7, #8
 801577c:	4611      	mov	r1, r2
 801577e:	4618      	mov	r0, r3
 8015780:	f7ff fbc0 	bl	8014f04 <validate>
 8015784:	4603      	mov	r3, r0
 8015786:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015788:	7bfb      	ldrb	r3, [r7, #15]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d10c      	bne.n	80157a8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	691b      	ldr	r3, [r3, #16]
 8015792:	4618      	mov	r0, r3
 8015794:	f7fd fd12 	bl	80131bc <dec_lock>
 8015798:	4603      	mov	r3, r0
 801579a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801579c:	7bfb      	ldrb	r3, [r7, #15]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d102      	bne.n	80157a8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	2200      	movs	r2, #0
 80157a6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80157a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	3710      	adds	r7, #16
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bd80      	pop	{r7, pc}

080157b2 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80157b2:	b590      	push	{r4, r7, lr}
 80157b4:	b093      	sub	sp, #76	; 0x4c
 80157b6:	af00      	add	r7, sp, #0
 80157b8:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80157ba:	f107 010c 	add.w	r1, r7, #12
 80157be:	1d3b      	adds	r3, r7, #4
 80157c0:	2200      	movs	r2, #0
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7ff f94a 	bl	8014a5c <find_volume>
 80157c8:	4603      	mov	r3, r0
 80157ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80157ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d131      	bne.n	801583a <f_chdir+0x88>
		dj.obj.fs = fs;
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80157da:	687a      	ldr	r2, [r7, #4]
 80157dc:	f107 0310 	add.w	r3, r7, #16
 80157e0:	4611      	mov	r1, r2
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7ff f810 	bl	8014808 <follow_path>
 80157e8:	4603      	mov	r3, r0
 80157ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 80157ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d11a      	bne.n	801582c <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80157f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80157fa:	b25b      	sxtb	r3, r3
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	da03      	bge.n	8015808 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	69ba      	ldr	r2, [r7, #24]
 8015804:	619a      	str	r2, [r3, #24]
 8015806:	e011      	b.n	801582c <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8015808:	7dbb      	ldrb	r3, [r7, #22]
 801580a:	f003 0310 	and.w	r3, r3, #16
 801580e:	2b00      	cmp	r3, #0
 8015810:	d009      	beq.n	8015826 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015816:	68fc      	ldr	r4, [r7, #12]
 8015818:	4611      	mov	r1, r2
 801581a:	4618      	mov	r0, r3
 801581c:	f7fe fa71 	bl	8013d02 <ld_clust>
 8015820:	4603      	mov	r3, r0
 8015822:	61a3      	str	r3, [r4, #24]
 8015824:	e002      	b.n	801582c <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8015826:	2305      	movs	r3, #5
 8015828:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801582c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015830:	2b04      	cmp	r3, #4
 8015832:	d102      	bne.n	801583a <f_chdir+0x88>
 8015834:	2305      	movs	r3, #5
 8015836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 801583a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801583e:	4618      	mov	r0, r3
 8015840:	374c      	adds	r7, #76	; 0x4c
 8015842:	46bd      	mov	sp, r7
 8015844:	bd90      	pop	{r4, r7, pc}

08015846 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015846:	b580      	push	{r7, lr}
 8015848:	b086      	sub	sp, #24
 801584a:	af00      	add	r7, sp, #0
 801584c:	6078      	str	r0, [r7, #4]
 801584e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d101      	bne.n	801585a <f_opendir+0x14>
 8015856:	2309      	movs	r3, #9
 8015858:	e064      	b.n	8015924 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801585e:	f107 010c 	add.w	r1, r7, #12
 8015862:	463b      	mov	r3, r7
 8015864:	2200      	movs	r2, #0
 8015866:	4618      	mov	r0, r3
 8015868:	f7ff f8f8 	bl	8014a5c <find_volume>
 801586c:	4603      	mov	r3, r0
 801586e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015870:	7dfb      	ldrb	r3, [r7, #23]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d14f      	bne.n	8015916 <f_opendir+0xd0>
		obj->fs = fs;
 8015876:	68fa      	ldr	r2, [r7, #12]
 8015878:	693b      	ldr	r3, [r7, #16]
 801587a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	4619      	mov	r1, r3
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f7fe ffc1 	bl	8014808 <follow_path>
 8015886:	4603      	mov	r3, r0
 8015888:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801588a:	7dfb      	ldrb	r3, [r7, #23]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d13d      	bne.n	801590c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015896:	b25b      	sxtb	r3, r3
 8015898:	2b00      	cmp	r3, #0
 801589a:	db12      	blt.n	80158c2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801589c:	693b      	ldr	r3, [r7, #16]
 801589e:	799b      	ldrb	r3, [r3, #6]
 80158a0:	f003 0310 	and.w	r3, r3, #16
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d00a      	beq.n	80158be <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80158a8:	68fa      	ldr	r2, [r7, #12]
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	6a1b      	ldr	r3, [r3, #32]
 80158ae:	4619      	mov	r1, r3
 80158b0:	4610      	mov	r0, r2
 80158b2:	f7fe fa26 	bl	8013d02 <ld_clust>
 80158b6:	4602      	mov	r2, r0
 80158b8:	693b      	ldr	r3, [r7, #16]
 80158ba:	609a      	str	r2, [r3, #8]
 80158bc:	e001      	b.n	80158c2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80158be:	2305      	movs	r3, #5
 80158c0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80158c2:	7dfb      	ldrb	r3, [r7, #23]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d121      	bne.n	801590c <f_opendir+0xc6>
				obj->id = fs->id;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	88da      	ldrh	r2, [r3, #6]
 80158cc:	693b      	ldr	r3, [r7, #16]
 80158ce:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80158d0:	2100      	movs	r1, #0
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f7fe f88e 	bl	80139f4 <dir_sdi>
 80158d8:	4603      	mov	r3, r0
 80158da:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80158dc:	7dfb      	ldrb	r3, [r7, #23]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d114      	bne.n	801590c <f_opendir+0xc6>
					if (obj->sclust) {
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	689b      	ldr	r3, [r3, #8]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d00d      	beq.n	8015906 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80158ea:	2100      	movs	r1, #0
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f7fd fbd7 	bl	80130a0 <inc_lock>
 80158f2:	4602      	mov	r2, r0
 80158f4:	693b      	ldr	r3, [r7, #16]
 80158f6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	691b      	ldr	r3, [r3, #16]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d105      	bne.n	801590c <f_opendir+0xc6>
 8015900:	2312      	movs	r3, #18
 8015902:	75fb      	strb	r3, [r7, #23]
 8015904:	e002      	b.n	801590c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015906:	693b      	ldr	r3, [r7, #16]
 8015908:	2200      	movs	r2, #0
 801590a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801590c:	7dfb      	ldrb	r3, [r7, #23]
 801590e:	2b04      	cmp	r3, #4
 8015910:	d101      	bne.n	8015916 <f_opendir+0xd0>
 8015912:	2305      	movs	r3, #5
 8015914:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015916:	7dfb      	ldrb	r3, [r7, #23]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d002      	beq.n	8015922 <f_opendir+0xdc>
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	2200      	movs	r2, #0
 8015920:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015922:	7dfb      	ldrb	r3, [r7, #23]
}
 8015924:	4618      	mov	r0, r3
 8015926:	3718      	adds	r7, #24
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}

0801592c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b084      	sub	sp, #16
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	f107 0208 	add.w	r2, r7, #8
 801593a:	4611      	mov	r1, r2
 801593c:	4618      	mov	r0, r3
 801593e:	f7ff fae1 	bl	8014f04 <validate>
 8015942:	4603      	mov	r3, r0
 8015944:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015946:	7bfb      	ldrb	r3, [r7, #15]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d110      	bne.n	801596e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	691b      	ldr	r3, [r3, #16]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d006      	beq.n	8015962 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	691b      	ldr	r3, [r3, #16]
 8015958:	4618      	mov	r0, r3
 801595a:	f7fd fc2f 	bl	80131bc <dec_lock>
 801595e:	4603      	mov	r3, r0
 8015960:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8015962:	7bfb      	ldrb	r3, [r7, #15]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d102      	bne.n	801596e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	2200      	movs	r2, #0
 801596c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801596e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015970:	4618      	mov	r0, r3
 8015972:	3710      	adds	r7, #16
 8015974:	46bd      	mov	sp, r7
 8015976:	bd80      	pop	{r7, pc}

08015978 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b098      	sub	sp, #96	; 0x60
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015980:	f107 010c 	add.w	r1, r7, #12
 8015984:	1d3b      	adds	r3, r7, #4
 8015986:	2202      	movs	r2, #2
 8015988:	4618      	mov	r0, r3
 801598a:	f7ff f867 	bl	8014a5c <find_volume>
 801598e:	4603      	mov	r3, r0
 8015990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8015998:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801599c:	2b00      	cmp	r3, #0
 801599e:	f040 80f9 	bne.w	8015b94 <f_mkdir+0x21c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	f107 0310 	add.w	r3, r7, #16
 80159a8:	4611      	mov	r1, r2
 80159aa:	4618      	mov	r0, r3
 80159ac:	f7fe ff2c 	bl	8014808 <follow_path>
 80159b0:	4603      	mov	r3, r0
 80159b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80159b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d102      	bne.n	80159c4 <f_mkdir+0x4c>
 80159be:	2308      	movs	r3, #8
 80159c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80159c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80159c8:	2b04      	cmp	r3, #4
 80159ca:	d108      	bne.n	80159de <f_mkdir+0x66>
 80159cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80159d0:	f003 0320 	and.w	r3, r3, #32
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d002      	beq.n	80159de <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80159d8:	2306      	movs	r3, #6
 80159da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80159de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80159e2:	2b04      	cmp	r3, #4
 80159e4:	f040 80d6 	bne.w	8015b94 <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80159e8:	f107 0310 	add.w	r3, r7, #16
 80159ec:	2100      	movs	r1, #0
 80159ee:	4618      	mov	r0, r3
 80159f0:	f7fd ff34 	bl	801385c <create_chain>
 80159f4:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	895b      	ldrh	r3, [r3, #10]
 80159fa:	025b      	lsls	r3, r3, #9
 80159fc:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 80159fe:	2300      	movs	r3, #0
 8015a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d102      	bne.n	8015a10 <f_mkdir+0x98>
 8015a0a:	2307      	movs	r3, #7
 8015a0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8015a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a12:	2b01      	cmp	r3, #1
 8015a14:	d102      	bne.n	8015a1c <f_mkdir+0xa4>
 8015a16:	2302      	movs	r3, #2
 8015a18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a22:	d102      	bne.n	8015a2a <f_mkdir+0xb2>
 8015a24:	2301      	movs	r3, #1
 8015a26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8015a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d106      	bne.n	8015a40 <f_mkdir+0xc8>
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7fd fc21 	bl	801327c <sync_window>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8015a40:	f7f7 f80c 	bl	800ca5c <get_fattime>
 8015a44:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8015a46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d16a      	bne.n	8015b24 <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8015a52:	4618      	mov	r0, r3
 8015a54:	f7fd fcf2 	bl	801343c <clust2sect>
 8015a58:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	3338      	adds	r3, #56	; 0x38
 8015a5e:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8015a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015a64:	2100      	movs	r1, #0
 8015a66:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015a68:	f7fd fa3f 	bl	8012eea <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8015a6c:	220b      	movs	r2, #11
 8015a6e:	2120      	movs	r1, #32
 8015a70:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015a72:	f7fd fa3a 	bl	8012eea <mem_set>
					dir[DIR_Name] = '.';
 8015a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a78:	222e      	movs	r2, #46	; 0x2e
 8015a7a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8015a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a7e:	330b      	adds	r3, #11
 8015a80:	2210      	movs	r2, #16
 8015a82:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8015a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a86:	3316      	adds	r3, #22
 8015a88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f7fd f9e0 	bl	8012e50 <st_dword>
					st_clust(fs, dir, dcl);
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015a94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7fe f952 	bl	8013d40 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a9e:	3320      	adds	r3, #32
 8015aa0:	2220      	movs	r2, #32
 8015aa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7fd f9ff 	bl	8012ea8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015aac:	3321      	adds	r3, #33	; 0x21
 8015aae:	222e      	movs	r2, #46	; 0x2e
 8015ab0:	701a      	strb	r2, [r3, #0]
 8015ab2:	69bb      	ldr	r3, [r7, #24]
 8015ab4:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	781b      	ldrb	r3, [r3, #0]
 8015aba:	2b03      	cmp	r3, #3
 8015abc:	d106      	bne.n	8015acc <f_mkdir+0x154>
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ac2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	d101      	bne.n	8015acc <f_mkdir+0x154>
 8015ac8:	2300      	movs	r3, #0
 8015aca:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8015acc:	68f8      	ldr	r0, [r7, #12]
 8015ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ad0:	3320      	adds	r3, #32
 8015ad2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015ad4:	4619      	mov	r1, r3
 8015ad6:	f7fe f933 	bl	8013d40 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	895b      	ldrh	r3, [r3, #10]
 8015ade:	65bb      	str	r3, [r7, #88]	; 0x58
 8015ae0:	e01b      	b.n	8015b1a <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 8015ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ae4:	1c5a      	adds	r2, r3, #1
 8015ae6:	657a      	str	r2, [r7, #84]	; 0x54
 8015ae8:	68fa      	ldr	r2, [r7, #12]
 8015aea:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	2201      	movs	r2, #1
 8015af0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7fd fbc1 	bl	801327c <sync_window>
 8015afa:	4603      	mov	r3, r0
 8015afc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8015b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d10c      	bne.n	8015b22 <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 8015b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015b0c:	2100      	movs	r1, #0
 8015b0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015b10:	f7fd f9eb 	bl	8012eea <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b16:	3b01      	subs	r3, #1
 8015b18:	65bb      	str	r3, [r7, #88]	; 0x58
 8015b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d1e0      	bne.n	8015ae2 <f_mkdir+0x16a>
 8015b20:	e000      	b.n	8015b24 <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 8015b22:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015b24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d107      	bne.n	8015b3c <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8015b2c:	f107 0310 	add.w	r3, r7, #16
 8015b30:	4618      	mov	r0, r3
 8015b32:	f7fe fb6d 	bl	8014210 <dir_register>
 8015b36:	4603      	mov	r3, r0
 8015b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8015b3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d120      	bne.n	8015b86 <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b46:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b4a:	3316      	adds	r3, #22
 8015b4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f7fd f97e 	bl	8012e50 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f7fe f8f0 	bl	8013d40 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b62:	330b      	adds	r3, #11
 8015b64:	2210      	movs	r2, #16
 8015b66:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	2201      	movs	r2, #1
 8015b6c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8015b6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d10e      	bne.n	8015b94 <f_mkdir+0x21c>
					res = sync_fs(fs);
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f7fd fbf1 	bl	8013360 <sync_fs>
 8015b7e:	4603      	mov	r3, r0
 8015b80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015b84:	e006      	b.n	8015b94 <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015b86:	f107 0310 	add.w	r3, r7, #16
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f7fd fdff 	bl	8013792 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015b94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3760      	adds	r7, #96	; 0x60
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8015ba0:	b590      	push	{r4, r7, lr}
 8015ba2:	b09d      	sub	sp, #116	; 0x74
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	60f8      	str	r0, [r7, #12]
 8015ba8:	607a      	str	r2, [r7, #4]
 8015baa:	603b      	str	r3, [r7, #0]
 8015bac:	460b      	mov	r3, r1
 8015bae:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8015bb0:	2301      	movs	r3, #1
 8015bb2:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8015bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015bb8:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8015bba:	f107 030c 	add.w	r3, r7, #12
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7fe feb2 	bl	8014928 <get_ldnumber>
 8015bc4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8015bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	da02      	bge.n	8015bd2 <f_mkfs+0x32>
 8015bcc:	230b      	movs	r3, #11
 8015bce:	f000 bc0d 	b.w	80163ec <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8015bd2:	4a94      	ldr	r2, [pc, #592]	; (8015e24 <f_mkfs+0x284>)
 8015bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d005      	beq.n	8015bea <f_mkfs+0x4a>
 8015bde:	4a91      	ldr	r2, [pc, #580]	; (8015e24 <f_mkfs+0x284>)
 8015be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015be6:	2200      	movs	r2, #0
 8015be8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8015bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8015bf6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7fd f84e 	bl	8012c9c <disk_initialize>
 8015c00:	4603      	mov	r3, r0
 8015c02:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8015c06:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8015c0a:	f003 0301 	and.w	r3, r3, #1
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d001      	beq.n	8015c16 <f_mkfs+0x76>
 8015c12:	2303      	movs	r3, #3
 8015c14:	e3ea      	b.n	80163ec <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8015c16:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8015c1a:	f003 0304 	and.w	r3, r3, #4
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d001      	beq.n	8015c26 <f_mkfs+0x86>
 8015c22:	230a      	movs	r3, #10
 8015c24:	e3e2      	b.n	80163ec <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8015c26:	f107 0214 	add.w	r2, r7, #20
 8015c2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015c2e:	2103      	movs	r1, #3
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7fd f899 	bl	8012d68 <disk_ioctl>
 8015c36:	4603      	mov	r3, r0
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d10c      	bne.n	8015c56 <f_mkfs+0xb6>
 8015c3c:	697b      	ldr	r3, [r7, #20]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d009      	beq.n	8015c56 <f_mkfs+0xb6>
 8015c42:	697b      	ldr	r3, [r7, #20]
 8015c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015c48:	d805      	bhi.n	8015c56 <f_mkfs+0xb6>
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	1e5a      	subs	r2, r3, #1
 8015c4e:	697b      	ldr	r3, [r7, #20]
 8015c50:	4013      	ands	r3, r2
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d001      	beq.n	8015c5a <f_mkfs+0xba>
 8015c56:	2301      	movs	r3, #1
 8015c58:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8015c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c5e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d003      	beq.n	8015c6e <f_mkfs+0xce>
 8015c66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015c68:	687a      	ldr	r2, [r7, #4]
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d309      	bcc.n	8015c82 <f_mkfs+0xe2>
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015c74:	d805      	bhi.n	8015c82 <f_mkfs+0xe2>
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	1e5a      	subs	r2, r3, #1
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	4013      	ands	r3, r2
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d001      	beq.n	8015c86 <f_mkfs+0xe6>
 8015c82:	2313      	movs	r3, #19
 8015c84:	e3b2      	b.n	80163ec <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8015c86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015c88:	687a      	ldr	r2, [r7, #4]
 8015c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015c8e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8015c94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8015ca0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca4:	fb02 f303 	mul.w	r3, r2, r3
 8015ca8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8015caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d101      	bne.n	8015cb4 <f_mkfs+0x114>
 8015cb0:	230e      	movs	r3, #14
 8015cb2:	e39b      	b.n	80163ec <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8015cb4:	f107 0210 	add.w	r2, r7, #16
 8015cb8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015cbc:	2101      	movs	r1, #1
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f7fd f852 	bl	8012d68 <disk_ioctl>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d001      	beq.n	8015cce <f_mkfs+0x12e>
 8015cca:	2301      	movs	r3, #1
 8015ccc:	e38e      	b.n	80163ec <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8015cce:	7afb      	ldrb	r3, [r7, #11]
 8015cd0:	f003 0308 	and.w	r3, r3, #8
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d001      	beq.n	8015cdc <f_mkfs+0x13c>
 8015cd8:	2300      	movs	r3, #0
 8015cda:	e000      	b.n	8015cde <f_mkfs+0x13e>
 8015cdc:	233f      	movs	r3, #63	; 0x3f
 8015cde:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8015ce0:	693b      	ldr	r3, [r7, #16]
 8015ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ce4:	429a      	cmp	r2, r3
 8015ce6:	d901      	bls.n	8015cec <f_mkfs+0x14c>
 8015ce8:	230e      	movs	r3, #14
 8015cea:	e37f      	b.n	80163ec <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8015cec:	693a      	ldr	r2, [r7, #16]
 8015cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf0:	1ad3      	subs	r3, r2, r3
 8015cf2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8015cf4:	693b      	ldr	r3, [r7, #16]
 8015cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8015cf8:	d801      	bhi.n	8015cfe <f_mkfs+0x15e>
 8015cfa:	230e      	movs	r3, #14
 8015cfc:	e376      	b.n	80163ec <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	2b80      	cmp	r3, #128	; 0x80
 8015d02:	d901      	bls.n	8015d08 <f_mkfs+0x168>
 8015d04:	2313      	movs	r3, #19
 8015d06:	e371      	b.n	80163ec <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8015d08:	7afb      	ldrb	r3, [r7, #11]
 8015d0a:	f003 0302 	and.w	r3, r3, #2
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d00d      	beq.n	8015d2e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8015d12:	7afb      	ldrb	r3, [r7, #11]
 8015d14:	f003 0307 	and.w	r3, r3, #7
 8015d18:	2b02      	cmp	r3, #2
 8015d1a:	d004      	beq.n	8015d26 <f_mkfs+0x186>
 8015d1c:	7afb      	ldrb	r3, [r7, #11]
 8015d1e:	f003 0301 	and.w	r3, r3, #1
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d103      	bne.n	8015d2e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8015d26:	2303      	movs	r3, #3
 8015d28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015d2c:	e009      	b.n	8015d42 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8015d2e:	7afb      	ldrb	r3, [r7, #11]
 8015d30:	f003 0301 	and.w	r3, r3, #1
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d101      	bne.n	8015d3c <f_mkfs+0x19c>
 8015d38:	2313      	movs	r3, #19
 8015d3a:	e357      	b.n	80163ec <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8015d3c:	2302      	movs	r3, #2
 8015d3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8015d46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015d4a:	2b03      	cmp	r3, #3
 8015d4c:	d13c      	bne.n	8015dc8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8015d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d11b      	bne.n	8015d8c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8015d54:	693b      	ldr	r3, [r7, #16]
 8015d56:	0c5b      	lsrs	r3, r3, #17
 8015d58:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8015d5e:	2301      	movs	r3, #1
 8015d60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015d62:	e005      	b.n	8015d70 <f_mkfs+0x1d0>
 8015d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d66:	3301      	adds	r3, #1
 8015d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8015d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d6c:	005b      	lsls	r3, r3, #1
 8015d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015d70:	4a2d      	ldr	r2, [pc, #180]	; (8015e28 <f_mkfs+0x288>)
 8015d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d007      	beq.n	8015d8c <f_mkfs+0x1ec>
 8015d7c:	4a2a      	ldr	r2, [pc, #168]	; (8015e28 <f_mkfs+0x288>)
 8015d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d84:	461a      	mov	r2, r3
 8015d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d88:	4293      	cmp	r3, r2
 8015d8a:	d2eb      	bcs.n	8015d64 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8015d8c:	693a      	ldr	r2, [r7, #16]
 8015d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d94:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8015d96:	6a3b      	ldr	r3, [r7, #32]
 8015d98:	3302      	adds	r3, #2
 8015d9a:	009a      	lsls	r2, r3, #2
 8015d9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015d9e:	4413      	add	r3, r2
 8015da0:	1e5a      	subs	r2, r3, #1
 8015da2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8015da8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8015daa:	2320      	movs	r3, #32
 8015dac:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 8015dae:	2300      	movs	r3, #0
 8015db0:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8015db2:	6a3b      	ldr	r3, [r7, #32]
 8015db4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015db8:	4293      	cmp	r3, r2
 8015dba:	d903      	bls.n	8015dc4 <f_mkfs+0x224>
 8015dbc:	6a3b      	ldr	r3, [r7, #32]
 8015dbe:	4a1b      	ldr	r2, [pc, #108]	; (8015e2c <f_mkfs+0x28c>)
 8015dc0:	4293      	cmp	r3, r2
 8015dc2:	d952      	bls.n	8015e6a <f_mkfs+0x2ca>
 8015dc4:	230e      	movs	r3, #14
 8015dc6:	e311      	b.n	80163ec <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8015dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d11b      	bne.n	8015e06 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	0b1b      	lsrs	r3, r3, #12
 8015dd2:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8015dd8:	2301      	movs	r3, #1
 8015dda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015ddc:	e005      	b.n	8015dea <f_mkfs+0x24a>
 8015dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015de0:	3301      	adds	r3, #1
 8015de2:	64bb      	str	r3, [r7, #72]	; 0x48
 8015de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015de6:	005b      	lsls	r3, r3, #1
 8015de8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015dea:	4a11      	ldr	r2, [pc, #68]	; (8015e30 <f_mkfs+0x290>)
 8015dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d007      	beq.n	8015e06 <f_mkfs+0x266>
 8015df6:	4a0e      	ldr	r2, [pc, #56]	; (8015e30 <f_mkfs+0x290>)
 8015df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015dfe:	461a      	mov	r2, r3
 8015e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015e02:	4293      	cmp	r3, r2
 8015e04:	d2eb      	bcs.n	8015dde <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8015e06:	693a      	ldr	r2, [r7, #16]
 8015e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e0e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8015e10:	6a3b      	ldr	r3, [r7, #32]
 8015e12:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015e16:	4293      	cmp	r3, r2
 8015e18:	d90c      	bls.n	8015e34 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8015e1a:	6a3b      	ldr	r3, [r7, #32]
 8015e1c:	3302      	adds	r3, #2
 8015e1e:	005b      	lsls	r3, r3, #1
 8015e20:	663b      	str	r3, [r7, #96]	; 0x60
 8015e22:	e012      	b.n	8015e4a <f_mkfs+0x2aa>
 8015e24:	20000c08 	.word	0x20000c08
 8015e28:	0801ba34 	.word	0x0801ba34
 8015e2c:	0ffffff5 	.word	0x0ffffff5
 8015e30:	0801ba44 	.word	0x0801ba44
				} else {
					fmt = FS_FAT12;
 8015e34:	2301      	movs	r3, #1
 8015e36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8015e3a:	6a3a      	ldr	r2, [r7, #32]
 8015e3c:	4613      	mov	r3, r2
 8015e3e:	005b      	lsls	r3, r3, #1
 8015e40:	4413      	add	r3, r2
 8015e42:	3301      	adds	r3, #1
 8015e44:	085b      	lsrs	r3, r3, #1
 8015e46:	3303      	adds	r3, #3
 8015e48:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8015e4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015e4e:	4413      	add	r3, r2
 8015e50:	1e5a      	subs	r2, r3, #1
 8015e52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e58:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8015e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e60:	015a      	lsls	r2, r3, #5
 8015e62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e68:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8015e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015e6e:	4413      	add	r3, r2
 8015e70:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8015e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e76:	fb02 f203 	mul.w	r2, r2, r3
 8015e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e7c:	4413      	add	r3, r2
 8015e7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015e80:	4413      	add	r3, r2
 8015e82:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8015e84:	697a      	ldr	r2, [r7, #20]
 8015e86:	69fb      	ldr	r3, [r7, #28]
 8015e88:	4413      	add	r3, r2
 8015e8a:	1e5a      	subs	r2, r3, #1
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	425b      	negs	r3, r3
 8015e90:	401a      	ands	r2, r3
 8015e92:	69fb      	ldr	r3, [r7, #28]
 8015e94:	1ad3      	subs	r3, r2, r3
 8015e96:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8015e98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015e9c:	2b03      	cmp	r3, #3
 8015e9e:	d108      	bne.n	8015eb2 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8015ea0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015ea4:	4413      	add	r3, r2
 8015ea6:	65bb      	str	r3, [r7, #88]	; 0x58
 8015ea8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015eac:	4413      	add	r3, r2
 8015eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015eb0:	e006      	b.n	8015ec0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8015eb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8015eba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015ebc:	4413      	add	r3, r2
 8015ebe:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8015ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ec2:	011a      	lsls	r2, r3, #4
 8015ec4:	69fb      	ldr	r3, [r7, #28]
 8015ec6:	441a      	add	r2, r3
 8015ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eca:	1ad2      	subs	r2, r2, r3
 8015ecc:	693b      	ldr	r3, [r7, #16]
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d901      	bls.n	8015ed6 <f_mkfs+0x336>
 8015ed2:	230e      	movs	r3, #14
 8015ed4:	e28a      	b.n	80163ec <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8015ed6:	693a      	ldr	r2, [r7, #16]
 8015ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015eda:	1ad2      	subs	r2, r2, r3
 8015edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ede:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015ee0:	fb01 f303 	mul.w	r3, r1, r3
 8015ee4:	1ad2      	subs	r2, r2, r3
 8015ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ee8:	1ad2      	subs	r2, r2, r3
 8015eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8015ef0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8015ef2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015ef6:	2b03      	cmp	r3, #3
 8015ef8:	d10f      	bne.n	8015f1a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8015efa:	6a3b      	ldr	r3, [r7, #32]
 8015efc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015f00:	4293      	cmp	r3, r2
 8015f02:	d80a      	bhi.n	8015f1a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d105      	bne.n	8015f16 <f_mkfs+0x376>
 8015f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f0c:	085b      	lsrs	r3, r3, #1
 8015f0e:	607b      	str	r3, [r7, #4]
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d144      	bne.n	8015fa0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8015f16:	230e      	movs	r3, #14
 8015f18:	e268      	b.n	80163ec <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8015f1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015f1e:	2b02      	cmp	r3, #2
 8015f20:	d133      	bne.n	8015f8a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8015f22:	6a3b      	ldr	r3, [r7, #32]
 8015f24:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015f28:	4293      	cmp	r3, r2
 8015f2a:	d91e      	bls.n	8015f6a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d107      	bne.n	8015f42 <f_mkfs+0x3a2>
 8015f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f34:	005b      	lsls	r3, r3, #1
 8015f36:	2b40      	cmp	r3, #64	; 0x40
 8015f38:	d803      	bhi.n	8015f42 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8015f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f3c:	005b      	lsls	r3, r3, #1
 8015f3e:	607b      	str	r3, [r7, #4]
 8015f40:	e033      	b.n	8015faa <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8015f42:	7afb      	ldrb	r3, [r7, #11]
 8015f44:	f003 0302 	and.w	r3, r3, #2
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d003      	beq.n	8015f54 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8015f4c:	2303      	movs	r3, #3
 8015f4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015f52:	e02a      	b.n	8015faa <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d105      	bne.n	8015f66 <f_mkfs+0x3c6>
 8015f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f5c:	005b      	lsls	r3, r3, #1
 8015f5e:	607b      	str	r3, [r7, #4]
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2b80      	cmp	r3, #128	; 0x80
 8015f64:	d91e      	bls.n	8015fa4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8015f66:	230e      	movs	r3, #14
 8015f68:	e240      	b.n	80163ec <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8015f6a:	6a3b      	ldr	r3, [r7, #32]
 8015f6c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015f70:	4293      	cmp	r3, r2
 8015f72:	d80a      	bhi.n	8015f8a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d105      	bne.n	8015f86 <f_mkfs+0x3e6>
 8015f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f7c:	005b      	lsls	r3, r3, #1
 8015f7e:	607b      	str	r3, [r7, #4]
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	2b80      	cmp	r3, #128	; 0x80
 8015f84:	d910      	bls.n	8015fa8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8015f86:	230e      	movs	r3, #14
 8015f88:	e230      	b.n	80163ec <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8015f8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015f8e:	2b01      	cmp	r3, #1
 8015f90:	d10c      	bne.n	8015fac <f_mkfs+0x40c>
 8015f92:	6a3b      	ldr	r3, [r7, #32]
 8015f94:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015f98:	4293      	cmp	r3, r2
 8015f9a:	d907      	bls.n	8015fac <f_mkfs+0x40c>
 8015f9c:	230e      	movs	r3, #14
 8015f9e:	e225      	b.n	80163ec <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015fa0:	bf00      	nop
 8015fa2:	e6ce      	b.n	8015d42 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015fa4:	bf00      	nop
 8015fa6:	e6cc      	b.n	8015d42 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015fa8:	bf00      	nop
			pau = au;
 8015faa:	e6ca      	b.n	8015d42 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8015fac:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8015fae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015fb0:	461a      	mov	r2, r3
 8015fb2:	2100      	movs	r1, #0
 8015fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fb6:	f7fc ff98 	bl	8012eea <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8015fba:	220b      	movs	r2, #11
 8015fbc:	49bc      	ldr	r1, [pc, #752]	; (80162b0 <f_mkfs+0x710>)
 8015fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fc0:	f7fc ff72 	bl	8012ea8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8015fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fc6:	330b      	adds	r3, #11
 8015fc8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015fca:	4611      	mov	r1, r2
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f7fc ff24 	bl	8012e1a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8015fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fd4:	330d      	adds	r3, #13
 8015fd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015fd8:	b2d2      	uxtb	r2, r2
 8015fda:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8015fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fde:	330e      	adds	r3, #14
 8015fe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015fe2:	b292      	uxth	r2, r2
 8015fe4:	4611      	mov	r1, r2
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7fc ff17 	bl	8012e1a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8015fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fee:	3310      	adds	r3, #16
 8015ff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015ff2:	b2d2      	uxtb	r2, r2
 8015ff4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8015ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff8:	f103 0211 	add.w	r2, r3, #17
 8015ffc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016000:	2b03      	cmp	r3, #3
 8016002:	d002      	beq.n	801600a <f_mkfs+0x46a>
 8016004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016006:	b29b      	uxth	r3, r3
 8016008:	e000      	b.n	801600c <f_mkfs+0x46c>
 801600a:	2300      	movs	r3, #0
 801600c:	4619      	mov	r1, r3
 801600e:	4610      	mov	r0, r2
 8016010:	f7fc ff03 	bl	8012e1a <st_word>
		if (sz_vol < 0x10000) {
 8016014:	693b      	ldr	r3, [r7, #16]
 8016016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801601a:	d208      	bcs.n	801602e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 801601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801601e:	3313      	adds	r3, #19
 8016020:	693a      	ldr	r2, [r7, #16]
 8016022:	b292      	uxth	r2, r2
 8016024:	4611      	mov	r1, r2
 8016026:	4618      	mov	r0, r3
 8016028:	f7fc fef7 	bl	8012e1a <st_word>
 801602c:	e006      	b.n	801603c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016030:	3320      	adds	r3, #32
 8016032:	693a      	ldr	r2, [r7, #16]
 8016034:	4611      	mov	r1, r2
 8016036:	4618      	mov	r0, r3
 8016038:	f7fc ff0a 	bl	8012e50 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 801603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801603e:	3315      	adds	r3, #21
 8016040:	22f8      	movs	r2, #248	; 0xf8
 8016042:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8016044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016046:	3318      	adds	r3, #24
 8016048:	213f      	movs	r1, #63	; 0x3f
 801604a:	4618      	mov	r0, r3
 801604c:	f7fc fee5 	bl	8012e1a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8016050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016052:	331a      	adds	r3, #26
 8016054:	21ff      	movs	r1, #255	; 0xff
 8016056:	4618      	mov	r0, r3
 8016058:	f7fc fedf 	bl	8012e1a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 801605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801605e:	331c      	adds	r3, #28
 8016060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016062:	4618      	mov	r0, r3
 8016064:	f7fc fef4 	bl	8012e50 <st_dword>
		if (fmt == FS_FAT32) {
 8016068:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801606c:	2b03      	cmp	r3, #3
 801606e:	d131      	bne.n	80160d4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8016070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016072:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8016076:	f7f6 fcf1 	bl	800ca5c <get_fattime>
 801607a:	4603      	mov	r3, r0
 801607c:	4619      	mov	r1, r3
 801607e:	4620      	mov	r0, r4
 8016080:	f7fc fee6 	bl	8012e50 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8016084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016086:	3324      	adds	r3, #36	; 0x24
 8016088:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801608a:	4618      	mov	r0, r3
 801608c:	f7fc fee0 	bl	8012e50 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8016090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016092:	332c      	adds	r3, #44	; 0x2c
 8016094:	2102      	movs	r1, #2
 8016096:	4618      	mov	r0, r3
 8016098:	f7fc feda 	bl	8012e50 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 801609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801609e:	3330      	adds	r3, #48	; 0x30
 80160a0:	2101      	movs	r1, #1
 80160a2:	4618      	mov	r0, r3
 80160a4:	f7fc feb9 	bl	8012e1a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80160a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160aa:	3332      	adds	r3, #50	; 0x32
 80160ac:	2106      	movs	r1, #6
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7fc feb3 	bl	8012e1a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80160b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160b6:	3340      	adds	r3, #64	; 0x40
 80160b8:	2280      	movs	r2, #128	; 0x80
 80160ba:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80160bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160be:	3342      	adds	r3, #66	; 0x42
 80160c0:	2229      	movs	r2, #41	; 0x29
 80160c2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80160c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160c6:	3347      	adds	r3, #71	; 0x47
 80160c8:	2213      	movs	r2, #19
 80160ca:	497a      	ldr	r1, [pc, #488]	; (80162b4 <f_mkfs+0x714>)
 80160cc:	4618      	mov	r0, r3
 80160ce:	f7fc feeb 	bl	8012ea8 <mem_cpy>
 80160d2:	e020      	b.n	8016116 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80160d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160d6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80160da:	f7f6 fcbf 	bl	800ca5c <get_fattime>
 80160de:	4603      	mov	r3, r0
 80160e0:	4619      	mov	r1, r3
 80160e2:	4620      	mov	r0, r4
 80160e4:	f7fc feb4 	bl	8012e50 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80160e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ea:	3316      	adds	r3, #22
 80160ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80160ee:	b292      	uxth	r2, r2
 80160f0:	4611      	mov	r1, r2
 80160f2:	4618      	mov	r0, r3
 80160f4:	f7fc fe91 	bl	8012e1a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80160f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160fa:	3324      	adds	r3, #36	; 0x24
 80160fc:	2280      	movs	r2, #128	; 0x80
 80160fe:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8016100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016102:	3326      	adds	r3, #38	; 0x26
 8016104:	2229      	movs	r2, #41	; 0x29
 8016106:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8016108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801610a:	332b      	adds	r3, #43	; 0x2b
 801610c:	2213      	movs	r2, #19
 801610e:	496a      	ldr	r1, [pc, #424]	; (80162b8 <f_mkfs+0x718>)
 8016110:	4618      	mov	r0, r3
 8016112:	f7fc fec9 	bl	8012ea8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8016116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016118:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801611c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016120:	4618      	mov	r0, r3
 8016122:	f7fc fe7a 	bl	8012e1a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8016126:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801612a:	2301      	movs	r3, #1
 801612c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801612e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016130:	f7fc fdfa 	bl	8012d28 <disk_write>
 8016134:	4603      	mov	r3, r0
 8016136:	2b00      	cmp	r3, #0
 8016138:	d001      	beq.n	801613e <f_mkfs+0x59e>
 801613a:	2301      	movs	r3, #1
 801613c:	e156      	b.n	80163ec <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801613e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016142:	2b03      	cmp	r3, #3
 8016144:	d140      	bne.n	80161c8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8016146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016148:	1d9a      	adds	r2, r3, #6
 801614a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801614e:	2301      	movs	r3, #1
 8016150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016152:	f7fc fde9 	bl	8012d28 <disk_write>
			mem_set(buf, 0, ss);
 8016156:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016158:	461a      	mov	r2, r3
 801615a:	2100      	movs	r1, #0
 801615c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801615e:	f7fc fec4 	bl	8012eea <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8016162:	4956      	ldr	r1, [pc, #344]	; (80162bc <f_mkfs+0x71c>)
 8016164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016166:	f7fc fe73 	bl	8012e50 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 801616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801616c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016170:	4953      	ldr	r1, [pc, #332]	; (80162c0 <f_mkfs+0x720>)
 8016172:	4618      	mov	r0, r3
 8016174:	f7fc fe6c 	bl	8012e50 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8016178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801617a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801617e:	6a3b      	ldr	r3, [r7, #32]
 8016180:	3b01      	subs	r3, #1
 8016182:	4619      	mov	r1, r3
 8016184:	4610      	mov	r0, r2
 8016186:	f7fc fe63 	bl	8012e50 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 801618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801618c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016190:	2102      	movs	r1, #2
 8016192:	4618      	mov	r0, r3
 8016194:	f7fc fe5c 	bl	8012e50 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8016198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801619a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801619e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7fc fe39 	bl	8012e1a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80161a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161aa:	1dda      	adds	r2, r3, #7
 80161ac:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80161b0:	2301      	movs	r3, #1
 80161b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80161b4:	f7fc fdb8 	bl	8012d28 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80161b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ba:	1c5a      	adds	r2, r3, #1
 80161bc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80161c0:	2301      	movs	r3, #1
 80161c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80161c4:	f7fc fdb0 	bl	8012d28 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80161c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80161ca:	2100      	movs	r1, #0
 80161cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161ce:	f7fc fe8c 	bl	8012eea <mem_set>
		sect = b_fat;		/* FAT start sector */
 80161d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80161d4:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80161d6:	2300      	movs	r3, #0
 80161d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80161da:	e04b      	b.n	8016274 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80161dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161e0:	2b03      	cmp	r3, #3
 80161e2:	d113      	bne.n	801620c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80161e4:	f06f 0107 	mvn.w	r1, #7
 80161e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161ea:	f7fc fe31 	bl	8012e50 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80161ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161f0:	3304      	adds	r3, #4
 80161f2:	f04f 31ff 	mov.w	r1, #4294967295
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7fc fe2a 	bl	8012e50 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80161fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161fe:	3308      	adds	r3, #8
 8016200:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8016204:	4618      	mov	r0, r3
 8016206:	f7fc fe23 	bl	8012e50 <st_dword>
 801620a:	e00b      	b.n	8016224 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 801620c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016210:	2b01      	cmp	r3, #1
 8016212:	d101      	bne.n	8016218 <f_mkfs+0x678>
 8016214:	4b2b      	ldr	r3, [pc, #172]	; (80162c4 <f_mkfs+0x724>)
 8016216:	e001      	b.n	801621c <f_mkfs+0x67c>
 8016218:	f06f 0307 	mvn.w	r3, #7
 801621c:	4619      	mov	r1, r3
 801621e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016220:	f7fc fe16 	bl	8012e50 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8016224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016226:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8016228:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801622c:	4293      	cmp	r3, r2
 801622e:	bf28      	it	cs
 8016230:	4613      	movcs	r3, r2
 8016232:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8016234:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8016238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801623a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801623c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801623e:	f7fc fd73 	bl	8012d28 <disk_write>
 8016242:	4603      	mov	r3, r0
 8016244:	2b00      	cmp	r3, #0
 8016246:	d001      	beq.n	801624c <f_mkfs+0x6ac>
 8016248:	2301      	movs	r3, #1
 801624a:	e0cf      	b.n	80163ec <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 801624c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801624e:	461a      	mov	r2, r3
 8016250:	2100      	movs	r1, #0
 8016252:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016254:	f7fc fe49 	bl	8012eea <mem_set>
				sect += n; nsect -= n;
 8016258:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801625a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801625c:	4413      	add	r3, r2
 801625e:	66bb      	str	r3, [r7, #104]	; 0x68
 8016260:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016264:	1ad3      	subs	r3, r2, r3
 8016266:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 8016268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801626a:	2b00      	cmp	r3, #0
 801626c:	d1dc      	bne.n	8016228 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801626e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016270:	3301      	adds	r3, #1
 8016272:	64bb      	str	r3, [r7, #72]	; 0x48
 8016274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016278:	429a      	cmp	r2, r3
 801627a:	d3af      	bcc.n	80161dc <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 801627c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016280:	2b03      	cmp	r3, #3
 8016282:	d101      	bne.n	8016288 <f_mkfs+0x6e8>
 8016284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016286:	e000      	b.n	801628a <f_mkfs+0x6ea>
 8016288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801628a:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 801628c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016290:	4293      	cmp	r3, r2
 8016292:	bf28      	it	cs
 8016294:	4613      	movcs	r3, r2
 8016296:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8016298:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801629c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801629e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80162a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80162a2:	f7fc fd41 	bl	8012d28 <disk_write>
 80162a6:	4603      	mov	r3, r0
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d00d      	beq.n	80162c8 <f_mkfs+0x728>
 80162ac:	2301      	movs	r3, #1
 80162ae:	e09d      	b.n	80163ec <f_mkfs+0x84c>
 80162b0:	08017ce8 	.word	0x08017ce8
 80162b4:	08017cf4 	.word	0x08017cf4
 80162b8:	08017d08 	.word	0x08017d08
 80162bc:	41615252 	.word	0x41615252
 80162c0:	61417272 	.word	0x61417272
 80162c4:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 80162c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80162ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162cc:	4413      	add	r3, r2
 80162ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80162d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80162d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162d4:	1ad3      	subs	r3, r2, r3
 80162d6:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 80162d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d1d6      	bne.n	801628c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80162de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80162e2:	2b03      	cmp	r3, #3
 80162e4:	d103      	bne.n	80162ee <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80162e6:	230c      	movs	r3, #12
 80162e8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80162ec:	e010      	b.n	8016310 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80162ee:	693b      	ldr	r3, [r7, #16]
 80162f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80162f4:	d303      	bcc.n	80162fe <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80162f6:	2306      	movs	r3, #6
 80162f8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80162fc:	e008      	b.n	8016310 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80162fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016302:	2b02      	cmp	r3, #2
 8016304:	d101      	bne.n	801630a <f_mkfs+0x76a>
 8016306:	2304      	movs	r3, #4
 8016308:	e000      	b.n	801630c <f_mkfs+0x76c>
 801630a:	2301      	movs	r3, #1
 801630c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8016310:	7afb      	ldrb	r3, [r7, #11]
 8016312:	f003 0308 	and.w	r3, r3, #8
 8016316:	2b00      	cmp	r3, #0
 8016318:	d15b      	bne.n	80163d2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 801631a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801631c:	461a      	mov	r2, r3
 801631e:	2100      	movs	r1, #0
 8016320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016322:	f7fc fde2 	bl	8012eea <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8016326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016328:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801632c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016330:	4618      	mov	r0, r3
 8016332:	f7fc fd72 	bl	8012e1a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8016336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016338:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801633c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801633e:	69bb      	ldr	r3, [r7, #24]
 8016340:	2200      	movs	r2, #0
 8016342:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8016344:	69bb      	ldr	r3, [r7, #24]
 8016346:	3301      	adds	r3, #1
 8016348:	2201      	movs	r2, #1
 801634a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 801634c:	69bb      	ldr	r3, [r7, #24]
 801634e:	3302      	adds	r3, #2
 8016350:	2201      	movs	r2, #1
 8016352:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8016354:	69bb      	ldr	r3, [r7, #24]
 8016356:	3303      	adds	r3, #3
 8016358:	2200      	movs	r2, #0
 801635a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 801635c:	69bb      	ldr	r3, [r7, #24]
 801635e:	3304      	adds	r3, #4
 8016360:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8016364:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8016366:	693a      	ldr	r2, [r7, #16]
 8016368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801636a:	441a      	add	r2, r3
 801636c:	4b21      	ldr	r3, [pc, #132]	; (80163f4 <f_mkfs+0x854>)
 801636e:	fba3 1302 	umull	r1, r3, r3, r2
 8016372:	1ad2      	subs	r2, r2, r3
 8016374:	0852      	lsrs	r2, r2, #1
 8016376:	4413      	add	r3, r2
 8016378:	0b5b      	lsrs	r3, r3, #13
 801637a:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 801637c:	69bb      	ldr	r3, [r7, #24]
 801637e:	3305      	adds	r3, #5
 8016380:	22fe      	movs	r2, #254	; 0xfe
 8016382:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8016384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016386:	089b      	lsrs	r3, r3, #2
 8016388:	b2da      	uxtb	r2, r3
 801638a:	69bb      	ldr	r3, [r7, #24]
 801638c:	3306      	adds	r3, #6
 801638e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8016392:	b2d2      	uxtb	r2, r2
 8016394:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8016396:	69bb      	ldr	r3, [r7, #24]
 8016398:	3307      	adds	r3, #7
 801639a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801639c:	b2d2      	uxtb	r2, r2
 801639e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80163a0:	69bb      	ldr	r3, [r7, #24]
 80163a2:	3308      	adds	r3, #8
 80163a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7fc fd52 	bl	8012e50 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80163ac:	69bb      	ldr	r3, [r7, #24]
 80163ae:	330c      	adds	r3, #12
 80163b0:	693a      	ldr	r2, [r7, #16]
 80163b2:	4611      	mov	r1, r2
 80163b4:	4618      	mov	r0, r3
 80163b6:	f7fc fd4b 	bl	8012e50 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80163ba:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80163be:	2301      	movs	r3, #1
 80163c0:	2200      	movs	r2, #0
 80163c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80163c4:	f7fc fcb0 	bl	8012d28 <disk_write>
 80163c8:	4603      	mov	r3, r0
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d001      	beq.n	80163d2 <f_mkfs+0x832>
 80163ce:	2301      	movs	r3, #1
 80163d0:	e00c      	b.n	80163ec <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80163d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80163d6:	2200      	movs	r2, #0
 80163d8:	2100      	movs	r1, #0
 80163da:	4618      	mov	r0, r3
 80163dc:	f7fc fcc4 	bl	8012d68 <disk_ioctl>
 80163e0:	4603      	mov	r3, r0
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d001      	beq.n	80163ea <f_mkfs+0x84a>
 80163e6:	2301      	movs	r3, #1
 80163e8:	e000      	b.n	80163ec <f_mkfs+0x84c>

	return FR_OK;
 80163ea:	2300      	movs	r3, #0
}
 80163ec:	4618      	mov	r0, r3
 80163ee:	3774      	adds	r7, #116	; 0x74
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd90      	pop	{r4, r7, pc}
 80163f4:	0515565b 	.word	0x0515565b

080163f8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b084      	sub	sp, #16
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
 8016400:	460b      	mov	r3, r1
 8016402:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8016404:	78fb      	ldrb	r3, [r7, #3]
 8016406:	2b0a      	cmp	r3, #10
 8016408:	d103      	bne.n	8016412 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801640a:	210d      	movs	r1, #13
 801640c:	6878      	ldr	r0, [r7, #4]
 801640e:	f7ff fff3 	bl	80163f8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	685b      	ldr	r3, [r3, #4]
 8016416:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	2b00      	cmp	r3, #0
 801641c:	db25      	blt.n	801646a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	1c5a      	adds	r2, r3, #1
 8016422:	60fa      	str	r2, [r7, #12]
 8016424:	687a      	ldr	r2, [r7, #4]
 8016426:	4413      	add	r3, r2
 8016428:	78fa      	ldrb	r2, [r7, #3]
 801642a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	2b3c      	cmp	r3, #60	; 0x3c
 8016430:	dd12      	ble.n	8016458 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	6818      	ldr	r0, [r3, #0]
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	f103 010c 	add.w	r1, r3, #12
 801643c:	68fa      	ldr	r2, [r7, #12]
 801643e:	f107 0308 	add.w	r3, r7, #8
 8016442:	f7fe ff99 	bl	8015378 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8016446:	68ba      	ldr	r2, [r7, #8]
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	429a      	cmp	r2, r3
 801644c:	d101      	bne.n	8016452 <putc_bfd+0x5a>
 801644e:	2300      	movs	r3, #0
 8016450:	e001      	b.n	8016456 <putc_bfd+0x5e>
 8016452:	f04f 33ff 	mov.w	r3, #4294967295
 8016456:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	68fa      	ldr	r2, [r7, #12]
 801645c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	689b      	ldr	r3, [r3, #8]
 8016462:	1c5a      	adds	r2, r3, #1
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	609a      	str	r2, [r3, #8]
 8016468:	e000      	b.n	801646c <putc_bfd+0x74>
	if (i < 0) return;
 801646a:	bf00      	nop
}
 801646c:	3710      	adds	r7, #16
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}

08016472 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8016472:	b580      	push	{r7, lr}
 8016474:	b084      	sub	sp, #16
 8016476:	af00      	add	r7, sp, #0
 8016478:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	685b      	ldr	r3, [r3, #4]
 801647e:	2b00      	cmp	r3, #0
 8016480:	db17      	blt.n	80164b2 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	6818      	ldr	r0, [r3, #0]
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	f103 010c 	add.w	r1, r3, #12
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	685b      	ldr	r3, [r3, #4]
 8016490:	461a      	mov	r2, r3
 8016492:	f107 030c 	add.w	r3, r7, #12
 8016496:	f7fe ff6f 	bl	8015378 <f_write>
 801649a:	4603      	mov	r3, r0
 801649c:	2b00      	cmp	r3, #0
 801649e:	d108      	bne.n	80164b2 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	685b      	ldr	r3, [r3, #4]
 80164a4:	461a      	mov	r2, r3
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d102      	bne.n	80164b2 <putc_flush+0x40>
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	689b      	ldr	r3, [r3, #8]
 80164b0:	e001      	b.n	80164b6 <putc_flush+0x44>
	return EOF;
 80164b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164b6:	4618      	mov	r0, r3
 80164b8:	3710      	adds	r7, #16
 80164ba:	46bd      	mov	sp, r7
 80164bc:	bd80      	pop	{r7, pc}

080164be <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80164be:	b480      	push	{r7}
 80164c0:	b083      	sub	sp, #12
 80164c2:	af00      	add	r7, sp, #0
 80164c4:	6078      	str	r0, [r7, #4]
 80164c6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	683a      	ldr	r2, [r7, #0]
 80164cc:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	2200      	movs	r2, #0
 80164d2:	605a      	str	r2, [r3, #4]
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	685a      	ldr	r2, [r3, #4]
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	609a      	str	r2, [r3, #8]
}
 80164dc:	bf00      	nop
 80164de:	370c      	adds	r7, #12
 80164e0:	46bd      	mov	sp, r7
 80164e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e6:	4770      	bx	lr

080164e8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b096      	sub	sp, #88	; 0x58
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
 80164f0:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80164f2:	f107 030c 	add.w	r3, r7, #12
 80164f6:	6839      	ldr	r1, [r7, #0]
 80164f8:	4618      	mov	r0, r3
 80164fa:	f7ff ffe0 	bl	80164be <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80164fe:	e009      	b.n	8016514 <f_puts+0x2c>
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	1c5a      	adds	r2, r3, #1
 8016504:	607a      	str	r2, [r7, #4]
 8016506:	781a      	ldrb	r2, [r3, #0]
 8016508:	f107 030c 	add.w	r3, r7, #12
 801650c:	4611      	mov	r1, r2
 801650e:	4618      	mov	r0, r3
 8016510:	f7ff ff72 	bl	80163f8 <putc_bfd>
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	781b      	ldrb	r3, [r3, #0]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d1f1      	bne.n	8016500 <f_puts+0x18>
	return putc_flush(&pb);
 801651c:	f107 030c 	add.w	r3, r7, #12
 8016520:	4618      	mov	r0, r3
 8016522:	f7ff ffa6 	bl	8016472 <putc_flush>
 8016526:	4603      	mov	r3, r0
}
 8016528:	4618      	mov	r0, r3
 801652a:	3758      	adds	r7, #88	; 0x58
 801652c:	46bd      	mov	sp, r7
 801652e:	bd80      	pop	{r7, pc}

08016530 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016530:	b480      	push	{r7}
 8016532:	b087      	sub	sp, #28
 8016534:	af00      	add	r7, sp, #0
 8016536:	60f8      	str	r0, [r7, #12]
 8016538:	60b9      	str	r1, [r7, #8]
 801653a:	4613      	mov	r3, r2
 801653c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801653e:	2301      	movs	r3, #1
 8016540:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016542:	2300      	movs	r3, #0
 8016544:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016546:	4b1f      	ldr	r3, [pc, #124]	; (80165c4 <FATFS_LinkDriverEx+0x94>)
 8016548:	7a5b      	ldrb	r3, [r3, #9]
 801654a:	b2db      	uxtb	r3, r3
 801654c:	2b00      	cmp	r3, #0
 801654e:	d131      	bne.n	80165b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016550:	4b1c      	ldr	r3, [pc, #112]	; (80165c4 <FATFS_LinkDriverEx+0x94>)
 8016552:	7a5b      	ldrb	r3, [r3, #9]
 8016554:	b2db      	uxtb	r3, r3
 8016556:	461a      	mov	r2, r3
 8016558:	4b1a      	ldr	r3, [pc, #104]	; (80165c4 <FATFS_LinkDriverEx+0x94>)
 801655a:	2100      	movs	r1, #0
 801655c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801655e:	4b19      	ldr	r3, [pc, #100]	; (80165c4 <FATFS_LinkDriverEx+0x94>)
 8016560:	7a5b      	ldrb	r3, [r3, #9]
 8016562:	b2db      	uxtb	r3, r3
 8016564:	4a17      	ldr	r2, [pc, #92]	; (80165c4 <FATFS_LinkDriverEx+0x94>)
 8016566:	009b      	lsls	r3, r3, #2
 8016568:	4413      	add	r3, r2
 801656a:	68fa      	ldr	r2, [r7, #12]
 801656c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801656e:	4b15      	ldr	r3, [pc, #84]	; (80165c4 <FATFS_LinkDriverEx+0x94>)
 8016570:	7a5b      	ldrb	r3, [r3, #9]
 8016572:	b2db      	uxtb	r3, r3
 8016574:	461a      	mov	r2, r3
 8016576:	4b13      	ldr	r3, [pc, #76]	; (80165c4 <FATFS_LinkDriverEx+0x94>)
 8016578:	4413      	add	r3, r2
 801657a:	79fa      	ldrb	r2, [r7, #7]
 801657c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801657e:	4b11      	ldr	r3, [pc, #68]	; (80165c4 <FATFS_LinkDriverEx+0x94>)
 8016580:	7a5b      	ldrb	r3, [r3, #9]
 8016582:	b2db      	uxtb	r3, r3
 8016584:	1c5a      	adds	r2, r3, #1
 8016586:	b2d1      	uxtb	r1, r2
 8016588:	4a0e      	ldr	r2, [pc, #56]	; (80165c4 <FATFS_LinkDriverEx+0x94>)
 801658a:	7251      	strb	r1, [r2, #9]
 801658c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801658e:	7dbb      	ldrb	r3, [r7, #22]
 8016590:	3330      	adds	r3, #48	; 0x30
 8016592:	b2da      	uxtb	r2, r3
 8016594:	68bb      	ldr	r3, [r7, #8]
 8016596:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016598:	68bb      	ldr	r3, [r7, #8]
 801659a:	3301      	adds	r3, #1
 801659c:	223a      	movs	r2, #58	; 0x3a
 801659e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80165a0:	68bb      	ldr	r3, [r7, #8]
 80165a2:	3302      	adds	r3, #2
 80165a4:	222f      	movs	r2, #47	; 0x2f
 80165a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	3303      	adds	r3, #3
 80165ac:	2200      	movs	r2, #0
 80165ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80165b0:	2300      	movs	r3, #0
 80165b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80165b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	371c      	adds	r7, #28
 80165ba:	46bd      	mov	sp, r7
 80165bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c0:	4770      	bx	lr
 80165c2:	bf00      	nop
 80165c4:	20000e30 	.word	0x20000e30

080165c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b082      	sub	sp, #8
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
 80165d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80165d2:	2200      	movs	r2, #0
 80165d4:	6839      	ldr	r1, [r7, #0]
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f7ff ffaa 	bl	8016530 <FATFS_LinkDriverEx>
 80165dc:	4603      	mov	r3, r0
}
 80165de:	4618      	mov	r0, r3
 80165e0:	3708      	adds	r7, #8
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}
	...

080165e8 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 80165e8:	b480      	push	{r7}
 80165ea:	b085      	sub	sp, #20
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
 80165f0:	460b      	mov	r3, r1
 80165f2:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80165f4:	2300      	movs	r3, #0
 80165f6:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80165f8:	2301      	movs	r3, #1
 80165fa:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80165fc:	4b15      	ldr	r3, [pc, #84]	; (8016654 <FATFS_UnLinkDriverEx+0x6c>)
 80165fe:	7a5b      	ldrb	r3, [r3, #9]
 8016600:	b2db      	uxtb	r3, r3
 8016602:	2b00      	cmp	r3, #0
 8016604:	d01e      	beq.n	8016644 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	781b      	ldrb	r3, [r3, #0]
 801660a:	3b30      	subs	r3, #48	; 0x30
 801660c:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 801660e:	7bbb      	ldrb	r3, [r7, #14]
 8016610:	4a10      	ldr	r2, [pc, #64]	; (8016654 <FATFS_UnLinkDriverEx+0x6c>)
 8016612:	009b      	lsls	r3, r3, #2
 8016614:	4413      	add	r3, r2
 8016616:	685b      	ldr	r3, [r3, #4]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d013      	beq.n	8016644 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 801661c:	7bbb      	ldrb	r3, [r7, #14]
 801661e:	4a0d      	ldr	r2, [pc, #52]	; (8016654 <FATFS_UnLinkDriverEx+0x6c>)
 8016620:	009b      	lsls	r3, r3, #2
 8016622:	4413      	add	r3, r2
 8016624:	2200      	movs	r2, #0
 8016626:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8016628:	7bbb      	ldrb	r3, [r7, #14]
 801662a:	4a0a      	ldr	r2, [pc, #40]	; (8016654 <FATFS_UnLinkDriverEx+0x6c>)
 801662c:	4413      	add	r3, r2
 801662e:	2200      	movs	r2, #0
 8016630:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8016632:	4b08      	ldr	r3, [pc, #32]	; (8016654 <FATFS_UnLinkDriverEx+0x6c>)
 8016634:	7a5b      	ldrb	r3, [r3, #9]
 8016636:	b2db      	uxtb	r3, r3
 8016638:	3b01      	subs	r3, #1
 801663a:	b2da      	uxtb	r2, r3
 801663c:	4b05      	ldr	r3, [pc, #20]	; (8016654 <FATFS_UnLinkDriverEx+0x6c>)
 801663e:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8016640:	2300      	movs	r3, #0
 8016642:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8016644:	7bfb      	ldrb	r3, [r7, #15]
}
 8016646:	4618      	mov	r0, r3
 8016648:	3714      	adds	r7, #20
 801664a:	46bd      	mov	sp, r7
 801664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016650:	4770      	bx	lr
 8016652:	bf00      	nop
 8016654:	20000e30 	.word	0x20000e30

08016658 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b082      	sub	sp, #8
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8016660:	2100      	movs	r1, #0
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f7ff ffc0 	bl	80165e8 <FATFS_UnLinkDriverEx>
 8016668:	4603      	mov	r3, r0
}
 801666a:	4618      	mov	r0, r3
 801666c:	3708      	adds	r7, #8
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}
	...

08016674 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8016674:	b480      	push	{r7}
 8016676:	b085      	sub	sp, #20
 8016678:	af00      	add	r7, sp, #0
 801667a:	4603      	mov	r3, r0
 801667c:	6039      	str	r1, [r7, #0]
 801667e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016680:	88fb      	ldrh	r3, [r7, #6]
 8016682:	2b7f      	cmp	r3, #127	; 0x7f
 8016684:	d802      	bhi.n	801668c <ff_convert+0x18>
		c = chr;
 8016686:	88fb      	ldrh	r3, [r7, #6]
 8016688:	81fb      	strh	r3, [r7, #14]
 801668a:	e025      	b.n	80166d8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d00b      	beq.n	80166aa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8016692:	88fb      	ldrh	r3, [r7, #6]
 8016694:	2bff      	cmp	r3, #255	; 0xff
 8016696:	d805      	bhi.n	80166a4 <ff_convert+0x30>
 8016698:	88fb      	ldrh	r3, [r7, #6]
 801669a:	3b80      	subs	r3, #128	; 0x80
 801669c:	4a12      	ldr	r2, [pc, #72]	; (80166e8 <ff_convert+0x74>)
 801669e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80166a2:	e000      	b.n	80166a6 <ff_convert+0x32>
 80166a4:	2300      	movs	r3, #0
 80166a6:	81fb      	strh	r3, [r7, #14]
 80166a8:	e016      	b.n	80166d8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80166aa:	2300      	movs	r3, #0
 80166ac:	81fb      	strh	r3, [r7, #14]
 80166ae:	e009      	b.n	80166c4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80166b0:	89fb      	ldrh	r3, [r7, #14]
 80166b2:	4a0d      	ldr	r2, [pc, #52]	; (80166e8 <ff_convert+0x74>)
 80166b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80166b8:	88fa      	ldrh	r2, [r7, #6]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d006      	beq.n	80166cc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80166be:	89fb      	ldrh	r3, [r7, #14]
 80166c0:	3301      	adds	r3, #1
 80166c2:	81fb      	strh	r3, [r7, #14]
 80166c4:	89fb      	ldrh	r3, [r7, #14]
 80166c6:	2b7f      	cmp	r3, #127	; 0x7f
 80166c8:	d9f2      	bls.n	80166b0 <ff_convert+0x3c>
 80166ca:	e000      	b.n	80166ce <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80166cc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80166ce:	89fb      	ldrh	r3, [r7, #14]
 80166d0:	3380      	adds	r3, #128	; 0x80
 80166d2:	b29b      	uxth	r3, r3
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80166d8:	89fb      	ldrh	r3, [r7, #14]
}
 80166da:	4618      	mov	r0, r3
 80166dc:	3714      	adds	r7, #20
 80166de:	46bd      	mov	sp, r7
 80166e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e4:	4770      	bx	lr
 80166e6:	bf00      	nop
 80166e8:	0801ba54 	.word	0x0801ba54

080166ec <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80166ec:	b480      	push	{r7}
 80166ee:	b087      	sub	sp, #28
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	4603      	mov	r3, r0
 80166f4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80166f6:	88fb      	ldrh	r3, [r7, #6]
 80166f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80166fc:	d201      	bcs.n	8016702 <ff_wtoupper+0x16>
 80166fe:	4b3e      	ldr	r3, [pc, #248]	; (80167f8 <ff_wtoupper+0x10c>)
 8016700:	e000      	b.n	8016704 <ff_wtoupper+0x18>
 8016702:	4b3e      	ldr	r3, [pc, #248]	; (80167fc <ff_wtoupper+0x110>)
 8016704:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8016706:	697b      	ldr	r3, [r7, #20]
 8016708:	1c9a      	adds	r2, r3, #2
 801670a:	617a      	str	r2, [r7, #20]
 801670c:	881b      	ldrh	r3, [r3, #0]
 801670e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8016710:	8a7b      	ldrh	r3, [r7, #18]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d068      	beq.n	80167e8 <ff_wtoupper+0xfc>
 8016716:	88fa      	ldrh	r2, [r7, #6]
 8016718:	8a7b      	ldrh	r3, [r7, #18]
 801671a:	429a      	cmp	r2, r3
 801671c:	d364      	bcc.n	80167e8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801671e:	697b      	ldr	r3, [r7, #20]
 8016720:	1c9a      	adds	r2, r3, #2
 8016722:	617a      	str	r2, [r7, #20]
 8016724:	881b      	ldrh	r3, [r3, #0]
 8016726:	823b      	strh	r3, [r7, #16]
 8016728:	8a3b      	ldrh	r3, [r7, #16]
 801672a:	0a1b      	lsrs	r3, r3, #8
 801672c:	81fb      	strh	r3, [r7, #14]
 801672e:	8a3b      	ldrh	r3, [r7, #16]
 8016730:	b2db      	uxtb	r3, r3
 8016732:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8016734:	88fa      	ldrh	r2, [r7, #6]
 8016736:	8a79      	ldrh	r1, [r7, #18]
 8016738:	8a3b      	ldrh	r3, [r7, #16]
 801673a:	440b      	add	r3, r1
 801673c:	429a      	cmp	r2, r3
 801673e:	da49      	bge.n	80167d4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8016740:	89fb      	ldrh	r3, [r7, #14]
 8016742:	2b08      	cmp	r3, #8
 8016744:	d84f      	bhi.n	80167e6 <ff_wtoupper+0xfa>
 8016746:	a201      	add	r2, pc, #4	; (adr r2, 801674c <ff_wtoupper+0x60>)
 8016748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801674c:	08016771 	.word	0x08016771
 8016750:	08016783 	.word	0x08016783
 8016754:	08016799 	.word	0x08016799
 8016758:	080167a1 	.word	0x080167a1
 801675c:	080167a9 	.word	0x080167a9
 8016760:	080167b1 	.word	0x080167b1
 8016764:	080167b9 	.word	0x080167b9
 8016768:	080167c1 	.word	0x080167c1
 801676c:	080167c9 	.word	0x080167c9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8016770:	88fa      	ldrh	r2, [r7, #6]
 8016772:	8a7b      	ldrh	r3, [r7, #18]
 8016774:	1ad3      	subs	r3, r2, r3
 8016776:	005b      	lsls	r3, r3, #1
 8016778:	697a      	ldr	r2, [r7, #20]
 801677a:	4413      	add	r3, r2
 801677c:	881b      	ldrh	r3, [r3, #0]
 801677e:	80fb      	strh	r3, [r7, #6]
 8016780:	e027      	b.n	80167d2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8016782:	88fa      	ldrh	r2, [r7, #6]
 8016784:	8a7b      	ldrh	r3, [r7, #18]
 8016786:	1ad3      	subs	r3, r2, r3
 8016788:	b29b      	uxth	r3, r3
 801678a:	f003 0301 	and.w	r3, r3, #1
 801678e:	b29b      	uxth	r3, r3
 8016790:	88fa      	ldrh	r2, [r7, #6]
 8016792:	1ad3      	subs	r3, r2, r3
 8016794:	80fb      	strh	r3, [r7, #6]
 8016796:	e01c      	b.n	80167d2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8016798:	88fb      	ldrh	r3, [r7, #6]
 801679a:	3b10      	subs	r3, #16
 801679c:	80fb      	strh	r3, [r7, #6]
 801679e:	e018      	b.n	80167d2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80167a0:	88fb      	ldrh	r3, [r7, #6]
 80167a2:	3b20      	subs	r3, #32
 80167a4:	80fb      	strh	r3, [r7, #6]
 80167a6:	e014      	b.n	80167d2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80167a8:	88fb      	ldrh	r3, [r7, #6]
 80167aa:	3b30      	subs	r3, #48	; 0x30
 80167ac:	80fb      	strh	r3, [r7, #6]
 80167ae:	e010      	b.n	80167d2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80167b0:	88fb      	ldrh	r3, [r7, #6]
 80167b2:	3b1a      	subs	r3, #26
 80167b4:	80fb      	strh	r3, [r7, #6]
 80167b6:	e00c      	b.n	80167d2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80167b8:	88fb      	ldrh	r3, [r7, #6]
 80167ba:	3308      	adds	r3, #8
 80167bc:	80fb      	strh	r3, [r7, #6]
 80167be:	e008      	b.n	80167d2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80167c0:	88fb      	ldrh	r3, [r7, #6]
 80167c2:	3b50      	subs	r3, #80	; 0x50
 80167c4:	80fb      	strh	r3, [r7, #6]
 80167c6:	e004      	b.n	80167d2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80167c8:	88fb      	ldrh	r3, [r7, #6]
 80167ca:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80167ce:	80fb      	strh	r3, [r7, #6]
 80167d0:	bf00      	nop
			}
			break;
 80167d2:	e008      	b.n	80167e6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80167d4:	89fb      	ldrh	r3, [r7, #14]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d195      	bne.n	8016706 <ff_wtoupper+0x1a>
 80167da:	8a3b      	ldrh	r3, [r7, #16]
 80167dc:	005b      	lsls	r3, r3, #1
 80167de:	697a      	ldr	r2, [r7, #20]
 80167e0:	4413      	add	r3, r2
 80167e2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80167e4:	e78f      	b.n	8016706 <ff_wtoupper+0x1a>
			break;
 80167e6:	bf00      	nop
	}

	return chr;
 80167e8:	88fb      	ldrh	r3, [r7, #6]
}
 80167ea:	4618      	mov	r0, r3
 80167ec:	371c      	adds	r7, #28
 80167ee:	46bd      	mov	sp, r7
 80167f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f4:	4770      	bx	lr
 80167f6:	bf00      	nop
 80167f8:	0801bb54 	.word	0x0801bb54
 80167fc:	0801bd48 	.word	0x0801bd48

08016800 <rxCliInput>:

	cliInitialized = true;
	return CLI_OK;
}

void rxCliInput(uint8_t* Buf, uint32_t *Len) {
 8016800:	b580      	push	{r7, lr}
 8016802:	b082      	sub	sp, #8
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
 8016808:	6039      	str	r1, [r7, #0]
	if (Buf[0] != 13){					// Ignore Return Character
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	781b      	ldrb	r3, [r3, #0]
 801680e:	2b0d      	cmp	r3, #13
 8016810:	d00d      	beq.n	801682e <rxCliInput+0x2e>
		usbCli.rxFlag = true;			/* Set the flag for the parser				*/
 8016812:	4b09      	ldr	r3, [pc, #36]	; (8016838 <rxCliInput+0x38>)
 8016814:	2201      	movs	r2, #1
 8016816:	719a      	strb	r2, [r3, #6]
		usbCli.cmd_len = Len[0];		/* Store the command length for the parser	*/
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	4a06      	ldr	r2, [pc, #24]	; (8016838 <rxCliInput+0x38>)
 801681e:	6093      	str	r3, [r2, #8]

		// Copy the Received String to the Buffer in the structure
		memcpy(usbCli.cmd_buffer, Buf, usbCli.cmd_len);
 8016820:	4b05      	ldr	r3, [pc, #20]	; (8016838 <rxCliInput+0x38>)
 8016822:	689b      	ldr	r3, [r3, #8]
 8016824:	461a      	mov	r2, r3
 8016826:	6879      	ldr	r1, [r7, #4]
 8016828:	4804      	ldr	r0, [pc, #16]	; (801683c <rxCliInput+0x3c>)
 801682a:	f000 fd6a 	bl	8017302 <memcpy>
	}
}
 801682e:	bf00      	nop
 8016830:	3708      	adds	r7, #8
 8016832:	46bd      	mov	sp, r7
 8016834:	bd80      	pop	{r7, pc}
 8016836:	bf00      	nop
 8016838:	20000e3c 	.word	0x20000e3c
 801683c:	20000e48 	.word	0x20000e48

08016840 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016840:	b580      	push	{r7, lr}
 8016842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016844:	2200      	movs	r2, #0
 8016846:	4912      	ldr	r1, [pc, #72]	; (8016890 <MX_USB_DEVICE_Init+0x50>)
 8016848:	4812      	ldr	r0, [pc, #72]	; (8016894 <MX_USB_DEVICE_Init+0x54>)
 801684a:	f7fb f9b3 	bl	8011bb4 <USBD_Init>
 801684e:	4603      	mov	r3, r0
 8016850:	2b00      	cmp	r3, #0
 8016852:	d001      	beq.n	8016858 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016854:	f7ee fa88 	bl	8004d68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016858:	490f      	ldr	r1, [pc, #60]	; (8016898 <MX_USB_DEVICE_Init+0x58>)
 801685a:	480e      	ldr	r0, [pc, #56]	; (8016894 <MX_USB_DEVICE_Init+0x54>)
 801685c:	f7fb f9d5 	bl	8011c0a <USBD_RegisterClass>
 8016860:	4603      	mov	r3, r0
 8016862:	2b00      	cmp	r3, #0
 8016864:	d001      	beq.n	801686a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016866:	f7ee fa7f 	bl	8004d68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801686a:	490c      	ldr	r1, [pc, #48]	; (801689c <MX_USB_DEVICE_Init+0x5c>)
 801686c:	4809      	ldr	r0, [pc, #36]	; (8016894 <MX_USB_DEVICE_Init+0x54>)
 801686e:	f7fb f903 	bl	8011a78 <USBD_CDC_RegisterInterface>
 8016872:	4603      	mov	r3, r0
 8016874:	2b00      	cmp	r3, #0
 8016876:	d001      	beq.n	801687c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016878:	f7ee fa76 	bl	8004d68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801687c:	4805      	ldr	r0, [pc, #20]	; (8016894 <MX_USB_DEVICE_Init+0x54>)
 801687e:	f7fb f9de 	bl	8011c3e <USBD_Start>
 8016882:	4603      	mov	r3, r0
 8016884:	2b00      	cmp	r3, #0
 8016886:	d001      	beq.n	801688c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016888:	f7ee fa6e 	bl	8004d68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801688c:	bf00      	nop
 801688e:	bd80      	pop	{r7, pc}
 8016890:	20000188 	.word	0x20000188
 8016894:	200017b4 	.word	0x200017b4
 8016898:	2000006c 	.word	0x2000006c
 801689c:	20000178 	.word	0x20000178

080168a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80168a4:	2200      	movs	r2, #0
 80168a6:	4905      	ldr	r1, [pc, #20]	; (80168bc <CDC_Init_FS+0x1c>)
 80168a8:	4805      	ldr	r0, [pc, #20]	; (80168c0 <CDC_Init_FS+0x20>)
 80168aa:	f7fb f8fc 	bl	8011aa6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80168ae:	4905      	ldr	r1, [pc, #20]	; (80168c4 <CDC_Init_FS+0x24>)
 80168b0:	4803      	ldr	r0, [pc, #12]	; (80168c0 <CDC_Init_FS+0x20>)
 80168b2:	f7fb f912 	bl	8011ada <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80168b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80168b8:	4618      	mov	r0, r3
 80168ba:	bd80      	pop	{r7, pc}
 80168bc:	20001e50 	.word	0x20001e50
 80168c0:	200017b4 	.word	0x200017b4
 80168c4:	20001a50 	.word	0x20001a50

080168c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80168c8:	b480      	push	{r7}
 80168ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80168cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80168ce:	4618      	mov	r0, r3
 80168d0:	46bd      	mov	sp, r7
 80168d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d6:	4770      	bx	lr

080168d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80168d8:	b480      	push	{r7}
 80168da:	b083      	sub	sp, #12
 80168dc:	af00      	add	r7, sp, #0
 80168de:	4603      	mov	r3, r0
 80168e0:	6039      	str	r1, [r7, #0]
 80168e2:	71fb      	strb	r3, [r7, #7]
 80168e4:	4613      	mov	r3, r2
 80168e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80168e8:	79fb      	ldrb	r3, [r7, #7]
 80168ea:	2b23      	cmp	r3, #35	; 0x23
 80168ec:	d85c      	bhi.n	80169a8 <CDC_Control_FS+0xd0>
 80168ee:	a201      	add	r2, pc, #4	; (adr r2, 80168f4 <CDC_Control_FS+0x1c>)
 80168f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168f4:	080169a9 	.word	0x080169a9
 80168f8:	080169a9 	.word	0x080169a9
 80168fc:	080169a9 	.word	0x080169a9
 8016900:	080169a9 	.word	0x080169a9
 8016904:	080169a9 	.word	0x080169a9
 8016908:	080169a9 	.word	0x080169a9
 801690c:	080169a9 	.word	0x080169a9
 8016910:	080169a9 	.word	0x080169a9
 8016914:	080169a9 	.word	0x080169a9
 8016918:	080169a9 	.word	0x080169a9
 801691c:	080169a9 	.word	0x080169a9
 8016920:	080169a9 	.word	0x080169a9
 8016924:	080169a9 	.word	0x080169a9
 8016928:	080169a9 	.word	0x080169a9
 801692c:	080169a9 	.word	0x080169a9
 8016930:	080169a9 	.word	0x080169a9
 8016934:	080169a9 	.word	0x080169a9
 8016938:	080169a9 	.word	0x080169a9
 801693c:	080169a9 	.word	0x080169a9
 8016940:	080169a9 	.word	0x080169a9
 8016944:	080169a9 	.word	0x080169a9
 8016948:	080169a9 	.word	0x080169a9
 801694c:	080169a9 	.word	0x080169a9
 8016950:	080169a9 	.word	0x080169a9
 8016954:	080169a9 	.word	0x080169a9
 8016958:	080169a9 	.word	0x080169a9
 801695c:	080169a9 	.word	0x080169a9
 8016960:	080169a9 	.word	0x080169a9
 8016964:	080169a9 	.word	0x080169a9
 8016968:	080169a9 	.word	0x080169a9
 801696c:	080169a9 	.word	0x080169a9
 8016970:	080169a9 	.word	0x080169a9
 8016974:	08016985 	.word	0x08016985
 8016978:	08016997 	.word	0x08016997
 801697c:	080169a9 	.word	0x080169a9
 8016980:	080169a9 	.word	0x080169a9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) );
 8016984:	4b0c      	ldr	r3, [pc, #48]	; (80169b8 <CDC_Control_FS+0xe0>)
 8016986:	683a      	ldr	r2, [r7, #0]
 8016988:	6810      	ldr	r0, [r2, #0]
 801698a:	6018      	str	r0, [r3, #0]
 801698c:	8891      	ldrh	r1, [r2, #4]
 801698e:	7992      	ldrb	r2, [r2, #6]
 8016990:	8099      	strh	r1, [r3, #4]
 8016992:	719a      	strb	r2, [r3, #6]
    break;
 8016994:	e009      	b.n	80169aa <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) );
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	4a07      	ldr	r2, [pc, #28]	; (80169b8 <CDC_Control_FS+0xe0>)
 801699a:	6810      	ldr	r0, [r2, #0]
 801699c:	6018      	str	r0, [r3, #0]
 801699e:	8891      	ldrh	r1, [r2, #4]
 80169a0:	7992      	ldrb	r2, [r2, #6]
 80169a2:	8099      	strh	r1, [r3, #4]
 80169a4:	719a      	strb	r2, [r3, #6]
    break;
 80169a6:	e000      	b.n	80169aa <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80169a8:	bf00      	nop
  }

  return (USBD_OK);
 80169aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80169ac:	4618      	mov	r0, r3
 80169ae:	370c      	adds	r7, #12
 80169b0:	46bd      	mov	sp, r7
 80169b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b6:	4770      	bx	lr
 80169b8:	20000170 	.word	0x20000170

080169bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b082      	sub	sp, #8
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
 80169c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80169c6:	6879      	ldr	r1, [r7, #4]
 80169c8:	4807      	ldr	r0, [pc, #28]	; (80169e8 <CDC_Receive_FS+0x2c>)
 80169ca:	f7fb f886 	bl	8011ada <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80169ce:	4806      	ldr	r0, [pc, #24]	; (80169e8 <CDC_Receive_FS+0x2c>)
 80169d0:	f7fb f8c6 	bl	8011b60 <USBD_CDC_ReceivePacket>

  // Feed the buffer through to the CLI parser
  rxCliInput(Buf, Len);
 80169d4:	6839      	ldr	r1, [r7, #0]
 80169d6:	6878      	ldr	r0, [r7, #4]
 80169d8:	f7ff ff12 	bl	8016800 <rxCliInput>

  return (USBD_OK);
 80169dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80169de:	4618      	mov	r0, r3
 80169e0:	3708      	adds	r7, #8
 80169e2:	46bd      	mov	sp, r7
 80169e4:	bd80      	pop	{r7, pc}
 80169e6:	bf00      	nop
 80169e8:	200017b4 	.word	0x200017b4

080169ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b084      	sub	sp, #16
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
 80169f4:	460b      	mov	r3, r1
 80169f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80169f8:	2300      	movs	r3, #0
 80169fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80169fc:	4b0d      	ldr	r3, [pc, #52]	; (8016a34 <CDC_Transmit_FS+0x48>)
 80169fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8016a02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016a04:	68bb      	ldr	r3, [r7, #8]
 8016a06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d001      	beq.n	8016a12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8016a0e:	2301      	movs	r3, #1
 8016a10:	e00b      	b.n	8016a2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016a12:	887b      	ldrh	r3, [r7, #2]
 8016a14:	461a      	mov	r2, r3
 8016a16:	6879      	ldr	r1, [r7, #4]
 8016a18:	4806      	ldr	r0, [pc, #24]	; (8016a34 <CDC_Transmit_FS+0x48>)
 8016a1a:	f7fb f844 	bl	8011aa6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016a1e:	4805      	ldr	r0, [pc, #20]	; (8016a34 <CDC_Transmit_FS+0x48>)
 8016a20:	f7fb f86f 	bl	8011b02 <USBD_CDC_TransmitPacket>
 8016a24:	4603      	mov	r3, r0
 8016a26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	3710      	adds	r7, #16
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bd80      	pop	{r7, pc}
 8016a32:	bf00      	nop
 8016a34:	200017b4 	.word	0x200017b4

08016a38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a38:	b480      	push	{r7}
 8016a3a:	b083      	sub	sp, #12
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	4603      	mov	r3, r0
 8016a40:	6039      	str	r1, [r7, #0]
 8016a42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016a44:	683b      	ldr	r3, [r7, #0]
 8016a46:	2212      	movs	r2, #18
 8016a48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016a4a:	4b03      	ldr	r3, [pc, #12]	; (8016a58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	370c      	adds	r7, #12
 8016a50:	46bd      	mov	sp, r7
 8016a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a56:	4770      	bx	lr
 8016a58:	200001a4 	.word	0x200001a4

08016a5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a5c:	b480      	push	{r7}
 8016a5e:	b083      	sub	sp, #12
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	4603      	mov	r3, r0
 8016a64:	6039      	str	r1, [r7, #0]
 8016a66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016a68:	683b      	ldr	r3, [r7, #0]
 8016a6a:	2204      	movs	r2, #4
 8016a6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016a6e:	4b03      	ldr	r3, [pc, #12]	; (8016a7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016a70:	4618      	mov	r0, r3
 8016a72:	370c      	adds	r7, #12
 8016a74:	46bd      	mov	sp, r7
 8016a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7a:	4770      	bx	lr
 8016a7c:	200001b8 	.word	0x200001b8

08016a80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b082      	sub	sp, #8
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	4603      	mov	r3, r0
 8016a88:	6039      	str	r1, [r7, #0]
 8016a8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016a8c:	79fb      	ldrb	r3, [r7, #7]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d105      	bne.n	8016a9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016a92:	683a      	ldr	r2, [r7, #0]
 8016a94:	4907      	ldr	r1, [pc, #28]	; (8016ab4 <USBD_FS_ProductStrDescriptor+0x34>)
 8016a96:	4808      	ldr	r0, [pc, #32]	; (8016ab8 <USBD_FS_ProductStrDescriptor+0x38>)
 8016a98:	f7fc f808 	bl	8012aac <USBD_GetString>
 8016a9c:	e004      	b.n	8016aa8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016a9e:	683a      	ldr	r2, [r7, #0]
 8016aa0:	4904      	ldr	r1, [pc, #16]	; (8016ab4 <USBD_FS_ProductStrDescriptor+0x34>)
 8016aa2:	4805      	ldr	r0, [pc, #20]	; (8016ab8 <USBD_FS_ProductStrDescriptor+0x38>)
 8016aa4:	f7fc f802 	bl	8012aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8016aa8:	4b02      	ldr	r3, [pc, #8]	; (8016ab4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016aaa:	4618      	mov	r0, r3
 8016aac:	3708      	adds	r7, #8
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}
 8016ab2:	bf00      	nop
 8016ab4:	20002250 	.word	0x20002250
 8016ab8:	08017d1c 	.word	0x08017d1c

08016abc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b082      	sub	sp, #8
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	6039      	str	r1, [r7, #0]
 8016ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016ac8:	683a      	ldr	r2, [r7, #0]
 8016aca:	4904      	ldr	r1, [pc, #16]	; (8016adc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016acc:	4804      	ldr	r0, [pc, #16]	; (8016ae0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016ace:	f7fb ffed 	bl	8012aac <USBD_GetString>
  return USBD_StrDesc;
 8016ad2:	4b02      	ldr	r3, [pc, #8]	; (8016adc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	3708      	adds	r7, #8
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	bd80      	pop	{r7, pc}
 8016adc:	20002250 	.word	0x20002250
 8016ae0:	08017d34 	.word	0x08017d34

08016ae4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	4603      	mov	r3, r0
 8016aec:	6039      	str	r1, [r7, #0]
 8016aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016af0:	683b      	ldr	r3, [r7, #0]
 8016af2:	221a      	movs	r2, #26
 8016af4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016af6:	f000 f843 	bl	8016b80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016afa:	4b02      	ldr	r3, [pc, #8]	; (8016b04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016afc:	4618      	mov	r0, r3
 8016afe:	3708      	adds	r7, #8
 8016b00:	46bd      	mov	sp, r7
 8016b02:	bd80      	pop	{r7, pc}
 8016b04:	200001bc 	.word	0x200001bc

08016b08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b082      	sub	sp, #8
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	4603      	mov	r3, r0
 8016b10:	6039      	str	r1, [r7, #0]
 8016b12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016b14:	79fb      	ldrb	r3, [r7, #7]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d105      	bne.n	8016b26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016b1a:	683a      	ldr	r2, [r7, #0]
 8016b1c:	4907      	ldr	r1, [pc, #28]	; (8016b3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8016b1e:	4808      	ldr	r0, [pc, #32]	; (8016b40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016b20:	f7fb ffc4 	bl	8012aac <USBD_GetString>
 8016b24:	e004      	b.n	8016b30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016b26:	683a      	ldr	r2, [r7, #0]
 8016b28:	4904      	ldr	r1, [pc, #16]	; (8016b3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8016b2a:	4805      	ldr	r0, [pc, #20]	; (8016b40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016b2c:	f7fb ffbe 	bl	8012aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8016b30:	4b02      	ldr	r3, [pc, #8]	; (8016b3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016b32:	4618      	mov	r0, r3
 8016b34:	3708      	adds	r7, #8
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}
 8016b3a:	bf00      	nop
 8016b3c:	20002250 	.word	0x20002250
 8016b40:	08017d48 	.word	0x08017d48

08016b44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b44:	b580      	push	{r7, lr}
 8016b46:	b082      	sub	sp, #8
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	6039      	str	r1, [r7, #0]
 8016b4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016b50:	79fb      	ldrb	r3, [r7, #7]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d105      	bne.n	8016b62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016b56:	683a      	ldr	r2, [r7, #0]
 8016b58:	4907      	ldr	r1, [pc, #28]	; (8016b78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016b5a:	4808      	ldr	r0, [pc, #32]	; (8016b7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016b5c:	f7fb ffa6 	bl	8012aac <USBD_GetString>
 8016b60:	e004      	b.n	8016b6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016b62:	683a      	ldr	r2, [r7, #0]
 8016b64:	4904      	ldr	r1, [pc, #16]	; (8016b78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016b66:	4805      	ldr	r0, [pc, #20]	; (8016b7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016b68:	f7fb ffa0 	bl	8012aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8016b6c:	4b02      	ldr	r3, [pc, #8]	; (8016b78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016b6e:	4618      	mov	r0, r3
 8016b70:	3708      	adds	r7, #8
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}
 8016b76:	bf00      	nop
 8016b78:	20002250 	.word	0x20002250
 8016b7c:	08017d54 	.word	0x08017d54

08016b80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b084      	sub	sp, #16
 8016b84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016b86:	4b0f      	ldr	r3, [pc, #60]	; (8016bc4 <Get_SerialNum+0x44>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016b8c:	4b0e      	ldr	r3, [pc, #56]	; (8016bc8 <Get_SerialNum+0x48>)
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016b92:	4b0e      	ldr	r3, [pc, #56]	; (8016bcc <Get_SerialNum+0x4c>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016b98:	68fa      	ldr	r2, [r7, #12]
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	4413      	add	r3, r2
 8016b9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d009      	beq.n	8016bba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016ba6:	2208      	movs	r2, #8
 8016ba8:	4909      	ldr	r1, [pc, #36]	; (8016bd0 <Get_SerialNum+0x50>)
 8016baa:	68f8      	ldr	r0, [r7, #12]
 8016bac:	f000 f814 	bl	8016bd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016bb0:	2204      	movs	r2, #4
 8016bb2:	4908      	ldr	r1, [pc, #32]	; (8016bd4 <Get_SerialNum+0x54>)
 8016bb4:	68b8      	ldr	r0, [r7, #8]
 8016bb6:	f000 f80f 	bl	8016bd8 <IntToUnicode>
  }
}
 8016bba:	bf00      	nop
 8016bbc:	3710      	adds	r7, #16
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}
 8016bc2:	bf00      	nop
 8016bc4:	1fff7a10 	.word	0x1fff7a10
 8016bc8:	1fff7a14 	.word	0x1fff7a14
 8016bcc:	1fff7a18 	.word	0x1fff7a18
 8016bd0:	200001be 	.word	0x200001be
 8016bd4:	200001ce 	.word	0x200001ce

08016bd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b087      	sub	sp, #28
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	60f8      	str	r0, [r7, #12]
 8016be0:	60b9      	str	r1, [r7, #8]
 8016be2:	4613      	mov	r3, r2
 8016be4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016be6:	2300      	movs	r3, #0
 8016be8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016bea:	2300      	movs	r3, #0
 8016bec:	75fb      	strb	r3, [r7, #23]
 8016bee:	e027      	b.n	8016c40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	0f1b      	lsrs	r3, r3, #28
 8016bf4:	2b09      	cmp	r3, #9
 8016bf6:	d80b      	bhi.n	8016c10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	0f1b      	lsrs	r3, r3, #28
 8016bfc:	b2da      	uxtb	r2, r3
 8016bfe:	7dfb      	ldrb	r3, [r7, #23]
 8016c00:	005b      	lsls	r3, r3, #1
 8016c02:	4619      	mov	r1, r3
 8016c04:	68bb      	ldr	r3, [r7, #8]
 8016c06:	440b      	add	r3, r1
 8016c08:	3230      	adds	r2, #48	; 0x30
 8016c0a:	b2d2      	uxtb	r2, r2
 8016c0c:	701a      	strb	r2, [r3, #0]
 8016c0e:	e00a      	b.n	8016c26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	0f1b      	lsrs	r3, r3, #28
 8016c14:	b2da      	uxtb	r2, r3
 8016c16:	7dfb      	ldrb	r3, [r7, #23]
 8016c18:	005b      	lsls	r3, r3, #1
 8016c1a:	4619      	mov	r1, r3
 8016c1c:	68bb      	ldr	r3, [r7, #8]
 8016c1e:	440b      	add	r3, r1
 8016c20:	3237      	adds	r2, #55	; 0x37
 8016c22:	b2d2      	uxtb	r2, r2
 8016c24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	011b      	lsls	r3, r3, #4
 8016c2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016c2c:	7dfb      	ldrb	r3, [r7, #23]
 8016c2e:	005b      	lsls	r3, r3, #1
 8016c30:	3301      	adds	r3, #1
 8016c32:	68ba      	ldr	r2, [r7, #8]
 8016c34:	4413      	add	r3, r2
 8016c36:	2200      	movs	r2, #0
 8016c38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016c3a:	7dfb      	ldrb	r3, [r7, #23]
 8016c3c:	3301      	adds	r3, #1
 8016c3e:	75fb      	strb	r3, [r7, #23]
 8016c40:	7dfa      	ldrb	r2, [r7, #23]
 8016c42:	79fb      	ldrb	r3, [r7, #7]
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d3d3      	bcc.n	8016bf0 <IntToUnicode+0x18>
  }
}
 8016c48:	bf00      	nop
 8016c4a:	371c      	adds	r7, #28
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c52:	4770      	bx	lr

08016c54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b08a      	sub	sp, #40	; 0x28
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016c5c:	f107 0314 	add.w	r3, r7, #20
 8016c60:	2200      	movs	r2, #0
 8016c62:	601a      	str	r2, [r3, #0]
 8016c64:	605a      	str	r2, [r3, #4]
 8016c66:	609a      	str	r2, [r3, #8]
 8016c68:	60da      	str	r2, [r3, #12]
 8016c6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016c74:	d152      	bne.n	8016d1c <HAL_PCD_MspInit+0xc8>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8016c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016c7a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016c7c:	2301      	movs	r3, #1
 8016c7e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016c80:	2300      	movs	r3, #0
 8016c82:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8016c84:	2302      	movs	r3, #2
 8016c86:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016c88:	f107 0314 	add.w	r3, r7, #20
 8016c8c:	4619      	mov	r1, r3
 8016c8e:	4825      	ldr	r0, [pc, #148]	; (8016d24 <HAL_PCD_MspInit+0xd0>)
 8016c90:	f7ee fdec 	bl	800586c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8016c94:	2200      	movs	r2, #0
 8016c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8016c9a:	4822      	ldr	r0, [pc, #136]	; (8016d24 <HAL_PCD_MspInit+0xd0>)
 8016c9c:	f7ee ff80 	bl	8005ba0 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8016ca0:	2005      	movs	r0, #5
 8016ca2:	f7ee fc8d 	bl	80055c0 <HAL_Delay>

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	613b      	str	r3, [r7, #16]
 8016caa:	4b1f      	ldr	r3, [pc, #124]	; (8016d28 <HAL_PCD_MspInit+0xd4>)
 8016cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016cae:	4a1e      	ldr	r2, [pc, #120]	; (8016d28 <HAL_PCD_MspInit+0xd4>)
 8016cb0:	f043 0301 	orr.w	r3, r3, #1
 8016cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8016cb6:	4b1c      	ldr	r3, [pc, #112]	; (8016d28 <HAL_PCD_MspInit+0xd4>)
 8016cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016cba:	f003 0301 	and.w	r3, r3, #1
 8016cbe:	613b      	str	r3, [r7, #16]
 8016cc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016cc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016cc8:	2302      	movs	r3, #2
 8016cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016ccc:	2300      	movs	r3, #0
 8016cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016cd0:	2303      	movs	r3, #3
 8016cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016cd4:	230a      	movs	r3, #10
 8016cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016cd8:	f107 0314 	add.w	r3, r7, #20
 8016cdc:	4619      	mov	r1, r3
 8016cde:	4811      	ldr	r0, [pc, #68]	; (8016d24 <HAL_PCD_MspInit+0xd0>)
 8016ce0:	f7ee fdc4 	bl	800586c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016ce4:	4b10      	ldr	r3, [pc, #64]	; (8016d28 <HAL_PCD_MspInit+0xd4>)
 8016ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ce8:	4a0f      	ldr	r2, [pc, #60]	; (8016d28 <HAL_PCD_MspInit+0xd4>)
 8016cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016cee:	6353      	str	r3, [r2, #52]	; 0x34
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	60fb      	str	r3, [r7, #12]
 8016cf4:	4b0c      	ldr	r3, [pc, #48]	; (8016d28 <HAL_PCD_MspInit+0xd4>)
 8016cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016cf8:	4a0b      	ldr	r2, [pc, #44]	; (8016d28 <HAL_PCD_MspInit+0xd4>)
 8016cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016cfe:	6453      	str	r3, [r2, #68]	; 0x44
 8016d00:	4b09      	ldr	r3, [pc, #36]	; (8016d28 <HAL_PCD_MspInit+0xd4>)
 8016d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016d08:	60fb      	str	r3, [r7, #12]
 8016d0a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	2100      	movs	r1, #0
 8016d10:	2043      	movs	r0, #67	; 0x43
 8016d12:	f7ee fd52 	bl	80057ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016d16:	2043      	movs	r0, #67	; 0x43
 8016d18:	f7ee fd6b 	bl	80057f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016d1c:	bf00      	nop
 8016d1e:	3728      	adds	r7, #40	; 0x28
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}
 8016d24:	40020000 	.word	0x40020000
 8016d28:	40023800 	.word	0x40023800

08016d2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016d40:	4619      	mov	r1, r3
 8016d42:	4610      	mov	r0, r2
 8016d44:	f7fa ffc4 	bl	8011cd0 <USBD_LL_SetupStage>
}
 8016d48:	bf00      	nop
 8016d4a:	3708      	adds	r7, #8
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}

08016d50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b082      	sub	sp, #8
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
 8016d58:	460b      	mov	r3, r1
 8016d5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016d62:	78fa      	ldrb	r2, [r7, #3]
 8016d64:	6879      	ldr	r1, [r7, #4]
 8016d66:	4613      	mov	r3, r2
 8016d68:	00db      	lsls	r3, r3, #3
 8016d6a:	1a9b      	subs	r3, r3, r2
 8016d6c:	009b      	lsls	r3, r3, #2
 8016d6e:	440b      	add	r3, r1
 8016d70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016d74:	681a      	ldr	r2, [r3, #0]
 8016d76:	78fb      	ldrb	r3, [r7, #3]
 8016d78:	4619      	mov	r1, r3
 8016d7a:	f7fa fff4 	bl	8011d66 <USBD_LL_DataOutStage>
}
 8016d7e:	bf00      	nop
 8016d80:	3708      	adds	r7, #8
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}

08016d86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d86:	b580      	push	{r7, lr}
 8016d88:	b082      	sub	sp, #8
 8016d8a:	af00      	add	r7, sp, #0
 8016d8c:	6078      	str	r0, [r7, #4]
 8016d8e:	460b      	mov	r3, r1
 8016d90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016d98:	78fa      	ldrb	r2, [r7, #3]
 8016d9a:	6879      	ldr	r1, [r7, #4]
 8016d9c:	4613      	mov	r3, r2
 8016d9e:	00db      	lsls	r3, r3, #3
 8016da0:	1a9b      	subs	r3, r3, r2
 8016da2:	009b      	lsls	r3, r3, #2
 8016da4:	440b      	add	r3, r1
 8016da6:	3348      	adds	r3, #72	; 0x48
 8016da8:	681a      	ldr	r2, [r3, #0]
 8016daa:	78fb      	ldrb	r3, [r7, #3]
 8016dac:	4619      	mov	r1, r3
 8016dae:	f7fb f84b 	bl	8011e48 <USBD_LL_DataInStage>
}
 8016db2:	bf00      	nop
 8016db4:	3708      	adds	r7, #8
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}

08016dba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016dba:	b580      	push	{r7, lr}
 8016dbc:	b082      	sub	sp, #8
 8016dbe:	af00      	add	r7, sp, #0
 8016dc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7fb f959 	bl	8012080 <USBD_LL_SOF>
}
 8016dce:	bf00      	nop
 8016dd0:	3708      	adds	r7, #8
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}

08016dd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8016dd6:	b580      	push	{r7, lr}
 8016dd8:	b084      	sub	sp, #16
 8016dda:	af00      	add	r7, sp, #0
 8016ddc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016dde:	2301      	movs	r3, #1
 8016de0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	68db      	ldr	r3, [r3, #12]
 8016de6:	2b02      	cmp	r3, #2
 8016de8:	d001      	beq.n	8016dee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016dea:	f7ed ffbd 	bl	8004d68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016df4:	7bfa      	ldrb	r2, [r7, #15]
 8016df6:	4611      	mov	r1, r2
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f7fb f90b 	bl	8012014 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e04:	4618      	mov	r0, r3
 8016e06:	f7fb f8c4 	bl	8011f92 <USBD_LL_Reset>
}
 8016e0a:	bf00      	nop
 8016e0c:	3710      	adds	r7, #16
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
	...

08016e14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b082      	sub	sp, #8
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e22:	4618      	mov	r0, r3
 8016e24:	f7fb f906 	bl	8012034 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	687a      	ldr	r2, [r7, #4]
 8016e34:	6812      	ldr	r2, [r2, #0]
 8016e36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016e3a:	f043 0301 	orr.w	r3, r3, #1
 8016e3e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	6a1b      	ldr	r3, [r3, #32]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d005      	beq.n	8016e54 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016e48:	4b04      	ldr	r3, [pc, #16]	; (8016e5c <HAL_PCD_SuspendCallback+0x48>)
 8016e4a:	691b      	ldr	r3, [r3, #16]
 8016e4c:	4a03      	ldr	r2, [pc, #12]	; (8016e5c <HAL_PCD_SuspendCallback+0x48>)
 8016e4e:	f043 0306 	orr.w	r3, r3, #6
 8016e52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016e54:	bf00      	nop
 8016e56:	3708      	adds	r7, #8
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	bd80      	pop	{r7, pc}
 8016e5c:	e000ed00 	.word	0xe000ed00

08016e60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b082      	sub	sp, #8
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7fb f8f5 	bl	801205e <USBD_LL_Resume>
}
 8016e74:	bf00      	nop
 8016e76:	3708      	adds	r7, #8
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}

08016e7c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b082      	sub	sp, #8
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
 8016e84:	460b      	mov	r3, r1
 8016e86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e8e:	78fa      	ldrb	r2, [r7, #3]
 8016e90:	4611      	mov	r1, r2
 8016e92:	4618      	mov	r0, r3
 8016e94:	f7fb f91b 	bl	80120ce <USBD_LL_IsoOUTIncomplete>
}
 8016e98:	bf00      	nop
 8016e9a:	3708      	adds	r7, #8
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	bd80      	pop	{r7, pc}

08016ea0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b082      	sub	sp, #8
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
 8016ea8:	460b      	mov	r3, r1
 8016eaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016eb2:	78fa      	ldrb	r2, [r7, #3]
 8016eb4:	4611      	mov	r1, r2
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7fb f8fc 	bl	80120b4 <USBD_LL_IsoINIncomplete>
}
 8016ebc:	bf00      	nop
 8016ebe:	3708      	adds	r7, #8
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd80      	pop	{r7, pc}

08016ec4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b082      	sub	sp, #8
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	f7fb f908 	bl	80120e8 <USBD_LL_DevConnected>
}
 8016ed8:	bf00      	nop
 8016eda:	3708      	adds	r7, #8
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}

08016ee0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b082      	sub	sp, #8
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016eee:	4618      	mov	r0, r3
 8016ef0:	f7fb f905 	bl	80120fe <USBD_LL_DevDisconnected>
}
 8016ef4:	bf00      	nop
 8016ef6:	3708      	adds	r7, #8
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}

08016efc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b082      	sub	sp, #8
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d13c      	bne.n	8016f86 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016f0c:	4a20      	ldr	r2, [pc, #128]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	4a1e      	ldr	r2, [pc, #120]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016f1c:	4b1c      	ldr	r3, [pc, #112]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016f22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016f24:	4b1a      	ldr	r3, [pc, #104]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f26:	2204      	movs	r2, #4
 8016f28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016f2a:	4b19      	ldr	r3, [pc, #100]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f2c:	2202      	movs	r2, #2
 8016f2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016f30:	4b17      	ldr	r3, [pc, #92]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f32:	2200      	movs	r2, #0
 8016f34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016f36:	4b16      	ldr	r3, [pc, #88]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f38:	2202      	movs	r2, #2
 8016f3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016f3c:	4b14      	ldr	r3, [pc, #80]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f3e:	2200      	movs	r2, #0
 8016f40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016f42:	4b13      	ldr	r3, [pc, #76]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f44:	2200      	movs	r2, #0
 8016f46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016f48:	4b11      	ldr	r3, [pc, #68]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016f4e:	4b10      	ldr	r3, [pc, #64]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f50:	2200      	movs	r2, #0
 8016f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016f54:	4b0e      	ldr	r3, [pc, #56]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f56:	2200      	movs	r2, #0
 8016f58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016f5a:	480d      	ldr	r0, [pc, #52]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f5c:	f7ef fc3e 	bl	80067dc <HAL_PCD_Init>
 8016f60:	4603      	mov	r3, r0
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d001      	beq.n	8016f6a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016f66:	f7ed feff 	bl	8004d68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016f6a:	2180      	movs	r1, #128	; 0x80
 8016f6c:	4808      	ldr	r0, [pc, #32]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f6e:	f7f0 fda2 	bl	8007ab6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016f72:	2240      	movs	r2, #64	; 0x40
 8016f74:	2100      	movs	r1, #0
 8016f76:	4806      	ldr	r0, [pc, #24]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f78:	f7f0 fd56 	bl	8007a28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016f7c:	2280      	movs	r2, #128	; 0x80
 8016f7e:	2101      	movs	r1, #1
 8016f80:	4803      	ldr	r0, [pc, #12]	; (8016f90 <USBD_LL_Init+0x94>)
 8016f82:	f7f0 fd51 	bl	8007a28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016f86:	2300      	movs	r3, #0
}
 8016f88:	4618      	mov	r0, r3
 8016f8a:	3708      	adds	r7, #8
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}
 8016f90:	20002450 	.word	0x20002450

08016f94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b084      	sub	sp, #16
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016faa:	4618      	mov	r0, r3
 8016fac:	f7ef fd33 	bl	8006a16 <HAL_PCD_Start>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016fb4:	7bfb      	ldrb	r3, [r7, #15]
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	f000 f92e 	bl	8017218 <USBD_Get_USB_Status>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	3710      	adds	r7, #16
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}

08016fca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016fca:	b580      	push	{r7, lr}
 8016fcc:	b084      	sub	sp, #16
 8016fce:	af00      	add	r7, sp, #0
 8016fd0:	6078      	str	r0, [r7, #4]
 8016fd2:	4608      	mov	r0, r1
 8016fd4:	4611      	mov	r1, r2
 8016fd6:	461a      	mov	r2, r3
 8016fd8:	4603      	mov	r3, r0
 8016fda:	70fb      	strb	r3, [r7, #3]
 8016fdc:	460b      	mov	r3, r1
 8016fde:	70bb      	strb	r3, [r7, #2]
 8016fe0:	4613      	mov	r3, r2
 8016fe2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fe8:	2300      	movs	r3, #0
 8016fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016ff2:	78bb      	ldrb	r3, [r7, #2]
 8016ff4:	883a      	ldrh	r2, [r7, #0]
 8016ff6:	78f9      	ldrb	r1, [r7, #3]
 8016ff8:	f7f0 f908 	bl	800720c <HAL_PCD_EP_Open>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017000:	7bfb      	ldrb	r3, [r7, #15]
 8017002:	4618      	mov	r0, r3
 8017004:	f000 f908 	bl	8017218 <USBD_Get_USB_Status>
 8017008:	4603      	mov	r3, r0
 801700a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801700c:	7bbb      	ldrb	r3, [r7, #14]
}
 801700e:	4618      	mov	r0, r3
 8017010:	3710      	adds	r7, #16
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}

08017016 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017016:	b580      	push	{r7, lr}
 8017018:	b084      	sub	sp, #16
 801701a:	af00      	add	r7, sp, #0
 801701c:	6078      	str	r0, [r7, #4]
 801701e:	460b      	mov	r3, r1
 8017020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017022:	2300      	movs	r3, #0
 8017024:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017026:	2300      	movs	r3, #0
 8017028:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8017030:	78fa      	ldrb	r2, [r7, #3]
 8017032:	4611      	mov	r1, r2
 8017034:	4618      	mov	r0, r3
 8017036:	f7f0 f951 	bl	80072dc <HAL_PCD_EP_Close>
 801703a:	4603      	mov	r3, r0
 801703c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801703e:	7bfb      	ldrb	r3, [r7, #15]
 8017040:	4618      	mov	r0, r3
 8017042:	f000 f8e9 	bl	8017218 <USBD_Get_USB_Status>
 8017046:	4603      	mov	r3, r0
 8017048:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801704a:	7bbb      	ldrb	r3, [r7, #14]
}
 801704c:	4618      	mov	r0, r3
 801704e:	3710      	adds	r7, #16
 8017050:	46bd      	mov	sp, r7
 8017052:	bd80      	pop	{r7, pc}

08017054 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b084      	sub	sp, #16
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
 801705c:	460b      	mov	r3, r1
 801705e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017060:	2300      	movs	r3, #0
 8017062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017064:	2300      	movs	r3, #0
 8017066:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801706e:	78fa      	ldrb	r2, [r7, #3]
 8017070:	4611      	mov	r1, r2
 8017072:	4618      	mov	r0, r3
 8017074:	f7f0 fa29 	bl	80074ca <HAL_PCD_EP_SetStall>
 8017078:	4603      	mov	r3, r0
 801707a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801707c:	7bfb      	ldrb	r3, [r7, #15]
 801707e:	4618      	mov	r0, r3
 8017080:	f000 f8ca 	bl	8017218 <USBD_Get_USB_Status>
 8017084:	4603      	mov	r3, r0
 8017086:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8017088:	7bbb      	ldrb	r3, [r7, #14]
}
 801708a:	4618      	mov	r0, r3
 801708c:	3710      	adds	r7, #16
 801708e:	46bd      	mov	sp, r7
 8017090:	bd80      	pop	{r7, pc}

08017092 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017092:	b580      	push	{r7, lr}
 8017094:	b084      	sub	sp, #16
 8017096:	af00      	add	r7, sp, #0
 8017098:	6078      	str	r0, [r7, #4]
 801709a:	460b      	mov	r3, r1
 801709c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801709e:	2300      	movs	r3, #0
 80170a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170a2:	2300      	movs	r3, #0
 80170a4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80170ac:	78fa      	ldrb	r2, [r7, #3]
 80170ae:	4611      	mov	r1, r2
 80170b0:	4618      	mov	r0, r3
 80170b2:	f7f0 fa6e 	bl	8007592 <HAL_PCD_EP_ClrStall>
 80170b6:	4603      	mov	r3, r0
 80170b8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80170ba:	7bfb      	ldrb	r3, [r7, #15]
 80170bc:	4618      	mov	r0, r3
 80170be:	f000 f8ab 	bl	8017218 <USBD_Get_USB_Status>
 80170c2:	4603      	mov	r3, r0
 80170c4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80170c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80170c8:	4618      	mov	r0, r3
 80170ca:	3710      	adds	r7, #16
 80170cc:	46bd      	mov	sp, r7
 80170ce:	bd80      	pop	{r7, pc}

080170d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80170d0:	b480      	push	{r7}
 80170d2:	b085      	sub	sp, #20
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
 80170d8:	460b      	mov	r3, r1
 80170da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80170e2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80170e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	da0b      	bge.n	8017104 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80170ec:	78fb      	ldrb	r3, [r7, #3]
 80170ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80170f2:	68f9      	ldr	r1, [r7, #12]
 80170f4:	4613      	mov	r3, r2
 80170f6:	00db      	lsls	r3, r3, #3
 80170f8:	1a9b      	subs	r3, r3, r2
 80170fa:	009b      	lsls	r3, r3, #2
 80170fc:	440b      	add	r3, r1
 80170fe:	333e      	adds	r3, #62	; 0x3e
 8017100:	781b      	ldrb	r3, [r3, #0]
 8017102:	e00b      	b.n	801711c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8017104:	78fb      	ldrb	r3, [r7, #3]
 8017106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801710a:	68f9      	ldr	r1, [r7, #12]
 801710c:	4613      	mov	r3, r2
 801710e:	00db      	lsls	r3, r3, #3
 8017110:	1a9b      	subs	r3, r3, r2
 8017112:	009b      	lsls	r3, r3, #2
 8017114:	440b      	add	r3, r1
 8017116:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801711a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801711c:	4618      	mov	r0, r3
 801711e:	3714      	adds	r7, #20
 8017120:	46bd      	mov	sp, r7
 8017122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017126:	4770      	bx	lr

08017128 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b084      	sub	sp, #16
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 8017130:	460b      	mov	r3, r1
 8017132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017134:	2300      	movs	r3, #0
 8017136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017138:	2300      	movs	r3, #0
 801713a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8017142:	78fa      	ldrb	r2, [r7, #3]
 8017144:	4611      	mov	r1, r2
 8017146:	4618      	mov	r0, r3
 8017148:	f7f0 f83b 	bl	80071c2 <HAL_PCD_SetAddress>
 801714c:	4603      	mov	r3, r0
 801714e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017150:	7bfb      	ldrb	r3, [r7, #15]
 8017152:	4618      	mov	r0, r3
 8017154:	f000 f860 	bl	8017218 <USBD_Get_USB_Status>
 8017158:	4603      	mov	r3, r0
 801715a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801715c:	7bbb      	ldrb	r3, [r7, #14]
}
 801715e:	4618      	mov	r0, r3
 8017160:	3710      	adds	r7, #16
 8017162:	46bd      	mov	sp, r7
 8017164:	bd80      	pop	{r7, pc}

08017166 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017166:	b580      	push	{r7, lr}
 8017168:	b086      	sub	sp, #24
 801716a:	af00      	add	r7, sp, #0
 801716c:	60f8      	str	r0, [r7, #12]
 801716e:	607a      	str	r2, [r7, #4]
 8017170:	461a      	mov	r2, r3
 8017172:	460b      	mov	r3, r1
 8017174:	72fb      	strb	r3, [r7, #11]
 8017176:	4613      	mov	r3, r2
 8017178:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801717a:	2300      	movs	r3, #0
 801717c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801717e:	2300      	movs	r3, #0
 8017180:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8017188:	893b      	ldrh	r3, [r7, #8]
 801718a:	7af9      	ldrb	r1, [r7, #11]
 801718c:	687a      	ldr	r2, [r7, #4]
 801718e:	f7f0 f952 	bl	8007436 <HAL_PCD_EP_Transmit>
 8017192:	4603      	mov	r3, r0
 8017194:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8017196:	7dfb      	ldrb	r3, [r7, #23]
 8017198:	4618      	mov	r0, r3
 801719a:	f000 f83d 	bl	8017218 <USBD_Get_USB_Status>
 801719e:	4603      	mov	r3, r0
 80171a0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80171a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80171a4:	4618      	mov	r0, r3
 80171a6:	3718      	adds	r7, #24
 80171a8:	46bd      	mov	sp, r7
 80171aa:	bd80      	pop	{r7, pc}

080171ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b086      	sub	sp, #24
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	60f8      	str	r0, [r7, #12]
 80171b4:	607a      	str	r2, [r7, #4]
 80171b6:	461a      	mov	r2, r3
 80171b8:	460b      	mov	r3, r1
 80171ba:	72fb      	strb	r3, [r7, #11]
 80171bc:	4613      	mov	r3, r2
 80171be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171c0:	2300      	movs	r3, #0
 80171c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171c4:	2300      	movs	r3, #0
 80171c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80171ce:	893b      	ldrh	r3, [r7, #8]
 80171d0:	7af9      	ldrb	r1, [r7, #11]
 80171d2:	687a      	ldr	r2, [r7, #4]
 80171d4:	f7f0 f8cc 	bl	8007370 <HAL_PCD_EP_Receive>
 80171d8:	4603      	mov	r3, r0
 80171da:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80171dc:	7dfb      	ldrb	r3, [r7, #23]
 80171de:	4618      	mov	r0, r3
 80171e0:	f000 f81a 	bl	8017218 <USBD_Get_USB_Status>
 80171e4:	4603      	mov	r3, r0
 80171e6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80171e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80171ea:	4618      	mov	r0, r3
 80171ec:	3718      	adds	r7, #24
 80171ee:	46bd      	mov	sp, r7
 80171f0:	bd80      	pop	{r7, pc}

080171f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80171f2:	b580      	push	{r7, lr}
 80171f4:	b082      	sub	sp, #8
 80171f6:	af00      	add	r7, sp, #0
 80171f8:	6078      	str	r0, [r7, #4]
 80171fa:	460b      	mov	r3, r1
 80171fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8017204:	78fa      	ldrb	r2, [r7, #3]
 8017206:	4611      	mov	r1, r2
 8017208:	4618      	mov	r0, r3
 801720a:	f7f0 f8fc 	bl	8007406 <HAL_PCD_EP_GetRxCount>
 801720e:	4603      	mov	r3, r0
}
 8017210:	4618      	mov	r0, r3
 8017212:	3708      	adds	r7, #8
 8017214:	46bd      	mov	sp, r7
 8017216:	bd80      	pop	{r7, pc}

08017218 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017218:	b480      	push	{r7}
 801721a:	b085      	sub	sp, #20
 801721c:	af00      	add	r7, sp, #0
 801721e:	4603      	mov	r3, r0
 8017220:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017222:	2300      	movs	r3, #0
 8017224:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017226:	79fb      	ldrb	r3, [r7, #7]
 8017228:	2b03      	cmp	r3, #3
 801722a:	d817      	bhi.n	801725c <USBD_Get_USB_Status+0x44>
 801722c:	a201      	add	r2, pc, #4	; (adr r2, 8017234 <USBD_Get_USB_Status+0x1c>)
 801722e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017232:	bf00      	nop
 8017234:	08017245 	.word	0x08017245
 8017238:	0801724b 	.word	0x0801724b
 801723c:	08017251 	.word	0x08017251
 8017240:	08017257 	.word	0x08017257
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017244:	2300      	movs	r3, #0
 8017246:	73fb      	strb	r3, [r7, #15]
    break;
 8017248:	e00b      	b.n	8017262 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801724a:	2302      	movs	r3, #2
 801724c:	73fb      	strb	r3, [r7, #15]
    break;
 801724e:	e008      	b.n	8017262 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017250:	2301      	movs	r3, #1
 8017252:	73fb      	strb	r3, [r7, #15]
    break;
 8017254:	e005      	b.n	8017262 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017256:	2302      	movs	r3, #2
 8017258:	73fb      	strb	r3, [r7, #15]
    break;
 801725a:	e002      	b.n	8017262 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801725c:	2302      	movs	r3, #2
 801725e:	73fb      	strb	r3, [r7, #15]
    break;
 8017260:	bf00      	nop
  }
  return usb_status;
 8017262:	7bfb      	ldrb	r3, [r7, #15]
}
 8017264:	4618      	mov	r0, r3
 8017266:	3714      	adds	r7, #20
 8017268:	46bd      	mov	sp, r7
 801726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726e:	4770      	bx	lr

08017270 <__errno>:
 8017270:	4b01      	ldr	r3, [pc, #4]	; (8017278 <__errno+0x8>)
 8017272:	6818      	ldr	r0, [r3, #0]
 8017274:	4770      	bx	lr
 8017276:	bf00      	nop
 8017278:	200001d8 	.word	0x200001d8

0801727c <__libc_init_array>:
 801727c:	b570      	push	{r4, r5, r6, lr}
 801727e:	4e0d      	ldr	r6, [pc, #52]	; (80172b4 <__libc_init_array+0x38>)
 8017280:	4c0d      	ldr	r4, [pc, #52]	; (80172b8 <__libc_init_array+0x3c>)
 8017282:	1ba4      	subs	r4, r4, r6
 8017284:	10a4      	asrs	r4, r4, #2
 8017286:	2500      	movs	r5, #0
 8017288:	42a5      	cmp	r5, r4
 801728a:	d109      	bne.n	80172a0 <__libc_init_array+0x24>
 801728c:	4e0b      	ldr	r6, [pc, #44]	; (80172bc <__libc_init_array+0x40>)
 801728e:	4c0c      	ldr	r4, [pc, #48]	; (80172c0 <__libc_init_array+0x44>)
 8017290:	f000 fc4e 	bl	8017b30 <_init>
 8017294:	1ba4      	subs	r4, r4, r6
 8017296:	10a4      	asrs	r4, r4, #2
 8017298:	2500      	movs	r5, #0
 801729a:	42a5      	cmp	r5, r4
 801729c:	d105      	bne.n	80172aa <__libc_init_array+0x2e>
 801729e:	bd70      	pop	{r4, r5, r6, pc}
 80172a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80172a4:	4798      	blx	r3
 80172a6:	3501      	adds	r5, #1
 80172a8:	e7ee      	b.n	8017288 <__libc_init_array+0xc>
 80172aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80172ae:	4798      	blx	r3
 80172b0:	3501      	adds	r5, #1
 80172b2:	e7f2      	b.n	801729a <__libc_init_array+0x1e>
 80172b4:	0801be40 	.word	0x0801be40
 80172b8:	0801be40 	.word	0x0801be40
 80172bc:	0801be40 	.word	0x0801be40
 80172c0:	0801be44 	.word	0x0801be44

080172c4 <malloc>:
 80172c4:	4b02      	ldr	r3, [pc, #8]	; (80172d0 <malloc+0xc>)
 80172c6:	4601      	mov	r1, r0
 80172c8:	6818      	ldr	r0, [r3, #0]
 80172ca:	f000 b87b 	b.w	80173c4 <_malloc_r>
 80172ce:	bf00      	nop
 80172d0:	200001d8 	.word	0x200001d8

080172d4 <free>:
 80172d4:	4b02      	ldr	r3, [pc, #8]	; (80172e0 <free+0xc>)
 80172d6:	4601      	mov	r1, r0
 80172d8:	6818      	ldr	r0, [r3, #0]
 80172da:	f000 b825 	b.w	8017328 <_free_r>
 80172de:	bf00      	nop
 80172e0:	200001d8 	.word	0x200001d8

080172e4 <memcmp>:
 80172e4:	b530      	push	{r4, r5, lr}
 80172e6:	2400      	movs	r4, #0
 80172e8:	42a2      	cmp	r2, r4
 80172ea:	d101      	bne.n	80172f0 <memcmp+0xc>
 80172ec:	2000      	movs	r0, #0
 80172ee:	e007      	b.n	8017300 <memcmp+0x1c>
 80172f0:	5d03      	ldrb	r3, [r0, r4]
 80172f2:	3401      	adds	r4, #1
 80172f4:	190d      	adds	r5, r1, r4
 80172f6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80172fa:	42ab      	cmp	r3, r5
 80172fc:	d0f4      	beq.n	80172e8 <memcmp+0x4>
 80172fe:	1b58      	subs	r0, r3, r5
 8017300:	bd30      	pop	{r4, r5, pc}

08017302 <memcpy>:
 8017302:	b510      	push	{r4, lr}
 8017304:	1e43      	subs	r3, r0, #1
 8017306:	440a      	add	r2, r1
 8017308:	4291      	cmp	r1, r2
 801730a:	d100      	bne.n	801730e <memcpy+0xc>
 801730c:	bd10      	pop	{r4, pc}
 801730e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017316:	e7f7      	b.n	8017308 <memcpy+0x6>

08017318 <memset>:
 8017318:	4402      	add	r2, r0
 801731a:	4603      	mov	r3, r0
 801731c:	4293      	cmp	r3, r2
 801731e:	d100      	bne.n	8017322 <memset+0xa>
 8017320:	4770      	bx	lr
 8017322:	f803 1b01 	strb.w	r1, [r3], #1
 8017326:	e7f9      	b.n	801731c <memset+0x4>

08017328 <_free_r>:
 8017328:	b538      	push	{r3, r4, r5, lr}
 801732a:	4605      	mov	r5, r0
 801732c:	2900      	cmp	r1, #0
 801732e:	d045      	beq.n	80173bc <_free_r+0x94>
 8017330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017334:	1f0c      	subs	r4, r1, #4
 8017336:	2b00      	cmp	r3, #0
 8017338:	bfb8      	it	lt
 801733a:	18e4      	addlt	r4, r4, r3
 801733c:	f000 f8d4 	bl	80174e8 <__malloc_lock>
 8017340:	4a1f      	ldr	r2, [pc, #124]	; (80173c0 <_free_r+0x98>)
 8017342:	6813      	ldr	r3, [r2, #0]
 8017344:	4610      	mov	r0, r2
 8017346:	b933      	cbnz	r3, 8017356 <_free_r+0x2e>
 8017348:	6063      	str	r3, [r4, #4]
 801734a:	6014      	str	r4, [r2, #0]
 801734c:	4628      	mov	r0, r5
 801734e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017352:	f000 b8ca 	b.w	80174ea <__malloc_unlock>
 8017356:	42a3      	cmp	r3, r4
 8017358:	d90c      	bls.n	8017374 <_free_r+0x4c>
 801735a:	6821      	ldr	r1, [r4, #0]
 801735c:	1862      	adds	r2, r4, r1
 801735e:	4293      	cmp	r3, r2
 8017360:	bf04      	itt	eq
 8017362:	681a      	ldreq	r2, [r3, #0]
 8017364:	685b      	ldreq	r3, [r3, #4]
 8017366:	6063      	str	r3, [r4, #4]
 8017368:	bf04      	itt	eq
 801736a:	1852      	addeq	r2, r2, r1
 801736c:	6022      	streq	r2, [r4, #0]
 801736e:	6004      	str	r4, [r0, #0]
 8017370:	e7ec      	b.n	801734c <_free_r+0x24>
 8017372:	4613      	mov	r3, r2
 8017374:	685a      	ldr	r2, [r3, #4]
 8017376:	b10a      	cbz	r2, 801737c <_free_r+0x54>
 8017378:	42a2      	cmp	r2, r4
 801737a:	d9fa      	bls.n	8017372 <_free_r+0x4a>
 801737c:	6819      	ldr	r1, [r3, #0]
 801737e:	1858      	adds	r0, r3, r1
 8017380:	42a0      	cmp	r0, r4
 8017382:	d10b      	bne.n	801739c <_free_r+0x74>
 8017384:	6820      	ldr	r0, [r4, #0]
 8017386:	4401      	add	r1, r0
 8017388:	1858      	adds	r0, r3, r1
 801738a:	4282      	cmp	r2, r0
 801738c:	6019      	str	r1, [r3, #0]
 801738e:	d1dd      	bne.n	801734c <_free_r+0x24>
 8017390:	6810      	ldr	r0, [r2, #0]
 8017392:	6852      	ldr	r2, [r2, #4]
 8017394:	605a      	str	r2, [r3, #4]
 8017396:	4401      	add	r1, r0
 8017398:	6019      	str	r1, [r3, #0]
 801739a:	e7d7      	b.n	801734c <_free_r+0x24>
 801739c:	d902      	bls.n	80173a4 <_free_r+0x7c>
 801739e:	230c      	movs	r3, #12
 80173a0:	602b      	str	r3, [r5, #0]
 80173a2:	e7d3      	b.n	801734c <_free_r+0x24>
 80173a4:	6820      	ldr	r0, [r4, #0]
 80173a6:	1821      	adds	r1, r4, r0
 80173a8:	428a      	cmp	r2, r1
 80173aa:	bf04      	itt	eq
 80173ac:	6811      	ldreq	r1, [r2, #0]
 80173ae:	6852      	ldreq	r2, [r2, #4]
 80173b0:	6062      	str	r2, [r4, #4]
 80173b2:	bf04      	itt	eq
 80173b4:	1809      	addeq	r1, r1, r0
 80173b6:	6021      	streq	r1, [r4, #0]
 80173b8:	605c      	str	r4, [r3, #4]
 80173ba:	e7c7      	b.n	801734c <_free_r+0x24>
 80173bc:	bd38      	pop	{r3, r4, r5, pc}
 80173be:	bf00      	nop
 80173c0:	20000eac 	.word	0x20000eac

080173c4 <_malloc_r>:
 80173c4:	b570      	push	{r4, r5, r6, lr}
 80173c6:	1ccd      	adds	r5, r1, #3
 80173c8:	f025 0503 	bic.w	r5, r5, #3
 80173cc:	3508      	adds	r5, #8
 80173ce:	2d0c      	cmp	r5, #12
 80173d0:	bf38      	it	cc
 80173d2:	250c      	movcc	r5, #12
 80173d4:	2d00      	cmp	r5, #0
 80173d6:	4606      	mov	r6, r0
 80173d8:	db01      	blt.n	80173de <_malloc_r+0x1a>
 80173da:	42a9      	cmp	r1, r5
 80173dc:	d903      	bls.n	80173e6 <_malloc_r+0x22>
 80173de:	230c      	movs	r3, #12
 80173e0:	6033      	str	r3, [r6, #0]
 80173e2:	2000      	movs	r0, #0
 80173e4:	bd70      	pop	{r4, r5, r6, pc}
 80173e6:	f000 f87f 	bl	80174e8 <__malloc_lock>
 80173ea:	4a21      	ldr	r2, [pc, #132]	; (8017470 <_malloc_r+0xac>)
 80173ec:	6814      	ldr	r4, [r2, #0]
 80173ee:	4621      	mov	r1, r4
 80173f0:	b991      	cbnz	r1, 8017418 <_malloc_r+0x54>
 80173f2:	4c20      	ldr	r4, [pc, #128]	; (8017474 <_malloc_r+0xb0>)
 80173f4:	6823      	ldr	r3, [r4, #0]
 80173f6:	b91b      	cbnz	r3, 8017400 <_malloc_r+0x3c>
 80173f8:	4630      	mov	r0, r6
 80173fa:	f000 f83d 	bl	8017478 <_sbrk_r>
 80173fe:	6020      	str	r0, [r4, #0]
 8017400:	4629      	mov	r1, r5
 8017402:	4630      	mov	r0, r6
 8017404:	f000 f838 	bl	8017478 <_sbrk_r>
 8017408:	1c43      	adds	r3, r0, #1
 801740a:	d124      	bne.n	8017456 <_malloc_r+0x92>
 801740c:	230c      	movs	r3, #12
 801740e:	6033      	str	r3, [r6, #0]
 8017410:	4630      	mov	r0, r6
 8017412:	f000 f86a 	bl	80174ea <__malloc_unlock>
 8017416:	e7e4      	b.n	80173e2 <_malloc_r+0x1e>
 8017418:	680b      	ldr	r3, [r1, #0]
 801741a:	1b5b      	subs	r3, r3, r5
 801741c:	d418      	bmi.n	8017450 <_malloc_r+0x8c>
 801741e:	2b0b      	cmp	r3, #11
 8017420:	d90f      	bls.n	8017442 <_malloc_r+0x7e>
 8017422:	600b      	str	r3, [r1, #0]
 8017424:	50cd      	str	r5, [r1, r3]
 8017426:	18cc      	adds	r4, r1, r3
 8017428:	4630      	mov	r0, r6
 801742a:	f000 f85e 	bl	80174ea <__malloc_unlock>
 801742e:	f104 000b 	add.w	r0, r4, #11
 8017432:	1d23      	adds	r3, r4, #4
 8017434:	f020 0007 	bic.w	r0, r0, #7
 8017438:	1ac3      	subs	r3, r0, r3
 801743a:	d0d3      	beq.n	80173e4 <_malloc_r+0x20>
 801743c:	425a      	negs	r2, r3
 801743e:	50e2      	str	r2, [r4, r3]
 8017440:	e7d0      	b.n	80173e4 <_malloc_r+0x20>
 8017442:	428c      	cmp	r4, r1
 8017444:	684b      	ldr	r3, [r1, #4]
 8017446:	bf16      	itet	ne
 8017448:	6063      	strne	r3, [r4, #4]
 801744a:	6013      	streq	r3, [r2, #0]
 801744c:	460c      	movne	r4, r1
 801744e:	e7eb      	b.n	8017428 <_malloc_r+0x64>
 8017450:	460c      	mov	r4, r1
 8017452:	6849      	ldr	r1, [r1, #4]
 8017454:	e7cc      	b.n	80173f0 <_malloc_r+0x2c>
 8017456:	1cc4      	adds	r4, r0, #3
 8017458:	f024 0403 	bic.w	r4, r4, #3
 801745c:	42a0      	cmp	r0, r4
 801745e:	d005      	beq.n	801746c <_malloc_r+0xa8>
 8017460:	1a21      	subs	r1, r4, r0
 8017462:	4630      	mov	r0, r6
 8017464:	f000 f808 	bl	8017478 <_sbrk_r>
 8017468:	3001      	adds	r0, #1
 801746a:	d0cf      	beq.n	801740c <_malloc_r+0x48>
 801746c:	6025      	str	r5, [r4, #0]
 801746e:	e7db      	b.n	8017428 <_malloc_r+0x64>
 8017470:	20000eac 	.word	0x20000eac
 8017474:	20000eb0 	.word	0x20000eb0

08017478 <_sbrk_r>:
 8017478:	b538      	push	{r3, r4, r5, lr}
 801747a:	4c06      	ldr	r4, [pc, #24]	; (8017494 <_sbrk_r+0x1c>)
 801747c:	2300      	movs	r3, #0
 801747e:	4605      	mov	r5, r0
 8017480:	4608      	mov	r0, r1
 8017482:	6023      	str	r3, [r4, #0]
 8017484:	f7ed ffbe 	bl	8005404 <_sbrk>
 8017488:	1c43      	adds	r3, r0, #1
 801748a:	d102      	bne.n	8017492 <_sbrk_r+0x1a>
 801748c:	6823      	ldr	r3, [r4, #0]
 801748e:	b103      	cbz	r3, 8017492 <_sbrk_r+0x1a>
 8017490:	602b      	str	r3, [r5, #0]
 8017492:	bd38      	pop	{r3, r4, r5, pc}
 8017494:	20002858 	.word	0x20002858

08017498 <siprintf>:
 8017498:	b40e      	push	{r1, r2, r3}
 801749a:	b500      	push	{lr}
 801749c:	b09c      	sub	sp, #112	; 0x70
 801749e:	ab1d      	add	r3, sp, #116	; 0x74
 80174a0:	9002      	str	r0, [sp, #8]
 80174a2:	9006      	str	r0, [sp, #24]
 80174a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80174a8:	4809      	ldr	r0, [pc, #36]	; (80174d0 <siprintf+0x38>)
 80174aa:	9107      	str	r1, [sp, #28]
 80174ac:	9104      	str	r1, [sp, #16]
 80174ae:	4909      	ldr	r1, [pc, #36]	; (80174d4 <siprintf+0x3c>)
 80174b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80174b4:	9105      	str	r1, [sp, #20]
 80174b6:	6800      	ldr	r0, [r0, #0]
 80174b8:	9301      	str	r3, [sp, #4]
 80174ba:	a902      	add	r1, sp, #8
 80174bc:	f000 f870 	bl	80175a0 <_svfiprintf_r>
 80174c0:	9b02      	ldr	r3, [sp, #8]
 80174c2:	2200      	movs	r2, #0
 80174c4:	701a      	strb	r2, [r3, #0]
 80174c6:	b01c      	add	sp, #112	; 0x70
 80174c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80174cc:	b003      	add	sp, #12
 80174ce:	4770      	bx	lr
 80174d0:	200001d8 	.word	0x200001d8
 80174d4:	ffff0208 	.word	0xffff0208

080174d8 <strcpy>:
 80174d8:	4603      	mov	r3, r0
 80174da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80174de:	f803 2b01 	strb.w	r2, [r3], #1
 80174e2:	2a00      	cmp	r2, #0
 80174e4:	d1f9      	bne.n	80174da <strcpy+0x2>
 80174e6:	4770      	bx	lr

080174e8 <__malloc_lock>:
 80174e8:	4770      	bx	lr

080174ea <__malloc_unlock>:
 80174ea:	4770      	bx	lr

080174ec <__ssputs_r>:
 80174ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174f0:	688e      	ldr	r6, [r1, #8]
 80174f2:	429e      	cmp	r6, r3
 80174f4:	4682      	mov	sl, r0
 80174f6:	460c      	mov	r4, r1
 80174f8:	4690      	mov	r8, r2
 80174fa:	4699      	mov	r9, r3
 80174fc:	d837      	bhi.n	801756e <__ssputs_r+0x82>
 80174fe:	898a      	ldrh	r2, [r1, #12]
 8017500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017504:	d031      	beq.n	801756a <__ssputs_r+0x7e>
 8017506:	6825      	ldr	r5, [r4, #0]
 8017508:	6909      	ldr	r1, [r1, #16]
 801750a:	1a6f      	subs	r7, r5, r1
 801750c:	6965      	ldr	r5, [r4, #20]
 801750e:	2302      	movs	r3, #2
 8017510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017514:	fb95 f5f3 	sdiv	r5, r5, r3
 8017518:	f109 0301 	add.w	r3, r9, #1
 801751c:	443b      	add	r3, r7
 801751e:	429d      	cmp	r5, r3
 8017520:	bf38      	it	cc
 8017522:	461d      	movcc	r5, r3
 8017524:	0553      	lsls	r3, r2, #21
 8017526:	d530      	bpl.n	801758a <__ssputs_r+0x9e>
 8017528:	4629      	mov	r1, r5
 801752a:	f7ff ff4b 	bl	80173c4 <_malloc_r>
 801752e:	4606      	mov	r6, r0
 8017530:	b950      	cbnz	r0, 8017548 <__ssputs_r+0x5c>
 8017532:	230c      	movs	r3, #12
 8017534:	f8ca 3000 	str.w	r3, [sl]
 8017538:	89a3      	ldrh	r3, [r4, #12]
 801753a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801753e:	81a3      	strh	r3, [r4, #12]
 8017540:	f04f 30ff 	mov.w	r0, #4294967295
 8017544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017548:	463a      	mov	r2, r7
 801754a:	6921      	ldr	r1, [r4, #16]
 801754c:	f7ff fed9 	bl	8017302 <memcpy>
 8017550:	89a3      	ldrh	r3, [r4, #12]
 8017552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801755a:	81a3      	strh	r3, [r4, #12]
 801755c:	6126      	str	r6, [r4, #16]
 801755e:	6165      	str	r5, [r4, #20]
 8017560:	443e      	add	r6, r7
 8017562:	1bed      	subs	r5, r5, r7
 8017564:	6026      	str	r6, [r4, #0]
 8017566:	60a5      	str	r5, [r4, #8]
 8017568:	464e      	mov	r6, r9
 801756a:	454e      	cmp	r6, r9
 801756c:	d900      	bls.n	8017570 <__ssputs_r+0x84>
 801756e:	464e      	mov	r6, r9
 8017570:	4632      	mov	r2, r6
 8017572:	4641      	mov	r1, r8
 8017574:	6820      	ldr	r0, [r4, #0]
 8017576:	f000 fa93 	bl	8017aa0 <memmove>
 801757a:	68a3      	ldr	r3, [r4, #8]
 801757c:	1b9b      	subs	r3, r3, r6
 801757e:	60a3      	str	r3, [r4, #8]
 8017580:	6823      	ldr	r3, [r4, #0]
 8017582:	441e      	add	r6, r3
 8017584:	6026      	str	r6, [r4, #0]
 8017586:	2000      	movs	r0, #0
 8017588:	e7dc      	b.n	8017544 <__ssputs_r+0x58>
 801758a:	462a      	mov	r2, r5
 801758c:	f000 faa1 	bl	8017ad2 <_realloc_r>
 8017590:	4606      	mov	r6, r0
 8017592:	2800      	cmp	r0, #0
 8017594:	d1e2      	bne.n	801755c <__ssputs_r+0x70>
 8017596:	6921      	ldr	r1, [r4, #16]
 8017598:	4650      	mov	r0, sl
 801759a:	f7ff fec5 	bl	8017328 <_free_r>
 801759e:	e7c8      	b.n	8017532 <__ssputs_r+0x46>

080175a0 <_svfiprintf_r>:
 80175a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175a4:	461d      	mov	r5, r3
 80175a6:	898b      	ldrh	r3, [r1, #12]
 80175a8:	061f      	lsls	r7, r3, #24
 80175aa:	b09d      	sub	sp, #116	; 0x74
 80175ac:	4680      	mov	r8, r0
 80175ae:	460c      	mov	r4, r1
 80175b0:	4616      	mov	r6, r2
 80175b2:	d50f      	bpl.n	80175d4 <_svfiprintf_r+0x34>
 80175b4:	690b      	ldr	r3, [r1, #16]
 80175b6:	b96b      	cbnz	r3, 80175d4 <_svfiprintf_r+0x34>
 80175b8:	2140      	movs	r1, #64	; 0x40
 80175ba:	f7ff ff03 	bl	80173c4 <_malloc_r>
 80175be:	6020      	str	r0, [r4, #0]
 80175c0:	6120      	str	r0, [r4, #16]
 80175c2:	b928      	cbnz	r0, 80175d0 <_svfiprintf_r+0x30>
 80175c4:	230c      	movs	r3, #12
 80175c6:	f8c8 3000 	str.w	r3, [r8]
 80175ca:	f04f 30ff 	mov.w	r0, #4294967295
 80175ce:	e0c8      	b.n	8017762 <_svfiprintf_r+0x1c2>
 80175d0:	2340      	movs	r3, #64	; 0x40
 80175d2:	6163      	str	r3, [r4, #20]
 80175d4:	2300      	movs	r3, #0
 80175d6:	9309      	str	r3, [sp, #36]	; 0x24
 80175d8:	2320      	movs	r3, #32
 80175da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80175de:	2330      	movs	r3, #48	; 0x30
 80175e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80175e4:	9503      	str	r5, [sp, #12]
 80175e6:	f04f 0b01 	mov.w	fp, #1
 80175ea:	4637      	mov	r7, r6
 80175ec:	463d      	mov	r5, r7
 80175ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80175f2:	b10b      	cbz	r3, 80175f8 <_svfiprintf_r+0x58>
 80175f4:	2b25      	cmp	r3, #37	; 0x25
 80175f6:	d13e      	bne.n	8017676 <_svfiprintf_r+0xd6>
 80175f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80175fc:	d00b      	beq.n	8017616 <_svfiprintf_r+0x76>
 80175fe:	4653      	mov	r3, sl
 8017600:	4632      	mov	r2, r6
 8017602:	4621      	mov	r1, r4
 8017604:	4640      	mov	r0, r8
 8017606:	f7ff ff71 	bl	80174ec <__ssputs_r>
 801760a:	3001      	adds	r0, #1
 801760c:	f000 80a4 	beq.w	8017758 <_svfiprintf_r+0x1b8>
 8017610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017612:	4453      	add	r3, sl
 8017614:	9309      	str	r3, [sp, #36]	; 0x24
 8017616:	783b      	ldrb	r3, [r7, #0]
 8017618:	2b00      	cmp	r3, #0
 801761a:	f000 809d 	beq.w	8017758 <_svfiprintf_r+0x1b8>
 801761e:	2300      	movs	r3, #0
 8017620:	f04f 32ff 	mov.w	r2, #4294967295
 8017624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017628:	9304      	str	r3, [sp, #16]
 801762a:	9307      	str	r3, [sp, #28]
 801762c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017630:	931a      	str	r3, [sp, #104]	; 0x68
 8017632:	462f      	mov	r7, r5
 8017634:	2205      	movs	r2, #5
 8017636:	f817 1b01 	ldrb.w	r1, [r7], #1
 801763a:	4850      	ldr	r0, [pc, #320]	; (801777c <_svfiprintf_r+0x1dc>)
 801763c:	f7e8 fdd8 	bl	80001f0 <memchr>
 8017640:	9b04      	ldr	r3, [sp, #16]
 8017642:	b9d0      	cbnz	r0, 801767a <_svfiprintf_r+0xda>
 8017644:	06d9      	lsls	r1, r3, #27
 8017646:	bf44      	itt	mi
 8017648:	2220      	movmi	r2, #32
 801764a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801764e:	071a      	lsls	r2, r3, #28
 8017650:	bf44      	itt	mi
 8017652:	222b      	movmi	r2, #43	; 0x2b
 8017654:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017658:	782a      	ldrb	r2, [r5, #0]
 801765a:	2a2a      	cmp	r2, #42	; 0x2a
 801765c:	d015      	beq.n	801768a <_svfiprintf_r+0xea>
 801765e:	9a07      	ldr	r2, [sp, #28]
 8017660:	462f      	mov	r7, r5
 8017662:	2000      	movs	r0, #0
 8017664:	250a      	movs	r5, #10
 8017666:	4639      	mov	r1, r7
 8017668:	f811 3b01 	ldrb.w	r3, [r1], #1
 801766c:	3b30      	subs	r3, #48	; 0x30
 801766e:	2b09      	cmp	r3, #9
 8017670:	d94d      	bls.n	801770e <_svfiprintf_r+0x16e>
 8017672:	b1b8      	cbz	r0, 80176a4 <_svfiprintf_r+0x104>
 8017674:	e00f      	b.n	8017696 <_svfiprintf_r+0xf6>
 8017676:	462f      	mov	r7, r5
 8017678:	e7b8      	b.n	80175ec <_svfiprintf_r+0x4c>
 801767a:	4a40      	ldr	r2, [pc, #256]	; (801777c <_svfiprintf_r+0x1dc>)
 801767c:	1a80      	subs	r0, r0, r2
 801767e:	fa0b f000 	lsl.w	r0, fp, r0
 8017682:	4318      	orrs	r0, r3
 8017684:	9004      	str	r0, [sp, #16]
 8017686:	463d      	mov	r5, r7
 8017688:	e7d3      	b.n	8017632 <_svfiprintf_r+0x92>
 801768a:	9a03      	ldr	r2, [sp, #12]
 801768c:	1d11      	adds	r1, r2, #4
 801768e:	6812      	ldr	r2, [r2, #0]
 8017690:	9103      	str	r1, [sp, #12]
 8017692:	2a00      	cmp	r2, #0
 8017694:	db01      	blt.n	801769a <_svfiprintf_r+0xfa>
 8017696:	9207      	str	r2, [sp, #28]
 8017698:	e004      	b.n	80176a4 <_svfiprintf_r+0x104>
 801769a:	4252      	negs	r2, r2
 801769c:	f043 0302 	orr.w	r3, r3, #2
 80176a0:	9207      	str	r2, [sp, #28]
 80176a2:	9304      	str	r3, [sp, #16]
 80176a4:	783b      	ldrb	r3, [r7, #0]
 80176a6:	2b2e      	cmp	r3, #46	; 0x2e
 80176a8:	d10c      	bne.n	80176c4 <_svfiprintf_r+0x124>
 80176aa:	787b      	ldrb	r3, [r7, #1]
 80176ac:	2b2a      	cmp	r3, #42	; 0x2a
 80176ae:	d133      	bne.n	8017718 <_svfiprintf_r+0x178>
 80176b0:	9b03      	ldr	r3, [sp, #12]
 80176b2:	1d1a      	adds	r2, r3, #4
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	9203      	str	r2, [sp, #12]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	bfb8      	it	lt
 80176bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80176c0:	3702      	adds	r7, #2
 80176c2:	9305      	str	r3, [sp, #20]
 80176c4:	4d2e      	ldr	r5, [pc, #184]	; (8017780 <_svfiprintf_r+0x1e0>)
 80176c6:	7839      	ldrb	r1, [r7, #0]
 80176c8:	2203      	movs	r2, #3
 80176ca:	4628      	mov	r0, r5
 80176cc:	f7e8 fd90 	bl	80001f0 <memchr>
 80176d0:	b138      	cbz	r0, 80176e2 <_svfiprintf_r+0x142>
 80176d2:	2340      	movs	r3, #64	; 0x40
 80176d4:	1b40      	subs	r0, r0, r5
 80176d6:	fa03 f000 	lsl.w	r0, r3, r0
 80176da:	9b04      	ldr	r3, [sp, #16]
 80176dc:	4303      	orrs	r3, r0
 80176de:	3701      	adds	r7, #1
 80176e0:	9304      	str	r3, [sp, #16]
 80176e2:	7839      	ldrb	r1, [r7, #0]
 80176e4:	4827      	ldr	r0, [pc, #156]	; (8017784 <_svfiprintf_r+0x1e4>)
 80176e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80176ea:	2206      	movs	r2, #6
 80176ec:	1c7e      	adds	r6, r7, #1
 80176ee:	f7e8 fd7f 	bl	80001f0 <memchr>
 80176f2:	2800      	cmp	r0, #0
 80176f4:	d038      	beq.n	8017768 <_svfiprintf_r+0x1c8>
 80176f6:	4b24      	ldr	r3, [pc, #144]	; (8017788 <_svfiprintf_r+0x1e8>)
 80176f8:	bb13      	cbnz	r3, 8017740 <_svfiprintf_r+0x1a0>
 80176fa:	9b03      	ldr	r3, [sp, #12]
 80176fc:	3307      	adds	r3, #7
 80176fe:	f023 0307 	bic.w	r3, r3, #7
 8017702:	3308      	adds	r3, #8
 8017704:	9303      	str	r3, [sp, #12]
 8017706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017708:	444b      	add	r3, r9
 801770a:	9309      	str	r3, [sp, #36]	; 0x24
 801770c:	e76d      	b.n	80175ea <_svfiprintf_r+0x4a>
 801770e:	fb05 3202 	mla	r2, r5, r2, r3
 8017712:	2001      	movs	r0, #1
 8017714:	460f      	mov	r7, r1
 8017716:	e7a6      	b.n	8017666 <_svfiprintf_r+0xc6>
 8017718:	2300      	movs	r3, #0
 801771a:	3701      	adds	r7, #1
 801771c:	9305      	str	r3, [sp, #20]
 801771e:	4619      	mov	r1, r3
 8017720:	250a      	movs	r5, #10
 8017722:	4638      	mov	r0, r7
 8017724:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017728:	3a30      	subs	r2, #48	; 0x30
 801772a:	2a09      	cmp	r2, #9
 801772c:	d903      	bls.n	8017736 <_svfiprintf_r+0x196>
 801772e:	2b00      	cmp	r3, #0
 8017730:	d0c8      	beq.n	80176c4 <_svfiprintf_r+0x124>
 8017732:	9105      	str	r1, [sp, #20]
 8017734:	e7c6      	b.n	80176c4 <_svfiprintf_r+0x124>
 8017736:	fb05 2101 	mla	r1, r5, r1, r2
 801773a:	2301      	movs	r3, #1
 801773c:	4607      	mov	r7, r0
 801773e:	e7f0      	b.n	8017722 <_svfiprintf_r+0x182>
 8017740:	ab03      	add	r3, sp, #12
 8017742:	9300      	str	r3, [sp, #0]
 8017744:	4622      	mov	r2, r4
 8017746:	4b11      	ldr	r3, [pc, #68]	; (801778c <_svfiprintf_r+0x1ec>)
 8017748:	a904      	add	r1, sp, #16
 801774a:	4640      	mov	r0, r8
 801774c:	f3af 8000 	nop.w
 8017750:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017754:	4681      	mov	r9, r0
 8017756:	d1d6      	bne.n	8017706 <_svfiprintf_r+0x166>
 8017758:	89a3      	ldrh	r3, [r4, #12]
 801775a:	065b      	lsls	r3, r3, #25
 801775c:	f53f af35 	bmi.w	80175ca <_svfiprintf_r+0x2a>
 8017760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017762:	b01d      	add	sp, #116	; 0x74
 8017764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017768:	ab03      	add	r3, sp, #12
 801776a:	9300      	str	r3, [sp, #0]
 801776c:	4622      	mov	r2, r4
 801776e:	4b07      	ldr	r3, [pc, #28]	; (801778c <_svfiprintf_r+0x1ec>)
 8017770:	a904      	add	r1, sp, #16
 8017772:	4640      	mov	r0, r8
 8017774:	f000 f882 	bl	801787c <_printf_i>
 8017778:	e7ea      	b.n	8017750 <_svfiprintf_r+0x1b0>
 801777a:	bf00      	nop
 801777c:	0801be04 	.word	0x0801be04
 8017780:	0801be0a 	.word	0x0801be0a
 8017784:	0801be0e 	.word	0x0801be0e
 8017788:	00000000 	.word	0x00000000
 801778c:	080174ed 	.word	0x080174ed

08017790 <_printf_common>:
 8017790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017794:	4691      	mov	r9, r2
 8017796:	461f      	mov	r7, r3
 8017798:	688a      	ldr	r2, [r1, #8]
 801779a:	690b      	ldr	r3, [r1, #16]
 801779c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80177a0:	4293      	cmp	r3, r2
 80177a2:	bfb8      	it	lt
 80177a4:	4613      	movlt	r3, r2
 80177a6:	f8c9 3000 	str.w	r3, [r9]
 80177aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80177ae:	4606      	mov	r6, r0
 80177b0:	460c      	mov	r4, r1
 80177b2:	b112      	cbz	r2, 80177ba <_printf_common+0x2a>
 80177b4:	3301      	adds	r3, #1
 80177b6:	f8c9 3000 	str.w	r3, [r9]
 80177ba:	6823      	ldr	r3, [r4, #0]
 80177bc:	0699      	lsls	r1, r3, #26
 80177be:	bf42      	ittt	mi
 80177c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80177c4:	3302      	addmi	r3, #2
 80177c6:	f8c9 3000 	strmi.w	r3, [r9]
 80177ca:	6825      	ldr	r5, [r4, #0]
 80177cc:	f015 0506 	ands.w	r5, r5, #6
 80177d0:	d107      	bne.n	80177e2 <_printf_common+0x52>
 80177d2:	f104 0a19 	add.w	sl, r4, #25
 80177d6:	68e3      	ldr	r3, [r4, #12]
 80177d8:	f8d9 2000 	ldr.w	r2, [r9]
 80177dc:	1a9b      	subs	r3, r3, r2
 80177de:	42ab      	cmp	r3, r5
 80177e0:	dc28      	bgt.n	8017834 <_printf_common+0xa4>
 80177e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80177e6:	6822      	ldr	r2, [r4, #0]
 80177e8:	3300      	adds	r3, #0
 80177ea:	bf18      	it	ne
 80177ec:	2301      	movne	r3, #1
 80177ee:	0692      	lsls	r2, r2, #26
 80177f0:	d42d      	bmi.n	801784e <_printf_common+0xbe>
 80177f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80177f6:	4639      	mov	r1, r7
 80177f8:	4630      	mov	r0, r6
 80177fa:	47c0      	blx	r8
 80177fc:	3001      	adds	r0, #1
 80177fe:	d020      	beq.n	8017842 <_printf_common+0xb2>
 8017800:	6823      	ldr	r3, [r4, #0]
 8017802:	68e5      	ldr	r5, [r4, #12]
 8017804:	f8d9 2000 	ldr.w	r2, [r9]
 8017808:	f003 0306 	and.w	r3, r3, #6
 801780c:	2b04      	cmp	r3, #4
 801780e:	bf08      	it	eq
 8017810:	1aad      	subeq	r5, r5, r2
 8017812:	68a3      	ldr	r3, [r4, #8]
 8017814:	6922      	ldr	r2, [r4, #16]
 8017816:	bf0c      	ite	eq
 8017818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801781c:	2500      	movne	r5, #0
 801781e:	4293      	cmp	r3, r2
 8017820:	bfc4      	itt	gt
 8017822:	1a9b      	subgt	r3, r3, r2
 8017824:	18ed      	addgt	r5, r5, r3
 8017826:	f04f 0900 	mov.w	r9, #0
 801782a:	341a      	adds	r4, #26
 801782c:	454d      	cmp	r5, r9
 801782e:	d11a      	bne.n	8017866 <_printf_common+0xd6>
 8017830:	2000      	movs	r0, #0
 8017832:	e008      	b.n	8017846 <_printf_common+0xb6>
 8017834:	2301      	movs	r3, #1
 8017836:	4652      	mov	r2, sl
 8017838:	4639      	mov	r1, r7
 801783a:	4630      	mov	r0, r6
 801783c:	47c0      	blx	r8
 801783e:	3001      	adds	r0, #1
 8017840:	d103      	bne.n	801784a <_printf_common+0xba>
 8017842:	f04f 30ff 	mov.w	r0, #4294967295
 8017846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801784a:	3501      	adds	r5, #1
 801784c:	e7c3      	b.n	80177d6 <_printf_common+0x46>
 801784e:	18e1      	adds	r1, r4, r3
 8017850:	1c5a      	adds	r2, r3, #1
 8017852:	2030      	movs	r0, #48	; 0x30
 8017854:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017858:	4422      	add	r2, r4
 801785a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801785e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017862:	3302      	adds	r3, #2
 8017864:	e7c5      	b.n	80177f2 <_printf_common+0x62>
 8017866:	2301      	movs	r3, #1
 8017868:	4622      	mov	r2, r4
 801786a:	4639      	mov	r1, r7
 801786c:	4630      	mov	r0, r6
 801786e:	47c0      	blx	r8
 8017870:	3001      	adds	r0, #1
 8017872:	d0e6      	beq.n	8017842 <_printf_common+0xb2>
 8017874:	f109 0901 	add.w	r9, r9, #1
 8017878:	e7d8      	b.n	801782c <_printf_common+0x9c>
	...

0801787c <_printf_i>:
 801787c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017880:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017884:	460c      	mov	r4, r1
 8017886:	7e09      	ldrb	r1, [r1, #24]
 8017888:	b085      	sub	sp, #20
 801788a:	296e      	cmp	r1, #110	; 0x6e
 801788c:	4617      	mov	r7, r2
 801788e:	4606      	mov	r6, r0
 8017890:	4698      	mov	r8, r3
 8017892:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017894:	f000 80b3 	beq.w	80179fe <_printf_i+0x182>
 8017898:	d822      	bhi.n	80178e0 <_printf_i+0x64>
 801789a:	2963      	cmp	r1, #99	; 0x63
 801789c:	d036      	beq.n	801790c <_printf_i+0x90>
 801789e:	d80a      	bhi.n	80178b6 <_printf_i+0x3a>
 80178a0:	2900      	cmp	r1, #0
 80178a2:	f000 80b9 	beq.w	8017a18 <_printf_i+0x19c>
 80178a6:	2958      	cmp	r1, #88	; 0x58
 80178a8:	f000 8083 	beq.w	80179b2 <_printf_i+0x136>
 80178ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80178b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80178b4:	e032      	b.n	801791c <_printf_i+0xa0>
 80178b6:	2964      	cmp	r1, #100	; 0x64
 80178b8:	d001      	beq.n	80178be <_printf_i+0x42>
 80178ba:	2969      	cmp	r1, #105	; 0x69
 80178bc:	d1f6      	bne.n	80178ac <_printf_i+0x30>
 80178be:	6820      	ldr	r0, [r4, #0]
 80178c0:	6813      	ldr	r3, [r2, #0]
 80178c2:	0605      	lsls	r5, r0, #24
 80178c4:	f103 0104 	add.w	r1, r3, #4
 80178c8:	d52a      	bpl.n	8017920 <_printf_i+0xa4>
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	6011      	str	r1, [r2, #0]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	da03      	bge.n	80178da <_printf_i+0x5e>
 80178d2:	222d      	movs	r2, #45	; 0x2d
 80178d4:	425b      	negs	r3, r3
 80178d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80178da:	486f      	ldr	r0, [pc, #444]	; (8017a98 <_printf_i+0x21c>)
 80178dc:	220a      	movs	r2, #10
 80178de:	e039      	b.n	8017954 <_printf_i+0xd8>
 80178e0:	2973      	cmp	r1, #115	; 0x73
 80178e2:	f000 809d 	beq.w	8017a20 <_printf_i+0x1a4>
 80178e6:	d808      	bhi.n	80178fa <_printf_i+0x7e>
 80178e8:	296f      	cmp	r1, #111	; 0x6f
 80178ea:	d020      	beq.n	801792e <_printf_i+0xb2>
 80178ec:	2970      	cmp	r1, #112	; 0x70
 80178ee:	d1dd      	bne.n	80178ac <_printf_i+0x30>
 80178f0:	6823      	ldr	r3, [r4, #0]
 80178f2:	f043 0320 	orr.w	r3, r3, #32
 80178f6:	6023      	str	r3, [r4, #0]
 80178f8:	e003      	b.n	8017902 <_printf_i+0x86>
 80178fa:	2975      	cmp	r1, #117	; 0x75
 80178fc:	d017      	beq.n	801792e <_printf_i+0xb2>
 80178fe:	2978      	cmp	r1, #120	; 0x78
 8017900:	d1d4      	bne.n	80178ac <_printf_i+0x30>
 8017902:	2378      	movs	r3, #120	; 0x78
 8017904:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017908:	4864      	ldr	r0, [pc, #400]	; (8017a9c <_printf_i+0x220>)
 801790a:	e055      	b.n	80179b8 <_printf_i+0x13c>
 801790c:	6813      	ldr	r3, [r2, #0]
 801790e:	1d19      	adds	r1, r3, #4
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	6011      	str	r1, [r2, #0]
 8017914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801791c:	2301      	movs	r3, #1
 801791e:	e08c      	b.n	8017a3a <_printf_i+0x1be>
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	6011      	str	r1, [r2, #0]
 8017924:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017928:	bf18      	it	ne
 801792a:	b21b      	sxthne	r3, r3
 801792c:	e7cf      	b.n	80178ce <_printf_i+0x52>
 801792e:	6813      	ldr	r3, [r2, #0]
 8017930:	6825      	ldr	r5, [r4, #0]
 8017932:	1d18      	adds	r0, r3, #4
 8017934:	6010      	str	r0, [r2, #0]
 8017936:	0628      	lsls	r0, r5, #24
 8017938:	d501      	bpl.n	801793e <_printf_i+0xc2>
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	e002      	b.n	8017944 <_printf_i+0xc8>
 801793e:	0668      	lsls	r0, r5, #25
 8017940:	d5fb      	bpl.n	801793a <_printf_i+0xbe>
 8017942:	881b      	ldrh	r3, [r3, #0]
 8017944:	4854      	ldr	r0, [pc, #336]	; (8017a98 <_printf_i+0x21c>)
 8017946:	296f      	cmp	r1, #111	; 0x6f
 8017948:	bf14      	ite	ne
 801794a:	220a      	movne	r2, #10
 801794c:	2208      	moveq	r2, #8
 801794e:	2100      	movs	r1, #0
 8017950:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017954:	6865      	ldr	r5, [r4, #4]
 8017956:	60a5      	str	r5, [r4, #8]
 8017958:	2d00      	cmp	r5, #0
 801795a:	f2c0 8095 	blt.w	8017a88 <_printf_i+0x20c>
 801795e:	6821      	ldr	r1, [r4, #0]
 8017960:	f021 0104 	bic.w	r1, r1, #4
 8017964:	6021      	str	r1, [r4, #0]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d13d      	bne.n	80179e6 <_printf_i+0x16a>
 801796a:	2d00      	cmp	r5, #0
 801796c:	f040 808e 	bne.w	8017a8c <_printf_i+0x210>
 8017970:	4665      	mov	r5, ip
 8017972:	2a08      	cmp	r2, #8
 8017974:	d10b      	bne.n	801798e <_printf_i+0x112>
 8017976:	6823      	ldr	r3, [r4, #0]
 8017978:	07db      	lsls	r3, r3, #31
 801797a:	d508      	bpl.n	801798e <_printf_i+0x112>
 801797c:	6923      	ldr	r3, [r4, #16]
 801797e:	6862      	ldr	r2, [r4, #4]
 8017980:	429a      	cmp	r2, r3
 8017982:	bfde      	ittt	le
 8017984:	2330      	movle	r3, #48	; 0x30
 8017986:	f805 3c01 	strble.w	r3, [r5, #-1]
 801798a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801798e:	ebac 0305 	sub.w	r3, ip, r5
 8017992:	6123      	str	r3, [r4, #16]
 8017994:	f8cd 8000 	str.w	r8, [sp]
 8017998:	463b      	mov	r3, r7
 801799a:	aa03      	add	r2, sp, #12
 801799c:	4621      	mov	r1, r4
 801799e:	4630      	mov	r0, r6
 80179a0:	f7ff fef6 	bl	8017790 <_printf_common>
 80179a4:	3001      	adds	r0, #1
 80179a6:	d14d      	bne.n	8017a44 <_printf_i+0x1c8>
 80179a8:	f04f 30ff 	mov.w	r0, #4294967295
 80179ac:	b005      	add	sp, #20
 80179ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179b2:	4839      	ldr	r0, [pc, #228]	; (8017a98 <_printf_i+0x21c>)
 80179b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80179b8:	6813      	ldr	r3, [r2, #0]
 80179ba:	6821      	ldr	r1, [r4, #0]
 80179bc:	1d1d      	adds	r5, r3, #4
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	6015      	str	r5, [r2, #0]
 80179c2:	060a      	lsls	r2, r1, #24
 80179c4:	d50b      	bpl.n	80179de <_printf_i+0x162>
 80179c6:	07ca      	lsls	r2, r1, #31
 80179c8:	bf44      	itt	mi
 80179ca:	f041 0120 	orrmi.w	r1, r1, #32
 80179ce:	6021      	strmi	r1, [r4, #0]
 80179d0:	b91b      	cbnz	r3, 80179da <_printf_i+0x15e>
 80179d2:	6822      	ldr	r2, [r4, #0]
 80179d4:	f022 0220 	bic.w	r2, r2, #32
 80179d8:	6022      	str	r2, [r4, #0]
 80179da:	2210      	movs	r2, #16
 80179dc:	e7b7      	b.n	801794e <_printf_i+0xd2>
 80179de:	064d      	lsls	r5, r1, #25
 80179e0:	bf48      	it	mi
 80179e2:	b29b      	uxthmi	r3, r3
 80179e4:	e7ef      	b.n	80179c6 <_printf_i+0x14a>
 80179e6:	4665      	mov	r5, ip
 80179e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80179ec:	fb02 3311 	mls	r3, r2, r1, r3
 80179f0:	5cc3      	ldrb	r3, [r0, r3]
 80179f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80179f6:	460b      	mov	r3, r1
 80179f8:	2900      	cmp	r1, #0
 80179fa:	d1f5      	bne.n	80179e8 <_printf_i+0x16c>
 80179fc:	e7b9      	b.n	8017972 <_printf_i+0xf6>
 80179fe:	6813      	ldr	r3, [r2, #0]
 8017a00:	6825      	ldr	r5, [r4, #0]
 8017a02:	6961      	ldr	r1, [r4, #20]
 8017a04:	1d18      	adds	r0, r3, #4
 8017a06:	6010      	str	r0, [r2, #0]
 8017a08:	0628      	lsls	r0, r5, #24
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	d501      	bpl.n	8017a12 <_printf_i+0x196>
 8017a0e:	6019      	str	r1, [r3, #0]
 8017a10:	e002      	b.n	8017a18 <_printf_i+0x19c>
 8017a12:	066a      	lsls	r2, r5, #25
 8017a14:	d5fb      	bpl.n	8017a0e <_printf_i+0x192>
 8017a16:	8019      	strh	r1, [r3, #0]
 8017a18:	2300      	movs	r3, #0
 8017a1a:	6123      	str	r3, [r4, #16]
 8017a1c:	4665      	mov	r5, ip
 8017a1e:	e7b9      	b.n	8017994 <_printf_i+0x118>
 8017a20:	6813      	ldr	r3, [r2, #0]
 8017a22:	1d19      	adds	r1, r3, #4
 8017a24:	6011      	str	r1, [r2, #0]
 8017a26:	681d      	ldr	r5, [r3, #0]
 8017a28:	6862      	ldr	r2, [r4, #4]
 8017a2a:	2100      	movs	r1, #0
 8017a2c:	4628      	mov	r0, r5
 8017a2e:	f7e8 fbdf 	bl	80001f0 <memchr>
 8017a32:	b108      	cbz	r0, 8017a38 <_printf_i+0x1bc>
 8017a34:	1b40      	subs	r0, r0, r5
 8017a36:	6060      	str	r0, [r4, #4]
 8017a38:	6863      	ldr	r3, [r4, #4]
 8017a3a:	6123      	str	r3, [r4, #16]
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a42:	e7a7      	b.n	8017994 <_printf_i+0x118>
 8017a44:	6923      	ldr	r3, [r4, #16]
 8017a46:	462a      	mov	r2, r5
 8017a48:	4639      	mov	r1, r7
 8017a4a:	4630      	mov	r0, r6
 8017a4c:	47c0      	blx	r8
 8017a4e:	3001      	adds	r0, #1
 8017a50:	d0aa      	beq.n	80179a8 <_printf_i+0x12c>
 8017a52:	6823      	ldr	r3, [r4, #0]
 8017a54:	079b      	lsls	r3, r3, #30
 8017a56:	d413      	bmi.n	8017a80 <_printf_i+0x204>
 8017a58:	68e0      	ldr	r0, [r4, #12]
 8017a5a:	9b03      	ldr	r3, [sp, #12]
 8017a5c:	4298      	cmp	r0, r3
 8017a5e:	bfb8      	it	lt
 8017a60:	4618      	movlt	r0, r3
 8017a62:	e7a3      	b.n	80179ac <_printf_i+0x130>
 8017a64:	2301      	movs	r3, #1
 8017a66:	464a      	mov	r2, r9
 8017a68:	4639      	mov	r1, r7
 8017a6a:	4630      	mov	r0, r6
 8017a6c:	47c0      	blx	r8
 8017a6e:	3001      	adds	r0, #1
 8017a70:	d09a      	beq.n	80179a8 <_printf_i+0x12c>
 8017a72:	3501      	adds	r5, #1
 8017a74:	68e3      	ldr	r3, [r4, #12]
 8017a76:	9a03      	ldr	r2, [sp, #12]
 8017a78:	1a9b      	subs	r3, r3, r2
 8017a7a:	42ab      	cmp	r3, r5
 8017a7c:	dcf2      	bgt.n	8017a64 <_printf_i+0x1e8>
 8017a7e:	e7eb      	b.n	8017a58 <_printf_i+0x1dc>
 8017a80:	2500      	movs	r5, #0
 8017a82:	f104 0919 	add.w	r9, r4, #25
 8017a86:	e7f5      	b.n	8017a74 <_printf_i+0x1f8>
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d1ac      	bne.n	80179e6 <_printf_i+0x16a>
 8017a8c:	7803      	ldrb	r3, [r0, #0]
 8017a8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a96:	e76c      	b.n	8017972 <_printf_i+0xf6>
 8017a98:	0801be15 	.word	0x0801be15
 8017a9c:	0801be26 	.word	0x0801be26

08017aa0 <memmove>:
 8017aa0:	4288      	cmp	r0, r1
 8017aa2:	b510      	push	{r4, lr}
 8017aa4:	eb01 0302 	add.w	r3, r1, r2
 8017aa8:	d807      	bhi.n	8017aba <memmove+0x1a>
 8017aaa:	1e42      	subs	r2, r0, #1
 8017aac:	4299      	cmp	r1, r3
 8017aae:	d00a      	beq.n	8017ac6 <memmove+0x26>
 8017ab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ab4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017ab8:	e7f8      	b.n	8017aac <memmove+0xc>
 8017aba:	4283      	cmp	r3, r0
 8017abc:	d9f5      	bls.n	8017aaa <memmove+0xa>
 8017abe:	1881      	adds	r1, r0, r2
 8017ac0:	1ad2      	subs	r2, r2, r3
 8017ac2:	42d3      	cmn	r3, r2
 8017ac4:	d100      	bne.n	8017ac8 <memmove+0x28>
 8017ac6:	bd10      	pop	{r4, pc}
 8017ac8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017acc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017ad0:	e7f7      	b.n	8017ac2 <memmove+0x22>

08017ad2 <_realloc_r>:
 8017ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ad4:	4607      	mov	r7, r0
 8017ad6:	4614      	mov	r4, r2
 8017ad8:	460e      	mov	r6, r1
 8017ada:	b921      	cbnz	r1, 8017ae6 <_realloc_r+0x14>
 8017adc:	4611      	mov	r1, r2
 8017ade:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017ae2:	f7ff bc6f 	b.w	80173c4 <_malloc_r>
 8017ae6:	b922      	cbnz	r2, 8017af2 <_realloc_r+0x20>
 8017ae8:	f7ff fc1e 	bl	8017328 <_free_r>
 8017aec:	4625      	mov	r5, r4
 8017aee:	4628      	mov	r0, r5
 8017af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017af2:	f000 f814 	bl	8017b1e <_malloc_usable_size_r>
 8017af6:	42a0      	cmp	r0, r4
 8017af8:	d20f      	bcs.n	8017b1a <_realloc_r+0x48>
 8017afa:	4621      	mov	r1, r4
 8017afc:	4638      	mov	r0, r7
 8017afe:	f7ff fc61 	bl	80173c4 <_malloc_r>
 8017b02:	4605      	mov	r5, r0
 8017b04:	2800      	cmp	r0, #0
 8017b06:	d0f2      	beq.n	8017aee <_realloc_r+0x1c>
 8017b08:	4631      	mov	r1, r6
 8017b0a:	4622      	mov	r2, r4
 8017b0c:	f7ff fbf9 	bl	8017302 <memcpy>
 8017b10:	4631      	mov	r1, r6
 8017b12:	4638      	mov	r0, r7
 8017b14:	f7ff fc08 	bl	8017328 <_free_r>
 8017b18:	e7e9      	b.n	8017aee <_realloc_r+0x1c>
 8017b1a:	4635      	mov	r5, r6
 8017b1c:	e7e7      	b.n	8017aee <_realloc_r+0x1c>

08017b1e <_malloc_usable_size_r>:
 8017b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b22:	1f18      	subs	r0, r3, #4
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	bfbc      	itt	lt
 8017b28:	580b      	ldrlt	r3, [r1, r0]
 8017b2a:	18c0      	addlt	r0, r0, r3
 8017b2c:	4770      	bx	lr
	...

08017b30 <_init>:
 8017b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b32:	bf00      	nop
 8017b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b36:	bc08      	pop	{r3}
 8017b38:	469e      	mov	lr, r3
 8017b3a:	4770      	bx	lr

08017b3c <_fini>:
 8017b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b3e:	bf00      	nop
 8017b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b42:	bc08      	pop	{r3}
 8017b44:	469e      	mov	lr, r3
 8017b46:	4770      	bx	lr
