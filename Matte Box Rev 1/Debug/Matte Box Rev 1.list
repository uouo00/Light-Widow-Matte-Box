
Matte Box Rev 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a54c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  0800a6e4  0800a6e4  0001a6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9b8  0800a9b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9b8  0800a9b8  0001a9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9c0  0800a9c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9c0  0800a9c0  0001a9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9c4  0800a9c4  0001a9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a9c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001038  20000010  0800a9d8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001048  0800a9d8  00021048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025c74  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ef5  00000000  00000000  00045cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a20  00000000  00000000  0004abb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001818  00000000  00000000  0004c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000918b  00000000  00000000  0004dde8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ad5d  00000000  00000000  00056f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1e30  00000000  00000000  00071cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123b00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b9c  00000000  00000000  00123b7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a6cc 	.word	0x0800a6cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800a6cc 	.word	0x0800a6cc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <rfidInit>:
/*******************************************************************************
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfidInit(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	rfalAnalogConfigInitialize();                                                     /* Initialize RFAL's Analog Configs */
 80004dc:	f004 ffa4 	bl	8005428 <rfalAnalogConfigInitialize>
	rfalInitialize();                                                                 /* Initialize RFAL */
 80004e0:	f005 fed2 	bl	8006288 <rfalInitialize>
	gState = RFAL_POLLER_STATE_INIT;
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <rfidInit+0x18>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000180 	.word	0x20000180

080004f4 <checkForTags>:
	st25r3916ClrRegisterBits( 0x02, (1 << 3));
	// Turn off oscillator and regulator
	st25r3916ClrRegisterBits( 0x02, (1 << 7));
}

void checkForTags(detectedTags_t *dTags) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	ReturnCode err;

	do {
		rfalWorker();                                                                 /* Execute RFAL process */
 80004fc:	f006 fe3a 	bl	8007174 <rfalWorker>
		switch( gState )
 8000500:	4b3e      	ldr	r3, [pc, #248]	; (80005fc <checkForTags+0x108>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b09      	cmp	r3, #9
 8000506:	d874      	bhi.n	80005f2 <checkForTags+0xfe>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <checkForTags+0x1c>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	08000539 	.word	0x08000539
 8000514:	08000559 	.word	0x08000559
 8000518:	08000579 	.word	0x08000579
 800051c:	080005a7 	.word	0x080005a7
 8000520:	080005af 	.word	0x080005af
 8000524:	080005af 	.word	0x080005af
 8000528:	080005f3 	.word	0x080005f3
 800052c:	080005f3 	.word	0x080005f3
 8000530:	080005f3 	.word	0x080005f3
 8000534:	080005dd 	.word	0x080005dd
		{
			/*******************************************************************************/
			case RFAL_POLLER_STATE_INIT:
				gTechsFound = RFAL_POLLER_FOUND_NONE;
 8000538:	4b31      	ldr	r3, [pc, #196]	; (8000600 <checkForTags+0x10c>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
				gActiveDev  = NULL;
 800053e:	4b31      	ldr	r3, [pc, #196]	; (8000604 <checkForTags+0x110>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
				gDevCnt     = 0;
 8000544:	4b30      	ldr	r3, [pc, #192]	; (8000608 <checkForTags+0x114>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
				dTags->tagCount = 0;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
				gState = RFAL_POLLER_STATE_TECHDETECT;
 8000550:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <checkForTags+0x108>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
				break;
 8000556:	e047      	b.n	80005e8 <checkForTags+0xf4>

			/*******************************************************************************/
			case RFAL_POLLER_STATE_TECHDETECT:
				if( !rfalPollerTechDetetection() )                             	/* Poll for nearby devices	*/
 8000558:	f000 f858 	bl	800060c <rfalPollerTechDetetection>
 800055c:	4603      	mov	r3, r0
 800055e:	f083 0301 	eor.w	r3, r3, #1
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d003      	beq.n	8000570 <checkForTags+0x7c>
				{
					gState = RFAL_POLLER_STATE_DEACTIVATION;                  	/* If no device was found, restart loop */
 8000568:	4b24      	ldr	r3, [pc, #144]	; (80005fc <checkForTags+0x108>)
 800056a:	2209      	movs	r2, #9
 800056c:	701a      	strb	r2, [r3, #0]
					break;
 800056e:	e03b      	b.n	80005e8 <checkForTags+0xf4>
				}
				gState = RFAL_POLLER_STATE_COLAVOIDANCE;                      	/* One or more devices found, go to Collision Avoidance */
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <checkForTags+0x108>)
 8000572:	2202      	movs	r2, #2
 8000574:	701a      	strb	r2, [r3, #0]
				break;
 8000576:	e037      	b.n	80005e8 <checkForTags+0xf4>

			/*******************************************************************************/
			case RFAL_POLLER_STATE_COLAVOIDANCE:
				if( !rfalPollerCollResolution() )                              	/* Resolve any eventual collision 	*/
 8000578:	f000 f870 	bl	800065c <rfalPollerCollResolution>
 800057c:	4603      	mov	r3, r0
 800057e:	f083 0301 	eor.w	r3, r3, #1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d003      	beq.n	8000590 <checkForTags+0x9c>
				{
					gState = RFAL_POLLER_STATE_DEACTIVATION;                  	/* If Collision Resolution was unable to retrieve any device, restart loop */
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <checkForTags+0x108>)
 800058a:	2209      	movs	r2, #9
 800058c:	701a      	strb	r2, [r3, #0]
					break;
 800058e:	e02b      	b.n	80005e8 <checkForTags+0xf4>
				}

				dTags->tagCount = gDevCnt;
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <checkForTags+0x114>)
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	701a      	strb	r2, [r3, #0]

				copyUIDs(dTags);												/* The Collision Resolution has identified devices. Copy UIDs to structure */
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 f8cf 	bl	800073c <copyUIDs>

				gState = RFAL_POLLER_STATE_DEACTIVATION;                      	/* Device(s) have been Loaded into UID Structure, power off field */
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <checkForTags+0x108>)
 80005a0:	2209      	movs	r2, #9
 80005a2:	701a      	strb	r2, [r3, #0]
				break;
 80005a4:	e020      	b.n	80005e8 <checkForTags+0xf4>
			case RFAL_POLLER_STATE_ACTIVATION:
//				if( !exampleRfalPollerActivation(0) ){                    		/* Any device previous identified can be Activated, on this example will select the first on the list */
//					gState = RFAL_POLLER_STATE_DEACTIVATION;            		/* If Activation failed, restart loop */
//					break;
//				}
				gState = RFAL_POLLER_STATE_DATAEXCHANGE_START;          		/* Device has been properly activated, go to Data Exchange */
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <checkForTags+0x108>)
 80005a8:	2204      	movs	r2, #4
 80005aa:	701a      	strb	r2, [r3, #0]
				break;
 80005ac:	e01c      	b.n	80005e8 <checkForTags+0xf4>

			/*******************************************************************************/
			case RFAL_POLLER_STATE_DATAEXCHANGE_START:
			case RFAL_POLLER_STATE_DATAEXCHANGE_CHECK:
//				err = exampleRfalPollerDataExchange();                          /* Perform Data Exchange, in this example a simple transfer will executed in order to do device's presence check */
				switch(err){
 80005ae:	89fb      	ldrh	r3, [r7, #14]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <checkForTags+0xc6>
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d008      	beq.n	80005ca <checkForTags+0xd6>
 80005b8:	e00b      	b.n	80005d2 <checkForTags+0xde>
					case ERR_NONE:                                              /* Data exchange successful  */
						platformDelay(300);                                     /* Wait a bit */
 80005ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005be:	f000 fdef 	bl	80011a0 <HAL_Delay>
						gState = RFAL_POLLER_STATE_DATAEXCHANGE_START;        	/* Trigger new exchange with device */
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <checkForTags+0x108>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	701a      	strb	r2, [r3, #0]
						break;
 80005c8:	e007      	b.n	80005da <checkForTags+0xe6>

					case ERR_BUSY:                                              /* Data exchange ongoing  */
						gState = RFAL_POLLER_STATE_DATAEXCHANGE_CHECK;        	/* Once triggered/started the Data Exchange only do check until is completed */
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <checkForTags+0x108>)
 80005cc:	2205      	movs	r2, #5
 80005ce:	701a      	strb	r2, [r3, #0]
						break;
 80005d0:	e003      	b.n	80005da <checkForTags+0xe6>

					default:                                                    /* Data exchange not successful, card removed or other transmission error */
						gState = RFAL_POLLER_STATE_DEACTIVATION;              	/* Restart loop */
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <checkForTags+0x108>)
 80005d4:	2209      	movs	r2, #9
 80005d6:	701a      	strb	r2, [r3, #0]
						break;
 80005d8:	bf00      	nop
				}
				break;
 80005da:	e005      	b.n	80005e8 <checkForTags+0xf4>
//////////
			/*******************************************************************************/
			case RFAL_POLLER_STATE_DEACTIVATION:
				rfalFieldOff();                                               	/* Turn the Field Off powering down any device nearby */
 80005dc:	f006 fbd4 	bl	8006d88 <rfalFieldOff>
				gState = RFAL_POLLER_STATE_INIT;                              	/* Restart the loop */
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <checkForTags+0x108>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
				break;
 80005e6:	bf00      	nop

			/*******************************************************************************/
			default:
				return;
		}
	} while (gState != RFAL_POLLER_STATE_INIT);								  	/* Only run for one full activation cycle */
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <checkForTags+0x108>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d185      	bne.n	80004fc <checkForTags+0x8>
 80005f0:	e000      	b.n	80005f4 <checkForTags+0x100>
				return;
 80005f2:	bf00      	nop
}
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000180 	.word	0x20000180
 8000600:	20000181 	.word	0x20000181
 8000604:	20000a30 	.word	0x20000a30
 8000608:	2000002c 	.word	0x2000002c

0800060c <rfalPollerTechDetetection>:



static bool rfalPollerTechDetetection( void )
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
	ReturnCode           err;
	rfalNfcvInventoryRes invRes;
	gTechsFound = RFAL_POLLER_FOUND_NONE;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <rfalPollerTechDetetection+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]

	/*******************************************************************************/
	/* NFC-V Technology Detection                                                  */
	/*******************************************************************************/
	rfalNfcvPollerInitialize();                                                       /* Initialize RFAL for NFC-V */
 8000618:	f005 fbe8 	bl	8005dec <rfalNfcvPollerInitialize>
	rfalFieldOnAndStartGT();                                                          /* As field is already On only starts GT timer */
 800061c:	f006 fb4c 	bl	8006cb8 <rfalFieldOnAndStartGT>
	err = rfalNfcvPollerCheckPresence( &invRes );                                     /* Poll for NFC-V devices */
 8000620:	463b      	mov	r3, r7
 8000622:	4618      	mov	r0, r3
 8000624:	f005 fc06 	bl	8005e34 <rfalNfcvPollerCheckPresence>
 8000628:	4603      	mov	r3, r0
 800062a:	81fb      	strh	r3, [r7, #14]
	if( err == ERR_NONE )
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d106      	bne.n	8000640 <rfalPollerTechDetetection+0x34>
	{
		gTechsFound |= RFAL_POLLER_FOUND_V;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <rfalPollerTechDetetection+0x4c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <rfalPollerTechDetetection+0x4c>)
 800063e:	701a      	strb	r2, [r3, #0]
	}
	return (gTechsFound != RFAL_POLLER_FOUND_NONE);
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <rfalPollerTechDetetection+0x4c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	bf14      	ite	ne
 8000648:	2301      	movne	r3, #1
 800064a:	2300      	moveq	r3, #0
 800064c:	b2db      	uxtb	r3, r3
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000181 	.word	0x20000181

0800065c <rfalPollerCollResolution>:

static bool rfalPollerCollResolution( void )
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b08d      	sub	sp, #52	; 0x34
 8000660:	af00      	add	r7, sp, #0
	ReturnCode err;

	/*******************************************************************************/
	/* NFC-V Collision Resolution                                                  */
	/*******************************************************************************/
	if( gTechsFound & RFAL_POLLER_FOUND_V )                                   /* If a NFC-F device was found/detected, perform Collision Resolution */
 8000662:	4b33      	ldr	r3, [pc, #204]	; (8000730 <rfalPollerCollResolution+0xd4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	f003 0308 	and.w	r3, r3, #8
 800066a:	2b00      	cmp	r3, #0
 800066c:	d055      	beq.n	800071a <rfalPollerCollResolution+0xbe>
	{
		rfalNfcvListenDevice nfcvDevList[RFAL_POLLER_DEVICES];
		rfalNfcvPollerInitialize();
 800066e:	f005 fbbd 	bl	8005dec <rfalNfcvPollerInitialize>
		rfalFieldOnAndStartGT();                                                      /* Ensure GT again as other technologies have also been polled */
 8000672:	f006 fb21 	bl	8006cb8 <rfalFieldOnAndStartGT>
		err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (RFAL_POLLER_DEVICES - gDevCnt), nfcvDevList, &devCnt );
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <rfalPollerCollResolution+0xd8>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f1c3 0303 	rsb	r3, r3, #3
 800067e:	b2d9      	uxtb	r1, r3
 8000680:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000684:	1d3a      	adds	r2, r7, #4
 8000686:	2000      	movs	r0, #0
 8000688:	f005 fc58 	bl	8005f3c <rfalNfcvPollerCollisionResolution>
 800068c:	4603      	mov	r3, r0
 800068e:	85bb      	strh	r3, [r7, #44]	; 0x2c
		if( (err == ERR_NONE) && (devCnt != 0) )
 8000690:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000692:	2b00      	cmp	r3, #0
 8000694:	d141      	bne.n	800071a <rfalPollerCollResolution+0xbe>
 8000696:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800069a:	2b00      	cmp	r3, #0
 800069c:	d03d      	beq.n	800071a <rfalPollerCollResolution+0xbe>
		{
			for( i=0; i<devCnt; i++ )                                                /* Copy devices found form local Nfcf list into global device list */
 800069e:	2300      	movs	r3, #0
 80006a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80006a4:	e033      	b.n	800070e <rfalPollerCollResolution+0xb2>
			{
				gDevList[gDevCnt].type     = RFAL_POLLER_TYPE_NFCV;
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <rfalPollerCollResolution+0xd8>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	4619      	mov	r1, r3
 80006ac:	4a22      	ldr	r2, [pc, #136]	; (8000738 <rfalPollerCollResolution+0xdc>)
 80006ae:	460b      	mov	r3, r1
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	1a5b      	subs	r3, r3, r1
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	4413      	add	r3, r2
 80006b8:	2203      	movs	r2, #3
 80006ba:	701a      	strb	r2, [r3, #0]
				gDevList[gDevCnt].dev.nfcv = nfcvDevList[i];
 80006bc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <rfalPollerCollResolution+0xd8>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	491c      	ldr	r1, [pc, #112]	; (8000738 <rfalPollerCollResolution+0xdc>)
 80006c8:	4603      	mov	r3, r0
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a1b      	subs	r3, r3, r0
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	4419      	add	r1, r3
 80006d2:	4613      	mov	r3, r2
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	4413      	add	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006e0:	4413      	add	r3, r2
 80006e2:	f1a3 022c 	sub.w	r2, r3, #44	; 0x2c
 80006e6:	1c4b      	adds	r3, r1, #1
 80006e8:	6814      	ldr	r4, [r2, #0]
 80006ea:	6850      	ldr	r0, [r2, #4]
 80006ec:	6891      	ldr	r1, [r2, #8]
 80006ee:	601c      	str	r4, [r3, #0]
 80006f0:	6058      	str	r0, [r3, #4]
 80006f2:	6099      	str	r1, [r3, #8]
 80006f4:	7b12      	ldrb	r2, [r2, #12]
 80006f6:	731a      	strb	r2, [r3, #12]
				gDevCnt++;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <rfalPollerCollResolution+0xd8>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <rfalPollerCollResolution+0xd8>)
 8000702:	701a      	strb	r2, [r3, #0]
			for( i=0; i<devCnt; i++ )                                                /* Copy devices found form local Nfcf list into global device list */
 8000704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000708:	3301      	adds	r3, #1
 800070a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800070e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000712:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000716:	429a      	cmp	r2, r3
 8000718:	d3c5      	bcc.n	80006a6 <rfalPollerCollResolution+0x4a>
			}
		}
	}

	return (gDevCnt > 0);
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <rfalPollerCollResolution+0xd8>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	bf14      	ite	ne
 8000722:	2301      	movne	r3, #1
 8000724:	2300      	moveq	r3, #0
 8000726:	b2db      	uxtb	r3, r3
}
 8000728:	4618      	mov	r0, r3
 800072a:	3734      	adds	r7, #52	; 0x34
 800072c:	46bd      	mov	sp, r7
 800072e:	bd90      	pop	{r4, r7, pc}
 8000730:	20000181 	.word	0x20000181
 8000734:	2000002c 	.word	0x2000002c
 8000738:	20000030 	.word	0x20000030

0800073c <copyUIDs>:


static bool copyUIDs(detectedTags_t *dTags) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	for (uint8_t devCnt = 0; devCnt < gDevCnt; devCnt++) {
 8000744:	2300      	movs	r3, #0
 8000746:	73fb      	strb	r3, [r7, #15]
 8000748:	e013      	b.n	8000772 <copyUIDs+0x36>
		memcpy(dTags->TagUID[devCnt], gDevList[devCnt].dev.nfcv.InvRes.UID, RFAL_NFCV_UID_LEN);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	1c58      	adds	r0, r3, #1
 8000754:	7bfa      	ldrb	r2, [r7, #15]
 8000756:	4613      	mov	r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	1a9b      	subs	r3, r3, r2
 800075c:	011b      	lsls	r3, r3, #4
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <copyUIDs+0x4c>)
 8000760:	4413      	add	r3, r2
 8000762:	3303      	adds	r3, #3
 8000764:	2208      	movs	r2, #8
 8000766:	4619      	mov	r1, r3
 8000768:	f009 ff9c 	bl	800a6a4 <memcpy>
	for (uint8_t devCnt = 0; devCnt < gDevCnt; devCnt++) {
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <copyUIDs+0x50>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	7bfa      	ldrb	r2, [r7, #15]
 8000778:	429a      	cmp	r2, r3
 800077a:	d3e6      	bcc.n	800074a <copyUIDs+0xe>
	}
}
 800077c:	bf00      	nop
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000030 	.word	0x20000030
 800078c:	2000002c 	.word	0x2000002c

08000790 <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 8000798:	4a08      	ldr	r2, [pc, #32]	; (80007bc <spiInit+0x2c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007ac:	601a      	str	r2, [r3, #0]
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000584 	.word	0x20000584

080007c0 <spiSelect>:

void spiSelect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_RESET);
 80007cc:	887b      	ldrh	r3, [r7, #2]
 80007ce:	2200      	movs	r2, #0
 80007d0:	4619      	mov	r1, r3
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 ffd4 	bl	8001780 <HAL_GPIO_WritePin>
}     
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <spiDeselect>:

void spiDeselect(GPIO_TypeDef *ssPort, uint16_t ssPin)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
 80007ec:	887b      	ldrh	r3, [r7, #2]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 ffc4 	bl	8001780 <HAL_GPIO_WritePin>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <spiTxRx>:

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af02      	add	r7, sp, #8
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	4613      	mov	r3, r2
 800080c:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <spiTxRx+0x70>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <spiTxRx+0x1a>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e026      	b.n	8000868 <spiTxRx+0x68>
  
  if(length > SPI_BUF_LEN)
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000820:	d901      	bls.n	8000826 <spiTxRx+0x26>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e020      	b.n	8000868 <spiTxRx+0x68>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d006      	beq.n	800083a <spiTxRx+0x3a>
  {
    memcpy(txBuf, txData, length );
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	461a      	mov	r2, r3
 8000830:	68f9      	ldr	r1, [r7, #12]
 8000832:	4810      	ldr	r0, [pc, #64]	; (8000874 <spiTxRx+0x74>)
 8000834:	f009 ff36 	bl	800a6a4 <memcpy>
 8000838:	e005      	b.n	8000846 <spiTxRx+0x46>
  }
  else
  {
    memset(txBuf, 0x00, length );
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	461a      	mov	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <spiTxRx+0x74>)
 8000842:	f009 ff3a 	bl	800a6ba <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <spiTxRx+0x70>)
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <spiTxRx+0x54>
 8000850:	68ba      	ldr	r2, [r7, #8]
 8000852:	e000      	b.n	8000856 <spiTxRx+0x56>
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <spiTxRx+0x78>)
 8000856:	88f9      	ldrh	r1, [r7, #6]
 8000858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	460b      	mov	r3, r1
 8000860:	4904      	ldr	r1, [pc, #16]	; (8000874 <spiTxRx+0x74>)
 8000862:	f003 f911 	bl	8003a88 <HAL_SPI_TransmitReceive>
 8000866:	4603      	mov	r3, r0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000584 	.word	0x20000584
 8000874:	20000184 	.word	0x20000184
 8000878:	20000384 	.word	0x20000384

0800087c <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 8000886:	f000 fc7f 	bl	8001188 <HAL_GetTick>
 800088a:	4602      	mov	r2, r0
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	4413      	add	r3, r2
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 80008a0:	f000 fc72 	bl	8001188 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da01      	bge.n	80008ba <timerIsExpired+0x22>
  {
    return true;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e000      	b.n	80008bc <timerIsExpired+0x24>
  }
  
  return false;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f000 fbf8 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f826 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 f960 	bl	8000b94 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008d4:	f000 f8a4 	bl	8000a20 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80008d8:	f000 f8d0 	bl	8000a7c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80008dc:	f000 f8ee 	bl	8000abc <MX_SPI1_Init>
  MX_SPI2_Init();
 80008e0:	f000 f922 	bl	8000b28 <MX_SPI2_Init>
//  dataLoggerInit();
//
//  rtcModuleInit(&hrtc);


  HAL_GPIO_WritePin(RFID_POWER_GPIO_Port, RFID_POWER_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2108      	movs	r1, #8
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <main+0x4c>)
 80008ea:	f000 ff49 	bl	8001780 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80008ee:	2005      	movs	r0, #5
 80008f0:	f000 fc56 	bl	80011a0 <HAL_Delay>
  spiInit(&hspi1);
 80008f4:	4807      	ldr	r0, [pc, #28]	; (8000914 <main+0x50>)
 80008f6:	f7ff ff4b 	bl	8000790 <spiInit>
  rfidInit();
 80008fa:	f7ff fded 	bl	80004d8 <rfidInit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  checkCliStatus();

	  checkForTags(&tagsFound);
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <main+0x54>)
 8000900:	f7ff fdf8 	bl	80004f4 <checkForTags>
	  HAL_Delay(1000);
 8000904:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000908:	f000 fc4a 	bl	80011a0 <HAL_Delay>
	  checkForTags(&tagsFound);
 800090c:	e7f7      	b.n	80008fe <main+0x3a>
 800090e:	bf00      	nop
 8000910:	40020000 	.word	0x40020000
 8000914:	20000be4 	.word	0x20000be4
 8000918:	20000b44 	.word	0x20000b44

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09a      	sub	sp, #104	; 0x68
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000926:	2230      	movs	r2, #48	; 0x30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f009 fec5 	bl	800a6ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
 8000950:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <SystemClock_Config+0xfc>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a2f      	ldr	r2, [pc, #188]	; (8000a18 <SystemClock_Config+0xfc>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <SystemClock_Config+0xfc>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <SystemClock_Config+0x100>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <SystemClock_Config+0x100>)
 8000978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <SystemClock_Config+0x100>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800098a:	2309      	movs	r3, #9
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000994:	2301      	movs	r3, #1
 8000996:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000998:	2302      	movs	r3, #2
 800099a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a2:	2304      	movs	r3, #4
 80009a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009a6:	2348      	movs	r3, #72	; 0x48
 80009a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009ae:	2303      	movs	r3, #3
 80009b0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 ffd8 	bl	800296c <HAL_RCC_OscConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009c2:	f000 f9c7 	bl	8000d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c6:	230f      	movs	r3, #15
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ca:	2302      	movs	r3, #2
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	2102      	movs	r1, #2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fa32 	bl	8002e4c <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80009ee:	f000 f9b1 	bl	8000d54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009f2:	2302      	movs	r3, #2
 80009f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 fc01 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000a0c:	f000 f9a2 	bl	8000d54 <Error_Handler>
  }
}
 8000a10:	bf00      	nop
 8000a12:	3768      	adds	r7, #104	; 0x68
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a26:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <MX_I2C1_Init+0x54>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_I2C1_Init+0x58>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a5e:	f000 fecd 	bl	80017fc <HAL_I2C_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 f974 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000a8c 	.word	0x20000a8c
 8000a74:	40005400 	.word	0x40005400
 8000a78:	00061a80 	.word	0x00061a80

08000a7c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_SDIO_SD_Init+0x38>)
 8000a82:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <MX_SDIO_SD_Init+0x3c>)
 8000a84:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_SDIO_SD_Init+0x38>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_SDIO_SD_Init+0x38>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_SDIO_SD_Init+0x38>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_SDIO_SD_Init+0x38>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <MX_SDIO_SD_Init+0x38>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <MX_SDIO_SD_Init+0x38>)
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	20000b60 	.word	0x20000b60
 8000ab8:	40012c00 	.word	0x40012c00

08000abc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000af0:	2210      	movs	r2, #16
 8000af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b0e:	f002 ff57 	bl	80039c0 <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b18:	f000 f91c 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000be4 	.word	0x20000be4
 8000b24:	40013000 	.word	0x40013000

08000b28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b2e:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <MX_SPI2_Init+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b74:	220a      	movs	r2, #10
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_SPI2_Init+0x64>)
 8000b7a:	f002 ff21 	bl	80039c0 <HAL_SPI_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b84:	f000 f8e6 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000a34 	.word	0x20000a34
 8000b90:	40003800 	.word	0x40003800

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b64      	ldr	r3, [pc, #400]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a63      	ldr	r2, [pc, #396]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b61      	ldr	r3, [pc, #388]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b5d      	ldr	r3, [pc, #372]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a5c      	ldr	r2, [pc, #368]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b5a      	ldr	r3, [pc, #360]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a55      	ldr	r2, [pc, #340]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b4f      	ldr	r3, [pc, #316]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a4e      	ldr	r2, [pc, #312]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b4c      	ldr	r3, [pc, #304]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b48      	ldr	r3, [pc, #288]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a47      	ldr	r2, [pc, #284]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b45      	ldr	r3, [pc, #276]	; (8000d40 <MX_GPIO_Init+0x1ac>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2143      	movs	r1, #67	; 0x43
 8000c3a:	4842      	ldr	r0, [pc, #264]	; (8000d44 <MX_GPIO_Init+0x1b0>)
 8000c3c:	f000 fda0 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 8000c40:	2200      	movs	r2, #0
 8000c42:	f240 111b 	movw	r1, #283	; 0x11b
 8000c46:	4840      	ldr	r0, [pc, #256]	; (8000d48 <MX_GPIO_Init+0x1b4>)
 8000c48:	f000 fd9a 	bl	8001780 <HAL_GPIO_WritePin>
                          |USB_RENUM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|AUX_POWER_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2123      	movs	r1, #35	; 0x23
 8000c50:	483e      	ldr	r0, [pc, #248]	; (8000d4c <MX_GPIO_Init+0x1b8>)
 8000c52:	f000 fd95 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_POWER_Pin EPD_SPI_CS_Pin SDIO_POWER_Pin */
  GPIO_InitStruct.Pin = EPD_POWER_Pin|EPD_SPI_CS_Pin|SDIO_POWER_Pin;
 8000c56:	2343      	movs	r3, #67	; 0x43
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4835      	ldr	r0, [pc, #212]	; (8000d44 <MX_GPIO_Init+0x1b0>)
 8000c6e:	f000 fbed 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DISCHARGE_Pin EPD_NRST_Pin RFID_POWER_Pin RF_SPI_BSS_Pin 
                           USB_RENUM_Pin */
  GPIO_InitStruct.Pin = EPD_DISCHARGE_Pin|EPD_NRST_Pin|RFID_POWER_Pin|RF_SPI_BSS_Pin 
 8000c72:	f240 131b 	movw	r3, #283	; 0x11b
 8000c76:	617b      	str	r3, [r7, #20]
                          |USB_RENUM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	482f      	ldr	r0, [pc, #188]	; (8000d48 <MX_GPIO_Init+0x1b4>)
 8000c8c:	f000 fbde 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8000c90:	2304      	movs	r3, #4
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4829      	ldr	r0, [pc, #164]	; (8000d48 <MX_GPIO_Init+0x1b4>)
 8000ca4:	f000 fbd2 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <MX_GPIO_Init+0x1bc>)
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4822      	ldr	r0, [pc, #136]	; (8000d44 <MX_GPIO_Init+0x1b0>)
 8000cbc:	f000 fbc6 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin AUX_POWER_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|AUX_POWER_Pin;
 8000cc0:	2323      	movs	r3, #35	; 0x23
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481d      	ldr	r0, [pc, #116]	; (8000d4c <MX_GPIO_Init+0x1b8>)
 8000cd8:	f000 fbb8 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : B_INPUT1_Pin B_INPUT2_Pin B_INPUT3_Pin TEMP_IRQ_Pin 
                           LOW_BAT_IRQ_Pin */
  GPIO_InitStruct.Pin = B_INPUT1_Pin|B_INPUT2_Pin|B_INPUT3_Pin|TEMP_IRQ_Pin 
 8000cdc:	f44f 43e6 	mov.w	r3, #29440	; 0x7300
 8000ce0:	617b      	str	r3, [r7, #20]
                          |LOW_BAT_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <MX_GPIO_Init+0x1bc>)
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4816      	ldr	r0, [pc, #88]	; (8000d4c <MX_GPIO_Init+0x1b8>)
 8000cf2:	f000 fbab 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	480e      	ldr	r0, [pc, #56]	; (8000d44 <MX_GPIO_Init+0x1b0>)
 8000d0a:	f000 fb9f 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : TC_SIGNAL_Pin */
  GPIO_InitStruct.Pin = TC_SIGNAL_Pin;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TC_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480a      	ldr	r0, [pc, #40]	; (8000d4c <MX_GPIO_Init+0x1b8>)
 8000d22:	f000 fb93 	bl	800144c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	200a      	movs	r0, #10
 8000d2c:	f000 fb35 	bl	800139a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000d30:	200a      	movs	r0, #10
 8000d32:	f000 fb4e 	bl	80013d2 <HAL_NVIC_EnableIRQ>

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	10110000 	.word	0x10110000

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <HAL_I2C_MspInit+0x84>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d12b      	bne.n	8000e2e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_I2C_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_I2C_MspInit+0x88>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_I2C_MspInit+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = AUX_I2C_SCL_Pin|AUX_I2C_SDA_Pin;
 8000df2:	23c0      	movs	r3, #192	; 0xc0
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df6:	2312      	movs	r3, #18
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e02:	2304      	movs	r3, #4
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <HAL_I2C_MspInit+0x8c>)
 8000e0e:	f000 fb1d 	bl	800144c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_I2C_MspInit+0x88>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_I2C_MspInit+0x88>)
 8000e1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_I2C_MspInit+0x88>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020400 	.word	0x40020400

08000e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	; 0x30
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a45      	ldr	r2, [pc, #276]	; (8000f78 <HAL_SPI_MspInit+0x134>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d134      	bne.n	8000ed0 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	4b44      	ldr	r3, [pc, #272]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a43      	ldr	r2, [pc, #268]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b41      	ldr	r3, [pc, #260]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a3c      	ldr	r2, [pc, #240]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SPI_SCLK_Pin|RF_SPI_MISO_Pin|RF_SPI_MOSI_Pin;
 8000e9e:	23e0      	movs	r3, #224	; 0xe0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4831      	ldr	r0, [pc, #196]	; (8000f80 <HAL_SPI_MspInit+0x13c>)
 8000eba:	f000 fac7 	bl	800144c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2023      	movs	r0, #35	; 0x23
 8000ec4:	f000 fa69 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ec8:	2023      	movs	r0, #35	; 0x23
 8000eca:	f000 fa82 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ece:	e04f      	b.n	8000f70 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a2b      	ldr	r2, [pc, #172]	; (8000f84 <HAL_SPI_MspInit+0x140>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d14a      	bne.n	8000f70 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_SPI_MspInit+0x138>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EPD_SPI_MISO_Pin|EPD_SPI_MOSI_Pin;
 8000f2e:	230c      	movs	r3, #12
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	480f      	ldr	r0, [pc, #60]	; (8000f88 <HAL_SPI_MspInit+0x144>)
 8000f4a:	f000 fa7f 	bl	800144c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f60:	2305      	movs	r3, #5
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <HAL_SPI_MspInit+0x148>)
 8000f6c:	f000 fa6e 	bl	800144c <HAL_GPIO_Init>
}
 8000f70:	bf00      	nop
 8000f72:	3730      	adds	r7, #48	; 0x30
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40013000 	.word	0x40013000
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40003800 	.word	0x40003800
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020400 	.word	0x40020400

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 f8bc 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000ff0:	2010      	movs	r0, #16
 8000ff2:	f000 fbdf 	bl	80017b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  st25r3916Isr();
 8000ff6:	f007 ffc5 	bl	8008f84 <st25r3916Isr>
  /* USER CODE END EXTI4_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <SPI1_IRQHandler+0x10>)
 8001006:	f002 fee1 	bl	8003dcc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000be4 	.word	0x20000be4

08001014 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <SDIO_IRQHandler+0x10>)
 800101a:	f002 f9e5 	bl	80033e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000b60 	.word	0x20000b60

08001028 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <OTG_FS_IRQHandler+0x10>)
 800102e:	f000 fd1d 	bl	8001a6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000c40 	.word	0x20000c40

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <SystemInit+0x28>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <SystemInit+0x28>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SystemInit+0x28>)
 8001052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001056:	609a      	str	r2, [r3, #8]
#endif
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800106c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800106e:	e003      	b.n	8001078 <LoopCopyDataInit>

08001070 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001072:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001074:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001076:	3104      	adds	r1, #4

08001078 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800107c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800107e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001080:	d3f6      	bcc.n	8001070 <CopyDataInit>
  ldr  r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001084:	e002      	b.n	800108c <LoopFillZerobss>

08001086 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001086:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001088:	f842 3b04 	str.w	r3, [r2], #4

0800108c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800108e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001090:	d3f9      	bcc.n	8001086 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001092:	f7ff ffd3 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f009 fae1 	bl	800a65c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fc13 	bl	80008c4 <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010a4:	0800a9c8 	.word	0x0800a9c8
  ldr  r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010ac:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80010b0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80010b4:	20001048 	.word	0x20001048

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_Init+0x40>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_Init+0x40>)
 80010d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_Init+0x40>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f94d 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fe38 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023c00 	.word	0x40023c00

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f965 	bl	80013ee <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 f92d 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	20000008 	.word	0x20000008
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	20000c3c 	.word	0x20000c3c

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000c3c 	.word	0x20000c3c

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_Delay+0x40>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000008 	.word	0x20000008

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4907      	ldr	r1, [pc, #28]	; (8001280 <__NVIC_EnableIRQ+0x38>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff29 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff3e 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff8e 	bl	80012d8 <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff31 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d004      	beq.n	8001424 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e00c      	b.n	800143e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2205      	movs	r2, #5
 8001428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0201 	bic.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	e159      	b.n	800171c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001468:	2201      	movs	r2, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 8148 	bne.w	8001716 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d00b      	beq.n	80014a6 <HAL_GPIO_Init+0x5a>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d007      	beq.n	80014a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800149a:	2b11      	cmp	r3, #17
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b12      	cmp	r3, #18
 80014a4:	d130      	bne.n	8001508 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0xfc>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b12      	cmp	r3, #18
 8001546:	d123      	bne.n	8001590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	69b9      	ldr	r1, [r7, #24]
 800158c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0203 	and.w	r2, r3, #3
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a2 	beq.w	8001716 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b56      	ldr	r3, [pc, #344]	; (8001730 <HAL_GPIO_Init+0x2e4>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a55      	ldr	r2, [pc, #340]	; (8001730 <HAL_GPIO_Init+0x2e4>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_GPIO_Init+0x2e4>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ee:	4a51      	ldr	r2, [pc, #324]	; (8001734 <HAL_GPIO_Init+0x2e8>)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a48      	ldr	r2, [pc, #288]	; (8001738 <HAL_GPIO_Init+0x2ec>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d019      	beq.n	800164e <HAL_GPIO_Init+0x202>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a47      	ldr	r2, [pc, #284]	; (800173c <HAL_GPIO_Init+0x2f0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0x1fe>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a46      	ldr	r2, [pc, #280]	; (8001740 <HAL_GPIO_Init+0x2f4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00d      	beq.n	8001646 <HAL_GPIO_Init+0x1fa>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a45      	ldr	r2, [pc, #276]	; (8001744 <HAL_GPIO_Init+0x2f8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d007      	beq.n	8001642 <HAL_GPIO_Init+0x1f6>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a44      	ldr	r2, [pc, #272]	; (8001748 <HAL_GPIO_Init+0x2fc>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d101      	bne.n	800163e <HAL_GPIO_Init+0x1f2>
 800163a:	2304      	movs	r3, #4
 800163c:	e008      	b.n	8001650 <HAL_GPIO_Init+0x204>
 800163e:	2307      	movs	r3, #7
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x204>
 8001642:	2303      	movs	r3, #3
 8001644:	e004      	b.n	8001650 <HAL_GPIO_Init+0x204>
 8001646:	2302      	movs	r3, #2
 8001648:	e002      	b.n	8001650 <HAL_GPIO_Init+0x204>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x204>
 800164e:	2300      	movs	r3, #0
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	f002 0203 	and.w	r2, r2, #3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4093      	lsls	r3, r2
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001660:	4934      	ldr	r1, [pc, #208]	; (8001734 <HAL_GPIO_Init+0x2e8>)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <HAL_GPIO_Init+0x300>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001692:	4a2e      	ldr	r2, [pc, #184]	; (800174c <HAL_GPIO_Init+0x300>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001698:	4b2c      	ldr	r3, [pc, #176]	; (800174c <HAL_GPIO_Init+0x300>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016bc:	4a23      	ldr	r2, [pc, #140]	; (800174c <HAL_GPIO_Init+0x300>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <HAL_GPIO_Init+0x300>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016e6:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_GPIO_Init+0x300>)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_GPIO_Init+0x300>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <HAL_GPIO_Init+0x300>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3301      	adds	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	2b0f      	cmp	r3, #15
 8001720:	f67f aea2 	bls.w	8001468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001724:	bf00      	nop
 8001726:	3724      	adds	r7, #36	; 0x24
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40023800 	.word	0x40023800
 8001734:	40013800 	.word	0x40013800
 8001738:	40020000 	.word	0x40020000
 800173c:	40020400 	.word	0x40020400
 8001740:	40020800 	.word	0x40020800
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40021000 	.word	0x40021000
 800174c:	40013c00 	.word	0x40013c00

08001750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	e001      	b.n	8001772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
 800178c:	4613      	mov	r3, r2
 800178e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001790:	787b      	ldrb	r3, [r7, #1]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800179c:	e003      	b.n	80017a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	041a      	lsls	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	619a      	str	r2, [r3, #24]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f806 	bl	80017e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40013c00 	.word	0x40013c00

080017e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e11f      	b.n	8001a4e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fac6 	bl	8000db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2224      	movs	r2, #36	; 0x24
 800182c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800184e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800185e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001860:	f001 fcbe 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8001864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a7b      	ldr	r2, [pc, #492]	; (8001a58 <HAL_I2C_Init+0x25c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d807      	bhi.n	8001880 <HAL_I2C_Init+0x84>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4a7a      	ldr	r2, [pc, #488]	; (8001a5c <HAL_I2C_Init+0x260>)
 8001874:	4293      	cmp	r3, r2
 8001876:	bf94      	ite	ls
 8001878:	2301      	movls	r3, #1
 800187a:	2300      	movhi	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	e006      	b.n	800188e <HAL_I2C_Init+0x92>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4a77      	ldr	r2, [pc, #476]	; (8001a60 <HAL_I2C_Init+0x264>)
 8001884:	4293      	cmp	r3, r2
 8001886:	bf94      	ite	ls
 8001888:	2301      	movls	r3, #1
 800188a:	2300      	movhi	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0db      	b.n	8001a4e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4a72      	ldr	r2, [pc, #456]	; (8001a64 <HAL_I2C_Init+0x268>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0c9b      	lsrs	r3, r3, #18
 80018a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a64      	ldr	r2, [pc, #400]	; (8001a58 <HAL_I2C_Init+0x25c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d802      	bhi.n	80018d0 <HAL_I2C_Init+0xd4>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3301      	adds	r3, #1
 80018ce:	e009      	b.n	80018e4 <HAL_I2C_Init+0xe8>
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	4a63      	ldr	r2, [pc, #396]	; (8001a68 <HAL_I2C_Init+0x26c>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	3301      	adds	r3, #1
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4956      	ldr	r1, [pc, #344]	; (8001a58 <HAL_I2C_Init+0x25c>)
 8001900:	428b      	cmp	r3, r1
 8001902:	d80d      	bhi.n	8001920 <HAL_I2C_Init+0x124>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1e59      	subs	r1, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001912:	3301      	adds	r3, #1
 8001914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001918:	2b04      	cmp	r3, #4
 800191a:	bf38      	it	cc
 800191c:	2304      	movcc	r3, #4
 800191e:	e04f      	b.n	80019c0 <HAL_I2C_Init+0x1c4>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d111      	bne.n	800194c <HAL_I2C_Init+0x150>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1e58      	subs	r0, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	440b      	add	r3, r1
 8001936:	fbb0 f3f3 	udiv	r3, r0, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	e012      	b.n	8001972 <HAL_I2C_Init+0x176>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1e58      	subs	r0, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	0099      	lsls	r1, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001962:	3301      	adds	r3, #1
 8001964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_I2C_Init+0x17e>
 8001976:	2301      	movs	r3, #1
 8001978:	e022      	b.n	80019c0 <HAL_I2C_Init+0x1c4>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10e      	bne.n	80019a0 <HAL_I2C_Init+0x1a4>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1e58      	subs	r0, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6859      	ldr	r1, [r3, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	440b      	add	r3, r1
 8001990:	fbb0 f3f3 	udiv	r3, r0, r3
 8001994:	3301      	adds	r3, #1
 8001996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199e:	e00f      	b.n	80019c0 <HAL_I2C_Init+0x1c4>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1e58      	subs	r0, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	0099      	lsls	r1, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	6809      	ldr	r1, [r1, #0]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6911      	ldr	r1, [r2, #16]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68d2      	ldr	r2, [r2, #12]
 80019fa:	4311      	orrs	r1, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	000186a0 	.word	0x000186a0
 8001a5c:	001e847f 	.word	0x001e847f
 8001a60:	003d08ff 	.word	0x003d08ff
 8001a64:	431bde83 	.word	0x431bde83
 8001a68:	10624dd3 	.word	0x10624dd3

08001a6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b08d      	sub	sp, #52	; 0x34
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fbfa 	bl	800527c <USB_GetMode>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 838e 	bne.w	80021ac <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 fb5e 	bl	8005156 <USB_ReadInterrupts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8384 	beq.w	80021aa <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fb55 	bl	8005156 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d107      	bne.n	8001ac6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f002 0202 	and.w	r2, r2, #2
 8001ac4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fb43 	bl	8005156 <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ada:	d17b      	bne.n	8001bd4 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 fb49 	bl	800517c <USB_ReadDevAllOutEpInterrupt>
 8001aea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001aec:	e06f      	b.n	8001bce <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d064      	beq.n	8001bc2 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 fb6e 	bl	80051e4 <USB_ReadDevOutEPInterrupt>
 8001b08:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00c      	beq.n	8001b2e <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	015a      	lsls	r2, r3, #5
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b20:	461a      	mov	r2, r3
 8001b22:	2301      	movs	r3, #1
 8001b24:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fdab 	bl	8002684 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00c      	beq.n	8001b52 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 feaa 	bl	8002894 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	015a      	lsls	r2, r3, #5
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	4413      	add	r3, r2
 8001b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2308      	movs	r3, #8
 8001b50:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	015a      	lsls	r2, r3, #5
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b68:	461a      	mov	r2, r3
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	f003 0320 	and.w	r3, r3, #32
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d015      	beq.n	8001ba4 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d108      	bne.n	8001b92 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	f003 fbb9 	bl	8005304 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2320      	movs	r3, #32
 8001ba2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	015a      	lsls	r2, r3, #5
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d18c      	bne.n	8001aee <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 fabc 	bl	8005156 <USB_ReadInterrupts>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001be8:	f040 80c4 	bne.w	8001d74 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 fadd 	bl	80051b0 <USB_ReadDevAllInEpInterrupt>
 8001bf6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001bfc:	e0b6      	b.n	8001d6c <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80ab 	beq.w	8001d60 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 fb03 	bl	8005220 <USB_ReadDevInEPInterrupt>
 8001c1a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d05b      	beq.n	8001cde <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69f9      	ldr	r1, [r7, #28]
 8001c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c46:	4013      	ands	r3, r2
 8001c48:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	015a      	lsls	r2, r3, #5
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c56:	461a      	mov	r2, r3
 8001c58:	2301      	movs	r3, #1
 8001c5a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d11b      	bne.n	8001c9c <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	3348      	adds	r3, #72	; 0x48
 8001c74:	6819      	ldr	r1, [r3, #0]
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4403      	add	r3, r0
 8001c84:	3344      	adds	r3, #68	; 0x44
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4419      	add	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4403      	add	r3, r0
 8001c98:	3348      	adds	r3, #72	; 0x48
 8001c9a:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f008 fafd 	bl	800a2a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d116      	bne.n	8001cde <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d113      	bne.n	8001cde <HAL_PCD_IRQHandler+0x272>
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3350      	adds	r3, #80	; 0x50
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d108      	bne.n	8001cde <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2101      	movs	r1, #1
 8001cda:	f003 fb13 	bl	8005304 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	015a      	lsls	r2, r3, #5
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d10:	461a      	mov	r2, r3
 8001d12:	2310      	movs	r3, #16
 8001d14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2340      	movs	r3, #64	; 0x40
 8001d30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fc05 	bl	800256a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	3301      	adds	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f47f af45 	bne.w	8001bfe <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 f9ec 	bl	8005156 <USB_ReadInterrupts>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d88:	d122      	bne.n	8001dd0 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d108      	bne.n	8001dba <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001db0:	2100      	movs	r1, #0
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fdce 	bl	8002954 <HAL_PCDEx_LPM_Callback>
 8001db8:	e002      	b.n	8001dc0 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f008 fade 	bl	800a37c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 f9be 	bl	8005156 <USB_ReadInterrupts>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001de4:	d112      	bne.n	8001e0c <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f008 fa9a 	bl	800a330 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e0a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 f9a0 	bl	8005156 <USB_ReadInterrupts>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e20:	f040 80a7 	bne.w	8001f72 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2110      	movs	r1, #16
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 fbc8 	bl	80045d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e48:	e036      	b.n	8001eb8 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e56:	461a      	mov	r2, r3
 8001e58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6e:	0151      	lsls	r1, r2, #5
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	440a      	add	r2, r1
 8001e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea2:	0151      	lsls	r1, r2, #5
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	440a      	add	r2, r1
 8001ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001eac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eb0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d3c3      	bcc.n	8001e4a <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ed0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ed4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d016      	beq.n	8001f0c <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eee:	f043 030b 	orr.w	r3, r3, #11
 8001ef2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f04:	f043 030b 	orr.w	r3, r3, #11
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	e015      	b.n	8001f38 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f1e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f22:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f32:	f043 030b 	orr.w	r3, r3, #11
 8001f36:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f4a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f003 f9d1 	bl	8005304 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 f8ed 	bl	8005156 <USB_ReadInterrupts>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f86:	d124      	bne.n	8001fd2 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f003 f983 	bl	8005298 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 fb42 	bl	8004620 <USB_GetDevSpeed>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681c      	ldr	r4, [r3, #0]
 8001fa8:	f001 f90e 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 8001fac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f002 fa6a 	bl	8004490 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f008 f998 	bl	800a2f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 f8bd 	bl	8005156 <USB_ReadInterrupts>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d161      	bne.n	80020aa <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699a      	ldr	r2, [r3, #24]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0210 	bic.w	r2, r2, #16
 8001ff4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f003 020f 	and.w	r2, r3, #15
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	3304      	adds	r3, #4
 8002014:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	0c5b      	lsrs	r3, r3, #17
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	2b02      	cmp	r3, #2
 8002020:	d124      	bne.n	800206c <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d035      	beq.n	800209a <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002038:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800203c:	b29b      	uxth	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	6a38      	ldr	r0, [r7, #32]
 8002042:	f002 ff65 	bl	8004f10 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002052:	441a      	add	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002064:	441a      	add	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	619a      	str	r2, [r3, #24]
 800206a:	e016      	b.n	800209a <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	0c5b      	lsrs	r3, r3, #17
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	2b06      	cmp	r3, #6
 8002076:	d110      	bne.n	800209a <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800207e:	2208      	movs	r2, #8
 8002080:	4619      	mov	r1, r3
 8002082:	6a38      	ldr	r0, [r7, #32]
 8002084:	f002 ff44 	bl	8004f10 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	091b      	lsrs	r3, r3, #4
 8002090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002094:	441a      	add	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699a      	ldr	r2, [r3, #24]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0210 	orr.w	r2, r2, #16
 80020a8:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 f851 	bl	8005156 <USB_ReadInterrupts>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d10a      	bne.n	80020d4 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f008 f909 	bl	800a2d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f002 0208 	and.w	r2, r2, #8
 80020d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 f83c 	bl	8005156 <USB_ReadInterrupts>
 80020de:	4603      	mov	r3, r0
 80020e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020e8:	d10f      	bne.n	800210a <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	4619      	mov	r1, r3
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f008 f961 	bl	800a3bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 f821 	bl	8005156 <USB_ReadInterrupts>
 8002114:	4603      	mov	r3, r0
 8002116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800211e:	d10f      	bne.n	8002140 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	b2db      	uxtb	r3, r3
 8002128:	4619      	mov	r1, r3
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f008 f934 	bl	800a398 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800213e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f003 f806 	bl	8005156 <USB_ReadInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002154:	d10a      	bne.n	800216c <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f008 f942 	bl	800a3e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800216a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f002 fff0 	bl	8005156 <USB_ReadInterrupts>
 8002176:	4603      	mov	r3, r0
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b04      	cmp	r3, #4
 800217e:	d115      	bne.n	80021ac <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f008 f932 	bl	800a3fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6859      	ldr	r1, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	e000      	b.n	80021ac <HAL_PCD_IRQHandler+0x740>
      return;
 80021aa:	bf00      	nop
    }
  }
}
 80021ac:	3734      	adds	r7, #52	; 0x34
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}

080021b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_PCD_SetAddress+0x1a>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e013      	b.n	80021f4 <HAL_PCD_SetAddress+0x42>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 ff90 	bl	800510a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	4608      	mov	r0, r1
 8002206:	4611      	mov	r1, r2
 8002208:	461a      	mov	r2, r3
 800220a:	4603      	mov	r3, r0
 800220c:	70fb      	strb	r3, [r7, #3]
 800220e:	460b      	mov	r3, r1
 8002210:	803b      	strh	r3, [r7, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800221a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800221e:	2b00      	cmp	r3, #0
 8002220:	da0f      	bge.n	8002242 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	f003 020f 	and.w	r2, r3, #15
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	3338      	adds	r3, #56	; 0x38
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	3304      	adds	r3, #4
 8002238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	705a      	strb	r2, [r3, #1]
 8002240:	e00f      	b.n	8002262 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	f003 020f 	and.w	r2, r3, #15
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	3304      	adds	r3, #4
 800225a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	b2da      	uxtb	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800226e:	883a      	ldrh	r2, [r7, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	78ba      	ldrb	r2, [r7, #2]
 8002278:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	785b      	ldrb	r3, [r3, #1]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800228c:	78bb      	ldrb	r3, [r7, #2]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d102      	bne.n	8002298 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_PCD_EP_Open+0xaa>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e00e      	b.n	80022c4 <HAL_PCD_EP_Open+0xc8>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68f9      	ldr	r1, [r7, #12]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 f9d8 	bl	800466a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80022c2:	7afb      	ldrb	r3, [r7, #11]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	460b      	mov	r3, r1
 80022da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022dc:	7afb      	ldrb	r3, [r7, #11]
 80022de:	f003 020f 	and.w	r2, r3, #15
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4413      	add	r3, r2
 80022f2:	3304      	adds	r3, #4
 80022f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2200      	movs	r2, #0
 800230c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800230e:	7afb      	ldrb	r3, [r7, #11]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	b2da      	uxtb	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002328:	7afb      	ldrb	r3, [r7, #11]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	6979      	ldr	r1, [r7, #20]
 8002340:	f002 fc5e 	bl	8004c00 <USB_EP0StartXfer>
 8002344:	e008      	b.n	8002358 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	6979      	ldr	r1, [r7, #20]
 8002354:	f002 fa10 	bl	8004778 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	460b      	mov	r3, r1
 8002370:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002372:	7afb      	ldrb	r3, [r7, #11]
 8002374:	f003 020f 	and.w	r2, r3, #15
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	3338      	adds	r3, #56	; 0x38
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4413      	add	r3, r2
 8002386:	3304      	adds	r3, #4
 8002388:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2201      	movs	r2, #1
 80023a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023a2:	7afb      	ldrb	r3, [r7, #11]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d102      	bne.n	80023bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023bc:	7afb      	ldrb	r3, [r7, #11]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6979      	ldr	r1, [r7, #20]
 80023d4:	f002 fc14 	bl	8004c00 <USB_EP0StartXfer>
 80023d8:	e008      	b.n	80023ec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	6979      	ldr	r1, [r7, #20]
 80023e8:	f002 f9c6 	bl	8004778 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	f003 020f 	and.w	r2, r3, #15
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	d901      	bls.n	8002414 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e050      	b.n	80024b6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002418:	2b00      	cmp	r3, #0
 800241a:	da0f      	bge.n	800243c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	f003 020f 	and.w	r2, r3, #15
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	3338      	adds	r3, #56	; 0x38
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	705a      	strb	r2, [r3, #1]
 800243a:	e00d      	b.n	8002458 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	3304      	adds	r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_PCD_EP_SetStall+0x82>
 8002474:	2302      	movs	r3, #2
 8002476:	e01e      	b.n	80024b6 <HAL_PCD_EP_SetStall+0xc0>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	4618      	mov	r0, r3
 8002488:	f002 fd6b 	bl	8004f62 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	b2d9      	uxtb	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024a6:	461a      	mov	r2, r3
 80024a8:	f002 ff2c 	bl	8005304 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d901      	bls.n	80024dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e042      	b.n	8002562 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	da0f      	bge.n	8002504 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	f003 020f 	and.w	r2, r3, #15
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	3338      	adds	r3, #56	; 0x38
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	3304      	adds	r3, #4
 80024fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	705a      	strb	r2, [r3, #1]
 8002502:	e00f      	b.n	8002524 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	f003 020f 	and.w	r2, r3, #15
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	3304      	adds	r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_PCD_EP_ClrStall+0x86>
 8002540:	2302      	movs	r3, #2
 8002542:	e00e      	b.n	8002562 <HAL_PCD_EP_ClrStall+0xa4>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	4618      	mov	r0, r3
 8002554:	f002 fd73 	bl	800503e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b08a      	sub	sp, #40	; 0x28
 800256e:	af02      	add	r7, sp, #8
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	3338      	adds	r3, #56	; 0x38
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	3304      	adds	r3, #4
 8002590:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	429a      	cmp	r2, r3
 800259c:	d901      	bls.n	80025a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e06c      	b.n	800267c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d902      	bls.n	80025be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3303      	adds	r3, #3
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025c6:	e02b      	b.n	8002620 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d902      	bls.n	80025e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	3303      	adds	r3, #3
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	68d9      	ldr	r1, [r3, #12]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	4603      	mov	r3, r0
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f002 fc4f 	bl	8004ea6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	441a      	add	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	441a      	add	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	b29b      	uxth	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	429a      	cmp	r2, r3
 8002634:	d809      	bhi.n	800264a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800263e:	429a      	cmp	r2, r3
 8002640:	d203      	bcs.n	800264a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1be      	bne.n	80025c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	429a      	cmp	r2, r3
 8002654:	d811      	bhi.n	800267a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	2201      	movs	r2, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	43db      	mvns	r3, r3
 8002670:	6939      	ldr	r1, [r7, #16]
 8002672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002676:	4013      	ands	r3, r2
 8002678:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3720      	adds	r7, #32
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	333c      	adds	r3, #60	; 0x3c
 800269c:	3304      	adds	r3, #4
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	f040 80b3 	bne.w	8002822 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d028      	beq.n	8002718 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4a70      	ldr	r2, [pc, #448]	; (800288c <PCD_EP_OutXfrComplete_int+0x208>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d90e      	bls.n	80026ec <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e4:	461a      	mov	r2, r3
 80026e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ea:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f007 fdab 	bl	800a248 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026fc:	461a      	mov	r2, r3
 80026fe:	2101      	movs	r1, #1
 8002700:	f002 fe00 	bl	8005304 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002710:	461a      	mov	r2, r3
 8002712:	2308      	movs	r3, #8
 8002714:	6093      	str	r3, [r2, #8]
 8002716:	e0b3      	b.n	8002880 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272e:	461a      	mov	r2, r3
 8002730:	2320      	movs	r3, #32
 8002732:	6093      	str	r3, [r2, #8]
 8002734:	e0a4      	b.n	8002880 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 809f 	bne.w	8002880 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4a51      	ldr	r2, [pc, #324]	; (800288c <PCD_EP_OutXfrComplete_int+0x208>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d90f      	bls.n	800276a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002760:	461a      	mov	r2, r3
 8002762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002766:	6093      	str	r3, [r2, #8]
 8002768:	e08a      	b.n	8002880 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800277c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	0159      	lsls	r1, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	440b      	add	r3, r1
 8002786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002790:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4403      	add	r3, r0
 80027a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027a4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027b8:	6819      	ldr	r1, [r3, #0]
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4403      	add	r3, r0
 80027c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4419      	add	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4403      	add	r3, r0
 80027de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027e2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	4619      	mov	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f007 fd3e 	bl	800a26c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d144      	bne.n	8002880 <PCD_EP_OutXfrComplete_int+0x1fc>
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d138      	bne.n	8002880 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002818:	461a      	mov	r2, r3
 800281a:	2101      	movs	r1, #1
 800281c:	f002 fd72 	bl	8005304 <USB_EP0_OutStart>
 8002820:	e02e      	b.n	8002880 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <PCD_EP_OutXfrComplete_int+0x20c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d124      	bne.n	8002874 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002840:	461a      	mov	r2, r3
 8002842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002846:	6093      	str	r3, [r2, #8]
 8002848:	e01a      	b.n	8002880 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002860:	461a      	mov	r2, r3
 8002862:	2320      	movs	r3, #32
 8002864:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4619      	mov	r1, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f007 fcfd 	bl	800a26c <HAL_PCD_DataOutStageCallback>
 8002872:	e005      	b.n	8002880 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	4619      	mov	r1, r3
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f007 fcf6 	bl	800a26c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	4f54300a 	.word	0x4f54300a
 8002890:	4f54310a 	.word	0x4f54310a

08002894 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	333c      	adds	r3, #60	; 0x3c
 80028ac:	3304      	adds	r3, #4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d113      	bne.n	80028f2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a1f      	ldr	r2, [pc, #124]	; (800294c <PCD_EP_OutSetupPacket_int+0xb8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d922      	bls.n	8002918 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01d      	beq.n	8002918 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e8:	461a      	mov	r2, r3
 80028ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ee:	6093      	str	r3, [r2, #8]
 80028f0:	e012      	b.n	8002918 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4a16      	ldr	r2, [pc, #88]	; (8002950 <PCD_EP_OutSetupPacket_int+0xbc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10e      	bne.n	8002918 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002910:	461a      	mov	r2, r3
 8002912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002916:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f007 fc95 	bl	800a248 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4a0a      	ldr	r2, [pc, #40]	; (800294c <PCD_EP_OutSetupPacket_int+0xb8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d90c      	bls.n	8002940 <PCD_EP_OutSetupPacket_int+0xac>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d108      	bne.n	8002940 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002938:	461a      	mov	r2, r3
 800293a:	2101      	movs	r1, #1
 800293c:	f002 fce2 	bl	8005304 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	4f54300a 	.word	0x4f54300a
 8002950:	4f54310a 	.word	0x4f54310a

08002954 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e25b      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d075      	beq.n	8002a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800298a:	4ba3      	ldr	r3, [pc, #652]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b04      	cmp	r3, #4
 8002994:	d00c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002996:	4ba0      	ldr	r3, [pc, #640]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d112      	bne.n	80029c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a2:	4b9d      	ldr	r3, [pc, #628]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ae:	d10b      	bne.n	80029c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	4b99      	ldr	r3, [pc, #612]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d05b      	beq.n	8002a74 <HAL_RCC_OscConfig+0x108>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d157      	bne.n	8002a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e236      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d106      	bne.n	80029e0 <HAL_RCC_OscConfig+0x74>
 80029d2:	4b91      	ldr	r3, [pc, #580]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a90      	ldr	r2, [pc, #576]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e01d      	b.n	8002a1c <HAL_RCC_OscConfig+0xb0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x98>
 80029ea:	4b8b      	ldr	r3, [pc, #556]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a8a      	ldr	r2, [pc, #552]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b88      	ldr	r3, [pc, #544]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a87      	ldr	r2, [pc, #540]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e00b      	b.n	8002a1c <HAL_RCC_OscConfig+0xb0>
 8002a04:	4b84      	ldr	r3, [pc, #528]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a83      	ldr	r2, [pc, #524]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b81      	ldr	r3, [pc, #516]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a80      	ldr	r2, [pc, #512]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fe fbb0 	bl	8001188 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7fe fbac 	bl	8001188 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e1fb      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0xc0>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fb9c 	bl	8001188 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe fb98 	bl	8001188 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1e7      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0xe8>
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d063      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a82:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8e:	4b62      	ldr	r3, [pc, #392]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d11c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9a:	4b5f      	ldr	r3, [pc, #380]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d116      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	4b5c      	ldr	r3, [pc, #368]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_RCC_OscConfig+0x152>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e1bb      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4952      	ldr	r1, [pc, #328]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad2:	e03a      	b.n	8002b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	4b4f      	ldr	r3, [pc, #316]	; (8002c1c <HAL_RCC_OscConfig+0x2b0>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fb51 	bl	8001188 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aea:	f7fe fb4d 	bl	8001188 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e19c      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	4b46      	ldr	r3, [pc, #280]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4940      	ldr	r1, [pc, #256]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <HAL_RCC_OscConfig+0x2b0>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fb30 	bl	8001188 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7fe fb2c 	bl	8001188 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e17b      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d030      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5e:	4b30      	ldr	r3, [pc, #192]	; (8002c20 <HAL_RCC_OscConfig+0x2b4>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe fb10 	bl	8001188 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fb0c 	bl	8001188 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e15b      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x200>
 8002b8a:	e015      	b.n	8002bb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8c:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCC_OscConfig+0x2b4>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7fe faf9 	bl	8001188 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9a:	f7fe faf5 	bl	8001188 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e144      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a0 	beq.w	8002d06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10f      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_OscConfig+0x2b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d121      	bne.n	8002c46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_RCC_OscConfig+0x2b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <HAL_RCC_OscConfig+0x2b8>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0e:	f7fe fabb 	bl	8001188 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	e011      	b.n	8002c3a <HAL_RCC_OscConfig+0x2ce>
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	42470000 	.word	0x42470000
 8002c20:	42470e80 	.word	0x42470e80
 8002c24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c28:	f7fe faae 	bl	8001188 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0fd      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	4b81      	ldr	r3, [pc, #516]	; (8002e40 <HAL_RCC_OscConfig+0x4d4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2f0>
 8002c4e:	4b7d      	ldr	r3, [pc, #500]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c52:	4a7c      	ldr	r2, [pc, #496]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5a:	e01c      	b.n	8002c96 <HAL_RCC_OscConfig+0x32a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCC_OscConfig+0x312>
 8002c64:	4b77      	ldr	r3, [pc, #476]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a76      	ldr	r2, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002c6a:	f043 0304 	orr.w	r3, r3, #4
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c70:	4b74      	ldr	r3, [pc, #464]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a73      	ldr	r2, [pc, #460]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7c:	e00b      	b.n	8002c96 <HAL_RCC_OscConfig+0x32a>
 8002c7e:	4b71      	ldr	r3, [pc, #452]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a70      	ldr	r2, [pc, #448]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8a:	4b6e      	ldr	r3, [pc, #440]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a6d      	ldr	r2, [pc, #436]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d015      	beq.n	8002cca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fa73 	bl	8001188 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7fe fa6f 	bl	8001188 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0bc      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ee      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x33a>
 8002cc8:	e014      	b.n	8002cf4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cca:	f7fe fa5d 	bl	8001188 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fe fa59 	bl	8001188 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e0a6      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce8:	4b56      	ldr	r3, [pc, #344]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4a51      	ldr	r2, [pc, #324]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8092 	beq.w	8002e34 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d10:	4b4c      	ldr	r3, [pc, #304]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d05c      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d141      	bne.n	8002da8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d24:	4b48      	ldr	r3, [pc, #288]	; (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fa2d 	bl	8001188 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fe fa29 	bl	8001188 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e078      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d44:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	019b      	lsls	r3, r3, #6
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	061b      	lsls	r3, r3, #24
 8002d74:	4933      	ldr	r1, [pc, #204]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7a:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe fa02 	bl	8001188 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe f9fe 	bl	8001188 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e04d      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x41c>
 8002da6:	e045      	b.n	8002e34 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fe f9eb 	bl	8001188 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fe f9e7 	bl	8001188 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e036      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x44a>
 8002dd4:	e02e      	b.n	8002e34 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e029      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_RCC_OscConfig+0x4d8>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d11c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d115      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d10d      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d106      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40007000 	.word	0x40007000
 8002e44:	40023800 	.word	0x40023800
 8002e48:	42470060 	.word	0x42470060

08002e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0cc      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e60:	4b68      	ldr	r3, [pc, #416]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d90c      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b65      	ldr	r3, [pc, #404]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b63      	ldr	r3, [pc, #396]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0b8      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea0:	4b59      	ldr	r3, [pc, #356]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a58      	ldr	r2, [pc, #352]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb8:	4b53      	ldr	r3, [pc, #332]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a52      	ldr	r2, [pc, #328]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec4:	4b50      	ldr	r3, [pc, #320]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	494d      	ldr	r1, [pc, #308]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d044      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4b47      	ldr	r3, [pc, #284]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d119      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e07f      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0a:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e06f      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e067      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2a:	4b37      	ldr	r3, [pc, #220]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f023 0203 	bic.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4934      	ldr	r1, [pc, #208]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f3c:	f7fe f924 	bl	8001188 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f44:	f7fe f920 	bl	8001188 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e04f      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 020c 	and.w	r2, r3, #12
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1eb      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d20c      	bcs.n	8002f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b22      	ldr	r3, [pc, #136]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e032      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4916      	ldr	r1, [pc, #88]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fbe:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	490e      	ldr	r1, [pc, #56]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fd2:	f000 f821 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8002fd6:	4601      	mov	r1, r0
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	5cd3      	ldrb	r3, [r2, r3]
 8002fe6:	fa21 f303 	lsr.w	r3, r1, r3
 8002fea:	4a09      	ldr	r2, [pc, #36]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe f884 	bl	8001100 <HAL_InitTick>

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40023c00 	.word	0x40023c00
 8003008:	40023800 	.word	0x40023800
 800300c:	0800a6e4 	.word	0x0800a6e4
 8003010:	20000000 	.word	0x20000000
 8003014:	20000004 	.word	0x20000004

08003018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	607b      	str	r3, [r7, #4]
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	2300      	movs	r3, #0
 8003028:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302e:	4b63      	ldr	r3, [pc, #396]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b04      	cmp	r3, #4
 8003038:	d007      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0x32>
 800303a:	2b08      	cmp	r3, #8
 800303c:	d008      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x38>
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 80b4 	bne.w	80031ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003044:	4b5e      	ldr	r3, [pc, #376]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003046:	60bb      	str	r3, [r7, #8]
       break;
 8003048:	e0b3      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800304a:	4b5e      	ldr	r3, [pc, #376]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800304c:	60bb      	str	r3, [r7, #8]
      break;
 800304e:	e0b0      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003050:	4b5a      	ldr	r3, [pc, #360]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003058:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800305a:	4b58      	ldr	r3, [pc, #352]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d04a      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003066:	4b55      	ldr	r3, [pc, #340]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	f04f 0400 	mov.w	r4, #0
 8003070:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	ea03 0501 	and.w	r5, r3, r1
 800307c:	ea04 0602 	and.w	r6, r4, r2
 8003080:	4629      	mov	r1, r5
 8003082:	4632      	mov	r2, r6
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	f04f 0400 	mov.w	r4, #0
 800308c:	0154      	lsls	r4, r2, #5
 800308e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003092:	014b      	lsls	r3, r1, #5
 8003094:	4619      	mov	r1, r3
 8003096:	4622      	mov	r2, r4
 8003098:	1b49      	subs	r1, r1, r5
 800309a:	eb62 0206 	sbc.w	r2, r2, r6
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	f04f 0400 	mov.w	r4, #0
 80030a6:	0194      	lsls	r4, r2, #6
 80030a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030ac:	018b      	lsls	r3, r1, #6
 80030ae:	1a5b      	subs	r3, r3, r1
 80030b0:	eb64 0402 	sbc.w	r4, r4, r2
 80030b4:	f04f 0100 	mov.w	r1, #0
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	00e2      	lsls	r2, r4, #3
 80030be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030c2:	00d9      	lsls	r1, r3, #3
 80030c4:	460b      	mov	r3, r1
 80030c6:	4614      	mov	r4, r2
 80030c8:	195b      	adds	r3, r3, r5
 80030ca:	eb44 0406 	adc.w	r4, r4, r6
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	0262      	lsls	r2, r4, #9
 80030d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030dc:	0259      	lsls	r1, r3, #9
 80030de:	460b      	mov	r3, r1
 80030e0:	4614      	mov	r4, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	4621      	mov	r1, r4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f04f 0400 	mov.w	r4, #0
 80030ec:	461a      	mov	r2, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	f7fd f872 	bl	80001d8 <__aeabi_uldivmod>
 80030f4:	4603      	mov	r3, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	e049      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030fc:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	099b      	lsrs	r3, r3, #6
 8003102:	f04f 0400 	mov.w	r4, #0
 8003106:	f240 11ff 	movw	r1, #511	; 0x1ff
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	ea03 0501 	and.w	r5, r3, r1
 8003112:	ea04 0602 	and.w	r6, r4, r2
 8003116:	4629      	mov	r1, r5
 8003118:	4632      	mov	r2, r6
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	f04f 0400 	mov.w	r4, #0
 8003122:	0154      	lsls	r4, r2, #5
 8003124:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003128:	014b      	lsls	r3, r1, #5
 800312a:	4619      	mov	r1, r3
 800312c:	4622      	mov	r2, r4
 800312e:	1b49      	subs	r1, r1, r5
 8003130:	eb62 0206 	sbc.w	r2, r2, r6
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	f04f 0400 	mov.w	r4, #0
 800313c:	0194      	lsls	r4, r2, #6
 800313e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003142:	018b      	lsls	r3, r1, #6
 8003144:	1a5b      	subs	r3, r3, r1
 8003146:	eb64 0402 	sbc.w	r4, r4, r2
 800314a:	f04f 0100 	mov.w	r1, #0
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	00e2      	lsls	r2, r4, #3
 8003154:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003158:	00d9      	lsls	r1, r3, #3
 800315a:	460b      	mov	r3, r1
 800315c:	4614      	mov	r4, r2
 800315e:	195b      	adds	r3, r3, r5
 8003160:	eb44 0406 	adc.w	r4, r4, r6
 8003164:	f04f 0100 	mov.w	r1, #0
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	02a2      	lsls	r2, r4, #10
 800316e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003172:	0299      	lsls	r1, r3, #10
 8003174:	460b      	mov	r3, r1
 8003176:	4614      	mov	r4, r2
 8003178:	4618      	mov	r0, r3
 800317a:	4621      	mov	r1, r4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f04f 0400 	mov.w	r4, #0
 8003182:	461a      	mov	r2, r3
 8003184:	4623      	mov	r3, r4
 8003186:	f7fd f827 	bl	80001d8 <__aeabi_uldivmod>
 800318a:	4603      	mov	r3, r0
 800318c:	460c      	mov	r4, r1
 800318e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	3301      	adds	r3, #1
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	60bb      	str	r3, [r7, #8]
      break;
 80031aa:	e002      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031ae:	60bb      	str	r3, [r7, #8]
      break;
 80031b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b2:	68bb      	ldr	r3, [r7, #8]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031bc:	40023800 	.word	0x40023800
 80031c0:	00f42400 	.word	0x00f42400
 80031c4:	007a1200 	.word	0x007a1200

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000000 	.word	0x20000000

080031e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031e4:	f7ff fff0 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031e8:	4601      	mov	r1, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0a9b      	lsrs	r3, r3, #10
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4a03      	ldr	r2, [pc, #12]	; (8003204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f6:	5cd3      	ldrb	r3, [r2, r3]
 80031f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40023800 	.word	0x40023800
 8003204:	0800a6f4 	.word	0x0800a6f4

08003208 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d105      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800322c:	2b00      	cmp	r3, #0
 800322e:	d038      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003236:	f7fd ffa7 	bl	8001188 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800323e:	f7fd ffa3 	bl	8001188 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0bd      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003250:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f0      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	019b      	lsls	r3, r3, #6
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	071b      	lsls	r3, r3, #28
 800326e:	495a      	ldr	r1, [pc, #360]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003276:	4b57      	ldr	r3, [pc, #348]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800327c:	f7fd ff84 	bl	8001188 <HAL_GetTick>
 8003280:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003284:	f7fd ff80 	bl	8001188 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e09a      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003296:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8083 	beq.w	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	4b48      	ldr	r3, [pc, #288]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	4a47      	ldr	r2, [pc, #284]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032be:	6413      	str	r3, [r2, #64]	; 0x40
 80032c0:	4b45      	ldr	r3, [pc, #276]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032cc:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a42      	ldr	r2, [pc, #264]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032d8:	f7fd ff56 	bl	8001188 <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032e0:	f7fd ff52 	bl	8001188 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e06c      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032f2:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003306:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02f      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	429a      	cmp	r2, r3
 800331a:	d028      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800331c:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003326:	4b2e      	ldr	r3, [pc, #184]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800332c:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003332:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003338:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d114      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003344:	f7fd ff20 	bl	8001188 <HAL_GetTick>
 8003348:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	e00a      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fd ff1c 	bl	8001188 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e034      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0ee      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800337a:	d10d      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800337c:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800338c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003390:	4911      	ldr	r1, [pc, #68]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
 8003396:	e005      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033a2:	6093      	str	r3, [r2, #8]
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	4909      	ldr	r1, [pc, #36]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	7d1a      	ldrb	r2, [r3, #20]
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80033c8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	42470068 	.word	0x42470068
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40007000 	.word	0x40007000
 80033e0:	42470e40 	.word	0x42470e40
 80033e4:	424711e0 	.word	0x424711e0

080033e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_SD_IRQHandler+0x2e>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fa30 	bl	8003874 <SD_Read_IT>
 8003414:	e165      	b.n	80036e2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 808f 	beq.w	8003544 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800342e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800343e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003442:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0201 	bic.w	r2, r2, #1
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d039      	beq.n	80034d2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <HAL_SD_IRQHandler+0x8a>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d011      	beq.n	8003496 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 feda 	bl	8004230 <SDMMC_CmdStopTransfer>
 800347c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f92f 	bl	80036f4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f240 523a 	movw	r2, #1338	; 0x53a
 800349e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d104      	bne.n	80034c2 <HAL_SD_IRQHandler+0xda>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f001 ff90 	bl	80053e8 <HAL_SD_RxCpltCallback>
 80034c8:	e10b      	b.n	80036e2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f001 ff82 	bl	80053d4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80034d0:	e107      	b.n	80036e2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8102 	beq.w	80036e2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d011      	beq.n	800350c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fe9f 	bl	8004230 <SDMMC_CmdStopTransfer>
 80034f2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8f4 	bl	80036f4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 80e5 	bne.w	80036e2 <HAL_SD_IRQHandler+0x2fa>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 80df 	bne.w	80036e2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0208 	bic.w	r2, r2, #8
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f001 ff49 	bl	80053d4 <HAL_SD_TxCpltCallback>
}
 8003542:	e0ce      	b.n	80036e2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_SD_IRQHandler+0x17c>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f9da 	bl	8003916 <SD_Write_IT>
 8003562:	e0be      	b.n	80036e2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356a:	f240 233a 	movw	r3, #570	; 0x23a
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80b6 	beq.w	80036e2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	f043 0202 	orr.w	r2, r3, #2
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	f043 0208 	orr.w	r2, r3, #8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	f043 0210 	orr.w	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	f043 0208 	orr.w	r2, r3, #8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f240 723a 	movw	r2, #1850	; 0x73a
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003610:	f023 0302 	bic.w	r3, r3, #2
 8003614:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fe08 	bl	8004230 <SDMMC_CmdStopTransfer>
 8003620:	4602      	mov	r2, r0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f855 	bl	80036f4 <HAL_SD_ErrorCallback>
}
 800364a:	e04a      	b.n	80036e2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003652:	2b00      	cmp	r3, #0
 8003654:	d045      	beq.n	80036e2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <HAL_SD_IRQHandler+0x282>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d011      	beq.n	800368e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366e:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <HAL_SD_IRQHandler+0x304>)
 8003670:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd fec5 	bl	8001406 <HAL_DMA_Abort_IT>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d02f      	beq.n	80036e2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f85e 	bl	8003748 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800368c:	e029      	b.n	80036e2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d104      	bne.n	80036a2 <HAL_SD_IRQHandler+0x2ba>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d011      	beq.n	80036c6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <HAL_SD_IRQHandler+0x308>)
 80036a8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fea9 	bl	8001406 <HAL_DMA_Abort_IT>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d013      	beq.n	80036e2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f879 	bl	80037b6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80036c4:	e00d      	b.n	80036e2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f001 fe70 	bl	80053c0 <HAL_SD_AbortCallback>
}
 80036e0:	e7ff      	b.n	80036e2 <HAL_SD_IRQHandler+0x2fa>
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	08003749 	.word	0x08003749
 80036f0:	080037b7 	.word	0x080037b7

080036f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003714:	f107 030c 	add.w	r3, r7, #12
 8003718:	4619      	mov	r1, r3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f882 	bl	8003824 <SD_SendStatus>
 8003720:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	0a5b      	lsrs	r3, r3, #9
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800373e:	693b      	ldr	r3, [r7, #16]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f240 523a 	movw	r2, #1338	; 0x53a
 800375e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff ffd1 	bl	8003708 <HAL_SD_GetCardState>
 8003766:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b06      	cmp	r3, #6
 800377a:	d002      	beq.n	8003782 <SD_DMATxAbort+0x3a>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b05      	cmp	r3, #5
 8003780:	d10a      	bne.n	8003798 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fd52 	bl	8004230 <SDMMC_CmdStopTransfer>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	431a      	orrs	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f001 fe0d 	bl	80053c0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80037a6:	e002      	b.n	80037ae <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff ffa3 	bl	80036f4 <HAL_SD_ErrorCallback>
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f240 523a 	movw	r2, #1338	; 0x53a
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7ff ff9a 	bl	8003708 <HAL_SD_GetCardState>
 80037d4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b06      	cmp	r3, #6
 80037e8:	d002      	beq.n	80037f0 <SD_DMARxAbort+0x3a>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d10a      	bne.n	8003806 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fd1b 	bl	8004230 <SDMMC_CmdStopTransfer>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	431a      	orrs	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f001 fdd6 	bl	80053c0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003814:	e002      	b.n	800381c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff ff6c 	bl	80036f4 <HAL_SD_ErrorCallback>
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003834:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003838:	e018      	b.n	800386c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f000 fd14 	bl	8004274 <SDMMC_CmdSendStatus>
 800384c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	e009      	b.n	800386c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fcd3 	bl	800420a <SDIO_GetResponse>
 8003864:	4602      	mov	r2, r0
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d03f      	beq.n	800390e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	e033      	b.n	80038fc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fc61 	bl	8004160 <SDIO_ReadFIFO>
 800389e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3301      	adds	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3301      	adds	r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3301      	adds	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	3b01      	subs	r3, #1
 80038de:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	0e1b      	lsrs	r3, r3, #24
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3301      	adds	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	3301      	adds	r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b07      	cmp	r3, #7
 8003900:	d9c8      	bls.n	8003894 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800390e:	bf00      	nop
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b086      	sub	sp, #24
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d043      	beq.n	80039b8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	e037      	b.n	80039a6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3301      	adds	r3, #1
 8003940:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	3b01      	subs	r3, #1
 8003946:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	021a      	lsls	r2, r3, #8
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4313      	orrs	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3301      	adds	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	3b01      	subs	r3, #1
 800395e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	041a      	lsls	r2, r3, #16
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4313      	orrs	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3301      	adds	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	3b01      	subs	r3, #1
 8003976:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	061a      	lsls	r2, r3, #24
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4313      	orrs	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3301      	adds	r3, #1
 8003988:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	3b01      	subs	r3, #1
 800398e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f107 0208 	add.w	r2, r7, #8
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fbed 	bl	800417a <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	3301      	adds	r3, #1
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b07      	cmp	r3, #7
 80039aa:	d9c4      	bls.n	8003936 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80039b8:	bf00      	nop
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e056      	b.n	8003a80 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7fd fa29 	bl	8000e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2202      	movs	r2, #2
 80039f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a08:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	ea42 0103 	orr.w	r1, r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	0c1b      	lsrs	r3, r3, #16
 8003a50:	f003 0104 	and.w	r1, r3, #4
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08c      	sub	sp, #48	; 0x30
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a96:	2301      	movs	r3, #1
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_SPI_TransmitReceive+0x26>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e18a      	b.n	8003dc4 <HAL_SPI_TransmitReceive+0x33c>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ab6:	f7fd fb67 	bl	8001188 <HAL_GetTick>
 8003aba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003acc:	887b      	ldrh	r3, [r7, #2]
 8003ace:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ad0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d00f      	beq.n	8003af8 <HAL_SPI_TransmitReceive+0x70>
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ade:	d107      	bne.n	8003af0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <HAL_SPI_TransmitReceive+0x68>
 8003ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d003      	beq.n	8003af8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
 8003af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003af6:	e15b      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_SPI_TransmitReceive+0x82>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_TransmitReceive+0x82>
 8003b04:	887b      	ldrh	r3, [r7, #2]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b10:	e14e      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d003      	beq.n	8003b26 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2205      	movs	r2, #5
 8003b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	887a      	ldrh	r2, [r7, #2]
 8003b36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	887a      	ldrh	r2, [r7, #2]
 8003b3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	887a      	ldrh	r2, [r7, #2]
 8003b4e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b66:	2b40      	cmp	r3, #64	; 0x40
 8003b68:	d007      	beq.n	8003b7a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b82:	d178      	bne.n	8003c76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_SPI_TransmitReceive+0x10a>
 8003b8c:	8b7b      	ldrh	r3, [r7, #26]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d166      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	881a      	ldrh	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	1c9a      	adds	r2, r3, #2
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb6:	e053      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d11b      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x176>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d016      	beq.n	8003bfe <HAL_SPI_TransmitReceive+0x176>
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d113      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	881a      	ldrh	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	1c9a      	adds	r2, r3, #2
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d119      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x1b8>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d014      	beq.n	8003c40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	b292      	uxth	r2, r2
 8003c22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	1c9a      	adds	r2, r3, #2
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c40:	f7fd faa2 	bl	8001188 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d807      	bhi.n	8003c60 <HAL_SPI_TransmitReceive+0x1d8>
 8003c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d003      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c5e:	e0a7      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1a6      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x130>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1a1      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x130>
 8003c74:	e07c      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x1fc>
 8003c7e:	8b7b      	ldrh	r3, [r7, #26]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d16b      	bne.n	8003d5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	7812      	ldrb	r2, [r2, #0]
 8003c90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003caa:	e057      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d11c      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x26c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d017      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x26c>
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d114      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	7812      	ldrb	r2, [r2, #0]
 8003cd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d119      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x2ae>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d014      	beq.n	8003d36 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d32:	2301      	movs	r3, #1
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d36:	f7fd fa27 	bl	8001188 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d803      	bhi.n	8003d4e <HAL_SPI_TransmitReceive+0x2c6>
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d102      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x2cc>
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d103      	bne.n	8003d5c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d5a:	e029      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1a2      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x224>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d19d      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f9b1 	bl	80040dc <SPI_EndRxTxTransaction>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d006      	beq.n	8003d8e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d8c:	e010      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	e000      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003dae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3730      	adds	r7, #48	; 0x30
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10f      	bne.n	8003e10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	099b      	lsrs	r3, r3, #6
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4798      	blx	r3
    return;
 8003e0e:	e0d8      	b.n	8003fc2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_SPI_IRQHandler+0x66>
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	09db      	lsrs	r3, r3, #7
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4798      	blx	r3
    return;
 8003e30:	e0c7      	b.n	8003fc2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10c      	bne.n	8003e58 <HAL_SPI_IRQHandler+0x8c>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80b5 	beq.w	8003fc2 <HAL_SPI_IRQHandler+0x1f6>
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80ae 	beq.w	8003fc2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d023      	beq.n	8003eba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d011      	beq.n	8003ea2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	f043 0204 	orr.w	r2, r3, #4
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	e00b      	b.n	8003eba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	693b      	ldr	r3, [r7, #16]
        return;
 8003eb8:	e083      	b.n	8003fc2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d014      	beq.n	8003ef0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	f043 0201 	orr.w	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00c      	beq.n	8003f16 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	f043 0208 	orr.w	r2, r3, #8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d050      	beq.n	8003fc0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f2c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <HAL_SPI_IRQHandler+0x17e>
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d034      	beq.n	8003fb4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0203 	bic.w	r2, r2, #3
 8003f58:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d011      	beq.n	8003f86 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f66:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <HAL_SPI_IRQHandler+0x1fc>)
 8003f68:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fd fa49 	bl	8001406 <HAL_DMA_Abort_IT>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f92:	4a0d      	ldr	r2, [pc, #52]	; (8003fc8 <HAL_SPI_IRQHandler+0x1fc>)
 8003f94:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd fa33 	bl	8001406 <HAL_DMA_Abort_IT>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003fb2:	e003      	b.n	8003fbc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f809 	bl	8003fcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003fba:	e000      	b.n	8003fbe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003fbc:	bf00      	nop
    return;
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
  }
}
 8003fc2:	3720      	adds	r7, #32
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	08003fe1 	.word	0x08003fe1

08003fcc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f7ff ffe6 	bl	8003fcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004018:	e04c      	b.n	80040b4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d048      	beq.n	80040b4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004022:	f7fd f8b1 	bl	8001188 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d902      	bls.n	8004038 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d13d      	bne.n	80040b4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004046:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004050:	d111      	bne.n	8004076 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d004      	beq.n	8004066 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004064:	d107      	bne.n	8004076 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004074:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407e:	d10f      	bne.n	80040a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800409e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e00f      	b.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4013      	ands	r3, r2
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d1a3      	bne.n	800401a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040e8:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <SPI_EndRxTxTransaction+0x7c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1b      	ldr	r2, [pc, #108]	; (800415c <SPI_EndRxTxTransaction+0x80>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	0d5b      	lsrs	r3, r3, #21
 80040f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040f8:	fb02 f303 	mul.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004106:	d112      	bne.n	800412e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2200      	movs	r2, #0
 8004110:	2180      	movs	r1, #128	; 0x80
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f7ff ff78 	bl	8004008 <SPI_WaitFlagStateUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d016      	beq.n	800414c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	f043 0220 	orr.w	r2, r3, #32
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e00f      	b.n	800414e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	3b01      	subs	r3, #1
 8004138:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	2b80      	cmp	r3, #128	; 0x80
 8004146:	d0f2      	beq.n	800412e <SPI_EndRxTxTransaction+0x52>
 8004148:	e000      	b.n	800414c <SPI_EndRxTxTransaction+0x70>
        break;
 800414a:	bf00      	nop
  }

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000000 	.word	0x20000000
 800415c:	165e9f81 	.word	0x165e9f81

08004160 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80041ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80041c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80041c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80041d6:	f023 030f 	bic.w	r3, r3, #15
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	b2db      	uxtb	r3, r3
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3314      	adds	r3, #20
 8004218:	461a      	mov	r2, r3
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	4413      	add	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
}  
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800423c:	230c      	movs	r3, #12
 800423e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004240:	2340      	movs	r3, #64	; 0x40
 8004242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800424c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800424e:	f107 0308 	add.w	r3, r7, #8
 8004252:	4619      	mov	r1, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ffa1 	bl	800419c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800425a:	4a05      	ldr	r2, [pc, #20]	; (8004270 <SDMMC_CmdStopTransfer+0x40>)
 800425c:	210c      	movs	r1, #12
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f82a 	bl	80042b8 <SDMMC_GetCmdResp1>
 8004264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004266:	69fb      	ldr	r3, [r7, #28]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3720      	adds	r7, #32
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	05f5e100 	.word	0x05f5e100

08004274 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004282:	230d      	movs	r3, #13
 8004284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004286:	2340      	movs	r3, #64	; 0x40
 8004288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800428e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004292:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004294:	f107 0308 	add.w	r3, r7, #8
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ff7e 	bl	800419c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	210d      	movs	r1, #13
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f806 	bl	80042b8 <SDMMC_GetCmdResp1>
 80042ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042ae:	69fb      	ldr	r3, [r7, #28]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3720      	adds	r7, #32
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80042b8:	b590      	push	{r4, r7, lr}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	460b      	mov	r3, r1
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80042c6:	4b6f      	ldr	r3, [pc, #444]	; (8004484 <SDMMC_GetCmdResp1+0x1cc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a6f      	ldr	r2, [pc, #444]	; (8004488 <SDMMC_GetCmdResp1+0x1d0>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	0a5b      	lsrs	r3, r3, #9
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80042d8:	4623      	mov	r3, r4
 80042da:	1e5c      	subs	r4, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80042e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042e4:	e0c9      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <SDMMC_GetCmdResp1+0x20>
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1eb      	bne.n	80042d8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2204      	movs	r2, #4
 8004310:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004312:	2304      	movs	r3, #4
 8004314:	e0b1      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d004      	beq.n	800432c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004328:	2301      	movs	r3, #1
 800432a:	e0a6      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	22c5      	movs	r2, #197	; 0xc5
 8004330:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff ff5c 	bl	80041f0 <SDIO_GetCommandResponse>
 8004338:	4603      	mov	r3, r0
 800433a:	461a      	mov	r2, r3
 800433c:	7afb      	ldrb	r3, [r7, #11]
 800433e:	4293      	cmp	r3, r2
 8004340:	d001      	beq.n	8004346 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004342:	2301      	movs	r3, #1
 8004344:	e099      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004346:	2100      	movs	r1, #0
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff ff5e 	bl	800420a <SDIO_GetResponse>
 800434e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4b4e      	ldr	r3, [pc, #312]	; (800448c <SDMMC_GetCmdResp1+0x1d4>)
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800435a:	2300      	movs	r3, #0
 800435c:	e08d      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	da02      	bge.n	800436a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004364:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004368:	e087      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004374:	2340      	movs	r3, #64	; 0x40
 8004376:	e080      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	e079      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004394:	e071      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80043a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043a4:	e069      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80043b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b4:	e061      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80043c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043c4:	e059      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80043d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043d4:	e051      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80043e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043e4:	e049      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80043f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043f4:	e041      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004404:	e039      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004414:	e031      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004420:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004424:	e029      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004430:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004434:	e021      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004440:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004444:	e019      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004450:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004454:	e011      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004460:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004464:	e009      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004470:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004474:	e001      	b.n	800447a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd90      	pop	{r4, r7, pc}
 8004482:	bf00      	nop
 8004484:	20000000 	.word	0x20000000
 8004488:	10624dd3 	.word	0x10624dd3
 800448c:	fdffe008 	.word	0xfdffe008

08004490 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d165      	bne.n	8004570 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4a41      	ldr	r2, [pc, #260]	; (80045ac <USB_SetTurnaroundTime+0x11c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d906      	bls.n	80044ba <USB_SetTurnaroundTime+0x2a>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4a40      	ldr	r2, [pc, #256]	; (80045b0 <USB_SetTurnaroundTime+0x120>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d802      	bhi.n	80044ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80044b4:	230f      	movs	r3, #15
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e062      	b.n	8004580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4a3c      	ldr	r2, [pc, #240]	; (80045b0 <USB_SetTurnaroundTime+0x120>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d906      	bls.n	80044d0 <USB_SetTurnaroundTime+0x40>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4a3b      	ldr	r2, [pc, #236]	; (80045b4 <USB_SetTurnaroundTime+0x124>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d802      	bhi.n	80044d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044ca:	230e      	movs	r3, #14
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e057      	b.n	8004580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4a38      	ldr	r2, [pc, #224]	; (80045b4 <USB_SetTurnaroundTime+0x124>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d906      	bls.n	80044e6 <USB_SetTurnaroundTime+0x56>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4a37      	ldr	r2, [pc, #220]	; (80045b8 <USB_SetTurnaroundTime+0x128>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d802      	bhi.n	80044e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80044e0:	230d      	movs	r3, #13
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e04c      	b.n	8004580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4a33      	ldr	r2, [pc, #204]	; (80045b8 <USB_SetTurnaroundTime+0x128>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d906      	bls.n	80044fc <USB_SetTurnaroundTime+0x6c>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4a32      	ldr	r2, [pc, #200]	; (80045bc <USB_SetTurnaroundTime+0x12c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d802      	bhi.n	80044fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80044f6:	230c      	movs	r3, #12
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	e041      	b.n	8004580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4a2f      	ldr	r2, [pc, #188]	; (80045bc <USB_SetTurnaroundTime+0x12c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d906      	bls.n	8004512 <USB_SetTurnaroundTime+0x82>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4a2e      	ldr	r2, [pc, #184]	; (80045c0 <USB_SetTurnaroundTime+0x130>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d802      	bhi.n	8004512 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800450c:	230b      	movs	r3, #11
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	e036      	b.n	8004580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4a2a      	ldr	r2, [pc, #168]	; (80045c0 <USB_SetTurnaroundTime+0x130>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d906      	bls.n	8004528 <USB_SetTurnaroundTime+0x98>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	4a29      	ldr	r2, [pc, #164]	; (80045c4 <USB_SetTurnaroundTime+0x134>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d802      	bhi.n	8004528 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004522:	230a      	movs	r3, #10
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e02b      	b.n	8004580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4a26      	ldr	r2, [pc, #152]	; (80045c4 <USB_SetTurnaroundTime+0x134>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d906      	bls.n	800453e <USB_SetTurnaroundTime+0xae>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4a25      	ldr	r2, [pc, #148]	; (80045c8 <USB_SetTurnaroundTime+0x138>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d802      	bhi.n	800453e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004538:	2309      	movs	r3, #9
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	e020      	b.n	8004580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4a21      	ldr	r2, [pc, #132]	; (80045c8 <USB_SetTurnaroundTime+0x138>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d906      	bls.n	8004554 <USB_SetTurnaroundTime+0xc4>
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	4a20      	ldr	r2, [pc, #128]	; (80045cc <USB_SetTurnaroundTime+0x13c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d802      	bhi.n	8004554 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800454e:	2308      	movs	r3, #8
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e015      	b.n	8004580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <USB_SetTurnaroundTime+0x13c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d906      	bls.n	800456a <USB_SetTurnaroundTime+0xda>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <USB_SetTurnaroundTime+0x140>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d802      	bhi.n	800456a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004564:	2307      	movs	r3, #7
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e00a      	b.n	8004580 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800456a:	2306      	movs	r3, #6
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	e007      	b.n	8004580 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004576:	2309      	movs	r3, #9
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e001      	b.n	8004580 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800457c:	2309      	movs	r3, #9
 800457e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	029b      	lsls	r3, r3, #10
 8004594:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	00d8acbf 	.word	0x00d8acbf
 80045b0:	00e4e1bf 	.word	0x00e4e1bf
 80045b4:	00f423ff 	.word	0x00f423ff
 80045b8:	0106737f 	.word	0x0106737f
 80045bc:	011a499f 	.word	0x011a499f
 80045c0:	01312cff 	.word	0x01312cff
 80045c4:	014ca43f 	.word	0x014ca43f
 80045c8:	016e35ff 	.word	0x016e35ff
 80045cc:	01a6ab1f 	.word	0x01a6ab1f
 80045d0:	01e847ff 	.word	0x01e847ff

080045d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	019b      	lsls	r3, r3, #6
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a09      	ldr	r2, [pc, #36]	; (800461c <USB_FlushTxFifo+0x48>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e006      	b.n	800460e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b20      	cmp	r3, #32
 800460a:	d0f0      	beq.n	80045ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	00030d40 	.word	0x00030d40

08004620 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0306 	and.w	r3, r3, #6
 8004638:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004640:	2300      	movs	r3, #0
 8004642:	75fb      	strb	r3, [r7, #23]
 8004644:	e00a      	b.n	800465c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d002      	beq.n	8004652 <USB_GetDevSpeed+0x32>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b06      	cmp	r3, #6
 8004650:	d102      	bne.n	8004658 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004652:	2302      	movs	r3, #2
 8004654:	75fb      	strb	r3, [r7, #23]
 8004656:	e001      	b.n	800465c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004658:	230f      	movs	r3, #15
 800465a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800465c:	7dfb      	ldrb	r3, [r7, #23]
}
 800465e:	4618      	mov	r0, r3
 8004660:	371c      	adds	r7, #28
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	785b      	ldrb	r3, [r3, #1]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d13a      	bne.n	80046fc <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	2101      	movs	r1, #1
 8004698:	fa01 f303 	lsl.w	r3, r1, r3
 800469c:	b29b      	uxth	r3, r3
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046a4:	4313      	orrs	r3, r2
 80046a6:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d155      	bne.n	800476a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	78db      	ldrb	r3, [r3, #3]
 80046d8:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046da:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	059b      	lsls	r3, r3, #22
 80046e0:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046e2:	4313      	orrs	r3, r2
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e036      	b.n	800476a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	2101      	movs	r1, #1
 800470e:	fa01 f303 	lsl.w	r3, r1, r3
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	68f9      	ldr	r1, [r7, #12]
 8004716:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800471a:	4313      	orrs	r3, r2
 800471c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11a      	bne.n	800476a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	78db      	ldrb	r3, [r3, #3]
 800474e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004750:	430b      	orrs	r3, r1
 8004752:	4313      	orrs	r3, r2
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	0151      	lsls	r1, r2, #5
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	440a      	add	r2, r1
 800475c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004768:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08a      	sub	sp, #40	; 0x28
 800477c:	af02      	add	r7, sp, #8
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	4613      	mov	r3, r2
 8004784:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b01      	cmp	r3, #1
 8004796:	f040 815c 	bne.w	8004a52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d132      	bne.n	8004808 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	0151      	lsls	r1, r2, #5
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	440a      	add	r2, r1
 80047b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	0151      	lsls	r1, r2, #5
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	440a      	add	r2, r1
 80047dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004800:	0cdb      	lsrs	r3, r3, #19
 8004802:	04db      	lsls	r3, r3, #19
 8004804:	6113      	str	r3, [r2, #16]
 8004806:	e074      	b.n	80048f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004822:	0cdb      	lsrs	r3, r3, #19
 8004824:	04db      	lsls	r3, r3, #19
 8004826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	440a      	add	r2, r1
 800483e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004842:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004846:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800484a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	6959      	ldr	r1, [r3, #20]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	440b      	add	r3, r1
 8004864:	1e59      	subs	r1, r3, #1
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	fbb1 f3f3 	udiv	r3, r1, r3
 800486e:	04d9      	lsls	r1, r3, #19
 8004870:	4b9d      	ldr	r3, [pc, #628]	; (8004ae8 <USB_EPStartXfer+0x370>)
 8004872:	400b      	ands	r3, r1
 8004874:	69b9      	ldr	r1, [r7, #24]
 8004876:	0148      	lsls	r0, r1, #5
 8004878:	69f9      	ldr	r1, [r7, #28]
 800487a:	4401      	add	r1, r0
 800487c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004880:	4313      	orrs	r3, r2
 8004882:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489a:	69b9      	ldr	r1, [r7, #24]
 800489c:	0148      	lsls	r0, r1, #5
 800489e:	69f9      	ldr	r1, [r7, #28]
 80048a0:	4401      	add	r1, r0
 80048a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048a6:	4313      	orrs	r3, r2
 80048a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	78db      	ldrb	r3, [r3, #3]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d11f      	bne.n	80048f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	0151      	lsls	r1, r2, #5
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	440a      	add	r2, r1
 80048c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80048d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	0151      	lsls	r1, r2, #5
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	440a      	add	r2, r1
 80048e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d14b      	bne.n	8004990 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	461a      	mov	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	78db      	ldrb	r3, [r3, #3]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d128      	bne.n	800496e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d110      	bne.n	800494e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	0151      	lsls	r1, r2, #5
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	440a      	add	r2, r1
 8004942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	e00f      	b.n	800496e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	440a      	add	r2, r1
 8004964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	0151      	lsls	r1, r2, #5
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	440a      	add	r2, r1
 8004984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004988:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	e12f      	b.n	8004bf0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	78db      	ldrb	r3, [r3, #3]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d015      	beq.n	80049e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 8117 	beq.w	8004bf0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	2101      	movs	r1, #1
 80049d4:	fa01 f303 	lsl.w	r3, r1, r3
 80049d8:	69f9      	ldr	r1, [r7, #28]
 80049da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049de:	4313      	orrs	r3, r2
 80049e0:	634b      	str	r3, [r1, #52]	; 0x34
 80049e2:	e105      	b.n	8004bf0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d110      	bne.n	8004a16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	e00f      	b.n	8004a36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	68d9      	ldr	r1, [r3, #12]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	781a      	ldrb	r2, [r3, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	b298      	uxth	r0, r3
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	4603      	mov	r3, r0
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fa2b 	bl	8004ea6 <USB_WritePacket>
 8004a50:	e0ce      	b.n	8004bf0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	0151      	lsls	r1, r2, #5
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	440a      	add	r2, r1
 8004a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a6c:	0cdb      	lsrs	r3, r3, #19
 8004a6e:	04db      	lsls	r3, r3, #19
 8004a70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d126      	bne.n	8004aec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	0148      	lsls	r0, r1, #5
 8004ab8:	69f9      	ldr	r1, [r7, #28]
 8004aba:	4401      	add	r1, r0
 8004abc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ade:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ae2:	6113      	str	r3, [r2, #16]
 8004ae4:	e036      	b.n	8004b54 <USB_EPStartXfer+0x3dc>
 8004ae6:	bf00      	nop
 8004ae8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	695a      	ldr	r2, [r3, #20]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4413      	add	r3, r2
 8004af6:	1e5a      	subs	r2, r3, #1
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b00:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	8afb      	ldrh	r3, [r7, #22]
 8004b12:	04d9      	lsls	r1, r3, #19
 8004b14:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <USB_EPStartXfer+0x484>)
 8004b16:	400b      	ands	r3, r1
 8004b18:	69b9      	ldr	r1, [r7, #24]
 8004b1a:	0148      	lsls	r0, r1, #5
 8004b1c:	69f9      	ldr	r1, [r7, #28]
 8004b1e:	4401      	add	r1, r0
 8004b20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b24:	4313      	orrs	r3, r2
 8004b26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	8af9      	ldrh	r1, [r7, #22]
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b44:	69b9      	ldr	r1, [r7, #24]
 8004b46:	0148      	lsls	r0, r1, #5
 8004b48:	69f9      	ldr	r1, [r7, #28]
 8004b4a:	4401      	add	r1, r0
 8004b4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b50:	4313      	orrs	r3, r2
 8004b52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d10d      	bne.n	8004b76 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	68d9      	ldr	r1, [r3, #12]
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	460a      	mov	r2, r1
 8004b74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	78db      	ldrb	r3, [r3, #3]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d128      	bne.n	8004bd0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d110      	bne.n	8004bb0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e00f      	b.n	8004bd0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	1ff80000 	.word	0x1ff80000

08004c00 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	f040 80cd 	bne.w	8004dbc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d132      	bne.n	8004c90 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	0151      	lsls	r1, r2, #5
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	440a      	add	r2, r1
 8004c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	0151      	lsls	r1, r2, #5
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	440a      	add	r2, r1
 8004c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c88:	0cdb      	lsrs	r3, r3, #19
 8004c8a:	04db      	lsls	r3, r3, #19
 8004c8c:	6113      	str	r3, [r2, #16]
 8004c8e:	e04e      	b.n	8004d2e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	0151      	lsls	r1, r2, #5
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	440a      	add	r2, r1
 8004ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004caa:	0cdb      	lsrs	r3, r3, #19
 8004cac:	04db      	lsls	r3, r3, #19
 8004cae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cd2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	695a      	ldr	r2, [r3, #20]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d903      	bls.n	8004ce8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d1e:	6939      	ldr	r1, [r7, #16]
 8004d20:	0148      	lsls	r0, r1, #5
 8004d22:	6979      	ldr	r1, [r7, #20]
 8004d24:	4401      	add	r1, r0
 8004d26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d11e      	bne.n	8004d72 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d009      	beq.n	8004d50 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	e092      	b.n	8004e98 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d90:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d07e      	beq.n	8004e98 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	2101      	movs	r1, #1
 8004dac:	fa01 f303 	lsl.w	r3, r1, r3
 8004db0:	6979      	ldr	r1, [r7, #20]
 8004db2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db6:	4313      	orrs	r3, r2
 8004db8:	634b      	str	r3, [r1, #52]	; 0x34
 8004dba:	e06d      	b.n	8004e98 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	0151      	lsls	r1, r2, #5
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	440a      	add	r2, r1
 8004dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd6:	0cdb      	lsrs	r3, r3, #19
 8004dd8:	04db      	lsls	r3, r3, #19
 8004dda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dfa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dfe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e46:	6939      	ldr	r1, [r7, #16]
 8004e48:	0148      	lsls	r0, r1, #5
 8004e4a:	6979      	ldr	r1, [r7, #20]
 8004e4c:	4401      	add	r1, r0
 8004e4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e52:	4313      	orrs	r3, r2
 8004e54:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d10d      	bne.n	8004e78 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d009      	beq.n	8004e78 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	68d9      	ldr	r1, [r3, #12]
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	460a      	mov	r2, r1
 8004e76:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b089      	sub	sp, #36	; 0x24
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	71fb      	strb	r3, [r7, #7]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004ec4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d11a      	bne.n	8004f02 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ecc:	88bb      	ldrh	r3, [r7, #4]
 8004ece:	3303      	adds	r3, #3
 8004ed0:	089b      	lsrs	r3, r3, #2
 8004ed2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	e00f      	b.n	8004efa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	031a      	lsls	r2, r3, #12
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d3eb      	bcc.n	8004eda <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3724      	adds	r7, #36	; 0x24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b089      	sub	sp, #36	; 0x24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	3303      	adds	r3, #3
 8004f2a:	089b      	lsrs	r3, r3, #2
 8004f2c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	e00b      	b.n	8004f4c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	3304      	adds	r3, #4
 8004f44:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	61bb      	str	r3, [r7, #24]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d3ef      	bcc.n	8004f34 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004f54:	69fb      	ldr	r3, [r7, #28]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3724      	adds	r7, #36	; 0x24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b085      	sub	sp, #20
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d12c      	bne.n	8004fd8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	db12      	blt.n	8004fb6 <USB_EPSetStall+0x54>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00f      	beq.n	8004fb6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	0151      	lsls	r1, r2, #5
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	440a      	add	r2, r1
 8004fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fb4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e02b      	b.n	8005030 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	db12      	blt.n	8005010 <USB_EPSetStall+0xae>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00f      	beq.n	8005010 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	440a      	add	r2, r1
 8005006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800500e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800502e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d128      	bne.n	80050ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005074:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005078:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	78db      	ldrb	r3, [r3, #3]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d003      	beq.n	800508a <USB_EPClearStall+0x4c>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	78db      	ldrb	r3, [r3, #3]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d138      	bne.n	80050fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e027      	b.n	80050fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	78db      	ldrb	r3, [r3, #3]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d003      	beq.n	80050dc <USB_EPClearStall+0x9e>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	78db      	ldrb	r3, [r3, #3]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d10f      	bne.n	80050fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	460b      	mov	r3, r1
 8005114:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005128:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800512c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800513e:	68f9      	ldr	r1, [r7, #12]
 8005140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005144:	4313      	orrs	r3, r2
 8005146:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4013      	ands	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800516e:	68fb      	ldr	r3, [r7, #12]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4013      	ands	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	0c1b      	lsrs	r3, r3, #16
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	4013      	ands	r3, r2
 80051d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	b29b      	uxth	r3, r3
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	4013      	ands	r3, r2
 8005210:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005212:	68bb      	ldr	r3, [r7, #8]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005242:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
 8005250:	01db      	lsls	r3, r3, #7
 8005252:	b2db      	uxtb	r3, r3
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4013      	ands	r3, r2
 800526c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800526e:	68bb      	ldr	r3, [r7, #8]
}
 8005270:	4618      	mov	r0, r3
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f003 0301 	and.w	r3, r3, #1
}
 800528c:	4618      	mov	r0, r3
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80052b6:	f023 0307 	bic.w	r3, r3, #7
 80052ba:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 0306 	and.w	r3, r3, #6
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d109      	bne.n	80052e0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052da:	f043 0303 	orr.w	r3, r3, #3
 80052de:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	460b      	mov	r3, r1
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	333c      	adds	r3, #60	; 0x3c
 800531a:	3304      	adds	r3, #4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4a26      	ldr	r2, [pc, #152]	; (80053bc <USB_EP0_OutStart+0xb8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d90a      	bls.n	800533e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005338:	d101      	bne.n	800533e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	e037      	b.n	80053ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005344:	461a      	mov	r2, r3
 8005346:	2300      	movs	r3, #0
 8005348:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800535c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536c:	f043 0318 	orr.w	r3, r3, #24
 8005370:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005380:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005384:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005386:	7afb      	ldrb	r3, [r7, #11]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d10f      	bne.n	80053ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005392:	461a      	mov	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80053aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	4f54300a 	.word	0x4f54300a

080053c0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80053c8:	f000 f818 	bl	80053fc <BSP_SD_AbortCallback>
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80053dc:	f000 f815 	bl	800540a <BSP_SD_WriteCpltCallback>
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80053f0:	f000 f812 	bl	8005418 <BSP_SD_ReadCpltCallback>
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0

}
 8005400:	bf00      	nop
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800540a:	b480      	push	{r7}
 800540c:	af00      	add	r7, sp, #0

}
 800540e:	bf00      	nop
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0

}
 800541c:	bf00      	nop
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <rfalAnalogConfigInitialize+0x24>)
 800542e:	4a08      	ldr	r2, [pc, #32]	; (8005450 <rfalAnalogConfigInitialize+0x28>)
 8005430:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 8005432:	4b06      	ldr	r3, [pc, #24]	; (800544c <rfalAnalogConfigInitialize+0x24>)
 8005434:	f240 22bb 	movw	r2, #699	; 0x2bb
 8005438:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800543a:	4b04      	ldr	r3, [pc, #16]	; (800544c <rfalAnalogConfigInitialize+0x24>)
 800543c:	2201      	movs	r2, #1
 800543e:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20000588 	.word	0x20000588
 8005450:	0800a6fc 	.word	0x0800a6fc

08005454 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 8005462:	2300      	movs	r3, #0
 8005464:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 8005466:	4b4b      	ldr	r3, [pc, #300]	; (8005594 <rfalSetAnalogConfig+0x140>)
 8005468:	799b      	ldrb	r3, [r3, #6]
 800546a:	f083 0301 	eor.w	r3, r3, #1
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 8005474:	2305      	movs	r3, #5
 8005476:	e089      	b.n	800558c <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 8005478:	f107 020e 	add.w	r2, r7, #14
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	4611      	mov	r1, r2
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f889 	bl	8005598 <rfalAnalogConfigSearch>
 8005486:	4603      	mov	r3, r0
 8005488:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800548a:	7d3b      	ldrb	r3, [r7, #20]
 800548c:	2bff      	cmp	r3, #255	; 0xff
 800548e:	d07b      	beq.n	8005588 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 8005490:	4b40      	ldr	r3, [pc, #256]	; (8005594 <rfalSetAnalogConfig+0x140>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	89fb      	ldrh	r3, [r7, #14]
 8005498:	4413      	add	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800549c:	7d3b      	ldrb	r3, [r7, #20]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	89fb      	ldrh	r3, [r7, #14]
 80054a6:	4413      	add	r3, r2
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 80054ac:	4b39      	ldr	r3, [pc, #228]	; (8005594 <rfalSetAnalogConfig+0x140>)
 80054ae:	889b      	ldrh	r3, [r3, #4]
 80054b0:	3301      	adds	r3, #1
 80054b2:	89fa      	ldrh	r2, [r7, #14]
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d201      	bcs.n	80054bc <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e067      	b.n	800558c <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 80054bc:	2300      	movs	r3, #0
 80054be:	757b      	strb	r3, [r7, #21]
 80054c0:	e05d      	b.n	800557e <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 80054c2:	7d7b      	ldrb	r3, [r7, #21]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4413      	add	r3, r2
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	7d7a      	ldrb	r2, [r7, #21]
 80054d0:	0092      	lsls	r2, r2, #2
 80054d2:	6939      	ldr	r1, [r7, #16]
 80054d4:	440a      	add	r2, r1
 80054d6:	7852      	ldrb	r2, [r2, #1]
 80054d8:	4313      	orrs	r3, r2
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d026      	beq.n	8005530 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 80054e2:	7d7b      	ldrb	r3, [r7, #21]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4413      	add	r3, r2
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	b21a      	sxth	r2, r3
 80054f0:	7d7b      	ldrb	r3, [r7, #21]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	6939      	ldr	r1, [r7, #16]
 80054f6:	440b      	add	r3, r1
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	b21b      	sxth	r3, r3
 80054fc:	4313      	orrs	r3, r2
 80054fe:	b21b      	sxth	r3, r3
 8005500:	b29b      	uxth	r3, r3
 8005502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005506:	b298      	uxth	r0, r3
 8005508:	7d7b      	ldrb	r3, [r7, #21]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4413      	add	r3, r2
 8005510:	7899      	ldrb	r1, [r3, #2]
 8005512:	7d7b      	ldrb	r3, [r7, #21]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4413      	add	r3, r2
 800551a:	78db      	ldrb	r3, [r3, #3]
 800551c:	461a      	mov	r2, r3
 800551e:	f002 fe6f 	bl	8008200 <rfalChipChangeTestRegBits>
 8005522:	4603      	mov	r3, r0
 8005524:	82fb      	strh	r3, [r7, #22]
 8005526:	8afb      	ldrh	r3, [r7, #22]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d025      	beq.n	8005578 <rfalSetAnalogConfig+0x124>
 800552c:	8afb      	ldrh	r3, [r7, #22]
 800552e:	e02d      	b.n	800558c <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 8005530:	7d7b      	ldrb	r3, [r7, #21]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4413      	add	r3, r2
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	b21a      	sxth	r2, r3
 800553e:	7d7b      	ldrb	r3, [r7, #21]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	6939      	ldr	r1, [r7, #16]
 8005544:	440b      	add	r3, r1
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	b21b      	sxth	r3, r3
 800554a:	4313      	orrs	r3, r2
 800554c:	b21b      	sxth	r3, r3
 800554e:	b298      	uxth	r0, r3
 8005550:	7d7b      	ldrb	r3, [r7, #21]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4413      	add	r3, r2
 8005558:	7899      	ldrb	r1, [r3, #2]
 800555a:	7d7b      	ldrb	r3, [r7, #21]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4413      	add	r3, r2
 8005562:	78db      	ldrb	r3, [r3, #3]
 8005564:	461a      	mov	r2, r3
 8005566:	f002 fe29 	bl	80081bc <rfalChipChangeRegBits>
 800556a:	4603      	mov	r3, r0
 800556c:	82fb      	strh	r3, [r7, #22]
 800556e:	8afb      	ldrh	r3, [r7, #22]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <rfalSetAnalogConfig+0x124>
 8005574:	8afb      	ldrh	r3, [r7, #22]
 8005576:	e009      	b.n	800558c <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 8005578:	7d7b      	ldrb	r3, [r7, #21]
 800557a:	3301      	adds	r3, #1
 800557c:	757b      	strb	r3, [r7, #21]
 800557e:	7d7a      	ldrb	r2, [r7, #21]
 8005580:	7d3b      	ldrb	r3, [r7, #20]
 8005582:	429a      	cmp	r2, r3
 8005584:	d39d      	bcc.n	80054c2 <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 8005586:	e777      	b.n	8005478 <rfalSetAnalogConfig+0x24>
            break;
 8005588:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800558a:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20000588 	.word	0x20000588

08005598 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	6039      	str	r1, [r7, #0]
 80055a2:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 80055a4:	4b31      	ldr	r3, [pc, #196]	; (800566c <rfalAnalogConfigSearch+0xd4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	613b      	str	r3, [r7, #16]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80055b0:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <rfalAnalogConfigSearch+0x34>
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	e001      	b.n	80055d0 <rfalAnalogConfigSearch+0x38>
 80055cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <rfalAnalogConfigSearch+0x48>
 80055dc:	88fb      	ldrh	r3, [r7, #6]
 80055de:	e000      	b.n	80055e2 <rfalAnalogConfigSearch+0x4a>
 80055e0:	230f      	movs	r3, #15
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 80055e2:	4313      	orrs	r3, r2
 80055e4:	82fb      	strh	r3, [r7, #22]
                       );
    
    
    /* When specific ConfigIDs are to be used, override search mask */
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d102      	bne.n	80055f8 <rfalAnalogConfigSearch+0x60>
    {
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
 80055f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055f6:	82fb      	strh	r3, [r7, #22]
    }
    
    
    i = *configOffset;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 80055fe:	e029      	b.n	8005654 <rfalAnalogConfigSearch+0xbc>
    {
        configTbl = &currentConfigTbl[i];
 8005600:	8abb      	ldrh	r3, [r7, #20]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4413      	add	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
        foundConfigId = GETU16(configTbl);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	b21a      	sxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	b21b      	sxth	r3, r3
 8005618:	4313      	orrs	r3, r2
 800561a:	b21b      	sxth	r3, r3
 800561c:	817b      	strh	r3, [r7, #10]
        if (configId == (foundConfigId & configIdMaskVal))
 800561e:	897a      	ldrh	r2, [r7, #10]
 8005620:	8afb      	ldrh	r3, [r7, #22]
 8005622:	4013      	ands	r3, r2
 8005624:	b29b      	uxth	r3, r3
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	429a      	cmp	r2, r3
 800562a:	d108      	bne.n	800563e <rfalAnalogConfigSearch+0xa6>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800562c:	8abb      	ldrh	r3, [r7, #20]
 800562e:	3303      	adds	r3, #3
 8005630:	b29a      	uxth	r2, r3
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3302      	adds	r3, #2
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	e010      	b.n	8005660 <rfalAnalogConfigSearch+0xc8>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3302      	adds	r3, #2
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800564a:	8abb      	ldrh	r3, [r7, #20]
 800564c:	4413      	add	r3, r2
 800564e:	b29b      	uxth	r3, r3
 8005650:	3303      	adds	r3, #3
 8005652:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <rfalAnalogConfigSearch+0xd4>)
 8005656:	889b      	ldrh	r3, [r3, #4]
 8005658:	8aba      	ldrh	r2, [r7, #20]
 800565a:	429a      	cmp	r2, r3
 800565c:	d3d0      	bcc.n	8005600 <rfalAnalogConfigSearch+0x68>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 800565e:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 8005660:	4618      	mov	r0, r3
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	20000588 	.word	0x20000588

08005670 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	6039      	str	r1, [r7, #0]
 800567a:	80fb      	strh	r3, [r7, #6]
 800567c:	4613      	mov	r3, r2
 800567e:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 8005684:	2300      	movs	r3, #0
 8005686:	81bb      	strh	r3, [r7, #12]
 8005688:	e00d      	b.n	80056a6 <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 800568a:	89bb      	ldrh	r3, [r7, #12]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	4413      	add	r3, r2
 8005690:	781a      	ldrb	r2, [r3, #0]
 8005692:	89fb      	ldrh	r3, [r7, #14]
 8005694:	4611      	mov	r1, r2
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f80e 	bl	80056b8 <rfalCrcUpdateCcitt>
 800569c:	4603      	mov	r3, r0
 800569e:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 80056a0:	89bb      	ldrh	r3, [r7, #12]
 80056a2:	3301      	adds	r3, #1
 80056a4:	81bb      	strh	r3, [r7, #12]
 80056a6:	89ba      	ldrh	r2, [r7, #12]
 80056a8:	88bb      	ldrh	r3, [r7, #4]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d3ed      	bcc.n	800568a <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 80056ae:	89fb      	ldrh	r3, [r7, #14]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	460a      	mov	r2, r1
 80056c2:	80fb      	strh	r3, [r7, #6]
 80056c4:	4613      	mov	r3, r2
 80056c6:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 80056c8:	88fb      	ldrh	r3, [r7, #6]
 80056ca:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 80056cc:	797b      	ldrb	r3, [r7, #5]
 80056ce:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 80056d0:	89fb      	ldrh	r3, [r7, #14]
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	7b7b      	ldrb	r3, [r7, #13]
 80056d6:	4053      	eors	r3, r2
 80056d8:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 80056da:	7b7b      	ldrb	r3, [r7, #13]
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	b25a      	sxtb	r2, r3
 80056e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80056e4:	4053      	eors	r3, r2
 80056e6:	b25b      	sxtb	r3, r3
 80056e8:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 80056ea:	89fb      	ldrh	r3, [r7, #14]
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	b21a      	sxth	r2, r3
 80056f2:	7b7b      	ldrb	r3, [r7, #13]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	b21b      	sxth	r3, r3
 80056f8:	4053      	eors	r3, r2
 80056fa:	b21a      	sxth	r2, r3
 80056fc:	7b7b      	ldrb	r3, [r7, #13]
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	b21b      	sxth	r3, r3
 8005702:	4053      	eors	r3, r2
 8005704:	b21a      	sxth	r2, r3
 8005706:	7b7b      	ldrb	r3, [r7, #13]
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	b2db      	uxtb	r3, r3
 800570c:	b21b      	sxth	r3, r3
 800570e:	4053      	eors	r3, r2
 8005710:	b21b      	sxth	r3, r3
 8005712:	81fb      	strh	r3, [r7, #14]

    return crc;
 8005714:	89fb      	ldrh	r3, [r7, #14]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800572e:	2208      	movs	r2, #8
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	480d      	ldr	r0, [pc, #52]	; (8005768 <iso15693PhyConfigure+0x44>)
 8005734:	f004 ffb6 	bl	800a6a4 <memcpy>
    
    if ( config->speedMode <= 3U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d808      	bhi.n	8005752 <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	b2db      	uxtb	r3, r3
 8005746:	f1c3 0303 	rsb	r3, r3, #3
 800574a:	b2da      	uxtb	r2, r3
 800574c:	4b07      	ldr	r3, [pc, #28]	; (800576c <iso15693PhyConfigure+0x48>)
 800574e:	70da      	strb	r2, [r3, #3]
 8005750:	e002      	b.n	8005758 <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 8005752:	4b06      	ldr	r3, [pc, #24]	; (800576c <iso15693PhyConfigure+0x48>)
 8005754:	2203      	movs	r2, #3
 8005756:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	4a04      	ldr	r2, [pc, #16]	; (800576c <iso15693PhyConfigure+0x48>)
 800575c:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000590 	.word	0x20000590
 800576c:	2000000c 	.word	0x2000000c

08005770 <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	b08b      	sub	sp, #44	; 0x2c
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	4608      	mov	r0, r1
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	807b      	strh	r3, [r7, #2]
 8005782:	460b      	mov	r3, r1
 8005784:	707b      	strb	r3, [r7, #1]
 8005786:	4613      	mov	r3, r2
 8005788:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 800578a:	2300      	movs	r3, #0
 800578c:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 8005792:	787b      	ldrb	r3, [r7, #1]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <iso15693VCDCode+0x2c>
 8005798:	2302      	movs	r3, #2
 800579a:	e000      	b.n	800579e <iso15693VCDCode+0x2e>
 800579c:	2300      	movs	r3, #0
 800579e:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 80057a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a2:	2200      	movs	r2, #0
 80057a4:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 80057a6:	4b94      	ldr	r3, [pc, #592]	; (80059f8 <iso15693VCDCode+0x288>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d117      	bne.n	80057de <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 80057ae:	2321      	movs	r3, #33	; 0x21
 80057b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 80057b4:	2304      	movs	r3, #4
 80057b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 80057ba:	4b90      	ldr	r3, [pc, #576]	; (80059fc <iso15693VCDCode+0x28c>)
 80057bc:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	7d7b      	ldrb	r3, [r7, #21]
 80057c2:	4413      	add	r3, r2
                  + 1U) /* EOF */
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3302      	adds	r3, #2
 80057cc:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 80057ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d0:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 80057d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d823      	bhi.n	8005822 <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 80057da:	2301      	movs	r3, #1
 80057dc:	e13a      	b.n	8005a54 <iso15693VCDCode+0x2e4>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 80057de:	2381      	movs	r3, #129	; 0x81
 80057e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 80057e4:	2304      	movs	r3, #4
 80057e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 80057ea:	4b85      	ldr	r3, [pc, #532]	; (8005a00 <iso15693VCDCode+0x290>)
 80057ec:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 80057ee:	887a      	ldrh	r2, [r7, #2]
 80057f0:	7d7b      	ldrb	r3, [r7, #21]
 80057f2:	4413      	add	r3, r2
                  + 1U) /* EOF */
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	019b      	lsls	r3, r3, #6
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3302      	adds	r3, #2
 80057fc:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 80057fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005800:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 8005802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800580a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800580e:	2b3f      	cmp	r3, #63	; 0x3f
 8005810:	d807      	bhi.n	8005822 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 8005812:	2301      	movs	r3, #1
 8005814:	e11e      	b.n	8005a54 <iso15693VCDCode+0x2e4>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 8005816:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d801      	bhi.n	8005822 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800581e:	2301      	movs	r3, #1
 8005820:	e118      	b.n	8005a54 <iso15693VCDCode+0x2e4>
            }
        }
    }

    if (length == 0U)
 8005822:	887b      	ldrh	r3, [r7, #2]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d102      	bne.n	800582e <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 8005828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582a:	2201      	movs	r2, #1
 800582c:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800582e:	887b      	ldrh	r3, [r7, #2]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01b      	beq.n	800586c <iso15693VCDCode+0xfc>
 8005834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d117      	bne.n	800586c <iso15693VCDCode+0xfc>
 800583c:	783b      	ldrb	r3, [r7, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d014      	beq.n	800586c <iso15693VCDCode+0xfc>
 8005842:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005846:	f083 0301 	eor.w	r3, r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	f043 0302 	orr.w	r3, r3, #2
 8005858:	b2da      	uxtb	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	b2da      	uxtb	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 800586c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800586e:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 8005870:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005874:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 8005876:	887b      	ldrh	r3, [r7, #2]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d03b      	beq.n	80058f4 <iso15693VCDCode+0x184>
 800587c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d137      	bne.n	80058f4 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800588a:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800588c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	3301      	adds	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005896:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 8005898:	8afb      	ldrh	r3, [r7, #22]
 800589a:	3b01      	subs	r3, #1
 800589c:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	3301      	adds	r3, #1
 80058a2:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 80058a4:	e026      	b.n	80058f4 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 80058a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4413      	add	r3, r2
 80058b0:	7818      	ldrb	r0, [r3, #0]
 80058b2:	f107 030e 	add.w	r3, r7, #14
 80058b6:	8afa      	ldrh	r2, [r7, #22]
 80058b8:	69fc      	ldr	r4, [r7, #28]
 80058ba:	69b9      	ldr	r1, [r7, #24]
 80058bc:	47a0      	blx	r4
 80058be:	4603      	mov	r3, r0
 80058c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 80058c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c4:	881a      	ldrh	r2, [r3, #0]
 80058c6:	89fb      	ldrh	r3, [r7, #14]
 80058c8:	4413      	add	r3, r2
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ce:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 80058d0:	89fb      	ldrh	r3, [r7, #14]
 80058d2:	461a      	mov	r2, r3
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	4413      	add	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 80058da:	89fb      	ldrh	r3, [r7, #14]
 80058dc:	8afa      	ldrh	r2, [r7, #22]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 80058e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d105      	bne.n	80058f4 <iso15693VCDCode+0x184>
            (*offset)++;
 80058e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f2:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 80058f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	887a      	ldrh	r2, [r7, #2]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d902      	bls.n	8005904 <iso15693VCDCode+0x194>
 80058fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0d0      	beq.n	80058a6 <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 8005904:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005906:	2b00      	cmp	r3, #0
 8005908:	d063      	beq.n	80059d2 <iso15693VCDCode+0x262>
        return ERR_AGAIN;
 800590a:	230d      	movs	r3, #13
 800590c:	e0a2      	b.n	8005a54 <iso15693VCDCode+0x2e4>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800590e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005910:	2b00      	cmp	r3, #0
 8005912:	d12b      	bne.n	800596c <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 8005914:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <iso15693VCDCode+0x1b2>
 800591c:	f24e 0012 	movw	r0, #57362	; 0xe012
 8005920:	e001      	b.n	8005926 <iso15693VCDCode+0x1b6>
 8005922:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005926:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <iso15693VCDCode+0x1c4>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3301      	adds	r3, #1
 8005932:	e000      	b.n	8005936 <iso15693VCDCode+0x1c6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800593a:	2a00      	cmp	r2, #0
 800593c:	d003      	beq.n	8005946 <iso15693VCDCode+0x1d6>
 800593e:	887a      	ldrh	r2, [r7, #2]
 8005940:	3a01      	subs	r2, #1
 8005942:	b292      	uxth	r2, r2
 8005944:	e000      	b.n	8005948 <iso15693VCDCode+0x1d8>
 8005946:	887a      	ldrh	r2, [r7, #2]
 8005948:	4619      	mov	r1, r3
 800594a:	f7ff fe91 	bl	8005670 <rfalCrcCalculateCcitt>
 800594e:	4603      	mov	r3, r0
 8005950:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8005952:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005956:	f083 0301 	eor.w	r3, r3, #1
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <iso15693VCDCode+0x1f8>
 8005960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005962:	43db      	mvns	r3, r3
 8005964:	b29b      	uxth	r3, r3
 8005966:	e000      	b.n	800596a <iso15693VCDCode+0x1fa>
 8005968:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800596a:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800596c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800596e:	b2db      	uxtb	r3, r3
 8005970:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 8005972:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	b29b      	uxth	r3, r3
 8005978:	b2db      	uxtb	r3, r3
 800597a:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800597c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	887b      	ldrh	r3, [r7, #2]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800598a:	4413      	add	r3, r2
 800598c:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 8005990:	f107 030c 	add.w	r3, r7, #12
 8005994:	8afa      	ldrh	r2, [r7, #22]
 8005996:	69fc      	ldr	r4, [r7, #28]
 8005998:	69b9      	ldr	r1, [r7, #24]
 800599a:	47a0      	blx	r4
 800599c:	4603      	mov	r3, r0
 800599e:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 80059a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a2:	881a      	ldrh	r2, [r3, #0]
 80059a4:	89bb      	ldrh	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ac:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 80059ae:	89bb      	ldrh	r3, [r7, #12]
 80059b0:	461a      	mov	r2, r3
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4413      	add	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 80059b8:	89bb      	ldrh	r3, [r7, #12]
 80059ba:	8afa      	ldrh	r2, [r7, #22]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 80059c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d105      	bne.n	80059d2 <iso15693VCDCode+0x262>
            (*offset)++;
 80059c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	3301      	adds	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d0:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 80059d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <iso15693VCDCode+0x27c>
 80059d8:	787b      	ldrb	r3, [r7, #1]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d006      	beq.n	80059ec <iso15693VCDCode+0x27c>
 80059de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	887b      	ldrh	r3, [r7, #2]
 80059e6:	3302      	adds	r3, #2
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d390      	bcc.n	800590e <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 80059ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d008      	beq.n	8005a04 <iso15693VCDCode+0x294>
        return ERR_AGAIN;
 80059f2:	230d      	movs	r3, #13
 80059f4:	e02e      	b.n	8005a54 <iso15693VCDCode+0x2e4>
 80059f6:	bf00      	nop
 80059f8:	20000590 	.word	0x20000590
 80059fc:	08005c99 	.word	0x08005c99
 8005a00:	08005d41 	.word	0x08005d41
    }

    if ((!sendCrc && (*offset == length))
 8005a04:	787b      	ldrb	r3, [r7, #1]
 8005a06:	f083 0301 	eor.w	r3, r3, #1
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d004      	beq.n	8005a1a <iso15693VCDCode+0x2aa>
 8005a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	887a      	ldrh	r2, [r7, #2]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d009      	beq.n	8005a2e <iso15693VCDCode+0x2be>
            || (sendCrc && (*offset == (length + 2U))))
 8005a1a:	787b      	ldrb	r3, [r7, #1]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d018      	beq.n	8005a52 <iso15693VCDCode+0x2e2>
 8005a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	887b      	ldrh	r3, [r7, #2]
 8005a28:	3302      	adds	r3, #2
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d111      	bne.n	8005a52 <iso15693VCDCode+0x2e2>
    {
        *outputBuf = eof; 
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005a34:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 8005a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a40:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 8005a42:	8afb      	ldrh	r3, [r7, #22]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 8005a4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a50:	e000      	b.n	8005a54 <iso15693VCDCode+0x2e4>
        return ERR_AGAIN;
 8005a52:	230d      	movs	r3, #13
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	372c      	adds	r7, #44	; 0x2c
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd90      	pop	{r4, r7, pc}

08005a5c <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	607a      	str	r2, [r7, #4]
 8005a66:	461a      	mov	r2, r3
 8005a68:	460b      	mov	r3, r1
 8005a6a:	817b      	strh	r3, [r7, #10]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	2200      	movs	r2, #0
 8005a78:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	f003 031f 	and.w	r3, r3, #31
 8005a88:	2b17      	cmp	r3, #23
 8005a8a:	d001      	beq.n	8005a90 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 8005a8c:	2309      	movs	r3, #9
 8005a8e:	e0ff      	b.n	8005c90 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 8005a90:	893b      	ldrh	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e0fa      	b.n	8005c90 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 8005a9a:	2305      	movs	r3, #5
 8005a9c:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 8005aa2:	893b      	ldrh	r3, [r7, #8]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f004 fe06 	bl	800a6ba <memset>

    if (inBufLen == 0U)
 8005aae:	897b      	ldrh	r3, [r7, #10]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f040 808e 	bne.w	8005bd2 <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 8005ab6:	2315      	movs	r3, #21
 8005ab8:	e0ea      	b.n	8005c90 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 8005aba:	2300      	movs	r3, #0
 8005abc:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 8005abe:	8bbb      	ldrh	r3, [r7, #28]
 8005ac0:	08db      	lsrs	r3, r3, #3
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	8bbb      	ldrh	r3, [r7, #28]
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	fa42 f303 	asr.w	r3, r2, r3
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 8005ae0:	8bbb      	ldrh	r3, [r7, #28]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	08db      	lsrs	r3, r3, #3
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	8bbb      	ldrh	r3, [r7, #28]
 8005af0:	3301      	adds	r3, #1
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	fa42 f303 	asr.w	r3, r2, r3
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	7e3b      	ldrb	r3, [r7, #24]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 8005b0c:	7e3b      	ldrb	r3, [r7, #24]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d102      	bne.n	8005b18 <iso15693VICCDecode+0xbc>
        {
            bp++;
 8005b12:	8b7b      	ldrh	r3, [r7, #26]
 8005b14:	3301      	adds	r3, #1
 8005b16:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 8005b18:	7e3b      	ldrb	r3, [r7, #24]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d119      	bne.n	8005b52 <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 8005b1e:	8b7b      	ldrh	r3, [r7, #26]
 8005b20:	08db      	lsrs	r3, r3, #3
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4413      	add	r3, r2
 8005b2a:	7819      	ldrb	r1, [r3, #0]
 8005b2c:	8b7b      	ldrh	r3, [r7, #26]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	2201      	movs	r2, #1
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	8b7b      	ldrh	r3, [r7, #26]
 8005b3c:	08db      	lsrs	r3, r3, #3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	4618      	mov	r0, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4403      	add	r3, r0
 8005b46:	430a      	orrs	r2, r1
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]
            bp++;
 8005b4c:	8b7b      	ldrh	r3, [r7, #26]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 8005b52:	8b7b      	ldrh	r3, [r7, #26]
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d115      	bne.n	8005b8a <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 8005b5e:	8bbb      	ldrh	r3, [r7, #28]
 8005b60:	08db      	lsrs	r3, r3, #3
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005b70:	2ba0      	cmp	r3, #160	; 0xa0
 8005b72:	d10a      	bne.n	8005b8a <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 8005b74:	8bbb      	ldrh	r3, [r7, #28]
 8005b76:	08db      	lsrs	r3, r3, #3
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d101      	bne.n	8005b8a <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 8005b86:	2301      	movs	r3, #1
 8005b88:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 8005b8a:	7e3b      	ldrb	r3, [r7, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <iso15693VICCDecode+0x13a>
 8005b90:	7e3b      	ldrb	r3, [r7, #24]
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d10f      	bne.n	8005bb6 <iso15693VICCDecode+0x15a>
 8005b96:	7e7b      	ldrb	r3, [r7, #25]
 8005b98:	f083 0301 	eor.w	r3, r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 8005ba2:	8b7a      	ldrh	r2, [r7, #26]
 8005ba4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d302      	bcc.n	8005bb0 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 8005baa:	231d      	movs	r3, #29
 8005bac:	83fb      	strh	r3, [r7, #30]
 8005bae:	e002      	b.n	8005bb6 <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 8005bb0:	8b7b      	ldrh	r3, [r7, #26]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 8005bb6:	8b7a      	ldrh	r2, [r7, #26]
 8005bb8:	893b      	ldrh	r3, [r7, #8]
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d20f      	bcs.n	8005be0 <iso15693VICCDecode+0x184>
 8005bc0:	8bfb      	ldrh	r3, [r7, #30]
 8005bc2:	2b1d      	cmp	r3, #29
 8005bc4:	d00c      	beq.n	8005be0 <iso15693VICCDecode+0x184>
 8005bc6:	7e7b      	ldrb	r3, [r7, #25]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 8005bcc:	8bbb      	ldrh	r3, [r7, #28]
 8005bce:	3302      	adds	r3, #2
 8005bd0:	83bb      	strh	r3, [r7, #28]
 8005bd2:	8bba      	ldrh	r2, [r7, #28]
 8005bd4:	897b      	ldrh	r3, [r7, #10]
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	3b02      	subs	r3, #2
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	f4ff af6d 	bcc.w	8005aba <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 8005be0:	8b7b      	ldrh	r3, [r7, #26]
 8005be2:	08db      	lsrs	r3, r3, #3
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	8b7a      	ldrh	r2, [r7, #26]
 8005bee:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 8005bf0:	8bfb      	ldrh	r3, [r7, #30]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <iso15693VICCDecode+0x19e>
    {
        return err;
 8005bf6:	8bfb      	ldrh	r3, [r7, #30]
 8005bf8:	e04a      	b.n	8005c90 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 8005bfa:	8b7b      	ldrh	r3, [r7, #26]
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 8005c06:	2315      	movs	r3, #21
 8005c08:	e042      	b.n	8005c90 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d93b      	bls.n	8005c8a <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 8005c12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <iso15693VICCDecode+0x1c4>
 8005c1a:	f24e 0012 	movw	r0, #57362	; 0xe012
 8005c1e:	e001      	b.n	8005c24 <iso15693VICCDecode+0x1c8>
 8005c20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	3b02      	subs	r3, #2
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	f7ff fd1e 	bl	8005670 <rfalCrcCalculateCcitt>
 8005c34:	4603      	mov	r3, r0
 8005c36:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8005c38:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005c3c:	f083 0301 	eor.w	r3, r3, #1
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <iso15693VICCDecode+0x1f2>
 8005c46:	8afb      	ldrh	r3, [r7, #22]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	e000      	b.n	8005c50 <iso15693VICCDecode+0x1f4>
 8005c4e:	8afb      	ldrh	r3, [r7, #22]
 8005c50:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 8005c52:	8afb      	ldrh	r3, [r7, #22]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c58:	8812      	ldrh	r2, [r2, #0]
 8005c5a:	3a02      	subs	r2, #2
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	440a      	add	r2, r1
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d10e      	bne.n	8005c84 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 8005c66:	8afb      	ldrh	r3, [r7, #22]
 8005c68:	0a1b      	lsrs	r3, r3, #8
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c70:	8812      	ldrh	r2, [r2, #0]
 8005c72:	3a01      	subs	r2, #1
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	440a      	add	r2, r1
 8005c78:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d102      	bne.n	8005c84 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	83fb      	strh	r3, [r7, #30]
 8005c82:	e004      	b.n	8005c8e <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 8005c84:	2315      	movs	r3, #21
 8005c86:	83fb      	strh	r3, [r7, #30]
 8005c88:	e001      	b.n	8005c8e <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 8005c8a:	2315      	movs	r3, #21
 8005c8c:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 8005c8e:	8bfb      	ldrh	r3, [r7, #30]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3720      	adds	r7, #32
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b089      	sub	sp, #36	; 0x24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607b      	str	r3, [r7, #4]
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	73fb      	strb	r3, [r7, #15]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 8005cb8:	89bb      	ldrh	r3, [r7, #12]
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d801      	bhi.n	8005cc2 <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e038      	b.n	8005d34 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	83bb      	strh	r3, [r7, #28]
 8005cca:	e02f      	b.n	8005d2c <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 8005ccc:	7ffb      	ldrb	r3, [r7, #31]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d81a      	bhi.n	8005d0c <iso15693PhyVCDCode1Of4+0x74>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <iso15693PhyVCDCode1Of4+0x44>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005ced 	.word	0x08005ced
 8005ce0:	08005cf5 	.word	0x08005cf5
 8005ce4:	08005cfd 	.word	0x08005cfd
 8005ce8:	08005d05 	.word	0x08005d05
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	701a      	strb	r2, [r3, #0]
                break;
 8005cf2:	e00c      	b.n	8005d0e <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2208      	movs	r2, #8
 8005cf8:	701a      	strb	r2, [r3, #0]
                break;
 8005cfa:	e008      	b.n	8005d0e <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	701a      	strb	r2, [r3, #0]
                break;
 8005d02:	e004      	b.n	8005d0e <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	2280      	movs	r2, #128	; 0x80
 8005d08:	701a      	strb	r2, [r3, #0]
                break;
 8005d0a:	e000      	b.n	8005d0e <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 8005d0c:	bf00      	nop
        }
        outbuf++;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	3301      	adds	r3, #1
 8005d12:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 8005d20:	7ffb      	ldrb	r3, [r7, #31]
 8005d22:	089b      	lsrs	r3, r3, #2
 8005d24:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 8005d26:	8bbb      	ldrh	r3, [r7, #28]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	83bb      	strh	r3, [r7, #28]
 8005d2c:	8bbb      	ldrh	r3, [r7, #28]
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d9cc      	bls.n	8005ccc <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 8005d32:	8afb      	ldrh	r3, [r7, #22]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3724      	adds	r7, #36	; 0x24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b089      	sub	sp, #36	; 0x24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	607b      	str	r3, [r7, #4]
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73fb      	strb	r3, [r7, #15]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 8005d60:	89bb      	ldrh	r3, [r7, #12]
 8005d62:	2b3f      	cmp	r3, #63	; 0x3f
 8005d64:	d801      	bhi.n	8005d6a <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e039      	b.n	8005dde <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 8005d6e:	2300      	movs	r3, #0
 8005d70:	83bb      	strh	r3, [r7, #28]
 8005d72:	e030      	b.n	8005dd6 <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 8005d74:	7ffb      	ldrb	r3, [r7, #31]
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d81a      	bhi.n	8005db0 <iso15693PhyVCDCode1Of256+0x70>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <iso15693PhyVCDCode1Of256+0x40>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005d91 	.word	0x08005d91
 8005d84:	08005d99 	.word	0x08005d99
 8005d88:	08005da1 	.word	0x08005da1
 8005d8c:	08005da9 	.word	0x08005da9
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2202      	movs	r2, #2
 8005d94:	701a      	strb	r2, [r3, #0]
                break;
 8005d96:	e00f      	b.n	8005db8 <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	701a      	strb	r2, [r3, #0]
                break;
 8005d9e:	e00b      	b.n	8005db8 <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2220      	movs	r2, #32
 8005da4:	701a      	strb	r2, [r3, #0]
                break;
 8005da6:	e007      	b.n	8005db8 <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2280      	movs	r2, #128	; 0x80
 8005dac:	701a      	strb	r2, [r3, #0]
                break;
 8005dae:	e003      	b.n	8005db8 <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2200      	movs	r2, #0
 8005db4:	701a      	strb	r2, [r3, #0]
                break;               
 8005db6:	bf00      	nop
        }
        outbuf++;
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 8005dca:	7ffb      	ldrb	r3, [r7, #31]
 8005dcc:	3b04      	subs	r3, #4
 8005dce:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 8005dd0:	8bbb      	ldrh	r3, [r7, #28]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	83bb      	strh	r3, [r7, #28]
 8005dd6:	8bbb      	ldrh	r3, [r7, #28]
 8005dd8:	2b3f      	cmp	r3, #63	; 0x3f
 8005dda:	d9cb      	bls.n	8005d74 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 8005ddc:	8afb      	ldrh	r3, [r7, #22]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3724      	adds	r7, #36	; 0x24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop

08005dec <rfalNfcvPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
    ReturnCode ret;
            
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 8005df2:	22ec      	movs	r2, #236	; 0xec
 8005df4:	21ec      	movs	r1, #236	; 0xec
 8005df6:	2007      	movs	r0, #7
 8005df8:	f000 fab8 	bl	800636c <rfalSetMode>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	80fb      	strh	r3, [r7, #6]
 8005e00:	88fb      	ldrh	r3, [r7, #6]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <rfalNfcvPollerInitialize+0x1e>
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	e00e      	b.n	8005e28 <rfalNfcvPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	f000 feda 	bl	8006bc4 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 8005e10:	4807      	ldr	r0, [pc, #28]	; (8005e30 <rfalNfcvPollerInitialize+0x44>)
 8005e12:	f000 ff23 	bl	8006c5c <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 8005e16:	f241 00d6 	movw	r0, #4310	; 0x10d6
 8005e1a:	f000 ff0b 	bl	8006c34 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8005e1e:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 8005e22:	f000 fef1 	bl	8006c08 <rfalSetFDTPoll>
    
    return ERR_NONE;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	000108d8 	.word	0x000108d8

08005e34 <rfalNfcvPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCheckPresence( rfalNfcvInventoryRes *invRes )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    
    /* INVENTORY_REQ with 1 slot and no Mask   Activity 2.0 (Candidate) 9.2.3.32 */
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	2100      	movs	r1, #0
 8005e46:	2020      	movs	r0, #32
 8005e48:	f000 f815 	bl	8005e76 <rfalNfcvPollerInventory>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	81fb      	strh	r3, [r7, #14]
    
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 8005e50:	89fb      	ldrh	r3, [r7, #14]
 8005e52:	2b1d      	cmp	r3, #29
 8005e54:	d008      	beq.n	8005e68 <rfalNfcvPollerCheckPresence+0x34>
 8005e56:	89fb      	ldrh	r3, [r7, #14]
 8005e58:	2b15      	cmp	r3, #21
 8005e5a:	d005      	beq.n	8005e68 <rfalNfcvPollerCheckPresence+0x34>
 8005e5c:	89fb      	ldrh	r3, [r7, #14]
 8005e5e:	2b09      	cmp	r3, #9
 8005e60:	d002      	beq.n	8005e68 <rfalNfcvPollerCheckPresence+0x34>
        (ret == ERR_FRAMING)      || (ret == ERR_PROTO)  )
 8005e62:	89fb      	ldrh	r3, [r7, #14]
 8005e64:	2b0b      	cmp	r3, #11
 8005e66:	d101      	bne.n	8005e6c <rfalNfcvPollerCheckPresence+0x38>
    {
        ret = ERR_NONE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	81fb      	strh	r3, [r7, #14]
    }
    
    return ret;
 8005e6c:	89fb      	ldrh	r3, [r7, #14]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <rfalNfcvPollerInventory>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b08c      	sub	sp, #48	; 0x30
 8005e7a:	af02      	add	r7, sp, #8
 8005e7c:	60ba      	str	r2, [r7, #8]
 8005e7e:	607b      	str	r3, [r7, #4]
 8005e80:	4603      	mov	r3, r0
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	460b      	mov	r3, r1
 8005e86:	73bb      	strb	r3, [r7, #14]
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d102      	bne.n	8005e94 <rfalNfcvPollerInventory+0x1e>
 8005e8e:	7bbb      	ldrb	r3, [r7, #14]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <rfalNfcvPollerInventory+0x24>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <rfalNfcvPollerInventory+0x28>
    {
        return ERR_PARAM;
 8005e9a:	2307      	movs	r3, #7
 8005e9c:	e04a      	b.n	8005f34 <rfalNfcvPollerInventory+0xbe>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	f043 0306 	orr.w	r3, r3, #6
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	763b      	strb	r3, [r7, #24]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	767b      	strb	r3, [r7, #25]
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 8005eac:	7bbb      	ldrb	r3, [r7, #14]
 8005eae:	7bfa      	ldrb	r2, [r7, #15]
 8005eb0:	2a20      	cmp	r2, #32
 8005eb2:	d101      	bne.n	8005eb8 <rfalNfcvPollerInventory+0x42>
 8005eb4:	2240      	movs	r2, #64	; 0x40
 8005eb6:	e000      	b.n	8005eba <rfalNfcvPollerInventory+0x44>
 8005eb8:	223c      	movs	r2, #60	; 0x3c
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d806      	bhi.n	8005ecc <rfalNfcvPollerInventory+0x56>
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d101      	bne.n	8005ec8 <rfalNfcvPollerInventory+0x52>
 8005ec4:	2340      	movs	r3, #64	; 0x40
 8005ec6:	e002      	b.n	8005ece <rfalNfcvPollerInventory+0x58>
 8005ec8:	233c      	movs	r3, #60	; 0x3c
 8005eca:	e000      	b.n	8005ece <rfalNfcvPollerInventory+0x58>
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	76bb      	strb	r3, [r7, #26]
    
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
 8005ed0:	7ebb      	ldrb	r3, [r7, #26]
 8005ed2:	3307      	adds	r3, #7
 8005ed4:	08db      	lsrs	r3, r3, #3
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00b      	beq.n	8005ef4 <rfalNfcvPollerInventory+0x7e>
    {
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 8005edc:	7ebb      	ldrb	r3, [r7, #26]
 8005ede:	3307      	adds	r3, #7
 8005ee0:	08db      	lsrs	r3, r3, #3
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f107 0318 	add.w	r3, r7, #24
 8005eea:	3303      	adds	r3, #3
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f004 fbd8 	bl	800a6a4 <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 8005ef4:	7ebb      	ldrb	r3, [r7, #26]
 8005ef6:	3307      	adds	r3, #7
 8005ef8:	08db      	lsrs	r3, r3, #3
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	3303      	adds	r3, #3
 8005efe:	b2d9      	uxtb	r1, r3
 8005f00:	f107 0018 	add.w	r0, r7, #24
 8005f04:	f107 0316 	add.w	r3, r7, #22
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	230c      	movs	r3, #12
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	f002 f87d 	bl	800800c <rfalISO15693TransceiveAnticollisionFrame>
 8005f12:	4603      	mov	r3, r0
 8005f14:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <rfalNfcvPollerInventory+0xac>
    {
        *rcvdLen = rxLen;
 8005f1c:	8afa      	ldrh	r2, [r7, #22]
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	801a      	strh	r2, [r3, #0]
    }
    
    if( ret == ERR_NONE )
 8005f22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <rfalNfcvPollerInventory+0xbc>
    {
        if( rxLen != rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 8005f28:	8afb      	ldrh	r3, [r7, #22]
 8005f2a:	2b60      	cmp	r3, #96	; 0x60
 8005f2c:	d001      	beq.n	8005f32 <rfalNfcvPollerInventory+0xbc>
        {
            return ERR_PROTO;
 8005f2e:	230b      	movs	r3, #11
 8005f30:	e000      	b.n	8005f34 <rfalNfcvPollerInventory+0xbe>
        }
    }
    
    return ret;
 8005f32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3728      	adds	r7, #40	; 0x28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b0ae      	sub	sp, #184	; 0xb8
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	60ba      	str	r2, [r7, #8]
 8005f44:	607b      	str	r3, [r7, #4]
 8005f46:	4603      	mov	r3, r0
 8005f48:	73fb      	strb	r3, [r7, #15]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	73bb      	strb	r3, [r7, #14]
    uint8_t           colPos;
    bool              colPending;
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <rfalNfcvPollerCollisionResolution+0x1e>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <rfalNfcvPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8005f5a:	2307      	movs	r3, #7
 8005f5c:	e190      	b.n	8006280 <rfalNfcvPollerCollisionResolution+0x344>
    }

    /* Initialize parameters */
    *devCnt = 0;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]
    colIt         = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    colCnt        = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    colPending    = false;
 8005f70:	2300      	movs	r3, #0
 8005f72:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
    ST_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 8005f76:	f107 0314 	add.w	r3, r7, #20
 8005f7a:	2290      	movs	r2, #144	; 0x90
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f004 fb9b 	bl	800a6ba <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 8005f84:	7bbb      	ldrb	r3, [r7, #14]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <rfalNfcvPollerCollisionResolution+0x64>
    {
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 8005f8a:	7bba      	ldrb	r2, [r7, #14]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	461a      	mov	r2, r3
 8005f98:	2100      	movs	r1, #0
 8005f9a:	68b8      	ldr	r0, [r7, #8]
 8005f9c:	f004 fb8d 	bl	800a6ba <memset>
    }

    NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d12c      	bne.n	8006000 <rfalNfcvPollerCollisionResolution+0xc4>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.0  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	2020      	movs	r0, #32
 8005fb4:	f7ff ff5f 	bl	8005e76 <rfalNfcvPollerInventory>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

        if( ret == ERR_TIMEOUT )  /* Exit if no device found     Activity 2.0  9.3.7.2 (Symbol 1)  */
 8005fbe:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d101      	bne.n	8005fca <rfalNfcvPollerCollisionResolution+0x8e>
        {
            return ERR_NONE;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e15a      	b.n	8006280 <rfalNfcvPollerCollisionResolution+0x344>
        }
        if( ret == ERR_NONE )     /* Device found without transmission error/collision    Activity 2.0  9.3.7.3 (Symbol 2)  */
 8005fca:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d107      	bne.n	8005fe2 <rfalNfcvPollerCollisionResolution+0xa6>
        {
            (*devCnt)++;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e14e      	b.n	8006280 <rfalNfcvPollerCollisionResolution+0x344>
        }

        /* A Collision has been identified  Activity 2.0  9.3.7.2  (Symbol 3) */
        colPending = true;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        /* Check if the Collision Resolution is set to perform only Collision detection   Activity 2.0  9.3.7.5 (Symbol 4)*/
        if( devLimit == 0U )
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <rfalNfcvPollerCollisionResolution+0xbc>
        {
            return ERR_RF_COLLISION;
 8005ff4:	231d      	movs	r3, #29
 8005ff6:	e143      	b.n	8006280 <rfalNfcvPollerCollisionResolution+0x344>
        }

        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 8005ff8:	2004      	movs	r0, #4
 8005ffa:	f7fb f8d1 	bl	80011a0 <HAL_Delay>
 8005ffe:	e005      	b.n	800600c <rfalNfcvPollerCollisionResolution+0xd0>
        /*******************************************************************************/
    }
    else
    { 
        /* Advance to 16 slots below without mask. Will give a good chance to identify multiple cards */
        colPending = true;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    
    /* Execute until all collisions are resolved Activity 2.0  9.3.7.16  (Symbol 17) */
    do
    {
        /* Activity 2.0  9.3.7.5  (Symbol 6) */
        colPending = false;
 800600c:	2300      	movs	r3, #0
 800600e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        slotNum    = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
        
        do
        {
            if( slotNum == 0U )
 8006018:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800601c:	2b00      	cmp	r3, #0
 800601e:	d12a      	bne.n	8006076 <rfalNfcvPollerCollisionResolution+0x13a>
            {
                /* Send INVENTORY_REQ with 16 slots   Activity 2.0  9.3.7.7  (Symbol 8) */
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 8006020:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8006024:	4613      	mov	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800602e:	4413      	add	r3, r2
 8006030:	3b9c      	subs	r3, #156	; 0x9c
 8006032:	7818      	ldrb	r0, [r3, #0]
 8006034:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8006038:	f107 0114 	add.w	r1, r7, #20
 800603c:	4613      	mov	r3, r2
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	4413      	add	r3, r2
 8006042:	440b      	add	r3, r1
 8006044:	1c59      	adds	r1, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	4613      	mov	r3, r2
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	4413      	add	r3, r2
 800605a:	461a      	mov	r2, r3
 800605c:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	4613      	mov	r3, r2
 8006064:	460a      	mov	r2, r1
 8006066:	4601      	mov	r1, r0
 8006068:	2000      	movs	r0, #0
 800606a:	f7ff ff04 	bl	8005e76 <rfalNfcvPollerInventory>
 800606e:	4603      	mov	r3, r0
 8006070:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8006074:	e013      	b.n	800609e <rfalNfcvPollerCollisionResolution+0x162>
            }
            else
            {
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	4613      	mov	r3, r2
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	4413      	add	r3, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 8006090:	461a      	mov	r2, r3
 8006092:	210c      	movs	r1, #12
 8006094:	f002 f872 	bl	800817c <rfalISO15693TransceiveEOFAnticollision>
 8006098:	4603      	mov	r3, r0
 800609a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            }
            slotNum++;
 800609e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80060a2:	3301      	adds	r3, #1
 80060a4:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            
            /*******************************************************************************/
            if( ret != ERR_TIMEOUT )
 80060a8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	f000 80cb 	beq.w	8006248 <rfalNfcvPollerCollisionResolution+0x30c>
            {
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 80060b2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80060b6:	2b5f      	cmp	r3, #95	; 0x5f
 80060b8:	d802      	bhi.n	80060c0 <rfalNfcvPollerCollisionResolution+0x184>
                { /* If only a partial frame was received make sure the FDT_V_INVENT_NORES is fulfilled */
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 80060ba:	2004      	movs	r0, #4
 80060bc:	f7fb f870 	bl	80011a0 <HAL_Delay>
                }

                if( ret == ERR_NONE )
 80060c0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10b      	bne.n	80060e0 <rfalNfcvPollerCollisionResolution+0x1a4>
                {
                    /* Check if the device found is already on the list and its response is a valid INVENTORY_RES */
                    if( rcvdLen == rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 80060c8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80060cc:	2b60      	cmp	r3, #96	; 0x60
 80060ce:	f040 80be 	bne.w	800624e <rfalNfcvPollerCollisionResolution+0x312>
                    {
                        /* Activity 2.0  9.3.7.15  (Symbol 11) */
                        (*devCnt)++;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	3301      	adds	r3, #1
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	e0b6      	b.n	800624e <rfalNfcvPollerCollisionResolution+0x312>
                    }
                }
                else /* Treat everything else as collision */
                {
                    /* Activity 2.0  9.3.7.15  (Symbol 16) */
                    colPending = true;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    

                    /*******************************************************************************/
                    /* Ensure that this collision still fits on the container */
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 80060e6:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80060ea:	2b0f      	cmp	r3, #15
 80060ec:	f200 80af 	bhi.w	800624e <rfalNfcvPollerCollisionResolution+0x312>
                    {
                        /* Store this collision on the container to be resolved later */
                        /* Activity 2.0  9.3.7.15  (Symbol 16): add the collision information
                         * (MASK_VAL + SN) to the list containing the collision information */
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 80060f0:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80060f4:	f107 0114 	add.w	r1, r7, #20
 80060f8:	4613      	mov	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	4413      	add	r3, r2
 80060fe:	440b      	add	r3, r1
 8006100:	1c58      	adds	r0, r3, #1
 8006102:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8006106:	f107 0114 	add.w	r1, r7, #20
 800610a:	4613      	mov	r3, r2
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	4413      	add	r3, r2
 8006110:	440b      	add	r3, r1
 8006112:	3301      	adds	r3, #1
 8006114:	2208      	movs	r2, #8
 8006116:	4619      	mov	r1, r3
 8006118:	f004 fac4 	bl	800a6a4 <memcpy>
                        colPos = colFound[colIt].maskLen;
 800611c:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8006120:	4613      	mov	r3, r2
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	4413      	add	r3, r2
 8006126:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800612a:	4413      	add	r3, r2
 800612c:	3b9c      	subs	r3, #156	; 0x9c
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 8006134:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8006138:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800613c:	08db      	lsrs	r3, r3, #3
 800613e:	b2d8      	uxtb	r0, r3
 8006140:	4601      	mov	r1, r0
 8006142:	4613      	mov	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	4413      	add	r3, r2
 8006148:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800614c:	4413      	add	r3, r2
 800614e:	440b      	add	r3, r1
 8006150:	3b9b      	subs	r3, #155	; 0x9b
 8006152:	7819      	ldrb	r1, [r3, #0]
 8006154:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	2201      	movs	r2, #1
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	b2db      	uxtb	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800616c:	400b      	ands	r3, r1
 800616e:	b2d9      	uxtb	r1, r3
 8006170:	4613      	mov	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	4413      	add	r3, r2
 8006176:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800617a:	4413      	add	r3, r2
 800617c:	4403      	add	r3, r0
 800617e:	3b9b      	subs	r3, #155	; 0x9b
 8006180:	460a      	mov	r2, r1
 8006182:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 8006184:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8006188:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800618c:	08db      	lsrs	r3, r3, #3
 800618e:	b2d8      	uxtb	r0, r3
 8006190:	4601      	mov	r1, r0
 8006192:	4613      	mov	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4413      	add	r3, r2
 8006198:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800619c:	4413      	add	r3, r2
 800619e:	440b      	add	r3, r1
 80061a0:	3b9b      	subs	r3, #155	; 0x9b
 80061a2:	7819      	ldrb	r1, [r3, #0]
 80061a4:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80061a8:	1e5a      	subs	r2, r3, #1
 80061aa:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80061bc:	430b      	orrs	r3, r1
 80061be:	b2d9      	uxtb	r1, r3
 80061c0:	4613      	mov	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	4413      	add	r3, r2
 80061c6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80061ca:	4413      	add	r3, r2
 80061cc:	4403      	add	r3, r0
 80061ce:	3b9b      	subs	r3, #155	; 0x9b
 80061d0:	460a      	mov	r2, r1
 80061d2:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 80061d4:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80061d8:	1e5a      	subs	r2, r3, #1
 80061da:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	f1c3 0308 	rsb	r3, r3, #8
 80061e6:	fa22 f003 	lsr.w	r0, r2, r3
 80061ea:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80061ee:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80061f2:	08db      	lsrs	r3, r3, #3
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	1c59      	adds	r1, r3, #1
 80061f8:	b2c0      	uxtb	r0, r0
 80061fa:	4613      	mov	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	4413      	add	r3, r2
 8006200:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006204:	4413      	add	r3, r2
 8006206:	440b      	add	r3, r1
 8006208:	3b9b      	subs	r3, #155	; 0x9b
 800620a:	4602      	mov	r2, r0
 800620c:	701a      	strb	r2, [r3, #0]

                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 800620e:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8006212:	4613      	mov	r3, r2
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	4413      	add	r3, r2
 8006218:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800621c:	4413      	add	r3, r2
 800621e:	3b9c      	subs	r3, #156	; 0x9c
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8006226:	3304      	adds	r3, #4
 8006228:	b2d9      	uxtb	r1, r3
 800622a:	4613      	mov	r3, r2
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	4413      	add	r3, r2
 8006230:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006234:	4413      	add	r3, r2
 8006236:	3b9c      	subs	r3, #156	; 0x9c
 8006238:	460a      	mov	r2, r1
 800623a:	701a      	strb	r2, [r3, #0]

                        colCnt++;
 800623c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8006240:	3301      	adds	r3, #1
 8006242:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8006246:	e002      	b.n	800624e <rfalNfcvPollerCollisionResolution+0x312>
                }
            }
            else 
            { 
                /* Timeout */
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 8006248:	2004      	movs	r0, #4
 800624a:	f7fa ffa9 	bl	80011a0 <HAL_Delay>
            }
            
            /* Check if devices found have reached device limit   Activity 2.0  9.3.7.15  (Symbol 16) */
            if( *devCnt >= devLimit )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	7bba      	ldrb	r2, [r7, #14]
 8006254:	429a      	cmp	r2, r3
 8006256:	d801      	bhi.n	800625c <rfalNfcvPollerCollisionResolution+0x320>
            {
                return ERR_NONE;
 8006258:	2300      	movs	r3, #0
 800625a:	e011      	b.n	8006280 <rfalNfcvPollerCollisionResolution+0x344>
            }
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 800625c:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8006260:	2b0f      	cmp	r3, #15
 8006262:	f67f aed9 	bls.w	8006018 <rfalNfcvPollerCollisionResolution+0xdc>
        colIt++;
 8006266:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800626a:	3301      	adds	r3, #1
 800626c:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    } while( colIt < colCnt );                     /* Collisions found loop */
 8006270:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8006274:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8006278:	429a      	cmp	r2, r3
 800627a:	f4ff aec7 	bcc.w	800600c <rfalNfcvPollerCollisionResolution+0xd0>
    
    return ERR_NONE;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	37b0      	adds	r7, #176	; 0xb0
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <rfalInitialize>:
*/


/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    EXIT_ON_ERR( err, st25r3916Initialize() );
 800628e:	f001 fffb 	bl	8008288 <st25r3916Initialize>
 8006292:	4603      	mov	r3, r0
 8006294:	80fb      	strh	r3, [r7, #6]
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <rfalInitialize+0x18>
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	e043      	b.n	8006328 <rfalInitialize+0xa0>
    
    st25r3916ClearInterrupts();
 80062a0:	f002 ffc2 	bl	8009228 <st25r3916ClearInterrupts>
    
    /* Disable any previous observation mode */
    rfalST25R3916ObsModeDisable();
 80062a4:	2140      	movs	r1, #64	; 0x40
 80062a6:	2001      	movs	r0, #1
 80062a8:	f002 fcd7 	bl	8008c5a <st25r3916WriteTestRegister>
    
    /*******************************************************************************/    
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 80062ac:	2000      	movs	r0, #0
 80062ae:	f7ff f8d1 	bl	8005454 <rfalSetAnalogConfig>
    

    /*******************************************************************************/
    /* Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 80062b2:	2203      	movs	r2, #3
 80062b4:	2103      	movs	r1, #3
 80062b6:	2002      	movs	r0, #2
 80062b8:	f002 fd58 	bl	8008d6c <st25r3916ChangeRegisterBits>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 80062bc:	f001 fe48 	bl	8007f50 <rfalFIFOStatusClear>
    
    
    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 80062c0:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <rfalInitialize+0xa8>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 80062c6:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <rfalInitialize+0xa8>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 80062cc:	4b18      	ldr	r3, [pc, #96]	; (8006330 <rfalInitialize+0xa8>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	711a      	strb	r2, [r3, #4]
    
    /* Set RFAL default configs */
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 80062d2:	4b17      	ldr	r3, [pc, #92]	; (8006330 <rfalInitialize+0xa8>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 80062d8:	4b15      	ldr	r3, [pc, #84]	; (8006330 <rfalInitialize+0xa8>)
 80062da:	2200      	movs	r2, #0
 80062dc:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 80062de:	4b14      	ldr	r3, [pc, #80]	; (8006330 <rfalInitialize+0xa8>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	71da      	strb	r2, [r3, #7]
    
    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 80062e4:	4b12      	ldr	r3, [pc, #72]	; (8006330 <rfalInitialize+0xa8>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 80062ea:	4b11      	ldr	r3, [pc, #68]	; (8006330 <rfalInitialize+0xa8>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	751a      	strb	r2, [r3, #20]
    
    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 80062f0:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <rfalInitialize+0xa8>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 80062f6:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <rfalInitialize+0xa8>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 80062fc:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <rfalInitialize+0xa8>)
 80062fe:	2200      	movs	r2, #0
 8006300:	609a      	str	r2, [r3, #8]
    
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 8006302:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <rfalInitialize+0xa8>)
 8006304:	2200      	movs	r2, #0
 8006306:	63da      	str	r2, [r3, #60]	; 0x3c
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 8006308:	4b09      	ldr	r3, [pc, #36]	; (8006330 <rfalInitialize+0xa8>)
 800630a:	2200      	movs	r2, #0
 800630c:	645a      	str	r2, [r3, #68]	; 0x44
    
    gRFAL.callbacks.preTxRx  = NULL;
 800630e:	4b08      	ldr	r3, [pc, #32]	; (8006330 <rfalInitialize+0xa8>)
 8006310:	2200      	movs	r2, #0
 8006312:	649a      	str	r2, [r3, #72]	; 0x48
    gRFAL.callbacks.postTxRx = NULL;
 8006314:	4b06      	ldr	r3, [pc, #24]	; (8006330 <rfalInitialize+0xa8>)
 8006316:	2200      	movs	r2, #0
 8006318:	64da      	str	r2, [r3, #76]	; 0x4c
    
#if RFAL_FEATURE_NFCV    
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 800631a:	4b05      	ldr	r3, [pc, #20]	; (8006330 <rfalInitialize+0xa8>)
 800631c:	2200      	movs	r2, #0
 800631e:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    
    
    /*******************************************************************************/    
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 8006322:	f000 f807 	bl	8006334 <rfalCalibrate>
    
    return ERR_NONE;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20000598 	.word	0x20000598

08006334 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800633a:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <rfalCalibrate+0x34>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 8006342:	2321      	movs	r3, #33	; 0x21
 8006344:	e00c      	b.n	8006360 <rfalCalibrate+0x2c>
    /*******************************************************************************/
    /* Perform ST25R3916 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3916CheckReg( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 8006346:	2200      	movs	r2, #0
 8006348:	2180      	movs	r1, #128	; 0x80
 800634a:	202c      	movs	r0, #44	; 0x2c
 800634c:	f002 fd92 	bl	8008e74 <st25r3916CheckReg>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3916AdjustRegulators( &resValue );
 8006356:	1dbb      	adds	r3, r7, #6
 8006358:	4618      	mov	r0, r3
 800635a:	f002 f839 	bl	80083d0 <st25r3916AdjustRegulators>
    }
    
    return ERR_NONE;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20000598 	.word	0x20000598

0800636c <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	4603      	mov	r3, r0
 8006374:	71fb      	strb	r3, [r7, #7]
 8006376:	460b      	mov	r3, r1
 8006378:	71bb      	strb	r3, [r7, #6]
 800637a:	4613      	mov	r3, r2
 800637c:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800637e:	4b99      	ldr	r3, [pc, #612]	; (80065e4 <rfalSetMode+0x278>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 8006386:	2321      	movs	r3, #33	; 0x21
 8006388:	e127      	b.n	80065da <rfalSetMode+0x26e>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 800638a:	79bb      	ldrb	r3, [r7, #6]
 800638c:	2bff      	cmp	r3, #255	; 0xff
 800638e:	d002      	beq.n	8006396 <rfalSetMode+0x2a>
 8006390:	797b      	ldrb	r3, [r7, #5]
 8006392:	2bff      	cmp	r3, #255	; 0xff
 8006394:	d101      	bne.n	800639a <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 8006396:	2307      	movs	r3, #7
 8006398:	e11f      	b.n	80065da <rfalSetMode+0x26e>
    }
   
    switch( mode )
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	3b01      	subs	r3, #1
 800639e:	2b0c      	cmp	r3, #12
 80063a0:	f200 8107 	bhi.w	80065b2 <rfalSetMode+0x246>
 80063a4:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <rfalSetMode+0x40>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063e1 	.word	0x080063e1
 80063b0:	08006403 	.word	0x08006403
 80063b4:	08006425 	.word	0x08006425
 80063b8:	0800645b 	.word	0x0800645b
 80063bc:	08006491 	.word	0x08006491
 80063c0:	080064c7 	.word	0x080064c7
 80063c4:	080064e9 	.word	0x080064e9
 80063c8:	080064e9 	.word	0x080064e9
 80063cc:	08006503 	.word	0x08006503
 80063d0:	0800656b 	.word	0x0800656b
 80063d4:	080065af 	.word	0x080065af
 80063d8:	0800658d 	.word	0x0800658d
 80063dc:	08006537 	.word	0x08006537
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 80063e0:	2104      	movs	r1, #4
 80063e2:	2002      	movs	r0, #2
 80063e4:	f002 fc5e 	bl	8008ca4 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a );
 80063e8:	2108      	movs	r1, #8
 80063ea:	2003      	movs	r0, #3
 80063ec:	f002 fb70 	bl	8008ad0 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80063f0:	f240 1001 	movw	r0, #257	; 0x101
 80063f4:	f7ff f82e 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80063f8:	f44f 7081 	mov.w	r0, #258	; 0x102
 80063fc:	f7ff f82a 	bl	8005454 <rfalSetAnalogConfig>
            break;
 8006400:	e0d9      	b.n	80065b6 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8006402:	2104      	movs	r1, #4
 8006404:	2002      	movs	r0, #2
 8006406:	f002 fc4d 	bl	8008ca4 <st25r3916ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 800640a:	2120      	movs	r1, #32
 800640c:	2003      	movs	r0, #3
 800640e:	f002 fb5f 	bl	8008ad0 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8006412:	f240 1001 	movw	r0, #257	; 0x101
 8006416:	f7ff f81d 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800641a:	f44f 7081 	mov.w	r0, #258	; 0x102
 800641e:	f7ff f819 	bl	8005454 <rfalSetAnalogConfig>
            break;
 8006422:	e0c8      	b.n	80065b6 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8006424:	2104      	movs	r1, #4
 8006426:	2002      	movs	r0, #2
 8006428:	f002 fc3c 	bl	8008ca4 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800642c:	2110      	movs	r1, #16
 800642e:	2003      	movs	r0, #3
 8006430:	f002 fb4e 	bl	8008ad0 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 8006434:	2200      	movs	r2, #0
 8006436:	21fc      	movs	r1, #252	; 0xfc
 8006438:	2006      	movs	r0, #6
 800643a:	f002 fc97 	bl	8008d6c <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800643e:	2200      	movs	r2, #0
 8006440:	21f0      	movs	r1, #240	; 0xf0
 8006442:	2007      	movs	r0, #7
 8006444:	f002 fc92 	bl	8008d6c <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8006448:	f240 2001 	movw	r0, #513	; 0x201
 800644c:	f7ff f802 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8006450:	f240 2002 	movw	r0, #514	; 0x202
 8006454:	f7fe fffe 	bl	8005454 <rfalSetAnalogConfig>
            break;
 8006458:	e0ad      	b.n	80065b6 <rfalSetMode+0x24a>
            
        /*******************************************************************************/    
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800645a:	2104      	movs	r1, #4
 800645c:	2002      	movs	r0, #2
 800645e:	f002 fc21 	bl	8008ca4 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 8006462:	2110      	movs	r1, #16
 8006464:	2003      	movs	r0, #3
 8006466:	f002 fb33 	bl	8008ad0 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800646a:	2200      	movs	r2, #0
 800646c:	21fc      	movs	r1, #252	; 0xfc
 800646e:	2006      	movs	r0, #6
 8006470:	f002 fc7c 	bl	8008d6c <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 8006474:	2220      	movs	r2, #32
 8006476:	21f0      	movs	r1, #240	; 0xf0
 8006478:	2007      	movs	r0, #7
 800647a:	f002 fc77 	bl	8008d6c <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof  ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800647e:	f240 2001 	movw	r0, #513	; 0x201
 8006482:	f7fe ffe7 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8006486:	f240 2002 	movw	r0, #514	; 0x202
 800648a:	f7fe ffe3 	bl	8005454 <rfalSetAnalogConfig>
            break;
 800648e:	e092      	b.n	80065b6 <rfalSetMode+0x24a>
            
            /*******************************************************************************/    
            case RFAL_MODE_POLL_B_CTS:
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8006490:	2104      	movs	r1, #4
 8006492:	2002      	movs	r0, #2
 8006494:	f002 fc06 	bl	8008ca4 <st25r3916ClrRegisterBits>
                
                /* Enable ISO14443B mode */
                st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 8006498:	2110      	movs	r1, #16
 800649a:	2003      	movs	r0, #3
 800649c:	f002 fb18 	bl	8008ad0 <st25r3916WriteRegister>
                
                /* Set the EGT, SOF, EOF and EOF */
                st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 80064a0:	2200      	movs	r2, #0
 80064a2:	21fc      	movs	r1, #252	; 0xfc
 80064a4:	2006      	movs	r0, #6
 80064a6:	f002 fc61 	bl	8008d6c <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                          ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                            
                /* Set the minimum TR1, clear SOF, EOF and EOF12 */
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 80064aa:	2230      	movs	r2, #48	; 0x30
 80064ac:	21f0      	movs	r1, #240	; 0xf0
 80064ae:	2007      	movs	r0, #7
 80064b0:	f002 fc5c 	bl	8008d6c <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                          (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof ) );


                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80064b4:	f240 2001 	movw	r0, #513	; 0x201
 80064b8:	f7fe ffcc 	bl	8005454 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80064bc:	f240 2002 	movw	r0, #514	; 0x202
 80064c0:	f7fe ffc8 	bl	8005454 <rfalSetAnalogConfig>
                break;
 80064c4:	e077      	b.n	80065b6 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 80064c6:	2104      	movs	r1, #4
 80064c8:	2002      	movs	r0, #2
 80064ca:	f002 fbeb 	bl	8008ca4 <st25r3916ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_felica );
 80064ce:	2118      	movs	r1, #24
 80064d0:	2003      	movs	r0, #3
 80064d2:	f002 fafd 	bl	8008ad0 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80064d6:	f240 4001 	movw	r0, #1025	; 0x401
 80064da:	f7fe ffbb 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80064de:	f240 4002 	movw	r0, #1026	; 0x402
 80064e2:	f7fe ffb7 	bl	8005454 <rfalSetAnalogConfig>
            break;
 80064e6:	e066      	b.n	80065b6 <rfalSetMode+0x24a>
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 80064e8:	2104      	movs	r1, #4
 80064ea:	2002      	movs	r0, #2
 80064ec:	f002 fbda 	bl	8008ca4 <st25r3916ClrRegisterBits>
                
                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80064f0:	f241 0001 	movw	r0, #4097	; 0x1001
 80064f4:	f7fe ffae 	bl	8005454 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80064f8:	f241 0002 	movw	r0, #4098	; 0x1002
 80064fc:	f7fe ffaa 	bl	8005454 <rfalSetAnalogConfig>
                break;
 8006500:	e059      	b.n	80065b6 <rfalSetMode+0x24a>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication Initiator mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_eof) );
 8006502:	2102      	movs	r1, #2
 8006504:	2003      	movs	r0, #3
 8006506:	f002 fae3 	bl	8008ad0 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */ 
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800650a:	2200      	movs	r2, #0
 800650c:	2104      	movs	r1, #4
 800650e:	2012      	movs	r0, #18
 8006510:	f002 fc2c 	bl	8008d6c <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 8006514:	2160      	movs	r1, #96	; 0x60
 8006516:	2040      	movs	r0, #64	; 0x40
 8006518:	f002 f8d1 	bl	80086be <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800651c:	2180      	movs	r1, #128	; 0x80
 800651e:	2015      	movs	r0, #21
 8006520:	f002 fad6 	bl	8008ad0 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8006524:	f640 0001 	movw	r0, #2049	; 0x801
 8006528:	f7fe ff94 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800652c:	f640 0002 	movw	r0, #2050	; 0x802
 8006530:	f7fe ff90 	bl	8005454 <rfalSetAnalogConfig>
            break;
 8006534:	e03f      	b.n	80065b6 <rfalSetMode+0x24a>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication Target mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 8006536:	21ba      	movs	r1, #186	; 0xba
 8006538:	2003      	movs	r0, #3
 800653a:	f002 fac9 	bl	8008ad0 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800653e:	2200      	movs	r2, #0
 8006540:	2104      	movs	r1, #4
 8006542:	2012      	movs	r0, #18
 8006544:	f002 fc12 	bl	8008d6c <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 8006548:	2160      	movs	r1, #96	; 0x60
 800654a:	2040      	movs	r0, #64	; 0x40
 800654c:	f002 f8b7 	bl	80086be <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 8006550:	2180      	movs	r1, #128	; 0x80
 8006552:	2015      	movs	r0, #21
 8006554:	f002 fabc 	bl	8008ad0 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8006558:	f648 0001 	movw	r0, #34817	; 0x8801
 800655c:	f7fe ff7a 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8006560:	f648 0002 	movw	r0, #34818	; 0x8802
 8006564:	f7fe ff76 	bl	8005454 <rfalSetAnalogConfig>
            break;
 8006568:	e025      	b.n	80065b6 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:

            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800656a:	2104      	movs	r1, #4
 800656c:	2002      	movs	r0, #2
 800656e:	f002 fb99 	bl	8008ca4 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-A mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfca | ST25R3916_REG_MODE_nfc_ar_off) );
 8006572:	2188      	movs	r1, #136	; 0x88
 8006574:	2003      	movs	r0, #3
 8006576:	f002 faab 	bl	8008ad0 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800657a:	f248 1001 	movw	r0, #33025	; 0x8101
 800657e:	f7fe ff69 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8006582:	f248 1002 	movw	r0, #33026	; 0x8102
 8006586:	f7fe ff65 	bl	8005454 <rfalSetAnalogConfig>
            break;
 800658a:	e014      	b.n	80065b6 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800658c:	2104      	movs	r1, #4
 800658e:	2002      	movs	r0, #2
 8006590:	f002 fb88 	bl	8008ca4 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-F mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfcf | ST25R3916_REG_MODE_nfc_ar_off) );
 8006594:	21a0      	movs	r1, #160	; 0xa0
 8006596:	2003      	movs	r0, #3
 8006598:	f002 fa9a 	bl	8008ad0 <st25r3916WriteRegister>
            
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800659c:	f248 4001 	movw	r0, #33793	; 0x8401
 80065a0:	f7fe ff58 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80065a4:	f248 4002 	movw	r0, #33794	; 0x8402
 80065a8:	f7fe ff54 	bl	8005454 <rfalSetAnalogConfig>
            break;
 80065ac:	e003      	b.n	80065b6 <rfalSetMode+0x24a>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
            return ERR_NOTSUPP;
 80065ae:	2318      	movs	r3, #24
 80065b0:	e013      	b.n	80065da <rfalSetMode+0x26e>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 80065b2:	230f      	movs	r3, #15
 80065b4:	e011      	b.n	80065da <rfalSetMode+0x26e>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <rfalSetMode+0x278>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	bf38      	it	cc
 80065be:	2302      	movcc	r3, #2
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <rfalSetMode+0x278>)
 80065c4:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 80065c6:	4a07      	ldr	r2, [pc, #28]	; (80065e4 <rfalSetMode+0x278>)
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 80065cc:	797a      	ldrb	r2, [r7, #5]
 80065ce:	79bb      	ldrb	r3, [r7, #6]
 80065d0:	4611      	mov	r1, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 f808 	bl	80065e8 <rfalSetBitRate>
 80065d8:	4603      	mov	r3, r0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000598 	.word	0x20000598

080065e8 <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	460a      	mov	r2, r1
 80065f2:	71fb      	strb	r3, [r7, #7]
 80065f4:	4613      	mov	r3, r2
 80065f6:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 80065f8:	4ba0      	ldr	r3, [pc, #640]	; (800687c <rfalSetBitRate+0x294>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 8006600:	2321      	movs	r3, #33	; 0x21
 8006602:	e2d2      	b.n	8006baa <rfalSetBitRate+0x5c2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 8006604:	79fb      	ldrb	r3, [r7, #7]
 8006606:	2bff      	cmp	r3, #255	; 0xff
 8006608:	d102      	bne.n	8006610 <rfalSetBitRate+0x28>
 800660a:	4b9c      	ldr	r3, [pc, #624]	; (800687c <rfalSetBitRate+0x294>)
 800660c:	789b      	ldrb	r3, [r3, #2]
 800660e:	e000      	b.n	8006612 <rfalSetBitRate+0x2a>
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	4a9a      	ldr	r2, [pc, #616]	; (800687c <rfalSetBitRate+0x294>)
 8006614:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 8006616:	79bb      	ldrb	r3, [r7, #6]
 8006618:	2bff      	cmp	r3, #255	; 0xff
 800661a:	d102      	bne.n	8006622 <rfalSetBitRate+0x3a>
 800661c:	4b97      	ldr	r3, [pc, #604]	; (800687c <rfalSetBitRate+0x294>)
 800661e:	78db      	ldrb	r3, [r3, #3]
 8006620:	e000      	b.n	8006624 <rfalSetBitRate+0x3c>
 8006622:	79bb      	ldrb	r3, [r7, #6]
 8006624:	4a95      	ldr	r2, [pc, #596]	; (800687c <rfalSetBitRate+0x294>)
 8006626:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 8006628:	4b94      	ldr	r3, [pc, #592]	; (800687c <rfalSetBitRate+0x294>)
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b07      	cmp	r3, #7
 800662e:	d012      	beq.n	8006656 <rfalSetBitRate+0x6e>
 8006630:	4b92      	ldr	r3, [pc, #584]	; (800687c <rfalSetBitRate+0x294>)
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	2b08      	cmp	r3, #8
 8006636:	d00e      	beq.n	8006656 <rfalSetBitRate+0x6e>
    {
        /* Set bit rate register */
        EXIT_ON_ERR( ret, st25r3916SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 8006638:	4b90      	ldr	r3, [pc, #576]	; (800687c <rfalSetBitRate+0x294>)
 800663a:	789a      	ldrb	r2, [r3, #2]
 800663c:	4b8f      	ldr	r3, [pc, #572]	; (800687c <rfalSetBitRate+0x294>)
 800663e:	78db      	ldrb	r3, [r3, #3]
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f001 ff0f 	bl	8008466 <st25r3916SetBitrate>
 8006648:	4603      	mov	r3, r0
 800664a:	83fb      	strh	r3, [r7, #30]
 800664c:	8bfb      	ldrh	r3, [r7, #30]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <rfalSetBitRate+0x6e>
 8006652:	8bfb      	ldrh	r3, [r7, #30]
 8006654:	e2a9      	b.n	8006baa <rfalSetBitRate+0x5c2>
    }
    
    
    switch( gRFAL.mode )
 8006656:	4b89      	ldr	r3, [pc, #548]	; (800687c <rfalSetBitRate+0x294>)
 8006658:	785b      	ldrb	r3, [r3, #1]
 800665a:	2b0d      	cmp	r3, #13
 800665c:	f200 82a2 	bhi.w	8006ba4 <rfalSetBitRate+0x5bc>
 8006660:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <rfalSetBitRate+0x80>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	08006ba1 	.word	0x08006ba1
 800666c:	080066a1 	.word	0x080066a1
 8006670:	080066a1 	.word	0x080066a1
 8006674:	08006729 	.word	0x08006729
 8006678:	08006729 	.word	0x08006729
 800667c:	08006729 	.word	0x08006729
 8006680:	080067b9 	.word	0x080067b9
 8006684:	08006849 	.word	0x08006849
 8006688:	08006849 	.word	0x08006849
 800668c:	0800697d 	.word	0x0800697d
 8006690:	08006a8d 	.word	0x08006a8d
 8006694:	08006ba1 	.word	0x08006ba1
 8006698:	08006b21 	.word	0x08006b21
 800669c:	08006a0d 	.word	0x08006a0d
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 80066a0:	2008      	movs	r0, #8
 80066a2:	f7fe fed7 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80066a6:	4b75      	ldr	r3, [pc, #468]	; (800687c <rfalSetBitRate+0x294>)
 80066a8:	789b      	ldrb	r3, [r3, #2]
 80066aa:	2bea      	cmp	r3, #234	; 0xea
 80066ac:	d90c      	bls.n	80066c8 <rfalSetBitRate+0xe0>
 80066ae:	4b73      	ldr	r3, [pc, #460]	; (800687c <rfalSetBitRate+0x294>)
 80066b0:	789b      	ldrb	r3, [r3, #2]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	e00d      	b.n	80066e4 <rfalSetBitRate+0xfc>
 80066c8:	4b6c      	ldr	r3, [pc, #432]	; (800687c <rfalSetBitRate+0x294>)
 80066ca:	789b      	ldrb	r3, [r3, #2]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	3301      	adds	r3, #1
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066de:	f043 0301 	orr.w	r3, r3, #1
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fe feb5 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80066ea:	4b64      	ldr	r3, [pc, #400]	; (800687c <rfalSetBitRate+0x294>)
 80066ec:	78db      	ldrb	r3, [r3, #3]
 80066ee:	2bea      	cmp	r3, #234	; 0xea
 80066f0:	d90a      	bls.n	8006708 <rfalSetBitRate+0x120>
 80066f2:	4b62      	ldr	r3, [pc, #392]	; (800687c <rfalSetBitRate+0x294>)
 80066f4:	78db      	ldrb	r3, [r3, #3]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8006704:	b29b      	uxth	r3, r3
 8006706:	e00b      	b.n	8006720 <rfalSetBitRate+0x138>
 8006708:	4b5c      	ldr	r3, [pc, #368]	; (800687c <rfalSetBitRate+0x294>)
 800670a:	78db      	ldrb	r3, [r3, #3]
 800670c:	b29b      	uxth	r3, r3
 800670e:	3301      	adds	r3, #1
 8006710:	b29b      	uxth	r3, r3
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	b29b      	uxth	r3, r3
 8006716:	b2db      	uxtb	r3, r3
 8006718:	b29b      	uxth	r3, r3
 800671a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800671e:	b29b      	uxth	r3, r3
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe fe97 	bl	8005454 <rfalSetAnalogConfig>
            break;
 8006726:	e23f      	b.n	8006ba8 <rfalSetBitRate+0x5c0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8006728:	2008      	movs	r0, #8
 800672a:	f7fe fe93 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800672e:	4b53      	ldr	r3, [pc, #332]	; (800687c <rfalSetBitRate+0x294>)
 8006730:	789b      	ldrb	r3, [r3, #2]
 8006732:	2bea      	cmp	r3, #234	; 0xea
 8006734:	d90c      	bls.n	8006750 <rfalSetBitRate+0x168>
 8006736:	4b51      	ldr	r3, [pc, #324]	; (800687c <rfalSetBitRate+0x294>)
 8006738:	789b      	ldrb	r3, [r3, #2]
 800673a:	b29b      	uxth	r3, r3
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	b29b      	uxth	r3, r3
 8006740:	b2db      	uxtb	r3, r3
 8006742:	b29b      	uxth	r3, r3
 8006744:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006748:	f043 0301 	orr.w	r3, r3, #1
 800674c:	b29b      	uxth	r3, r3
 800674e:	e00d      	b.n	800676c <rfalSetBitRate+0x184>
 8006750:	4b4a      	ldr	r3, [pc, #296]	; (800687c <rfalSetBitRate+0x294>)
 8006752:	789b      	ldrb	r3, [r3, #2]
 8006754:	b29b      	uxth	r3, r3
 8006756:	3301      	adds	r3, #1
 8006758:	b29b      	uxth	r3, r3
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	b29b      	uxth	r3, r3
 800675e:	b2db      	uxtb	r3, r3
 8006760:	b29b      	uxth	r3, r3
 8006762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006766:	f043 0301 	orr.w	r3, r3, #1
 800676a:	b29b      	uxth	r3, r3
 800676c:	4618      	mov	r0, r3
 800676e:	f7fe fe71 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8006772:	4b42      	ldr	r3, [pc, #264]	; (800687c <rfalSetBitRate+0x294>)
 8006774:	78db      	ldrb	r3, [r3, #3]
 8006776:	2bea      	cmp	r3, #234	; 0xea
 8006778:	d90c      	bls.n	8006794 <rfalSetBitRate+0x1ac>
 800677a:	4b40      	ldr	r3, [pc, #256]	; (800687c <rfalSetBitRate+0x294>)
 800677c:	78db      	ldrb	r3, [r3, #3]
 800677e:	b29b      	uxth	r3, r3
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	b29b      	uxth	r3, r3
 8006784:	b2db      	uxtb	r3, r3
 8006786:	b29b      	uxth	r3, r3
 8006788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800678c:	f043 0302 	orr.w	r3, r3, #2
 8006790:	b29b      	uxth	r3, r3
 8006792:	e00d      	b.n	80067b0 <rfalSetBitRate+0x1c8>
 8006794:	4b39      	ldr	r3, [pc, #228]	; (800687c <rfalSetBitRate+0x294>)
 8006796:	78db      	ldrb	r3, [r3, #3]
 8006798:	b29b      	uxth	r3, r3
 800679a:	3301      	adds	r3, #1
 800679c:	b29b      	uxth	r3, r3
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067aa:	f043 0302 	orr.w	r3, r3, #2
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fe fe4f 	bl	8005454 <rfalSetAnalogConfig>
            break;
 80067b6:	e1f7      	b.n	8006ba8 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 80067b8:	2008      	movs	r0, #8
 80067ba:	f7fe fe4b 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80067be:	4b2f      	ldr	r3, [pc, #188]	; (800687c <rfalSetBitRate+0x294>)
 80067c0:	789b      	ldrb	r3, [r3, #2]
 80067c2:	2bea      	cmp	r3, #234	; 0xea
 80067c4:	d90c      	bls.n	80067e0 <rfalSetBitRate+0x1f8>
 80067c6:	4b2d      	ldr	r3, [pc, #180]	; (800687c <rfalSetBitRate+0x294>)
 80067c8:	789b      	ldrb	r3, [r3, #2]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067d8:	f043 0301 	orr.w	r3, r3, #1
 80067dc:	b29b      	uxth	r3, r3
 80067de:	e00d      	b.n	80067fc <rfalSetBitRate+0x214>
 80067e0:	4b26      	ldr	r3, [pc, #152]	; (800687c <rfalSetBitRate+0x294>)
 80067e2:	789b      	ldrb	r3, [r3, #2]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	3301      	adds	r3, #1
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067f6:	f043 0301 	orr.w	r3, r3, #1
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe fe29 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8006802:	4b1e      	ldr	r3, [pc, #120]	; (800687c <rfalSetBitRate+0x294>)
 8006804:	78db      	ldrb	r3, [r3, #3]
 8006806:	2bea      	cmp	r3, #234	; 0xea
 8006808:	d90c      	bls.n	8006824 <rfalSetBitRate+0x23c>
 800680a:	4b1c      	ldr	r3, [pc, #112]	; (800687c <rfalSetBitRate+0x294>)
 800680c:	78db      	ldrb	r3, [r3, #3]
 800680e:	b29b      	uxth	r3, r3
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	b29b      	uxth	r3, r3
 8006814:	b2db      	uxtb	r3, r3
 8006816:	b29b      	uxth	r3, r3
 8006818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800681c:	f043 0302 	orr.w	r3, r3, #2
 8006820:	b29b      	uxth	r3, r3
 8006822:	e00d      	b.n	8006840 <rfalSetBitRate+0x258>
 8006824:	4b15      	ldr	r3, [pc, #84]	; (800687c <rfalSetBitRate+0x294>)
 8006826:	78db      	ldrb	r3, [r3, #3]
 8006828:	b29b      	uxth	r3, r3
 800682a:	3301      	adds	r3, #1
 800682c:	b29b      	uxth	r3, r3
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	b29b      	uxth	r3, r3
 8006832:	b2db      	uxtb	r3, r3
 8006834:	b29b      	uxth	r3, r3
 8006836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800683a:	f043 0302 	orr.w	r3, r3, #2
 800683e:	b29b      	uxth	r3, r3
 8006840:	4618      	mov	r0, r3
 8006842:	f7fe fe07 	bl	8005454 <rfalSetAnalogConfig>
            break;
 8006846:	e1af      	b.n	8006ba8 <rfalSetBitRate+0x5c0>
            
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
            
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <rfalSetBitRate+0x294>)
 800684a:	78db      	ldrb	r3, [r3, #3]
 800684c:	2bec      	cmp	r3, #236	; 0xec
 800684e:	d00b      	beq.n	8006868 <rfalSetBitRate+0x280>
 8006850:	4b0a      	ldr	r3, [pc, #40]	; (800687c <rfalSetBitRate+0x294>)
 8006852:	78db      	ldrb	r3, [r3, #3]
 8006854:	2beb      	cmp	r3, #235	; 0xeb
 8006856:	d007      	beq.n	8006868 <rfalSetBitRate+0x280>
 8006858:	4b08      	ldr	r3, [pc, #32]	; (800687c <rfalSetBitRate+0x294>)
 800685a:	78db      	ldrb	r3, [r3, #3]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <rfalSetBitRate+0x280>
 8006860:	4b06      	ldr	r3, [pc, #24]	; (800687c <rfalSetBitRate+0x294>)
 8006862:	78db      	ldrb	r3, [r3, #3]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d107      	bne.n	8006878 <rfalSetBitRate+0x290>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 8006868:	4b04      	ldr	r3, [pc, #16]	; (800687c <rfalSetBitRate+0x294>)
 800686a:	789b      	ldrb	r3, [r3, #2]
 800686c:	2bed      	cmp	r3, #237	; 0xed
 800686e:	d007      	beq.n	8006880 <rfalSetBitRate+0x298>
 8006870:	4b02      	ldr	r3, [pc, #8]	; (800687c <rfalSetBitRate+0x294>)
 8006872:	789b      	ldrb	r3, [r3, #2]
 8006874:	2bec      	cmp	r3, #236	; 0xec
 8006876:	d003      	beq.n	8006880 <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 8006878:	2307      	movs	r3, #7
 800687a:	e196      	b.n	8006baa <rfalSetBitRate+0x5c2>
 800687c:	20000598 	.word	0x20000598
                {
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3916StreamConfig      streamConf;
                    iso15693PhyConfig_t                config;
                    
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 8006880:	4b9a      	ldr	r3, [pc, #616]	; (8006aec <rfalSetBitRate+0x504>)
 8006882:	789b      	ldrb	r3, [r3, #2]
 8006884:	2bed      	cmp	r3, #237	; 0xed
 8006886:	bf0c      	ite	eq
 8006888:	2301      	moveq	r3, #1
 800688a:	2300      	movne	r3, #0
 800688c:	b2db      	uxtb	r3, r3
 800688e:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 8006890:	4b96      	ldr	r3, [pc, #600]	; (8006aec <rfalSetBitRate+0x504>)
 8006892:	78db      	ldrb	r3, [r3, #3]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d00a      	beq.n	80068ae <rfalSetBitRate+0x2c6>
 8006898:	2beb      	cmp	r3, #235	; 0xeb
 800689a:	d002      	beq.n	80068a2 <rfalSetBitRate+0x2ba>
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <rfalSetBitRate+0x2c0>
 80068a0:	e008      	b.n	80068b4 <rfalSetBitRate+0x2cc>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 80068a2:	2301      	movs	r3, #1
 80068a4:	613b      	str	r3, [r7, #16]
                            break;
 80068a6:	e008      	b.n	80068ba <rfalSetBitRate+0x2d2>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 80068a8:	2302      	movs	r3, #2
 80068aa:	613b      	str	r3, [r7, #16]
                            break;
 80068ac:	e005      	b.n	80068ba <rfalSetBitRate+0x2d2>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 80068ae:	2303      	movs	r3, #3
 80068b0:	613b      	str	r3, [r7, #16]
                            break;
 80068b2:	e002      	b.n	80068ba <rfalSetBitRate+0x2d2>
                        default:
                            config.speedMode = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	613b      	str	r3, [r7, #16]
                            break;
 80068b8:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);
 80068ba:	f107 0218 	add.w	r2, r7, #24
 80068be:	f107 030c 	add.w	r3, r7, #12
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fe ff2d 	bl	8005724 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	789b      	ldrb	r3, [r3, #2]
 80068d4:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	78db      	ldrb	r3, [r3, #3]
 80068da:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	753b      	strb	r3, [r7, #20]
                    st25r3916StreamConfigure(&streamConf);
 80068e2:	f107 0314 	add.w	r3, r7, #20
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 ff27 	bl	800873a <st25r3916StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 80068ec:	2008      	movs	r0, #8
 80068ee:	f7fe fdb1 	bl	8005454 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80068f2:	4b7e      	ldr	r3, [pc, #504]	; (8006aec <rfalSetBitRate+0x504>)
 80068f4:	789b      	ldrb	r3, [r3, #2]
 80068f6:	2bea      	cmp	r3, #234	; 0xea
 80068f8:	d90c      	bls.n	8006914 <rfalSetBitRate+0x32c>
 80068fa:	4b7c      	ldr	r3, [pc, #496]	; (8006aec <rfalSetBitRate+0x504>)
 80068fc:	789b      	ldrb	r3, [r3, #2]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	b29b      	uxth	r3, r3
 8006904:	b2db      	uxtb	r3, r3
 8006906:	b29b      	uxth	r3, r3
 8006908:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800690c:	f043 0301 	orr.w	r3, r3, #1
 8006910:	b29b      	uxth	r3, r3
 8006912:	e00d      	b.n	8006930 <rfalSetBitRate+0x348>
 8006914:	4b75      	ldr	r3, [pc, #468]	; (8006aec <rfalSetBitRate+0x504>)
 8006916:	789b      	ldrb	r3, [r3, #2]
 8006918:	b29b      	uxth	r3, r3
 800691a:	3301      	adds	r3, #1
 800691c:	b29b      	uxth	r3, r3
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	b29b      	uxth	r3, r3
 8006922:	b2db      	uxtb	r3, r3
 8006924:	b29b      	uxth	r3, r3
 8006926:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	b29b      	uxth	r3, r3
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe fd8f 	bl	8005454 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8006936:	4b6d      	ldr	r3, [pc, #436]	; (8006aec <rfalSetBitRate+0x504>)
 8006938:	78db      	ldrb	r3, [r3, #3]
 800693a:	2bea      	cmp	r3, #234	; 0xea
 800693c:	d90c      	bls.n	8006958 <rfalSetBitRate+0x370>
 800693e:	4b6b      	ldr	r3, [pc, #428]	; (8006aec <rfalSetBitRate+0x504>)
 8006940:	78db      	ldrb	r3, [r3, #3]
 8006942:	b29b      	uxth	r3, r3
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	b29b      	uxth	r3, r3
 8006948:	b2db      	uxtb	r3, r3
 800694a:	b29b      	uxth	r3, r3
 800694c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006950:	f043 0302 	orr.w	r3, r3, #2
 8006954:	b29b      	uxth	r3, r3
 8006956:	e00d      	b.n	8006974 <rfalSetBitRate+0x38c>
 8006958:	4b64      	ldr	r3, [pc, #400]	; (8006aec <rfalSetBitRate+0x504>)
 800695a:	78db      	ldrb	r3, [r3, #3]
 800695c:	b29b      	uxth	r3, r3
 800695e:	3301      	adds	r3, #1
 8006960:	b29b      	uxth	r3, r3
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	b29b      	uxth	r3, r3
 8006966:	b2db      	uxtb	r3, r3
 8006968:	b29b      	uxth	r3, r3
 800696a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800696e:	f043 0302 	orr.w	r3, r3, #2
 8006972:	b29b      	uxth	r3, r3
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe fd6d 	bl	8005454 <rfalSetAnalogConfig>
                break;
 800697a:	e115      	b.n	8006ba8 <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800697c:	2008      	movs	r0, #8
 800697e:	f7fe fd69 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8006982:	4b5a      	ldr	r3, [pc, #360]	; (8006aec <rfalSetBitRate+0x504>)
 8006984:	789b      	ldrb	r3, [r3, #2]
 8006986:	2bea      	cmp	r3, #234	; 0xea
 8006988:	d90c      	bls.n	80069a4 <rfalSetBitRate+0x3bc>
 800698a:	4b58      	ldr	r3, [pc, #352]	; (8006aec <rfalSetBitRate+0x504>)
 800698c:	789b      	ldrb	r3, [r3, #2]
 800698e:	b29b      	uxth	r3, r3
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	b29b      	uxth	r3, r3
 8006994:	b2db      	uxtb	r3, r3
 8006996:	b29b      	uxth	r3, r3
 8006998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800699c:	f043 0301 	orr.w	r3, r3, #1
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	e00d      	b.n	80069c0 <rfalSetBitRate+0x3d8>
 80069a4:	4b51      	ldr	r3, [pc, #324]	; (8006aec <rfalSetBitRate+0x504>)
 80069a6:	789b      	ldrb	r3, [r3, #2]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3301      	adds	r3, #1
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069ba:	f043 0301 	orr.w	r3, r3, #1
 80069be:	b29b      	uxth	r3, r3
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe fd47 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80069c6:	4b49      	ldr	r3, [pc, #292]	; (8006aec <rfalSetBitRate+0x504>)
 80069c8:	78db      	ldrb	r3, [r3, #3]
 80069ca:	2bea      	cmp	r3, #234	; 0xea
 80069cc:	d90c      	bls.n	80069e8 <rfalSetBitRate+0x400>
 80069ce:	4b47      	ldr	r3, [pc, #284]	; (8006aec <rfalSetBitRate+0x504>)
 80069d0:	78db      	ldrb	r3, [r3, #3]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069e0:	f043 0302 	orr.w	r3, r3, #2
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	e00d      	b.n	8006a04 <rfalSetBitRate+0x41c>
 80069e8:	4b40      	ldr	r3, [pc, #256]	; (8006aec <rfalSetBitRate+0x504>)
 80069ea:	78db      	ldrb	r3, [r3, #3]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3301      	adds	r3, #1
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069fe:	f043 0302 	orr.w	r3, r3, #2
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe fd25 	bl	8005454 <rfalSetAnalogConfig>
            break;
 8006a0a:	e0cd      	b.n	8006ba8 <rfalSetBitRate+0x5c0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 8006a0c:	2009      	movs	r0, #9
 8006a0e:	f7fe fd21 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8006a12:	4b36      	ldr	r3, [pc, #216]	; (8006aec <rfalSetBitRate+0x504>)
 8006a14:	789b      	ldrb	r3, [r3, #2]
 8006a16:	2bea      	cmp	r3, #234	; 0xea
 8006a18:	d90a      	bls.n	8006a30 <rfalSetBitRate+0x448>
 8006a1a:	4b34      	ldr	r3, [pc, #208]	; (8006aec <rfalSetBitRate+0x504>)
 8006a1c:	789b      	ldrb	r3, [r3, #2]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	4b31      	ldr	r3, [pc, #196]	; (8006af0 <rfalSetBitRate+0x508>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	e00b      	b.n	8006a48 <rfalSetBitRate+0x460>
 8006a30:	4b2e      	ldr	r3, [pc, #184]	; (8006aec <rfalSetBitRate+0x504>)
 8006a32:	789b      	ldrb	r3, [r3, #2]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	3301      	adds	r3, #1
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	4b2b      	ldr	r3, [pc, #172]	; (8006af0 <rfalSetBitRate+0x508>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe fd03 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8006a4e:	4b27      	ldr	r3, [pc, #156]	; (8006aec <rfalSetBitRate+0x504>)
 8006a50:	78db      	ldrb	r3, [r3, #3]
 8006a52:	2bea      	cmp	r3, #234	; 0xea
 8006a54:	d90a      	bls.n	8006a6c <rfalSetBitRate+0x484>
 8006a56:	4b25      	ldr	r3, [pc, #148]	; (8006aec <rfalSetBitRate+0x504>)
 8006a58:	78db      	ldrb	r3, [r3, #3]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	4b23      	ldr	r3, [pc, #140]	; (8006af4 <rfalSetBitRate+0x50c>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	e00b      	b.n	8006a84 <rfalSetBitRate+0x49c>
 8006a6c:	4b1f      	ldr	r3, [pc, #124]	; (8006aec <rfalSetBitRate+0x504>)
 8006a6e:	78db      	ldrb	r3, [r3, #3]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3301      	adds	r3, #1
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	4b1d      	ldr	r3, [pc, #116]	; (8006af4 <rfalSetBitRate+0x50c>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fce5 	bl	8005454 <rfalSetAnalogConfig>
            break;
 8006a8a:	e08d      	b.n	8006ba8 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 8006a8c:	2009      	movs	r0, #9
 8006a8e:	f7fe fce1 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8006a92:	4b16      	ldr	r3, [pc, #88]	; (8006aec <rfalSetBitRate+0x504>)
 8006a94:	789b      	ldrb	r3, [r3, #2]
 8006a96:	2bea      	cmp	r3, #234	; 0xea
 8006a98:	d90a      	bls.n	8006ab0 <rfalSetBitRate+0x4c8>
 8006a9a:	4b14      	ldr	r3, [pc, #80]	; (8006aec <rfalSetBitRate+0x504>)
 8006a9c:	789b      	ldrb	r3, [r3, #2]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <rfalSetBitRate+0x510>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	e00b      	b.n	8006ac8 <rfalSetBitRate+0x4e0>
 8006ab0:	4b0e      	ldr	r3, [pc, #56]	; (8006aec <rfalSetBitRate+0x504>)
 8006ab2:	789b      	ldrb	r3, [r3, #2]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <rfalSetBitRate+0x510>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fcc3 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8006ace:	4b07      	ldr	r3, [pc, #28]	; (8006aec <rfalSetBitRate+0x504>)
 8006ad0:	78db      	ldrb	r3, [r3, #3]
 8006ad2:	2bea      	cmp	r3, #234	; 0xea
 8006ad4:	d914      	bls.n	8006b00 <rfalSetBitRate+0x518>
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <rfalSetBitRate+0x504>)
 8006ad8:	78db      	ldrb	r3, [r3, #3]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <rfalSetBitRate+0x514>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	e015      	b.n	8006b18 <rfalSetBitRate+0x530>
 8006aec:	20000598 	.word	0x20000598
 8006af0:	ffff8801 	.word	0xffff8801
 8006af4:	ffff8802 	.word	0xffff8802
 8006af8:	ffff8101 	.word	0xffff8101
 8006afc:	ffff8102 	.word	0xffff8102
 8006b00:	4b2c      	ldr	r3, [pc, #176]	; (8006bb4 <rfalSetBitRate+0x5cc>)
 8006b02:	78db      	ldrb	r3, [r3, #3]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3301      	adds	r3, #1
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	4b29      	ldr	r3, [pc, #164]	; (8006bb8 <rfalSetBitRate+0x5d0>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe fc9b 	bl	8005454 <rfalSetAnalogConfig>
            break;
 8006b1e:	e043      	b.n	8006ba8 <rfalSetBitRate+0x5c0>
                
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
                        
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 8006b20:	2009      	movs	r0, #9
 8006b22:	f7fe fc97 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8006b26:	4b23      	ldr	r3, [pc, #140]	; (8006bb4 <rfalSetBitRate+0x5cc>)
 8006b28:	789b      	ldrb	r3, [r3, #2]
 8006b2a:	2bea      	cmp	r3, #234	; 0xea
 8006b2c:	d90a      	bls.n	8006b44 <rfalSetBitRate+0x55c>
 8006b2e:	4b21      	ldr	r3, [pc, #132]	; (8006bb4 <rfalSetBitRate+0x5cc>)
 8006b30:	789b      	ldrb	r3, [r3, #2]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	4b1f      	ldr	r3, [pc, #124]	; (8006bbc <rfalSetBitRate+0x5d4>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	e00b      	b.n	8006b5c <rfalSetBitRate+0x574>
 8006b44:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <rfalSetBitRate+0x5cc>)
 8006b46:	789b      	ldrb	r3, [r3, #2]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <rfalSetBitRate+0x5d4>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe fc79 	bl	8005454 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8006b62:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <rfalSetBitRate+0x5cc>)
 8006b64:	78db      	ldrb	r3, [r3, #3]
 8006b66:	2bea      	cmp	r3, #234	; 0xea
 8006b68:	d90a      	bls.n	8006b80 <rfalSetBitRate+0x598>
 8006b6a:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <rfalSetBitRate+0x5cc>)
 8006b6c:	78db      	ldrb	r3, [r3, #3]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	011b      	lsls	r3, r3, #4
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <rfalSetBitRate+0x5d8>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	e00b      	b.n	8006b98 <rfalSetBitRate+0x5b0>
 8006b80:	4b0c      	ldr	r3, [pc, #48]	; (8006bb4 <rfalSetBitRate+0x5cc>)
 8006b82:	78db      	ldrb	r3, [r3, #3]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	3301      	adds	r3, #1
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <rfalSetBitRate+0x5d8>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe fc5b 	bl	8005454 <rfalSetAnalogConfig>
            break;
 8006b9e:	e003      	b.n	8006ba8 <rfalSetBitRate+0x5c0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 8006ba0:	2321      	movs	r3, #33	; 0x21
 8006ba2:	e002      	b.n	8006baa <rfalSetBitRate+0x5c2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 8006ba4:	230f      	movs	r3, #15
 8006ba6:	e000      	b.n	8006baa <rfalSetBitRate+0x5c2>
    }
    
    return ERR_NONE;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3720      	adds	r7, #32
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000598 	.word	0x20000598
 8006bb8:	ffff8102 	.word	0xffff8102
 8006bbc:	ffff8401 	.word	0xffff8401
 8006bc0:	ffff8402 	.word	0xffff8402

08006bc4 <rfalSetErrorHandling>:
}


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	71fb      	strb	r3, [r7, #7]
    switch(eHandling)
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	db0f      	blt.n	8006bf4 <rfalSetErrorHandling+0x30>
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	dd02      	ble.n	8006bde <rfalSetErrorHandling+0x1a>
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d005      	beq.n	8006be8 <rfalSetErrorHandling+0x24>
                                 (ST25R3916_REG_EMD_SUP_CONF_emd_emv_on | ST25R3916_REG_EMD_SUP_CONF_emd_crc_prot_off | ST25R3916_REG_EMD_SUP_CONF_emd_res_bits_off | RFAL_EMVCO_RX_MAXLEN) );
#endif /* RFAL_SW_EMD */
            break;
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8006bdc:	e00a      	b.n	8006bf4 <rfalSetErrorHandling+0x30>
            st25r3916ClrRegisterBits( ST25R3916_REG_EMD_SUP_CONF, ST25R3916_REG_EMD_SUP_CONF_emd_emv );
 8006bde:	2180      	movs	r1, #128	; 0x80
 8006be0:	2045      	movs	r0, #69	; 0x45
 8006be2:	f002 f85f 	bl	8008ca4 <st25r3916ClrRegisterBits>
            break;
 8006be6:	e006      	b.n	8006bf6 <rfalSetErrorHandling+0x32>
            st25r3916ModifyRegister( ST25R3916_REG_EMD_SUP_CONF, 
 8006be8:	2284      	movs	r2, #132	; 0x84
 8006bea:	21bf      	movs	r1, #191	; 0xbf
 8006bec:	2045      	movs	r0, #69	; 0x45
 8006bee:	f002 f8d4 	bl	8008d9a <st25r3916ModifyRegister>
            break;
 8006bf2:	e000      	b.n	8006bf6 <rfalSetErrorHandling+0x32>
            break;
 8006bf4:	bf00      	nop
    }

    gRFAL.conf.eHandling = eHandling;
 8006bf6:	4a03      	ldr	r2, [pc, #12]	; (8006c04 <rfalSetErrorHandling+0x40>)
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	71d3      	strb	r3, [r2, #7]
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20000598 	.word	0x20000598

08006c08 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3916_GPT_MAX_1FC );
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a06      	ldr	r2, [pc, #24]	; (8006c2c <rfalSetFDTPoll+0x24>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	bf28      	it	cs
 8006c18:	4613      	movcs	r3, r2
 8006c1a:	4a05      	ldr	r2, [pc, #20]	; (8006c30 <rfalSetFDTPoll+0x28>)
 8006c1c:	6113      	str	r3, [r2, #16]
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	0007fff8 	.word	0x0007fff8
 8006c30:	20000598 	.word	0x20000598

08006c34 <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3916_MRT_MAX_1FC );
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 8006c42:	bf28      	it	cs
 8006c44:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 8006c48:	4a03      	ldr	r2, [pc, #12]	; (8006c58 <rfalSetFDTListen+0x24>)
 8006c4a:	60d3      	str	r3, [r2, #12]
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	20000598 	.word	0x20000598

08006c5c <rfalSetGT>:
}


/*******************************************************************************/
void rfalSetGT( uint32_t GT )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3916_GT_MAX_1FC );
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a06      	ldr	r2, [pc, #24]	; (8006c80 <rfalSetGT+0x24>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	bf28      	it	cs
 8006c6c:	4613      	movcs	r3, r2
 8006c6e:	4a05      	ldr	r2, [pc, #20]	; (8006c84 <rfalSetGT+0x28>)
 8006c70:	6093      	str	r3, [r2, #8]
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	040a8bc0 	.word	0x040a8bc0
 8006c84:	20000598 	.word	0x20000598

08006c88 <rfalIsGTExpired>:
}


/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 8006c8c:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <rfalIsGTExpired+0x2c>)
 8006c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00c      	beq.n	8006cae <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 8006c94:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <rfalIsGTExpired+0x2c>)
 8006c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7f9 fdfd 	bl	8000898 <timerIsExpired>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f083 0301 	eor.w	r3, r3, #1
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <rfalIsGTExpired+0x26>
        {
            return false;
 8006caa:	2300      	movs	r3, #0
 8006cac:	e000      	b.n	8006cb0 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 8006cae:	2301      	movs	r3, #1
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20000598 	.word	0x20000598

08006cb8 <rfalFieldOnAndStartGT>:


/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3916IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 8006cbe:	2280      	movs	r2, #128	; 0x80
 8006cc0:	2180      	movs	r1, #128	; 0x80
 8006cc2:	2002      	movs	r0, #2
 8006cc4:	f002 f8d6 	bl	8008e74 <st25r3916CheckReg>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f083 0301 	eor.w	r3, r3, #1
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d103      	bne.n	8006cdc <rfalFieldOnAndStartGT+0x24>
 8006cd4:	4b2a      	ldr	r3, [pc, #168]	; (8006d80 <rfalFieldOnAndStartGT+0xc8>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 8006cdc:	2321      	movs	r3, #33	; 0x21
 8006cde:	e04a      	b.n	8006d76 <rfalFieldOnAndStartGT+0xbe>
    }
    
    ret = ERR_NONE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 8006ce4:	2002      	movs	r0, #2
 8006ce6:	f7fe fbb5 	bl	8005454 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3916IsTxEnabled() || !gRFAL.field )
 8006cea:	2208      	movs	r2, #8
 8006cec:	2108      	movs	r1, #8
 8006cee:	2002      	movs	r0, #2
 8006cf0:	f002 f8c0 	bl	8008e74 <st25r3916CheckReg>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f083 0301 	eor.w	r3, r3, #1
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <rfalFieldOnAndStartGT+0x56>
 8006d00:	4b1f      	ldr	r3, [pc, #124]	; (8006d80 <rfalFieldOnAndStartGT+0xc8>)
 8006d02:	791b      	ldrb	r3, [r3, #4]
 8006d04:	f083 0301 	eor.w	r3, r3, #1
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01c      	beq.n	8006d48 <rfalFieldOnAndStartGT+0x90>
    {
        
        /* Set TARFG: 0 (75us+0ms=75us), GT is fulfilled using a SW timer */
        st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 8006d0e:	2100      	movs	r1, #0
 8006d10:	2055      	movs	r0, #85	; 0x55
 8006d12:	f001 fedd 	bl	8008ad0 <st25r3916WriteRegister>
        
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, 0 );
 8006d16:	2300      	movs	r3, #0
 8006d18:	22ff      	movs	r2, #255	; 0xff
 8006d1a:	21ff      	movs	r1, #255	; 0xff
 8006d1c:	20c8      	movs	r0, #200	; 0xc8
 8006d1e:	f001 fbe3 	bl	80084e8 <st25r3916PerformCollisionAvoidance>
 8006d22:	4603      	mov	r3, r0
 8006d24:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3916IsTxEnabled(); //(ret == ERR_NONE);
 8006d26:	2208      	movs	r2, #8
 8006d28:	2108      	movs	r1, #8
 8006d2a:	2002      	movs	r0, #2
 8006d2c:	f002 f8a2 	bl	8008e74 <st25r3916CheckReg>
 8006d30:	4603      	mov	r3, r0
 8006d32:	461a      	mov	r2, r3
 8006d34:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <rfalFieldOnAndStartGT+0xc8>)
 8006d36:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 8006d38:	4b11      	ldr	r3, [pc, #68]	; (8006d80 <rfalFieldOnAndStartGT+0xc8>)
 8006d3a:	791b      	ldrb	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <rfalFieldOnAndStartGT+0x90>
        {            
            st25r3916TxRxOn(); /* Enable Tx and Rx (Tx is already On)*/
 8006d40:	2148      	movs	r1, #72	; 0x48
 8006d42:	2002      	movs	r0, #2
 8006d44:	f001 ffe5 	bl	8008d12 <st25r3916SetRegisterBits>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 8006d48:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <rfalFieldOnAndStartGT+0xc8>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d011      	beq.n	8006d74 <rfalFieldOnAndStartGT+0xbc>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3916_GT_MIN_1FC) ) );
 8006d50:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <rfalFieldOnAndStartGT+0xc8>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f243 42f8 	movw	r2, #13560	; 0x34f8
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	bf38      	it	cc
 8006d5c:	4613      	movcc	r3, r2
 8006d5e:	4a09      	ldr	r2, [pc, #36]	; (8006d84 <rfalFieldOnAndStartGT+0xcc>)
 8006d60:	fba2 2303 	umull	r2, r3, r2, r3
 8006d64:	0b1b      	lsrs	r3, r3, #12
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7f9 fd87 	bl	800087c <timerCalculateTimer>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <rfalFieldOnAndStartGT+0xc8>)
 8006d72:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    return ret;
 8006d74:	88fb      	ldrh	r3, [r7, #6]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000598 	.word	0x20000598
 8006d84:	4d542005 	.word	0x4d542005

08006d88 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 8006d8c:	4b09      	ldr	r3, [pc, #36]	; (8006db4 <rfalFieldOff+0x2c>)
 8006d8e:	7d1b      	ldrb	r3, [r3, #20]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 8006d94:	f000 fa34 	bl	8007200 <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3916TxRxOff();
 8006d98:	2148      	movs	r1, #72	; 0x48
 8006d9a:	2002      	movs	r0, #2
 8006d9c:	f001 ff82 	bl	8008ca4 <st25r3916ClrRegisterBits>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 8006da0:	2003      	movs	r0, #3
 8006da2:	f7fe fb57 	bl	8005454 <rfalSetAnalogConfig>
    gRFAL.field = false;
 8006da6:	4b03      	ldr	r3, [pc, #12]	; (8006db4 <rfalFieldOff+0x2c>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000598 	.word	0x20000598

08006db8 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 8006db8:	b5b0      	push	{r4, r5, r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 8006dc6:	2307      	movs	r3, #7
 8006dc8:	e127      	b.n	800701a <rfalStartTransceive+0x262>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 8006dca:	4b96      	ldr	r3, [pc, #600]	; (8007024 <rfalStartTransceive+0x26c>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	f240 8122 	bls.w	8007018 <rfalStartTransceive+0x260>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3916IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	2108      	movs	r1, #8
 8006dd8:	2002      	movs	r0, #2
 8006dda:	f002 f84b 	bl	8008e74 <st25r3916CheckReg>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f083 0301 	eor.w	r3, r3, #1
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d011      	beq.n	8006e0e <rfalStartTransceive+0x56>
 8006dea:	4b8e      	ldr	r3, [pc, #568]	; (8007024 <rfalStartTransceive+0x26c>)
 8006dec:	785b      	ldrb	r3, [r3, #1]
 8006dee:	2b0a      	cmp	r3, #10
 8006df0:	d00d      	beq.n	8006e0e <rfalStartTransceive+0x56>
 8006df2:	4b8c      	ldr	r3, [pc, #560]	; (8007024 <rfalStartTransceive+0x26c>)
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2b0b      	cmp	r3, #11
 8006df8:	d009      	beq.n	8006e0e <rfalStartTransceive+0x56>
 8006dfa:	4b8a      	ldr	r3, [pc, #552]	; (8007024 <rfalStartTransceive+0x26c>)
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	2b0c      	cmp	r3, #12
 8006e00:	d005      	beq.n	8006e0e <rfalStartTransceive+0x56>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 8006e0a:	2321      	movs	r3, #33	; 0x21
 8006e0c:	e105      	b.n	800701a <rfalStartTransceive+0x262>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 8006e0e:	4b85      	ldr	r3, [pc, #532]	; (8007024 <rfalStartTransceive+0x26c>)
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	f103 0418 	add.w	r4, r3, #24
 8006e16:	4615      	mov	r5, r2
 8006e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006e20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8006e24:	4b7f      	ldr	r3, [pc, #508]	; (8007024 <rfalStartTransceive+0x26c>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d04b      	beq.n	8006ec4 <rfalStartTransceive+0x10c>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 8006e2c:	2340      	movs	r3, #64	; 0x40
 8006e2e:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8006e30:	4b7c      	ldr	r3, [pc, #496]	; (8007024 <rfalStartTransceive+0x26c>)
 8006e32:	785b      	ldrb	r3, [r3, #1]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d102      	bne.n	8006e3e <rfalStartTransceive+0x86>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	33d4      	adds	r3, #212	; 0xd4
 8006e3c:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8006e3e:	4b79      	ldr	r3, [pc, #484]	; (8007024 <rfalStartTransceive+0x26c>)
 8006e40:	785b      	ldrb	r3, [r3, #1]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d102      	bne.n	8006e4c <rfalStartTransceive+0x94>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	33d4      	adds	r3, #212	; 0xd4
 8006e4a:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 8006e4c:	4b75      	ldr	r3, [pc, #468]	; (8007024 <rfalStartTransceive+0x26c>)
 8006e4e:	785b      	ldrb	r3, [r3, #1]
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d103      	bne.n	8006e5c <rfalStartTransceive+0xa4>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e5a:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 8006e5c:	4b71      	ldr	r3, [pc, #452]	; (8007024 <rfalStartTransceive+0x26c>)
 8006e5e:	785b      	ldrb	r3, [r3, #1]
 8006e60:	2b07      	cmp	r3, #7
 8006e62:	d102      	bne.n	8006e6a <rfalStartTransceive+0xb2>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3340      	adds	r3, #64	; 0x40
 8006e68:	60fb      	str	r3, [r7, #12]
            
            /* Ensure that MRT is using 64/fc steps */
            st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 8006e6a:	2108      	movs	r1, #8
 8006e6c:	2012      	movs	r0, #18
 8006e6e:	f001 ff19 	bl	8008ca4 <st25r3916ClrRegisterBits>
            
            
            /* If Correlator is being used further adjustment is required for NFCB */
            if( (st25r3916CheckReg(ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, 0x00U)) && (gRFAL.mode == RFAL_MODE_POLL_NFCB) )
 8006e72:	2200      	movs	r2, #0
 8006e74:	2104      	movs	r1, #4
 8006e76:	200a      	movs	r0, #10
 8006e78:	f001 fffc 	bl	8008e74 <st25r3916CheckReg>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00f      	beq.n	8006ea2 <rfalStartTransceive+0xea>
 8006e82:	4b68      	ldr	r3, [pc, #416]	; (8007024 <rfalStartTransceive+0x26c>)
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d10b      	bne.n	8006ea2 <rfalStartTransceive+0xea>
            {
                FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJT_CORR;                                                                                        /* Reduce FDT(Listen)                   */
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3380      	adds	r3, #128	; 0x80
 8006e8e:	60fb      	str	r3, [r7, #12]
                st25r3916SetRegisterBits( ST25R3916_REG_CORR_CONF1, ST25R3916_REG_CORR_CONF1_corr_s3 );                                                 /* Ensure BPSK start to 33 pilot pulses */
 8006e90:	2108      	movs	r1, #8
 8006e92:	204c      	movs	r0, #76	; 0x4c
 8006e94:	f001 ff3d 	bl	8008d12 <st25r3916SetRegisterBits>
                st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 8006e98:	2214      	movs	r2, #20
 8006e9a:	211f      	movs	r1, #31
 8006e9c:	2046      	movs	r0, #70	; 0x46
 8006e9e:	f001 ff65 	bl	8008d6c <st25r3916ChangeRegisterBits>
            }
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 8006ea2:	4b60      	ldr	r3, [pc, #384]	; (8007024 <rfalStartTransceive+0x26c>)
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d806      	bhi.n	8006eba <rfalStartTransceive+0x102>
 8006eac:	4b5d      	ldr	r3, [pc, #372]	; (8007024 <rfalStartTransceive+0x26c>)
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	099b      	lsrs	r3, r3, #6
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	e000      	b.n	8006ebc <rfalStartTransceive+0x104>
 8006eba:	2304      	movs	r3, #4
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	200f      	movs	r0, #15
 8006ec0:	f001 fe06 	bl	8008ad0 <st25r3916WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8006ec4:	4b57      	ldr	r3, [pc, #348]	; (8007024 <rfalStartTransceive+0x26c>)
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ecc:	d046      	beq.n	8006f5c <rfalStartTransceive+0x1a4>
 8006ece:	4b55      	ldr	r3, [pc, #340]	; (8007024 <rfalStartTransceive+0x26c>)
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d042      	beq.n	8006f5c <rfalStartTransceive+0x1a4>
        {
            /* Ensure proper timing configuration */
            if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 8006ed6:	4b53      	ldr	r3, [pc, #332]	; (8007024 <rfalStartTransceive+0x26c>)
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	4b52      	ldr	r3, [pc, #328]	; (8007024 <rfalStartTransceive+0x26c>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d301      	bcc.n	8006ee6 <rfalStartTransceive+0x12e>
            {
                return ERR_PARAM;
 8006ee2:	2307      	movs	r3, #7
 8006ee4:	e099      	b.n	800701a <rfalStartTransceive+0x262>
            }
            
            FxTAdj = RFAL_FWT_ADJUSTMENT;
 8006ee6:	2340      	movs	r3, #64	; 0x40
 8006ee8:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 8006eea:	4b4e      	ldr	r3, [pc, #312]	; (8007024 <rfalStartTransceive+0x26c>)
 8006eec:	785b      	ldrb	r3, [r3, #1]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d103      	bne.n	8006efa <rfalStartTransceive+0x142>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006ef8:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 8006efa:	4b4a      	ldr	r3, [pc, #296]	; (8007024 <rfalStartTransceive+0x26c>)
 8006efc:	785b      	ldrb	r3, [r3, #1]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d103      	bne.n	8006f0a <rfalStartTransceive+0x152>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006f08:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 8006f0a:	4b46      	ldr	r3, [pc, #280]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f0c:	785b      	ldrb	r3, [r3, #1]
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d103      	bne.n	8006f1a <rfalStartTransceive+0x162>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f18:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 8006f1a:	4b42      	ldr	r3, [pc, #264]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f1c:	785b      	ldrb	r3, [r3, #1]
 8006f1e:	2b06      	cmp	r3, #6
 8006f20:	d10b      	bne.n	8006f3a <rfalStartTransceive+0x182>
            {
                FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 8006f22:	4b40      	ldr	r3, [pc, #256]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f24:	789b      	ldrb	r3, [r3, #2]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d102      	bne.n	8006f30 <rfalStartTransceive+0x178>
 8006f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f2e:	e001      	b.n	8006f34 <rfalStartTransceive+0x17c>
 8006f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
            }
            
            /* Ensure that the given FWT doesn't exceed NRT maximum */
            gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3916_NRT_MAX_1FC );
 8006f3a:	4b3a      	ldr	r3, [pc, #232]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	4a39      	ldr	r2, [pc, #228]	; (8007028 <rfalStartTransceive+0x270>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	bf28      	it	cs
 8006f48:	4613      	movcs	r3, r2
 8006f4a:	4a36      	ldr	r2, [pc, #216]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f4c:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* Set FWT in the NRT */
            st25r3916SetNoResponseTime( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 8006f4e:	4b35      	ldr	r3, [pc, #212]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	099b      	lsrs	r3, r3, #6
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 fb5d 	bl	8008614 <st25r3916SetNoResponseTime>
 8006f5a:	e002      	b.n	8006f62 <rfalStartTransceive+0x1aa>
        }
        else
        {
            /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	f001 fb59 	bl	8008614 <st25r3916SetNoResponseTime>
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 8006f62:	4b30      	ldr	r3, [pc, #192]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f64:	2203      	movs	r2, #3
 8006f66:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 8006f68:	4b2e      	ldr	r3, [pc, #184]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f6a:	220b      	movs	r2, #11
 8006f6c:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 8006f6e:	4b2d      	ldr	r3, [pc, #180]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f70:	2202      	movs	r2, #2
 8006f72:	82da      	strh	r2, [r3, #22]
        
        
    #if RFAL_FEATURE_NFCV
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8006f74:	4b2b      	ldr	r3, [pc, #172]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f76:	785b      	ldrb	r3, [r3, #1]
 8006f78:	2b07      	cmp	r3, #7
 8006f7a:	d003      	beq.n	8006f84 <rfalStartTransceive+0x1cc>
 8006f7c:	4b29      	ldr	r3, [pc, #164]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d128      	bne.n	8006fd6 <rfalStartTransceive+0x21e>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 8006f84:	4a27      	ldr	r2, [pc, #156]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f86:	4b27      	ldr	r3, [pc, #156]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f88:	f502 7417 	add.w	r4, r2, #604	; 0x25c
 8006f8c:	f103 0518 	add.w	r5, r3, #24
 8006f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006f98:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 8006f9c:	4b21      	ldr	r3, [pc, #132]	; (8007024 <rfalStartTransceive+0x26c>)
 8006f9e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <rfalStartTransceive+0x1f2>
 8006fa6:	4b21      	ldr	r3, [pc, #132]	; (800702c <rfalStartTransceive+0x274>)
 8006fa8:	e000      	b.n	8006fac <rfalStartTransceive+0x1f4>
 8006faa:	2300      	movs	r3, #0
 8006fac:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <rfalStartTransceive+0x26c>)
 8006fae:	6213      	str	r3, [r2, #32]
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 8006fb0:	4b1c      	ldr	r3, [pc, #112]	; (8007024 <rfalStartTransceive+0x26c>)
 8006fb2:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 8006fb6:	849a      	strh	r2, [r3, #36]	; 0x24
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 8006fb8:	4b1a      	ldr	r3, [pc, #104]	; (8007024 <rfalStartTransceive+0x26c>)
 8006fba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006fbe:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 8006fc2:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 8006fc6:	4a17      	ldr	r2, [pc, #92]	; (8007024 <rfalStartTransceive+0x26c>)
 8006fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
          
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 8006fca:	4b16      	ldr	r3, [pc, #88]	; (8007024 <rfalStartTransceive+0x26c>)
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <rfalStartTransceive+0x21e>
            {
                return  ERR_NONE;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e021      	b.n	800701a <rfalStartTransceive+0x262>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 8006fd6:	4b13      	ldr	r3, [pc, #76]	; (8007024 <rfalStartTransceive+0x26c>)
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <rfalStartTransceive+0x22e>
 8006fde:	4b11      	ldr	r3, [pc, #68]	; (8007024 <rfalStartTransceive+0x26c>)
 8006fe0:	8b9b      	ldrh	r3, [r3, #28]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d116      	bne.n	8007014 <rfalStartTransceive+0x25c>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 8006fe6:	f000 f923 	bl	8007230 <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 8006fea:	4b0e      	ldr	r3, [pc, #56]	; (8007024 <rfalStartTransceive+0x26c>)
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	2b09      	cmp	r3, #9
 8006ff0:	d003      	beq.n	8006ffa <rfalStartTransceive+0x242>
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <rfalStartTransceive+0x26c>)
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	2b0d      	cmp	r3, #13
 8006ff8:	d103      	bne.n	8007002 <rfalStartTransceive+0x24a>
            {
                st25r3916TxOff();
 8006ffa:	2108      	movs	r1, #8
 8006ffc:	2002      	movs	r0, #2
 8006ffe:	f001 fe51 	bl	8008ca4 <st25r3916ClrRegisterBits>
            } 
            
            /* No Tx done, enable the Receiver */
            st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8007002:	20d1      	movs	r0, #209	; 0xd1
 8007004:	f001 fded 	bl	8008be2 <st25r3916ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3916ExecuteCommand( ST25R3916_CMD_START_NO_RESPONSE_TIMER );
 8007008:	20e3      	movs	r0, #227	; 0xe3
 800700a:	f001 fdea 	bl	8008be2 <st25r3916ExecuteCommand>

            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800700e:	4b05      	ldr	r3, [pc, #20]	; (8007024 <rfalStartTransceive+0x26c>)
 8007010:	2251      	movs	r2, #81	; 0x51
 8007012:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 8007014:	2300      	movs	r3, #0
 8007016:	e000      	b.n	800701a <rfalStartTransceive+0x262>
    }
    
    return ERR_WRONG_STATE;
 8007018:	2321      	movs	r3, #33	; 0x21
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bdb0      	pop	{r4, r5, r7, pc}
 8007022:	bf00      	nop
 8007024:	20000598 	.word	0x20000598
 8007028:	0ffff000 	.word	0x0ffff000
 800702c:	200005e8 	.word	0x200005e8

08007030 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 8007034:	4b09      	ldr	r3, [pc, #36]	; (800705c <rfalIsTransceiveInTx+0x2c>)
 8007036:	7d1b      	ldrb	r3, [r3, #20]
 8007038:	2b0a      	cmp	r3, #10
 800703a:	d905      	bls.n	8007048 <rfalIsTransceiveInTx+0x18>
 800703c:	4b07      	ldr	r3, [pc, #28]	; (800705c <rfalIsTransceiveInTx+0x2c>)
 800703e:	7d1b      	ldrb	r3, [r3, #20]
 8007040:	2b50      	cmp	r3, #80	; 0x50
 8007042:	d801      	bhi.n	8007048 <rfalIsTransceiveInTx+0x18>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <rfalIsTransceiveInTx+0x1a>
 8007048:	2300      	movs	r3, #0
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	b2db      	uxtb	r3, r3
}
 8007050:	4618      	mov	r0, r3
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	20000598 	.word	0x20000598

08007060 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 8007064:	4b05      	ldr	r3, [pc, #20]	; (800707c <rfalIsTransceiveInRx+0x1c>)
 8007066:	7d1b      	ldrb	r3, [r3, #20]
 8007068:	2b50      	cmp	r3, #80	; 0x50
 800706a:	bf8c      	ite	hi
 800706c:	2301      	movhi	r3, #1
 800706e:	2300      	movls	r3, #0
 8007070:	b2db      	uxtb	r3, r3
}
 8007072:	4618      	mov	r0, r3
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	20000598 	.word	0x20000598

08007080 <rfalTransceiveRunBlockingTx>:
}


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
    ReturnCode ret;
        
    do{
        rfalWorker();
 8007086:	f000 f875 	bl	8007174 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800708a:	f000 f861 	bl	8007150 <rfalGetTransceiveStatus>
 800708e:	4603      	mov	r3, r0
 8007090:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 8007092:	f7ff ffcd 	bl	8007030 <rfalIsTransceiveInTx>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <rfalTransceiveRunBlockingTx+0x22>
 800709c:	88fb      	ldrh	r3, [r7, #6]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d0f1      	beq.n	8007086 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 80070a2:	f7ff ffdd 	bl	8007060 <rfalIsTransceiveInRx>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 80070ac:	2300      	movs	r3, #0
 80070ae:	e000      	b.n	80070b2 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 80070b0:	88fb      	ldrh	r3, [r7, #6]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 80070c0:	f000 f858 	bl	8007174 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 80070c4:	f000 f844 	bl	8007150 <rfalGetTransceiveStatus>
 80070c8:	4603      	mov	r3, r0
 80070ca:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );    
 80070cc:	f7ff ffc8 	bl	8007060 <rfalIsTransceiveInRx>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <rfalTransceiveBlockingRx+0x22>
 80070d6:	88fb      	ldrh	r3, [r7, #6]
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d0f1      	beq.n	80070c0 <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 80070dc:	88fb      	ldrh	r3, [r7, #6]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <rfalRunTransceiveWorker>:
}


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 80070ec:	4b17      	ldr	r3, [pc, #92]	; (800714c <rfalRunTransceiveWorker+0x64>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d127      	bne.n	8007144 <rfalRunTransceiveWorker+0x5c>
    {
        /*******************************************************************************/
        /* Check Transceive Sanity Timer has expired */
        if( gRFAL.tmr.txRx != RFAL_TIMING_NONE )
 80070f4:	4b15      	ldr	r3, [pc, #84]	; (800714c <rfalRunTransceiveWorker+0x64>)
 80070f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00d      	beq.n	8007118 <rfalRunTransceiveWorker+0x30>
        {
            if( rfalTimerisExpired( gRFAL.tmr.txRx ) )
 80070fc:	4b13      	ldr	r3, [pc, #76]	; (800714c <rfalRunTransceiveWorker+0x64>)
 80070fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007100:	4618      	mov	r0, r3
 8007102:	f7f9 fbc9 	bl	8000898 <timerIsExpired>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <rfalRunTransceiveWorker+0x30>
            {
                /* If sanity timer has expired abort ongoing transceive and signal error */
                gRFAL.TxRx.status = ERR_IO;
 800710c:	4b0f      	ldr	r3, [pc, #60]	; (800714c <rfalRunTransceiveWorker+0x64>)
 800710e:	2203      	movs	r2, #3
 8007110:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8007112:	4b0e      	ldr	r3, [pc, #56]	; (800714c <rfalRunTransceiveWorker+0x64>)
 8007114:	225a      	movs	r2, #90	; 0x5a
 8007116:	751a      	strb	r2, [r3, #20]
            }
        }
        
        /*******************************************************************************/
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 8007118:	f7ff ff8a 	bl	8007030 <rfalIsTransceiveInTx>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <rfalRunTransceiveWorker+0x46>
        {
            rfalTransceiveTx();
 8007122:	f000 f957 	bl	80073d4 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 8007126:	f000 f813 	bl	8007150 <rfalGetTransceiveStatus>
 800712a:	4603      	mov	r3, r0
 800712c:	e00b      	b.n	8007146 <rfalRunTransceiveWorker+0x5e>
        }
        if( rfalIsTransceiveInRx() )
 800712e:	f7ff ff97 	bl	8007060 <rfalIsTransceiveInRx>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <rfalRunTransceiveWorker+0x5c>
        {
            rfalTransceiveRx();
 8007138:	f000 fb92 	bl	8007860 <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 800713c:	f000 f808 	bl	8007150 <rfalGetTransceiveStatus>
 8007140:	4603      	mov	r3, r0
 8007142:	e000      	b.n	8007146 <rfalRunTransceiveWorker+0x5e>
        }
    }    
    return ERR_WRONG_STATE;
 8007144:	2321      	movs	r3, #33	; 0x21
}
 8007146:	4618      	mov	r0, r3
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000598 	.word	0x20000598

08007150 <rfalGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalGetTransceiveStatus( void )
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 8007154:	4b06      	ldr	r3, [pc, #24]	; (8007170 <rfalGetTransceiveStatus+0x20>)
 8007156:	7d1b      	ldrb	r3, [r3, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d102      	bne.n	8007162 <rfalGetTransceiveStatus+0x12>
 800715c:	4b04      	ldr	r3, [pc, #16]	; (8007170 <rfalGetTransceiveStatus+0x20>)
 800715e:	8adb      	ldrh	r3, [r3, #22]
 8007160:	e000      	b.n	8007164 <rfalGetTransceiveStatus+0x14>
 8007162:	2302      	movs	r3, #2
}
 8007164:	4618      	mov	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	20000598 	.word	0x20000598

08007174 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 8007178:	4b04      	ldr	r3, [pc, #16]	; (800718c <rfalWorker+0x18>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b03      	cmp	r3, #3
 800717e:	d000      	beq.n	8007182 <rfalWorker+0xe>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8007180:	e002      	b.n	8007188 <rfalWorker+0x14>
            rfalRunTransceiveWorker();
 8007182:	f7ff ffb1 	bl	80070e8 <rfalRunTransceiveWorker>
            break;
 8007186:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 8007188:	bf00      	nop
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20000598 	.word	0x20000598

08007190 <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
    uint16_t fifoBytesToRead;
 
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 8007196:	f000 fee9 	bl	8007f6c <rfalFIFOStatusGetNumBytes>
 800719a:	4603      	mov	r3, r0
 800719c:	80fb      	strh	r3, [r7, #6]
    

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 800719e:	4b17      	ldr	r3, [pc, #92]	; (80071fc <rfalErrorHandling+0x6c>)
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d125      	bne.n	80071f2 <rfalErrorHandling+0x62>
        
        /*******************************************************************************/
        /* If we received a frame with a incomplete byte we`ll raise a specific error  *
         * ( support for T2T 4 bit ACK / NAK, MIFARE and Kovio )                       */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 80071a6:	4b15      	ldr	r3, [pc, #84]	; (80071fc <rfalErrorHandling+0x6c>)
 80071a8:	8adb      	ldrh	r3, [r3, #22]
 80071aa:	2b1b      	cmp	r3, #27
 80071ac:	d003      	beq.n	80071b6 <rfalErrorHandling+0x26>
 80071ae:	4b13      	ldr	r3, [pc, #76]	; (80071fc <rfalErrorHandling+0x6c>)
 80071b0:	8adb      	ldrh	r3, [r3, #22]
 80071b2:	2b15      	cmp	r3, #21
 80071b4:	d11d      	bne.n	80071f2 <rfalErrorHandling+0x62>
        {
            if( rfalFIFOStatusIsIncompleteByte() )
 80071b6:	f000 fef5 	bl	8007fa4 <rfalFIFOStatusIsIncompleteByte>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d018      	beq.n	80071f2 <rfalErrorHandling+0x62>
            {
                st25r3916ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 80071c0:	4b0e      	ldr	r3, [pc, #56]	; (80071fc <rfalErrorHandling+0x6c>)
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	88fa      	ldrh	r2, [r7, #6]
 80071c6:	4611      	mov	r1, r2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 fcee 	bl	8008baa <st25r3916ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 80071ce:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <rfalErrorHandling+0x6c>)
 80071d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d007      	beq.n	80071e6 <rfalErrorHandling+0x56>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 80071d6:	f000 ff09 	bl	8007fec <rfalFIFOGetNumIncompleteBits>
 80071da:	4603      	mov	r3, r0
 80071dc:	461a      	mov	r2, r3
 80071de:	4b07      	ldr	r3, [pc, #28]	; (80071fc <rfalErrorHandling+0x6c>)
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	b292      	uxth	r2, r2
 80071e4:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 80071e6:	4b05      	ldr	r3, [pc, #20]	; (80071fc <rfalErrorHandling+0x6c>)
 80071e8:	2228      	movs	r2, #40	; 0x28
 80071ea:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80071ec:	4b03      	ldr	r3, [pc, #12]	; (80071fc <rfalErrorHandling+0x6c>)
 80071ee:	225a      	movs	r2, #90	; 0x5a
 80071f0:	751a      	strb	r2, [r3, #20]
            }
        }
    }
    
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20000598 	.word	0x20000598

08007200 <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 8007204:	21e0      	movs	r1, #224	; 0xe0
 8007206:	2005      	movs	r0, #5
 8007208:	f001 fd4c 	bl	8008ca4 <st25r3916ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800720c:	2108      	movs	r1, #8
 800720e:	200c      	movs	r0, #12
 8007210:	f001 fd7f 	bl	8008d12 <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Transceive timers                                                           */
    /*******************************************************************************/
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 8007214:	4b05      	ldr	r3, [pc, #20]	; (800722c <rfalCleanupTransceive+0x2c>)
 8007216:	2200      	movs	r2, #0
 8007218:	645a      	str	r2, [r3, #68]	; 0x44
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 800721a:	4b04      	ldr	r3, [pc, #16]	; (800722c <rfalCleanupTransceive+0x2c>)
 800721c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <rfalCleanupTransceive+0x28>
    {
        gRFAL.callbacks.postTxRx();
 8007222:	4b02      	ldr	r3, [pc, #8]	; (800722c <rfalCleanupTransceive+0x2c>)
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 8007228:	bf00      	nop
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20000598 	.word	0x20000598

08007230 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
    uint32_t maskInterrupts;
    uint8_t  reg;
    
    /* If we are in RW or AP2P mode */
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 8007236:	4b64      	ldr	r3, [pc, #400]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007238:	785b      	ldrb	r3, [r3, #1]
 800723a:	2b0a      	cmp	r3, #10
 800723c:	d00e      	beq.n	800725c <rfalPrepareTransceive+0x2c>
 800723e:	4b62      	ldr	r3, [pc, #392]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007240:	785b      	ldrb	r3, [r3, #1]
 8007242:	2b0b      	cmp	r3, #11
 8007244:	d00a      	beq.n	800725c <rfalPrepareTransceive+0x2c>
 8007246:	4b60      	ldr	r3, [pc, #384]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	2b0c      	cmp	r3, #12
 800724c:	d006      	beq.n	800725c <rfalPrepareTransceive+0x2c>
    {
        /* Reset receive logic with STOP command */
        st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 800724e:	20c2      	movs	r0, #194	; 0xc2
 8007250:	f001 fcc7 	bl	8008be2 <st25r3916ExecuteCommand>
    
        /* Reset Rx Gain */
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 8007254:	20d5      	movs	r0, #213	; 0xd5
 8007256:	f001 fcc4 	bl	8008be2 <st25r3916ExecuteCommand>
 800725a:	e002      	b.n	8007262 <rfalPrepareTransceive+0x32>
    }
    else
    {
        /* In Passive Listen Mode do not use STOP as it stops FDT timer */
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800725c:	20db      	movs	r0, #219	; 0xdb
 800725e:	f001 fcc0 	bl	8008be2 <st25r3916ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 8007262:	4b59      	ldr	r3, [pc, #356]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	2b09      	cmp	r3, #9
 8007268:	d01c      	beq.n	80072a4 <rfalPrepareTransceive+0x74>
 800726a:	4b57      	ldr	r3, [pc, #348]	; (80073c8 <rfalPrepareTransceive+0x198>)
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	2b0d      	cmp	r3, #13
 8007270:	d018      	beq.n	80072a4 <rfalPrepareTransceive+0x74>
    {
        /* In Passive communications General Purpose Timer is used to measure FDT Poll */
        if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 8007272:	4b55      	ldr	r3, [pc, #340]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d014      	beq.n	80072a4 <rfalPrepareTransceive+0x74>
        {
            /* Configure GPT to start at RX end */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 800727a:	4b53      	ldr	r3, [pc, #332]	; (80073c8 <rfalPrepareTransceive+0x198>)
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f240 423b 	movw	r2, #1083	; 0x43b
 8007282:	4293      	cmp	r3, r2
 8007284:	d804      	bhi.n	8007290 <rfalPrepareTransceive+0x60>
 8007286:	4b50      	ldr	r3, [pc, #320]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	08db      	lsrs	r3, r3, #3
 800728c:	b29b      	uxth	r3, r3
 800728e:	e005      	b.n	800729c <rfalPrepareTransceive+0x6c>
 8007290:	4b4d      	ldr	r3, [pc, #308]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8007298:	08db      	lsrs	r3, r3, #3
 800729a:	b29b      	uxth	r3, r3
 800729c:	2120      	movs	r1, #32
 800729e:	4618      	mov	r0, r3
 80072a0:	f001 fa0d 	bl	80086be <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 80072a4:	4b48      	ldr	r3, [pc, #288]	; (80073c8 <rfalPrepareTransceive+0x198>)
 80072a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <rfalPrepareTransceive+0x82>
    {
        gRFAL.callbacks.preTxRx();
 80072ac:	4b46      	ldr	r3, [pc, #280]	; (80073c8 <rfalPrepareTransceive+0x198>)
 80072ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b0:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    
    maskInterrupts = ( ST25R3916_IRQ_MASK_FWL  | ST25R3916_IRQ_MASK_TXE  |
 80072b2:	4b46      	ldr	r3, [pc, #280]	; (80073cc <rfalPrepareTransceive+0x19c>)
 80072b4:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3916_REG_ISO14443A_NFC_no_tx_par_off | ST25R3916_REG_ISO14443A_NFC_no_rx_par_off | ST25R3916_REG_ISO14443A_NFC_nfc_f0_off);
 80072b6:	2300      	movs	r3, #0
 80072b8:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 80072ba:	4b43      	ldr	r3, [pc, #268]	; (80073c8 <rfalPrepareTransceive+0x198>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <rfalPrepareTransceive+0x9e>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_nfc_f0;
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	f043 0320 	orr.w	r3, r3, #32
 80072cc:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 80072ce:	4b3e      	ldr	r3, [pc, #248]	; (80073c8 <rfalPrepareTransceive+0x198>)
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	f003 0310 	and.w	r3, r3, #16
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <rfalPrepareTransceive+0xb2>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_rx_par;
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e0:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 80072e2:	4b39      	ldr	r3, [pc, #228]	; (80073c8 <rfalPrepareTransceive+0x198>)
 80072e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <rfalPrepareTransceive+0xc6>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_tx_par;
 80072ee:	78fb      	ldrb	r3, [r7, #3]
 80072f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072f4:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0), reg );
 80072f6:	78fb      	ldrb	r3, [r7, #3]
 80072f8:	461a      	mov	r2, r3
 80072fa:	21e0      	movs	r1, #224	; 0xe0
 80072fc:	2005      	movs	r0, #5
 80072fe:	f001 fd35 	bl	8008d6c <st25r3916ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 8007302:	4b31      	ldr	r3, [pc, #196]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	f003 0308 	and.w	r3, r3, #8
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <rfalPrepareTransceive+0xe8>
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800730e:	2108      	movs	r1, #8
 8007310:	200c      	movs	r0, #12
 8007312:	f001 fcc7 	bl	8008ca4 <st25r3916ClrRegisterBits>
 8007316:	e003      	b.n	8007320 <rfalPrepareTransceive+0xf0>
    }
    else
    {
        st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 8007318:	2108      	movs	r1, #8
 800731a:	200c      	movs	r0, #12
 800731c:	f001 fcf9 	bl	8008d12 <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 8007320:	4b29      	ldr	r3, [pc, #164]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007322:	79db      	ldrb	r3, [r3, #7]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d108      	bne.n	800733a <rfalPrepareTransceive+0x10a>
    {
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 8007328:	2102      	movs	r1, #2
 800732a:	2012      	movs	r0, #18
 800732c:	f001 fcf1 	bl	8008d12 <st25r3916SetRegisterBits>
        maskInterrupts |= ST25R3916_IRQ_MASK_RX_REST;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f043 0302 	orr.w	r3, r3, #2
 8007336:	607b      	str	r3, [r7, #4]
 8007338:	e003      	b.n	8007342 <rfalPrepareTransceive+0x112>
    }
    else
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800733a:	2102      	movs	r1, #2
 800733c:	2012      	movs	r0, #18
 800733e:	f001 fcb1 	bl	8008ca4 <st25r3916ClrRegisterBits>
    }
    /*******************************************************************************/
    
    /* In Passive Listen mode additionally enable External Field interrupts  */    
    if( rfalIsModePassiveListen( gRFAL.mode ) )
 8007342:	4b21      	ldr	r3, [pc, #132]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b0a      	cmp	r3, #10
 8007348:	d007      	beq.n	800735a <rfalPrepareTransceive+0x12a>
 800734a:	4b1f      	ldr	r3, [pc, #124]	; (80073c8 <rfalPrepareTransceive+0x198>)
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	2b0b      	cmp	r3, #11
 8007350:	d003      	beq.n	800735a <rfalPrepareTransceive+0x12a>
 8007352:	4b1d      	ldr	r3, [pc, #116]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b0c      	cmp	r3, #12
 8007358:	d103      	bne.n	8007362 <rfalPrepareTransceive+0x132>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_F );      /* Enable external Field interrupts to detect Link Loss and SENF_REQ auto responses */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
 8007360:	607b      	str	r3, [r7, #4]
    }
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 8007362:	4b19      	ldr	r3, [pc, #100]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b09      	cmp	r3, #9
 8007368:	d003      	beq.n	8007372 <rfalPrepareTransceive+0x142>
 800736a:	4b17      	ldr	r3, [pc, #92]	; (80073c8 <rfalPrepareTransceive+0x198>)
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	2b0d      	cmp	r3, #13
 8007370:	d105      	bne.n	800737e <rfalPrepareTransceive+0x14e>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007378:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800737c:	607b      	str	r3, [r7, #4]
    }
    
    /*******************************************************************************/
    /* Start transceive Sanity Timer if a FWT is used */
    if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800737e:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007386:	d013      	beq.n	80073b0 <rfalPrepareTransceive+0x180>
 8007388:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <rfalPrepareTransceive+0x198>)
 800738a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00f      	beq.n	80073b0 <rfalPrepareTransceive+0x180>
    {
        rfalTimerStart( gRFAL.tmr.txRx, rfalCalcSanityTmr( gRFAL.TxRx.ctx.fwt ) );
 8007390:	4b0d      	ldr	r3, [pc, #52]	; (80073c8 <rfalPrepareTransceive+0x198>)
 8007392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007394:	4a0e      	ldr	r2, [pc, #56]	; (80073d0 <rfalPrepareTransceive+0x1a0>)
 8007396:	fba2 2303 	umull	r2, r3, r2, r3
 800739a:	0b1b      	lsrs	r3, r3, #12
 800739c:	b29b      	uxth	r3, r3
 800739e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7f9 fa69 	bl	800087c <timerCalculateTimer>
 80073aa:	4602      	mov	r2, r0
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <rfalPrepareTransceive+0x198>)
 80073ae:	645a      	str	r2, [r3, #68]	; 0x44
    /*******************************************************************************/
    
    
    /*******************************************************************************/
    /* Clear and enable these interrupts */
    st25r3916GetInterrupt( maskInterrupts );
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 fee9 	bl	8009188 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( maskInterrupts );
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 ff1e 	bl	80091f8 <st25r3916EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 80073bc:	f000 fdc8 	bl	8007f50 <rfalFIFOStatusClear>
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000598 	.word	0x20000598
 80073cc:	00f04078 	.word	0x00f04078
 80073d0:	4d542005 	.word	0x4d542005

080073d4 <rfalTransceiveTx>:


/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 80073d4:	b5b0      	push	{r4, r5, r7, lr}
 80073d6:	b08a      	sub	sp, #40	; 0x28
 80073d8:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 80073da:	2300      	movs	r3, #0
 80073dc:	81fb      	strh	r3, [r7, #14]
    NO_WARNING( ret );
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 80073de:	2300      	movs	r3, #0
 80073e0:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 80073e2:	4ba1      	ldr	r3, [pc, #644]	; (8007668 <rfalTransceiveTx+0x294>)
 80073e4:	7d1a      	ldrb	r2, [r3, #20]
 80073e6:	4ba0      	ldr	r3, [pc, #640]	; (8007668 <rfalTransceiveTx+0x294>)
 80073e8:	7d5b      	ldrb	r3, [r3, #21]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d003      	beq.n	80073f6 <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 80073ee:	4b9e      	ldr	r3, [pc, #632]	; (8007668 <rfalTransceiveTx+0x294>)
 80073f0:	7d1a      	ldrb	r2, [r3, #20]
 80073f2:	4b9d      	ldr	r3, [pc, #628]	; (8007668 <rfalTransceiveTx+0x294>)
 80073f4:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 80073f6:	4b9c      	ldr	r3, [pc, #624]	; (8007668 <rfalTransceiveTx+0x294>)
 80073f8:	7d1b      	ldrb	r3, [r3, #20]
 80073fa:	3b0b      	subs	r3, #11
 80073fc:	2b08      	cmp	r3, #8
 80073fe:	f200 8212 	bhi.w	8007826 <rfalTransceiveTx+0x452>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <rfalTransceiveTx+0x34>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	0800742d 	.word	0x0800742d
 800740c:	08007433 	.word	0x08007433
 8007410:	08007451 	.word	0x08007451
 8007414:	08007479 	.word	0x08007479
 8007418:	080075f9 	.word	0x080075f9
 800741c:	08007635 	.word	0x08007635
 8007420:	08007777 	.word	0x08007777
 8007424:	080077b1 	.word	0x080077b1
 8007428:	080077fd 	.word	0x080077fd
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 800742c:	4b8e      	ldr	r3, [pc, #568]	; (8007668 <rfalTransceiveTx+0x294>)
 800742e:	220c      	movs	r2, #12
 8007430:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 8007432:	f7ff fc29 	bl	8006c88 <rfalIsGTExpired>
 8007436:	4603      	mov	r3, r0
 8007438:	f083 0301 	eor.w	r3, r3, #1
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	f040 81f8 	bne.w	8007834 <rfalTransceiveTx+0x460>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8007444:	4b88      	ldr	r3, [pc, #544]	; (8007668 <rfalTransceiveTx+0x294>)
 8007446:	2200      	movs	r2, #0
 8007448:	63da      	str	r2, [r3, #60]	; 0x3c
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 800744a:	4b87      	ldr	r3, [pc, #540]	; (8007668 <rfalTransceiveTx+0x294>)
 800744c:	220d      	movs	r2, #13
 800744e:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 8007450:	4b85      	ldr	r3, [pc, #532]	; (8007668 <rfalTransceiveTx+0x294>)
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	2b09      	cmp	r3, #9
 8007456:	d00c      	beq.n	8007472 <rfalTransceiveTx+0x9e>
 8007458:	4b83      	ldr	r3, [pc, #524]	; (8007668 <rfalTransceiveTx+0x294>)
 800745a:	785b      	ldrb	r3, [r3, #1]
 800745c:	2b0d      	cmp	r3, #13
 800745e:	d008      	beq.n	8007472 <rfalTransceiveTx+0x9e>
            {
                if( st25r3916IsGPTRunning() )
 8007460:	2204      	movs	r2, #4
 8007462:	2104      	movs	r1, #4
 8007464:	2024      	movs	r0, #36	; 0x24
 8007466:	f001 fd05 	bl	8008e74 <st25r3916CheckReg>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	f040 81e3 	bne.w	8007838 <rfalTransceiveTx+0x464>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 8007472:	4b7d      	ldr	r3, [pc, #500]	; (8007668 <rfalTransceiveTx+0x294>)
 8007474:	220e      	movs	r2, #14
 8007476:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 8007478:	f7ff feda 	bl	8007230 <rfalPrepareTransceive>

            /* ST25R3916 has a fixed FIFO water level */
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 800747c:	4b7a      	ldr	r3, [pc, #488]	; (8007668 <rfalTransceiveTx+0x294>)
 800747e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007482:	869a      	strh	r2, [r3, #52]	; 0x34

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8007484:	4b78      	ldr	r3, [pc, #480]	; (8007668 <rfalTransceiveTx+0x294>)
 8007486:	785b      	ldrb	r3, [r3, #1]
 8007488:	2b07      	cmp	r3, #7
 800748a:	d003      	beq.n	8007494 <rfalTransceiveTx+0xc0>
 800748c:	4b76      	ldr	r3, [pc, #472]	; (8007668 <rfalTransceiveTx+0x294>)
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b08      	cmp	r3, #8
 8007492:	d152      	bne.n	800753a <rfalTransceiveTx+0x166>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3916WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
#endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 8007494:	4b74      	ldr	r3, [pc, #464]	; (8007668 <rfalTransceiveTx+0x294>)
 8007496:	2200      	movs	r2, #0
 8007498:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800749c:	4b72      	ldr	r3, [pc, #456]	; (8007668 <rfalTransceiveTx+0x294>)
 800749e:	6998      	ldr	r0, [r3, #24]
 80074a0:	4b71      	ldr	r3, [pc, #452]	; (8007668 <rfalTransceiveTx+0x294>)
 80074a2:	8b9b      	ldrh	r3, [r3, #28]
 80074a4:	3307      	adds	r3, #7
 80074a6:	08db      	lsrs	r3, r3, #3
 80074a8:	b299      	uxth	r1, r3
 80074aa:	4b6f      	ldr	r3, [pc, #444]	; (8007668 <rfalTransceiveTx+0x294>)
 80074ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	bf0c      	ite	eq
 80074b8:	2301      	moveq	r3, #1
 80074ba:	2300      	movne	r3, #0
 80074bc:	b2dc      	uxtb	r4, r3
 80074be:	4b6a      	ldr	r3, [pc, #424]	; (8007668 <rfalTransceiveTx+0x294>)
 80074c0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80074c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bf0c      	ite	eq
 80074cc:	2301      	moveq	r3, #1
 80074ce:	2300      	movne	r3, #0
 80074d0:	b2dd      	uxtb	r5, r3
 80074d2:	4b65      	ldr	r3, [pc, #404]	; (8007668 <rfalTransceiveTx+0x294>)
 80074d4:	785b      	ldrb	r3, [r3, #1]
 80074d6:	2b08      	cmp	r3, #8
 80074d8:	bf0c      	ite	eq
 80074da:	2301      	moveq	r3, #1
 80074dc:	2300      	movne	r3, #0
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	4a62      	ldr	r2, [pc, #392]	; (800766c <rfalTransceiveTx+0x298>)
 80074e2:	9205      	str	r2, [sp, #20]
 80074e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074e8:	9204      	str	r2, [sp, #16]
 80074ea:	4a61      	ldr	r2, [pc, #388]	; (8007670 <rfalTransceiveTx+0x29c>)
 80074ec:	9203      	str	r2, [sp, #12]
 80074ee:	4a61      	ldr	r2, [pc, #388]	; (8007674 <rfalTransceiveTx+0x2a0>)
 80074f0:	9202      	str	r2, [sp, #8]
 80074f2:	4a61      	ldr	r2, [pc, #388]	; (8007678 <rfalTransceiveTx+0x2a4>)
 80074f4:	9201      	str	r2, [sp, #4]
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	462b      	mov	r3, r5
 80074fa:	4622      	mov	r2, r4
 80074fc:	f7fe f938 	bl	8005770 <iso15693VCDCode>
 8007500:	4603      	mov	r3, r0
 8007502:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3916_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 8007504:	89fb      	ldrh	r3, [r7, #14]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <rfalTransceiveTx+0x14a>
 800750a:	89fb      	ldrh	r3, [r7, #14]
 800750c:	2b0d      	cmp	r3, #13
 800750e:	d006      	beq.n	800751e <rfalTransceiveTx+0x14a>
                {
                    gRFAL.TxRx.status = ret;
 8007510:	4a55      	ldr	r2, [pc, #340]	; (8007668 <rfalTransceiveTx+0x294>)
 8007512:	89fb      	ldrh	r3, [r7, #14]
 8007514:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8007516:	4b54      	ldr	r3, [pc, #336]	; (8007668 <rfalTransceiveTx+0x294>)
 8007518:	2213      	movs	r2, #19
 800751a:	751a      	strb	r2, [r3, #20]
                    break;
 800751c:	e193      	b.n	8007846 <rfalTransceiveTx+0x472>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( (uint16_t)rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 800751e:	4b52      	ldr	r3, [pc, #328]	; (8007668 <rfalTransceiveTx+0x294>)
 8007520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	b29b      	uxth	r3, r3
 8007526:	4618      	mov	r0, r3
 8007528:	f001 f85c 	bl	80085e4 <st25r3916SetNumTxBits>

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, gRFAL.fifo.bytesWritten );
 800752c:	4b4e      	ldr	r3, [pc, #312]	; (8007668 <rfalTransceiveTx+0x294>)
 800752e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007530:	4619      	mov	r1, r3
 8007532:	484f      	ldr	r0, [pc, #316]	; (8007670 <rfalTransceiveTx+0x29c>)
 8007534:	f001 fb16 	bl	8008b64 <st25r3916WriteFifo>
 8007538:	e01d      	b.n	8007576 <rfalTransceiveTx+0x1a2>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 800753a:	4b4b      	ldr	r3, [pc, #300]	; (8007668 <rfalTransceiveTx+0x294>)
 800753c:	8b9b      	ldrh	r3, [r3, #28]
 800753e:	3307      	adds	r3, #7
 8007540:	08db      	lsrs	r3, r3, #3
 8007542:	b29a      	uxth	r2, r3
 8007544:	4b48      	ldr	r3, [pc, #288]	; (8007668 <rfalTransceiveTx+0x294>)
 8007546:	86da      	strh	r2, [r3, #54]	; 0x36
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 8007548:	4b47      	ldr	r3, [pc, #284]	; (8007668 <rfalTransceiveTx+0x294>)
 800754a:	8b9b      	ldrh	r3, [r3, #28]
 800754c:	4618      	mov	r0, r3
 800754e:	f001 f849 	bl	80085e4 <st25r3916SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 8007552:	4b45      	ldr	r3, [pc, #276]	; (8007668 <rfalTransceiveTx+0x294>)
 8007554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800755a:	bf28      	it	cs
 800755c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007560:	b29a      	uxth	r2, r3
 8007562:	4b41      	ldr	r3, [pc, #260]	; (8007668 <rfalTransceiveTx+0x294>)
 8007564:	871a      	strh	r2, [r3, #56]	; 0x38
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 8007566:	4b40      	ldr	r3, [pc, #256]	; (8007668 <rfalTransceiveTx+0x294>)
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	4b3f      	ldr	r3, [pc, #252]	; (8007668 <rfalTransceiveTx+0x294>)
 800756c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800756e:	4619      	mov	r1, r3
 8007570:	4610      	mov	r0, r2
 8007572:	f001 faf7 	bl	8008b64 <st25r3916WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx();
 8007576:	4b3c      	ldr	r3, [pc, #240]	; (8007668 <rfalTransceiveTx+0x294>)
 8007578:	795b      	ldrb	r3, [r3, #5]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d008      	beq.n	8007590 <rfalTransceiveTx+0x1bc>
 800757e:	4b3a      	ldr	r3, [pc, #232]	; (8007668 <rfalTransceiveTx+0x294>)
 8007580:	795b      	ldrb	r3, [r3, #5]
 8007582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007586:	b2db      	uxtb	r3, r3
 8007588:	4619      	mov	r1, r3
 800758a:	2001      	movs	r0, #1
 800758c:	f001 fb65 	bl	8008c5a <st25r3916WriteTestRegister>
            
            
            /*******************************************************************************/
            /* If we're in Passive Listen mode ensure that the external field is still On  */
            if( rfalIsModePassiveListen(gRFAL.mode) )
 8007590:	4b35      	ldr	r3, [pc, #212]	; (8007668 <rfalTransceiveTx+0x294>)
 8007592:	785b      	ldrb	r3, [r3, #1]
 8007594:	2b0a      	cmp	r3, #10
 8007596:	d007      	beq.n	80075a8 <rfalTransceiveTx+0x1d4>
 8007598:	4b33      	ldr	r3, [pc, #204]	; (8007668 <rfalTransceiveTx+0x294>)
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	2b0b      	cmp	r3, #11
 800759e:	d003      	beq.n	80075a8 <rfalTransceiveTx+0x1d4>
 80075a0:	4b31      	ldr	r3, [pc, #196]	; (8007668 <rfalTransceiveTx+0x294>)
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b0c      	cmp	r3, #12
 80075a6:	d10e      	bne.n	80075c6 <rfalTransceiveTx+0x1f2>
            {
                if( !rfalIsExtFieldOn() )
 80075a8:	f000 fdfe 	bl	80081a8 <rfalIsExtFieldOn>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f083 0301 	eor.w	r3, r3, #1
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d006      	beq.n	80075c6 <rfalTransceiveTx+0x1f2>
                {
                    gRFAL.TxRx.status = ERR_LINK_LOSS;
 80075b8:	4b2b      	ldr	r3, [pc, #172]	; (8007668 <rfalTransceiveTx+0x294>)
 80075ba:	2225      	movs	r2, #37	; 0x25
 80075bc:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 80075be:	4b2a      	ldr	r3, [pc, #168]	; (8007668 <rfalTransceiveTx+0x294>)
 80075c0:	2213      	movs	r2, #19
 80075c2:	751a      	strb	r2, [r3, #20]
                    break;
 80075c4:	e13f      	b.n	8007846 <rfalTransceiveTx+0x472>
                }
            }
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 80075c6:	4b28      	ldr	r3, [pc, #160]	; (8007668 <rfalTransceiveTx+0x294>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <rfalTransceiveTx+0x206>
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITHOUT_CRC );
 80075d2:	20c5      	movs	r0, #197	; 0xc5
 80075d4:	f001 fb05 	bl	8008be2 <st25r3916ExecuteCommand>
 80075d8:	e002      	b.n	80075e0 <rfalTransceiveTx+0x20c>
            }
            else
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITH_CRC );
 80075da:	20c4      	movs	r0, #196	; 0xc4
 80075dc:	f001 fb01 	bl	8008be2 <st25r3916ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 80075e0:	4b21      	ldr	r3, [pc, #132]	; (8007668 <rfalTransceiveTx+0x294>)
 80075e2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80075e4:	4b20      	ldr	r3, [pc, #128]	; (8007668 <rfalTransceiveTx+0x294>)
 80075e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d201      	bcs.n	80075f0 <rfalTransceiveTx+0x21c>
 80075ec:	220f      	movs	r2, #15
 80075ee:	e000      	b.n	80075f2 <rfalTransceiveTx+0x21e>
 80075f0:	2211      	movs	r2, #17
 80075f2:	4b1d      	ldr	r3, [pc, #116]	; (8007668 <rfalTransceiveTx+0x294>)
 80075f4:	751a      	strb	r2, [r3, #20]
            break;
 80075f6:	e126      	b.n	8007846 <rfalTransceiveTx+0x472>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 80075f8:	2048      	movs	r0, #72	; 0x48
 80075fa:	f001 fdc5 	bl	8009188 <st25r3916GetInterrupt>
 80075fe:	4603      	mov	r3, r0
 8007600:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 8119 	beq.w	800783c <rfalTransceiveTx+0x468>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_TXE) == 0U) )
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007610:	2b00      	cmp	r3, #0
 8007612:	d008      	beq.n	8007626 <rfalTransceiveTx+0x252>
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d103      	bne.n	8007626 <rfalTransceiveTx+0x252>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <rfalTransceiveTx+0x294>)
 8007620:	2210      	movs	r2, #16
 8007622:	751a      	strb	r2, [r3, #20]
 8007624:	e006      	b.n	8007634 <rfalTransceiveTx+0x260>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 8007626:	4b10      	ldr	r3, [pc, #64]	; (8007668 <rfalTransceiveTx+0x294>)
 8007628:	2203      	movs	r2, #3
 800762a:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800762c:	4b0e      	ldr	r3, [pc, #56]	; (8007668 <rfalTransceiveTx+0x294>)
 800762e:	2213      	movs	r2, #19
 8007630:	751a      	strb	r2, [r3, #20]
                break;
 8007632:	e108      	b.n	8007846 <rfalTransceiveTx+0x472>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <rfalTransceiveTx+0x294>)
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	2b07      	cmp	r3, #7
 800763a:	d003      	beq.n	8007644 <rfalTransceiveTx+0x270>
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <rfalTransceiveTx+0x294>)
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b08      	cmp	r3, #8
 8007642:	d16d      	bne.n	8007720 <rfalTransceiveTx+0x34c>
            {
                uint16_t maxLen;
                                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8007644:	4b08      	ldr	r3, [pc, #32]	; (8007668 <rfalTransceiveTx+0x294>)
 8007646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007648:	461a      	mov	r2, r3
 800764a:	4b07      	ldr	r3, [pc, #28]	; (8007668 <rfalTransceiveTx+0x294>)
 800764c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	4a05      	ldr	r2, [pc, #20]	; (8007668 <rfalTransceiveTx+0x294>)
 8007652:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8007654:	4293      	cmp	r3, r2
 8007656:	da11      	bge.n	800767c <rfalTransceiveTx+0x2a8>
 8007658:	4b03      	ldr	r3, [pc, #12]	; (8007668 <rfalTransceiveTx+0x294>)
 800765a:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800765c:	4b02      	ldr	r3, [pc, #8]	; (8007668 <rfalTransceiveTx+0x294>)
 800765e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	b29b      	uxth	r3, r3
 8007664:	e00c      	b.n	8007680 <rfalTransceiveTx+0x2ac>
 8007666:	bf00      	nop
 8007668:	20000598 	.word	0x20000598
 800766c:	200005d0 	.word	0x200005d0
 8007670:	200005e8 	.word	0x200005e8
 8007674:	200007f0 	.word	0x200007f0
 8007678:	200005ce 	.word	0x200005ce
 800767c:	4b74      	ldr	r3, [pc, #464]	; (8007850 <rfalTransceiveTx+0x47c>)
 800767e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007680:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 8007682:	89bb      	ldrh	r3, [r7, #12]
 8007684:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8007688:	bf28      	it	cs
 800768a:	f44f 7302 	movcs.w	r3, #520	; 0x208
 800768e:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8007694:	4b6e      	ldr	r3, [pc, #440]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007696:	6998      	ldr	r0, [r3, #24]
 8007698:	4b6d      	ldr	r3, [pc, #436]	; (8007850 <rfalTransceiveTx+0x47c>)
 800769a:	8b9b      	ldrh	r3, [r3, #28]
 800769c:	3307      	adds	r3, #7
 800769e:	08db      	lsrs	r3, r3, #3
 80076a0:	b299      	uxth	r1, r3
 80076a2:	4b6b      	ldr	r3, [pc, #428]	; (8007850 <rfalTransceiveTx+0x47c>)
 80076a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bf0c      	ite	eq
 80076b0:	2301      	moveq	r3, #1
 80076b2:	2300      	movne	r3, #0
 80076b4:	b2dc      	uxtb	r4, r3
 80076b6:	4b66      	ldr	r3, [pc, #408]	; (8007850 <rfalTransceiveTx+0x47c>)
 80076b8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80076bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	bf0c      	ite	eq
 80076c4:	2301      	moveq	r3, #1
 80076c6:	2300      	movne	r3, #0
 80076c8:	b2dd      	uxtb	r5, r3
 80076ca:	4b61      	ldr	r3, [pc, #388]	; (8007850 <rfalTransceiveTx+0x47c>)
 80076cc:	785b      	ldrb	r3, [r3, #1]
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	bf0c      	ite	eq
 80076d2:	2301      	moveq	r3, #1
 80076d4:	2300      	movne	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	1dba      	adds	r2, r7, #6
 80076da:	9205      	str	r2, [sp, #20]
 80076dc:	89ba      	ldrh	r2, [r7, #12]
 80076de:	9204      	str	r2, [sp, #16]
 80076e0:	4a5c      	ldr	r2, [pc, #368]	; (8007854 <rfalTransceiveTx+0x480>)
 80076e2:	9203      	str	r2, [sp, #12]
 80076e4:	4a5c      	ldr	r2, [pc, #368]	; (8007858 <rfalTransceiveTx+0x484>)
 80076e6:	9202      	str	r2, [sp, #8]
 80076e8:	4a5c      	ldr	r2, [pc, #368]	; (800785c <rfalTransceiveTx+0x488>)
 80076ea:	9201      	str	r2, [sp, #4]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	462b      	mov	r3, r5
 80076f0:	4622      	mov	r2, r4
 80076f2:	f7fe f83d 	bl	8005770 <iso15693VCDCode>
 80076f6:	4603      	mov	r3, r0
 80076f8:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 80076fa:	89fb      	ldrh	r3, [r7, #14]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d009      	beq.n	8007714 <rfalTransceiveTx+0x340>
 8007700:	89fb      	ldrh	r3, [r7, #14]
 8007702:	2b0d      	cmp	r3, #13
 8007704:	d006      	beq.n	8007714 <rfalTransceiveTx+0x340>
                {
                    gRFAL.TxRx.status = ret;
 8007706:	4a52      	ldr	r2, [pc, #328]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007708:	89fb      	ldrh	r3, [r7, #14]
 800770a:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800770c:	4b50      	ldr	r3, [pc, #320]	; (8007850 <rfalTransceiveTx+0x47c>)
 800770e:	2213      	movs	r2, #19
 8007710:	751a      	strb	r2, [r3, #20]
                    break;
 8007712:	e098      	b.n	8007846 <rfalTransceiveTx+0x472>
                }

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, tmp );
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	4619      	mov	r1, r3
 8007718:	484e      	ldr	r0, [pc, #312]	; (8007854 <rfalTransceiveTx+0x480>)
 800771a:	f001 fa23 	bl	8008b64 <st25r3916WriteFifo>
            {
 800771e:	e017      	b.n	8007750 <rfalTransceiveTx+0x37c>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 8007720:	4b4b      	ldr	r3, [pc, #300]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007722:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007724:	461a      	mov	r2, r3
 8007726:	4b4a      	ldr	r3, [pc, #296]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800772a:	4619      	mov	r1, r3
 800772c:	4b48      	ldr	r3, [pc, #288]	; (8007850 <rfalTransceiveTx+0x47c>)
 800772e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007730:	1acb      	subs	r3, r1, r3
 8007732:	4293      	cmp	r3, r2
 8007734:	bfa8      	it	ge
 8007736:	4613      	movge	r3, r2
 8007738:	b29b      	uxth	r3, r3
 800773a:	80fb      	strh	r3, [r7, #6]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 800773c:	4b44      	ldr	r3, [pc, #272]	; (8007850 <rfalTransceiveTx+0x47c>)
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	4a43      	ldr	r2, [pc, #268]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007742:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8007744:	4413      	add	r3, r2
 8007746:	88fa      	ldrh	r2, [r7, #6]
 8007748:	4611      	mov	r1, r2
 800774a:	4618      	mov	r0, r3
 800774c:	f001 fa0a 	bl	8008b64 <st25r3916WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 8007750:	4b3f      	ldr	r3, [pc, #252]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007752:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8007754:	88fb      	ldrh	r3, [r7, #6]
 8007756:	4413      	add	r3, r2
 8007758:	b29a      	uxth	r2, r3
 800775a:	4b3d      	ldr	r3, [pc, #244]	; (8007850 <rfalTransceiveTx+0x47c>)
 800775c:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800775e:	4b3c      	ldr	r3, [pc, #240]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007760:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8007762:	4b3b      	ldr	r3, [pc, #236]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007766:	429a      	cmp	r2, r3
 8007768:	d201      	bcs.n	800776e <rfalTransceiveTx+0x39a>
 800776a:	220f      	movs	r2, #15
 800776c:	e000      	b.n	8007770 <rfalTransceiveTx+0x39c>
 800776e:	2211      	movs	r2, #17
 8007770:	4b37      	ldr	r3, [pc, #220]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007772:	751a      	strb	r2, [r3, #20]
            break;
 8007774:	e067      	b.n	8007846 <rfalTransceiveTx+0x472>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 8007776:	2048      	movs	r0, #72	; 0x48
 8007778:	f001 fd06 	bl	8009188 <st25r3916GetInterrupt>
 800777c:	4603      	mov	r3, r0
 800777e:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d05c      	beq.n	8007840 <rfalTransceiveTx+0x46c>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3916_IRQ_MASK_TXE) != 0U )
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <rfalTransceiveTx+0x3c4>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 8007790:	4b2f      	ldr	r3, [pc, #188]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007792:	2212      	movs	r2, #18
 8007794:	751a      	strb	r2, [r3, #20]
 8007796:	e00b      	b.n	80077b0 <rfalTransceiveTx+0x3dc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_FWL) != 0U )
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d150      	bne.n	8007844 <rfalTransceiveTx+0x470>
            {
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 80077a2:	4b2b      	ldr	r3, [pc, #172]	; (8007850 <rfalTransceiveTx+0x47c>)
 80077a4:	2203      	movs	r2, #3
 80077a6:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 80077a8:	4b29      	ldr	r3, [pc, #164]	; (8007850 <rfalTransceiveTx+0x47c>)
 80077aa:	2213      	movs	r2, #19
 80077ac:	751a      	strb	r2, [r3, #20]
               break;
 80077ae:	e04a      	b.n	8007846 <rfalTransceiveTx+0x472>
                           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 80077b0:	4b27      	ldr	r3, [pc, #156]	; (8007850 <rfalTransceiveTx+0x47c>)
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d110      	bne.n	80077da <rfalTransceiveTx+0x406>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 80077b8:	4b25      	ldr	r3, [pc, #148]	; (8007850 <rfalTransceiveTx+0x47c>)
 80077ba:	799b      	ldrb	r3, [r3, #6]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <rfalTransceiveTx+0x3f4>
 80077c0:	2140      	movs	r1, #64	; 0x40
 80077c2:	2001      	movs	r0, #1
 80077c4:	f001 fa49 	bl	8008c5a <st25r3916WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 80077c8:	f7ff fd1a 	bl	8007200 <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 80077cc:	4b20      	ldr	r3, [pc, #128]	; (8007850 <rfalTransceiveTx+0x47c>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 80077d2:	4b1f      	ldr	r3, [pc, #124]	; (8007850 <rfalTransceiveTx+0x47c>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	751a      	strb	r2, [r3, #20]
                break;
 80077d8:	e035      	b.n	8007846 <rfalTransceiveTx+0x472>
            }
            
            rfalCheckEnableObsModeRx();
 80077da:	4b1d      	ldr	r3, [pc, #116]	; (8007850 <rfalTransceiveTx+0x47c>)
 80077dc:	799b      	ldrb	r3, [r3, #6]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d008      	beq.n	80077f4 <rfalTransceiveTx+0x420>
 80077e2:	4b1b      	ldr	r3, [pc, #108]	; (8007850 <rfalTransceiveTx+0x47c>)
 80077e4:	799b      	ldrb	r3, [r3, #6]
 80077e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	4619      	mov	r1, r3
 80077ee:	2001      	movs	r0, #1
 80077f0:	f001 fa33 	bl	8008c5a <st25r3916WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 80077f4:	4b16      	ldr	r3, [pc, #88]	; (8007850 <rfalTransceiveTx+0x47c>)
 80077f6:	2251      	movs	r2, #81	; 0x51
 80077f8:	751a      	strb	r2, [r3, #20]
            break;
 80077fa:	e024      	b.n	8007846 <rfalTransceiveTx+0x472>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 80077fc:	4b14      	ldr	r3, [pc, #80]	; (8007850 <rfalTransceiveTx+0x47c>)
 80077fe:	8adb      	ldrh	r3, [r3, #22]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d102      	bne.n	800780a <rfalTransceiveTx+0x436>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 8007804:	4b12      	ldr	r3, [pc, #72]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007806:	2208      	movs	r2, #8
 8007808:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800780a:	4b11      	ldr	r3, [pc, #68]	; (8007850 <rfalTransceiveTx+0x47c>)
 800780c:	799b      	ldrb	r3, [r3, #6]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <rfalTransceiveTx+0x446>
 8007812:	2140      	movs	r1, #64	; 0x40
 8007814:	2001      	movs	r0, #1
 8007816:	f001 fa20 	bl	8008c5a <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800781a:	f7ff fcf1 	bl	8007200 <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800781e:	4b0c      	ldr	r3, [pc, #48]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007820:	2200      	movs	r2, #0
 8007822:	751a      	strb	r2, [r3, #20]
            break;
 8007824:	e00f      	b.n	8007846 <rfalTransceiveTx+0x472>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 8007826:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <rfalTransceiveTx+0x47c>)
 8007828:	2208      	movs	r2, #8
 800782a:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800782c:	4b08      	ldr	r3, [pc, #32]	; (8007850 <rfalTransceiveTx+0x47c>)
 800782e:	2213      	movs	r2, #19
 8007830:	751a      	strb	r2, [r3, #20]
            break;
 8007832:	e008      	b.n	8007846 <rfalTransceiveTx+0x472>
                break;
 8007834:	bf00      	nop
 8007836:	e006      	b.n	8007846 <rfalTransceiveTx+0x472>
                   break;
 8007838:	bf00      	nop
 800783a:	e004      	b.n	8007846 <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 800783c:	bf00      	nop
 800783e:	e002      	b.n	8007846 <rfalTransceiveTx+0x472>
               break;  /* No interrupt to process */
 8007840:	bf00      	nop
 8007842:	e000      	b.n	8007846 <rfalTransceiveTx+0x472>
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
 8007844:	bf00      	nop
    }
}
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bdb0      	pop	{r4, r5, r7, pc}
 800784e:	bf00      	nop
 8007850:	20000598 	.word	0x20000598
 8007854:	200005e8 	.word	0x200005e8
 8007858:	200007f0 	.word	0x200007f0
 800785c:	200005ce 	.word	0x200005ce

08007860 <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 8007860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007862:	b089      	sub	sp, #36	; 0x24
 8007864:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint16_t          tmp;
    uint16_t          aux;
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 8007866:	2300      	movs	r3, #0
 8007868:	607b      	str	r3, [r7, #4]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800786a:	4baf      	ldr	r3, [pc, #700]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 800786c:	7d1a      	ldrb	r2, [r3, #20]
 800786e:	4bae      	ldr	r3, [pc, #696]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007870:	7d5b      	ldrb	r3, [r3, #21]
 8007872:	429a      	cmp	r2, r3
 8007874:	d003      	beq.n	800787e <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 8007876:	4bac      	ldr	r3, [pc, #688]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007878:	7d1a      	ldrb	r2, [r3, #20]
 800787a:	4bab      	ldr	r3, [pc, #684]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 800787c:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800787e:	4baa      	ldr	r3, [pc, #680]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007880:	7d1b      	ldrb	r3, [r3, #20]
 8007882:	3b51      	subs	r3, #81	; 0x51
 8007884:	2b09      	cmp	r3, #9
 8007886:	f200 8339 	bhi.w	8007efc <rfalTransceiveRx+0x69c>
 800788a:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <rfalTransceiveRx+0x30>)
 800788c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007890:	080078b9 	.word	0x080078b9
 8007894:	08007e69 	.word	0x08007e69
 8007898:	080078f1 	.word	0x080078f1
 800789c:	08007995 	.word	0x08007995
 80078a0:	08007dad 	.word	0x08007dad
 80078a4:	08007a73 	.word	0x08007a73
 80078a8:	08007ba7 	.word	0x08007ba7
 80078ac:	08007eb3 	.word	0x08007eb3
 80078b0:	08007d85 	.word	0x08007d85
 80078b4:	08007e3f 	.word	0x08007e3f
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 80078b8:	4b9b      	ldr	r3, [pc, #620]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	871a      	strh	r2, [r3, #56]	; 0x38
            gRFAL.fifo.bytesTotal     = 0;            /* Total bytes in FIFO will now be from Rx */
 80078be:	4b9a      	ldr	r3, [pc, #616]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	86da      	strh	r2, [r3, #54]	; 0x36
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 80078c4:	4b98      	ldr	r3, [pc, #608]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 80078cc:	4b96      	ldr	r3, [pc, #600]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 80078ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d0:	2200      	movs	r2, #0
 80078d2:	801a      	strh	r2, [r3, #0]
            }
           
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 80078d4:	4b94      	ldr	r3, [pc, #592]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 80078d6:	785b      	ldrb	r3, [r3, #1]
 80078d8:	2b09      	cmp	r3, #9
 80078da:	d003      	beq.n	80078e4 <rfalTransceiveRx+0x84>
 80078dc:	4b92      	ldr	r3, [pc, #584]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 80078de:	785b      	ldrb	r3, [r3, #1]
 80078e0:	2b0d      	cmp	r3, #13
 80078e2:	d101      	bne.n	80078e8 <rfalTransceiveRx+0x88>
 80078e4:	2252      	movs	r2, #82	; 0x52
 80078e6:	e000      	b.n	80078ea <rfalTransceiveRx+0x8a>
 80078e8:	2253      	movs	r2, #83	; 0x53
 80078ea:	4b8f      	ldr	r3, [pc, #572]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 80078ec:	751a      	strb	r2, [r3, #20]
            break;
 80078ee:	e315      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
            
            /*******************************************************************************/
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_EOF) );
 80078f0:	f644 0020 	movw	r0, #18464	; 0x4820
 80078f4:	f001 fc48 	bl	8009188 <st25r3916GetInterrupt>
 80078f8:	4603      	mov	r3, r0
 80078fa:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 8303 	beq.w	8007f0a <rfalTransceiveRx+0x6aa>
            {
                break;  /* No interrupt to process */
            }
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode) */
            if( ((irqs & ST25R3916_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <rfalTransceiveRx+0xc6>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f003 0320 	and.w	r3, r3, #32
 8007914:	2b00      	cmp	r3, #0
 8007916:	d106      	bne.n	8007926 <rfalTransceiveRx+0xc6>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 8007918:	4b83      	ldr	r3, [pc, #524]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 800791a:	2204      	movs	r2, #4
 800791c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800791e:	4b82      	ldr	r3, [pc, #520]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007920:	225a      	movs	r2, #90	; 0x5a
 8007922:	751a      	strb	r2, [r3, #20]
                break;
 8007924:	e2fa      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800792c:	2b00      	cmp	r3, #0
 800792e:	d015      	beq.n	800795c <rfalTransceiveRx+0xfc>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d110      	bne.n	800795c <rfalTransceiveRx+0xfc>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800793a:	4b7b      	ldr	r3, [pc, #492]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	2b09      	cmp	r3, #9
 8007940:	d003      	beq.n	800794a <rfalTransceiveRx+0xea>
 8007942:	4b79      	ldr	r3, [pc, #484]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	2b0d      	cmp	r3, #13
 8007948:	d101      	bne.n	800794e <rfalTransceiveRx+0xee>
 800794a:	2204      	movs	r2, #4
 800794c:	e000      	b.n	8007950 <rfalTransceiveRx+0xf0>
 800794e:	2225      	movs	r2, #37	; 0x25
 8007950:	4b75      	ldr	r3, [pc, #468]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007952:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8007954:	4b74      	ldr	r3, [pc, #464]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007956:	225a      	movs	r2, #90	; 0x5a
 8007958:	751a      	strb	r2, [r3, #20]
                break;
 800795a:	e2df      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RXS) != 0U )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00f      	beq.n	8007986 <rfalTransceiveRx+0x126>
            {
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
                /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                /* Use a SW timer to handle an eventual missing RXE                            */
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8007966:	2032      	movs	r0, #50	; 0x32
 8007968:	f7f8 ff88 	bl	800087c <timerCalculateTimer>
 800796c:	4602      	mov	r2, r0
 800796e:	4b6e      	ldr	r3, [pc, #440]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007970:	641a      	str	r2, [r3, #64]	; 0x40
                /*******************************************************************************/
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8007972:	4b6d      	ldr	r3, [pc, #436]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007974:	2254      	movs	r2, #84	; 0x54
 8007976:	751a      	strb	r2, [r3, #20]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
                break;
            }
            
            /* remove NRE that might appear together (NRT EMV mode), and remove RXS, but keep EOF if present for next state */
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800797e:	f023 0320 	bic.w	r3, r3, #32
 8007982:	607b      	str	r3, [r7, #4]
 8007984:	e006      	b.n	8007994 <rfalTransceiveRx+0x134>
                gRFAL.TxRx.status = ERR_IO;
 8007986:	4b68      	ldr	r3, [pc, #416]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007988:	2203      	movs	r2, #3
 800798a:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800798c:	4b66      	ldr	r3, [pc, #408]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 800798e:	225a      	movs	r2, #90	; 0x5a
 8007990:	751a      	strb	r2, [r3, #20]
                break;
 8007992:	e2c3      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* ST25R396 may indicate RXS without RXE afterwards, this happens rarely on    */
            /* corrupted frames.                                                           */
            /* SW timer is used to timeout upon a missing RXE                              */
            if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 8007994:	4b64      	ldr	r3, [pc, #400]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007998:	4618      	mov	r0, r3
 800799a:	f7f8 ff7d 	bl	8000898 <timerIsExpired>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d005      	beq.n	80079b0 <rfalTransceiveRx+0x150>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 80079a4:	4b60      	ldr	r3, [pc, #384]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 80079a6:	2209      	movs	r2, #9
 80079a8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80079aa:	4b5f      	ldr	r3, [pc, #380]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 80079ac:	225a      	movs	r2, #90	; 0x5a
 80079ae:	751a      	strb	r2, [r3, #20]
            }
            /*******************************************************************************/
            
            irqs |= st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_WU_F ) );
 80079b0:	485e      	ldr	r0, [pc, #376]	; (8007b2c <rfalTransceiveRx+0x2cc>)
 80079b2:	f001 fbe9 	bl	8009188 <st25r3916GetInterrupt>
 80079b6:	4602      	mov	r2, r0
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 82a4 	beq.w	8007f0e <rfalTransceiveRx+0x6ae>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RX_REST) != 0U )
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d02f      	beq.n	8007a30 <rfalTransceiveRx+0x1d0>
            {
                /* RX_REST indicates that Receiver has been reseted due to EMD, therefore a RXS + RXE should *
                 * follow if a good reception is followed within the valid initial timeout                   */
                
                /* Check whether NRT has expired already, if so signal a timeout */
                if( st25r3916GetInterrupt( ST25R3916_IRQ_MASK_NRE ) != 0U )
 80079d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80079d4:	f001 fbd8 	bl	8009188 <st25r3916GetInterrupt>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d006      	beq.n	80079ec <rfalTransceiveRx+0x18c>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 80079de:	4b52      	ldr	r3, [pc, #328]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 80079e0:	2204      	movs	r2, #4
 80079e2:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80079e4:	4b50      	ldr	r3, [pc, #320]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 80079e6:	225a      	movs	r2, #90	; 0x5a
 80079e8:	751a      	strb	r2, [r3, #20]
                    break;
 80079ea:	e297      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
                }
                if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0 ) )   /* MISRA 13.5 */
 80079ec:	2200      	movs	r2, #0
 80079ee:	2102      	movs	r1, #2
 80079f0:	2024      	movs	r0, #36	; 0x24
 80079f2:	f001 fa3f 	bl	8008e74 <st25r3916CheckReg>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d006      	beq.n	8007a0a <rfalTransceiveRx+0x1aa>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 80079fc:	4b4a      	ldr	r3, [pc, #296]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 80079fe:	2204      	movs	r2, #4
 8007a00:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8007a02:	4b49      	ldr	r3, [pc, #292]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007a04:	225a      	movs	r2, #90	; 0x5a
 8007a06:	751a      	strb	r2, [r3, #20]
                    break;
 8007a08:	e288      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
                }
                
                /* Discard any previous RXS */
                st25r3916GetInterrupt( ST25R3916_IRQ_MASK_RXS );
 8007a0a:	2020      	movs	r0, #32
 8007a0c:	f001 fbbc 	bl	8009188 <st25r3916GetInterrupt>
                
                /* Check whether a following reception has already started */
                if( st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_rx_act, ST25R3916_REG_AUX_DISPLAY_rx_act) )
 8007a10:	2204      	movs	r2, #4
 8007a12:	2104      	movs	r1, #4
 8007a14:	2031      	movs	r0, #49	; 0x31
 8007a16:	f001 fa2d 	bl	8008e74 <st25r3916CheckReg>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <rfalTransceiveRx+0x1c8>
                {
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8007a20:	4b41      	ldr	r3, [pc, #260]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007a22:	2254      	movs	r2, #84	; 0x54
 8007a24:	751a      	strb	r2, [r3, #20]
                    break;
 8007a26:	e279      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
                }
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8007a28:	4b3f      	ldr	r3, [pc, #252]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007a2a:	2253      	movs	r2, #83	; 0x53
 8007a2c:	751a      	strb	r2, [r3, #20]
                break;
 8007a2e:	e275      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXE) == 0U) )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d008      	beq.n	8007a4c <rfalTransceiveRx+0x1ec>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f003 0310 	and.w	r3, r3, #16
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d103      	bne.n	8007a4c <rfalTransceiveRx+0x1ec>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 8007a44:	4b38      	ldr	r3, [pc, #224]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007a46:	2255      	movs	r2, #85	; 0x55
 8007a48:	751a      	strb	r2, [r3, #20]
                break;
 8007a4a:	e267      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            }
            
            /* Automatic responses allowed during TxRx only for the SENSF_REQ */
            if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <rfalTransceiveRx+0x1fe>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8007a56:	4b34      	ldr	r3, [pc, #208]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007a58:	2253      	movs	r2, #83	; 0x53
 8007a5a:	751a      	strb	r2, [r3, #20]
                break;
 8007a5c:	e25e      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            }
            
            /* After RXE retrieve and check for any error irqs */
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 8007a5e:	4834      	ldr	r0, [pc, #208]	; (8007b30 <rfalTransceiveRx+0x2d0>)
 8007a60:	f001 fb92 	bl	8009188 <st25r3916GetInterrupt>
 8007a64:	4602      	mov	r2, r0
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	607b      	str	r3, [r7, #4]
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 8007a6c:	4b2e      	ldr	r3, [pc, #184]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007a6e:	2256      	movs	r2, #86	; 0x56
 8007a70:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( (irqs & ST25R3916_IRQ_MASK_ERR1) != 0U )
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d008      	beq.n	8007a8e <rfalTransceiveRx+0x22e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 8007a7c:	4b2a      	ldr	r3, [pc, #168]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007a7e:	2209      	movs	r2, #9
 8007a80:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8007a82:	4b29      	ldr	r3, [pc, #164]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007a84:	2257      	movs	r2, #87	; 0x57
 8007a86:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8007a88:	f7ff fb82 	bl	8007190 <rfalErrorHandling>
                break;
 8007a8c:	e246      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            }
            /* Discard Soft Framing errors in AP2P and CE */
            else if( rfalIsModePassivePoll( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_ERR2) != 0U) )
 8007a8e:	4b26      	ldr	r3, [pc, #152]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007a90:	785b      	ldrb	r3, [r3, #1]
 8007a92:	2b09      	cmp	r3, #9
 8007a94:	d01d      	beq.n	8007ad2 <rfalTransceiveRx+0x272>
 8007a96:	4b24      	ldr	r3, [pc, #144]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007a98:	785b      	ldrb	r3, [r3, #1]
 8007a9a:	2b0d      	cmp	r3, #13
 8007a9c:	d019      	beq.n	8007ad2 <rfalTransceiveRx+0x272>
 8007a9e:	4b22      	ldr	r3, [pc, #136]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007aa0:	785b      	ldrb	r3, [r3, #1]
 8007aa2:	2b0a      	cmp	r3, #10
 8007aa4:	d015      	beq.n	8007ad2 <rfalTransceiveRx+0x272>
 8007aa6:	4b20      	ldr	r3, [pc, #128]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	2b0b      	cmp	r3, #11
 8007aac:	d011      	beq.n	8007ad2 <rfalTransceiveRx+0x272>
 8007aae:	4b1e      	ldr	r3, [pc, #120]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b0c      	cmp	r3, #12
 8007ab4:	d00d      	beq.n	8007ad2 <rfalTransceiveRx+0x272>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d008      	beq.n	8007ad2 <rfalTransceiveRx+0x272>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 8007ac0:	4b19      	ldr	r3, [pc, #100]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007ac2:	2209      	movs	r2, #9
 8007ac4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8007ac6:	4b18      	ldr	r3, [pc, #96]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007ac8:	2257      	movs	r2, #87	; 0x57
 8007aca:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8007acc:	f7ff fb60 	bl	8007190 <rfalErrorHandling>
                break;
 8007ad0:	e224      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_PAR) != 0U )
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d008      	beq.n	8007aee <rfalTransceiveRx+0x28e>
            {
                gRFAL.TxRx.status = ERR_PAR;
 8007adc:	4b12      	ldr	r3, [pc, #72]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007ade:	221b      	movs	r2, #27
 8007ae0:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8007ae2:	4b11      	ldr	r3, [pc, #68]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007ae4:	2257      	movs	r2, #87	; 0x57
 8007ae6:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8007ae8:	f7ff fb52 	bl	8007190 <rfalErrorHandling>
                break;
 8007aec:	e216      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_CRC) != 0U )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d008      	beq.n	8007b0a <rfalTransceiveRx+0x2aa>
            {
                gRFAL.TxRx.status = ERR_CRC;
 8007af8:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007afa:	2215      	movs	r2, #21
 8007afc:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8007afe:	4b0a      	ldr	r3, [pc, #40]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007b00:	2257      	movs	r2, #87	; 0x57
 8007b02:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8007b04:	f7ff fb44 	bl	8007190 <rfalErrorHandling>
                break;
 8007b08:	e208      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_COL) != 0U )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00f      	beq.n	8007b34 <rfalTransceiveRx+0x2d4>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 8007b14:	4b04      	ldr	r3, [pc, #16]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007b16:	221d      	movs	r2, #29
 8007b18:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8007b1a:	4b03      	ldr	r3, [pc, #12]	; (8007b28 <rfalTransceiveRx+0x2c8>)
 8007b1c:	2257      	movs	r2, #87	; 0x57
 8007b1e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8007b20:	f7ff fb36 	bl	8007190 <rfalErrorHandling>
                break;
 8007b24:	e1fa      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
 8007b26:	bf00      	nop
 8007b28:	20000598 	.word	0x20000598
 8007b2c:	08000852 	.word	0x08000852
 8007b30:	00f00004 	.word	0x00f00004
            }
            else if( rfalIsModePassiveListen( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) )
 8007b34:	4b9c      	ldr	r3, [pc, #624]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007b36:	785b      	ldrb	r3, [r3, #1]
 8007b38:	2b0a      	cmp	r3, #10
 8007b3a:	d007      	beq.n	8007b4c <rfalTransceiveRx+0x2ec>
 8007b3c:	4b9a      	ldr	r3, [pc, #616]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	2b0b      	cmp	r3, #11
 8007b42:	d003      	beq.n	8007b4c <rfalTransceiveRx+0x2ec>
 8007b44:	4b98      	ldr	r3, [pc, #608]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007b46:	785b      	ldrb	r3, [r3, #1]
 8007b48:	2b0c      	cmp	r3, #12
 8007b4a:	d10b      	bne.n	8007b64 <rfalTransceiveRx+0x304>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d006      	beq.n	8007b64 <rfalTransceiveRx+0x304>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 8007b56:	4b94      	ldr	r3, [pc, #592]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007b58:	2225      	movs	r2, #37	; 0x25
 8007b5a:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8007b5c:	4b92      	ldr	r3, [pc, #584]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007b5e:	225a      	movs	r2, #90	; 0x5a
 8007b60:	751a      	strb	r2, [r3, #20]
                 break;
 8007b62:	e1db      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f003 0310 	and.w	r3, r3, #16
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d014      	beq.n	8007b98 <rfalTransceiveRx+0x338>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 8007b6e:	f000 fa19 	bl	8007fa4 <rfalFIFOStatusIsIncompleteByte>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <rfalTransceiveRx+0x320>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 8007b78:	4b8b      	ldr	r3, [pc, #556]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007b7a:	2228      	movs	r2, #40	; 0x28
 8007b7c:	82da      	strh	r2, [r3, #22]
 8007b7e:	e007      	b.n	8007b90 <rfalTransceiveRx+0x330>
                }
                /* Check if the reception ends missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 8007b80:	f000 fa22 	bl	8007fc8 <rfalFIFOStatusIsMissingPar>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <rfalTransceiveRx+0x330>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 8007b8a:	4b87      	ldr	r3, [pc, #540]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007b8c:	2209      	movs	r2, #9
 8007b8e:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 8007b90:	4b85      	ldr	r3, [pc, #532]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007b92:	2257      	movs	r2, #87	; 0x57
 8007b94:	751a      	strb	r2, [r3, #20]
 8007b96:	e006      	b.n	8007ba6 <rfalTransceiveRx+0x346>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 8007b98:	4b83      	ldr	r3, [pc, #524]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007b9a:	2203      	movs	r2, #3
 8007b9c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8007b9e:	4b82      	ldr	r3, [pc, #520]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007ba0:	225a      	movs	r2, #90	; 0x5a
 8007ba2:	751a      	strb	r2, [r3, #20]
                break;
 8007ba4:	e1ba      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                      
            tmp = rfalFIFOStatusGetNumBytes();
 8007ba6:	f000 f9e1 	bl	8007f6c <rfalFIFOStatusGetNumBytes>
 8007baa:	4603      	mov	r3, r0
 8007bac:	81fb      	strh	r3, [r7, #14]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 8007bae:	4b7e      	ldr	r3, [pc, #504]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d117      	bne.n	8007bea <rfalTransceiveRx+0x38a>
            {
                /* if received frame was bigger than CRC */
                if( (uint16_t)(gRFAL.fifo.bytesTotal + tmp) > 0U )
 8007bba:	4b7b      	ldr	r3, [pc, #492]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007bbc:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8007bbe:	89fb      	ldrh	r3, [r7, #14]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d010      	beq.n	8007bea <rfalTransceiveRx+0x38a>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > RFAL_CRC_LEN) )  
 8007bc8:	89fb      	ldrh	r3, [r7, #14]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d903      	bls.n	8007bd6 <rfalTransceiveRx+0x376>
                    {
                        tmp -= RFAL_CRC_LEN;
 8007bce:	89fb      	ldrh	r3, [r7, #14]
 8007bd0:	3b02      	subs	r3, #2
 8007bd2:	81fb      	strh	r3, [r7, #14]
 8007bd4:	e009      	b.n	8007bea <rfalTransceiveRx+0x38a>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > RFAL_CRC_LEN)                       
 8007bd6:	4b74      	ldr	r3, [pc, #464]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d905      	bls.n	8007bea <rfalTransceiveRx+0x38a>
                    {                        
                        gRFAL.fifo.bytesTotal -= RFAL_CRC_LEN;
 8007bde:	4b72      	ldr	r3, [pc, #456]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007be2:	3b02      	subs	r3, #2
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	4b70      	ldr	r3, [pc, #448]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007be8:	86da      	strh	r2, [r3, #54]	; 0x36
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 8007bea:	4b6f      	ldr	r3, [pc, #444]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007bec:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8007bee:	89fb      	ldrh	r3, [r7, #14]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	4b6c      	ldr	r3, [pc, #432]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007bf6:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8007bf8:	4b6b      	ldr	r3, [pc, #428]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007bfa:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8007bfc:	4b6a      	ldr	r3, [pc, #424]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007bfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c00:	3307      	adds	r3, #7
 8007c02:	08db      	lsrs	r3, r3, #3
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d90f      	bls.n	8007c2a <rfalTransceiveRx+0x3ca>
            {
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 8007c0a:	4b67      	ldr	r3, [pc, #412]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c0e:	3307      	adds	r3, #7
 8007c10:	08db      	lsrs	r3, r3, #3
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	4b64      	ldr	r3, [pc, #400]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c16:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	81fb      	strh	r3, [r7, #14]
                
                /* Transmission errors have precedence over buffer error */
                if( gRFAL.TxRx.status == ERR_BUSY )
 8007c1c:	4b62      	ldr	r3, [pc, #392]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c1e:	8adb      	ldrh	r3, [r3, #22]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d102      	bne.n	8007c2a <rfalTransceiveRx+0x3ca>
                {
                    gRFAL.TxRx.status = ERR_NOMEM;
 8007c24:	4b60      	ldr	r3, [pc, #384]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c26:	2201      	movs	r2, #1
 8007c28:	82da      	strh	r2, [r3, #22]
                }
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 8007c2a:	4b5f      	ldr	r3, [pc, #380]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	4a5e      	ldr	r2, [pc, #376]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c30:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8007c32:	4413      	add	r3, r2
 8007c34:	89fa      	ldrh	r2, [r7, #14]
 8007c36:	4611      	mov	r1, r2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 ffb6 	bl	8008baa <st25r3916ReadFifo>
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 8007c3e:	4b5a      	ldr	r3, [pc, #360]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d019      	beq.n	8007c7a <rfalTransceiveRx+0x41a>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 8007c46:	4b58      	ldr	r3, [pc, #352]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c48:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8007c4a:	4b57      	ldr	r3, [pc, #348]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	00d2      	lsls	r2, r2, #3
 8007c50:	b292      	uxth	r2, r2
 8007c52:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 8007c54:	f000 f9a6 	bl	8007fa4 <rfalFIFOStatusIsIncompleteByte>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00d      	beq.n	8007c7a <rfalTransceiveRx+0x41a>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 8007c5e:	f000 f9c5 	bl	8007fec <rfalFIFOGetNumIncompleteBits>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f1c3 0208 	rsb	r2, r3, #8
 8007c68:	4b4f      	ldr	r3, [pc, #316]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	8819      	ldrh	r1, [r3, #0]
 8007c6e:	b292      	uxth	r2, r2
 8007c70:	4b4d      	ldr	r3, [pc, #308]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	1a8a      	subs	r2, r1, r2
 8007c76:	b292      	uxth	r2, r2
 8007c78:	801a      	strh	r2, [r3, #0]
            }

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 8007c7a:	4b4b      	ldr	r3, [pc, #300]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	2b07      	cmp	r3, #7
 8007c80:	d003      	beq.n	8007c8a <rfalTransceiveRx+0x42a>
 8007c82:	4b49      	ldr	r3, [pc, #292]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c84:	785b      	ldrb	r3, [r3, #1]
 8007c86:	2b08      	cmp	r3, #8
 8007c88:	d165      	bne.n	8007d56 <rfalTransceiveRx+0x4f6>
 8007c8a:	4b47      	ldr	r3, [pc, #284]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c8c:	8adb      	ldrh	r3, [r3, #22]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d161      	bne.n	8007d56 <rfalTransceiveRx+0x4f6>
            {
                ReturnCode ret;
                uint16_t offset = 0; /* REMARK offset not currently used */
 8007c92:	2300      	movs	r3, #0
 8007c94:	807b      	strh	r3, [r7, #2]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8007c96:	4b44      	ldr	r3, [pc, #272]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c98:	6a18      	ldr	r0, [r3, #32]
 8007c9a:	4b43      	ldr	r3, [pc, #268]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007c9c:	8edc      	ldrh	r4, [r3, #54]	; 0x36
 8007c9e:	4b42      	ldr	r3, [pc, #264]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007ca0:	f8d3 5264 	ldr.w	r5, [r3, #612]	; 0x264
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 8007ca4:	4b40      	ldr	r3, [pc, #256]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007ca6:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8007caa:	3307      	adds	r3, #7
 8007cac:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8007cae:	b29e      	uxth	r6, r3
 8007cb0:	4b3d      	ldr	r3, [pc, #244]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007cb2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007cb6:	4a3c      	ldr	r2, [pc, #240]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007cb8:	f8b2 2278 	ldrh.w	r2, [r2, #632]	; 0x278
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 8007cbc:	493a      	ldr	r1, [pc, #232]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007cbe:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8007cc0:	2908      	cmp	r1, #8
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2101      	moveq	r1, #1
 8007cc6:	2100      	movne	r1, #0
 8007cc8:	b2c9      	uxtb	r1, r1
 8007cca:	9103      	str	r1, [sp, #12]
 8007ccc:	9202      	str	r2, [sp, #8]
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	1cbb      	adds	r3, r7, #2
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	4633      	mov	r3, r6
 8007cd6:	462a      	mov	r2, r5
 8007cd8:	4621      	mov	r1, r4
 8007cda:	f7fd febf 	bl	8005a5c <iso15693VICCDecode>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	817b      	strh	r3, [r7, #10]
                
                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 8007ce2:	897b      	ldrh	r3, [r7, #10]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <rfalTransceiveRx+0x48e>
 8007ce8:	897b      	ldrh	r3, [r7, #10]
 8007cea:	2b15      	cmp	r3, #21
 8007cec:	d11f      	bne.n	8007d2e <rfalTransceiveRx+0x4ce>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 8007cee:	4b2e      	ldr	r3, [pc, #184]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007cf0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d118      	bne.n	8007d2e <rfalTransceiveRx+0x4ce>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 8007cfc:	4b2a      	ldr	r3, [pc, #168]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007cfe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10f      	bne.n	8007d2e <rfalTransceiveRx+0x4ce>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 8007d0e:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d10:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	2b0f      	cmp	r3, #15
 8007d18:	d909      	bls.n	8007d2e <rfalTransceiveRx+0x4ce>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 8007d1a:	4b23      	ldr	r3, [pc, #140]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d1c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007d20:	881a      	ldrh	r2, [r3, #0]
 8007d22:	4b21      	ldr	r3, [pc, #132]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d24:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007d28:	3a10      	subs	r2, #16
 8007d2a:	b292      	uxth	r2, r2
 8007d2c:	801a      	strh	r2, [r3, #0]
                st25r3916WriteFifo(gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes( *gRFAL.nfcvData.origCtx.rxRcvdLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
            #endif
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 8007d2e:	4a1e      	ldr	r2, [pc, #120]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d30:	4b1d      	ldr	r3, [pc, #116]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d32:	f102 0418 	add.w	r4, r2, #24
 8007d36:	f503 7517 	add.w	r5, r3, #604	; 0x25c
 8007d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 8007d46:	897b      	ldrh	r3, [r7, #10]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <rfalTransceiveRx+0x4f0>
 8007d4c:	897b      	ldrh	r3, [r7, #10]
 8007d4e:	e000      	b.n	8007d52 <rfalTransceiveRx+0x4f2>
 8007d50:	2302      	movs	r3, #2
 8007d52:	4a15      	ldr	r2, [pc, #84]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d54:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 8007d56:	4b14      	ldr	r3, [pc, #80]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d58:	8adb      	ldrh	r3, [r3, #22]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d003      	beq.n	8007d66 <rfalTransceiveRx+0x506>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 8007d5e:	4b12      	ldr	r3, [pc, #72]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d60:	225a      	movs	r2, #90	; 0x5a
 8007d62:	751a      	strb	r2, [r3, #20]
                break;
 8007d64:	e0da      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 8007d66:	4b10      	ldr	r3, [pc, #64]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d68:	785b      	ldrb	r3, [r3, #1]
 8007d6a:	2b09      	cmp	r3, #9
 8007d6c:	d003      	beq.n	8007d76 <rfalTransceiveRx+0x516>
 8007d6e:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d70:	785b      	ldrb	r3, [r3, #1]
 8007d72:	2b0d      	cmp	r3, #13
 8007d74:	d103      	bne.n	8007d7e <rfalTransceiveRx+0x51e>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 8007d76:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d78:	2258      	movs	r2, #88	; 0x58
 8007d7a:	751a      	strb	r2, [r3, #20]
                break;
 8007d7c:	e0ce      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d80:	2259      	movs	r2, #89	; 0x59
 8007d82:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8007d84:	4b08      	ldr	r3, [pc, #32]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d86:	799b      	ldrb	r3, [r3, #6]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <rfalTransceiveRx+0x534>
 8007d8c:	2140      	movs	r1, #64	; 0x40
 8007d8e:	2001      	movs	r0, #1
 8007d90:	f000 ff63 	bl	8008c5a <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8007d94:	f7ff fa34 	bl	8007200 <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 8007d98:	4b03      	ldr	r3, [pc, #12]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 8007d9e:	4b02      	ldr	r3, [pc, #8]	; (8007da8 <rfalTransceiveRx+0x548>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	751a      	strb	r2, [r3, #20]
            break;
 8007da4:	e0ba      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
 8007da6:	bf00      	nop
 8007da8:	20000598 	.word	0x20000598
            
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
            /* Use a SW timer to handle an eventual missing RXE                            */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8007dac:	2032      	movs	r0, #50	; 0x32
 8007dae:	f7f8 fd65 	bl	800087c <timerCalculateTimer>
 8007db2:	4602      	mov	r2, r0
 8007db4:	4b5b      	ldr	r3, [pc, #364]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007db6:	641a      	str	r2, [r3, #64]	; 0x40
            /*******************************************************************************/
            
            tmp = rfalFIFOStatusGetNumBytes();
 8007db8:	f000 f8d8 	bl	8007f6c <rfalFIFOStatusGetNumBytes>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	81fb      	strh	r3, [r7, #14]
            gRFAL.fifo.bytesTotal += tmp;
 8007dc0:	4b58      	ldr	r3, [pc, #352]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007dc2:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8007dc4:	89fb      	ldrh	r3, [r7, #14]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	4b56      	ldr	r3, [pc, #344]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007dcc:	86da      	strh	r2, [r3, #54]	; 0x36
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 8007dce:	4b55      	ldr	r3, [pc, #340]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007dd0:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8007dd2:	4b54      	ldr	r3, [pc, #336]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007dd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007dd6:	3307      	adds	r3, #7
 8007dd8:	08db      	lsrs	r3, r3, #3
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d909      	bls.n	8007df4 <rfalTransceiveRx+0x594>
 8007de0:	4b50      	ldr	r3, [pc, #320]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007de2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007de4:	3307      	adds	r3, #7
 8007de6:	08db      	lsrs	r3, r3, #3
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	4b4e      	ldr	r3, [pc, #312]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007dec:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	e000      	b.n	8007df6 <rfalTransceiveRx+0x596>
 8007df4:	89fb      	ldrh	r3, [r7, #14]
 8007df6:	81bb      	strh	r3, [r7, #12]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 8007df8:	4b4a      	ldr	r3, [pc, #296]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	4a49      	ldr	r2, [pc, #292]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007dfe:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8007e00:	4413      	add	r3, r2
 8007e02:	89ba      	ldrh	r2, [r7, #12]
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fecf 	bl	8008baa <st25r3916ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 8007e0c:	4b45      	ldr	r3, [pc, #276]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007e0e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8007e10:	89bb      	ldrh	r3, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	4b43      	ldr	r3, [pc, #268]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007e18:	871a      	strh	r2, [r3, #56]	; 0x38
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 8007e1a:	89ba      	ldrh	r2, [r7, #12]
 8007e1c:	89fb      	ldrh	r3, [r7, #14]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d207      	bcs.n	8007e32 <rfalTransceiveRx+0x5d2>
            {
                st25r3916ReadFifo( NULL, (tmp - aux) );
 8007e22:	89fa      	ldrh	r2, [r7, #14]
 8007e24:	89bb      	ldrh	r3, [r7, #12]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	f000 febc 	bl	8008baa <st25r3916ReadFifo>
            }
            
            rfalFIFOStatusClear();
 8007e32:	f000 f88d 	bl	8007f50 <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8007e36:	4b3b      	ldr	r3, [pc, #236]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007e38:	2254      	movs	r2, #84	; 0x54
 8007e3a:	751a      	strb	r2, [r3, #20]
            break;
 8007e3c:	e06e      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8007e3e:	4b39      	ldr	r3, [pc, #228]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007e40:	799b      	ldrb	r3, [r3, #6]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <rfalTransceiveRx+0x5ee>
 8007e46:	2140      	movs	r1, #64	; 0x40
 8007e48:	2001      	movs	r0, #1
 8007e4a:	f000 ff06 	bl	8008c5a <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8007e4e:	f7ff f9d7 	bl	8007200 <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 8007e52:	4b34      	ldr	r3, [pc, #208]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007e54:	8adb      	ldrh	r3, [r3, #22]
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d102      	bne.n	8007e60 <rfalTransceiveRx+0x600>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 8007e5a:	4b32      	ldr	r3, [pc, #200]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007e5c:	2208      	movs	r2, #8
 8007e5e:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 8007e60:	4b30      	ldr	r3, [pc, #192]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	751a      	strb	r2, [r3, #20]
            break;
 8007e66:	e059      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
        
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_PPON2) );
 8007e68:	482f      	ldr	r0, [pc, #188]	; (8007f28 <rfalTransceiveRx+0x6c8>)
 8007e6a:	f001 f98d 	bl	8009188 <st25r3916GetInterrupt>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d04c      	beq.n	8007f12 <rfalTransceiveRx+0x6b2>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <rfalTransceiveRx+0x628>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8007e82:	4b28      	ldr	r3, [pc, #160]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007e84:	2253      	movs	r2, #83	; 0x53
 8007e86:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_NRE) != 0U )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d005      	beq.n	8007e9e <rfalTransceiveRx+0x63e>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 8007e92:	4b24      	ldr	r3, [pc, #144]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007e94:	2204      	movs	r2, #4
 8007e96:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8007e98:	4b22      	ldr	r3, [pc, #136]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007e9a:	225a      	movs	r2, #90	; 0x5a
 8007e9c:	751a      	strb	r2, [r3, #20]
            }
            if( (irqs & ST25R3916_IRQ_MASK_PPON2) != 0U )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	da38      	bge.n	8007f16 <rfalTransceiveRx+0x6b6>
            {
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 8007ea4:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007ea6:	2225      	movs	r2, #37	; 0x25
 8007ea8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8007eaa:	4b1e      	ldr	r3, [pc, #120]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007eac:	225a      	movs	r2, #90	; 0x5a
 8007eae:	751a      	strb	r2, [r3, #20]
            }
            break;
 8007eb0:	e031      	b.n	8007f16 <rfalTransceiveRx+0x6b6>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC) );
 8007eb2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8007eb6:	f001 f967 	bl	8009188 <st25r3916GetInterrupt>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d02a      	beq.n	8007f1a <rfalTransceiveRx+0x6ba>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_CAT) != 0U )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <rfalTransceiveRx+0x676>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 8007ece:	4b15      	ldr	r3, [pc, #84]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007ed0:	2259      	movs	r2, #89	; 0x59
 8007ed2:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 8007ed4:	e022      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            else if( (irqs & ST25R3916_IRQ_MASK_CAC) != 0U )
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d006      	beq.n	8007eee <rfalTransceiveRx+0x68e>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 8007ee0:	4b10      	ldr	r3, [pc, #64]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007ee2:	221d      	movs	r2, #29
 8007ee4:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8007ee6:	4b0f      	ldr	r3, [pc, #60]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007ee8:	225a      	movs	r2, #90	; 0x5a
 8007eea:	751a      	strb	r2, [r3, #20]
            break;
 8007eec:	e016      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
               gRFAL.TxRx.status = ERR_IO;
 8007eee:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007ef0:	2203      	movs	r2, #3
 8007ef2:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8007ef4:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007ef6:	225a      	movs	r2, #90	; 0x5a
 8007ef8:	751a      	strb	r2, [r3, #20]
            break;
 8007efa:	e00f      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 8007efc:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007efe:	2208      	movs	r2, #8
 8007f00:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8007f02:	4b08      	ldr	r3, [pc, #32]	; (8007f24 <rfalTransceiveRx+0x6c4>)
 8007f04:	225a      	movs	r2, #90	; 0x5a
 8007f06:	751a      	strb	r2, [r3, #20]
            break;           
 8007f08:	e008      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 8007f0a:	bf00      	nop
 8007f0c:	e006      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 8007f0e:	bf00      	nop
 8007f10:	e004      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 8007f12:	bf00      	nop
 8007f14:	e002      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
            break;
 8007f16:	bf00      	nop
 8007f18:	e000      	b.n	8007f1c <rfalTransceiveRx+0x6bc>
               break;  /* No interrupt to process */
 8007f1a:	bf00      	nop
    }    
}
 8007f1c:	bf00      	nop
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f24:	20000598 	.word	0x20000598
 8007f28:	80005000 	.word	0x80005000

08007f2c <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8007f30:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <rfalFIFOStatusUpdate+0x1c>)
 8007f32:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8007f36:	2bff      	cmp	r3, #255	; 0xff
 8007f38:	d104      	bne.n	8007f44 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3916ReadMultipleRegisters( ST25R3916_REG_FIFO_STATUS1, gRFAL.fifo.status, ST25R3916_FIFO_STATUS_LEN );
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	4903      	ldr	r1, [pc, #12]	; (8007f4c <rfalFIFOStatusUpdate+0x20>)
 8007f3e:	201e      	movs	r0, #30
 8007f40:	f000 fd99 	bl	8008a76 <st25r3916ReadMultipleRegisters>
    }
}
 8007f44:	bf00      	nop
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	20000598 	.word	0x20000598
 8007f4c:	200005d2 	.word	0x200005d2

08007f50 <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 8007f50:	b480      	push	{r7}
 8007f52:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 8007f54:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <rfalFIFOStatusClear+0x18>)
 8007f56:	22ff      	movs	r2, #255	; 0xff
 8007f58:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 8007f5c:	bf00      	nop
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	20000598 	.word	0x20000598

08007f6c <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint16_t rfalFIFOStatusGetNumBytes( void )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
    uint16_t result;
    
    rfalFIFOStatusUpdate();
 8007f72:	f7ff ffdb 	bl	8007f2c <rfalFIFOStatusUpdate>
    
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 8007f76:	4b0a      	ldr	r3, [pc, #40]	; (8007fa0 <rfalFIFOStatusGetNumBytes+0x34>)
 8007f78:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8007f7c:	099b      	lsrs	r3, r3, #6
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	021b      	lsls	r3, r3, #8
 8007f84:	80fb      	strh	r3, [r7, #6]
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 8007f86:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <rfalFIFOStatusGetNumBytes+0x34>)
 8007f88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	88fb      	ldrh	r3, [r7, #6]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	80fb      	strh	r3, [r7, #6]
    return result;
 8007f94:	88fb      	ldrh	r3, [r7, #6]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20000598 	.word	0x20000598

08007fa4 <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8007fa8:	f7ff ffc0 	bl	8007f2c <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 8007fac:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <rfalFIFOStatusIsIncompleteByte+0x20>)
 8007fae:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8007fb2:	f003 030e 	and.w	r3, r3, #14
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bf14      	ite	ne
 8007fba:	2301      	movne	r3, #1
 8007fbc:	2300      	moveq	r3, #0
 8007fbe:	b2db      	uxtb	r3, r3
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20000598 	.word	0x20000598

08007fc8 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8007fcc:	f7ff ffae 	bl	8007f2c <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_np_lb) != 0U);
 8007fd0:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <rfalFIFOStatusIsMissingPar+0x20>)
 8007fd2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bf14      	ite	ne
 8007fde:	2301      	movne	r3, #1
 8007fe0:	2300      	moveq	r3, #0
 8007fe2:	b2db      	uxtb	r3, r3
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	20000598 	.word	0x20000598

08007fec <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8007ff0:	f7ff ff9c 	bl	8007f2c <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 8007ff4:	4b04      	ldr	r3, [pc, #16]	; (8008008 <rfalFIFOGetNumIncompleteBits+0x1c>)
 8007ff6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8007ffa:	085b      	lsrs	r3, r3, #1
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	b2db      	uxtb	r3, r3
}
 8008004:	4618      	mov	r0, r3
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20000598 	.word	0x20000598

0800800c <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08c      	sub	sp, #48	; 0x30
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	607a      	str	r2, [r7, #4]
 8008016:	461a      	mov	r2, r3
 8008018:	460b      	mov	r3, r1
 800801a:	72fb      	strb	r3, [r7, #11]
 800801c:	4613      	mov	r3, r2
 800801e:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8008020:	4b55      	ldr	r3, [pc, #340]	; (8008178 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d903      	bls.n	8008030 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 8008028:	4b53      	ldr	r3, [pc, #332]	; (8008178 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800802a:	785b      	ldrb	r3, [r3, #1]
 800802c:	2b07      	cmp	r3, #7
 800802e:	d001      	beq.n	8008034 <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 8008030:	2321      	movs	r3, #33	; 0x21
 8008032:	e09d      	b.n	8008170 <rfalISO15693TransceiveAnticollisionFrame+0x164>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 8008034:	f241 0003 	movw	r0, #4099	; 0x1003
 8008038:	f7fd fa0c 	bl	8005454 <rfalSetAnalogConfig>
    
    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800803c:	4b4e      	ldr	r3, [pc, #312]	; (8008178 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800803e:	2210      	movs	r2, #16
 8008040:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 8008044:	7afb      	ldrb	r3, [r7, #11]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <rfalISO15693TransceiveAnticollisionFrame+0x42>
 800804a:	220b      	movs	r2, #11
 800804c:	e000      	b.n	8008050 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 800804e:	220a      	movs	r2, #10
 8008050:	7afb      	ldrb	r3, [r7, #11]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 8008056:	2340      	movs	r3, #64	; 0x40
 8008058:	e000      	b.n	800805c <rfalISO15693TransceiveAnticollisionFrame+0x50>
 800805a:	2300      	movs	r3, #0
 800805c:	4313      	orrs	r3, r2
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 8008064:	7afb      	ldrb	r3, [r7, #11]
 8008066:	b29b      	uxth	r3, r3
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	b29b      	uxth	r3, r3
 800806c:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 8008072:	7abb      	ldrb	r3, [r7, #10]
 8008074:	b29b      	uxth	r3, r3
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	b29b      	uxth	r3, r3
 800807a:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 8008080:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8008084:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 8008086:	f107 0310 	add.w	r3, r7, #16
 800808a:	4618      	mov	r0, r3
 800808c:	f7fe fe94 	bl	8006db8 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 8008090:	f7fe fff6 	bl	8007080 <rfalTransceiveRunBlockingTx>
 8008094:	4603      	mov	r3, r0
 8008096:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 8008098:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800809a:	2b00      	cmp	r3, #0
 800809c:	d103      	bne.n	80080a6 <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 800809e:	f7ff f80c 	bl	80070ba <rfalTransceiveBlockingRx>
 80080a2:	4603      	mov	r3, r0
 80080a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Check if a Transmission error and received data is less then expected */
    if( ((ret == ERR_RF_COLLISION) || (ret == ERR_CRC) || (ret == ERR_FRAMING)) && (rfalConvBitsToBytes(*ctx.rxRcvdLen) < RFAL_ISO15693_INV_RES_LEN) )
 80080a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080a8:	2b1d      	cmp	r3, #29
 80080aa:	d005      	beq.n	80080b8 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 80080ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080ae:	2b15      	cmp	r3, #21
 80080b0:	d002      	beq.n	80080b8 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 80080b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080b4:	2b09      	cmp	r3, #9
 80080b6:	d112      	bne.n	80080de <rfalISO15693TransceiveAnticollisionFrame+0xd2>
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	3307      	adds	r3, #7
 80080be:	08db      	lsrs	r3, r3, #3
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b0b      	cmp	r3, #11
 80080c4:	d80b      	bhi.n	80080de <rfalISO15693TransceiveAnticollisionFrame+0xd2>
    {
        /* If INVENTORY_RES is shorter than expected, tag is still modulating *
         * Ensure that response is complete before next frame                 */
        platformDelay( (uint8_t)( (RFAL_ISO15693_INV_RES_LEN - rfalConvBitsToBytes(*ctx.rxRcvdLen)) / ((RFAL_ISO15693_INV_RES_LEN / RFAL_ISO15693_INV_RES_DUR)+1U) ));
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	3307      	adds	r3, #7
 80080cc:	08db      	lsrs	r3, r3, #3
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f1c3 030c 	rsb	r3, r3, #12
 80080d4:	089b      	lsrs	r3, r3, #2
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	4618      	mov	r0, r3
 80080da:	f7f9 f861 	bl	80011a0 <HAL_Delay>
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 80080de:	4b26      	ldr	r3, [pc, #152]	; (8008178 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 80080e0:	789b      	ldrb	r3, [r3, #2]
 80080e2:	2bea      	cmp	r3, #234	; 0xea
 80080e4:	d90c      	bls.n	8008100 <rfalISO15693TransceiveAnticollisionFrame+0xf4>
 80080e6:	4b24      	ldr	r3, [pc, #144]	; (8008178 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 80080e8:	789b      	ldrb	r3, [r3, #2]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080f8:	f043 0301 	orr.w	r3, r3, #1
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	e00d      	b.n	800811c <rfalISO15693TransceiveAnticollisionFrame+0x110>
 8008100:	4b1d      	ldr	r3, [pc, #116]	; (8008178 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 8008102:	789b      	ldrb	r3, [r3, #2]
 8008104:	b29b      	uxth	r3, r3
 8008106:	3301      	adds	r3, #1
 8008108:	b29b      	uxth	r3, r3
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	b29b      	uxth	r3, r3
 800810e:	b2db      	uxtb	r3, r3
 8008110:	b29b      	uxth	r3, r3
 8008112:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008116:	f043 0301 	orr.w	r3, r3, #1
 800811a:	b29b      	uxth	r3, r3
 800811c:	4618      	mov	r0, r3
 800811e:	f7fd f999 	bl	8005454 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 8008124:	78db      	ldrb	r3, [r3, #3]
 8008126:	2bea      	cmp	r3, #234	; 0xea
 8008128:	d90c      	bls.n	8008144 <rfalISO15693TransceiveAnticollisionFrame+0x138>
 800812a:	4b13      	ldr	r3, [pc, #76]	; (8008178 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800812c:	78db      	ldrb	r3, [r3, #3]
 800812e:	b29b      	uxth	r3, r3
 8008130:	011b      	lsls	r3, r3, #4
 8008132:	b29b      	uxth	r3, r3
 8008134:	b2db      	uxtb	r3, r3
 8008136:	b29b      	uxth	r3, r3
 8008138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800813c:	f043 0302 	orr.w	r3, r3, #2
 8008140:	b29b      	uxth	r3, r3
 8008142:	e00d      	b.n	8008160 <rfalISO15693TransceiveAnticollisionFrame+0x154>
 8008144:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 8008146:	78db      	ldrb	r3, [r3, #3]
 8008148:	b29b      	uxth	r3, r3
 800814a:	3301      	adds	r3, #1
 800814c:	b29b      	uxth	r3, r3
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	b29b      	uxth	r3, r3
 8008152:	b2db      	uxtb	r3, r3
 8008154:	b29b      	uxth	r3, r3
 8008156:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800815a:	f043 0302 	orr.w	r3, r3, #2
 800815e:	b29b      	uxth	r3, r3
 8008160:	4618      	mov	r0, r3
 8008162:	f7fd f977 	bl	8005454 <rfalSetAnalogConfig>
    
    gRFAL.nfcvData.ignoreBits = 0;
 8008166:	4b04      	ldr	r3, [pc, #16]	; (8008178 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 8008168:	2200      	movs	r2, #0
 800816a:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    return ret;
 800816e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8008170:	4618      	mov	r0, r3
 8008172:	3730      	adds	r7, #48	; 0x30
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000598 	.word	0x20000598

0800817c <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b088      	sub	sp, #32
 8008180:	af02      	add	r7, sp, #8
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	460b      	mov	r3, r1
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 800818a:	7afa      	ldrb	r2, [r7, #11]
 800818c:	f107 0017 	add.w	r0, r7, #23
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	4613      	mov	r3, r2
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	2100      	movs	r1, #0
 800819a:	f7ff ff37 	bl	800800c <rfalISO15693TransceiveAnticollisionFrame>
 800819e:	4603      	mov	r3, r0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
    return st25r3916IsExtFieldOn();
 80081ac:	2240      	movs	r2, #64	; 0x40
 80081ae:	2140      	movs	r1, #64	; 0x40
 80081b0:	2031      	movs	r0, #49	; 0x31
 80081b2:	f000 fe5f 	bl	8008e74 <st25r3916CheckReg>
 80081b6:	4603      	mov	r3, r0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	bd80      	pop	{r7, pc}

080081bc <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	80fb      	strh	r3, [r7, #6]
 80081c6:	460b      	mov	r3, r1
 80081c8:	717b      	strb	r3, [r7, #5]
 80081ca:	4613      	mov	r3, r2
 80081cc:	713b      	strb	r3, [r7, #4]
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fe6e 	bl	8008eb4 <st25r3916IsRegValid>
 80081d8:	4603      	mov	r3, r0
 80081da:	f083 0301 	eor.w	r3, r3, #1
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <rfalChipChangeRegBits+0x2c>
    {
        return ERR_PARAM;
 80081e4:	2307      	movs	r3, #7
 80081e6:	e007      	b.n	80081f8 <rfalChipChangeRegBits+0x3c>
    }
    
    return st25r3916ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 80081e8:	88fb      	ldrh	r3, [r7, #6]
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	793a      	ldrb	r2, [r7, #4]
 80081ee:	7979      	ldrb	r1, [r7, #5]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 fdbb 	bl	8008d6c <st25r3916ChangeRegisterBits>
 80081f6:	4603      	mov	r3, r0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	4603      	mov	r3, r0
 8008208:	80fb      	strh	r3, [r7, #6]
 800820a:	460b      	mov	r3, r1
 800820c:	717b      	strb	r3, [r7, #5]
 800820e:	4613      	mov	r3, r2
 8008210:	713b      	strb	r3, [r7, #4]
    st25r3916ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 8008212:	88fb      	ldrh	r3, [r7, #6]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	793a      	ldrb	r2, [r7, #4]
 8008218:	7979      	ldrb	r1, [r7, #5]
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fdf2 	bl	8008e04 <st25r3916ChangeTestRegisterBits>
    return ERR_NONE;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <st25r3916ExecuteCommandAndGetResult>:
 * LOCAL FUNCTION
 ******************************************************************************
 */

ReturnCode st25r3916ExecuteCommandAndGetResult( uint8_t cmd, uint8_t resReg, uint8_t tout, uint8_t* result )
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	603b      	str	r3, [r7, #0]
 8008232:	4603      	mov	r3, r0
 8008234:	71fb      	strb	r3, [r7, #7]
 8008236:	460b      	mov	r3, r1
 8008238:	71bb      	strb	r3, [r7, #6]
 800823a:	4613      	mov	r3, r2
 800823c:	717b      	strb	r3, [r7, #5]
    /* Clear and enable Direct Command interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 800823e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008242:	f000 ffa1 	bl	8009188 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_DCT );
 8008246:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800824a:	f000 ffd5 	bl	80091f8 <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( cmd );
 800824e:	79fb      	ldrb	r3, [r7, #7]
 8008250:	4618      	mov	r0, r3
 8008252:	f000 fcc6 	bl	8008be2 <st25r3916ExecuteCommand>

    st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_DCT, tout );
 8008256:	797b      	ldrb	r3, [r7, #5]
 8008258:	b29b      	uxth	r3, r3
 800825a:	4619      	mov	r1, r3
 800825c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008260:	f000 ff42 	bl	80090e8 <st25r3916WaitForInterruptsTimed>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_DCT );
 8008264:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008268:	f000 ffd2 	bl	8009210 <st25r3916DisableInterrupts>

    /* After execution read out the result if the pointer is not NULL */
    if( result != NULL )
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d004      	beq.n	800827c <st25r3916ExecuteCommandAndGetResult+0x52>
    {
        st25r3916ReadRegister( resReg, result);
 8008272:	79bb      	ldrb	r3, [r7, #6]
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fbec 	bl	8008a54 <st25r3916ReadRegister>
    }

    return ERR_NONE;
 800827c:	2300      	movs	r3, #0

}
 800827e:	4618      	mov	r0, r3
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <st25r3916Initialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode st25r3916Initialize( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;
    
    /* Set default state on the ST25R3916 */
    st25r3916ExecuteCommand( ST25R3916_CMD_SET_DEFAULT );
 800828e:	20c1      	movs	r0, #193	; 0xc1
 8008290:	f000 fca7 	bl	8008be2 <st25r3916ExecuteCommand>

#ifndef RFAL_USE_I2C    
    /* Increase MISO driving level as SPI can go up to 10MHz */
    st25r3916WriteRegister(ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_io_18);
 8008294:	2104      	movs	r1, #4
 8008296:	2001      	movs	r0, #1
 8008298:	f000 fc1a 	bl	8008ad0 <st25r3916WriteRegister>
#endif /* RFAL_USE_I2C */
    
    if( !st25r3916CheckChipID( NULL ) )
 800829c:	2000      	movs	r0, #0
 800829e:	f000 fa2b 	bl	80086f8 <st25r3916CheckChipID>
 80082a2:	4603      	mov	r3, r0
 80082a4:	f083 0301 	eor.w	r3, r3, #1
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <st25r3916Initialize+0x2a>
    {
        return ERR_HW_MISMATCH;
 80082ae:	2324      	movs	r3, #36	; 0x24
 80082b0:	e02d      	b.n	800830e <st25r3916Initialize+0x86>
    }
    
    st25r3916InitInterrupts();
 80082b2:	f000 fe51 	bl	8008f58 <st25r3916InitInterrupts>
    st25r3916ledInit();
 80082b6:	f000 ffe9 	bl	800928c <st25r3916ledInit>
    
    gST25R3916NRT_64fcs = 0;
 80082ba:	4b17      	ldr	r3, [pc, #92]	; (8008318 <st25r3916Initialize+0x90>)
 80082bc:	2200      	movs	r2, #0
 80082be:	601a      	str	r2, [r3, #0]

#ifndef RFAL_USE_I2C
    /* Enable pull downs on MISO line */
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 80082c0:	2118      	movs	r1, #24
 80082c2:	2001      	movs	r0, #1
 80082c4:	f000 fd25 	bl	8008d12 <st25r3916SetRegisterBits>
#endif /* RFAL_USE_I2C */
    
    /* Disable internal overheat protection */
    st25r3916ChangeTestRegisterBits( 0x04, 0x10, 0x10 );
 80082c8:	2210      	movs	r2, #16
 80082ca:	2110      	movs	r1, #16
 80082cc:	2004      	movs	r0, #4
 80082ce:	f000 fd99 	bl	8008e04 <st25r3916ChangeTestRegisterBits>

    /* Enable Oscillator and wait until it gets stable */
    st25r3916OscOn();        
 80082d2:	f000 f823 	bl	800831c <st25r3916OscOn>
    
    /* Measure VDD and set sup3V bit according to Power supplied  */
    vdd_mV = st25r3916MeasureVoltage( ST25R3916_REG_REGULATOR_CONTROL_mpsv_vdd );
 80082d6:	2000      	movs	r0, #0
 80082d8:	f000 f854 	bl	8008384 <st25r3916MeasureVoltage>
 80082dc:	4603      	mov	r3, r0
 80082de:	80fb      	strh	r3, [r7, #6]
    st25r3916ChangeRegisterBits( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ((vdd_mV < ST25R3916_SUPPLY_THRESHOLD) ? ST25R3916_REG_IO_CONF2_sup3V_3V : ST25R3916_REG_IO_CONF2_sup3V_5V) );
 80082e0:	88fb      	ldrh	r3, [r7, #6]
 80082e2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80082e6:	d201      	bcs.n	80082ec <st25r3916Initialize+0x64>
 80082e8:	2380      	movs	r3, #128	; 0x80
 80082ea:	e000      	b.n	80082ee <st25r3916Initialize+0x66>
 80082ec:	2300      	movs	r3, #0
 80082ee:	461a      	mov	r2, r3
 80082f0:	2180      	movs	r1, #128	; 0x80
 80082f2:	2001      	movs	r0, #1
 80082f4:	f000 fd3a 	bl	8008d6c <st25r3916ChangeRegisterBits>
            
    /* Make sure Transmitter and Receiver are disabled */
    st25r3916TxRxOff();
 80082f8:	2148      	movs	r1, #72	; 0x48
 80082fa:	2002      	movs	r0, #2
 80082fc:	f000 fcd2 	bl	8008ca4 <st25r3916ClrRegisterBits>
    
    /* After reset all interrupts are enabled, so disable them at first */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 8008300:	f04f 30ff 	mov.w	r0, #4294967295
 8008304:	f000 ff84 	bl	8009210 <st25r3916DisableInterrupts>
    
    /* And clear them, just to be sure */
    st25r3916ClearInterrupts();
 8008308:	f000 ff8e 	bl	8009228 <st25r3916ClearInterrupts>
    
    return ERR_NONE;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20000814 	.word	0x20000814

0800831c <st25r3916OscOn>:
}


/*******************************************************************************/
void st25r3916OscOn( void )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3916_REG_OP_CONTROL_en instead of ST25R3916_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 8008320:	2280      	movs	r2, #128	; 0x80
 8008322:	2180      	movs	r1, #128	; 0x80
 8008324:	2002      	movs	r0, #2
 8008326:	f000 fda5 	bl	8008e74 <st25r3916CheckReg>
 800832a:	4603      	mov	r3, r0
 800832c:	f083 0301 	eor.w	r3, r3, #1
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00c      	beq.n	8008350 <st25r3916OscOn+0x34>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3916GetInterrupt( ST25R3916_IRQ_MASK_OSC );
 8008336:	2080      	movs	r0, #128	; 0x80
 8008338:	f000 ff26 	bl	8009188 <st25r3916GetInterrupt>
      
        /* Enable oscillator frequency stable interrupt */
        st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_OSC );
 800833c:	2080      	movs	r0, #128	; 0x80
 800833e:	f000 ff5b 	bl	80091f8 <st25r3916EnableInterrupts>

        /* Enable oscillator and regulator output */
        st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 8008342:	2180      	movs	r1, #128	; 0x80
 8008344:	2002      	movs	r0, #2
 8008346:	f000 fce4 	bl	8008d12 <st25r3916SetRegisterBits>

        /* Wait for the oscillator interrupt */
//        st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE );
        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_OSC );
 800834a:	2080      	movs	r0, #128	; 0x80
 800834c:	f000 ff60 	bl	8009210 <st25r3916DisableInterrupts>
    }
}
 8008350:	bf00      	nop
 8008352:	bd80      	pop	{r7, pc}

08008354 <st25r3916MeasurePowerSupply>:


/*******************************************************************************/
uint8_t st25r3916MeasurePowerSupply( uint8_t mpsv )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	4603      	mov	r3, r0
 800835c:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3916ChangeRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_mpsv_mask, mpsv );
 800835e:	79fb      	ldrb	r3, [r7, #7]
 8008360:	461a      	mov	r2, r3
 8008362:	2107      	movs	r1, #7
 8008364:	202c      	movs	r0, #44	; 0x2c
 8008366:	f000 fd01 	bl	8008d6c <st25r3916ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_VDD, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_VDD, &result);
 800836a:	f107 030f 	add.w	r3, r7, #15
 800836e:	2264      	movs	r2, #100	; 0x64
 8008370:	2125      	movs	r1, #37	; 0x25
 8008372:	20df      	movs	r0, #223	; 0xdf
 8008374:	f7ff ff59 	bl	800822a <st25r3916ExecuteCommandAndGetResult>

    return result;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <st25r3916MeasureVoltage>:


/*******************************************************************************/
uint16_t st25r3916MeasureVoltage( uint8_t mpsv )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3916MeasurePowerSupply(mpsv);
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff ffdf 	bl	8008354 <st25r3916MeasurePowerSupply>
 8008396:	4603      	mov	r3, r0
 8008398:	73fb      	strb	r3, [r7, #15]
   
    /* Convert cmd output into mV (each step represents 23.4 mV )*/
    mV  = ((uint16_t)result) * 23U;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	b29b      	uxth	r3, r3
 800839e:	461a      	mov	r2, r3
 80083a0:	0052      	lsls	r2, r2, #1
 80083a2:	441a      	add	r2, r3
 80083a4:	00d2      	lsls	r2, r2, #3
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	81bb      	strh	r3, [r7, #12]
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	3305      	adds	r3, #5
 80083b0:	4a06      	ldr	r2, [pc, #24]	; (80083cc <st25r3916MeasureVoltage+0x48>)
 80083b2:	fba2 2303 	umull	r2, r3, r2, r3
 80083b6:	08db      	lsrs	r3, r3, #3
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	89bb      	ldrh	r3, [r7, #12]
 80083bc:	4413      	add	r3, r2
 80083be:	81bb      	strh	r3, [r7, #12]

    return mV;
 80083c0:	89bb      	ldrh	r3, [r7, #12]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	cccccccd 	.word	0xcccccccd

080083d0 <st25r3916AdjustRegulators>:


/*******************************************************************************/
ReturnCode st25r3916AdjustRegulators( uint16_t* result_mV )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
    uint8_t result;

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 80083d8:	2180      	movs	r1, #128	; 0x80
 80083da:	202c      	movs	r0, #44	; 0x2c
 80083dc:	f000 fc99 	bl	8008d12 <st25r3916SetRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 80083e0:	2180      	movs	r1, #128	; 0x80
 80083e2:	202c      	movs	r0, #44	; 0x2c
 80083e4:	f000 fc5e 	bl	8008ca4 <st25r3916ClrRegisterBits>

    /* Execute Adjust regulators cmd and retrieve result */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_ADJUST_REGULATORS, ST25R3916_REG_REGULATOR_RESULT, ST25R3916_TOUT_ADJUST_REGULATORS, &result );
 80083e8:	f107 030f 	add.w	r3, r7, #15
 80083ec:	2206      	movs	r2, #6
 80083ee:	216c      	movs	r1, #108	; 0x6c
 80083f0:	20d6      	movs	r0, #214	; 0xd6
 80083f2:	f7ff ff1a 	bl	800822a <st25r3916ExecuteCommandAndGetResult>

    /* Calculate result in mV */
    result >>= ST25R3916_REG_REGULATOR_RESULT_reg_shift;
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	091b      	lsrs	r3, r3, #4
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	73fb      	strb	r3, [r7, #15]
    
    if( result_mV != NULL )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d02b      	beq.n	800845c <st25r3916AdjustRegulators+0x8c>
    {
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ST25R3916_REG_IO_CONF2_sup3V )  )
 8008404:	2280      	movs	r2, #128	; 0x80
 8008406:	2180      	movs	r1, #128	; 0x80
 8008408:	2001      	movs	r0, #1
 800840a:	f000 fd33 	bl	8008e74 <st25r3916CheckReg>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00d      	beq.n	8008430 <st25r3916AdjustRegulators+0x60>
        {
            result = MIN( result, (uint8_t)(result-5U) );/* In 3.3V mode [0,4] are not used                       */
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	2b04      	cmp	r3, #4
 8008418:	d903      	bls.n	8008422 <st25r3916AdjustRegulators+0x52>
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	3b05      	subs	r3, #5
 800841e:	b2db      	uxtb	r3, r3
 8008420:	e000      	b.n	8008424 <st25r3916AdjustRegulators+0x54>
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	73fb      	strb	r3, [r7, #15]
            *result_mV = 2400U;                          /* Minimum regulated voltage 2.4V in case of 3.3V supply */
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800842c:	801a      	strh	r2, [r3, #0]
 800842e:	e003      	b.n	8008438 <st25r3916AdjustRegulators+0x68>
        }
        else
        {
            *result_mV = 3600U;                          /* Minimum regulated voltage 3.6V in case of 5V supply   */
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8008436:	801a      	strh	r2, [r3, #0]
        }
        
        *result_mV += (uint16_t)result * 100U;           /* 100mV steps in both 3.3V and 5V supply                */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	881a      	ldrh	r2, [r3, #0]
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	b29b      	uxth	r3, r3
 8008440:	4619      	mov	r1, r3
 8008442:	0089      	lsls	r1, r1, #2
 8008444:	440b      	add	r3, r1
 8008446:	4619      	mov	r1, r3
 8008448:	0088      	lsls	r0, r1, #2
 800844a:	4619      	mov	r1, r3
 800844c:	4603      	mov	r3, r0
 800844e:	440b      	add	r3, r1
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	b29b      	uxth	r3, r3
 8008454:	4413      	add	r3, r2
 8008456:	b29a      	uxth	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	801a      	strh	r2, [r3, #0]
    }
    return ERR_NONE;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <st25r3916SetBitrate>:
}


/*******************************************************************************/
ReturnCode st25r3916SetBitrate(uint8_t txrate, uint8_t rxrate)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	4603      	mov	r3, r0
 800846e:	460a      	mov	r2, r1
 8008470:	71fb      	strb	r3, [r7, #7]
 8008472:	4613      	mov	r3, r2
 8008474:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 8008476:	f107 030f 	add.w	r3, r7, #15
 800847a:	4619      	mov	r1, r3
 800847c:	2004      	movs	r0, #4
 800847e:	f000 fae9 	bl	8008a54 <st25r3916ReadRegister>
    if( rxrate != ST25R3916_BR_DO_NOT_SET )
 8008482:	79bb      	ldrb	r3, [r7, #6]
 8008484:	2bff      	cmp	r3, #255	; 0xff
 8008486:	d00e      	beq.n	80084a6 <st25r3916SetBitrate+0x40>
    {
        if(rxrate > ST25R3916_BR_848)
 8008488:	79bb      	ldrb	r3, [r7, #6]
 800848a:	2b03      	cmp	r3, #3
 800848c:	d901      	bls.n	8008492 <st25r3916SetBitrate+0x2c>
        {
            return ERR_PARAM;
 800848e:	2307      	movs	r3, #7
 8008490:	e025      	b.n	80084de <st25r3916SetBitrate+0x78>
        }

        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_rxrate_mask);     /* MISRA 10.3 */
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	f023 030f 	bic.w	r3, r3, #15
 8008498:	b2db      	uxtb	r3, r3
 800849a:	73fb      	strb	r3, [r7, #15]
        reg |= rxrate << ST25R3916_REG_BIT_RATE_rxrate_shift;
 800849c:	7bfa      	ldrb	r2, [r7, #15]
 800849e:	79bb      	ldrb	r3, [r7, #6]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	73fb      	strb	r3, [r7, #15]
    }
    if( txrate != ST25R3916_BR_DO_NOT_SET )
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	2bff      	cmp	r3, #255	; 0xff
 80084aa:	d012      	beq.n	80084d2 <st25r3916SetBitrate+0x6c>
    {
        if(txrate > ST25R3916_BR_6780)
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	2b07      	cmp	r3, #7
 80084b0:	d901      	bls.n	80084b6 <st25r3916SetBitrate+0x50>
        {
            return ERR_PARAM;
 80084b2:	2307      	movs	r3, #7
 80084b4:	e013      	b.n	80084de <st25r3916SetBitrate+0x78>
        }
        
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	f003 030f 	and.w	r3, r3, #15
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	73fb      	strb	r3, [r7, #15]
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	b25a      	sxtb	r2, r3
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
 80084c8:	b25b      	sxtb	r3, r3
 80084ca:	4313      	orrs	r3, r2
 80084cc:	b25b      	sxtb	r3, r3
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	73fb      	strb	r3, [r7, #15]

    }
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );    
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	4619      	mov	r1, r3
 80084d6:	2004      	movs	r0, #4
 80084d8:	f000 fafa 	bl	8008ad0 <st25r3916WriteRegister>
 80084dc:	4603      	mov	r3, r0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <st25r3916PerformCollisionAvoidance>:


/*******************************************************************************/
ReturnCode st25r3916PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 80084e8:	b590      	push	{r4, r7, lr}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4604      	mov	r4, r0
 80084f0:	4608      	mov	r0, r1
 80084f2:	4611      	mov	r1, r2
 80084f4:	461a      	mov	r2, r3
 80084f6:	4623      	mov	r3, r4
 80084f8:	71fb      	strb	r3, [r7, #7]
 80084fa:	4603      	mov	r3, r0
 80084fc:	71bb      	strb	r3, [r7, #6]
 80084fe:	460b      	mov	r3, r1
 8008500:	717b      	strb	r3, [r7, #5]
 8008502:	4613      	mov	r3, r2
 8008504:	713b      	strb	r3, [r7, #4]
    uint8_t    treMask;
    uint32_t   irqs;
    ReturnCode err;
    
    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 8008506:	79fb      	ldrb	r3, [r7, #7]
 8008508:	2bc8      	cmp	r3, #200	; 0xc8
 800850a:	d004      	beq.n	8008516 <st25r3916PerformCollisionAvoidance+0x2e>
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	2bc9      	cmp	r3, #201	; 0xc9
 8008510:	d001      	beq.n	8008516 <st25r3916PerformCollisionAvoidance+0x2e>
    {
        return ERR_PARAM;
 8008512:	2307      	movs	r3, #7
 8008514:	e05d      	b.n	80085d2 <st25r3916PerformCollisionAvoidance+0xea>
    }
    
    err = ERR_INTERNAL;
 8008516:	230c      	movs	r3, #12
 8008518:	81bb      	strh	r3, [r7, #12]
    
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 800851a:	79bb      	ldrb	r3, [r7, #6]
 800851c:	2bff      	cmp	r3, #255	; 0xff
 800851e:	d102      	bne.n	8008526 <st25r3916PerformCollisionAvoidance+0x3e>
 8008520:	797b      	ldrb	r3, [r7, #5]
 8008522:	2bff      	cmp	r3, #255	; 0xff
 8008524:	d01e      	beq.n	8008564 <st25r3916PerformCollisionAvoidance+0x7c>
    {
        treMask = 0;
 8008526:	2300      	movs	r3, #0
 8008528:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 800852a:	79bb      	ldrb	r3, [r7, #6]
 800852c:	2bff      	cmp	r3, #255	; 0xff
 800852e:	d003      	beq.n	8008538 <st25r3916PerformCollisionAvoidance+0x50>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask;
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8008536:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 8008538:	797b      	ldrb	r3, [r7, #5]
 800853a:	2bff      	cmp	r3, #255	; 0xff
 800853c:	d003      	beq.n	8008546 <st25r3916PerformCollisionAvoidance+0x5e>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	f043 030f 	orr.w	r3, r3, #15
 8008544:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
 8008546:	79bb      	ldrb	r3, [r7, #6]
 8008548:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800854c:	b2da      	uxtb	r2, r3
 800854e:	797b      	ldrb	r3, [r7, #5]
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	b2db      	uxtb	r3, r3
 8008556:	4313      	orrs	r3, r2
 8008558:	b2da      	uxtb	r2, r3
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	4619      	mov	r1, r3
 800855e:	202a      	movs	r0, #42	; 0x2a
 8008560:	f000 fc04 	bl	8008d6c <st25r3916ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, nTRFW );
 8008564:	793b      	ldrb	r3, [r7, #4]
 8008566:	461a      	mov	r2, r3
 8008568:	2103      	movs	r1, #3
 800856a:	200a      	movs	r0, #10
 800856c:	f000 fbfe 	bl	8008d6c <st25r3916ChangeRegisterBits>
        
    /*******************************************************************************/
    /* Enable and clear CA specific interrupts and execute command */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 8008570:	481a      	ldr	r0, [pc, #104]	; (80085dc <st25r3916PerformCollisionAvoidance+0xf4>)
 8008572:	f000 fe09 	bl	8009188 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 8008576:	4819      	ldr	r0, [pc, #100]	; (80085dc <st25r3916PerformCollisionAvoidance+0xf4>)
 8008578:	f000 fe3e 	bl	80091f8 <st25r3916EnableInterrupts>
    
    st25r3916ExecuteCommand( FieldONCmd );
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fb2f 	bl	8008be2 <st25r3916ExecuteCommand>
    
    /*******************************************************************************/
    /* Wait for initial APON interrupt, indicating anticollision avoidance done and ST25R3916's 
     * field is now on, or a CAC indicating a collision */   
    irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_APON ), ST25R3916_TOUT_CA );    
 8008584:	210a      	movs	r1, #10
 8008586:	4816      	ldr	r0, [pc, #88]	; (80085e0 <st25r3916PerformCollisionAvoidance+0xf8>)
 8008588:	f000 fdae 	bl	80090e8 <st25r3916WaitForInterruptsTimed>
 800858c:	60b8      	str	r0, [r7, #8]
   
    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <st25r3916PerformCollisionAvoidance+0xb6>
    {        
        err = ERR_RF_COLLISION;
 8008598:	231d      	movs	r3, #29
 800859a:	81bb      	strh	r3, [r7, #12]
 800859c:	e011      	b.n	80085c2 <st25r3916PerformCollisionAvoidance+0xda>
    }
    else if( (ST25R3916_IRQ_MASK_APON & irqs) != 0U )
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00c      	beq.n	80085c2 <st25r3916PerformCollisionAvoidance+0xda>
    {
        /* After APON wait for CAT interrupt, indication field was switched on minimum guard time has been fulfilled */            
        irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAT ), ST25R3916_TOUT_CA );        
 80085a8:	210a      	movs	r1, #10
 80085aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80085ae:	f000 fd9b 	bl	80090e8 <st25r3916WaitForInterruptsTimed>
 80085b2:	60b8      	str	r0, [r7, #8]
                
        if( (ST25R3916_IRQ_MASK_CAT & irqs) != 0U )                             /* No Collision detected, Field On */
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <st25r3916PerformCollisionAvoidance+0xda>
        {
            err = ERR_NONE;
 80085be:	2300      	movs	r3, #0
 80085c0:	81bb      	strh	r3, [r7, #12]
    {
        /* MISRA 15.7 - Empty else */
    }

    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_EON) );
 80085c2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80085c6:	f000 fddf 	bl	8009188 <st25r3916GetInterrupt>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 80085ca:	4804      	ldr	r0, [pc, #16]	; (80085dc <st25r3916PerformCollisionAvoidance+0xf4>)
 80085cc:	f000 fe20 	bl	8009210 <st25r3916DisableInterrupts>
    
    return err;
 80085d0:	89bb      	ldrh	r3, [r7, #12]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd90      	pop	{r4, r7, pc}
 80085da:	bf00      	nop
 80085dc:	20000600 	.word	0x20000600
 80085e0:	20000400 	.word	0x20000400

080085e4 <st25r3916SetNumTxBits>:


/*******************************************************************************/
void st25r3916SetNumTxBits( uint16_t nBits )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xFFU) );
 80085ee:	88fb      	ldrh	r3, [r7, #6]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	4619      	mov	r1, r3
 80085f4:	2023      	movs	r0, #35	; 0x23
 80085f6:	f000 fa6b 	bl	8008ad0 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xFFU) );
 80085fa:	88fb      	ldrh	r3, [r7, #6]
 80085fc:	0a1b      	lsrs	r3, r3, #8
 80085fe:	b29b      	uxth	r3, r3
 8008600:	b2db      	uxtb	r3, r3
 8008602:	4619      	mov	r1, r3
 8008604:	2022      	movs	r0, #34	; 0x22
 8008606:	f000 fa63 	bl	8008ad0 <st25r3916WriteRegister>
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <st25r3916SetNoResponseTime>:
}


/*******************************************************************************/
ReturnCode st25r3916SetNoResponseTime( uint32_t nrt_64fcs )
{    
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
    ReturnCode err;
    uint8_t    nrt_step;    
    uint32_t   tmpNRT;

    tmpNRT = nrt_64fcs;       /* MISRA 17.8 */
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	60bb      	str	r3, [r7, #8]
    err    = ERR_NONE;
 8008620:	2300      	movs	r3, #0
 8008622:	81fb      	strh	r3, [r7, #14]
    
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 8008624:	4a19      	ldr	r2, [pc, #100]	; (800868c <st25r3916SetNoResponseTime+0x78>)
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	6013      	str	r3, [r2, #0]
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
 800862a:	2300      	movs	r3, #0
 800862c:	737b      	strb	r3, [r7, #13]
    
    
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008634:	d312      	bcc.n	800865c <st25r3916SetNoResponseTime+0x48>
    {
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
 8008636:	2301      	movs	r3, #1
 8008638:	737b      	strb	r3, [r7, #13]
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	333f      	adds	r3, #63	; 0x3f
 800863e:	099b      	lsrs	r3, r3, #6
 8008640:	60bb      	str	r3, [r7, #8]
        
        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008648:	d304      	bcc.n	8008654 <st25r3916SetNoResponseTime+0x40>
        {
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
 800864a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800864e:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;                                           /* Signal parameter error                              */
 8008650:	2307      	movs	r3, #7
 8008652:	81fb      	strh	r3, [r7, #14]
        }
        gST25R3916NRT_64fcs = (64U * tmpNRT);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	019b      	lsls	r3, r3, #6
 8008658:	4a0c      	ldr	r2, [pc, #48]	; (800868c <st25r3916SetNoResponseTime+0x78>)
 800865a:	6013      	str	r3, [r2, #0]
    }

    /* Set the ST25R3916 NRT step units and the value */
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 800865c:	7b7b      	ldrb	r3, [r7, #13]
 800865e:	461a      	mov	r2, r3
 8008660:	2101      	movs	r1, #1
 8008662:	2012      	movs	r0, #18
 8008664:	f000 fb82 	bl	8008d6c <st25r3916ChangeRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER1, (uint8_t)(tmpNRT >> 8U) );
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	0a1b      	lsrs	r3, r3, #8
 800866c:	b2db      	uxtb	r3, r3
 800866e:	4619      	mov	r1, r3
 8008670:	2010      	movs	r0, #16
 8008672:	f000 fa2d 	bl	8008ad0 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER2, (uint8_t)(tmpNRT & 0xFFU) );
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	4619      	mov	r1, r3
 800867c:	2011      	movs	r0, #17
 800867e:	f000 fa27 	bl	8008ad0 <st25r3916WriteRegister>

    return err;
 8008682:	89fb      	ldrh	r3, [r7, #14]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20000814 	.word	0x20000814

08008690 <st25r3916SetGPTime>:
}


/*******************************************************************************/
void st25r3916SetGPTime( uint16_t gpt_8fcs )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_GPT1, (uint8_t)(gpt_8fcs >> 8) );
 800869a:	88fb      	ldrh	r3, [r7, #6]
 800869c:	0a1b      	lsrs	r3, r3, #8
 800869e:	b29b      	uxth	r3, r3
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	4619      	mov	r1, r3
 80086a4:	2013      	movs	r0, #19
 80086a6:	f000 fa13 	bl	8008ad0 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_GPT2, (uint8_t)(gpt_8fcs & 0xFFU) );
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	4619      	mov	r1, r3
 80086b0:	2014      	movs	r0, #20
 80086b2:	f000 fa0d 	bl	8008ad0 <st25r3916WriteRegister>
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <st25r3916SetStartGPTimer>:


/*******************************************************************************/
ReturnCode st25r3916SetStartGPTimer( uint16_t gpt_8fcs, uint8_t trigger_source )
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	4603      	mov	r3, r0
 80086c6:	460a      	mov	r2, r1
 80086c8:	80fb      	strh	r3, [r7, #6]
 80086ca:	4613      	mov	r3, r2
 80086cc:	717b      	strb	r3, [r7, #5]
    st25r3916SetGPTime( gpt_8fcs );
 80086ce:	88fb      	ldrh	r3, [r7, #6]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7ff ffdd 	bl	8008690 <st25r3916SetGPTime>
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, trigger_source );
 80086d6:	797b      	ldrb	r3, [r7, #5]
 80086d8:	461a      	mov	r2, r3
 80086da:	21e0      	movs	r1, #224	; 0xe0
 80086dc:	2012      	movs	r0, #18
 80086de:	f000 fb45 	bl	8008d6c <st25r3916ChangeRegisterBits>
    
    /* If there's no trigger source, start GPT immediately */
    if( trigger_source == ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger )
 80086e2:	797b      	ldrb	r3, [r7, #5]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <st25r3916SetStartGPTimer+0x30>
    {
        st25r3916ExecuteCommand( ST25R3916_CMD_START_GP_TIMER );
 80086e8:	20e0      	movs	r0, #224	; 0xe0
 80086ea:	f000 fa7a 	bl	8008be2 <st25r3916ExecuteCommand>
    }

    return ERR_NONE;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <st25r3916CheckChipID>:


/*******************************************************************************/
bool st25r3916CheckChipID( uint8_t *rev )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 8008704:	f107 030f 	add.w	r3, r7, #15
 8008708:	4619      	mov	r1, r3
 800870a:	203f      	movs	r0, #63	; 0x3f
 800870c:	f000 f9a2 	bl	8008a54 <st25r3916ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3916's IC type code */
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8008716:	2b28      	cmp	r3, #40	; 0x28
 8008718:	d001      	beq.n	800871e <st25r3916CheckChipID+0x26>
    {
        return false;
 800871a:	2300      	movs	r3, #0
 800871c:	e009      	b.n	8008732 <st25r3916CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <st25r3916CheckChipID+0x38>
    {
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	b2da      	uxtb	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 8008730:	2301      	movs	r3, #1
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <st25r3916StreamConfigure>:
}


/*******************************************************************************/
ReturnCode st25r3916StreamConfigure(const struct st25r3916StreamConfig *config)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
    uint8_t smd;
    uint8_t mode;

    smd = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]
    
    if( config->useBPSK != 0U )
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d016      	beq.n	800877c <st25r3916StreamConfigure+0x42>
    {
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
 800874e:	2378      	movs	r3, #120	; 0x78
 8008750:	73bb      	strb	r3, [r7, #14]
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	785b      	ldrb	r3, [r3, #1]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d903      	bls.n	8008762 <st25r3916StreamConfigure+0x28>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	785b      	ldrb	r3, [r3, #1]
 800875e:	2b04      	cmp	r3, #4
 8008760:	d901      	bls.n	8008766 <st25r3916StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 8008762:	2307      	movs	r3, #7
 8008764:	e053      	b.n	800880e <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	785b      	ldrb	r3, [r3, #1]
 800876a:	f1c3 0304 	rsb	r3, r3, #4
 800876e:	b2db      	uxtb	r3, r3
 8008770:	015b      	lsls	r3, r3, #5
 8008772:	b2da      	uxtb	r2, r3
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	4313      	orrs	r3, r2
 8008778:	73fb      	strb	r3, [r7, #15]
 800877a:	e01b      	b.n	80087b4 <st25r3916StreamConfigure+0x7a>
    }
    else
    {
        mode = ST25R3916_REG_MODE_om_subcarrier_stream;
 800877c:	2370      	movs	r3, #112	; 0x70
 800877e:	73bb      	strb	r3, [r7, #14]
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	2b02      	cmp	r3, #2
 8008786:	d903      	bls.n	8008790 <st25r3916StreamConfigure+0x56>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	785b      	ldrb	r3, [r3, #1]
 800878c:	2b06      	cmp	r3, #6
 800878e:	d901      	bls.n	8008794 <st25r3916StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 8008790:	2307      	movs	r3, #7
 8008792:	e03c      	b.n	800880e <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	785b      	ldrb	r3, [r3, #1]
 8008798:	f1c3 0306 	rsb	r3, r3, #6
 800879c:	b2db      	uxtb	r3, r3
 800879e:	015b      	lsls	r3, r3, #5
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	73fb      	strb	r3, [r7, #15]
        if( config->report_period_length == 0U )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	78db      	ldrb	r3, [r3, #3]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <st25r3916StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 80087b0:	2307      	movs	r3, #7
 80087b2:	e02c      	b.n	800880e <st25r3916StreamConfigure+0xd4>
        }
    }

    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	789b      	ldrb	r3, [r3, #2]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <st25r3916StreamConfigure+0x8a>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	789b      	ldrb	r3, [r3, #2]
 80087c0:	2b07      	cmp	r3, #7
 80087c2:	d901      	bls.n	80087c8 <st25r3916StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 80087c4:	2307      	movs	r3, #7
 80087c6:	e022      	b.n	800880e <st25r3916StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	789b      	ldrb	r3, [r3, #2]
 80087cc:	f1c3 0307 	rsb	r3, r3, #7
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	73fb      	strb	r3, [r7, #15]

    if( config->report_period_length > 3U )
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	78db      	ldrb	r3, [r3, #3]
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d901      	bls.n	80087e4 <st25r3916StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 80087e0:	2307      	movs	r3, #7
 80087e2:	e014      	b.n	800880e <st25r3916StreamConfigure+0xd4>
    }
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	78db      	ldrb	r3, [r3, #3]
 80087e8:	00db      	lsls	r3, r3, #3
 80087ea:	b25a      	sxtb	r2, r3
 80087ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	b25b      	sxtb	r3, r3
 80087f4:	73fb      	strb	r3, [r7, #15]

    st25r3916WriteRegister(ST25R3916_REG_STREAM_MODE, smd);
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	4619      	mov	r1, r3
 80087fa:	2009      	movs	r0, #9
 80087fc:	f000 f968 	bl	8008ad0 <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_mask, mode);
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	461a      	mov	r2, r3
 8008804:	2178      	movs	r1, #120	; 0x78
 8008806:	2003      	movs	r0, #3
 8008808:	f000 fab0 	bl	8008d6c <st25r3916ChangeRegisterBits>

    return ERR_NONE;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
	...

08008818 <__NVIC_EnableIRQ>:
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008826:	2b00      	cmp	r3, #0
 8008828:	db0b      	blt.n	8008842 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800882a:	79fb      	ldrb	r3, [r7, #7]
 800882c:	f003 021f 	and.w	r2, r3, #31
 8008830:	4907      	ldr	r1, [pc, #28]	; (8008850 <__NVIC_EnableIRQ+0x38>)
 8008832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008836:	095b      	lsrs	r3, r3, #5
 8008838:	2001      	movs	r0, #1
 800883a:	fa00 f202 	lsl.w	r2, r0, r2
 800883e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	e000e100 	.word	0xe000e100

08008854 <__NVIC_DisableIRQ>:
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800885e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008862:	2b00      	cmp	r3, #0
 8008864:	db10      	blt.n	8008888 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	f003 021f 	and.w	r2, r3, #31
 800886c:	4909      	ldr	r1, [pc, #36]	; (8008894 <__NVIC_DisableIRQ+0x40>)
 800886e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008872:	095b      	lsrs	r3, r3, #5
 8008874:	2001      	movs	r0, #1
 8008876:	fa00 f202 	lsl.w	r2, r0, r2
 800887a:	3320      	adds	r3, #32
 800887c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008884:	f3bf 8f6f 	isb	sy
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	e000e100 	.word	0xe000e100

08008898 <st25r3916comStart>:
 ******************************************************************************
 * LOCAL FUNCTION
 ******************************************************************************
 */
static void st25r3916comStart( void )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
    /* Make this operation atomic, disabling ST25R3916 interrupt during communications*/
    platformProtectST25R391xComm();
 800889c:	4b0b      	ldr	r3, [pc, #44]	; (80088cc <st25r3916comStart+0x34>)
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	3301      	adds	r3, #1
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	4b09      	ldr	r3, [pc, #36]	; (80088cc <st25r3916comStart+0x34>)
 80088a6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	200a      	movs	r0, #10
 80088ae:	f7ff ffd1 	bl	8008854 <__NVIC_DisableIRQ>
 80088b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80088b6:	f3bf 8f6f 	isb	sy
    /* I2C Start and send Slave Address */
    st25r3916I2CStart();
    st25r3916I2CSlaveAddrWR( ST25R3916_I2C_ADDR );
#else
    /* Perform the chip select */
    platformSpiSelect();
 80088ba:	2110      	movs	r1, #16
 80088bc:	4804      	ldr	r0, [pc, #16]	; (80088d0 <st25r3916comStart+0x38>)
 80088be:	f7f7 ff7f 	bl	80007c0 <spiSelect>
    
    #if defined(ST25R391X_COM_SINGLETXRX)
        comBufIt = 0;                                  /* reset local buffer position   */
 80088c2:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <st25r3916comStart+0x3c>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	801a      	strh	r2, [r3, #0]
    #endif /* ST25R391X_COM_SINGLETXRX */
    
#endif /* RFAL_USE_I2C */
    
}
 80088c8:	bf00      	nop
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	20000b40 	.word	0x20000b40
 80088d0:	40020000 	.word	0x40020000
 80088d4:	20000a1a 	.word	0x20000a1a

080088d8 <st25r3916comStop>:


/*******************************************************************************/
static void st25r3916comStop( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	af00      	add	r7, sp, #0
#ifdef RFAL_USE_I2C
    /* Generate Stop signal */
    st25r3916I2CStop();
#else
    /* Release the chip select */
    platformSpiDeselect();
 80088dc:	2110      	movs	r1, #16
 80088de:	4809      	ldr	r0, [pc, #36]	; (8008904 <st25r3916comStop+0x2c>)
 80088e0:	f7f7 ff7e 	bl	80007e0 <spiDeselect>
#endif /* RFAL_USE_I2C */
    
    /* reEnable the ST25R3916 interrupt */
    platformUnprotectST25R391xComm();
 80088e4:	4b08      	ldr	r3, [pc, #32]	; (8008908 <st25r3916comStop+0x30>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	4b06      	ldr	r3, [pc, #24]	; (8008908 <st25r3916comStop+0x30>)
 80088ee:	701a      	strb	r2, [r3, #0]
 80088f0:	4b05      	ldr	r3, [pc, #20]	; (8008908 <st25r3916comStop+0x30>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <st25r3916comStop+0x26>
 80088f8:	200a      	movs	r0, #10
 80088fa:	f7ff ff8d 	bl	8008818 <__NVIC_EnableIRQ>
}
 80088fe:	bf00      	nop
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	40020000 	.word	0x40020000
 8008908:	20000b40 	.word	0x20000b40

0800890c <st25r3916comTx>:
#endif /* RFAL_USE_I2C */


/*******************************************************************************/
static void st25r3916comTx( const uint8_t* txBuf, uint16_t txLen, bool last, bool txOnly )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	4608      	mov	r0, r1
 8008916:	4611      	mov	r1, r2
 8008918:	461a      	mov	r2, r3
 800891a:	4603      	mov	r3, r0
 800891c:	807b      	strh	r3, [r7, #2]
 800891e:	460b      	mov	r3, r1
 8008920:	707b      	strb	r3, [r7, #1]
 8008922:	4613      	mov	r3, r2
 8008924:	703b      	strb	r3, [r7, #0]
    NO_WARNING(last);
    NO_WARNING(txOnly);
    
    if( txLen > 0U )
 8008926:	887b      	ldrh	r3, [r7, #2]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d02e      	beq.n	800898a <st25r3916comTx+0x7e>
        platformI2CTx( txBuf, txLen, last, txOnly );
#else /* RFAL_USE_I2C */
    
        #ifdef ST25R391X_COM_SINGLETXRX
            
            ST_MEMCPY( &comBuf[comBufIt], txBuf, MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy tx data to local buffer                      */
 800892c:	4b19      	ldr	r3, [pc, #100]	; (8008994 <st25r3916comTx+0x88>)
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	461a      	mov	r2, r3
 8008932:	4b19      	ldr	r3, [pc, #100]	; (8008998 <st25r3916comTx+0x8c>)
 8008934:	18d0      	adds	r0, r2, r3
 8008936:	4b17      	ldr	r3, [pc, #92]	; (8008994 <st25r3916comTx+0x88>)
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800893e:	3301      	adds	r3, #1
 8008940:	887a      	ldrh	r2, [r7, #2]
 8008942:	4293      	cmp	r3, r2
 8008944:	bf28      	it	cs
 8008946:	4613      	movcs	r3, r2
 8008948:	461a      	mov	r2, r3
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	f001 feaa 	bl	800a6a4 <memcpy>
            comBufIt += MIN( txLen, (ST25R3916_BUF_LEN - comBufIt) );                               /* store position on local buffer                    */
 8008950:	4b10      	ldr	r3, [pc, #64]	; (8008994 <st25r3916comTx+0x88>)
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008958:	3301      	adds	r3, #1
 800895a:	887a      	ldrh	r2, [r7, #2]
 800895c:	4293      	cmp	r3, r2
 800895e:	bf28      	it	cs
 8008960:	4613      	movcs	r3, r2
 8008962:	b29a      	uxth	r2, r3
 8008964:	4b0b      	ldr	r3, [pc, #44]	; (8008994 <st25r3916comTx+0x88>)
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	4413      	add	r3, r2
 800896a:	b29a      	uxth	r2, r3
 800896c:	4b09      	ldr	r3, [pc, #36]	; (8008994 <st25r3916comTx+0x88>)
 800896e:	801a      	strh	r2, [r3, #0]
                
            if( last && txOnly )                                                                 /* only perform SPI transaction if no Rx will follow */
 8008970:	787b      	ldrb	r3, [r7, #1]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d009      	beq.n	800898a <st25r3916comTx+0x7e>
 8008976:	783b      	ldrb	r3, [r7, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d006      	beq.n	800898a <st25r3916comTx+0x7e>
            {
                platformSpiTxRx( comBuf, NULL, comBufIt );
 800897c:	4b05      	ldr	r3, [pc, #20]	; (8008994 <st25r3916comTx+0x88>)
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	461a      	mov	r2, r3
 8008982:	2100      	movs	r1, #0
 8008984:	4804      	ldr	r0, [pc, #16]	; (8008998 <st25r3916comTx+0x8c>)
 8008986:	f7f7 ff3b 	bl	8000800 <spiTxRx>
            platformSpiTxRx( txBuf, NULL, txLen );
        #endif /* ST25R391X_COM_SINGLETXRX */
            
#endif /* RFAL_USE_I2C */
    }
}
 800898a:	bf00      	nop
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20000a1a 	.word	0x20000a1a
 8008998:	20000818 	.word	0x20000818

0800899c <st25r3916comRx>:


/*******************************************************************************/
static void st25r3916comRx( uint8_t* rxBuf, uint16_t rxLen )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	807b      	strh	r3, [r7, #2]
    if( rxLen > 0U )
 80089a8:	887b      	ldrh	r3, [r7, #2]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d034      	beq.n	8008a18 <st25r3916comRx+0x7c>
#ifdef RFAL_USE_I2C
        platformI2CRx( rxBuf, rxLen );
#else /* RFAL_USE_I2C */
        
    #ifdef ST25R391X_COM_SINGLETXRX
        ST_MEMSET( &comBuf[comBufIt], 0x00, MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );     /* clear outgoing buffer                                  */
 80089ae:	4b1c      	ldr	r3, [pc, #112]	; (8008a20 <st25r3916comRx+0x84>)
 80089b0:	881b      	ldrh	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	4b1b      	ldr	r3, [pc, #108]	; (8008a24 <st25r3916comRx+0x88>)
 80089b6:	18d0      	adds	r0, r2, r3
 80089b8:	4b19      	ldr	r3, [pc, #100]	; (8008a20 <st25r3916comRx+0x84>)
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80089c0:	3301      	adds	r3, #1
 80089c2:	887a      	ldrh	r2, [r7, #2]
 80089c4:	4293      	cmp	r3, r2
 80089c6:	bf28      	it	cs
 80089c8:	4613      	movcs	r3, r2
 80089ca:	461a      	mov	r2, r3
 80089cc:	2100      	movs	r1, #0
 80089ce:	f001 fe74 	bl	800a6ba <memset>
        platformSpiTxRx( comBuf, comBuf, MIN( (comBufIt + rxLen), ST25R3916_BUF_LEN ) );        /* transceive as a single SPI call                        */
 80089d2:	4b13      	ldr	r3, [pc, #76]	; (8008a20 <st25r3916comRx+0x84>)
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	887b      	ldrh	r3, [r7, #2]
 80089da:	4413      	add	r3, r2
 80089dc:	461a      	mov	r2, r3
 80089de:	f240 2301 	movw	r3, #513	; 0x201
 80089e2:	4293      	cmp	r3, r2
 80089e4:	bf28      	it	cs
 80089e6:	4613      	movcs	r3, r2
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	461a      	mov	r2, r3
 80089ec:	490d      	ldr	r1, [pc, #52]	; (8008a24 <st25r3916comRx+0x88>)
 80089ee:	480d      	ldr	r0, [pc, #52]	; (8008a24 <st25r3916comRx+0x88>)
 80089f0:	f7f7 ff06 	bl	8000800 <spiTxRx>
        ST_MEMCPY( rxBuf, &comBuf[comBufIt], MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy from local buf to output buffer and skip cmd byte */
 80089f4:	4b0a      	ldr	r3, [pc, #40]	; (8008a20 <st25r3916comRx+0x84>)
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	461a      	mov	r2, r3
 80089fa:	4b0a      	ldr	r3, [pc, #40]	; (8008a24 <st25r3916comRx+0x88>)
 80089fc:	18d1      	adds	r1, r2, r3
 80089fe:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <st25r3916comRx+0x84>)
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008a06:	3301      	adds	r3, #1
 8008a08:	887a      	ldrh	r2, [r7, #2]
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	bf28      	it	cs
 8008a0e:	4613      	movcs	r3, r2
 8008a10:	461a      	mov	r2, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f001 fe46 	bl	800a6a4 <memcpy>
    #else
        platformSpiTxRx( NULL, rxBuf, rxLen );
    #endif /* ST25R391X_COM_SINGLETXRX */
#endif /* RFAL_USE_I2C */
    }
}
 8008a18:	bf00      	nop
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	20000a1a 	.word	0x20000a1a
 8008a24:	20000818 	.word	0x20000818

08008a28 <st25r3916comTxByte>:


/*******************************************************************************/
static void st25r3916comTxByte( uint8_t txByte, bool last, bool txOnly )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	71fb      	strb	r3, [r7, #7]
 8008a32:	460b      	mov	r3, r1
 8008a34:	71bb      	strb	r3, [r7, #6]
 8008a36:	4613      	mov	r3, r2
 8008a38:	717b      	strb	r3, [r7, #5]
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8008a3a:	79fb      	ldrb	r3, [r7, #7]
 8008a3c:	73fb      	strb	r3, [r7, #15]
    st25r3916comTx( &val, ST25R3916_REG_LEN, last, txOnly );
 8008a3e:	797b      	ldrb	r3, [r7, #5]
 8008a40:	79ba      	ldrb	r2, [r7, #6]
 8008a42:	f107 000f 	add.w	r0, r7, #15
 8008a46:	2101      	movs	r1, #1
 8008a48:	f7ff ff60 	bl	800890c <st25r3916comTx>
}
 8008a4c:	bf00      	nop
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <st25r3916ReadRegister>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode st25r3916ReadRegister( uint8_t reg, uint8_t* val )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6039      	str	r1, [r7, #0]
 8008a5e:	71fb      	strb	r3, [r7, #7]
    return st25r3916ReadMultipleRegisters( reg, val, ST25R3916_REG_LEN );
 8008a60:	79fb      	ldrb	r3, [r7, #7]
 8008a62:	2201      	movs	r2, #1
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 f805 	bl	8008a76 <st25r3916ReadMultipleRegisters>
 8008a6c:	4603      	mov	r3, r0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <st25r3916ReadMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916ReadMultipleRegisters( uint8_t reg, uint8_t* values, uint8_t length )
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	6039      	str	r1, [r7, #0]
 8008a80:	71fb      	strb	r3, [r7, #7]
 8008a82:	4613      	mov	r3, r2
 8008a84:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 8008a86:	79bb      	ldrb	r3, [r7, #6]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d01c      	beq.n	8008ac6 <st25r3916ReadMultipleRegisters+0x50>
    {
        st25r3916comStart();
 8008a8c:	f7ff ff04 	bl	8008898 <st25r3916comStart>
        
        /* If is a space-B register send a direct command first */
        if( (reg & ST25R3916_SPACE_B) != 0U )
 8008a90:	79fb      	ldrb	r3, [r7, #7]
 8008a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d004      	beq.n	8008aa4 <st25r3916ReadMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, false );
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	20fb      	movs	r0, #251	; 0xfb
 8008aa0:	f7ff ffc2 	bl	8008a28 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 8008aa4:	79fb      	ldrb	r3, [r7, #7]
 8008aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2200      	movs	r2, #0
 8008aae:	2101      	movs	r1, #1
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7ff ffb9 	bl	8008a28 <st25r3916comTxByte>
        st25r3916comRepeatStart();
        st25r3916comRx( values, length );
 8008ab6:	79bb      	ldrb	r3, [r7, #6]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	4619      	mov	r1, r3
 8008abc:	6838      	ldr	r0, [r7, #0]
 8008abe:	f7ff ff6d 	bl	800899c <st25r3916comRx>
        st25r3916comStop();
 8008ac2:	f7ff ff09 	bl	80088d8 <st25r3916comStop>
    }
    
    return ERR_NONE;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <st25r3916WriteRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteRegister( uint8_t reg, uint8_t val )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	460a      	mov	r2, r1
 8008ada:	71fb      	strb	r3, [r7, #7]
 8008adc:	4613      	mov	r3, r2
 8008ade:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 8008ae0:	79bb      	ldrb	r3, [r7, #6]
 8008ae2:	73fb      	strb	r3, [r7, #15]
    return st25r3916WriteMultipleRegisters( reg, &value, ST25R3916_REG_LEN );
 8008ae4:	f107 010f 	add.w	r1, r7, #15
 8008ae8:	79fb      	ldrb	r3, [r7, #7]
 8008aea:	2201      	movs	r2, #1
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f805 	bl	8008afc <st25r3916WriteMultipleRegisters>
 8008af2:	4603      	mov	r3, r0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <st25r3916WriteMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916WriteMultipleRegisters( uint8_t reg, const uint8_t* values, uint8_t length )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	6039      	str	r1, [r7, #0]
 8008b06:	71fb      	strb	r3, [r7, #7]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 8008b0c:	79bb      	ldrb	r3, [r7, #6]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d023      	beq.n	8008b5a <st25r3916WriteMultipleRegisters+0x5e>
    {
        st25r3916comStart();
 8008b12:	f7ff fec1 	bl	8008898 <st25r3916comStart>
        
        if( (reg & ST25R3916_SPACE_B) != 0U )
 8008b16:	79fb      	ldrb	r3, [r7, #7]
 8008b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d004      	beq.n	8008b2a <st25r3916WriteMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, true );
 8008b20:	2201      	movs	r2, #1
 8008b22:	2100      	movs	r1, #0
 8008b24:	20fb      	movs	r0, #251	; 0xfb
 8008b26:	f7ff ff7f 	bl	8008a28 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_WRITE_MODE), false, true );
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2201      	movs	r2, #1
 8008b34:	2100      	movs	r1, #0
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff ff76 	bl	8008a28 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 8008b3c:	79bb      	ldrb	r3, [r7, #6]
 8008b3e:	b299      	uxth	r1, r3
 8008b40:	2301      	movs	r3, #1
 8008b42:	2201      	movs	r2, #1
 8008b44:	6838      	ldr	r0, [r7, #0]
 8008b46:	f7ff fee1 	bl	800890c <st25r3916comTx>
        st25r3916comStop();
 8008b4a:	f7ff fec5 	bl	80088d8 <st25r3916comStop>
        
        /* Send a WriteMultiReg event to LED handling */
        st25r3916ledEvtWrMultiReg( reg, values, length);
 8008b4e:	79ba      	ldrb	r2, [r7, #6]
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fbba 	bl	80092ce <st25r3916ledEvtWrMultiReg>
    }
    
    return ERR_NONE;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <st25r3916WriteFifo>:


/*******************************************************************************/
ReturnCode st25r3916WriteFifo( const uint8_t* values, uint16_t length )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_FIFO_DEPTH )
 8008b70:	887b      	ldrh	r3, [r7, #2]
 8008b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b76:	d901      	bls.n	8008b7c <st25r3916WriteFifo+0x18>
    {
        return ERR_PARAM;
 8008b78:	2307      	movs	r3, #7
 8008b7a:	e012      	b.n	8008ba2 <st25r3916WriteFifo+0x3e>
    }
    
    if( length > 0U )
 8008b7c:	887b      	ldrh	r3, [r7, #2]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00e      	beq.n	8008ba0 <st25r3916WriteFifo+0x3c>
    {
        st25r3916comStart();
 8008b82:	f7ff fe89 	bl	8008898 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_LOAD, false, true );
 8008b86:	2201      	movs	r2, #1
 8008b88:	2100      	movs	r1, #0
 8008b8a:	2080      	movs	r0, #128	; 0x80
 8008b8c:	f7ff ff4c 	bl	8008a28 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 8008b90:	8879      	ldrh	r1, [r7, #2]
 8008b92:	2301      	movs	r3, #1
 8008b94:	2201      	movs	r2, #1
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff feb8 	bl	800890c <st25r3916comTx>
        st25r3916comStop();
 8008b9c:	f7ff fe9c 	bl	80088d8 <st25r3916comStop>
    }

    return ERR_NONE;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <st25r3916ReadFifo>:


/*******************************************************************************/
ReturnCode st25r3916ReadFifo( uint8_t* buf, uint16_t length )
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	807b      	strh	r3, [r7, #2]
    if( length > 0U )
 8008bb6:	887b      	ldrh	r3, [r7, #2]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00d      	beq.n	8008bd8 <st25r3916ReadFifo+0x2e>
    {
        st25r3916comStart();
 8008bbc:	f7ff fe6c 	bl	8008898 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_READ, true, false );
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	209f      	movs	r0, #159	; 0x9f
 8008bc6:	f7ff ff2f 	bl	8008a28 <st25r3916comTxByte>
        
        st25r3916comRepeatStart();
        st25r3916comRx( buf, length );
 8008bca:	887b      	ldrh	r3, [r7, #2]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7ff fee4 	bl	800899c <st25r3916comRx>
        st25r3916comStop();
 8008bd4:	f7ff fe80 	bl	80088d8 <st25r3916comStop>
    }

    return ERR_NONE;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <st25r3916ExecuteCommand>:
}


/*******************************************************************************/
ReturnCode st25r3916ExecuteCommand( uint8_t cmd )
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b082      	sub	sp, #8
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	4603      	mov	r3, r0
 8008bea:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 8008bec:	f7ff fe54 	bl	8008898 <st25r3916comStart>
    st25r3916comTxByte( (cmd | ST25R3916_CMD_MODE ), true, true );
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7ff ff13 	bl	8008a28 <st25r3916comTxByte>
    st25r3916comStop();
 8008c02:	f7ff fe69 	bl	80088d8 <st25r3916comStop>
    
    /* Send a cmd event to LED handling */
    st25r3916ledEvtCmd(cmd);
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 fb81 	bl	8009310 <st25r3916ledEvtCmd>
    
    return ERR_NONE;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <st25r3916ReadTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916ReadTestRegister( uint8_t reg, uint8_t* val )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	6039      	str	r1, [r7, #0]
 8008c22:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 8008c24:	f7ff fe38 	bl	8008898 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, false );
 8008c28:	2200      	movs	r2, #0
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	20fc      	movs	r0, #252	; 0xfc
 8008c2e:	f7ff fefb 	bl	8008a28 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff fef2 	bl	8008a28 <st25r3916comTxByte>
    st25r3916comRepeatStart();
    st25r3916comRx( val, ST25R3916_REG_LEN );
 8008c44:	2101      	movs	r1, #1
 8008c46:	6838      	ldr	r0, [r7, #0]
 8008c48:	f7ff fea8 	bl	800899c <st25r3916comRx>
    st25r3916comStop();
 8008c4c:	f7ff fe44 	bl	80088d8 <st25r3916comStop>
    
    return ERR_NONE;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <st25r3916WriteTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteTestRegister( uint8_t reg, uint8_t val )
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	4603      	mov	r3, r0
 8008c62:	460a      	mov	r2, r1
 8008c64:	71fb      	strb	r3, [r7, #7]
 8008c66:	4613      	mov	r3, r2
 8008c68:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 8008c6a:	79bb      	ldrb	r3, [r7, #6]
 8008c6c:	73fb      	strb	r3, [r7, #15]

    st25r3916comStart();
 8008c6e:	f7ff fe13 	bl	8008898 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, true );
 8008c72:	2201      	movs	r2, #1
 8008c74:	2100      	movs	r1, #0
 8008c76:	20fc      	movs	r0, #252	; 0xfc
 8008c78:	f7ff fed6 	bl	8008a28 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_WRITE_MODE), false, true );
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	2100      	movs	r1, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7ff fed0 	bl	8008a28 <st25r3916comTxByte>
    st25r3916comTx( &value, ST25R3916_REG_LEN, true, true );
 8008c88:	f107 000f 	add.w	r0, r7, #15
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	2201      	movs	r2, #1
 8008c90:	2101      	movs	r1, #1
 8008c92:	f7ff fe3b 	bl	800890c <st25r3916comTx>
    st25r3916comStop();
 8008c96:	f7ff fe1f 	bl	80088d8 <st25r3916comStop>
    
    return ERR_NONE;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <st25r3916ClrRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	460a      	mov	r2, r1
 8008cae:	71fb      	strb	r3, [r7, #7]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8008cb4:	f107 020d 	add.w	r2, r7, #13
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	4611      	mov	r1, r2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff fec9 	bl	8008a54 <st25r3916ReadRegister>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	81fb      	strh	r3, [r7, #14]
 8008cc6:	89fb      	ldrh	r3, [r7, #14]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <st25r3916ClrRegisterBits+0x2c>
 8008ccc:	89fb      	ldrh	r3, [r7, #14]
 8008cce:	e01c      	b.n	8008d0a <st25r3916ClrRegisterBits+0x66>
    
    /* Only perform a Write if value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 8008cd0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008cd4:	43db      	mvns	r3, r3
 8008cd6:	b25a      	sxtb	r2, r3
 8008cd8:	7b7b      	ldrb	r3, [r7, #13]
 8008cda:	b25b      	sxtb	r3, r3
 8008cdc:	4013      	ands	r3, r2
 8008cde:	b25b      	sxtb	r3, r3
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	7b7b      	ldrb	r3, [r7, #13]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d101      	bne.n	8008cec <st25r3916ClrRegisterBits+0x48>
    {
        return ERR_NONE;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e00e      	b.n	8008d0a <st25r3916ClrRegisterBits+0x66>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (uint8_t)(rdVal & ~clr_mask) );
 8008cec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008cf0:	43db      	mvns	r3, r3
 8008cf2:	b25a      	sxtb	r2, r3
 8008cf4:	7b7b      	ldrb	r3, [r7, #13]
 8008cf6:	b25b      	sxtb	r3, r3
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	b25b      	sxtb	r3, r3
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	4611      	mov	r1, r2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7ff fee4 	bl	8008ad0 <st25r3916WriteRegister>
 8008d08:	4603      	mov	r3, r0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <st25r3916SetRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	4603      	mov	r3, r0
 8008d1a:	460a      	mov	r2, r1
 8008d1c:	71fb      	strb	r3, [r7, #7]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8008d22:	f107 020d 	add.w	r2, r7, #13
 8008d26:	79fb      	ldrb	r3, [r7, #7]
 8008d28:	4611      	mov	r1, r2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7ff fe92 	bl	8008a54 <st25r3916ReadRegister>
 8008d30:	4603      	mov	r3, r0
 8008d32:	81fb      	strh	r3, [r7, #14]
 8008d34:	89fb      	ldrh	r3, [r7, #14]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <st25r3916SetRegisterBits+0x2c>
 8008d3a:	89fb      	ldrh	r3, [r7, #14]
 8008d3c:	e012      	b.n	8008d64 <st25r3916SetRegisterBits+0x52>
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 8008d3e:	7b7a      	ldrb	r2, [r7, #13]
 8008d40:	79bb      	ldrb	r3, [r7, #6]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	7b7b      	ldrb	r3, [r7, #13]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d101      	bne.n	8008d50 <st25r3916SetRegisterBits+0x3e>
    {
        return ERR_NONE;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	e009      	b.n	8008d64 <st25r3916SetRegisterBits+0x52>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (rdVal | set_mask) );
 8008d50:	7b7a      	ldrb	r2, [r7, #13]
 8008d52:	79bb      	ldrb	r3, [r7, #6]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff feb7 	bl	8008ad0 <st25r3916WriteRegister>
 8008d62:	4603      	mov	r3, r0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <st25r3916ChangeRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	71fb      	strb	r3, [r7, #7]
 8008d76:	460b      	mov	r3, r1
 8008d78:	71bb      	strb	r3, [r7, #6]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	717b      	strb	r3, [r7, #5]
    return st25r3916ModifyRegister(reg, valueMask, (valueMask & value) );
 8008d7e:	79ba      	ldrb	r2, [r7, #6]
 8008d80:	797b      	ldrb	r3, [r7, #5]
 8008d82:	4013      	ands	r3, r2
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	79b9      	ldrb	r1, [r7, #6]
 8008d88:	79fb      	ldrb	r3, [r7, #7]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 f805 	bl	8008d9a <st25r3916ModifyRegister>
 8008d90:	4603      	mov	r3, r0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <st25r3916ModifyRegister>:


/*******************************************************************************/
ReturnCode st25r3916ModifyRegister( uint8_t reg, uint8_t clr_mask, uint8_t set_mask )
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	4603      	mov	r3, r0
 8008da2:	71fb      	strb	r3, [r7, #7]
 8008da4:	460b      	mov	r3, r1
 8008da6:	71bb      	strb	r3, [r7, #6]
 8008da8:	4613      	mov	r3, r2
 8008daa:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8008dac:	f107 020c 	add.w	r2, r7, #12
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	4611      	mov	r1, r2
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff fe4d 	bl	8008a54 <st25r3916ReadRegister>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	81fb      	strh	r3, [r7, #14]
 8008dbe:	89fb      	ldrh	r3, [r7, #14]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <st25r3916ModifyRegister+0x2e>
 8008dc4:	89fb      	ldrh	r3, [r7, #14]
 8008dc6:	e019      	b.n	8008dfc <st25r3916ModifyRegister+0x62>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 8008dc8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008dcc:	43db      	mvns	r3, r3
 8008dce:	b25a      	sxtb	r2, r3
 8008dd0:	7b3b      	ldrb	r3, [r7, #12]
 8008dd2:	b25b      	sxtb	r3, r3
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	b25b      	sxtb	r3, r3
 8008dd8:	737b      	strb	r3, [r7, #13]
    wrVal |= set_mask;
 8008dda:	7b7a      	ldrb	r2, [r7, #13]
 8008ddc:	797b      	ldrb	r3, [r7, #5]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 8008de2:	7b3b      	ldrb	r3, [r7, #12]
 8008de4:	7b7a      	ldrb	r2, [r7, #13]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d101      	bne.n	8008dee <st25r3916ModifyRegister+0x54>
    {
        return ERR_NONE;
 8008dea:	2300      	movs	r3, #0
 8008dec:	e006      	b.n	8008dfc <st25r3916ModifyRegister+0x62>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, wrVal );
 8008dee:	7b7a      	ldrb	r2, [r7, #13]
 8008df0:	79fb      	ldrb	r3, [r7, #7]
 8008df2:	4611      	mov	r1, r2
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff fe6b 	bl	8008ad0 <st25r3916WriteRegister>
 8008dfa:	4603      	mov	r3, r0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <st25r3916ChangeTestRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	71fb      	strb	r3, [r7, #7]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	71bb      	strb	r3, [r7, #6]
 8008e12:	4613      	mov	r3, r2
 8008e14:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 8008e16:	f107 020c 	add.w	r2, r7, #12
 8008e1a:	79fb      	ldrb	r3, [r7, #7]
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7ff fefa 	bl	8008c18 <st25r3916ReadTestRegister>
 8008e24:	4603      	mov	r3, r0
 8008e26:	81fb      	strh	r3, [r7, #14]
 8008e28:	89fb      	ldrh	r3, [r7, #14]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <st25r3916ChangeTestRegisterBits+0x2e>
 8008e2e:	89fb      	ldrh	r3, [r7, #14]
 8008e30:	e01c      	b.n	8008e6c <st25r3916ChangeTestRegisterBits+0x68>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 8008e32:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008e36:	43db      	mvns	r3, r3
 8008e38:	b25a      	sxtb	r2, r3
 8008e3a:	7b3b      	ldrb	r3, [r7, #12]
 8008e3c:	b25b      	sxtb	r3, r3
 8008e3e:	4013      	ands	r3, r2
 8008e40:	b25b      	sxtb	r3, r3
 8008e42:	737b      	strb	r3, [r7, #13]
    wrVal |= (uint8_t)(value & valueMask);
 8008e44:	797a      	ldrb	r2, [r7, #5]
 8008e46:	79bb      	ldrb	r3, [r7, #6]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	7b7b      	ldrb	r3, [r7, #13]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	737b      	strb	r3, [r7, #13]
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 8008e52:	7b3b      	ldrb	r3, [r7, #12]
 8008e54:	7b7a      	ldrb	r2, [r7, #13]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d101      	bne.n	8008e5e <st25r3916ChangeTestRegisterBits+0x5a>
    {
        return ERR_NONE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e006      	b.n	8008e6c <st25r3916ChangeTestRegisterBits+0x68>
    }
    
    /* Write new reg value */
    return st25r3916WriteTestRegister(reg, wrVal );
 8008e5e:	7b7a      	ldrb	r2, [r7, #13]
 8008e60:	79fb      	ldrb	r3, [r7, #7]
 8008e62:	4611      	mov	r1, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7ff fef8 	bl	8008c5a <st25r3916WriteTestRegister>
 8008e6a:	4603      	mov	r3, r0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <st25r3916CheckReg>:


/*******************************************************************************/
bool st25r3916CheckReg( uint8_t reg, uint8_t mask, uint8_t val )
{    
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	71fb      	strb	r3, [r7, #7]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	71bb      	strb	r3, [r7, #6]
 8008e82:	4613      	mov	r3, r2
 8008e84:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( reg, &regVal );
 8008e8a:	f107 020f 	add.w	r2, r7, #15
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff fdde 	bl	8008a54 <st25r3916ReadRegister>
    
    return ( (regVal & mask) == val );
 8008e98:	7bfa      	ldrb	r2, [r7, #15]
 8008e9a:	79bb      	ldrb	r3, [r7, #6]
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	797a      	ldrb	r2, [r7, #5]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	bf0c      	ite	eq
 8008ea6:	2301      	moveq	r3, #1
 8008ea8:	2300      	movne	r3, #0
 8008eaa:	b2db      	uxtb	r3, r3
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <st25r3916IsRegValid>:


/*******************************************************************************/
bool st25r3916IsRegValid( uint8_t reg )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	71fb      	strb	r3, [r7, #7]
    if( !(( (int16_t)reg >= (int16_t)ST25R3916_REG_IO_CONF1) && (reg <= (ST25R3916_SPACE_B | ST25R3916_REG_IC_IDENTITY)) ))
 8008ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	da01      	bge.n	8008eca <st25r3916IsRegValid+0x16>
    {
        return false;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e000      	b.n	8008ecc <st25r3916IsRegValid+0x18>
    }    
    return true;
 8008eca:	2301      	movs	r3, #1
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <__NVIC_EnableIRQ>:
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	db0b      	blt.n	8008f02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	f003 021f 	and.w	r2, r3, #31
 8008ef0:	4907      	ldr	r1, [pc, #28]	; (8008f10 <__NVIC_EnableIRQ+0x38>)
 8008ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ef6:	095b      	lsrs	r3, r3, #5
 8008ef8:	2001      	movs	r0, #1
 8008efa:	fa00 f202 	lsl.w	r2, r0, r2
 8008efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008f02:	bf00      	nop
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	e000e100 	.word	0xe000e100

08008f14 <__NVIC_DisableIRQ>:
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	db10      	blt.n	8008f48 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f26:	79fb      	ldrb	r3, [r7, #7]
 8008f28:	f003 021f 	and.w	r2, r3, #31
 8008f2c:	4909      	ldr	r1, [pc, #36]	; (8008f54 <__NVIC_DisableIRQ+0x40>)
 8008f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f32:	095b      	lsrs	r3, r3, #5
 8008f34:	2001      	movs	r0, #1
 8008f36:	fa00 f202 	lsl.w	r2, r0, r2
 8008f3a:	3320      	adds	r3, #32
 8008f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008f44:	f3bf 8f6f 	isb	sy
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	e000e100 	.word	0xe000e100

08008f58 <st25r3916InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3916InitInterrupts( void )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0
    platformIrqST25R3916PinInitialize();
    platformIrqST25R3916SetCallback( st25r3916Isr );
    
    
    st25r3916interrupt.callback     = NULL;
 8008f5c:	4b08      	ldr	r3, [pc, #32]	; (8008f80 <st25r3916InitInterrupts+0x28>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	605a      	str	r2, [r3, #4]
    st25r3916interrupt.prevCallback = NULL;
 8008f62:	4b07      	ldr	r3, [pc, #28]	; (8008f80 <st25r3916InitInterrupts+0x28>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	601a      	str	r2, [r3, #0]
    st25r3916interrupt.status       = ST25R3916_IRQ_MASK_NONE;
 8008f68:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <st25r3916InitInterrupts+0x28>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	609a      	str	r2, [r3, #8]
    st25r3916interrupt.mask         = ST25R3916_IRQ_MASK_NONE;
 8008f6e:	4b04      	ldr	r3, [pc, #16]	; (8008f80 <st25r3916InitInterrupts+0x28>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	60da      	str	r2, [r3, #12]
}
 8008f74:	bf00      	nop
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	20000a1c 	.word	0x20000a1c

08008f84 <st25r3916Isr>:


/*******************************************************************************/
void st25r3916Isr( void )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
    st25r3916CheckForReceivedInterrupts();
 8008f88:	f000 f80c 	bl	8008fa4 <st25r3916CheckForReceivedInterrupts>
    
    // Check if callback is set and run it
    if( NULL != st25r3916interrupt.callback )
 8008f8c:	4b04      	ldr	r3, [pc, #16]	; (8008fa0 <st25r3916Isr+0x1c>)
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d002      	beq.n	8008f9a <st25r3916Isr+0x16>
    {
        st25r3916interrupt.callback();
 8008f94:	4b02      	ldr	r3, [pc, #8]	; (8008fa0 <st25r3916Isr+0x1c>)
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	4798      	blx	r3
    }
}
 8008f9a:	bf00      	nop
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000a1c 	.word	0x20000a1c

08008fa4 <st25r3916CheckForReceivedInterrupts>:


/*******************************************************************************/
void st25r3916CheckForReceivedInterrupts( void )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3916_INT_REGS_LEN];
    uint32_t irqStatus;

    /* Initialize iregs */
    irqStatus = ST25R3916_IRQ_MASK_NONE;
 8008faa:	2300      	movs	r3, #0
 8008fac:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 8008fae:	463b      	mov	r3, r7
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	21ff      	movs	r1, #255	; 0xff
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f001 fb80 	bl	800a6ba <memset>
    
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8008fba:	e019      	b.n	8008ff0 <st25r3916CheckForReceivedInterrupts+0x4c>
   {
       st25r3916ReadMultipleRegisters( ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN );
 8008fbc:	463b      	mov	r3, r7
 8008fbe:	2204      	movs	r2, #4
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	201a      	movs	r0, #26
 8008fc4:	f7ff fd57 	bl	8008a76 <st25r3916ReadMultipleRegisters>

       irqStatus |= (uint32_t)iregs[0];
 8008fc8:	783b      	ldrb	r3, [r7, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[1]<<8;
 8008fd2:	787b      	ldrb	r3, [r7, #1]
 8008fd4:	021b      	lsls	r3, r3, #8
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[2]<<16;
 8008fdc:	78bb      	ldrb	r3, [r7, #2]
 8008fde:	041b      	lsls	r3, r3, #16
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[3]<<24;
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	061b      	lsls	r3, r3, #24
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	607b      	str	r3, [r7, #4]
   while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8008ff0:	2110      	movs	r1, #16
 8008ff2:	4818      	ldr	r0, [pc, #96]	; (8009054 <st25r3916CheckForReceivedInterrupts+0xb0>)
 8008ff4:	f7f8 fbac 	bl	8001750 <HAL_GPIO_ReadPin>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d0de      	beq.n	8008fbc <st25r3916CheckForReceivedInterrupts+0x18>
   }
   
   /* Forward all interrupts, even masked ones to application */
   platformProtectST25R391xIrqStatus();
 8008ffe:	4b16      	ldr	r3, [pc, #88]	; (8009058 <st25r3916CheckForReceivedInterrupts+0xb4>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	b2da      	uxtb	r2, r3
 8009006:	4b14      	ldr	r3, [pc, #80]	; (8009058 <st25r3916CheckForReceivedInterrupts+0xb4>)
 8009008:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	200a      	movs	r0, #10
 8009010:	f7ff ff80 	bl	8008f14 <__NVIC_DisableIRQ>
 8009014:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009018:	f3bf 8f6f 	isb	sy
   st25r3916interrupt.status |= irqStatus;
 800901c:	4b0f      	ldr	r3, [pc, #60]	; (800905c <st25r3916CheckForReceivedInterrupts+0xb8>)
 800901e:	689a      	ldr	r2, [r3, #8]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4313      	orrs	r3, r2
 8009024:	4a0d      	ldr	r2, [pc, #52]	; (800905c <st25r3916CheckForReceivedInterrupts+0xb8>)
 8009026:	6093      	str	r3, [r2, #8]
   platformUnprotectST25R391xIrqStatus();
 8009028:	4b0b      	ldr	r3, [pc, #44]	; (8009058 <st25r3916CheckForReceivedInterrupts+0xb4>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	3b01      	subs	r3, #1
 800902e:	b2da      	uxtb	r2, r3
 8009030:	4b09      	ldr	r3, [pc, #36]	; (8009058 <st25r3916CheckForReceivedInterrupts+0xb4>)
 8009032:	701a      	strb	r2, [r3, #0]
 8009034:	4b08      	ldr	r3, [pc, #32]	; (8009058 <st25r3916CheckForReceivedInterrupts+0xb4>)
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d102      	bne.n	8009042 <st25r3916CheckForReceivedInterrupts+0x9e>
 800903c:	200a      	movs	r0, #10
 800903e:	f7ff ff4b 	bl	8008ed8 <__NVIC_EnableIRQ>

   /* Send an IRQ event to LED handling */
   st25r3916ledEvtIrq( st25r3916interrupt.status );
 8009042:	4b06      	ldr	r3, [pc, #24]	; (800905c <st25r3916CheckForReceivedInterrupts+0xb8>)
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	4618      	mov	r0, r3
 8009048:	f000 f927 	bl	800929a <st25r3916ledEvtIrq>
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	40020800 	.word	0x40020800
 8009058:	20000b40 	.word	0x20000b40
 800905c:	20000a1c 	.word	0x20000a1c

08009060 <st25r3916ModifyInterrupts>:


/*******************************************************************************/
void st25r3916ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
    uint8_t  i;
    uint32_t old_mask;
    uint32_t new_mask;
    

    old_mask = st25r3916interrupt.mask;
 800906a:	4b1e      	ldr	r3, [pc, #120]	; (80090e4 <st25r3916ModifyInterrupts+0x84>)
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	613b      	str	r3, [r7, #16]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	43da      	mvns	r2, r3
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	401a      	ands	r2, r3
 8009078:	6939      	ldr	r1, [r7, #16]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	400b      	ands	r3, r1
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
    st25r3916interrupt.mask &= ~clr_mask;
 8009082:	4b18      	ldr	r3, [pc, #96]	; (80090e4 <st25r3916ModifyInterrupts+0x84>)
 8009084:	68da      	ldr	r2, [r3, #12]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	43db      	mvns	r3, r3
 800908a:	4013      	ands	r3, r2
 800908c:	4a15      	ldr	r2, [pc, #84]	; (80090e4 <st25r3916ModifyInterrupts+0x84>)
 800908e:	60d3      	str	r3, [r2, #12]
    st25r3916interrupt.mask |= set_mask;
 8009090:	4b14      	ldr	r3, [pc, #80]	; (80090e4 <st25r3916ModifyInterrupts+0x84>)
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	4313      	orrs	r3, r2
 8009098:	4a12      	ldr	r2, [pc, #72]	; (80090e4 <st25r3916ModifyInterrupts+0x84>)
 800909a:	60d3      	str	r3, [r2, #12]
    
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 800909c:	2300      	movs	r3, #0
 800909e:	75fb      	strb	r3, [r7, #23]
 80090a0:	e019      	b.n	80090d6 <st25r3916ModifyInterrupts+0x76>
    { 
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	00db      	lsls	r3, r3, #3
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	fa22 f303 	lsr.w	r3, r2, r3
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00d      	beq.n	80090ce <st25r3916ModifyInterrupts+0x6e>
        {
            continue;
        }
        
        st25r3916WriteRegister(ST25R3916_REG_IRQ_MASK_MAIN + i, (uint8_t)((st25r3916interrupt.mask>>(8U*i)) & 0xFFU) );
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	3316      	adds	r3, #22
 80090b6:	b2d8      	uxtb	r0, r3
 80090b8:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <st25r3916ModifyInterrupts+0x84>)
 80090ba:	68da      	ldr	r2, [r3, #12]
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	fa22 f303 	lsr.w	r3, r2, r3
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	4619      	mov	r1, r3
 80090c8:	f7ff fd02 	bl	8008ad0 <st25r3916WriteRegister>
 80090cc:	e000      	b.n	80090d0 <st25r3916ModifyInterrupts+0x70>
            continue;
 80090ce:	bf00      	nop
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
 80090d2:	3301      	adds	r3, #1
 80090d4:	75fb      	strb	r3, [r7, #23]
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d9e2      	bls.n	80090a2 <st25r3916ModifyInterrupts+0x42>
    }
    return;
 80090dc:	bf00      	nop
}
 80090de:	3718      	adds	r7, #24
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20000a1c 	.word	0x20000a1c

080090e8 <st25r3916WaitForInterruptsTimed>:


/*******************************************************************************/
uint32_t st25r3916WaitForInterruptsTimed( uint32_t mask, uint16_t tmo )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	807b      	strh	r3, [r7, #2]
    uint32_t tmrDelay;
    uint32_t status;
    
    tmrDelay = platformTimerCreate( tmo );
 80090f4:	887b      	ldrh	r3, [r7, #2]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7f7 fbc0 	bl	800087c <timerCalculateTimer>
 80090fc:	60f8      	str	r0, [r7, #12]
    
    /* Run until specific interrupt has happen or the timer has expired */
    do 
    {
        status = (st25r3916interrupt.status & mask);
 80090fe:	4b20      	ldr	r3, [pc, #128]	; (8009180 <st25r3916WaitForInterruptsTimed+0x98>)
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	4013      	ands	r3, r2
 8009106:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmrDelay ) || (tmo == 0U)) && (status == 0U) );
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f7f7 fbc5 	bl	8000898 <timerIsExpired>
 800910e:	4603      	mov	r3, r0
 8009110:	f083 0301 	eor.w	r3, r3, #1
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d102      	bne.n	8009120 <st25r3916WaitForInterruptsTimed+0x38>
 800911a:	887b      	ldrh	r3, [r7, #2]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d102      	bne.n	8009126 <st25r3916WaitForInterruptsTimed+0x3e>
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0eb      	beq.n	80090fe <st25r3916WaitForInterruptsTimed+0x16>

    status = st25r3916interrupt.status & mask;
 8009126:	4b16      	ldr	r3, [pc, #88]	; (8009180 <st25r3916WaitForInterruptsTimed+0x98>)
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	4013      	ands	r3, r2
 800912e:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 8009130:	4b14      	ldr	r3, [pc, #80]	; (8009184 <st25r3916WaitForInterruptsTimed+0x9c>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	3301      	adds	r3, #1
 8009136:	b2da      	uxtb	r2, r3
 8009138:	4b12      	ldr	r3, [pc, #72]	; (8009184 <st25r3916WaitForInterruptsTimed+0x9c>)
 800913a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	200a      	movs	r0, #10
 8009142:	f7ff fee7 	bl	8008f14 <__NVIC_DisableIRQ>
 8009146:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800914a:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status &= ~status;
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <st25r3916WaitForInterruptsTimed+0x98>)
 8009150:	689a      	ldr	r2, [r3, #8]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	43db      	mvns	r3, r3
 8009156:	4013      	ands	r3, r2
 8009158:	4a09      	ldr	r2, [pc, #36]	; (8009180 <st25r3916WaitForInterruptsTimed+0x98>)
 800915a:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 800915c:	4b09      	ldr	r3, [pc, #36]	; (8009184 <st25r3916WaitForInterruptsTimed+0x9c>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	3b01      	subs	r3, #1
 8009162:	b2da      	uxtb	r2, r3
 8009164:	4b07      	ldr	r3, [pc, #28]	; (8009184 <st25r3916WaitForInterruptsTimed+0x9c>)
 8009166:	701a      	strb	r2, [r3, #0]
 8009168:	4b06      	ldr	r3, [pc, #24]	; (8009184 <st25r3916WaitForInterruptsTimed+0x9c>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d102      	bne.n	8009176 <st25r3916WaitForInterruptsTimed+0x8e>
 8009170:	200a      	movs	r0, #10
 8009172:	f7ff feb1 	bl	8008ed8 <__NVIC_EnableIRQ>
    
    return status;
 8009176:	68bb      	ldr	r3, [r7, #8]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	20000a1c 	.word	0x20000a1c
 8009184:	20000b40 	.word	0x20000b40

08009188 <st25r3916GetInterrupt>:


/*******************************************************************************/
uint32_t st25r3916GetInterrupt( uint32_t mask )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3916interrupt.status & mask);
 8009190:	4b17      	ldr	r3, [pc, #92]	; (80091f0 <st25r3916GetInterrupt+0x68>)
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4013      	ands	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]
    if(irqs != ST25R3916_IRQ_MASK_NONE)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d022      	beq.n	80091e6 <st25r3916GetInterrupt+0x5e>
    {
        platformProtectST25R391xIrqStatus();
 80091a0:	4b14      	ldr	r3, [pc, #80]	; (80091f4 <st25r3916GetInterrupt+0x6c>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	3301      	adds	r3, #1
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	4b12      	ldr	r3, [pc, #72]	; (80091f4 <st25r3916GetInterrupt+0x6c>)
 80091aa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	200a      	movs	r0, #10
 80091b2:	f7ff feaf 	bl	8008f14 <__NVIC_DisableIRQ>
 80091b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80091ba:	f3bf 8f6f 	isb	sy
        st25r3916interrupt.status &= ~irqs;
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <st25r3916GetInterrupt+0x68>)
 80091c0:	689a      	ldr	r2, [r3, #8]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	43db      	mvns	r3, r3
 80091c6:	4013      	ands	r3, r2
 80091c8:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <st25r3916GetInterrupt+0x68>)
 80091ca:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 80091cc:	4b09      	ldr	r3, [pc, #36]	; (80091f4 <st25r3916GetInterrupt+0x6c>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	3b01      	subs	r3, #1
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	4b07      	ldr	r3, [pc, #28]	; (80091f4 <st25r3916GetInterrupt+0x6c>)
 80091d6:	701a      	strb	r2, [r3, #0]
 80091d8:	4b06      	ldr	r3, [pc, #24]	; (80091f4 <st25r3916GetInterrupt+0x6c>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d102      	bne.n	80091e6 <st25r3916GetInterrupt+0x5e>
 80091e0:	200a      	movs	r0, #10
 80091e2:	f7ff fe79 	bl	8008ed8 <__NVIC_EnableIRQ>
    }

    return irqs;
 80091e6:	68fb      	ldr	r3, [r7, #12]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20000a1c 	.word	0x20000a1c
 80091f4:	20000b40 	.word	0x20000b40

080091f8 <st25r3916EnableInterrupts>:
}


/*******************************************************************************/
void st25r3916EnableInterrupts(uint32_t mask)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(mask, 0);
 8009200:	2100      	movs	r1, #0
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff ff2c 	bl	8009060 <st25r3916ModifyInterrupts>
}
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <st25r3916DisableInterrupts>:


/*******************************************************************************/
void st25r3916DisableInterrupts(uint32_t mask)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(0, mask);
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	2000      	movs	r0, #0
 800921c:	f7ff ff20 	bl	8009060 <st25r3916ModifyInterrupts>
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <st25r3916ClearInterrupts>:

/*******************************************************************************/
void st25r3916ClearInterrupts( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
    uint8_t iregs[ST25R3916_INT_REGS_LEN];

    st25r3916ReadMultipleRegisters(ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN);
 800922e:	1d3b      	adds	r3, r7, #4
 8009230:	2204      	movs	r2, #4
 8009232:	4619      	mov	r1, r3
 8009234:	201a      	movs	r0, #26
 8009236:	f7ff fc1e 	bl	8008a76 <st25r3916ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 800923a:	4b12      	ldr	r3, [pc, #72]	; (8009284 <st25r3916ClearInterrupts+0x5c>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	3301      	adds	r3, #1
 8009240:	b2da      	uxtb	r2, r3
 8009242:	4b10      	ldr	r3, [pc, #64]	; (8009284 <st25r3916ClearInterrupts+0x5c>)
 8009244:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	200a      	movs	r0, #10
 800924c:	f7ff fe62 	bl	8008f14 <__NVIC_DisableIRQ>
 8009250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009254:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status = ST25R3916_IRQ_MASK_NONE;
 8009258:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <st25r3916ClearInterrupts+0x60>)
 800925a:	2200      	movs	r2, #0
 800925c:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 800925e:	4b09      	ldr	r3, [pc, #36]	; (8009284 <st25r3916ClearInterrupts+0x5c>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	3b01      	subs	r3, #1
 8009264:	b2da      	uxtb	r2, r3
 8009266:	4b07      	ldr	r3, [pc, #28]	; (8009284 <st25r3916ClearInterrupts+0x5c>)
 8009268:	701a      	strb	r2, [r3, #0]
 800926a:	4b06      	ldr	r3, [pc, #24]	; (8009284 <st25r3916ClearInterrupts+0x5c>)
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d103      	bne.n	800927a <st25r3916ClearInterrupts+0x52>
 8009272:	200a      	movs	r0, #10
 8009274:	f7ff fe30 	bl	8008ed8 <__NVIC_EnableIRQ>
    return;
 8009278:	bf00      	nop
 800927a:	bf00      	nop
}
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	20000b40 	.word	0x20000b40
 8009288:	20000a1c 	.word	0x20000a1c

0800928c <st25r3916ledInit>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3916ledInit( void )
{
 800928c:	b480      	push	{r7}
 800928e:	af00      	add	r7, sp, #0
    /* Initialize LEDs if existing and defined */
    platformLedsInitialize();
    
    st25r3916ledRxOff();
    st25r3916ledFieldOff();
}
 8009290:	bf00      	nop
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <st25r3916ledEvtIrq>:


/*******************************************************************************/
void st25r3916ledEvtIrq( uint32_t irqs )
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
    if( (irqs & (ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_NRE    | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_RXE_PTA |                                                 
                 ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_WU_F    | ST25R3916_IRQ_MASK_RFU2)   ) != 0U ) 
    {
        st25r3916ledRxOff();
    }
}
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <st25r3916ledEvtWrReg>:


/*******************************************************************************/
void st25r3916ledEvtWrReg( uint8_t reg, uint8_t val )
{
 80092ae:	b480      	push	{r7}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	4603      	mov	r3, r0
 80092b6:	460a      	mov	r2, r1
 80092b8:	71fb      	strb	r3, [r7, #7]
 80092ba:	4613      	mov	r3, r2
 80092bc:	71bb      	strb	r3, [r7, #6]
    if( reg == ST25R3916_REG_OP_CONTROL )
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	2b02      	cmp	r3, #2
        else
        {
            st25r3916ledFieldOff();
        }
    }
}
 80092c2:	bf00      	nop
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <st25r3916ledEvtWrMultiReg>:


/*******************************************************************************/
void st25r3916ledEvtWrMultiReg( uint8_t reg, const uint8_t* vals, uint8_t len )
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	4603      	mov	r3, r0
 80092d6:	6039      	str	r1, [r7, #0]
 80092d8:	71fb      	strb	r3, [r7, #7]
 80092da:	4613      	mov	r3, r2
 80092dc:	71bb      	strb	r3, [r7, #6]
    uint8_t i;
    
    for(i=0; i<(len); i++)
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
 80092e2:	e00d      	b.n	8009300 <st25r3916ledEvtWrMultiReg+0x32>
    {
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
 80092e4:	79fa      	ldrb	r2, [r7, #7]
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	4413      	add	r3, r2
 80092ea:	b2d8      	uxtb	r0, r3
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	4413      	add	r3, r2
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	4619      	mov	r1, r3
 80092f6:	f7ff ffda 	bl	80092ae <st25r3916ledEvtWrReg>
    for(i=0; i<(len); i++)
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
 80092fc:	3301      	adds	r3, #1
 80092fe:	73fb      	strb	r3, [r7, #15]
 8009300:	7bfa      	ldrb	r2, [r7, #15]
 8009302:	79bb      	ldrb	r3, [r7, #6]
 8009304:	429a      	cmp	r2, r3
 8009306:	d3ed      	bcc.n	80092e4 <st25r3916ledEvtWrMultiReg+0x16>
    }
}
 8009308:	bf00      	nop
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <st25r3916ledEvtCmd>:


/*******************************************************************************/
void st25r3916ledEvtCmd( uint8_t cmd )
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	71fb      	strb	r3, [r7, #7]
    if( cmd == ST25R3916_CMD_SET_DEFAULT )
    {
        st25r3916ledFieldOff();
        st25r3916ledRxOff();
    }
}
 800931a:	bf00      	nop
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8009348:	2302      	movs	r3, #2
 800934a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00c      	beq.n	8009370 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	78fa      	ldrb	r2, [r7, #3]
 8009360:	4611      	mov	r1, r2
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d101      	bne.n	8009370 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	460b      	mov	r3, r1
 8009384:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	78fa      	ldrb	r2, [r7, #3]
 8009390:	4611      	mov	r1, r2
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	4798      	blx	r3
  return USBD_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fe94 	bl	800a0e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80093c6:	461a      	mov	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80093d4:	f003 031f 	and.w	r3, r3, #31
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d00c      	beq.n	80093f6 <USBD_LL_SetupStage+0x56>
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d302      	bcc.n	80093e6 <USBD_LL_SetupStage+0x46>
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d010      	beq.n	8009406 <USBD_LL_SetupStage+0x66>
 80093e4:	e017      	b.n	8009416 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa04 	bl	80097fc <USBD_StdDevReq>
    break;
 80093f4:	e01a      	b.n	800942c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fa66 	bl	80098d0 <USBD_StdItfReq>
    break;
 8009404:	e012      	b.n	800942c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 faa4 	bl	800995c <USBD_StdEPReq>
    break;
 8009414:	e00a      	b.n	800942c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800941c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009420:	b2db      	uxtb	r3, r3
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 f81d 	bl	800a464 <USBD_LL_StallEP>
    break;
 800942a:	bf00      	nop
  }

  return USBD_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b086      	sub	sp, #24
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	460b      	mov	r3, r1
 8009440:	607a      	str	r2, [r7, #4]
 8009442:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8009444:	7afb      	ldrb	r3, [r7, #11]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d14b      	bne.n	80094e2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009450:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009458:	2b03      	cmp	r3, #3
 800945a:	d134      	bne.n	80094c6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	429a      	cmp	r2, r3
 8009466:	d919      	bls.n	800949c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	68da      	ldr	r2, [r3, #12]
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	1ad2      	subs	r2, r2, r3
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800947e:	429a      	cmp	r2, r3
 8009480:	d203      	bcs.n	800948a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8009486:	b29b      	uxth	r3, r3
 8009488:	e002      	b.n	8009490 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800948e:	b29b      	uxth	r3, r3
 8009490:	461a      	mov	r2, r3
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 fe9f 	bl	800a1d8 <USBD_CtlContinueRx>
 800949a:	e038      	b.n	800950e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00a      	beq.n	80094be <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d105      	bne.n	80094be <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 fe9c 	bl	800a1fc <USBD_CtlSendStatus>
 80094c4:	e023      	b.n	800950e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80094cc:	2b05      	cmp	r3, #5
 80094ce:	d11e      	bne.n	800950e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80094d8:	2100      	movs	r1, #0
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 ffc2 	bl	800a464 <USBD_LL_StallEP>
 80094e0:	e015      	b.n	800950e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00d      	beq.n	800950a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d108      	bne.n	800950a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	7afa      	ldrb	r2, [r7, #11]
 8009502:	4611      	mov	r1, r2
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	4798      	blx	r3
 8009508:	e001      	b.n	800950e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800950a:	2302      	movs	r3, #2
 800950c:	e000      	b.n	8009510 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3718      	adds	r7, #24
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	460b      	mov	r3, r1
 8009522:	607a      	str	r2, [r7, #4]
 8009524:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8009526:	7afb      	ldrb	r3, [r7, #11]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d17f      	bne.n	800962c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3314      	adds	r3, #20
 8009530:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009538:	2b02      	cmp	r3, #2
 800953a:	d15c      	bne.n	80095f6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	68da      	ldr	r2, [r3, #12]
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	429a      	cmp	r2, r3
 8009546:	d915      	bls.n	8009574 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	68da      	ldr	r2, [r3, #12]
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	1ad2      	subs	r2, r2, r3
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	b29b      	uxth	r3, r3
 800955c:	461a      	mov	r2, r3
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 fe27 	bl	800a1b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009566:	2300      	movs	r3, #0
 8009568:	2200      	movs	r2, #0
 800956a:	2100      	movs	r1, #0
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f001 f825 	bl	800a5bc <USBD_LL_PrepareReceive>
 8009572:	e04e      	b.n	8009612 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	6912      	ldr	r2, [r2, #16]
 800957c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009580:	fb02 f201 	mul.w	r2, r2, r1
 8009584:	1a9b      	subs	r3, r3, r2
 8009586:	2b00      	cmp	r3, #0
 8009588:	d11c      	bne.n	80095c4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	689a      	ldr	r2, [r3, #8]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009592:	429a      	cmp	r2, r3
 8009594:	d316      	bcc.n	80095c4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	689a      	ldr	r2, [r3, #8]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d20f      	bcs.n	80095c4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095a4:	2200      	movs	r2, #0
 80095a6:	2100      	movs	r1, #0
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 fe03 	bl	800a1b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80095b6:	2300      	movs	r3, #0
 80095b8:	2200      	movs	r2, #0
 80095ba:	2100      	movs	r1, #0
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fffd 	bl	800a5bc <USBD_LL_PrepareReceive>
 80095c2:	e026      	b.n	8009612 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00a      	beq.n	80095e6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d105      	bne.n	80095e6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80095e6:	2180      	movs	r1, #128	; 0x80
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 ff3b 	bl	800a464 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f000 fe17 	bl	800a222 <USBD_CtlReceiveStatus>
 80095f4:	e00d      	b.n	8009612 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80095fc:	2b04      	cmp	r3, #4
 80095fe:	d004      	beq.n	800960a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009606:	2b00      	cmp	r3, #0
 8009608:	d103      	bne.n	8009612 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800960a:	2180      	movs	r1, #128	; 0x80
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 ff29 	bl	800a464 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8009618:	2b01      	cmp	r3, #1
 800961a:	d11d      	bne.n	8009658 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f7ff fe82 	bl	8009326 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800962a:	e015      	b.n	8009658 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00d      	beq.n	8009654 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800963e:	2b03      	cmp	r3, #3
 8009640:	d108      	bne.n	8009654 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	7afa      	ldrb	r2, [r7, #11]
 800964c:	4611      	mov	r1, r2
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	4798      	blx	r3
 8009652:	e001      	b.n	8009658 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009654:	2302      	movs	r3, #2
 8009656:	e000      	b.n	800965a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3718      	adds	r7, #24
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800966a:	2340      	movs	r3, #64	; 0x40
 800966c:	2200      	movs	r2, #0
 800966e:	2100      	movs	r1, #0
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fed1 	bl	800a418 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2240      	movs	r2, #64	; 0x40
 8009682:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009686:	2340      	movs	r3, #64	; 0x40
 8009688:	2200      	movs	r2, #0
 800968a:	2180      	movs	r1, #128	; 0x80
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fec3 	bl	800a418 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2240      	movs	r2, #64	; 0x40
 800969c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d009      	beq.n	80096da <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	6852      	ldr	r2, [r2, #4]
 80096d2:	b2d2      	uxtb	r2, r2
 80096d4:	4611      	mov	r1, r2
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	4798      	blx	r3
  }

  return USBD_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	78fa      	ldrb	r2, [r7, #3]
 80096f4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2204      	movs	r2, #4
 800971c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800972e:	b480      	push	{r7}
 8009730:	b083      	sub	sp, #12
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800975e:	2b03      	cmp	r3, #3
 8009760:	d10b      	bne.n	800977a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d005      	beq.n	800977a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800979e:	b480      	push	{r7}
 80097a0:	b083      	sub	sp, #12
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	460b      	mov	r3, r1
 80097a8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	6852      	ldr	r2, [r2, #4]
 80097ea:	b2d2      	uxtb	r2, r2
 80097ec:	4611      	mov	r1, r2
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	4798      	blx	r3

  return USBD_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009812:	2b20      	cmp	r3, #32
 8009814:	d004      	beq.n	8009820 <USBD_StdDevReq+0x24>
 8009816:	2b40      	cmp	r3, #64	; 0x40
 8009818:	d002      	beq.n	8009820 <USBD_StdDevReq+0x24>
 800981a:	2b00      	cmp	r3, #0
 800981c:	d008      	beq.n	8009830 <USBD_StdDevReq+0x34>
 800981e:	e04c      	b.n	80098ba <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
    break;
 800982e:	e049      	b.n	80098c4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	785b      	ldrb	r3, [r3, #1]
 8009834:	2b09      	cmp	r3, #9
 8009836:	d83a      	bhi.n	80098ae <USBD_StdDevReq+0xb2>
 8009838:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <USBD_StdDevReq+0x44>)
 800983a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983e:	bf00      	nop
 8009840:	08009891 	.word	0x08009891
 8009844:	080098a5 	.word	0x080098a5
 8009848:	080098af 	.word	0x080098af
 800984c:	0800989b 	.word	0x0800989b
 8009850:	080098af 	.word	0x080098af
 8009854:	08009873 	.word	0x08009873
 8009858:	08009869 	.word	0x08009869
 800985c:	080098af 	.word	0x080098af
 8009860:	08009887 	.word	0x08009887
 8009864:	0800987d 	.word	0x0800987d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f9d2 	bl	8009c14 <USBD_GetDescriptor>
      break;
 8009870:	e022      	b.n	80098b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fac7 	bl	8009e08 <USBD_SetAddress>
      break;
 800987a:	e01d      	b.n	80098b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fb04 	bl	8009e8c <USBD_SetConfig>
      break;
 8009884:	e018      	b.n	80098b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fb8d 	bl	8009fa8 <USBD_GetConfig>
      break;
 800988e:	e013      	b.n	80098b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fbbc 	bl	800a010 <USBD_GetStatus>
      break;
 8009898:	e00e      	b.n	80098b8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fbea 	bl	800a076 <USBD_SetFeature>
      break;
 80098a2:	e009      	b.n	80098b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fbf9 	bl	800a09e <USBD_ClrFeature>
      break;
 80098ac:	e004      	b.n	80098b8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fc52 	bl	800a15a <USBD_CtlError>
      break;
 80098b6:	bf00      	nop
    }
    break;
 80098b8:	e004      	b.n	80098c4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fc4c 	bl	800a15a <USBD_CtlError>
    break;
 80098c2:	bf00      	nop
  }

  return ret;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop

080098d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d003      	beq.n	80098f2 <USBD_StdItfReq+0x22>
 80098ea:	2b40      	cmp	r3, #64	; 0x40
 80098ec:	d001      	beq.n	80098f2 <USBD_StdItfReq+0x22>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d12a      	bne.n	8009948 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80098f8:	3b01      	subs	r3, #1
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d81d      	bhi.n	800993a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	889b      	ldrh	r3, [r3, #4]
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b01      	cmp	r3, #1
 8009906:	d813      	bhi.n	8009930 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	4798      	blx	r3
 8009916:	4603      	mov	r3, r0
 8009918:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	88db      	ldrh	r3, [r3, #6]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d110      	bne.n	8009944 <USBD_StdItfReq+0x74>
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10d      	bne.n	8009944 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fc67 	bl	800a1fc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800992e:	e009      	b.n	8009944 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fc11 	bl	800a15a <USBD_CtlError>
      break;
 8009938:	e004      	b.n	8009944 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fc0c 	bl	800a15a <USBD_CtlError>
      break;
 8009942:	e000      	b.n	8009946 <USBD_StdItfReq+0x76>
      break;
 8009944:	bf00      	nop
    }
    break;
 8009946:	e004      	b.n	8009952 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fc05 	bl	800a15a <USBD_CtlError>
    break;
 8009950:	bf00      	nop
  }

  return USBD_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	889b      	ldrh	r3, [r3, #4]
 800996e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009978:	2b20      	cmp	r3, #32
 800997a:	d004      	beq.n	8009986 <USBD_StdEPReq+0x2a>
 800997c:	2b40      	cmp	r3, #64	; 0x40
 800997e:	d002      	beq.n	8009986 <USBD_StdEPReq+0x2a>
 8009980:	2b00      	cmp	r3, #0
 8009982:	d008      	beq.n	8009996 <USBD_StdEPReq+0x3a>
 8009984:	e13b      	b.n	8009bfe <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	4798      	blx	r3
    break;
 8009994:	e138      	b.n	8009c08 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800999e:	2b20      	cmp	r3, #32
 80099a0:	d10a      	bne.n	80099b8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	4798      	blx	r3
 80099b0:	4603      	mov	r3, r0
 80099b2:	73fb      	strb	r3, [r7, #15]

      return ret;
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	e128      	b.n	8009c0a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	785b      	ldrb	r3, [r3, #1]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d03e      	beq.n	8009a3e <USBD_StdEPReq+0xe2>
 80099c0:	2b03      	cmp	r3, #3
 80099c2:	d002      	beq.n	80099ca <USBD_StdEPReq+0x6e>
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d070      	beq.n	8009aaa <USBD_StdEPReq+0x14e>
 80099c8:	e113      	b.n	8009bf2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d002      	beq.n	80099da <USBD_StdEPReq+0x7e>
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d015      	beq.n	8009a04 <USBD_StdEPReq+0xa8>
 80099d8:	e02b      	b.n	8009a32 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00c      	beq.n	80099fa <USBD_StdEPReq+0x9e>
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	2b80      	cmp	r3, #128	; 0x80
 80099e4:	d009      	beq.n	80099fa <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80099e6:	7bbb      	ldrb	r3, [r7, #14]
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fd3a 	bl	800a464 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80099f0:	2180      	movs	r1, #128	; 0x80
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fd36 	bl	800a464 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80099f8:	e020      	b.n	8009a3c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fbac 	bl	800a15a <USBD_CtlError>
        break;
 8009a02:	e01b      	b.n	8009a3c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	885b      	ldrh	r3, [r3, #2]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10e      	bne.n	8009a2a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00b      	beq.n	8009a2a <USBD_StdEPReq+0xce>
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
 8009a14:	2b80      	cmp	r3, #128	; 0x80
 8009a16:	d008      	beq.n	8009a2a <USBD_StdEPReq+0xce>
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	88db      	ldrh	r3, [r3, #6]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d104      	bne.n	8009a2a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fd1d 	bl	800a464 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fbe6 	bl	800a1fc <USBD_CtlSendStatus>

        break;
 8009a30:	e004      	b.n	8009a3c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fb90 	bl	800a15a <USBD_CtlError>
        break;
 8009a3a:	bf00      	nop
      }
      break;
 8009a3c:	e0de      	b.n	8009bfc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d002      	beq.n	8009a4e <USBD_StdEPReq+0xf2>
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d015      	beq.n	8009a78 <USBD_StdEPReq+0x11c>
 8009a4c:	e026      	b.n	8009a9c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00c      	beq.n	8009a6e <USBD_StdEPReq+0x112>
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
 8009a56:	2b80      	cmp	r3, #128	; 0x80
 8009a58:	d009      	beq.n	8009a6e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009a5a:	7bbb      	ldrb	r3, [r7, #14]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fd00 	bl	800a464 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009a64:	2180      	movs	r1, #128	; 0x80
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fcfc 	bl	800a464 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009a6c:	e01c      	b.n	8009aa8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fb72 	bl	800a15a <USBD_CtlError>
        break;
 8009a76:	e017      	b.n	8009aa8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	885b      	ldrh	r3, [r3, #2]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d112      	bne.n	8009aa6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d004      	beq.n	8009a94 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a8a:	7bbb      	ldrb	r3, [r7, #14]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fd07 	bl	800a4a2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fbb1 	bl	800a1fc <USBD_CtlSendStatus>
        }
        break;
 8009a9a:	e004      	b.n	8009aa6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fb5b 	bl	800a15a <USBD_CtlError>
        break;
 8009aa4:	e000      	b.n	8009aa8 <USBD_StdEPReq+0x14c>
        break;
 8009aa6:	bf00      	nop
      }
      break;
 8009aa8:	e0a8      	b.n	8009bfc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d002      	beq.n	8009aba <USBD_StdEPReq+0x15e>
 8009ab4:	2b03      	cmp	r3, #3
 8009ab6:	d031      	beq.n	8009b1c <USBD_StdEPReq+0x1c0>
 8009ab8:	e095      	b.n	8009be6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d007      	beq.n	8009ad0 <USBD_StdEPReq+0x174>
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	2b80      	cmp	r3, #128	; 0x80
 8009ac4:	d004      	beq.n	8009ad0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fb46 	bl	800a15a <USBD_CtlError>
          break;
 8009ace:	e08f      	b.n	8009bf0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	da0b      	bge.n	8009af0 <USBD_StdEPReq+0x194>
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	3310      	adds	r3, #16
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	4413      	add	r3, r2
 8009aec:	3304      	adds	r3, #4
 8009aee:	e00a      	b.n	8009b06 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	4413      	add	r3, r2
 8009b06:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2202      	movs	r2, #2
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fb31 	bl	800a17c <USBD_CtlSendData>
          break;
 8009b1a:	e069      	b.n	8009bf0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8009b1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	da11      	bge.n	8009b48 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	f003 020f 	and.w	r2, r3, #15
 8009b2a:	6879      	ldr	r1, [r7, #4]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	440b      	add	r3, r1
 8009b36:	3318      	adds	r3, #24
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d117      	bne.n	8009b6e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fb0a 	bl	800a15a <USBD_CtlError>
            break;
 8009b46:	e053      	b.n	8009bf0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	f003 020f 	and.w	r2, r3, #15
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	4613      	mov	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	440b      	add	r3, r1
 8009b5a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d104      	bne.n	8009b6e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 faf7 	bl	800a15a <USBD_CtlError>
            break;
 8009b6c:	e040      	b.n	8009bf0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009b6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	da0b      	bge.n	8009b8e <USBD_StdEPReq+0x232>
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	3310      	adds	r3, #16
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	4413      	add	r3, r2
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	e00a      	b.n	8009ba4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009b94:	4613      	mov	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ba6:	7bbb      	ldrb	r3, [r7, #14]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <USBD_StdEPReq+0x256>
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b80      	cmp	r3, #128	; 0x80
 8009bb0:	d103      	bne.n	8009bba <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	e00e      	b.n	8009bd8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fc8e 	bl	800a4e0 <USBD_LL_IsStallEP>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	e002      	b.n	8009bd8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 facc 	bl	800a17c <USBD_CtlSendData>
          break;
 8009be4:	e004      	b.n	8009bf0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fab6 	bl	800a15a <USBD_CtlError>
        break;
 8009bee:	bf00      	nop
      }
      break;
 8009bf0:	e004      	b.n	8009bfc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fab0 	bl	800a15a <USBD_CtlError>
      break;
 8009bfa:	bf00      	nop
    }
    break;
 8009bfc:	e004      	b.n	8009c08 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 faaa 	bl	800a15a <USBD_CtlError>
    break;
 8009c06:	bf00      	nop
  }

  return ret;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
	...

08009c14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	885b      	ldrh	r3, [r3, #2]
 8009c22:	0a1b      	lsrs	r3, r3, #8
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	3b01      	subs	r3, #1
 8009c28:	2b06      	cmp	r3, #6
 8009c2a:	f200 80c9 	bhi.w	8009dc0 <USBD_GetDescriptor+0x1ac>
 8009c2e:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <USBD_GetDescriptor+0x20>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009c51 	.word	0x08009c51
 8009c38:	08009c69 	.word	0x08009c69
 8009c3c:	08009ca9 	.word	0x08009ca9
 8009c40:	08009dc1 	.word	0x08009dc1
 8009c44:	08009dc1 	.word	0x08009dc1
 8009c48:	08009d6d 	.word	0x08009d6d
 8009c4c:	08009d93 	.word	0x08009d93
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	7c12      	ldrb	r2, [r2, #16]
 8009c5c:	f107 010a 	add.w	r1, r7, #10
 8009c60:	4610      	mov	r0, r2
 8009c62:	4798      	blx	r3
 8009c64:	60f8      	str	r0, [r7, #12]
    break;
 8009c66:	e0b0      	b.n	8009dca <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	7c1b      	ldrb	r3, [r3, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10d      	bne.n	8009c8c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c78:	f107 020a 	add.w	r2, r7, #10
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	4798      	blx	r3
 8009c80:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3301      	adds	r3, #1
 8009c86:	2202      	movs	r2, #2
 8009c88:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009c8a:	e09e      	b.n	8009dca <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	f107 020a 	add.w	r2, r7, #10
 8009c98:	4610      	mov	r0, r2
 8009c9a:	4798      	blx	r3
 8009c9c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	701a      	strb	r2, [r3, #0]
    break;
 8009ca6:	e090      	b.n	8009dca <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	885b      	ldrh	r3, [r3, #2]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b05      	cmp	r3, #5
 8009cb0:	d856      	bhi.n	8009d60 <USBD_GetDescriptor+0x14c>
 8009cb2:	a201      	add	r2, pc, #4	; (adr r2, 8009cb8 <USBD_GetDescriptor+0xa4>)
 8009cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb8:	08009cd1 	.word	0x08009cd1
 8009cbc:	08009ce9 	.word	0x08009ce9
 8009cc0:	08009d01 	.word	0x08009d01
 8009cc4:	08009d19 	.word	0x08009d19
 8009cc8:	08009d31 	.word	0x08009d31
 8009ccc:	08009d49 	.word	0x08009d49
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	7c12      	ldrb	r2, [r2, #16]
 8009cdc:	f107 010a 	add.w	r1, r7, #10
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	4798      	blx	r3
 8009ce4:	60f8      	str	r0, [r7, #12]
      break;
 8009ce6:	e040      	b.n	8009d6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	7c12      	ldrb	r2, [r2, #16]
 8009cf4:	f107 010a 	add.w	r1, r7, #10
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	4798      	blx	r3
 8009cfc:	60f8      	str	r0, [r7, #12]
      break;
 8009cfe:	e034      	b.n	8009d6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	7c12      	ldrb	r2, [r2, #16]
 8009d0c:	f107 010a 	add.w	r1, r7, #10
 8009d10:	4610      	mov	r0, r2
 8009d12:	4798      	blx	r3
 8009d14:	60f8      	str	r0, [r7, #12]
      break;
 8009d16:	e028      	b.n	8009d6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	7c12      	ldrb	r2, [r2, #16]
 8009d24:	f107 010a 	add.w	r1, r7, #10
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4798      	blx	r3
 8009d2c:	60f8      	str	r0, [r7, #12]
      break;
 8009d2e:	e01c      	b.n	8009d6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009d36:	695b      	ldr	r3, [r3, #20]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	7c12      	ldrb	r2, [r2, #16]
 8009d3c:	f107 010a 	add.w	r1, r7, #10
 8009d40:	4610      	mov	r0, r2
 8009d42:	4798      	blx	r3
 8009d44:	60f8      	str	r0, [r7, #12]
      break;
 8009d46:	e010      	b.n	8009d6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	7c12      	ldrb	r2, [r2, #16]
 8009d54:	f107 010a 	add.w	r1, r7, #10
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4798      	blx	r3
 8009d5c:	60f8      	str	r0, [r7, #12]
      break;
 8009d5e:	e004      	b.n	8009d6a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f9f9 	bl	800a15a <USBD_CtlError>
      return;
 8009d68:	e04b      	b.n	8009e02 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8009d6a:	e02e      	b.n	8009dca <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	7c1b      	ldrb	r3, [r3, #16]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d109      	bne.n	8009d88 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d7c:	f107 020a 	add.w	r2, r7, #10
 8009d80:	4610      	mov	r0, r2
 8009d82:	4798      	blx	r3
 8009d84:	60f8      	str	r0, [r7, #12]
      break;
 8009d86:	e020      	b.n	8009dca <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f9e5 	bl	800a15a <USBD_CtlError>
      return;
 8009d90:	e037      	b.n	8009e02 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	7c1b      	ldrb	r3, [r3, #16]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10d      	bne.n	8009db6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da2:	f107 020a 	add.w	r2, r7, #10
 8009da6:	4610      	mov	r0, r2
 8009da8:	4798      	blx	r3
 8009daa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3301      	adds	r3, #1
 8009db0:	2207      	movs	r2, #7
 8009db2:	701a      	strb	r2, [r3, #0]
      break;
 8009db4:	e009      	b.n	8009dca <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f9ce 	bl	800a15a <USBD_CtlError>
      return;
 8009dbe:	e020      	b.n	8009e02 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f9c9 	bl	800a15a <USBD_CtlError>
    return;
 8009dc8:	e01b      	b.n	8009e02 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8009dca:	897b      	ldrh	r3, [r7, #10]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d011      	beq.n	8009df4 <USBD_GetDescriptor+0x1e0>
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	88db      	ldrh	r3, [r3, #6]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00d      	beq.n	8009df4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	88da      	ldrh	r2, [r3, #6]
 8009ddc:	897b      	ldrh	r3, [r7, #10]
 8009dde:	4293      	cmp	r3, r2
 8009de0:	bf28      	it	cs
 8009de2:	4613      	movcs	r3, r2
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009de8:	897b      	ldrh	r3, [r7, #10]
 8009dea:	461a      	mov	r2, r3
 8009dec:	68f9      	ldr	r1, [r7, #12]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f9c4 	bl	800a17c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	88db      	ldrh	r3, [r3, #6]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d102      	bne.n	8009e02 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f9fd 	bl	800a1fc <USBD_CtlSendStatus>
  }
}
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	889b      	ldrh	r3, [r3, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d130      	bne.n	8009e7c <USBD_SetAddress+0x74>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	88db      	ldrh	r3, [r3, #6]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d12c      	bne.n	8009e7c <USBD_SetAddress+0x74>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	885b      	ldrh	r3, [r3, #2]
 8009e26:	2b7f      	cmp	r3, #127	; 0x7f
 8009e28:	d828      	bhi.n	8009e7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	885b      	ldrh	r3, [r3, #2]
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	d104      	bne.n	8009e4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f989 	bl	800a15a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e48:	e01c      	b.n	8009e84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	7bfa      	ldrb	r2, [r7, #15]
 8009e4e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e52:	7bfb      	ldrb	r3, [r7, #15]
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fb6e 	bl	800a538 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f9cd 	bl	800a1fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d004      	beq.n	8009e72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e70:	e008      	b.n	8009e84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e7a:	e003      	b.n	8009e84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f96b 	bl	800a15a <USBD_CtlError>
  }
}
 8009e84:	bf00      	nop
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	885b      	ldrh	r3, [r3, #2]
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	4b41      	ldr	r3, [pc, #260]	; (8009fa4 <USBD_SetConfig+0x118>)
 8009e9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ea0:	4b40      	ldr	r3, [pc, #256]	; (8009fa4 <USBD_SetConfig+0x118>)
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d904      	bls.n	8009eb2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f955 	bl	800a15a <USBD_CtlError>
 8009eb0:	e075      	b.n	8009f9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d002      	beq.n	8009ec2 <USBD_SetConfig+0x36>
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d023      	beq.n	8009f08 <USBD_SetConfig+0x7c>
 8009ec0:	e062      	b.n	8009f88 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009ec2:	4b38      	ldr	r3, [pc, #224]	; (8009fa4 <USBD_SetConfig+0x118>)
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d01a      	beq.n	8009f00 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8009eca:	4b36      	ldr	r3, [pc, #216]	; (8009fa4 <USBD_SetConfig+0x118>)
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2203      	movs	r2, #3
 8009ed8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009edc:	4b31      	ldr	r3, [pc, #196]	; (8009fa4 <USBD_SetConfig+0x118>)
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7ff fa2a 	bl	800933c <USBD_SetClassConfig>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d104      	bne.n	8009ef8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f932 	bl	800a15a <USBD_CtlError>
          return;
 8009ef6:	e052      	b.n	8009f9e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f97f 	bl	800a1fc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009efe:	e04e      	b.n	8009f9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f97b 	bl	800a1fc <USBD_CtlSendStatus>
      break;
 8009f06:	e04a      	b.n	8009f9e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f08:	4b26      	ldr	r3, [pc, #152]	; (8009fa4 <USBD_SetConfig+0x118>)
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d112      	bne.n	8009f36 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2202      	movs	r2, #2
 8009f14:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009f18:	4b22      	ldr	r3, [pc, #136]	; (8009fa4 <USBD_SetConfig+0x118>)
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009f22:	4b20      	ldr	r3, [pc, #128]	; (8009fa4 <USBD_SetConfig+0x118>)
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7ff fa26 	bl	800937a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f964 	bl	800a1fc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009f34:	e033      	b.n	8009f9e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009f36:	4b1b      	ldr	r3, [pc, #108]	; (8009fa4 <USBD_SetConfig+0x118>)
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d01d      	beq.n	8009f80 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff fa14 	bl	800937a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009f52:	4b14      	ldr	r3, [pc, #80]	; (8009fa4 <USBD_SetConfig+0x118>)
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f5c:	4b11      	ldr	r3, [pc, #68]	; (8009fa4 <USBD_SetConfig+0x118>)
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	4619      	mov	r1, r3
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7ff f9ea 	bl	800933c <USBD_SetClassConfig>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d104      	bne.n	8009f78 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f8f2 	bl	800a15a <USBD_CtlError>
          return;
 8009f76:	e012      	b.n	8009f9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f93f 	bl	800a1fc <USBD_CtlSendStatus>
      break;
 8009f7e:	e00e      	b.n	8009f9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f93b 	bl	800a1fc <USBD_CtlSendStatus>
      break;
 8009f86:	e00a      	b.n	8009f9e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f8e5 	bl	800a15a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009f90:	4b04      	ldr	r3, [pc, #16]	; (8009fa4 <USBD_SetConfig+0x118>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff f9ef 	bl	800937a <USBD_ClrClassConfig>
      break;
 8009f9c:	bf00      	nop
    }
  }
}
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20000a2c 	.word	0x20000a2c

08009fa8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	88db      	ldrh	r3, [r3, #6]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d004      	beq.n	8009fc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 f8cc 	bl	800a15a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009fc2:	e021      	b.n	800a008 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	db17      	blt.n	8009ffe <USBD_GetConfig+0x56>
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	dd02      	ble.n	8009fd8 <USBD_GetConfig+0x30>
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	d00b      	beq.n	8009fee <USBD_GetConfig+0x46>
 8009fd6:	e012      	b.n	8009ffe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	3308      	adds	r3, #8
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f8c8 	bl	800a17c <USBD_CtlSendData>
      break;
 8009fec:	e00c      	b.n	800a008 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f8c0 	bl	800a17c <USBD_CtlSendData>
      break;
 8009ffc:	e004      	b.n	800a008 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f8aa 	bl	800a15a <USBD_CtlError>
      break;
 800a006:	bf00      	nop
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a020:	3b01      	subs	r3, #1
 800a022:	2b02      	cmp	r3, #2
 800a024:	d81e      	bhi.n	800a064 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	88db      	ldrh	r3, [r3, #6]
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d004      	beq.n	800a038 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f892 	bl	800a15a <USBD_CtlError>
      break;
 800a036:	e01a      	b.n	800a06e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d005      	beq.n	800a054 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f043 0202 	orr.w	r2, r3, #2
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	330c      	adds	r3, #12
 800a058:	2202      	movs	r2, #2
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f88d 	bl	800a17c <USBD_CtlSendData>
    break;
 800a062:	e004      	b.n	800a06e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f877 	bl	800a15a <USBD_CtlError>
    break;
 800a06c:	bf00      	nop
  }
}
 800a06e:	bf00      	nop
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	885b      	ldrh	r3, [r3, #2]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d106      	bne.n	800a096 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f8b3 	bl	800a1fc <USBD_CtlSendStatus>
  }

}
 800a096:	bf00      	nop
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d80b      	bhi.n	800a0cc <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	885b      	ldrh	r3, [r3, #2]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d10c      	bne.n	800a0d6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f899 	bl	800a1fc <USBD_CtlSendStatus>
    }
    break;
 800a0ca:	e004      	b.n	800a0d6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f843 	bl	800a15a <USBD_CtlError>
    break;
 800a0d4:	e000      	b.n	800a0d8 <USBD_ClrFeature+0x3a>
    break;
 800a0d6:	bf00      	nop
  }
}
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781a      	ldrb	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	785a      	ldrb	r2, [r3, #1]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	3302      	adds	r3, #2
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	b29a      	uxth	r2, r3
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	3303      	adds	r3, #3
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	4413      	add	r3, r2
 800a110:	b29a      	uxth	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	3304      	adds	r3, #4
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	3305      	adds	r3, #5
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	b29b      	uxth	r3, r3
 800a126:	021b      	lsls	r3, r3, #8
 800a128:	b29b      	uxth	r3, r3
 800a12a:	4413      	add	r3, r2
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	3306      	adds	r3, #6
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	b29a      	uxth	r2, r3
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	3307      	adds	r3, #7
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	b29b      	uxth	r3, r3
 800a142:	021b      	lsls	r3, r3, #8
 800a144:	b29b      	uxth	r3, r3
 800a146:	4413      	add	r3, r2
 800a148:	b29a      	uxth	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	80da      	strh	r2, [r3, #6]

}
 800a14e:	bf00      	nop
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b082      	sub	sp, #8
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800a164:	2180      	movs	r1, #128	; 0x80
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f97c 	bl	800a464 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800a16c:	2100      	movs	r1, #0
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f978 	bl	800a464 <USBD_LL_StallEP>
}
 800a174:	bf00      	nop
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	4613      	mov	r3, r2
 800a188:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2202      	movs	r2, #2
 800a18e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800a192:	88fa      	ldrh	r2, [r7, #6]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a198:	88fa      	ldrh	r2, [r7, #6]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a19e:	88fb      	ldrh	r3, [r7, #6]
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f9e6 	bl	800a576 <USBD_LL_Transmit>

  return USBD_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a1c2:	88fb      	ldrh	r3, [r7, #6]
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 f9d4 	bl	800a576 <USBD_LL_Transmit>

  return USBD_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1e6:	88fb      	ldrh	r3, [r7, #6]
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f000 f9e5 	bl	800a5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2204      	movs	r2, #4
 800a208:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a20c:	2300      	movs	r3, #0
 800a20e:	2200      	movs	r2, #0
 800a210:	2100      	movs	r1, #0
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f9af 	bl	800a576 <USBD_LL_Transmit>

  return USBD_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b082      	sub	sp, #8
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2205      	movs	r2, #5
 800a22e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a232:	2300      	movs	r3, #0
 800a234:	2200      	movs	r2, #0
 800a236:	2100      	movs	r1, #0
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f9bf 	bl	800a5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f7ff f89e 	bl	80093a0 <USBD_LL_SetupStage>
}
 800a264:	bf00      	nop
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a27e:	78fa      	ldrb	r2, [r7, #3]
 800a280:	6879      	ldr	r1, [r7, #4]
 800a282:	4613      	mov	r3, r2
 800a284:	00db      	lsls	r3, r3, #3
 800a286:	1a9b      	subs	r3, r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	440b      	add	r3, r1
 800a28c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	78fb      	ldrb	r3, [r7, #3]
 800a294:	4619      	mov	r1, r3
 800a296:	f7ff f8ce 	bl	8009436 <USBD_LL_DataOutStage>
}
 800a29a:	bf00      	nop
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a2b4:	78fa      	ldrb	r2, [r7, #3]
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	00db      	lsls	r3, r3, #3
 800a2bc:	1a9b      	subs	r3, r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	440b      	add	r3, r1
 800a2c2:	3348      	adds	r3, #72	; 0x48
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	78fb      	ldrb	r3, [r7, #3]
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	f7ff f925 	bl	8009518 <USBD_LL_DataInStage>
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff fa33 	bl	8009750 <USBD_LL_SOF>
}
 800a2ea:	bf00      	nop
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d001      	beq.n	800a30a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a306:	f7f6 fd25 	bl	8000d54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a310:	7bfa      	ldrb	r2, [r7, #15]
 800a312:	4611      	mov	r1, r2
 800a314:	4618      	mov	r0, r3
 800a316:	f7ff f9e5 	bl	80096e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff f99e 	bl	8009662 <USBD_LL_Reset>
}
 800a326:	bf00      	nop
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
	...

0800a330 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff f9e0 	bl	8009704 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	6812      	ldr	r2, [r2, #0]
 800a352:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a356:	f043 0301 	orr.w	r3, r3, #1
 800a35a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d005      	beq.n	800a370 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a364:	4b04      	ldr	r3, [pc, #16]	; (800a378 <HAL_PCD_SuspendCallback+0x48>)
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	4a03      	ldr	r2, [pc, #12]	; (800a378 <HAL_PCD_SuspendCallback+0x48>)
 800a36a:	f043 0306 	orr.w	r3, r3, #6
 800a36e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	e000ed00 	.word	0xe000ed00

0800a37c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7ff f9cf 	bl	800972e <USBD_LL_Resume>
}
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a3aa:	78fa      	ldrb	r2, [r7, #3]
 800a3ac:	4611      	mov	r1, r2
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7ff f9f5 	bl	800979e <USBD_LL_IsoOUTIncomplete>
}
 800a3b4:	bf00      	nop
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a3ce:	78fa      	ldrb	r2, [r7, #3]
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff f9d6 	bl	8009784 <USBD_LL_IsoINIncomplete>
}
 800a3d8:	bf00      	nop
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff f9e2 	bl	80097b8 <USBD_LL_DevConnected>
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff f9df 	bl	80097ce <USBD_LL_DevDisconnected>
}
 800a410:	bf00      	nop
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	4608      	mov	r0, r1
 800a422:	4611      	mov	r1, r2
 800a424:	461a      	mov	r2, r3
 800a426:	4603      	mov	r3, r0
 800a428:	70fb      	strb	r3, [r7, #3]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70bb      	strb	r3, [r7, #2]
 800a42e:	4613      	mov	r3, r2
 800a430:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a440:	78bb      	ldrb	r3, [r7, #2]
 800a442:	883a      	ldrh	r2, [r7, #0]
 800a444:	78f9      	ldrb	r1, [r7, #3]
 800a446:	f7f7 fed9 	bl	80021fc <HAL_PCD_EP_Open>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	4618      	mov	r0, r3
 800a452:	f000 f8d7 	bl	800a604 <USBD_Get_USB_Status>
 800a456:	4603      	mov	r3, r0
 800a458:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a474:	2300      	movs	r3, #0
 800a476:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a47e:	78fa      	ldrb	r2, [r7, #3]
 800a480:	4611      	mov	r1, r2
 800a482:	4618      	mov	r0, r3
 800a484:	f7f7 ffb7 	bl	80023f6 <HAL_PCD_EP_SetStall>
 800a488:	4603      	mov	r3, r0
 800a48a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 f8b8 	bl	800a604 <USBD_Get_USB_Status>
 800a494:	4603      	mov	r3, r0
 800a496:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a498:	7bbb      	ldrb	r3, [r7, #14]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a4bc:	78fa      	ldrb	r2, [r7, #3]
 800a4be:	4611      	mov	r1, r2
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7f7 fffc 	bl	80024be <HAL_PCD_EP_ClrStall>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 f899 	bl	800a604 <USBD_Get_USB_Status>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800a4d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a4f2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a4f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	da0b      	bge.n	800a514 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a4fc:	78fb      	ldrb	r3, [r7, #3]
 800a4fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a502:	68f9      	ldr	r1, [r7, #12]
 800a504:	4613      	mov	r3, r2
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	1a9b      	subs	r3, r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	440b      	add	r3, r1
 800a50e:	333e      	adds	r3, #62	; 0x3e
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	e00b      	b.n	800a52c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a51a:	68f9      	ldr	r1, [r7, #12]
 800a51c:	4613      	mov	r3, r2
 800a51e:	00db      	lsls	r3, r3, #3
 800a520:	1a9b      	subs	r3, r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	440b      	add	r3, r1
 800a526:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a52a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a552:	78fa      	ldrb	r2, [r7, #3]
 800a554:	4611      	mov	r1, r2
 800a556:	4618      	mov	r0, r3
 800a558:	f7f7 fe2b 	bl	80021b2 <HAL_PCD_SetAddress>
 800a55c:	4603      	mov	r3, r0
 800a55e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	4618      	mov	r0, r3
 800a564:	f000 f84e 	bl	800a604 <USBD_Get_USB_Status>
 800a568:	4603      	mov	r3, r0
 800a56a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b086      	sub	sp, #24
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	461a      	mov	r2, r3
 800a582:	460b      	mov	r3, r1
 800a584:	72fb      	strb	r3, [r7, #11]
 800a586:	4613      	mov	r3, r2
 800a588:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a598:	893b      	ldrh	r3, [r7, #8]
 800a59a:	7af9      	ldrb	r1, [r7, #11]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	f7f7 fee0 	bl	8002362 <HAL_PCD_EP_Transmit>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800a5a6:	7dfb      	ldrb	r3, [r7, #23]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 f82b 	bl	800a604 <USBD_Get_USB_Status>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800a5b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	607a      	str	r2, [r7, #4]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	72fb      	strb	r3, [r7, #11]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a5de:	893b      	ldrh	r3, [r7, #8]
 800a5e0:	7af9      	ldrb	r1, [r7, #11]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	f7f7 fe72 	bl	80022cc <HAL_PCD_EP_Receive>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 f808 	bl	800a604 <USBD_Get_USB_Status>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800a5f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
	...

0800a604 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	4603      	mov	r3, r0
 800a60c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a60e:	2300      	movs	r3, #0
 800a610:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a612:	79fb      	ldrb	r3, [r7, #7]
 800a614:	2b03      	cmp	r3, #3
 800a616:	d817      	bhi.n	800a648 <USBD_Get_USB_Status+0x44>
 800a618:	a201      	add	r2, pc, #4	; (adr r2, 800a620 <USBD_Get_USB_Status+0x1c>)
 800a61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61e:	bf00      	nop
 800a620:	0800a631 	.word	0x0800a631
 800a624:	0800a637 	.word	0x0800a637
 800a628:	0800a63d 	.word	0x0800a63d
 800a62c:	0800a643 	.word	0x0800a643
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	73fb      	strb	r3, [r7, #15]
    break;
 800a634:	e00b      	b.n	800a64e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a636:	2302      	movs	r3, #2
 800a638:	73fb      	strb	r3, [r7, #15]
    break;
 800a63a:	e008      	b.n	800a64e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a63c:	2301      	movs	r3, #1
 800a63e:	73fb      	strb	r3, [r7, #15]
    break;
 800a640:	e005      	b.n	800a64e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a642:	2302      	movs	r3, #2
 800a644:	73fb      	strb	r3, [r7, #15]
    break;
 800a646:	e002      	b.n	800a64e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a648:	2302      	movs	r3, #2
 800a64a:	73fb      	strb	r3, [r7, #15]
    break;
 800a64c:	bf00      	nop
  }
  return usb_status;
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <__libc_init_array>:
 800a65c:	b570      	push	{r4, r5, r6, lr}
 800a65e:	4e0d      	ldr	r6, [pc, #52]	; (800a694 <__libc_init_array+0x38>)
 800a660:	4c0d      	ldr	r4, [pc, #52]	; (800a698 <__libc_init_array+0x3c>)
 800a662:	1ba4      	subs	r4, r4, r6
 800a664:	10a4      	asrs	r4, r4, #2
 800a666:	2500      	movs	r5, #0
 800a668:	42a5      	cmp	r5, r4
 800a66a:	d109      	bne.n	800a680 <__libc_init_array+0x24>
 800a66c:	4e0b      	ldr	r6, [pc, #44]	; (800a69c <__libc_init_array+0x40>)
 800a66e:	4c0c      	ldr	r4, [pc, #48]	; (800a6a0 <__libc_init_array+0x44>)
 800a670:	f000 f82c 	bl	800a6cc <_init>
 800a674:	1ba4      	subs	r4, r4, r6
 800a676:	10a4      	asrs	r4, r4, #2
 800a678:	2500      	movs	r5, #0
 800a67a:	42a5      	cmp	r5, r4
 800a67c:	d105      	bne.n	800a68a <__libc_init_array+0x2e>
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a684:	4798      	blx	r3
 800a686:	3501      	adds	r5, #1
 800a688:	e7ee      	b.n	800a668 <__libc_init_array+0xc>
 800a68a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a68e:	4798      	blx	r3
 800a690:	3501      	adds	r5, #1
 800a692:	e7f2      	b.n	800a67a <__libc_init_array+0x1e>
 800a694:	0800a9c0 	.word	0x0800a9c0
 800a698:	0800a9c0 	.word	0x0800a9c0
 800a69c:	0800a9c0 	.word	0x0800a9c0
 800a6a0:	0800a9c4 	.word	0x0800a9c4

0800a6a4 <memcpy>:
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	1e43      	subs	r3, r0, #1
 800a6a8:	440a      	add	r2, r1
 800a6aa:	4291      	cmp	r1, r2
 800a6ac:	d100      	bne.n	800a6b0 <memcpy+0xc>
 800a6ae:	bd10      	pop	{r4, pc}
 800a6b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6b8:	e7f7      	b.n	800a6aa <memcpy+0x6>

0800a6ba <memset>:
 800a6ba:	4402      	add	r2, r0
 800a6bc:	4603      	mov	r3, r0
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d100      	bne.n	800a6c4 <memset+0xa>
 800a6c2:	4770      	bx	lr
 800a6c4:	f803 1b01 	strb.w	r1, [r3], #1
 800a6c8:	e7f9      	b.n	800a6be <memset+0x4>
	...

0800a6cc <_init>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	bf00      	nop
 800a6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d2:	bc08      	pop	{r3}
 800a6d4:	469e      	mov	lr, r3
 800a6d6:	4770      	bx	lr

0800a6d8 <_fini>:
 800a6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6da:	bf00      	nop
 800a6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6de:	bc08      	pop	{r3}
 800a6e0:	469e      	mov	lr, r3
 800a6e2:	4770      	bx	lr
